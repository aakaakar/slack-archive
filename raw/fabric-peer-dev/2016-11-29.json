[
    {
        "type": "message",
        "user": "U1VG8LNP3",
        "text": "hi, all. about endorse policy, should it be part of chaincode deploy spec and saved into ledger?",
        "ts": "1480421303.000941"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U1VG8LNP3> it will be on ledger in the lifecycle system chaincode (lccc). it could be \u201coutside\u201d of the deploy spec to make allow isloation of deployment with policy",
        "ts": "1480427363.000942"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "(does that answer the question ?)",
        "ts": "1480427381.000943"
    },
    {
        "type": "message",
        "user": "U1VG8LNP3",
        "text": "<@U0ULK2JPP> I'm wondering how to specify policy of cc. when deploying cc, policy could be contained in deploy transaction(saved to ledger at last) and cached in lccc. the peer that app or sdk connected to will get policy from ledger or lccc and send proposal to endorsers according to endorse policy. am i right?",
        "ts": "1480428619.000944"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U1VG8LNP3> almost \u2026 the only part that maybe incorrect is  `could be contained in deploy transaction`",
        "ts": "1480428739.000945"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "if you mean the policy is sent to the peer in the proposal for deployment, then its fine\u2026 but if you meant the policy is set in the ChaincodeDeploymentSpec then its likely not right. We would then be tying the policy to the deploymentspec (which means when we upgrade the chaincode we have to repeat the policy or copy it from deployment spec or \u2026.). It will be good to keep the policy outside of (isolated from ) deployment spec",
        "ts": "1480428942.000946"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "(that\u2019s  long winded response but aimed at addressing your previous mention of chaincode deployment spec.)",
        "ts": "1480429024.000947"
    },
    {
        "type": "message",
        "user": "U1VG8LNP3",
        "text": "<@U0ULK2JPP>   so deploy proposal will contain ChaincodeDeploySpec and endorse policy ?",
        "ts": "1480429742.000948"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "in some form\u2026 for instance, the endorse policy could be anoher param to the \u201cdeploy\u201d request on the LCCC ?",
        "ts": "1480429798.000949"
    },
    {
        "type": "message",
        "user": "U1VG8LNP3",
        "text": "the cc deploy flow  is begin with a call of LCCC and both ChaincodeDeploySpec and policy will be  param, am i right?",
        "ts": "1480430211.000950"
    },
    {
        "type": "message",
        "user": "U1VG8LNP3",
        "text": "<@U0ULK2JPP> i'm not sure about new cc deploy flow. will check the new arch documents and codes. thank you for detailed answer.:smiley:",
        "ts": "1480430460.000951"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U1VG8LNP3> sure, now that I read above, we may be saying the same thing\u2026. ` cc deploy flow  is begin with a call of LCCC and both ChaincodeDeploySpec and policy will be  param` .. that\u2019s the way I\u2019m thinking too. Basically, the policy is not IN the ChaincodeDeploySpec but could be an additional param to LCCC",
        "ts": "1480430597.000954"
    },
    {
        "type": "message",
        "user": "U1VG8LNP3",
        "text": "<@U0ULK2JPP> does lccc have endorse policy?  or by default a cc deploy proposal need to be endorsed by every endorser in policy?",
        "ts": "1480431656.000955"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U1VG8LNP3> I\u2019m thinking the later but open to discussion. Given all endorsers will have the chaincode and can field requests, I think safe to have all endorsers to accept the chaincode (or \u201csmartcontract\u201d - I hesitate to use this word but it does bring home the point, so will make an exception :slightly_smiling_face: )",
        "ts": "1480432473.000956"
    },
    {
        "type": "message",
        "subtype": "file_share",
        "text": "<@U0KN2SSKE|binhn> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/binhn\/F38UVFSLX\/pasted_image_at_2016_11_29_10_17_am.png|bootstrap &amp; chain creation>",
        "file": {
            "id": "F38UVFSLX",
            "created": 1480432694,
            "timestamp": 1480432694,
            "name": "Pasted image at 2016_11_29 10_17 AM.png",
            "title": "bootstrap &amp; chain creation",
            "mimetype": "image\/png",
            "filetype": "png",
            "pretty_type": "PNG",
            "user": "U0KN2SSKE",
            "editable": false,
            "size": 1075968,
            "mode": "hosted",
            "is_external": false,
            "external_type": "",
            "is_public": true,
            "public_url_shared": false,
            "display_as_bot": false,
            "username": "",
            "url_private": "https:\/\/files.slack.com\/files-pri\/T0J024XGA-F38UVFSLX\/pasted_image_at_2016_11_29_10_17_am.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "url_private_download": "https:\/\/files.slack.com\/files-pri\/T0J024XGA-F38UVFSLX\/download\/pasted_image_at_2016_11_29_10_17_am.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_64": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F38UVFSLX-b28f3c155b\/pasted_image_at_2016_11_29_10_17_am_64.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_80": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F38UVFSLX-b28f3c155b\/pasted_image_at_2016_11_29_10_17_am_80.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_360": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F38UVFSLX-b28f3c155b\/pasted_image_at_2016_11_29_10_17_am_360.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_360_w": 360,
            "thumb_360_h": 210,
            "thumb_480": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F38UVFSLX-b28f3c155b\/pasted_image_at_2016_11_29_10_17_am_480.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_480_w": 480,
            "thumb_480_h": 280,
            "thumb_160": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F38UVFSLX-b28f3c155b\/pasted_image_at_2016_11_29_10_17_am_160.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_720": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F38UVFSLX-b28f3c155b\/pasted_image_at_2016_11_29_10_17_am_720.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_720_w": 720,
            "thumb_720_h": 420,
            "thumb_960": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F38UVFSLX-b28f3c155b\/pasted_image_at_2016_11_29_10_17_am_960.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_960_w": 960,
            "thumb_960_h": 560,
            "thumb_1024": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F38UVFSLX-b28f3c155b\/pasted_image_at_2016_11_29_10_17_am_1024.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_1024_w": 1024,
            "thumb_1024_h": 597,
            "image_exif_rotation": 1,
            "original_w": 1089,
            "original_h": 635,
            "permalink": "https:\/\/hyperledgerproject.slack.com\/files\/binhn\/F38UVFSLX\/pasted_image_at_2016_11_29_10_17_am.png",
            "permalink_public": "https:\/\/slack-files.com\/T0J024XGA-F38UVFSLX-b0eb9a3b7a",
            "channels": [
                "C27E2LGJY"
            ],
            "groups": [],
            "ims": [],
            "comments_count": 0
        },
        "user": "U0KN2SSKE",
        "upload": true,
        "display_as_bot": false,
        "username": "<@U0KN2SSKE|binhn>",
        "bot_id": null,
        "ts": "1480432699.000957"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "configfile for orderer boostrap is created by a standalone tool",
        "ts": "1480432882.000958"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "configfile for `peer chain create`  starts with that from orderer and add chainID and org anchors",
        "ts": "1480432976.000959"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "what about MSPs configuration?",
        "ts": "1480432998.000960"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "who is working on the standalone tool?",
        "ts": "1480433021.000961"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "sorry, too many questions in a single round :slightly_smiling_face:",
        "ts": "1480433037.000962"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "<@U0UGH3X7X> is working on the tool - MSP config is MIA",
        "ts": "1480433064.000963"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "so what is the difference between peer chain create  and peer join channel?",
        "ts": "1480433070.000964"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "MIA?",
        "ts": "1480433081.000965"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "hi angelo ... standalone tool is me :slightly_smiling_face:  and we'll have to update it to add msp config",
        "ts": "1480433082.000966"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "perfect",
        "ts": "1480433090.000967"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "<@U0UGH3X7X>, is there already some code we can look at?",
        "ts": "1480433138.000968"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "`peer chain join &lt;ip:port&gt; &lt;cb&gt;` is a CLI to tell a peer to join a chain specified in cb",
        "ts": "1480433153.000969"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "just added you and elli to code-review",
        "ts": "1480433171.000970"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "great :slightly_smiling_face:",
        "ts": "1480433176.000971"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "please, add also <@U26T99AQ4>",
        "ts": "1480433185.000972"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "thanks!",
        "ts": "1480433191.000973"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "mia = missing in action",
        "ts": "1480433219.000974"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "so config chain create, essentially submits a request to create a chain to the orderers",
        "ts": "1480433262.000975"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "wasnt this in the past done by the application, that would then receive the genesis block and then ask the the peer with that  to join channel?",
        "edited": {
            "user": "U1BC5A0F9",
            "ts": "1480433305.000000"
        },
        "ts": "1480433289.000976"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "<@U1BC5A0F9> yes, `peer chain create &lt;cb&gt;` is a CLI",
        "ts": "1480433370.000978"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "app would do the same if it creates chains",
        "ts": "1480433387.000979"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "ok cool",
        "ts": "1480433401.000980"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "CLI allows scripting network setup",
        "ts": "1480433423.000981"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "but the assumption that the application controls which channels its peers join is still on",
        "ts": "1480433424.000982"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "correct?",
        "ts": "1480433425.000983"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "that is if the app receives a genesis block that is not correctly formed",
        "ts": "1480433444.000984"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "it will not ask its peers to join it",
        "ts": "1480433456.000985"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "the CLI uses the same API that the app would use to create chain",
        "ts": "1480433492.000986"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "ie broadcast\/deliver \u2014 see the flow in the diagram",
        "ts": "1480433519.000987"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "ok",
        "ts": "1480433535.000988"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "Ok in this picture app runs peer chain create with a config file",
        "ts": "1480433599.000989"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "then the peer1 will make a \"broadcaast to the ordering service\" that will create the genesiss block, create the chain",
        "ts": "1480433656.000990"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "the peer1 is the one invoking deliver and waits to receive the genesis block now, correct?",
        "ts": "1480433673.000991"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "that will return this to the app",
        "ts": "1480433721.000992"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "no, think cli = app for an admin or developers\nan app can do the same things as cli; that is, create chains and tell peers to join chains",
        "ts": "1480433791.000993"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "in the diagram, cli leverages peer1\u2019s identity (and code) to submit (broadcast rpc) a config transaction to create a chain",
        "edited": {
            "user": "U0KN2SSKE",
            "ts": "1480433927.000000"
        },
        "ts": "1480433900.000994"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "app doesn\u2019t need to do that since it has the sdk and its own identity",
        "ts": "1480433967.000996"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "<@U0ZR63HLK> I don\u2019t thnk we need these in chaincode.proto  ChaincodeSpec.  Please confirm\n```    string secureContext = 5;\n    ConfidentialityLevel confidentialityLevel = 6;\n    bytes metadata = 7;\n    repeated string attributes = 8;```",
        "ts": "1480434448.000997"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "<@U0KN2SSKE> how should we change chaincode spec or chaincode deployment spec to let the deployer of a cc pick escc\/vscc\/policy they want?",
        "ts": "1480434703.000998"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "Actually I thought deployments were to be done as a config tx?",
        "ts": "1480434870.000999"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "or a tx that is post-processed.",
        "ts": "1480434880.001000"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "Adding <@U0ULK2JPP> here.",
        "ts": "1480434898.001001"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "thought about that but didn\u2019t implement it that way \u2014 it is now a chaincode tx to lifecycle scc, which stores the associated escc\/vscc and policy as state",
        "ts": "1480435120.001002"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "<@U0KN2SSKE>, yes at the fabric level we don't need that anymore",
        "ts": "1480435123.001003"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "<@U0ZR63HLK> thanks",
        "ts": "1480435156.001004"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "and, what would be the escc for the LSCC?",
        "ts": "1480435158.001005"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "none",
        "ts": "1480435171.001006"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "actually, what would be the endorsement policy",
        "ts": "1480435176.001007"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "and the VSCC would do all the processing of such an invoke then?",
        "ts": "1480435196.001008"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "so check the ccid, the chaincode name uniqueness, etc?",
        "ts": "1480435218.001009"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "catching up\u2026 but the last remark caught the eye :slightly_smiling_face:",
        "ts": "1480435296.001010"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "thought we could have a lccc_vscc for sure",
        "ts": "1480435309.001011"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "check deployment , upgrade etc",
        "ts": "1480435323.001012"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "as to the chaincode.proto stuff, binh \u2026 we mayhave to have those fields in some form",
        "ts": "1480435435.001013"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<https:\/\/jira.hyperledger.org\/browse\/FAB-1219>",
        "ts": "1480435436.001014"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "we could associate lscc with an escc\/vscc or just simple acl",
        "ts": "1480435445.001015"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "how do we specify escc\/vscc today on a proposal?",
        "ts": "1480435481.001016"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "`what would be the escc for the LSCC?` \u2026 rephrasing the  question as \u201cI\u2019m deploying a chaincode (smartcontract) \u2026. what is the policy for accepting the deployment\u201d ?  I say we keep it simple with \u201call endorsers should sign off\u201d policy for LCCC stuff",
        "ts": "1480435571.001017"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "`how do we specify escc\/vscc today on a proposal?` - binh, we could enhance the systemchaincode definition to specify a escc and vscc",
        "edited": {
            "user": "U0ULK2JPP",
            "ts": "1480435655.000000"
        },
        "ts": "1480435641.001018"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "so LSCC\u2019s \u201cdeployement\u201d in the code would point to the \u201cescc\u201d and \u201cvscc\u201d for LCCC (if we chose to have it)",
        "ts": "1480435705.001020"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "I think WE have to generalize the system chaincode with escc \/ vscc specs for uniformity in any case - we would of course default them to the default escc and vscc",
        "ts": "1480435766.001021"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "actually I was getting into detailing <https:\/\/jira.hyperledger.org\/browse\/FAB-183>  for \u201cupgrade\u201d which will cover some of the above",
        "ts": "1480435884.001022"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "<@U0ULK2JPP> btw, why lccc in chaincode folder instead of system_chaincode folder?",
        "ts": "1480435948.001023"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "because of the usual import cycle resolution",
        "ts": "1480435977.001024"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "I don\u2019t remember the details (but can get them if you want) but interaction with  chaincode framework was a headache to keep them separate",
        "ts": "1480436030.001025"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "cyclic imports?  not a big deal, i was expecting it to be in the system_chaincode folder and couldn\u2019t find it there so had to search",
        "ts": "1480436142.001026"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "I know",
        "ts": "1480436148.001027"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "It felt horrible to have lccc in the chaincode folder",
        "ts": "1480436164.001028"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "we should revisit once the dust settles down",
        "ts": "1480436182.001029"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "<@U26T99AQ4> not sure if we answer your question",
        "ts": "1480436275.001030"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "<@U0KN2SSKE> (sorry, had to put out another fire) yes, thanks! So LCCC takes as input a `ChaincodeDeploymentSpec` message, which should be enriched to contain 3 new things: ESCC, VSCC and policy. Is that correct? If so, can I go ahead and change the code in that direction?",
        "ts": "1480439518.001031"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "^ <@U0ULK2JPP>",
        "ts": "1480439535.001032"
    },
    {
        "type": "message",
        "user": "U2Z3ABG7N",
        "text": "hey guys - i am using v0.6 for fabric and running the vagrant vm. I have built the peer but when i try make membersrvc, i get an error as below: \nvagrant@hyperledger-devenv:v0.2.1-af0cd3e:~$ make membersrvc\nmake: *** No rule to make target 'membersrvc'.  Stop.\nPlease help",
        "edited": {
            "user": "U2Z3ABG7N",
            "ts": "1480439608.000000"
        },
        "ts": "1480439575.001033"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "<@U26T99AQ4> escc, vscc, and endorsement policy are lccc.deploy input parameters and stored as lccc state",
        "ts": "1480439845.001036"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "I thought the input args to lccc were a `ChaincodeDeploymentSpec` - is that wrong?",
        "edited": {
            "user": "U26T99AQ4",
            "ts": "1480439999.000000"
        },
        "ts": "1480439943.001037"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "<@U0ULK2JPP> <@U0PB67X4K> <@U0KQ9QKH6> to follow up on previous discussions for the SDK to supply the transaction ID, I opened this in JIRA: <https:\/\/jira.hyperledger.org\/browse\/FAB-1222> for node SDK",
        "ts": "1480440061.001039"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "can you please review, and let us know whether the work on the peer side will be done if not already?",
        "ts": "1480440082.001040"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "yes, but these parameters are not to be defined in the `ChaincodeDeploymentSpec` but kept on the tx state; ie write-set",
        "ts": "1480440097.001041"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "oh I see",
        "ts": "1480440194.001042"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "so when endorser\/committer needs to know ESCC\/VSCC\/policy for a given chaincode, it queries LCCC to get this 3-tuple from LCCC's state - correct?",
        "ts": "1480440279.001043"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "<@U13TWBRBL> the app must be able to set the txID;  we already defined the txID field in the tx header \u2014 see common.proto",
        "ts": "1480440291.001044"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "<@U26T99AQ4> correct",
        "ts": "1480440308.001045",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U26T99AQ4"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "yes, understood, i assume the txID will be checked for duplicates by ESCC and VSCC?",
        "edited": {
            "user": "U13TWBRBL",
            "ts": "1480440387.000000"
        },
        "ts": "1480440338.001046"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "<@U13TWBRBL> how is tx ID generated currently?",
        "ts": "1480440385.001047"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "it\u2019s not in v1.0 yet. previously it\u2019s calculated by hashing the tx content",
        "edited": {
            "user": "U13TWBRBL",
            "ts": "1480440447.000000"
        },
        "ts": "1480440414.001049"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "yes, we\u2019ll figure out how to do that efficiently",
        "ts": "1480440431.001050"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "<@U0KN2SSKE> brainstorming with <@U1BC5A0F9> and <@U0ZR63HLK>, we convinced ourselves that `txid = H(creator || nonce)` was the best option on the table",
        "ts": "1480440523.001052"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "it ensures uniqueness, it can be computed in a 3-tier architecture and it can be verified by peers",
        "ts": "1480440558.001053"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "adding <@U1KFCPFQA>  for TXID discussion \u2026 the look up itself can be done cheaply I understood (but  <@U26T99AQ4> do chime in about the uniqueness check concerns as # transactions increase) ...",
        "ts": "1480440596.001054"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "\"be verified by peers\u201d - can you elaborate?",
        "ts": "1480440610.001055"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "cell phone -&gt;SDK -&gt; peer \u2026.",
        "ts": "1480440665.001056"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "can cell phone do `txid = H(creator || nonce)`",
        "ts": "1480440680.001057"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "I\u2019m pretty sure cell phones can do hashing easily",
        "ts": "1480440718.001058"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "&gt; \"be verified by peers\u201d - can you elaborate?\nan endorser\/committer can verify that hash (given creator and nonce) to ensure that txid wasn't picked to force a collision with another txid",
        "ts": "1480440768.001059"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "wouldn\u2019t we need to worry hash algorithm be the same on both ends?",
        "ts": "1480440819.001060"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "oh you mean using the nonce that\u2019s already set in the proposal",
        "ts": "1480440820.001061",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U26T99AQ4"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "ok i think that\u2019s a good idea",
        "ts": "1480440830.001062"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "&gt; wouldn\u2019t we need to worry hash algorithm be the same on both ends?\ndefinitely - hopefully the mobile app will know which hash algo to use (it might be a chain-wide default hash function built into the app itself)",
        "edited": {
            "user": "U26T99AQ4",
            "ts": "1480440880.000000"
        },
        "ts": "1480440850.001063"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "<@U0KN2SSKE> that\u2019s already a requirement, hashing algos must match b\/w the client and peers in order to generate verifiable signatures etc.",
        "ts": "1480440938.001065"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "either way, we would still have to check for uniqueness",
        "ts": "1480440948.001066"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "absolutely",
        "ts": "1480440969.001067"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "so why not just use UUID?",
        "ts": "1480440985.001068"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "but using `H(creator || nunce)` would save you from having to do a look up right?",
        "ts": "1480441004.001069"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "it\u2019d be much faster than using UUID for which you\u2019d have to look up the database against all existing txIDs",
        "edited": {
            "user": "U13TWBRBL",
            "ts": "1480441044.000000"
        },
        "ts": "1480441034.001070"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "&gt; so why not just use UUID?\nwith UUID, 2 creators might (accidentially or maliciously, who knows) pick the same txid. With `H(creator|nonce)` this by definition cannot happen",
        "ts": "1480441047.001072"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "UUID is globally unique",
        "ts": "1480441086.001073"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "of course, we always have to deal with malicious actors",
        "ts": "1480441110.001074"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "But it doesn't bind to a creator",
        "ts": "1480441125.001075"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "The interesting thing about the hash is that you can blame someone ",
        "ts": "1480441140.001076"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": ":)",
        "ts": "1480441142.001077"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "binding is via tx",
        "ts": "1480441157.001078"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "<@U0KN2SSKE> what prevents me from consistently generating UUIDs that match those of another client? If I'm faster I would consistenly get the other client's txes rejected",
        "edited": {
            "user": "U26T99AQ4",
            "ts": "1480441368.000000"
        },
        "ts": "1480441328.001079"
    },
    {
        "user": "U0KMJF9AA",
        "text": "<@U0KMJF9AA|vikasjakhar> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1480441329.001080"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "if instead we go for `H(creator|nonce)`, this is impossible by definition",
        "ts": "1480441396.001083"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "The uuid is supposed to be a random value, difficult to catch another client, no?",
        "ts": "1480441504.001084"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "Nevertheless I vote for the hash :)",
        "ts": "1480441526.001085"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U13TWBRBL>  `I\u2019m pretty sure cell phones can do hashing easily` \u2014 right but will they have all the materials to compute `txid = H(creator || nonce)` ?",
        "ts": "1480441653.001086"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "I think we are making this overly complicated :slightly_smiling_face:",
        "ts": "1480441726.001087"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "<@U26T99AQ4> we don\u2019t want to have too many fields in the tx unnecessarily -  how likely is it to do what you said with uuid? i m not an expert at this but i know it uses all sort of local things to generate the uuid",
        "ts": "1480441800.001088"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "if I'm malicious, I will skip the standard way of UUID generation and will just copy the one I want to force a collision on",
        "ts": "1480441871.001089"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "so the UUID algo may be perfect, but it's not verifiable",
        "ts": "1480441883.001090"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "of course you would, but how could you do what you said \"what prevents me from consistently generating UUIDs that match those of another client? If I'm faster I would consistenly get the other client's txes rejected\"",
        "ts": "1480442075.001091"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "<@U0ULK2JPP> so the \u201ccreator\u201d sits with the SDK, you must have that to submit transaction, and you already have to generate a random number for the nonce part of the transaction. for a web app, it\u2019s a 3-tier (browser -&gt; webapp\/sdk -&gt; peer), the txID is calculated by the mid-tier and pass back to the client",
        "ts": "1480442243.001092"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "a mobile app is typically deployed the same way",
        "ts": "1480442253.001093"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "such that a cell phone does not need to calculate the txID, it just requests it from the mid-tier",
        "ts": "1480442278.001094"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "in some deployments, like secure key, the sdk runs inside the phone",
        "ts": "1480442298.001095"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "that\u2019s the scenario I\u2019m referring to above where the txID generation needs to happen on the phone",
        "ts": "1480442316.001096"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "&gt; of course you would, but how could you do what you said \"what prevents me from consistently generating UUIDs that match those of another client? If I'm faster I would consistenly get the other client's txes rejected\"\n\nOne of the orderers could help me for instance (unless they are *all* trusted); it could look at txes that are submitted for ordering and we could jointly try to get some txes discarded on grounds of txid collision by submitting some txes of my own and hoping that they get ordered first",
        "edited": {
            "user": "U26T99AQ4",
            "ts": "1480442439.000000"
        },
        "ts": "1480442345.001097"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "in all cases, txID is generated by the SDK which already has all the materials",
        "ts": "1480442355.001098",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0ULK2JPP"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "<@U0KN2SSKE> main benefit of using `h(creator || nonce)` is that you get much faster validation of duplicates, because you know \u201ccreator\u201d is unique, \u201cnonce\u201d is unique, and as such the hash of a concatenation of the two are unique",
        "ts": "1480442484.001101"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "with UUID you\u2019d have to look up the database to see if there\u2019s going to be collision",
        "ts": "1480442501.001102"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "<@U13TWBRBL> i thought pat\u2019s use-case indicates the mobile to creates the txID, not getting it from the mid tier",
        "ts": "1480442543.001103"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "mobile app doesn\u2019t have to",
        "ts": "1480442571.001104"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "no, you don\u2019t get faster dup check",
        "ts": "1480442574.001105"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "what you get is the binding that angelo mentioned",
        "ts": "1480442592.001106"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "nothing else",
        "ts": "1480442599.001107"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "if a mobile app doesn\u2019t run the SDK inside it, but rely on a mid-tier (as is the case with most mobile apps), it should get the txID from the mid-tier first",
        "ts": "1480442626.001108"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "Hm so, UUID is a random number right? So if Ale and myself are submitting competitive tx-s and see Ale's otu",
        "ts": "1480442633.001109"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "i can just ssubmit another tx that has the same UUID and stand a chance to have Ale's transaction rejected.",
        "ts": "1480442651.001110"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "we can remove `nonce` from the header and pass it in as part of the tx so that we don\u2019t have to store it \u2014 would that cause any security issues?",
        "ts": "1480442691.001111"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "<@U1BC5A0F9> in reality, i would reckon that you would stand a much higher chance of getting your tx rejected",
        "ts": "1480442768.001112"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "&gt; in reality, i would reckon that you would stand a much higher chance of getting your tx rejected\nthat's probably true, but you are rolling your dice with it and the odds are non-negligible. That is, you have a non-zero chance to actually win",
        "edited": {
            "user": "U26T99AQ4",
            "ts": "1480442861.000000"
        },
        "ts": "1480442838.001113"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "I think i agree with <@U13TWBRBL> on the mid tier architecture",
        "ts": "1480442838.001114"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "but <@U26T99AQ4> and <@U0ZR63HLK> made a convincing point of knowing whom to blame",
        "ts": "1480442848.001115"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "but in this case it is not someone you can blame",
        "ts": "1480442869.001117"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "cause I can always claim  that this happened \"accidentally\"",
        "ts": "1480442883.001118"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": ":slightly_smiling_face:",
        "ts": "1480442884.001119"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "so in this case non-repudiation offered by the signaturess will not help much!",
        "ts": "1480442898.001120"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "i think you could claim \u201caccidentally\u201d but it would be hard for you to prove innocent",
        "ts": "1480442988.001121"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "but thats security!",
        "ts": "1480443090.001122"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "And even if you do. The harm may have already been done.",
        "ts": "1480443104.001123"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "While if one takes some function that includes the creator in a way that non easily computable collisions can be found among different creators, this danger is avoided.",
        "edited": {
            "user": "U1BC5A0F9",
            "ts": "1480443230.000000"
        },
        "ts": "1480443151.001124"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "<@U1BC5A0F9> so what you\u2019re saying is that either way we have problems",
        "ts": "1480443257.001127"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "Hash or something else that is heaviear..",
        "ts": "1480443260.001128"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "I am just saying that if we take UUID that has no connection to the creator of the tx, as reference for detecting replays (and hence rejecting tx-s based on this) then we give attackers an easy way to \"benigly\" attack the system.",
        "ts": "1480443332.001129"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "But in current systems when one uses a phone to make a tx and submit it to some peer\/tier2",
        "edited": {
            "user": "U1BC5A0F9",
            "ts": "1480443388.000000"
        },
        "ts": "1480443358.001130"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "isnt the case that that peer\/tier2 gives a reference back on the tx submitted?",
        "ts": "1480443404.001132"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "in key-management systems this is the case at least, that you take a key identifier after you insert\/geenrate\/add a key",
        "ts": "1480443430.001133"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "the mid tier might not be able to return anything back, so the mobile app would loose the tx",
        "ts": "1480443594.001134"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "it wouldn\u2019t have a ref to query",
        "ts": "1480443615.001135"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "<@U13TWBRBL> it is fine to do it that way but adding another round trip for mobile to submit a tx \u2014 not show stopping tho",
        "ts": "1480443708.001136"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "Using txid = hash(creator || nonce) or txid = hash(tx) will not be impacted by such attacks as the one i mentioned before.",
        "edited": {
            "user": "U1BC5A0F9",
            "ts": "1480443840.000000"
        },
        "ts": "1480443800.001137"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "Cant the mobile app know the creator it is submitting the tx with?",
        "ts": "1480443852.001140"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "Cant we have both ssort of?",
        "ts": "1480443870.001141"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "meaning that for replay attack we use txid = hash(creator | nonce) or hash(tx) , support lookups also based on UUID?",
        "ts": "1480443914.001142"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "that iss user-provided\/or even in place of nonce?",
        "ts": "1480443923.001143"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "how many queries from mobile apps would we have?",
        "ts": "1480443935.001144"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "<@U1BC5A0F9> it looks like txid = hash(creator | nonce) is way to go, but we should only define txid in the header \u2014 we pass nonce in for validation but not storing with the tx.  Would that workable?",
        "ts": "1480444153.001145"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "how does the peer (endorser\/committer) get hold of the nonce to verify the hash?",
        "edited": {
            "user": "U26T99AQ4",
            "ts": "1480444255.000000"
        },
        "ts": "1480444232.001146"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "we would pass it in as part of the rpc call \u2014 want to avoid storing both txid and nonce, 1 of them should go",
        "ts": "1480444426.001148"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "folks seem to want txid in the object;  nonce has no use after the ingress",
        "ts": "1480444509.001149"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "Hm@nonce though is used for binding in the invocation access cntr",
        "ts": "1480444763.001150"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "At the chaincode side ... ",
        "ts": "1480444777.001151"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "Aimed to say: nonce is used to compute the tx binding leveraged in the invocation access cntrl libs we had in the past.",
        "ts": "1480444842.001152"
    },
    {
        "user": "U10LM0FFZ",
        "text": "<@U10LM0FFZ|nickgaski> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1480452591.001153"
    },
    {
        "user": "U37Q1F5FT",
        "text": "<@U37Q1F5FT|firas.qutishat> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1480454329.001154"
    },
    {
        "user": "U1B5DPRLG",
        "text": "<@U1B5DPRLG|lhaskins> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1480455720.001155"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "if a txid can be reliably generated from the SignatureHeader\n```message SignatureHeader {\n    \/\/ Creator of the message, specified as a certificate chain\n    bytes creator = 1;\n\n    \/\/ Arbitrary number that may only be used once. Can be used to detect replay attacks.\n    bytes nonce = 2;\n}```\nCould we list (again) the reasons for also keeping txid in the header",
        "ts": "1480477369.001156"
    },
    {
        "user": "U38H8MS11",
        "text": "<@U38H8MS11|lovesh> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1480488277.001157"
    }
]