[
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "<@U13TWBRBL> and team, take a look at <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2671\/>",
        "ts": "1479719176.000830"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "with this patch, serialized identities are just the raw ASN.1 content of the certificate, without the leading MSP-id",
        "ts": "1479719200.000831",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U11MANG9G",
                    "U13TWBRBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "type": "message",
        "user": "U11MANG9G",
        "text": "Merged.",
        "ts": "1479741576.000832",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U13TWBRBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "<@U26T99AQ4> I\u2019ve been working with <@U0S5KF44D> on using COP server to enroll Peers. do i understand it correctly that after enrollment the new JSON file containing the cert can be used to overwrite fabric\/msp\/peer-config.json, and the peer process will pick up that new content right away? does the peer process need to be restarted? assuming this peer has not handled any requests that would require it to read from that file before (so there\u2019s no caching on the file level)",
        "ts": "1479760185.000833"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "<@U13TWBRBL> correct, if you overwrite fabric\/msp\/peer-config.json and restart the peer, it'll pick up whatever cert and private key you have in there",
        "ts": "1479761390.000834"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "ok",
        "ts": "1479761413.000835"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "note, though, that the root of trust (which should be provided in the genesis block) is still currently hardcoded",
        "ts": "1479761414.000836"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "because we don't have CSCC yet to query",
        "ts": "1479761424.000837"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "oh ok, so is the trust root chained in the cert generated by COP\u2019s CLI? <@U0S5KF44D>?",
        "ts": "1479761494.000838"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "the root of trust is currently hardcoded to be that of .\/testdata\/ec.pem in the COP repo",
        "ts": "1479761531.000839"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "ok, i\u2019m going to assume that\u2019s the same root used to sign the ecerts issued by COP",
        "ts": "1479761594.000840"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "so basically only certs signed by that root CA cert will be trusted",
        "ts": "1479761597.000841"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "unless <@U0S5KF44D> says no",
        "ts": "1479761601.000842"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "ok",
        "ts": "1479761613.000843"
    },
    {
        "type": "message",
        "user": "U0S5KF44D",
        "text": "No, it is not",
        "ts": "1479761692.000844"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "<@U0S5KF44D> the problem is that the peer has currently no way of retrieving root CAs - they should be retrieved from the genesis block or from CONFIG tx",
        "ts": "1479761782.000845"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "but that infrastructure is not yet in place",
        "ts": "1479761788.000846"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "so currently we use\n\n```\nfunc getRootCACertFromCSCC() (string, error) {\n\t\/\/ FIXME: the root CA cert is hardcoded for now because we don't have a genesys block to read it from\n\trootCAPem := \"-----BEGIN CERTIFICATE-----\\n\" +\n\t\t\"MIICYjCCAgmgAwIBAgIUB3CTDOU47sUC5K4kn\/Caqnh114YwCgYIKoZIzj0EAwIw\\n\" +\n\t\t\"fzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNh\\n\" +\n\t\t\"biBGcmFuY2lzY28xHzAdBgNVBAoTFkludGVybmV0IFdpZGdldHMsIEluYy4xDDAK\\n\" +\n\t\t\"BgNVBAsTA1dXVzEUMBIGA1UEAxMLZXhhbXBsZS5jb20wHhcNMTYxMDEyMTkzMTAw\\n\" +\n\t\t\"WhcNMjExMDExMTkzMTAwWjB\/MQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZv\\n\" +\n\t\t\"cm5pYTEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzEfMB0GA1UEChMWSW50ZXJuZXQg\\n\" +\n\t\t\"V2lkZ2V0cywgSW5jLjEMMAoGA1UECxMDV1dXMRQwEgYDVQQDEwtleGFtcGxlLmNv\\n\" +\n\t\t\"bTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABKIH5b2JaSmqiQXHyqC+cmknICcF\\n\" +\n\t\t\"i5AddVjsQizDV6uZ4v6s+PWiJyzfA\/rTtMvYAPq\/yeEHpBUB1j053mxnpMujYzBh\\n\" +\n\t\t\"MA4GA1UdDwEB\/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH\/MB0GA1UdDgQWBBQXZ0I9\\n\" +\n\t\t\"qp6CP8TFHZ9bw5nRtZxIEDAfBgNVHSMEGDAWgBQXZ0I9qp6CP8TFHZ9bw5nRtZxI\\n\" +\n\t\t\"EDAKBggqhkjOPQQDAgNHADBEAiAHp5Rbp9Em1G\/UmKn8WsCbqDfWecVbZPQj3RK4\\n\" +\n\t\t\"oG5kQQIgQAe4OOKYhJdh3f7URaKfGTf492\/nmRmtK+ySKjpHSrU=\\n\" +\n\t\t\"-----END CERTIFICATE-----\"\n\n\treturn rootCAPem, nil\n}\n```",
        "ts": "1479761803.000847"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "where that certificate is the sample cert that you have in the COP tree",
        "ts": "1479761817.000848"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "so you can sign stuff using `testdata\/ec-key.pem` as the keypair and `testdata\/ec.pem` as the certificate to ensure interoperablity between sdk and peer",
        "ts": "1479761959.000849"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "for now",
        "ts": "1479761970.000850"
    },
    {
        "type": "message",
        "user": "U0S5KF44D",
        "text": "yes, i understand ... i just showed Jim how to start COP using those",
        "ts": "1479762087.000851"
    },
    {
        "type": "message",
        "user": "U0S5KF44D",
        "text": "<@U26T99AQ4> Shouldn't that be getRootCACertsFromCSCC() ([]string, error) since we can trust multiple root CA certs?",
        "ts": "1479762266.000852"
    },
    {
        "type": "message",
        "user": "U0S5KF44D",
        "text": "Obviously return an array of one element for now",
        "ts": "1479762316.000853"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "<@U0S5KF44D> will the .\/startServer command re-construct the cop.db? i removed it and restarted the server but it didn\u2019t seem to have made the db again",
        "ts": "1479776484.000854"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "...trying to figure out how to add users to the registry, so far tried removing server\/cop.db and adding user entries to cop.json. but not seeing cop.db getting recreated",
        "ts": "1479776994.000855"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "<@U0S5KF44D> <@U26T99AQ4> <@U0PB67X4K> <@U0ULK2JPP> have you guys tested enrolling a peer with COP, and use the resulting ecert to sign proposals? i don\u2019t think that\u2019s working right now. here\u2019s what I did:\n\n- COP server running and configured to use the ca cert and private key from fabric-cop\/testdata\n- have a Peer instance enroll with COP (using the COP CLI), copy the resulting client.json to \/etc\/hyperledger\/fabric\/msp\/peer-config.json and restart the Peer\n- have SDK enroll with COP and send the resulting ecert to endorser along with signed proposal",
        "ts": "1479799263.000856"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "in that last step I\u2019m getting `Error: The creator's signature over the proposal is not valid, aborting`",
        "ts": "1479799294.000857"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "the error is from failed verify()",
        "ts": "1479799310.000858"
    }
]