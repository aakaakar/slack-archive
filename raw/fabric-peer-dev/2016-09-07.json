[
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "<@U0XR6J961>",
        "ts": "1473246333.000029"
    },
    {
        "user": "U0XR6J961",
        "inviter": "U1AU8DRQR",
        "text": "<@U0XR6J961|simon> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1473246339.000030"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "what kind of errors are we talking about?",
        "ts": "1473246429.000031"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "I guess any errors that are present in the code",
        "ts": "1473246844.000032"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "argument, ledger, consensus, io, anything",
        "ts": "1473246872.000033"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "nowadays, they are just formatted and sometimes propagated. sometimes not.",
        "ts": "1473246899.000034"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "and they are just error-s, so you have to look at the string to decide what is that",
        "ts": "1473246929.000035"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i think this first needs a triage of errors - some are fatal, some can be recovered, some need to be reported",
        "ts": "1473246989.000036"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "some go out via network, some get logged",
        "ts": "1473247005.000037"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "yes",
        "ts": "1473247043.000038"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "and there are situations when one has to panic",
        "ts": "1473247057.000039"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "that is not an error error but a panic error, fatal",
        "ts": "1473247075.000040"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "correct",
        "ts": "1473247333.000041"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "like, could not get ledger",
        "ts": "1473247337.000042"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "what does that even mean?",
        "ts": "1473247344.000043"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "yeah, I think that is why we have to discuss this and find a solution for the new architecture. some errors are just meaningless texts.",
        "ts": "1473247391.000044"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "1st thing is to look at 'trending' go projects and see how they do it, that is what I am doing right now",
        "ts": "1473247423.000045"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "<https:\/\/github.com\/docker\/docker\/blob\/master\/errors\/errors.go> in docker, they use error codes as <@U0KN2SSKE> suggested",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "docker\/docker",
                "title_link": "https:\/\/github.com\/docker\/docker\/blob\/master\/errors\/errors.go",
                "text": "docker - Docker - the open-source application container engine",
                "fallback": "GitHub: docker\/docker",
                "thumb_url": "https:\/\/avatars0.githubusercontent.com\/u\/5429470?v=3&s=400",
                "from_url": "https:\/\/github.com\/docker\/docker\/blob\/master\/errors\/errors.go",
                "thumb_width": 70,
                "thumb_height": 70,
                "service_icon": "https:\/\/github.com\/apple-touch-icon.png",
                "id": 1
            }
        ],
        "ts": "1473248577.000046"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "I have played with something similar here: <https:\/\/play.golang.org\/p\/qflxyIFjxn>",
        "ts": "1473248616.000048"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "in the end the goal should be (1) for users to have enough information to pinpoint the probem accurately and (2) for developers to have a error framework so adding errors is not too difficult",
        "ts": "1473249285.000049"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "perhaps even better if we can enforce right way to add errors",
        "ts": "1473249308.000050"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "and <@U1AU8DRQR> points out we can probably learn from projects out there instead of reinventing",
        "ts": "1473249351.000051"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "as I see currently there are two approaches 1) just \"plain\" error-s, but that is for smaller projects and that was we used before but it lead to.. you know; and 2) error coding and such things",
        "ts": "1473249584.000052"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "<@U0ULK2JPP> could you have a look at the go playground I sent?",
        "ts": "1473249605.000053"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "where did you send it <@U1AU8DRQR> ?",
        "ts": "1473249816.000054"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "in this channel, 20 minutes ago",
        "ts": "1473249846.000055"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "ok, I see it",
        "ts": "1473249964.000056"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "great start I think. Is this pattern used anywhere ?",
        "ts": "1473250482.000057"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "one suggestion NewError(parent) will automatically add to the stack ?",
        "ts": "1473250536.000058"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "also file\/line info could be embedded \u2026 would need investigation but <http:\/\/stackoverflow.com\/questions\/17640360\/file-or-line-similar-in-golang> has some interesting suggestions",
        "attachments": [
            {
                "title": "_file_ or _line_ similar in golang",
                "title_link": "http:\/\/stackoverflow.com\/questions\/17640360\/file-or-line-similar-in-golang",
                "text": "is there any function in go that is similar like \"_file_\" or \"_line_\" in go, to know who is calling a specific function during run time? In C we have the \"_file_\" line that can be called as macros....",
                "fallback": "_file_ or _line_ similar in golang",
                "thumb_url": "http:\/\/cdn.sstatic.net\/Sites\/stackoverflow\/img\/apple-touch-icon@2.png?v=73d79a89bded&a",
                "from_url": "http:\/\/stackoverflow.com\/questions\/17640360\/file-or-line-similar-in-golang",
                "thumb_width": 316,
                "thumb_height": 316,
                "service_icon": "http:\/\/cdn.sstatic.net\/Sites\/stackoverflow\/img\/favicon.ico?v=4f32ecc8f43d",
                "service_name": "stackoverflow.com",
                "id": 1
            }
        ],
        "ts": "1473250826.000059"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "the general pattern is the error code thing that I saw everywhere. the stacking was just an idea we were talking about yesterday.\nyeah of course there are hundreds of things that could be done better, the stacktrace thing is really just a sample, and the whole is a sketch. :slightly_smiling_face:\nbut if you really like it I can create a package from it in feature\/convergence and there we can have a conversation about it (e.g. comments, review anything)",
        "ts": "1473250959.000061"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "right. as a WIP patch you mean ?",
        "ts": "1473251022.000062"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "yep yep",
        "ts": "1473251127.000063"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "works for me",
        "ts": "1473251846.000064"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "I think it is easier not to have NewError(parent) because that way you have to always stack something or pass nil. This way you can construct the new error and stack the old one using StackError if you want. Btw as it is the developer who implements new, specific errors and adds new status codes he can always write NewMyError(parent) type constructors if needed.",
        "ts": "1473252807.000065"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "I don't really understand the comment related to file\/line info as the current solution uses something like the ones mentioned on the stack overflow page and it works :slightly_smiling_face:",
        "edited": {
            "user": "U1AU8DRQR",
            "ts": "1473253157.000000"
        },
        "ts": "1473253141.000066"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "why do you want a stack?",
        "ts": "1473257466.000068"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "to be able to propagate errors and add new errors. e.g. I cannot do something in my layer because something failed under it. for non-fatal errors which are going to be (just) logged this can be useful",
        "ts": "1473258866.000069"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "but one can easily ignore this feature. e.g. if you have a fatal error, you have to fail, no stacking or anything",
        "ts": "1473258898.000070"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "but we can remove it if it is harmful. <@U0ULK2JPP> <@U0KN2SSKE> what do you think?",
        "ts": "1473258920.000071"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "Right. It is basically an extension of todays model where we append error strings from lower layers and propagate them up through the stack",
        "ts": "1473260086.000072"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "again, looking at best practice in the golang community is the first thing to do",
        "ts": "1473260135.000073"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "The best practice seems to be the error coding.",
        "ts": "1473260176.000074"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "the hope is to build enough support to help identify problems quickly and by the users directly",
        "ts": "1473260181.000075"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "ok",
        "ts": "1473260191.000076"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "I had a look at the most trending projects in github (go only).",
        "ts": "1473260201.000077"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "if we think we can do better, then we can extend",
        "ts": "1473260202.000078"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "ok",
        "ts": "1473260204.000079"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "but this is already extended, as it is error code + stacktracing + stack of errors",
        "ts": "1473260238.000080"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "the stack thing can also be generalized to having a tree of error",
        "ts": "1473260280.000081"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "e.g. MyAlgorithFailedError( Stack: [MyOperation1FailedError, MyOperation2FailedError] )",
        "ts": "1473260319.000082"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "or SomeStepsFailedError",
        "ts": "1473260338.000083"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "I am not 100% sure that this is valid and useful but seems interesting",
        "ts": "1473260354.000084"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "e.g. if there are places where some steps can fail and the whole thing can be good (no panic) one can easily propagate the errors up and mark that the whole thing wasn't a failure",
        "ts": "1473260427.000085"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "I would like to hear everybody's opinion about this",
        "ts": "1473260487.000086"
    },
    {
        "type": "message",
        "user": "U24M29R4G",
        "text": "<@U1AU8DRQR> <@U0ULK2JPP> <@U0KN2SSKE> I found the following link interesting from an error tracing perspective <http:\/\/backtrace.io\/blog\/blog\/2016\/07\/21\/go-support\/>. Just thought I would bring this to your attention..",
        "ts": "1473272250.000087"
    },
    {
        "type": "message",
        "user": "U24M29R4G",
        "text": "just a thought..",
        "ts": "1473272476.000089"
    },
    {
        "type": "message",
        "user": "U24M29R4G",
        "text": "it would be interesting to learn about the design patterns being used by <http:\/\/backtrace.io|backtrace.io> and may be incorporate some of them in hyperledger..",
        "ts": "1473272509.000091"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "<@U24M29R4G> good idea, I will dive into it tomorrow",
        "ts": "1473278321.000092"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "what is your opinion about my current proposal?",
        "ts": "1473278340.000093"
    },
    {
        "user": "U0YJUECE8",
        "text": "<@U0YJUECE8|silliman> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1473281101.000094"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "<@U1AU8DRQR> I like your idea on stacking errors.  For serviceability,  we want to capture as complete as possible the first failure since it is the root cause, and stacking errors would allow maintaining that relationship, and we would also be able to minimize log.error calls",
        "ts": "1473283232.000095"
    }
]