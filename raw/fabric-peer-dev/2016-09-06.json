[
    {
        "user": "U0NK7T8SH",
        "text": "<@U0NK7T8SH|bryan-huang> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1473159046.000004"
    },
    {
        "user": "U1BA8SSTG",
        "text": "<@U1BA8SSTG|pbottein> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1473176569.000005"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "have we decided on the format of the error message?  we talked about error codes like http, but golang <https:\/\/golang.org\/pkg\/errors\/> only accepts a string",
        "edited": {
            "user": "U0KN2SSKE",
            "ts": "1473179801.000000"
        },
        "ts": "1473179612.000006"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "would json string make sense ?  ie,  {code: 404, message:\u201dNot Found\u201d}",
        "ts": "1473179784.000007"
    },
    {
        "user": "U1AU8DRQR",
        "text": "<@U1AU8DRQR|hgabor> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1473184158.000009"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "<@U0KN2SSKE> maybe we should have a look at other go projects, how it is done etc. I could dig into it",
        "ts": "1473184210.000010"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "good idea",
        "ts": "1473184240.000011"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "we currently using Errorf to format the inner errors, and at the end, we end up with unintelligible string to the outer most caller \u2014 often times, the users",
        "edited": {
            "user": "U0KN2SSKE",
            "ts": "1473184421.000000"
        },
        "ts": "1473184343.000012"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "so, somehow, we need to stack up errors, right?",
        "ts": "1473184463.000014"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "some structure that helps to pinpoint where and why an error happened while not making it terrible for develepers to add an error to the chain",
        "ts": "1473184487.000015"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "right",
        "ts": "1473184520.000016"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "right, that could be one way\u2026 but definitely we should look at other go projects too",
        "ts": "1473184529.000017"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "so some \"error throwing + handling framework\" with some internal error struct which can hold important info",
        "ts": "1473184567.000018"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "stack could become an issue for recursion :slightly_smiling_face: the error handling itself could become a problem",
        "ts": "1473184590.000019"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "but right, stack would be a great approach",
        "ts": "1473184621.000020"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "which part of the old code is the most problematic from an error handling perspective? what do you think",
        "ts": "1473185287.000021"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "i would say pbft in consensus dir is most complex",
        "ts": "1473190309.000022"
    },
    {
        "type": "message",
        "user": "U28F9NALC",
        "text": "Hi guys I posted this question in general as well but thought of asking it in this channel as it's more relevant. ",
        "ts": "1473192370.000023"
    },
    {
        "type": "message",
        "user": "U28F9NALC",
        "text": "Is there a documentation how to bring up a non validating peer please? ",
        "ts": "1473192425.000024"
    },
    {
        "type": "message",
        "user": "U28F9NALC",
        "text": "I have a chaincode similar to <https:\/\/github.com\/hyperledger\/fabric\/tree\/master\/examples\/chaincode\/go\/asset_management>",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "hyperledger\/fabric",
                "title_link": "https:\/\/github.com\/hyperledger\/fabric\/tree\/master\/examples\/chaincode\/go\/asset_management",
                "text": "Read-only mirror of <https:\/\/gerrit.hyperledger.org\/r\/#\/admin\/projects\/fabric>",
                "fallback": "GitHub: hyperledger\/fabric",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400",
                "from_url": "https:\/\/github.com\/hyperledger\/fabric\/tree\/master\/examples\/chaincode\/go\/asset_management",
                "thumb_width": 142,
                "thumb_height": 142,
                "service_icon": "https:\/\/github.com\/apple-touch-icon.png",
                "id": 1
            }
        ],
        "ts": "1473192510.000025"
    },
    {
        "type": "message",
        "user": "U28F9NALC",
        "text": "It requires security meta data to be added to the transaction which will be validated by the validator. I am hoping this needs to be added by a NVP..... ",
        "ts": "1473192566.000027"
    },
    {
        "type": "message",
        "user": "U28F9NALC",
        "text": "Is there a way to interact with a NVP using a CLI or a REST API? ",
        "ts": "1473192726.000028"
    }
]