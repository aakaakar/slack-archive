[
    {
        "user": "U1G3WJ740",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1G3WJ740|castlesb> has joined the channel",
        "ts": "1467298706.001111"
    },
    {
        "user": "U1LNG6E8H",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1LNG6E8H|mikej> has joined the channel",
        "ts": "1467298766.001112"
    },
    {
        "type": "message",
        "user": "U1LNG6E8H",
        "text": "How sandboxed is the chaincode runtime? Does the runtime _enforce_ that query chaincode functions cannot actually write anything?",
        "ts": "1467298768.001113"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "<@U1LNG6E8H>: currently the chaincode runs in a somewhat permissive docker container\u2026eventually it will be more restrictive",
        "ts": "1467300484.001114"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "as far as query enforcement, yes, at least w.r.t. fabric state",
        "ts": "1467300503.001115"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "(chaincode only has indirect access to world state via the shim API (e.g. GetState, PutState)",
        "ts": "1467300527.001116"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "it runs in a different process context (and in fact, a docker container) and can only access a) its own portion of world state, and b) during queries, a RO form of it",
        "ts": "1467300571.001117"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "that said, because the container is somewhat permissive right now, the code could conceivably do some form of persistence within a query call within the limits of its docker jail",
        "ts": "1467300629.001118"
    },
    {
        "type": "message",
        "user": "U1LNG6E8H",
        "text": "Thanks <@U0KPFAZNF> , this helps a lot. I don't totally understand the last part of the statement, but this is probably because I'm new at this. Will the \"permissive\" nature be made more secure in the next ~1\/2 year or so? Are PutState calls (direct or indirect) prevented from running during _query_ calls (they would need to work during an _invoke_ call)?\n\nIs there documentation somewhere that describes the concurrency\/consistency guarantees? For example, imagine a contract that moves\/records asset movements from A to B. Now imagine there are two simultaneous invocations of that contract: one moves the balance from alice to bob and the second moves the balance from alice to charlie. What do I need to do as a programmer to make sure that the original asset was not \"double spent\"?",
        "ts": "1467303070.001119"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yes, they are rejected for queries",
        "ts": "1467304667.001120"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "there is no simultaneous",
        "ts": "1467304680.001121"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "invokes are serialized",
        "ts": "1467304688.001122"
    },
    {
        "type": "message",
        "user": "U1LNG6E8H",
        "text": "Excellent, thanks.",
        "ts": "1467304739.001123"
    },
    {
        "user": "U18D82GJH",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U18D82GJH|codascud> has joined the channel",
        "ts": "1467311261.001124"
    },
    {
        "type": "message",
        "user": "U11HH3P7Y",
        "text": "Unit tests are failing in Jenkins z machines.. Builds are failing consistently. here is the failed build log file.. <https:\/\/jenkins.hyperledger.org\/job\/fabric-github-verify-z\/332\/consoleFull>",
        "ts": "1467314629.001125"
    },
    {
        "type": "message",
        "user": "U0UKTPMG8",
        "text": "<@U11HH3P7Y>: this appears to be the unit tests now, correct?",
        "ts": "1467315372.001126"
    },
    {
        "type": "message",
        "user": "U11HH3P7Y",
        "text": "yes",
        "ts": "1467315388.001127"
    },
    {
        "type": "message",
        "user": "U0UKTPMG8",
        "text": "k",
        "ts": "1467315394.001128"
    },
    {
        "type": "message",
        "user": "U11MANG9G",
        "text": "Instead of spamming this channel by merely reminding us all about the new channel, I'll just say that I'm going to discuss the verbosity of the logging of the `membersrvc` process (<https:\/\/github.com\/hyperledger\/fabric\/issues\/2085>)...",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "Membership Services (refactoring): graceful services shutdown \u00b7 Issue #2085 \u00b7 hyperledger\/fabric \u00b7 GitHub",
                "title_link": "https:\/\/github.com\/hyperledger\/fabric\/issues\/2085",
                "text": "Membership Services should be able to to shutdown\/stop services (more) gracefully. Each *CA performs a few steps at init (from loading configrations\/keys to opening a DB connection and creating ta...",
                "fallback": "GitHub: Membership Services (refactoring): graceful services shutdown \u00b7 Issue #2085 \u00b7 hyperledger\/fabric",
                "thumb_url": "https:\/\/avatars0.githubusercontent.com\/u\/1161321?v=3&s=400",
                "from_url": "https:\/\/github.com\/hyperledger\/fabric\/issues\/2085",
                "thumb_width": 420,
                "thumb_height": 420,
                "service_icon": "https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png",
                "id": 1
            }
        ],
        "ts": "1467319727.001129"
    },
    {
        "type": "message",
        "user": "U11MANG9G",
        "text": "... here: <#C1J0BM448> :wink:",
        "ts": "1467319807.001133"
    }
]