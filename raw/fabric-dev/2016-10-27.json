[
    {
        "user": "U2UT57Y6Q",
        "text": "<@U2UT57Y6Q|nitin> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1477560690.002294"
    },
    {
        "user": "U2URZF2AF",
        "text": "<@U2URZF2AF|zxc> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1477561848.002295"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U13TWBRBL>  `it\u2019ll be up to the application code to inspect endorsement inside ProposalResponse and judge on whether criteria have been met. is that still the case` \u2026 I think so. I remember we also talked about how the application can just get ProposalResponse from the first Endorser and pass that to others so other endorsers can use that in addition to the endorsement policy.  We should revisit this to see if we still want to do this and if so,  go over the details",
        "edited": {
            "user": "U0ULK2JPP",
            "ts": "1477570681.000000"
        },
        "ts": "1477570650.002296"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "its more like a pre-check though - as VSCC will actually enforce endorsement policy as well as MVCC",
        "ts": "1477578730.002298"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "so the app is not the sole gatekeeper",
        "ts": "1477578737.002299"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "but you would build the thing responsible for obtaining, packaging and submitting endorsed transactions using the client sdk(s)",
        "ts": "1477578788.002300"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "`pre-check` is a good way to think about this, agreed\u2026. perhaps a good time to point at the VSCC angle (verify signatures etc)  as in this <https:\/\/jira.hyperledger.org\/browse\/FAB-187>",
        "ts": "1477579304.002301"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "<@U0ULK2JPP> <@U0PB67X4K> makes sense, and \u201cendorsement policy\u201d on the VSCC side is also to be implemented with pure code right? in other words we are not defining a \u201cendorsement policy\u201d construct to _declaratively_ express \u201cat least 1 valid signature\u201d, \u201cmust be signed by these specific identities\u201d, \u201c80% or more approved and signed\u201d or other custom policies right?",
        "edited": {
            "user": "U13TWBRBL",
            "ts": "1477581211.000000"
        },
        "ts": "1477581178.002302"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U13TWBRBL> `Explicit list of signatures; advanced implementation may allow boolean expressions including AND, OR. For example, (a AND b) OR c` is best done declaratively\u2026 if done in go , users will be forced to implement VSCC for every policy which is not just a usability issue but may also have code bloat and performance. Note that the `(a AND b) OR c` is just a convenience representation\u2026. it could be JSON (<@U0XPR4NP4> suggestion.) This could be part of the support in his dsl.",
        "ts": "1477581433.002304"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "if we do this right this could be a powerful feature\u2026 but need <@U0KN2SSKE> <@U0PB67X4K> input\/signoff",
        "ts": "1477581522.002305"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "\"this could be a powerful feature\u201d - yes agreed, but will this be done by March considering all the work in other areas? it feels like a nice to have feature but not critical",
        "ts": "1477581576.002306"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "I think this is not hard to do\u2026. ? when the dust settles down, its these kind of usability features that determine user buy-in. Just IMO again\u2026 you could be 100% right",
        "ts": "1477581674.002307"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0ULK2JPP> I would stress that JSON is a nice CLI input, because it's human readable, but, internally I would always store as bytes (so we can leverage the protobuf niceness)",
        "ts": "1477582016.002308"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U0XPR4NP4> undoubtedly",
        "ts": "1477582046.002309"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U13TWBRBL> one more thing to consider. \u2026 with this declarative approach, modifying the policy is just a transaction. Users won\u2019t have to install a new VSCC and rebuild",
        "ts": "1477582397.002310"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "For awareness- Binh created a link pointing to the design documentation.  Gossip was added most recently- <https:\/\/wiki.hyperledger.org\/community\/fabric-design-docs>",
        "ts": "1477585781.002311"
    },
    {
        "user": "U11HTMW0H",
        "text": "<@U11HTMW0H|bmos299> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1477597258.002312"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "Who is Tim S?",
        "ts": "1477604163.002313"
    }
]