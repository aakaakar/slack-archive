[
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "<https:\/\/github.com\/hyperledger\/fabric\/pull\/1754> I have a strange error here:  Error opening DB IO error: lock \/var\/hyperledger\/test\/ledger_test\/db\/LOCK: Resource temporarily unavailable \nIsn't this a Jenkins\/environment problem? Can somebody take a look?",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "Add transaction rejection events by gabre \u00b7 Pull Request #1754 \u00b7 hyperledger\/fabric \u00b7 GitHub",
                "title_link": "https:\/\/github.com\/hyperledger\/fabric\/pull\/1754",
                "text": "This change adds a new type of events: transaction rejection. These events are sent out to listeners in case the corresponding chain code of a transaction exited with error. Description See the s...",
                "fallback": "GitHub: Add transaction rejection events by gabre \u00b7 Pull Request #1754 \u00b7 hyperledger\/fabric",
                "thumb_url": "https:\/\/avatars2.githubusercontent.com\/u\/5565153?v=3&s=400",
                "from_url": "https:\/\/github.com\/hyperledger\/fabric\/pull\/1754",
                "thumb_width": 420,
                "thumb_height": 420,
                "service_icon": "https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png",
                "id": 1
            }
        ],
        "ts": "1466411679.000765"
    },
    {
        "type": "message",
        "user": "U0UHG4VP1",
        "text": "<@U1AU8DRQR>: this is an ongoing issue, I\u2019m not sure who is working on it",
        "ts": "1466412199.000767"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "<@U0UHG4VP1>: thanks",
        "ts": "1466412442.000768"
    },
    {
        "type": "message",
        "subtype": "file_share",
        "text": "<@U1CK6522F|zuowang> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/zuowang\/F1JAWEW1H\/_____________20160617150935.png|\u5fae\u4fe1\u622a\u56fe_20160617150935.png> and commented: I am taking a look at chaincode example asset_management.go. It uses the same TCert all the time. Then I found a way in protocol-spec.md to address this problem. But is it implemented now in fabric? I didn't find api access to TCert from client side, how can I construct a transaction like that?",
        "file": {
            "id": "F1JAWEW1H",
            "created": 1466415036,
            "timestamp": 1466415036,
            "name": "\u5fae\u4fe1\u622a\u56fe_20160617150935.png",
            "title": "\u5fae\u4fe1\u622a\u56fe_20160617150935.png",
            "mimetype": "image\/png",
            "filetype": "png",
            "pretty_type": "PNG",
            "user": "U1CK6522F",
            "editable": false,
            "size": 283653,
            "mode": "hosted",
            "is_external": false,
            "external_type": "",
            "is_public": true,
            "public_url_shared": false,
            "display_as_bot": false,
            "username": "",
            "url_private": "https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1JAWEW1H\/_____________20160617150935.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "url_private_download": "https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1JAWEW1H\/download\/_____________20160617150935.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_64": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1JAWEW1H-0bd64165a9\/_____________20160617150935_64.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_80": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1JAWEW1H-0bd64165a9\/_____________20160617150935_80.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_360": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1JAWEW1H-0bd64165a9\/_____________20160617150935_360.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_360_w": 360,
            "thumb_360_h": 272,
            "thumb_480": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1JAWEW1H-0bd64165a9\/_____________20160617150935_480.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_480_w": 480,
            "thumb_480_h": 362,
            "thumb_160": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1JAWEW1H-0bd64165a9\/_____________20160617150935_160.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_720": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1JAWEW1H-0bd64165a9\/_____________20160617150935_720.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_720_w": 720,
            "thumb_720_h": 543,
            "thumb_960": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1JAWEW1H-0bd64165a9\/_____________20160617150935_960.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_960_w": 960,
            "thumb_960_h": 724,
            "image_exif_rotation": 1,
            "original_w": 1014,
            "original_h": 765,
            "permalink": "https:\/\/hyperledgerproject.slack.com\/files\/zuowang\/F1JAWEW1H\/_____________20160617150935.png",
            "permalink_public": "https:\/\/slack-files.com\/T0J024XGA-F1JAWEW1H-12324eb85f",
            "channels": [
                "C0YPYBVJM"
            ],
            "groups": [],
            "ims": [],
            "comments_count": 2,
            "initial_comment": {
                "id": "Fc1JAWF3MZ",
                "created": 1466415036,
                "timestamp": 1466415036,
                "user": "U1CK6522F",
                "is_intro": true,
                "comment": "I am taking a look at chaincode example asset_management.go. It uses the same TCert all the time. Then I found a way in protocol-spec.md to address this problem. But is it implemented now in fabric? I didn't find api access to TCert from client side, how can I construct a transaction like that?",
                "channel": ""
            }
        },
        "user": "U1CK6522F",
        "upload": true,
        "display_as_bot": false,
        "username": "<@U1CK6522F|zuowang>",
        "bot_id": null,
        "ts": "1466415038.000769"
    },
    {
        "type": "message",
        "user": "U1CK6522F",
        "text": "reflect.DeepEqual takes as high as 8.3% of total cpu time and it's in a critical path(in the call path to commit reqs, which is linear(anyone tell me why?)). I believe the throughput would be much better if we can do it more efficiently.\nconsensus\/obcpbft\/obc-batch.go:211\n\t\t\/\/ TODO, this is a really and inefficient way to do this, but because reqs aren't comparable, they cannot be retrieved from the map directly\n\t\tfor oreq := range op.outstandingReqs {\n\t\t\tif reflect.DeepEqual(oreq, req) {\n\t\t\t\tdelete(op.outstandingReqs, oreq)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}",
        "ts": "1466415681.000770",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0ZJZBJLF"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "zuowang: you are right",
        "ts": "1466416054.000771"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i'll work on a fix",
        "ts": "1466416067.000772"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "I see that the block of code above isn't there anymore, but the \/\/ TODO is still present:\n<https:\/\/github.com\/hyperledger\/fabric\/commit\/35326c25f99b038286a58330fdef87d23fe5f473?diff=unified#diff-189f6ddf1228ef2e673a70a711ff57b5R209>",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "Merge pull request #1877 from jyellick\/keep-state-if-can-execute \u00b7 hyperledger\/fabric@35326c2 \u00b7 GitHub",
                "title_link": "https:\/\/github.com\/hyperledger\/fabric\/commit\/35326c25f99b038286a58330fdef87d23fe5f473?diff=unified#diff-189f6ddf1228ef2e673a70a711ff57b5R209",
                "text": "Stabilize PBFT under stress with periodic viewchange",
                "fallback": "GitHub: Merge pull request #1877 from jyellick\/keep-state-if-can-execute \u00b7 hyperledger\/fabric@35326c2",
                "thumb_url": "https:\/\/avatars2.githubusercontent.com\/u\/3342057?v=3&s=200",
                "from_url": "https:\/\/github.com\/hyperledger\/fabric\/commit\/35326c25f99b038286a58330fdef87d23fe5f473?diff=unified#diff-189f6ddf1228ef2e673a70a711ff57b5R209",
                "thumb_width": 200,
                "thumb_height": 200,
                "service_icon": "https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png",
                "id": 1
            }
        ],
        "edited": {
            "user": "U0ZJZBJLF",
            "ts": "1466421712.000000"
        },
        "ts": "1466421699.000773"
    },
    {
        "user": "U1JBVRNQ3",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1JBVRNQ3|virajkamat> has joined the channel",
        "ts": "1466424268.000776"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "Hey, I'm running a test with PBFT-batch in which I deploy a CC (example 2 from github):\n```\n    \"ctorMsg\": {\n        \"function\":\"init\",\n        \"args\":[\"a\", \"5000\", \"b\", \"0\"]\n    }\n```\nwith invoke: \n````\n      \"ctorMsg\": {\n         \"function\":\"invoke\",\n         \"args\":[\"a\", \"b\",\"1\"]\n      }\n```\nSo after 5000 invocations, all A has to get to B, but when I do a query I get: ``` Query Response:{\"Name\":\"a\",\"Amount\":\"3902\"} ``` constantly, which means - it doesn't really work. \nWhen I re-run, sometimes it gets to 0, but sometimes it gets stuck.... Is there any known of issue of things like that?",
        "edited": {
            "user": "U0ZJZBJLF",
            "ts": "1466428481.000000"
        },
        "ts": "1466428462.000777"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "<@U0ZJZBJLF>: are you confirming each invoke or otherwise implementing flow control?",
        "ts": "1466428590.000779"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "you need to run in closed loop",
        "ts": "1466428610.000780"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "agree with <@U0XR6J961>",
        "ts": "1466428621.000781"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "most likely most of your invokes are being discarded because you overload the system",
        "ts": "1466428638.000782"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "yeah, if some invocation returns a non 200 return code I don't continue sending. I've also never seen such a case in which the invocation returned a non 200 code",
        "ts": "1466428641.000783"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "nono",
        "ts": "1466428646.000784"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "oh I see",
        "ts": "1466428656.000785"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "the 200 is just about the request being accepted initially",
        "ts": "1466428661.000786"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "<@U0ZJZBJLF>: return code isn\u2019t enough as the system is async\u2026you have to wait for confirmation technically...",
        "ts": "1466428683.000787"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i implemented that long ago - i think we need to really do this",
        "ts": "1466428703.000788"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "one problem right now (that is being actively worked on) is ascertaining status of a txn isnt as easy as it needs to be",
        "ts": "1466428708.000789"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "people get confused",
        "ts": "1466428709.000790"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "when do we drop requests?",
        "ts": "1466428711.000791"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "In the code I've never seen such a thing that \"drop this request if we're overloaded\"",
        "ts": "1466428723.000792"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "well we shouldn't drop requests",
        "ts": "1466428726.000793"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "and that is a problem",
        "ts": "1466428734.000794"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "but where do we do that?",
        "ts": "1466428735.000795"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "the request gets into the consensus and into that events.go shared channel",
        "ts": "1466428755.000796"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "because if we don't drop them, they are stored somewhere in memory",
        "ts": "1466428757.000797"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "of course",
        "ts": "1466428777.000798"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "but, I thought that dropping requests isn't implemented",
        "ts": "1466428787.000799"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "is it implemented? if yes- where, if you can spare the time to say",
        "ts": "1466428801.000800"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "we drop messages",
        "ts": "1466428811.000801"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "but we should be retrying requests",
        "ts": "1466428818.000802"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "you drop messages... where? how?",
        "ts": "1466428836.000803"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "(code wise)",
        "ts": "1466428841.000804"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "messages are dropped in broadcaster",
        "ts": "1466428851.000805"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "or are they",
        "ts": "1466428886.000806"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "hmm",
        "ts": "1466428888.000807"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i think what we really need is statistics on all these things",
        "ts": "1466428917.000808"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "can you say where in the code?",
        "ts": "1466428919.000809"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "dropped (if we can tell), and queued requests",
        "ts": "1466428939.000810"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "hm maybe we don't drop?",
        "ts": "1466428969.000811"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yea i think we don't",
        "ts": "1466428984.000812"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "<@U0XR6J961>: if we don\u2019t, we need to",
        "ts": "1466428985.000813"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i wrestled with channels",
        "ts": "1466429005.000814"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "and had problems testing it",
        "ts": "1466429011.000815"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "it could simply be that his observation of incomplete status is at least partially because the queue hasnt completed",
        "ts": "1466429013.000816"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "so i rewrote it",
        "ts": "1466429014.000817"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "and i think now we don't drop unless grpc fails",
        "ts": "1466429026.000818"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "(and\/or stalled)",
        "ts": "1466429032.000819"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": ":neutral_face: If we don't drop, then where do they disappear to?",
        "ts": "1466429032.000820"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yacovm: i don't know",
        "ts": "1466429040.000821"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yacovm: i think now is the time to add statistics",
        "ts": "1466429060.000822"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "sounds like a potential bug\u2026though that said, blind submission without confirmation is just asking for trouble",
        "ts": "1466429080.000823"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "ghaskins: what do you think, how should we do statistics?",
        "ts": "1466429086.000824"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "have a goroutine process that triggers updates?",
        "ts": "1466429101.000825"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "<@U0KPFAZNF>:  - how do I submit non-blindly?",
        "ts": "1466429103.000826"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "or do we register pointers to integers and serve those directly",
        "ts": "1466429123.000827"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "<@U0XR6J961>: the way I usually do it is to optimize the fast path",
        "ts": "1466429128.000828"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "yeah, thats what I would recommend",
        "ts": "1466429145.000829"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "let the fast path have direct access, query path can be indirect",
        "ts": "1466429158.000830"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "it often means aggregation isnt wholly accurate\/syncrhonized, but who cares",
        "ts": "1466429172.000831"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "(I should\u2019t say \u201cwho cares\u201d, but what I mean is, the trade off is worth it",
        "ts": "1466429192.000832"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yes",
        "ts": "1466429207.000833"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "often times you are just looking for general velocity",
        "ts": "1466429230.000834"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i shall do this after benchmarking this requeststore thing",
        "ts": "1466429232.000835",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0KPFAZNF"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "would you also do derivatives?",
        "ts": "1466429246.000836"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "not sure what you mean",
        "ts": "1466429258.000837"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "well, requests\/sec",
        "ts": "1466429264.000838"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "instead of total numbers",
        "ts": "1466429267.000839"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "oh, yes I typically include those but often times its better to do them in the client",
        "ts": "1466429293.000840"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "stats client, i mean",
        "ts": "1466429300.000841"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "soooo... ummm back to my question, what would you suggest me to do, in order to have 0 \"dropped\"\/\"disappeared\" messages? increase the time between concurrent invocations and hope for the best?",
        "ts": "1466429313.000842"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i wonder whether there are telemetry libs",
        "ts": "1466429341.000843"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "that we can use",
        "ts": "1466429343.000844"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "<@U0ZJZBJLF>: for the long term solution, what you should do is hook into the event channel for confirmation, and implement a sliding window so you are never more than N outstanding",
        "ts": "1466429345.000845"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yacovm: wait until there is an event for the transaction",
        "ts": "1466429360.000846"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yea that's what i did",
        "ts": "1466429366.000847"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "I thought the event channel isn't implemented yet?",
        "ts": "1466429367.000848"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "for the short term, the event channel isnt fully baked so you\u2019ll have to fake flow control",
        "ts": "1466429369.000849"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "yeah I get you",
        "ts": "1466429392.000850"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "you can do that in various ways, the cheesiest\/quickest is to just artificially slow things down",
        "ts": "1466429404.000851"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "<https:\/\/github.com\/corecode\/fabric\/commit\/f4c01cef3e1514ada057b291dfc8a6de1da39163>",
        "ts": "1466429420.000852"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "why haven't you merged it, if it was done long ago?",
        "ts": "1466429720.000853"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "it's a bad hack :slightly_smiling_face:",
        "ts": "1466429798.000854"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "well, I put a 500 millis delay between 2 consequent requests, and it's stuck on 3813 now. I don't think it was because of too many requests queued.",
        "ts": "1466430279.000855"
    },
    {
        "type": "message",
        "user": "U0N1D1UAE",
        "text": "<@U0ZJZBJLF> Look in the peer logs, you may find ERRO messages about the peers dropping transactions because the queues are  full",
        "ts": "1466430362.000856"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yacovm: if the network seems stuck, submit a single request and capture the logs",
        "ts": "1466430425.000857"
    },
    {
        "type": "message",
        "user": "U0N1D1UAE",
        "text": "PBFT Batch is not fully functional yet either, see issue #1857",
        "ts": "1466430451.000858"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "Yeah, first thing to figure out is, does it miss some transactions but catch others (flakey) or stop completely (stall)",
        "ts": "1466430502.000859"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i thought all bugs were fixed?",
        "ts": "1466430503.000860"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "no such errors in the logs, and the network isn't stuck... it can't be, it's on the same node",
        "ts": "1466430515.000861"
    },
    {
        "type": "message",
        "user": "U0N1D1UAE",
        "text": "<@U0XR6J961> Not yet",
        "ts": "1466430528.000862"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "that seems like a state transfer issue",
        "ts": "1466430535.000863"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "By \"stuck\" we mean is it still processing some transactions or stalled completely",
        "ts": "1466430552.000864"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "<@U0N1D1UAE>:  have you looked at <@U0XPR4NP4> 's PR #1877 ?",
        "ts": "1466430609.000865"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "ok ok my bad about after adding the 500 millis timeout thing, I had an auto-suicide timer in the script after enough time, forgot to turn it off after I significantly raised the total running time :cold_sweat:",
        "ts": "1466430681.000866"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "hehe",
        "ts": "1466430715.000867"
    },
    {
        "type": "message",
        "user": "U0N1D1UAE",
        "text": "<@U0UGH3X7X> Jason is aware of issue #1857 and never suggested to me that #1877 would fix it, but I can try it later today",
        "ts": "1466430785.000868"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0N1D1UAE>: 1877 should actually fix 1857, however, I found a different bug which is currently causing problems for busywork, (1917), if you find that buswork times out without successfully deploying, I can give you a workaround",
        "ts": "1466430888.000869"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "what's the cause for that?",
        "ts": "1466430939.000870"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "the view change lock?",
        "ts": "1466430945.000871"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Right",
        "ts": "1466430954.000872"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "(<@U0N1D1UAE> I referenced 1857 in 1877 as fixed, I can also post it to the issue next time if you'd prefer)",
        "ts": "1466430984.000873"
    },
    {
        "type": "message",
        "user": "U0N1D1UAE",
        "text": "Please - that way I\u2019m sure to get an email when the issue is fixed",
        "ts": "1466431141.000874"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Sure thing, sorry for the confusion",
        "ts": "1466431175.000875"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "ghaskins: what's the policy of using other libraries?",
        "ts": "1466431177.000876"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "<@U0XR6J961>: first off: \u201cI dont know\u201d :wink:  Second, can you provide more context?",
        "ts": "1466431210.000877"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "are you talking about golang packages, etc?",
        "ts": "1466431218.000878"
    },
    {
        "type": "message",
        "user": "U0P2GSA8Z",
        "text": "hi all, no fabric call today?",
        "ts": "1466431250.000879"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yes",
        "ts": "1466431253.000880"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "policy wise, I am not sure\u2026technically, I know we use govendor generally as the primary mechanism",
        "ts": "1466431262.000881"
    },
    {
        "type": "message",
        "user": "U0P2GSA8Z",
        "text": "ah, I got the invite",
        "ts": "1466431282.000882"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "<@U0XR6J961>: personally, I am a big fan of reusing quality libraries, so I welcome it with the caveat that IANAL",
        "ts": "1466431424.000883"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "ok",
        "ts": "1466431518.000884"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "<https:\/\/github.com\/corecode\/fabric\/tree\/telemetry> a start",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "corecode\/fabric",
                "title_link": "https:\/\/github.com\/corecode\/fabric\/tree\/telemetry",
                "text": "Blockchain fabric code",
                "fallback": "GitHub: corecode\/fabric",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400",
                "from_url": "https:\/\/github.com\/corecode\/fabric\/tree\/telemetry",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https:\/\/github.com\/apple-touch-icon.png",
                "id": 1
            }
        ],
        "ts": "1466440873.000885"
    },
    {
        "type": "message",
        "user": "U0MSG4RL7",
        "text": "<@U0XR6J961>: re: telemetry code - have you considered using a statsd client inside fabric, and then running a (local) statsd server (which can be any statd implementation)? statsd then supports multiple backends to which you can pour the metrics.",
        "ts": "1466457865.000887"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "Announcing Hyperledger Fabric release v0.5-developer-preview \n<https:\/\/github.com\/hyperledger\/fabric\/wiki\/Fabric-Releases>",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "hyperledger\/fabric",
                "title_link": "https:\/\/github.com\/hyperledger\/fabric\/wiki\/Fabric-Releases",
                "text": "fabric - Fabric is a blockchain project in Incubation proposed to the community and documented at <https:\/\/goo.gl\/RYQZ5N>. Information on what Incubation entails can be found in the Hyperledger Proj...",
                "fallback": "GitHub: hyperledger\/fabric",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400",
                "from_url": "https:\/\/github.com\/hyperledger\/fabric\/wiki\/Fabric-Releases",
                "thumb_width": 142,
                "thumb_height": 142,
                "service_icon": "https:\/\/github.com\/apple-touch-icon.png",
                "id": 1
            }
        ],
        "ts": "1466460982.000888"
    },
    {
        "type": "message",
        "user": "U0N1D1UAE",
        "text": "<@U0XPR4NP4> Yes, please provide the workaround you mentioned above for #1917",
        "ts": "1466462687.000890"
    },
    {
        "type": "message",
        "user": "U0N1D1UAE",
        "text": "I\u2019ve tried adding sleeps between network deployment and starting the tests with mixed success.",
        "edited": {
            "user": "U0N1D1UAE",
            "ts": "1466462775.000000"
        },
        "ts": "1466462766.000891"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0N1D1UAE> You can use PR 1927 or increase the wait time after starting the peers before issuing the first request ",
        "ts": "1466468096.000893"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "You may see duplicated requests, that is a side effect of the latest broadcasting changes, fix in progress for tomorrow ",
        "ts": "1466468226.000894"
    }
]