[
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "<@U0KM61BCP> <@U0Z41KY5V> and others how do you like it this way? <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/875\/>",
        "ts": "1473850164.000345"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Sorry <@U0Z81GL6S>, just saw that. I switched to `noops` and tried it your way with just one peer (and security\/privacy `on`). I get the following error:",
        "attachments": [
            {
                "fallback": "[September 13th, 2016 6:36 PM] anya: <@U0XQ35CDD> did you try running just a membership service and peer processes like i recommended and deploying?? i.e. NOT with Docker containers at first? any luck on that? we have extensively tested the Fabric05 branch just last week\u2026",
                "ts": "1473806207.000327",
                "author_subname": "anya",
                "channel_id": "C0YPYBVJM",
                "channel_name": "fabric-dev",
                "is_msg_unfurl": true,
                "text": "<@U0XQ35CDD> did you try running just a membership service and peer processes like i recommended and deploying?? i.e. NOT with Docker containers at first? any luck on that? we have extensively tested the Fabric05 branch just last week\u2026",
                "author_name": "Anna Derbakova",
                "author_link": "https:\/\/hyperledgerproject.slack.com\/team\/anya",
                "author_icon": "https:\/\/secure.gravatar.com\/avatar\/ca41f03f8f2149f37cc5896af658a663.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0011-48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "color": "D0D0D0",
                "from_url": "https:\/\/hyperledgerproject.slack.com\/archives\/fabric-dev\/p1473806207000327",
                "is_share": true,
                "footer": "Posted in #fabric-dev"
            }
        ],
        "ts": "1473854542.000346"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "`12:00:26.969 [ledger] sendProducerBlockEvent -&gt; ERRO 415 Error unmarshalling deployment transaction for block event: proto: protos.ChaincodeDeploymentSpec: wiretype end group for non-group`",
        "ts": "1473854549.000347"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U0XQ35CDD> that error can be ignored\u2026 the fabric wanted to set the huge deploy payload to nil before sending the event out but cannot decrypt",
        "ts": "1473854666.000348"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "we should really remove that error",
        "ts": "1473854686.000349"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "<@U0ULK2JPP>: Gotcha.",
        "ts": "1473854856.000350"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Problem solved: `rm -rf \/var\/lib\/docker\/network` and restarted the daemon.",
        "ts": "1473858623.000351"
    },
    {
        "user": "U1L24390X",
        "text": "<@U1L24390X|wlahti> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1473860428.000352"
    },
    {
        "type": "message",
        "user": "U0KM61BCP",
        "text": "<https:\/\/github.com\/juju\/errgo> <@U1AU8DRQR> can you please investigate this and let us all know what you think? I would also encourage others to chime in",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "juju\/errgo",
                "title_link": "https:\/\/github.com\/juju\/errgo",
                "text": "errgo - Error tracing and annotation.",
                "fallback": "GitHub: juju\/errgo",
                "thumb_url": "https:\/\/avatars2.githubusercontent.com\/u\/4604548?v=3&s=400",
                "from_url": "https:\/\/github.com\/juju\/errgo",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https:\/\/github.com\/apple-touch-icon.png",
                "id": 1
            }
        ],
        "ts": "1473860698.000353"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "I have already linked this some days ago",
        "ts": "1473860754.000355"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "I think this could do the same (and even more) as my 'error handling framework' commit. But I am not sure we need this as it turned out most of us suggest keeping error handling very lightweight (e.g. just with the 'native go facilities', error)",
        "ts": "1473860968.000356",
        "reactions": [
            {
                "name": "white_check_mark",
                "users": [
                    "U1MNES6NR"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "<@U0KM61BCP> another interesting 3pp: <https:\/\/godoc.org\/github.com\/spacemonkeygo\/errors>",
        "attachments": [
            {
                "title": "Package errors",
                "title_link": "https:\/\/godoc.org\/github.com\/spacemonkeygo\/errors",
                "text": "Package errors is a flexible error support library for Go",
                "fallback": "Package errors",
                "from_url": "https:\/\/godoc.org\/github.com\/spacemonkeygo\/errors",
                "service_icon": "https:\/\/godoc.org\/favicon.ico",
                "service_name": "godoc.org",
                "id": 1
            }
        ],
        "ts": "1473861058.000357"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "<@U0KM61BCP> with Juju we could have the error call stack, error stacking, error codes, and even more but the question is if we need those :slightly_smiling_face: as I know, most of us says we don't",
        "ts": "1473861176.000359"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "the same is true for spacemonkey :space_invader:",
        "edited": {
            "user": "U1AU8DRQR",
            "ts": "1473861316.000000"
        },
        "ts": "1473861298.000360"
    },
    {
        "type": "message",
        "user": "U0KM61BCP",
        "text": "At the very least, I think we should start using error codes",
        "ts": "1473861432.000362"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "I would go with error codes (as it is a common pattern in go) + stack trace (as it helps a lot)",
        "ts": "1473861471.000363"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "<@U12452RAP> said that stack trace should be optional. I think it should be 'mandatory', we should have one general HyperLedger Error type that would be used everywhere in the project (it would have a stacktrace + error code)",
        "ts": "1473861592.000364",
        "reactions": [
            {
                "name": "+1::skin-tone-3",
                "users": [
                    "U1CS08EP3"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "<@U0XR6J961> argued about the current usage of errors, and that we should refactor the whole code as we have been misusing golang errors",
        "ts": "1473861643.000365"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "I think stack traces should be dumped to file - trace file  :wink:",
        "ts": "1473862690.000366"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "never propagated up the error handling stack",
        "ts": "1473862705.000367"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "we'll need to start separating out \"logs\" and actually have real log files rather than redirecting stdout and stderr",
        "edited": {
            "user": "U0PB67X4K",
            "ts": "1473862761.000000"
        },
        "ts": "1473862741.000368"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "but if you log the error in a higher layer how do you get the stack traces?",
        "ts": "1473862775.000370"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "I think logging needs to be configurable, where to write it, etc",
        "ts": "1473862794.000371"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "well I admit I am not an expert on stack traces with Go - but for example in C++, Java, Node let's say you capture an error - at that point you can log and dump the stack trace and then propagate the error itself forward if you need to (depending on whether you create your own error or whether or not you just pass the error up the stack)",
        "ts": "1473862931.000372"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "I think you should be able to log the stack trace wherever \/ whenever you initially handle the exception instead of having to pass it around.  Maybe I am wrong and\/or missing something  :wink:",
        "ts": "1473862988.000373"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "you can log it (e.g. the same way I store it in the error struct) but if the error is propagated to some higher level where you decide that you have to log it, you can only get the actual stack trace, not the stack trace of the code where the error origitanted",
        "ts": "1473863078.000374"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "do you see my problem?",
        "edited": {
            "user": "U1AU8DRQR",
            "ts": "1473863096.000000"
        },
        "ts": "1473863088.000375"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "sure - but why not just log the trace at point of initial error capture?   why would we decide to dump a trace higher in the stack?   But I see your dilemma.",
        "ts": "1473863389.000377"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "e.g. \"I am a util lib\" and I am called by a more complex util lib. and that one is called by some code which decides that the error given by the lib is not fatal. so it logs it. but why should I log it? I do not know how fatal it will be for the caller, I just return the error.",
        "ts": "1473863565.000378"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "<@U0PB67X4K> what do you think?",
        "ts": "1473864438.000379"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U1AU8DRQR> did you see my comment about errors from go routines ? user command gets propagatd to goroutines\u2026 user stack fields the error. The stack trace there does not say any thing about the \u201creal\u201d error",
        "ts": "1473864641.000380"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "we would also need a disciplined approach to  propogate errors",
        "ts": "1473864662.000381"
    },
    {
        "user": "U0UHG4VP1",
        "text": "<@U0UHG4VP1|ry> has left the channel",
        "type": "message",
        "subtype": "channel_leave",
        "ts": "1473864679.000382"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "yeah. isn't the problem that errors from go routines are not propagated but just lost?",
        "ts": "1473864763.000383"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "yes.",
        "ts": "1473864798.000384"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "the trivial good practice would be to somehow channel back those if they are needed",
        "ts": "1473864823.000385",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0ULK2JPP"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "but I can search for other solutions",
        "ts": "1473864846.000386"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "as we already knew <https:\/\/www.atatus.com\/blog\/goroutines-error-handling\/>",
        "attachments": [
            {
                "service_name": "Speed is a Feature",
                "title": "Goroutines Error Handling",
                "title_link": "https:\/\/www.atatus.com\/blog\/goroutines-error-handling\/",
                "text": "We have now started measuring AJAX Performance as well, as a part of web performance monitoring. Handling of AJAX performance report introduces a new problem. Every page that sends report may get a minimum of 30 to N number of AJAX calls (N been unlimited, depending on how Single Page App has been implemented).",
                "fallback": "Speed is a Feature: Goroutines Error Handling",
                "from_url": "https:\/\/www.atatus.com\/blog\/goroutines-error-handling\/",
                "service_icon": "https:\/\/www.atatus.com\/blog\/images\/logo-icon.png",
                "id": 1
            }
        ],
        "ts": "1473864929.000387"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "that would be a nice if we can do it in a way that\u2019d encourage developer discipline",
        "ts": "1473865107.000389"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "do you think we can encourage that anyhow? :slightly_smiling_face:",
        "ts": "1473873726.000390"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "it feels like a bad practice but we can have a singleton channel in errors.go where errors.fmt(...) could send the errors to",
        "ts": "1473874031.000391"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "<@U0ULK2JPP> what do you think?",
        "ts": "1473874144.000392"
    },
    {
        "type": "message",
        "user": "U0UKSBAKZ",
        "text": "There is a question connected to cross-chaincode requests in Fabric. I have chaincodes A and B. Each chaincode has \u201cInvoke\u201d which reads attributes using stub.ReadCertAttribute(\u201crole\")\nBoth chaincodes see correct attributes\u2019 values if I send direct requests to these chaincodes. \nBut in case if A tries to call stub.InvokeChaincode on B, in this case first chaincode can read Attributes, but second chaincode has \u201cError: The certificate can\u2019t be nil.\u201d error message. \n\nDoes it mean that even if both chaincodes are executed in the same transaction, the SecurityContext is not propagated to B ?",
        "ts": "1473874917.000393"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "<@U0UKSBAKZ> i think thats just a bug\/limitation of the current impl",
        "ts": "1473875390.000394"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "not something that will never be supported",
        "ts": "1473875404.000395"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "i seem to recall cross-chaincode invoke with security=on is currently broken",
        "ts": "1473875430.000396"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "<@U0ULK2JPP> do you know if we carried a JIRA over for it?",
        "ts": "1473875446.000397"
    },
    {
        "type": "message",
        "user": "U0UKSBAKZ",
        "text": "<@U0KPFAZNF>  Thank you!",
        "ts": "1473875571.000398"
    },
    {
        "user": "U2AKT6YS1",
        "text": "<@U2AKT6YS1|ganesh47> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1473875840.000399"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U0KPFAZNF> _i seem to recall cross-chaincode invoke with security=on is currently broken_  - correct",
        "ts": "1473877822.000400"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "I don\u2019t think we carried over a JIRA",
        "ts": "1473877847.000401"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "I\u2019ll open one",
        "ts": "1473877870.000402"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "<@U0ULK2JPP> - I think there is going to be more work involved in actually dealing with cc to cc communication with the new endorser model",
        "ts": "1473880519.000403"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "I would start with that and then add the various tasks",
        "ts": "1473880531.000404"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "although I put this at pretty low priority for v1.0.0 initial release  :wink:",
        "ts": "1473880547.000405"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U0PB67X4K> oh yes. I meant for master to carry over the github issue",
        "ts": "1473880704.000406"
    }
]