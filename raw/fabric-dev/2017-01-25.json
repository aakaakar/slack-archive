[
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "any hint on why I am getting this error when deploying java chaincode in non dev mode?\n```vp0_1         | 11:08:54.470 [dockercontroller] deployImage -&gt; ERRO 173 Error building images: API error (500): {\"message\":\"Cannot locate specified Dockerfile: Dockerfile\"}```",
        "ts": "1485342854.001730"
    },
    {
        "type": "message",
        "user": "U36UDC6RK",
        "text": "Im trying to run the authorizable_counter example (v0.6 , Docker on mac), but by incrementing the counter i get the following error: Position =&gt;  error Failed retrieving extension. Does anyone may know whats going wrong?",
        "ts": "1485350374.001731"
    },
    {
        "type": "message",
        "subtype": "file_share",
        "text": "<@U36UDC6RK|kamo> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/kamo\/F3WAEJPQC\/here_is_my_rest_call.txt|Here is my Rest call>",
        "file": {
            "id": "F3WAEJPQC",
            "created": 1485350387,
            "timestamp": 1485350387,
            "name": "Here_is_my_Rest_call.txt",
            "title": "Here is my Rest call",
            "mimetype": "text\/plain",
            "filetype": "text",
            "pretty_type": "Plain Text",
            "user": "U36UDC6RK",
            "editable": true,
            "size": 311,
            "mode": "snippet",
            "is_external": false,
            "external_type": "",
            "is_public": true,
            "public_url_shared": false,
            "display_as_bot": false,
            "username": "",
            "url_private": "https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3WAEJPQC\/here_is_my_rest_call.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "url_private_download": "https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3WAEJPQC\/download\/here_is_my_rest_call.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "permalink": "https:\/\/hyperledgerproject.slack.com\/files\/kamo\/F3WAEJPQC\/here_is_my_rest_call.txt",
            "permalink_public": "https:\/\/slack-files.com\/T0J024XGA-F3WAEJPQC-16d1a652e7",
            "edit_link": "https:\/\/hyperledgerproject.slack.com\/files\/kamo\/F3WAEJPQC\/here_is_my_rest_call.txt\/edit",
            "preview": "{\r\n  \"jsonrpc\": \"2.0\",\r\n  \"method\": \"invoke\",\r\n  \"params\": {\r\n    \"type\": 1,\r",
            "preview_highlight": "<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>{<\/pre><\/div>\n<div><pre>  &quot;jsonrpc&quot;: &quot;2.0&quot;,<\/pre><\/div>\n<div><pre>  &quot;method&quot;: &quot;invoke&quot;,<\/pre><\/div>\n<div><pre>  &quot;params&quot;: {<\/pre><\/div>\n<div><pre>    &quot;type&quot;: 1,<\/pre><\/div>\n<div><pre><\/pre><\/div>\n<\/div>\n<\/div>\n",
            "lines": 17,
            "lines_more": 12,
            "preview_is_truncated": false,
            "channels": [
                "C0YPYBVJM"
            ],
            "groups": [],
            "ims": [],
            "comments_count": 0
        },
        "user": "U36UDC6RK",
        "upload": true,
        "display_as_bot": false,
        "username": "<@U36UDC6RK|kamo>",
        "bot_id": null,
        "ts": "1485350387.001732"
    },
    {
        "type": "message",
        "user": "U11HTMW0H",
        "text": "Please note chaincode tests now breaking due to the interface change.  <@U11HH3P7Y> hit this in his FIT (functional integration test) run.  <https:\/\/jira.hyperledger.org\/browse\/FAB-1835>.   ....I'm sure other chaincodes are broken too.",
        "ts": "1485351667.001733"
    },
    {
        "type": "message",
        "user": "U2Q0HP4HY",
        "text": "<@U0XPR4NP4> Are we reintroducing the need for ASN1 encoding with the latest commits ?  It looks to me if I read the code updates its now being done with BlockHeader ?",
        "ts": "1485352678.001734"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U2Q0HP4HY> Correct, the conclusion from the crypto team in <#C2GE7GXM1|fabric-crypto> was that this was the best way to get deterministic bytes to hash over for the block header",
        "ts": "1485353324.001735"
    },
    {
        "type": "message",
        "user": "U2Q0HP4HY",
        "text": "This poses a  burden on toolkits for have ASN1 encoding that we so far have avoided.  Why not the protobuf encoding ?  FYI <@U0PB67X4K> <@U13TWBRBL>",
        "ts": "1485353474.001736"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U2Q0HP4HY> Protobuf encoding is not guaranteed to be deterministic",
        "ts": "1485353617.001737"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "At a language level, to handle our certificate structure, ASN.1 is already required",
        "ts": "1485353664.001738"
    },
    {
        "type": "message",
        "user": "U2Q0HP4HY",
        "text": "So far we've not needed for the toolkits",
        "ts": "1485353695.001739"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Understood.  In addition to <@U0PB67X4K> tagging <@U1BC5A0F9> <@U26T99AQ4> <@U0ZR63HLK> as they were also involved in this decision",
        "ts": "1485353778.001740"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "<@U0XPR4NP4> <@U2Q0HP4HY> <@U0ZR63HLK> I\u2019d like to understand this better, so protobuf is not deterministic in the marshal-unmarshal cycles",
        "ts": "1485353863.001741"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Unmarshaling is always deterministic",
        "ts": "1485353881.001742"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Marshaling is not",
        "ts": "1485353884.001743"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "so, ASN.1 is generally used for cryptographic objects because it supposed to give minimal encoding and is deterministic. We know that it is not perfect but it is the de facto standard.",
        "edited": {
            "user": "U0ZR63HLK",
            "ts": "1485353919.000000"
        },
        "ts": "1485353900.001744"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "In practice, we have gotten away with using proto marshaling and depending on it to be deterministic, but there is an explicit disclaimer from the proto folks that it is not guaranteed.",
        "ts": "1485353934.001746"
    },
    {
        "type": "message",
        "user": "U2Q0HP4HY",
        "text": "Ok -so lets scrub protobufs and do everything ASN1 .. :slightly_smiling_face:",
        "ts": "1485353980.001747"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "This was pushed by <@U0XR6J961> months ago, but, was decided we could not accomplish this in the timeframe we had",
        "ts": "1485354025.001748"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "(Also, note that proto encoding\/decoding is noticeably faster than ASN.1, my vague recollection from the benchmarking done a while ago was that it was over an order of magnitude faster)",
        "ts": "1485354108.001749"
    },
    {
        "type": "message",
        "user": "U2Q0HP4HY",
        "text": "I'm failing to imagine how *ALL* of other encoding in protopufs is sufficient and for this single case we now need to use ASN.1",
        "ts": "1485354199.001750"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "The messages have all been designed to tolerate the non-deterministic marshaling of protobuf.  Note that there are many fields which are marshaled bytes.  In many of these cases, it is so that the receiver can verify a signature or hash over the marshaled object before unpacking it.",
        "ts": "1485354434.001751"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "Jason, that\u2019s what i was getting at, as long as the signature is generated over a marshaled bytes and it\u2019s verified before it\u2019s unmarshaled, i think protobuf is fine",
        "ts": "1485354513.001752"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "i\u2019d like to know where this fails and would require ASN.1",
        "ts": "1485354535.001753"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "not simply \u201cit\u2019s more deterministic\"",
        "ts": "1485354553.001754"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "<@U0ZR63HLK> ^^^",
        "ts": "1485354563.001755"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U13TWBRBL> You're absolutely right, if the signature or hash is generated over marshaled bytes, and we have those marshaled bytes, it is sufficient.",
        "ts": "1485354583.001756"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "In the block case, the header, and the block data, both have hashes and signatures.  But they are proto messages, not marshaled bytes.  If the block structure had the header as the marshaled bytes of a BlockHeader message, then we would be okay, but that is not the block structure today",
        "edited": {
            "user": "U0XPR4NP4",
            "ts": "1485354693.000000"
        },
        "ts": "1485354668.001757"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U2Q0HP4HY> <@U13TWBRBL> Out of curiosity, when does the client need to compute the block header hash? I'd have assumed the SDK does not maintain the hash chain, so I'm not sure of what value computing this hash would be?",
        "ts": "1485354875.001759"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "Ok Binh came by open area and a few people congregated---&gt; Here are some notes as a result",
        "ts": "1485354932.001760"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Note that we also need to fix the hashing of the data block, which is targeted to be done as a Merkle tree, but again, unless someone is interested in maintaining the hash chain, I'm not sure what the value of computing this hash is.",
        "ts": "1485354949.001761"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "Chaincode Ednorsement policy did make it in- there is still another 1\/2 to go",
        "ts": "1485354962.001762"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "For Chaincode REturn object - this one is in,.. and everyone needs to rebase- this is going to change your chain code... This guy is to return different status code on every chaincode",
        "ts": "1485355002.001763"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "Anchor peers is blocked because the peer needs the handler finished which Jason Yellick has pushed some of this-- If Jason's stuff is checked in, we can proceed",
        "ts": "1485355066.001764"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "All peers connect to the ordering service- you need to join the channel at bootstrap- that code has to be written, because not all peers will get the identity channel--&gt; Jason Yellick owns this",
        "ts": "1485355123.001765"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U184J2R7S> I can hopefully get this done today.",
        "ts": "1485355141.001766"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "(Am on the hangout, but cannot hear anything)",
        "ts": "1485355150.001767"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "We are almost done with the system chaincode refactoring which will come in this AM-  Murali did that work",
        "ts": "1485355156.001768"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "Chaincode calling chaincode is almost 1\/2 way there- Binh is debugging",
        "ts": "1485355166.001769"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "CLI channel to create default-  barry is working on that relative to the docker image",
        "ts": "1485355181.001770"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "For ledger with Dave enyeart- there are change sets out for finishing couch miscelanous items and query.. we ahve questions on refactoring for chaincode API- he is going to get with Murali",
        "ts": "1485355230.001771"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "Change set on history of key values 9LEVEL DB) IS ALMOST READY (SORRY CAPS)",
        "ts": "1485355242.001772"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "the phantom read work done by Manish is readyy and checked in for review and has +1 reviews from David- needs Binh or Gari to review this.",
        "ts": "1485355268.001773"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "One of the issues is that everyone is so busy- noone is doing the reviews- we need help on this",
        "ts": "1485355283.001774"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "In terms of getting couch environment into docker for next week- Dave Enyeart talked to Barry - bmos299.. we left it that after you get simple happy path, we will add couch to docker compose.",
        "ts": "1485355314.001775"
    },
    {
        "type": "message",
        "user": "U2Q0HP4HY",
        "text": "<@U0XPR4NP4> I think we will eventually need to parse it to get the block number when monitoring what transactions have processed.   The blocknumber will make sure we don't process this again",
        "thread_ts": "1485355326.001776",
        "reply_count": 2,
        "replies": [
            {
                "user": "U0XPR4NP4",
                "ts": "1485355392.001779"
            },
            {
                "user": "U0XPR4NP4",
                "ts": "1485356311.001794"
            }
        ],
        "ts": "1485355326.001776"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "For docker- we have basic path working, we are adding sdk.. Adnan is adding the couch stuff to it",
        "ts": "1485355329.001777"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "Barry is working with Adnan",
        "ts": "1485355339.001778"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "rickr: You can certainly get the block number, but I'm not sure why you need to compute the header hash?",
        "thread_ts": "1485355326.001776",
        "parent_user_id": "U2Q0HP4HY",
        "ts": "1485355392.001779"
    },
    {
        "timestamp": "1485355392001779",
        "is_multiteam": false,
        "slog_is_shared": "0",
        "slog_is_mpdm": null,
        "slog_is_slackbot_dm": false,
        "slog_is_self_dm": false,
        "attachments": [
            {
                "from_url": "https:\/\/hyperledgerproject.slack.com\/archives\/fabric-dev\/p1485355326001776",
                "fallback": "[January 25th, 2017 6:42 AM] rickr: <@U0XPR4NP4> I think we will eventually need to parse it to get the block number when monitoring what transactions have processed.   The blocknumber will make sure we don't process this again",
                "ts": "1485355326.001776",
                "author_subname": "rickr",
                "channel_id": "C0YPYBVJM",
                "channel_name": "fabric-dev",
                "is_msg_unfurl": true,
                "text": "<@U0XPR4NP4> I think we will eventually need to parse it to get the block number when monitoring what transactions have processed.   The blocknumber will make sure we don't process this again",
                "author_name": "Rick Rine",
                "author_link": "https:\/\/hyperledgerproject.slack.com\/team\/rickr",
                "author_icon": "https:\/\/secure.gravatar.com\/avatar\/aa32af034870d28ba4a6828888b04a92.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0019-48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "footer": "1 reply"
            },
            {
                "fallback": "rickr: You can certainly get the block number, but I'm not sure why you need to compute the header hash?",
                "author_name": "Jason Yellick",
                "author_subname": "jyellick",
                "text": "rickr: You can certainly get the block number, but I'm not sure why you need to compute the header hash?",
                "mrkdwn_in": [
                    "text"
                ],
                "author_link": "https:\/\/hyperledgerproject.slack.com\/team\/jyellick",
                "from_url": "https:\/\/hyperledgerproject.slack.com\/archives\/fabric-dev\/p1485355392001779?thread_ts=1485355326001776&cid=C0YPYBVJM",
                "ts": "1485355392.001779",
                "author_icon": "https:\/\/avatars.slack-edge.com\/2016-12-07\/114120422036_060d13e375e6bd4d8bf8_48.png",
                "id": 2
            }
        ],
        "text": "",
        "type": "message",
        "subtype": "reply_broadcast",
        "user": "U0XPR4NP4",
        "ts": "1485355392.001781"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "On the finalized QSCC block tran structures- we talked about that yesterday. I sent a draft of whta we talked about and we will post in community on the channel- one of the questions was get transaction by id- we trun the tran protostructure, but header is above that, but header is importnat.. that is transaction id, time stamp.. so we may need to return the payload. it should be clear in the proposal for that... Dave Enyeart to post this to get feedback from community",
        "ts": "1485355404.001782"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "to ARtem- when we do state synch, are we calling same api to get block from one peer to send to another peer? they are using committer,.. but I think it does use same api.. we need to see if it's a lower level of apis that manipulates bytes... the lower level gets block by # and retunrs the unmarshalled block proto... that's what synch wants to do. maybe we have to optimize and suck the entire file over... Right now, it calls get block... that's very inefficient. We do a lot of marshalling and unmarshalling.. repeated.  Dave is saying we need synch that works on serialized block then.  Artem says ok.  This is not for immecdiate, but needs to be logged in JIRA so as not to forget for optimization and performance (which is focus in February)",
        "ts": "1485355520.001783"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "On the SDK- there is outstanding chainset that needs to be approved.  we're still making progress on event support and join chain. both are going in parallel. we are working on initializing the MSP that is needed to send create chain request to orderer.  All is still on going.  We are targetting event support completion if we don't get all chain creation and chain join-- is that ok? we will have to use CLI... that is the backup plan .. there is a lot of moving parts for chain creation, but we do want to get events support done.  WE haven't added the references to ESCC or VSCC to deploy yet-- that is higher priority it seems like.. this is so application can execute.",
        "ts": "1485355625.001784"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "For event support- i merged chainset that Pat implemented",
        "ts": "1485355634.001785"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "What is ESCC \/VSCC is needed? this is absolutely needed for endorsement. Has something changed?  There are defaults being used.. there is an item that Murali has worked called chaincode lifecyle and endorsement policy.   Currently transaciton comes in, we just say ok fine... but once we have endorsement policy which is mostly done- transaction must be signed by John.  The work on the SDK side is adding a new field to the proposal , identifying ESCC and VSCC by name, which is really not significant,.. and we can add that support.. Policy being things like 3 out of 10 sigs... We can defiintely identify and add in there for policy or we can also default system for this round.  Supposedly application should do preliminary checking on responses- if it's not meeting the policy- it should discard.  Right now, we are just sending things over where VSCC will catch that.  I'd like to keep that as is for end of month for alpha. Yes, sounds reasonable... we do think key to send in ESCC, VSCC, and policy.  The CR that I talked about with endorsement policy is out there. it's called post it notation.. end\/a\/b something like that. you need signature for a and b... is that a string?",
        "ts": "1485355808.001786"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "from application, we haven't decided from community whether string goes all the way to the peer or deployment... or the SDK would proto this into structure- i suspect it's going to be at the peer for desing sake.",
        "ts": "1485355843.001787"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "CLI we can do this already",
        "ts": "1485355854.001788"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "Documentation- There is higher level pieces,.. maybe 7 or 8 separate higher level topics as an overview documentation for the community. 2 that are basically done and we can complete remainder in day or 2... and knock out the rest of the stuff with the various people assigned.",
        "ts": "1485355901.001789"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "The flow being talked about is what is fabric for,.. what is hyperledger community, what are definition of terms, what is architecture, how do you get the docker images up and running,.. and how do you pogram against chaincode.  the hope is to have this and docker images to see what feedback we get in real time meeting next week.",
        "ts": "1485356035.001790"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "we need a sample, Question is what do we show for policy, MSP,etc,. and need some input from the community for this first round ... We do need to probably talk about system chaincode and the apis.. that has to probably come from Murali or Binh at this point.  Performing a query against couchdb we do need to include for complex queries should come from Dave Eneyart",
        "ts": "1485356098.001791"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "When they do the docker compose for getting started- it will have example 2 chaincode.",
        "ts": "1485356189.001792"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "in text, you can create a channel, join a channel with these # of peers, there is a CA set up, here is your node sdk.. do an enroll and signing cert ,.. we provide a very basic nodejs program.. so at least people have some artifacts to give feedback on.",
        "ts": "1485356231.001793"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0ZR63HLK>",
        "thread_ts": "1485355326.001776",
        "parent_user_id": "U2Q0HP4HY",
        "ts": "1485356311.001794"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "we have docker images published somewhere, the docker compose that ties all together, and zip file with some generated materials in generated location so people can connect to it- this gives you network that works,.. another file that shows application code, mpm install and run... seems like maybe that will help get people get started next week?",
        "ts": "1485356325.001796"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "One thing in the YAML we should remove- the fields in security section need e removed -- all those really are not appropriate- that security seciton is getting removed-",
        "ts": "1485356428.001797"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "Chaincode interface chain really is a big bug-- that has to get updated",
        "ts": "1485356445.001798"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "someone could help that and rebase",
        "ts": "1485356450.001799"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "okay, <@U0XPR4NP4> <@U13TWBRBL> <@U2Q0HP4HY>, what I want to say is that ASN.1 is preferable solution, I would say. We can avoid it if necessary. If we do, let's have it properly documented",
        "ts": "1485356763.001800"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U2Q0HP4HY> <@U13TWBRBL> I'm still trying to understand why the SDK ever needs to compute this hash",
        "ts": "1485357372.001801"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "Binh had discussion with Elli and Angelo- I have a function called check acl,. This is the chaincode calling chaincode- before we set everything to invoke another chaincode specification, we check the acl.. and what that means is what we want to do is to check to see whether this transaction in proposal the signature is valid on this channel.. so imagine that chaincode 1 calling chaincode 2. chaincode 1 on channel 1, chaincode 2 on channel 2, chaincode 1 is invoked by user 1... so when proposal comes in, we verify the signature against that user 1 against the config block on channel 1... so now when chaincode 1 calls chaincode 2 on channel 2 passing along the proposal.. so now we have to verify again the user 1 signature against the channel 2 where chaincode 2 is on.. so this is what happens in check acl.  but we seem in code to be missing a few pieces-",
        "ts": "1485358011.001802"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "there is check sig from creator- message validation go... it's a local function..  I think I can call this function, but this function- is that it's local, so we need to change to global. but the problem is this- it takes the information we only have from a side proposal, which is at this point is in the handler at this point.. the only thing we have is th eproposal, we don't have side proposal.  I want to talk to someone who created this- Elli, angelo, ale? do we need all of this- can we work with proposal or side proposal to call this function?  We can get message bytes is the side proposal is the proposal bytes itself...",
        "ts": "1485358109.001803"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "We either have to change our handler to pass the enitre proposal.. versus just the proposal given by this function.",
        "ts": "1485358127.001804"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "Is this happening on the same peer? you can assume that the proposal has already been verified, because it's verified in the first channel, so you don't have to verify anymore- if the peer is malicious- it's malicious.",
        "ts": "1485358154.001805"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "We have to assume the peer is doing the right thing- let's assume that this user has access to channel 1 to do something but this user does not have access to channel 2.. even though the peer joins both channels.  So in this case you do need this.",
        "ts": "1485358183.001806"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "We do need to enforce the ACL on both channels-",
        "ts": "1485358201.001807",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U11MANG9G"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "that function calls from validate proposal and check sig- creator is respect to this one chain.. is there a chain id on that? yes... we are assumin the creator verified on channel 1.. that same creator instance can be used... so yes.. if you have creator bytes you re fine.. so how do you check the read set and write set- how do you know?  the read can be modified on a different channel.  we don't do any of that except we verify tat the user signature is verifiable on channel 2.. we need to develop that (Angelo working on that)... ARe you saying you get read\/write set of chain? what does read\/write set on 2nd chain?  how do we resolve version conflicts regardless of access control?",
        "ts": "1485358316.001808"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "If you read the JIRA item- it's a read only and and there is no read\/write set for the called chaincode.",
        "ts": "1485358335.001809"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "if the query is on the same chain as chaincode- you have read\/write set of the chainocde and verify vscc shcek . but on different channel, we can ONLY do read and query only",
        "ts": "1485358381.001810"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "there is no read set- we are not sending read set from chain 2 inside.. the only thing proposal response has is the read\/write set is for the first call of the chain.",
        "ts": "1485358433.001811"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "WE do have the read\/write set collected on the same channel and it's working-verified",
        "ts": "1485358462.001812"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "but on different channel we do not want to collect the read\/write set on the 2nd channel- we only want to return the value.",
        "ts": "1485358477.001813"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "Now that you mention it- there is one more thing you need to do when doing different chains-- but same logic calling- it's going to try to include it and we need to fix that on the 2nd chain",
        "ts": "1485358503.001814"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "From security point of view- we can check the signature- yes?",
        "ts": "1485358514.001815"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "the 2nd chain code is working like an oracle.. it might be an endorser that might get a different value.. so you might see a transaction be rejected.. yes, sdk would reject.  this has to be calirifed to the developer.. it depends on how you implement- if you go to oracle- give me the current value- because endorsers might end up with different view, but security of execution-- you do same process when proposal first came-- is the oracle value has to be included what the endorsers endorse- the read set... but not clear if this makes sense- it's up to the calling chaincode if they want to... because eventually the value is considered by calling another chainocde will effect the outcome of the execution of that chaincode",
        "ts": "1485358612.001816"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "if the value was idfferent, then the outcome is different,.. and the end result of that proposal would be different",
        "ts": "1485358626.001817"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "there is no difference if you even have a regular call outside the blockchain",
        "ts": "1485358675.001818"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "how do you replay the blockchain in this case?",
        "ts": "1485358689.001819"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "this would allow for non-determinism",
        "ts": "1485358747.001820"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "if 3 endorsers get the same response- it will have same simulation, endorsement will succeed and commitment will be validated despite the chaincode is not replayable",
        "ts": "1485358782.001821"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "you have endorsement- you send read\/write set... you signed agreeing to set of inputs and you got outputs.",
        "ts": "1485359057.001822"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "proposal come in and you want to include external data- you need to put it into key... you have to do that.",
        "ts": "1485359073.001823"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "This is the same as keys we read without modifying",
        "ts": "1485359080.001824"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "the big point is this there are rules for writing chaincode",
        "ts": "1485359092.001825"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "1) access only state variables on database",
        "ts": "1485359097.001826"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "2) if you access something external and you are on your own and you better record it somehow",
        "ts": "1485359109.001827"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "This is true whether calling chaincode or calling external source",
        "ts": "1485359117.001828"
    },
    {
        "type": "message",
        "user": "U184J2R7S",
        "text": "<@U11HTMW0H> please make sure in doc this is recorded clearly point 1 and 2 up above",
        "ts": "1485359134.001829"
    },
    {
        "user": "U3EPNMP34",
        "text": "<@U3EPNMP34|sandra.vrtikapa> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1485359335.001830"
    },
    {
        "type": "message",
        "user": "U3EPNMP34",
        "text": "Currently I can only receive\/access chaincode events via block events. If I set a chaincode event in user chaincode and that part of the code doesn't generate block event later on I am not able to receive my chaincode event. Is there a plan to support sending\/firing chaincode events from user chaincode independent of block events?",
        "ts": "1485359431.001831"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "<@U0KQ9QKH6> ^^^",
        "ts": "1485361680.001832"
    },
    {
        "type": "message",
        "user": "U0KQ9QKH6",
        "text": "<@U3EPNMP34> : if you set a chaincode event in a chaincode, you will generate a block( or be included in a block)",
        "ts": "1485362344.001833"
    },
    {
        "type": "message",
        "user": "U0KQ9QKH6",
        "text": "if you use the upcoming eventhub in the v1.0 api, you can just register for a chaincode event - eventhub takes care of parsing the chaincode event from the block it receives",
        "ts": "1485362428.001834"
    },
    {
        "type": "message",
        "user": "U0KQ9QKH6",
        "text": "I hope that clears the question up if not ask away",
        "ts": "1485362462.001835"
    },
    {
        "type": "message",
        "user": "U0UHG4VP1",
        "text": "<https:\/\/wiki.hyperledger.org\/community\/fabric-notes> updated with <https:\/\/wiki.hyperledger.org\/community\/fabric-notes-25-jan-2017-morning>",
        "ts": "1485362836.001836"
    },
    {
        "type": "message",
        "user": "U3EPNMP34",
        "text": "<@U0KQ9QKH6> I would like to be able to send chaincode event from user cc even if there is no commit.",
        "ts": "1485363712.001837"
    },
    {
        "type": "message",
        "user": "U0KQ9QKH6",
        "text": "I don't think that is allowed as events are part of the ledger state",
        "ts": "1485363777.001838"
    },
    {
        "type": "message",
        "user": "U0KQ9QKH6",
        "text": "you *could* potentially just send a message from your chaincode for that purpose",
        "ts": "1485363833.001839"
    },
    {
        "type": "message",
        "user": "U0KQ9QKH6",
        "text": "one more comment, the only way to generate a chaincode event is to issue a transaction to the chaincode, so you will already be committing at least that transaction. Which happens to be the transaction that the chaincode event will be associated with",
        "ts": "1485366603.001840"
    },
    {
        "type": "message",
        "user": "U3HN4GFA9",
        "text": "When running even just one peer and one order using docker-compose (using a docker-compose file inspired from bddtests\/docker-compose-next-4.yml), a lot of weird text was displayed on the screen and deploy never finished.",
        "ts": "1485377474.001841"
    },
    {
        "type": "message",
        "user": "U3HN4GFA9",
        "text": "We think the reason is that in the function `Sign` of  `msp\/identities.go`, in debug mode, the plaintext is displayed. And we guess during a deploy a very large plaintext is displayed.",
        "ts": "1485377541.001842"
    },
    {
        "type": "message",
        "user": "U3HN4GFA9",
        "text": "The workaround was to increase the logging level to info, or more precisely, to remove the line `- CORE_LOGGING_LEVEL=DEBUG` in `compose-defaults.yml`. Since it worked.",
        "ts": "1485377586.001843"
    },
    {
        "type": "message",
        "user": "U3HN4GFA9",
        "text": "By the way, what does the environment variable `DOCKER_NEXT` do?",
        "ts": "1485377663.001844"
    },
    {
        "type": "message",
        "user": "U0W7D64LC",
        "text": "<https:\/\/youtu.be\/kfpwm8Ayj1U>",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "v1 Hyperledger Fabric channels demo",
                "title_link": "https:\/\/youtu.be\/kfpwm8Ayj1U",
                "author_name": "Hyperledger Fabric",
                "author_link": "https:\/\/www.youtube.com\/channel\/UCCFdgCWH_1vCndMPVqQlwZw",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/kfpwm8Ayj1U\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: v1 Hyperledger Fabric channels demo",
                "video_html": "<iframe width=\"400\" height=\"300\" src=\"https:\/\/www.youtube.com\/embed\/kfpwm8Ayj1U?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 300,
                "from_url": "https:\/\/youtu.be\/kfpwm8Ayj1U",
                "service_icon": "https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png",
                "id": 1
            }
        ],
        "ts": "1485378708.001845",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0P2GSA8Z"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U3HN4GFA9",
        "text": "thank you we solved this",
        "ts": "1485380023.001847"
    },
    {
        "user": "U0YQK8WSV",
        "text": "<@U0YQK8WSV|pvishnum> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1485381785.001848"
    },
    {
        "user": "U15KME666",
        "text": "<@U15KME666|dayu> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1485388546.001849"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "what's so bad about ASN.1? it's even part of any system that does crypto.",
        "ts": "1485390263.001850"
    }
]