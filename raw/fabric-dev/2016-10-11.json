[
    {
        "type": "message",
        "user": "U0S5KF44D",
        "text": "<@U1F3CQ2HX> <@U0UGH3X7X> This is best answered by Tuand, but from looking at the defaults in fabric\/consensus\/pbft\/config.yaml, it looks like the default batchsize is 500 with a default timeout of 1 sec, if that is the question",
        "ts": "1476188770.001564"
    },
    {
        "type": "message",
        "user": "U0S5KF44D",
        "text": "Also I wanted to mention that for anyone interested, the membership-services channel is being used to provide updates pertaining to membership services.  I just posted an update with what the membership services squad is working on",
        "ts": "1476188919.001565"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "<@U1F3CQ2HX>   it's not by memory size per se ... as Keith mentioned, batchsize sets how many transactions are aggregated to go through consensus, executed and written to one block.  In addition,  if the timer fires, we aggregate the current number of transactions in queue even if we have not reached batchsize",
        "ts": "1476191540.001566"
    },
    {
        "type": "message",
        "user": "U1F3CQ2HX",
        "text": "<@U0S5KF44D>: <@U0UGH3X7X> Thanks for clarification ..also do you agree that the block memory size for batch of transaction in the block will vary depending on the content or fields in the transaction ? Want to understand it for disk size requirements analysis for each node (VP).",
        "ts": "1476205072.001567"
    },
    {
        "type": "message",
        "user": "U0S5KF44D",
        "text": "<@U1F3CQ2HX> Correct, the actual block memory size will vary based on transaction size",
        "ts": "1476205532.001568"
    },
    {
        "type": "message",
        "user": "U1F3CQ2HX",
        "text": "Thanks <@U0S5KF44D> ",
        "ts": "1476206294.001569"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "<@U0KPFAZNF>: Any news on the Go 1.7 front?",
        "ts": "1476219805.001570"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "ive submitted the patches, waiting for maintainers to merge",
        "ts": "1476219863.001571"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "see CRs 1471 and company",
        "ts": "1476219881.001572"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "it all passes the UT\/behave runs though",
        "ts": "1476219910.001573"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Wonderful, thanks.",
        "ts": "1476219934.001574"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "actually, i still need a rebase, but waiting for 1491 1493 to go in first",
        "ts": "1476219968.001575"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "but after that, 1471 should be ready to go in",
        "ts": "1476219978.001576"
    },
    {
        "user": "U2CBG8V9U",
        "text": "<@U2CBG8V9U|humblealex> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1476239584.001577"
    },
    {
        "type": "message",
        "user": "U2CBG8V9U",
        "text": "Maybe it is a bug?\nWe were developing a chaincode trying to read certificatepaires from CA, so we used the ReadCertificatePair function from \/membersrvc\/ca\/ecap.go through grpc connection.We got nothing.So we looked at readCertificates function in ca.go and noticed that two columns are being pulled out (cert, kdfey) while in ReadCertificatePair, rows.Scan(&amp;raw) indicates one column. So which part should be fixed? or are there any other ways around of doing this?",
        "ts": "1476239657.001578"
    },
    {
        "user": "U1WAADD4N",
        "text": "<@U1WAADD4N|akihikot> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1476254091.001579"
    }
]