[
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "zuowang: i see",
        "ts": "1468315060.001340"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i think chaincode shouldn't log at all by default",
        "ts": "1468315141.001341"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "it is not going anywhere where the log can be captured",
        "ts": "1468315151.001342"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "easily",
        "ts": "1468315157.001343"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i'm always in favor of simpler code, rather than more complicated code",
        "ts": "1468315184.001344"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "what is a car file? there is one in core\/chaincode\/platforms\/car\/test",
        "ts": "1468320618.001345"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "chaincode archive, i think",
        "ts": "1468321045.001346"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "and how can one create such an archive?",
        "ts": "1468321273.001347"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i have no idea - ghaskins worked on this",
        "ts": "1468321563.001348"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "<@U1AU8DRQR>: <https:\/\/github.com\/hyperledger\/fabric-chaintool>",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "hyperledger\/fabric-chaintool",
                "title_link": "https:\/\/github.com\/hyperledger\/fabric-chaintool",
                "text": "fabric-chaintool - Chaintool - Chaincode Tooling for <https:\/\/github.com\/hyperledger\/fabric>",
                "fallback": "GitHub: hyperledger\/fabric-chaintool",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400",
                "from_url": "https:\/\/github.com\/hyperledger\/fabric-chaintool",
                "thumb_width": 142,
                "thumb_height": 142,
                "service_icon": "https:\/\/github.com\/apple-touch-icon.png",
                "id": 1
            }
        ],
        "ts": "1468321634.001349"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "\"chaintool package\" specifically would be used to create a .car",
        "ts": "1468321679.001351"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "so in order to replace that car file I mentioned before, I have to run this, right?",
        "ts": "1468321781.001352"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "I want to create a new car file because I modified the example chaincode the car file was created from",
        "ts": "1468321807.001353"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "Sounds like that is the case",
        "ts": "1468321883.001354"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "thanks",
        "ts": "1468321891.001355"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "Note that vagrant comes prepackaged with chaintool already in the path",
        "ts": "1468321941.001356"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "It's an older version, but that shouldn't matter for package operation",
        "ts": "1468321974.001357"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "Also, let me know what the mod was so I can figure out if I should merge it with the examples in the chaintool repo",
        "ts": "1468322046.001358"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "I am trying to create a PR where we use TxID instead of UUID. TxID is created using all the parameters of a chaincode (arguments, args) by calling SHA256",
        "ts": "1468322141.001359"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "I have replaced the current type of args ([]string) with [][]byte",
        "ts": "1468322174.001360"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "this made me modify the chaincode examples",
        "ts": "1468322215.001361"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "hgabor: but what if you invoke the same chaincode twice with the same args?",
        "ts": "1468322276.001362"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "won't you have the same ID then?",
        "ts": "1468322285.001363"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "and why [][]byte?",
        "ts": "1468322301.001364"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "and why is ghaskins awake",
        "ts": "1468322346.001365"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "I would share <@U0XR6J961>'s concern.  Also don't understand why you would need to change the parameter types to generate a hash",
        "ts": "1468322384.001366"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "Heh, not only should I not be awake, I am technically still on holiday until tomorrow ;)",
        "ts": "1468322424.001367"
    },
    {
        "type": "message",
        "user": "U0MT4CBHB",
        "text": "<@U0KPFAZNF>: why would we have strings? Strings are natural for command line but not for an rpc interface.",
        "ts": "1468322645.001368"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "[][]byte can be interpreted in any way - it depends on the chaincode so it is more general. it is easy to generate a hash using bytes. if we used a string we would need some method to create bytes from it. but this is not trivial, how to do it? UTF8? some other decoding?",
        "edited": {
            "user": "U1AU8DRQR",
            "ts": "1468322738.000000"
        },
        "ts": "1468322719.001369"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "<@U0MT4CBHB>: I don't disagree with that.  Chaintool does exactly this by encoding protobuf objects with the string",
        "ts": "1468322806.001371"
    },
    {
        "type": "message",
        "user": "U0MT4CBHB",
        "text": "<@U0XR6J961> if it was permissible to call chaincode with same args then it would be open to trivial replay attack",
        "ts": "1468322956.001372"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "the chaincode call contract is different from the transaction that wraps the arguments",
        "ts": "1468322988.001373"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "a transaction contains a timestamp, and crypto fields",
        "ts": "1468323014.001374"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "nonce, signature, etc.",
        "ts": "1468323022.001375"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "tamas: however, replay attack protection is essentially non-existent in fabric at the moment",
        "ts": "1468323060.001376"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "<@U1AU8DRQR>: that sounds more like a golang specific challenge of dealing with string types than a core requirement for hashing",
        "ts": "1468323072.001377"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "hgabor: then the arguments should be []byte?",
        "ts": "1468323087.001378"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "But that said, I see both you and <@U0MT4CBHB> points",
        "ts": "1468323100.001379"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "[]byte(\"string\")",
        "ts": "1468323122.001380"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "gives you the bytes to a string",
        "ts": "1468323127.001381"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i think we should either do `args  []byte` and the chaincode does the unmarshalling and interpretation itself",
        "ts": "1468323209.001382"
    },
    {
        "type": "message",
        "user": "U0MT4CBHB",
        "text": "<@U0XR6J961> I can not see the difference call contract vs. transaction. I assume that it is the job of chaincode to decide if transaction is valid.",
        "ts": "1468323229.001383"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "<@U0XR6J961> yes and this way the client can easily generate the hash\/ID of a TX. but if we used []bytes(\"string\") then the client would have to convert all the arguments he wants to send to fabric to UTF8 byte arrays and calculate the SHA256 from that. and IMO this is ugly. :slightly_smiling_face: but a byte array... for a chain code it can mean anything. e.g. one can encode chaincode specific information into that byte array. this is more general.",
        "ts": "1468323259.001384"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "or we enforce an array of strings, or (my preference) a validly parsing object (JSON?)",
        "ts": "1468323266.001385"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "tamas: let's take a simple counter chaincode.  it has one function, \"increment\".  how would that chaincode perform replay protection?",
        "ts": "1468323341.001386"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "<@U0XR6J961> IMO args [] byte is the same as args [][]byte. one only have to concatenate those bytes and add field delimiters. :slightly_smiling_face:",
        "ts": "1468323361.001387"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "I guess what I don't understand is why are you even looking at payload fields",
        "ts": "1468323379.001388"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "hgabor: so it isn't the same",
        "ts": "1468323385.001389"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "<@U0XR6J961> so you prefer []byte ?",
        "ts": "1468323460.001390"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "with v2, the mvcc\/readset will automatically prevent replay attacks though",
        "ts": "1468323463.001391"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "Back to bed for me.  I'll be fully online tomorrow.  Cheers",
        "ts": "1468323505.001392"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "hgabor: a pure `[]byte` is elegant, on one side of the spectrum",
        "ts": "1468323508.001393"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "and it allows the flexibility of chaincodes to use any kind of serialization format",
        "ts": "1468323544.001394"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "<@U0XR6J961> I like the idea of []byte",
        "ts": "1468323593.001395"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "the disadvantage is that you cannot generically process\/analyze chaincode arguments across chaincodes.",
        "ts": "1468323595.001396"
    },
    {
        "type": "message",
        "user": "U0MT4CBHB",
        "text": "simon: \"increment\" is flawed by design. Should not have transactions that are valid if replayed with chaincode",
        "ts": "1468323603.001397"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "tamas: unless you rely on the fabric to prevent replay",
        "ts": "1468323625.001398"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i.e. remove the burden of replay protection from the individual chaincode",
        "ts": "1468323656.001399"
    },
    {
        "type": "message",
        "user": "U0MT4CBHB",
        "text": "<@U0XR6J961> I do not want to rely on fabric n any means other than orchestrating functions that are in my control\\",
        "ts": "1468323658.001400"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i think this is a most fundamental issue and should be addressed by the technical discussion mailing list",
        "ts": "1468323734.001401"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i just know that writing chaincode is difficult",
        "ts": "1468323799.001402"
    },
    {
        "type": "message",
        "user": "U0MT4CBHB",
        "text": "transactions, blocks and their consensus order have to be audit-able without assuming a protection by fabric",
        "ts": "1468323813.001403"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "and people will find all kinds of ways on how to fail to check for replays :slightly_smiling_face:",
        "ts": "1468323825.001404"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "how does ethereum prevent against replays?",
        "ts": "1468323854.001405"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "does the individual smart contract check for replays?",
        "ts": "1468323868.001406"
    },
    {
        "type": "message",
        "user": "U0MT4CBHB",
        "text": "ask me how Bitcoin does. I do not consider Ethereum as design target",
        "ts": "1468323898.001407"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i know how bitcoin does it.  but fabric tries to be more general than UTXO",
        "ts": "1468323946.001408"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "see, for me it is the best news if i don't have to care about mistakenly introducing duplication in consensus",
        "ts": "1468323974.001409"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "because that complicates our code",
        "ts": "1468323994.001410"
    },
    {
        "type": "message",
        "user": "U0MT4CBHB",
        "text": "UTXO is a specific concept for coins. It has the side effect of replay protection. I think every serious chain code will have to think about how it avoids replay. Having previous transaction reference (similar to utxo) is one but not the only way.",
        "ts": "1468324066.001411"
    },
    {
        "type": "message",
        "user": "U0MT4CBHB",
        "text": "I can not think of a serious system that allows replay.",
        "ts": "1468324128.001412"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i understand your point",
        "ts": "1468324142.001413"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "but this needs to be discussed on the mailing list.  i have no authority in this area",
        "ts": "1468324177.001414"
    },
    {
        "type": "message",
        "user": "U0MT4CBHB",
        "text": "me not too, just discussing",
        "ts": "1468324189.001415"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "my expectation was that the fabric would prevent replay",
        "ts": "1468324197.001416"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "and an audit log later can prove that indeed no transaction was replayed",
        "ts": "1468324225.001417"
    },
    {
        "type": "message",
        "user": "U0MT4CBHB",
        "text": "if replay was prevented by fabric then it was some kind of global index, which is expensive",
        "ts": "1468324225.001418"
    },
    {
        "type": "message",
        "user": "U0MT4CBHB",
        "text": "if chaincode can guarantee uniqueness cheaper we are better off",
        "ts": "1468324245.001419"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yes, i agree",
        "ts": "1468324254.001420"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "domain knowledge can simplify things",
        "ts": "1468324263.001421"
    },
    {
        "type": "message",
        "user": "U0MT4CBHB",
        "text": "exactly",
        "ts": "1468324270.001422"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "however, if implemented well, a generic replay protection will benefit all chaincodes",
        "ts": "1468324380.001423"
    },
    {
        "type": "message",
        "user": "U0MT4CBHB",
        "text": "We need a blockchain that processes thousands of tx per second. Can you think of a global generic check of uniqueness that is cheap after years?",
        "ts": "1468324441.001424"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i believe the security folks had in mind some limited time valid certificates",
        "ts": "1468324475.001425"
    },
    {
        "type": "message",
        "user": "U0MT4CBHB",
        "text": "that puts trust to a CA, not sure I want to do that if not needed",
        "ts": "1468324513.001426"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "then you only have to maintain some sort of database (per chaincode) for N * these periods",
        "ts": "1468324517.001427"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "tamas: i think these (low-level?) issues need to be addressed by the technical list",
        "ts": "1468324686.001428"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "and i don't think this is happening properly",
        "ts": "1468324699.001429"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "most things seem to be spur of the moment decisions",
        "ts": "1468324740.001430"
    },
    {
        "type": "message",
        "user": "U0MT4CBHB",
        "text": "ok I write a mail to the list",
        "ts": "1468326154.001431"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "thanks!",
        "ts": "1468326193.001432"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "does anybody know core\/chaincode\/exectransaction_test.go?",
        "ts": "1468328146.001433"
    },
    {
        "type": "message",
        "user": "U142E5N0P",
        "text": "it seems a redesign of fabric according to the proposals: <https:\/\/github.com\/hyperledger\/fabric\/wiki\/Fabric-Next> \nwhat's the plan for the first production ready release?",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "hyperledger\/fabric",
                "title_link": "https:\/\/github.com\/hyperledger\/fabric\/wiki\/Fabric-Next",
                "text": "fabric - Fabric is a blockchain project in Incubation proposed to the community and documented at <https:\/\/goo.gl\/RYQZ5N>. Information on what Incubation entails can be found in the Hyperledger Proj...",
                "fallback": "GitHub: hyperledger\/fabric",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400",
                "from_url": "https:\/\/github.com\/hyperledger\/fabric\/wiki\/Fabric-Next",
                "thumb_width": 142,
                "thumb_height": 142,
                "service_icon": "https:\/\/github.com\/apple-touch-icon.png",
                "id": 1
            }
        ],
        "ts": "1468376097.001434"
    },
    {
        "type": "message",
        "user": "U0TFEHX8E",
        "text": "<@U1AU8DRQR>: I believe <@U0ULK2JPP> wrote that test",
        "ts": "1468377753.001436"
    },
    {
        "type": "message",
        "user": "U0TFEHX8E",
        "text": "<@U142E5N0P>: The roadmap is being discussed at <https:\/\/github.com\/hyperledger\/hyperledger\/wiki\/PublicMeetingCalendar#hyperledger-project---fabric-technical-planning> if you\u2019d like to join",
        "edited": {
            "user": "U0TFEHX8E",
            "ts": "1468377786.000000"
        },
        "ts": "1468377781.001437"
    },
    {
        "type": "message",
        "user": "U0TFEHX8E",
        "text": "If you can\u2019t make it, I think the roadmap will likely be posted next week",
        "ts": "1468377990.001440"
    }
]