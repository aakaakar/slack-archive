[
    {
        "type": "message",
        "user": "U0XV1HDL3",
        "text": "i'm not in context here, but for merkle trees: in a textbook they are always binary. in practice, a wide tree, k-ary for k=32, 64, ... performs much better, as <@U0Z541B3P> says. the cost of hash function calculation is not linear in the hashed data, there is a significant setup cost. if the general block format should hold multiple tx, then i recommend at least a merkle tree over the tx, with a configurable k (width) in the code (not modifiable after deployment) ... because there have been quite some discussions on how large the blocks should be in this field!",
        "ts": "1478249711.002540"
    },
    {
        "user": "U2XNKMF24",
        "text": "<@U2XNKMF24|james> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1478276136.002541"
    },
    {
        "user": "U2ZACGWNS",
        "text": "<@U2ZACGWNS|matt.shams> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1478289585.002542"
    },
    {
        "type": "message",
        "user": "U0TFEHX8E",
        "text": "<@U0Z541B3P> - I need to find more time to hang out here :slightly_smiling_face: Completely agree with your suggestion to take measurements and evaluate use cases. I think we\u2019re all in agreement though that a wide merkle tree really won\u2019t take that much extra hashing. I\u2019m assuming the system already needs to hash each individual transaction for other purposes so I\u2019m not factoring that into the cost. And that leaves room in the future (if it\u2019s made configurable as Christian suggests) to potentially support a binary merkle tree if someone has lite client with limited space but needs to verify a TX use case.",
        "ts": "1478316851.002543"
    }
]