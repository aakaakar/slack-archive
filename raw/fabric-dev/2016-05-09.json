[
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "<@U0ULK2JPP>: how do you suggest using system chaincode to store pbft configuration?",
        "ts": "1462788288.000321"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U0XR6J961> The question to me is if we need a sys cc to store pbft config. If it is totally static and can never change, current yaml may be good enough ?",
        "ts": "1462797354.000322"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "Otherwise the sys CC should have the same features as a regular chaincode as far as storage is concerned, ie, all the ledger state methods. The real thing to consider is that every \u201cinvoke\u201d operation will be a transaction and so every change one makes to the state will be too. The last thing is you have query access which you may leverage to allow users to get information.",
        "ts": "1462797378.000323"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "its somewhat curious that the changes that we will make for PBFT config itself has to go through consensus. Sounds there may be chicken-egg issues here",
        "ts": "1462797455.000324"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "<@U0ULK2JPP>: I think its achievable, but it does require careful design",
        "ts": "1462797527.000325"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U0KPFAZNF>: it is.. really depends upon details of this cc",
        "ts": "1462797655.000326"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "muralisr: no, it is not static (not necessarily), and all replicas need to use the same config",
        "ts": "1462798120.000327"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "ok.",
        "ts": "1462798139.000328"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "e.g. the set of validators",
        "ts": "1462798148.000329"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "or the log\/watermarks size that pbft uses",
        "ts": "1462798180.000330"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "my idea was to store the original config in the genesis block, and change config through a system chaincode",
        "ts": "1462798202.000331"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "I see.  I thought these are properties are \u201chard to change\u201d to say the least.",
        "ts": "1462799738.000332"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yes, so they definitely shouldn't be in a random yaml file that everybody can edit",
        "ts": "1462800755.000333"
    },
    {
        "user": "U0N94UUA0",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U0N94UUA0|ranga> has joined the channel",
        "ts": "1462808636.000334"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "<@U0KN2SSKE>: Any feedback re: <https:\/\/github.com\/hyperledger\/fabric\/pull\/1390>",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "Use make to build fabric by ghaskins \u00b7 Pull Request #1390 \u00b7 hyperledger\/fabric \u00b7 GitHub",
                "title_link": "https:\/\/github.com\/hyperledger\/fabric\/pull\/1390",
                "text": "Description This patch adds a top-level makefile for managing builds and dependencies Motivation and Context Our current environment relies heavily on vagrant performing a good deal of the prep...",
                "fallback": "GitHub: Use make to build fabric by ghaskins \u00b7 Pull Request #1390 \u00b7 hyperledger\/fabric",
                "thumb_url": "https:\/\/avatars2.githubusercontent.com\/u\/367132?v=3&s=400",
                "from_url": "https:\/\/github.com\/hyperledger\/fabric\/pull\/1390",
                "thumb_width": 400,
                "thumb_height": 400,
                "id": 1
            }
        ],
        "ts": "1462809508.000335"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "Not to be pushy, I just have a few follow-on patches to do, but won\u2019t base on top of this if its not likely to be accepted",
        "ts": "1462809843.000337"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "When I try to run the unit tests locally, I'm getting an OOM problem with the current master:\n\n```\n2016\/05\/09 16:54:47 Computing crypto-hash for bucket [level=[0], bucketNumber=[1]] by merging [3] children\n2016\/05\/09 16:54:47 Constructing bucket-cache with max bucket cache size = [100] MBs\n2016\/05\/09 16:54:47 Loaded buckets data in cache. Total buckets in DB = [44]. Total cache size:=6400\nfatal error: runtime: out of memory\n```\n\nI've bumped my Vagrant up to 8GB, to no effect.  I was looking back through the README to see if the test invocations have changed, but they seem to be gone from the doc, anyone know what's going on?",
        "ts": "1462813134.000338"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0KPFAZNF>: <@U0TFEHX8E> ^^",
        "ts": "1462813182.000339"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "check in install.md  ?",
        "ts": "1462813211.000340"
    },
    {
        "type": "message",
        "user": "U0TFEHX8E",
        "text": "how big is your DB?",
        "ts": "1462813343.000341"
    },
    {
        "type": "message",
        "user": "U0TFEHX8E",
        "text": "under \/var\/hyperledger\/",
        "ts": "1462813357.000342"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "15GB, looks like",
        "ts": "1462813359.000343"
    },
    {
        "type": "message",
        "user": "U0TFEHX8E",
        "text": "hmm, maybe compress that and put it off to the side somewhere?",
        "ts": "1462813379.000344"
    },
    {
        "type": "message",
        "user": "U0TFEHX8E",
        "text": "may be useful for testing",
        "ts": "1462813384.000345"
    },
    {
        "type": "message",
        "user": "U0TFEHX8E",
        "text": "<@U0KPFAZNF>: I intend to look at you make changes today",
        "ts": "1462813422.000346"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0TFEHX8E>: Sure, I'll pull it off, then delete it and you think that ought to fix things?",
        "ts": "1462813485.000347"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "<@U0XPR4NP4>: ive not seen that, but I tend to be operating with clean-slates each iteration.  Am I understanding correctly that you are running an existing database?",
        "ts": "1462813794.000348"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "or is 15G typical for a clean-slate run (ive never looked)",
        "ts": "1462813809.000349"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0KPFAZNF>: I'm not intentionally doing anything, but I have not destroyed my dev env in a week or two, so there is a good chance the DB has grown",
        "ts": "1462813861.000350"
    },
    {
        "type": "message",
        "user": "U0TFEHX8E",
        "text": "I\u2019m going to bet it fixes things, though I haven\u2019t seen it before myself",
        "ts": "1462813911.000351"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "regarding the test instructions, I too have been bit by the doc reorg\u2026.FYI the \u201cgo test\u201d instructions that used to be on the main readme are now here: <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/dev-setup\/install.md>",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "hyperledger\/fabric",
                "title_link": "https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/dev-setup\/install.md",
                "text": "fabric - Fabric is a blockchain project in Incubation proposed to the community and documented at <https:\/\/goo.gl\/RYQZ5N>. Information on what Incubation entails can be found in the Hyperledger Proj...",
                "fallback": "GitHub: hyperledger\/fabric",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400",
                "from_url": "https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/dev-setup\/install.md",
                "thumb_width": 142,
                "thumb_height": 142,
                "id": 1
            }
        ],
        "ts": "1462813916.000352"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "which is via the \u201cInstallation\u201d link that is mid-way down the page",
        "ts": "1462813933.000354"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "FYI, I have an oustanding PR (1390) that simplifies this a bit:  you just run \u201cmake unit-test\u201d instead of needing to paste that command",
        "ts": "1462813967.000355"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Thanks <@U0KPFAZNF>, our `CONTRIBUTING.md` file link to the test is broken now too, I'll submit a PR to fix it later today",
        "ts": "1462813971.000356"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "yeah, there are some other broken links too, i filed an issue",
        "ts": "1462814023.000357"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Yes, I am definitely in favor of those changes in 1390, would be a productivity boost for everyone I think",
        "ts": "1462814042.000358"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "regarding OOM, I havent seen that exact error, but while working on the baseimage I did note that we seem to blow out of the 4GB fairly easily",
        "ts": "1462814109.000359"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "im guessing we get away with it typically b\/c there must be sufficient swap, but I didnt follow up",
        "ts": "1462814138.000360"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "its kind of tough, b\/c 4GB is already fairly resource intensive for people working on smaller machines",
        "edited": {
            "user": "U0KPFAZNF",
            "ts": "1462814184.000000"
        },
        "ts": "1462814178.000361"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Obviously the lower the barrier to entry, the better, but there's got to be a line somewhere.  I wonder if 4GB is it, or if we could bump it slightly.",
        "ts": "1462814375.000363"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0TFEHX8E>: <@U0UKTPMG8> <@U0KPFAZNF> So I figured out what the problem was.  When the peer tries to build the docker image, it uses a build context of $GOPATH, which, thanks to running some stress tests had several GB of logs in it, so when `vm.go` tries to build an entire tar file, in RAM, with the whole $GOPATH, we're running out of memory.",
        "ts": "1462817799.000364"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Do we think this is desirable behavior? I've certainly streamed huge tars via a pipe into docker to use a build context, and I didn't think docker buffered the whole thing (but rather wrote it out to the filesystem as it received it), is there a reason we aren't using this sort of streaming approach?",
        "ts": "1462817908.000365"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U0XPR4NP4>: I have run into that myself",
        "ts": "1462817927.000366"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "but my crash was when writing large deply tran to the ledger and not while constructing the tar file",
        "edited": {
            "user": "U0ULK2JPP",
            "ts": "1462818248.000000"
        },
        "ts": "1462818225.000367"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "are you running into nomem when creating the tar  ?",
        "ts": "1462818280.000369"
    },
    {
        "type": "message",
        "user": "U0KM61BCP",
        "text": "<@U0TFEHX8E>: <@U0KPFAZNF> <@U0KN2SSKE> I think that if we are going to have what amounts to a checklist in the PR template (a Good Thing(tm)) then I think we need to align that with some published coding guidelines. We have <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/dev-setup\/install.md#coding-golang-> but I think this is misplaced. It should be in <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/CONTRIBUTING.md> and we likely should have something to say about all languages used (thus far, we have golang, java, js, and python). Maybe we need separate doc for coding-style eg. <https:\/\/github.com\/electron\/electron\/blob\/master\/docs\/development\/coding-style.md>",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "hyperledger\/fabric",
                "title_link": "https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/dev-setup\/install.md#coding-golang-",
                "text": "fabric - Fabric is a blockchain project in Incubation proposed to the community and documented at <https:\/\/goo.gl\/RYQZ5N>. Information on what Incubation entails can be found in the Hyperledger Proj...",
                "fallback": "GitHub: hyperledger\/fabric",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400",
                "from_url": "https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/dev-setup\/install.md#coding-golang-",
                "thumb_width": 142,
                "thumb_height": 142,
                "id": 1
            },
            {
                "service_name": "GitHub",
                "title": "electron\/electron",
                "title_link": "https:\/\/github.com\/electron\/electron\/blob\/master\/docs\/development\/coding-style.md",
                "text": "electron - Build cross platform desktop apps with web technologies",
                "fallback": "GitHub: electron\/electron",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/13409222?v=3&s=400",
                "from_url": "https:\/\/github.com\/electron\/electron\/blob\/master\/docs\/development\/coding-style.md",
                "thumb_width": 200,
                "thumb_height": 200,
                "id": 3
            }
        ],
        "ts": "1462818655.000370"
    },
    {
        "type": "message",
        "user": "U0KM61BCP",
        "text": "thoughts?",
        "ts": "1462818659.000372"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0ULK2JPP>: This is when creating the tar, I am 99% certain.  Currently running tests after cleaning up my env, but will attempt to reproduce after",
        "ts": "1462818788.000373"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "ok",
        "ts": "1462818860.000374"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "I wanted to create an issue for getting mimimal set of files for chaincode \u2026 currently we copy the world.",
        "ts": "1462818928.000375"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "that would take care of this  (bddtests will be ignored)",
        "ts": "1462818960.000376"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "this would be necessary but not sufficient for  issues regarding maximum tran size",
        "ts": "1462819084.000377"
    },
    {
        "type": "message",
        "user": "U0TFEHX8E",
        "text": "<@U0KM61BCP>: agreed, there are a number of sections in \u201cInstall\u201d that don\u2019t make sense.\n\"Coding Golang\u201d (already in main README)\n\u201cCommunication\u201d (already in main README)\n\"Code contributions\u201d (contributing) \n\"Generating gRPC code\u201d (contributing)\n\"Adding or updating Go packages\u201d (contributing)\n<@U0KN2SSKE>: <@U112NNFV4> would you support these changes?",
        "ts": "1462819717.000378"
    },
    {
        "user": "U112NNFV4",
        "inviter": "U0TFEHX8E",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U112NNFV4|joshhus> has joined the channel",
        "ts": "1462819723.000379"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0ULK2JPP>: I'd still consider changing the image construction to stream the tar in, rather than pulling it all into RAM, seems like that should still be faster, and accomodate those who wish to include large files in their images.",
        "ts": "1462819876.000380"
    },
    {
        "type": "message",
        "user": "U0KM61BCP",
        "text": "<@U0TFEHX8E>: agreed",
        "ts": "1462819910.000381"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U0XPR4NP4>: could be nice, agreed. question is does the docker client support streaming",
        "ts": "1462819927.000382"
    },
    {
        "type": "message",
        "user": "U0KM61BCP",
        "text": "<@U0KPFAZNF>: nice job on the make file",
        "ts": "1462819931.000383"
    },
    {
        "type": "message",
        "user": "U0KM61BCP",
        "text": "I left some comments",
        "ts": "1462819936.000384"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0ULK2JPP>: The docker CLI certainly does, and I assume it uses the same API?",
        "ts": "1462819961.000385"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "I meant the go client, sorry",
        "ts": "1462819972.000386"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Yes, I'm not sure, if we think it's worth investigating, I can open an issue",
        "ts": "1462820000.000387"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "sure",
        "ts": "1462820006.000388"
    },
    {
        "type": "message",
        "user": "U0KM61BCP",
        "text": "heh, we reached 50 committers on fabric",
        "ts": "1462820214.000389"
    },
    {
        "type": "message",
        "user": "U0KM61BCP",
        "text": "<@U0MT4CBHB>: <@U0TFEHX8E> we need to clean up some of the README.md and contributing.md references that pertain to DAH (mailing list references, merge contact, etc) in <https:\/\/github.com\/hyperledger\/fabric-api>",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "hyperledger\/fabric-api",
                "title_link": "https:\/\/github.com\/hyperledger\/fabric-api",
                "text": "fabric-api - API to fabric",
                "fallback": "GitHub: hyperledger\/fabric-api",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400",
                "from_url": "https:\/\/github.com\/hyperledger\/fabric-api",
                "thumb_width": 142,
                "thumb_height": 142,
                "id": 1
            }
        ],
        "ts": "1462821143.000390"
    },
    {
        "user": "U0MT4CBHB",
        "inviter": "U0KM61BCP",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U0MT4CBHB|tamas> has joined the channel",
        "ts": "1462821152.000392"
    },
    {
        "type": "message",
        "user": "U0TFEHX8E",
        "text": "yes, this repo is still in progress",
        "ts": "1462821182.000393"
    },
    {
        "type": "message",
        "user": "U0TFEHX8E",
        "text": "I\u2019ll add a PR to say that in the README",
        "ts": "1462821205.000394"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0TFEHX8E>: Using the new PR template, and running `gometalinter`, seeing just tons of warnings\/errors, for instance in `core\/peer` I get 917 of them, almost all of which are definitely outside the scope of my PR.  I'm assuming we shouldn't mix generic lint cleanup in with more structural changes? Do we have a plan in place to get the whole codebase passing under the linting?",
        "ts": "1462821947.000395"
    },
    {
        "type": "message",
        "user": "U0TFEHX8E",
        "text": "<@U0XPR4NP4>: first plan is to remove gometalinter checkbox in PR and replace with goimports, go vet, and golint. <https:\/\/github.com\/hyperledger\/fabric\/pull\/1415>",
        "edited": {
            "user": "U0TFEHX8E",
            "ts": "1462822017.000000"
        },
        "ts": "1462822009.000396"
    },
    {
        "type": "message",
        "user": "U0TFEHX8E",
        "text": "and say that people just need to clean up code additions and modifications",
        "ts": "1462822052.000399"
    },
    {
        "type": "message",
        "user": "U0TFEHX8E",
        "text": "For existing code, I was hoping we could slowly clean it up as we go.",
        "ts": "1462822151.000400"
    },
    {
        "type": "message",
        "user": "U0KM61BCP",
        "text": "If using atom, then the configuration would be:",
        "ts": "1462822320.000401"
    },
    {
        "type": "message",
        "user": "U0KM61BCP",
        "text": "--vendor, --disable-all, --enable=vet, --enable=golint, --enable=goimports --tests, --json, .",
        "ts": "1462822321.000402"
    },
    {
        "type": "message",
        "user": "U0KM61BCP",
        "text": "configuration for gometalinter",
        "ts": "1462822341.000403"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "I think that whatever tooling\/standard we decide on, it would be useful to have two things considered:  1) there should be the ability to specify exceptions (to deal with things we disagree with the tooling on, or decide we dont want to fix right now, etc).  and 2) there should be a global pass to fix up any of the formatting things we want to fix, and exception the things we don\u2019t that is independent of any logic changes",
        "ts": "1462822458.000404"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "and then flip the switch for CI to monitor for any newly introduced issues",
        "ts": "1462822490.000405"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "users would then either be able to submit new exceptions (with justifications) in their PR, or CI will find anything new without maintainer burden to check",
        "ts": "1462822537.000406"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "not sure the exception mechanism is available in any of the tooling, however",
        "ts": "1462822580.000407"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "would just be nice to have, based on my experience with other languages (like using coverity on C++)",
        "ts": "1462822604.000408"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "I guess \u201cflip the CI switch\u201d and \u201cadd the checklist item\u201d would ideally be atomic too",
        "ts": "1462822657.000409"
    },
    {
        "user": "U17BRDHPG",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U17BRDHPG|jeroiraz> has joined the channel",
        "ts": "1462822658.000410"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "<@U0TFEHX8E>: agreed",
        "ts": "1462825722.000411"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "<@U0KPFAZNF>: read through #1390 \u2014 good idea, and it looks like you\u2019ve covered quite a lot already that we can merge now",
        "ts": "1462825877.000412"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "<@U0KPFAZNF>: this will help when we want to generate custom build of the fabric",
        "ts": "1462826017.000413"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "<@U0KN2SSKE>: i think\/hope\/believe so",
        "ts": "1462826116.000414"
    },
    {
        "type": "message",
        "user": "U0KM61BCP",
        "text": "<@U0KPFAZNF>: d\u2019accord",
        "ts": "1462827220.000415"
    },
    {
        "type": "message",
        "user": "U0KM61BCP",
        "text": "we should actively encourage people to take on linting of files with known lint warnings",
        "ts": "1462827245.000416"
    },
    {
        "type": "message",
        "user": "U0KM61BCP",
        "text": "I could add an issue for each file with lint errors",
        "ts": "1462827262.000417"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "yeah, sounds good",
        "ts": "1462827283.000418"
    },
    {
        "type": "message",
        "user": "U0KM61BCP",
        "text": "crowd source the cleanup",
        "ts": "1462827284.000419"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "some things will hopefully be automated (ala gofmt) but I suspect that is wishful thinking to expect all\/most will get cleaned up that way",
        "ts": "1462827327.000420"
    },
    {
        "type": "message",
        "user": "U11HH3P7Y",
        "text": "I have executed go lint and attached are the results..",
        "ts": "1462828914.000421"
    },
    {
        "type": "message",
        "subtype": "file_share",
        "text": "<@U11HH3P7Y|ramesh> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/ramesh\/F17CZR5SB\/golint_issues.txt|golint issues.txt>",
        "file": {
            "id": "F17CZR5SB",
            "created": 1462828921,
            "timestamp": 1462828921,
            "name": "golint issues.txt",
            "title": "golint issues.txt",
            "mimetype": "text\/plain",
            "filetype": "text",
            "pretty_type": "Plain Text",
            "user": "U11HH3P7Y",
            "editable": true,
            "size": 391559,
            "mode": "snippet",
            "is_external": false,
            "external_type": "",
            "is_public": true,
            "public_url_shared": false,
            "display_as_bot": false,
            "username": "",
            "url_private": "https:\/\/files.slack.com\/files-pri\/T0J024XGA-F17CZR5SB\/golint_issues.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "url_private_download": "https:\/\/files.slack.com\/files-pri\/T0J024XGA-F17CZR5SB\/download\/golint_issues.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "permalink": "https:\/\/hyperledgerproject.slack.com\/files\/ramesh\/F17CZR5SB\/golint_issues.txt",
            "permalink_public": "https:\/\/slack-files.com\/T0J024XGA-F17CZR5SB-aa6ce16381",
            "edit_link": "https:\/\/hyperledgerproject.slack.com\/files\/ramesh\/F17CZR5SB\/golint_issues.txt\/edit",
            "preview": "home\/travis\/gopath\/src\/github.com\/hyperledger\/fabric\/consensus\/consensus.go:104:6: exported type StatePersistor should have comment or be unexported\r\n\r\n\/home\/travis\/gopath\/src\/github.com\/hyperledger\/fabric\/consensus\/controller\/controller.go:43:9: if block ends with a return statement, so drop this else and outdent its block\r\n\r\n\/home\/travis\/gopath\/src\/github.com\/hyperledger\/fabric\/consensus\/helper\/engine.go:32:6: exported type EngineImpl should have comment or be unexported\r",
            "preview_highlight": "<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>home\/travis\/gopath\/src\/github.com\/hyperledger\/fabric\/consensus\/consensus.go:104:6: exported type StatePersistor should have comment or be unexported<\/pre><\/div>\n<div><pre><\/pre><\/div>\n<div><pre>\/home\/travis\/gopath\/src\/github.com\/hyperledger\/fabric\/consensus\/controller\/controller.go:43:9: if block ends with a return statement, so drop this else and outdent its block<\/pre><\/div>\n<div><pre><\/pre><\/div>\n<div><pre>\/home\/travis\/gopath\/src\/github.com\/hyperledger\/fabric\/consensus\/helper\/engine.go:32:6: exported type EngineImpl should have comment or be unexported<\/pre><\/div>\n<div><pre><\/pre><\/div>\n<\/div>\n<\/div>\n",
            "lines": 4583,
            "lines_more": 4578,
            "preview_is_truncated": true,
            "channels": [
                "C0YPYBVJM"
            ],
            "groups": [],
            "ims": [],
            "comments_count": 0
        },
        "user": "U11HH3P7Y",
        "upload": true,
        "display_as_bot": false,
        "username": "<@U11HH3P7Y|ramesh>",
        "bot_id": null,
        "ts": "1462828923.000422"
    }
]