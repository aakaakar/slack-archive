[
    {
        "type": "message",
        "user": "U12452RAP",
        "text": "<@U13TWBRBL> <@U0KQ9QKH6> <@U1Y2R5C9L> I suggect use the register(EventListener) replace of three register event methods and same with unregister",
        "ts": "1478617220.000247"
    },
    {
        "type": "message",
        "user": "U12452RAP",
        "text": "and make three EventListener for current three event type",
        "ts": "1478617470.000248"
    },
    {
        "type": "message",
        "user": "U12452RAP",
        "text": "see my comment at spec",
        "ts": "1478617773.000249"
    },
    {
        "type": "message",
        "user": "U0KQ9QKH6",
        "text": "we can certainly change to formalize an interface for a callback which is what I think you mean by EventListener",
        "ts": "1478620353.000250"
    },
    {
        "type": "message",
        "user": "U0KQ9QKH6",
        "text": "as far as the 3 registers, not sure how getting to one helps as the event types and related data structures would still need to be different",
        "ts": "1478620482.000251"
    },
    {
        "type": "message",
        "user": "U0KQ9QKH6",
        "text": "right now, I'm more concerned with getting what worked in 0.6 back in 1.0 :slightly_smiling_face:",
        "ts": "1478620552.000252"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "<@U2Q0HP4HY> strictly speaking the SDK needs endorsers for sending proposals and committers for listening to block or chaincode events. most of the time just knowing the list of endorsers in a Chain should be sufficient (case #1) because they are also committers. in some rare cases an application may need to listen from a committer-only Peer (case #2), so the eventhub needs to be configured outside of the endorser Peers. per 80-20 rule the SDK design should make it really easy to code up for case #1 but also allow for case #2.",
        "ts": "1478637039.000253"
    },
    {
        "type": "message",
        "user": "U12452RAP",
        "text": "<@U0KQ9QKH6> Yes, for java that is easy as you can just refer to Guava eventbus",
        "ts": "1478661731.000254"
    },
    {
        "type": "message",
        "user": "U12452RAP",
        "text": "there should be two ways to handle. one option: in eventhub, have a  map\/dict, key is object type, value is listener,  check the event type in eventhub. another option: make this in event listener, eventhub post events to all listener, and listener check the event type if can be handled by itself",
        "ts": "1478661991.000255"
    },
    {
        "type": "message",
        "user": "U12452RAP",
        "text": "that may be a little different in python and nodejs, as there are not strong type",
        "ts": "1478662044.000256"
    },
    {
        "type": "message",
        "user": "U12452RAP",
        "text": "Also, I saw nodejs SDK used Promise\/Future as basic, I suggest we all follow that make async as first class support",
        "ts": "1478662978.000257"
    }
]