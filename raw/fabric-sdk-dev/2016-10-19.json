[
    {
        "type": "message",
        "user": "U0Z41KY5V",
        "text": "About the wikipage, we may move the page <https:\/\/wiki.hyperledger.org\/groups\/fabric-sdk\/fabric-sdk-wg> to the top level at <https:\/\/wiki.hyperledger.org\/groups\/fabric-sdk\/> as the main entrance.",
        "ts": "1476881712.000173"
    },
    {
        "user": "U1ES70KQS",
        "text": "<@U1ES70KQS|pschnap> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1476883286.000174"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "what I did to the design doc today, please review:\n- beefing up the \u201cScenarios -&gt; Membership Registration and Enrollment\u201d to clarify the two API layers as discussed last week (common APIs for all CAs internal or external; APIs specific to the fabric\u2019s CA implementation which also includes a user registry)\n- responded to Murali\u2019s comment re: \u201cChaincode vs. Application code\u201d. clarifying that for this spec\u2019s first version we\u2019ll focus on the SDK for writing application code (as opposed to the chaincode, aka design for the chaincode shim)\n- updated a number of classes\u2019 descriptions in the table on page 8 and 9 (Client, MemberService, Member)\n- added \u201cOrderer\u201d class to the table\n- added link to UML diagram (WIP) below the table",
        "ts": "1476895646.000175"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "<@U0Z41KY5V> <@U0KN2SSKE> <@U1Y2R5C9L> <@U0YQK8WSV> <@U0KQ9QKH6> ^^^",
        "ts": "1476895697.000176"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "thanks Jim",
        "ts": "1476916862.000177"
    },
    {
        "user": "U21PYLBH7",
        "text": "<@U21PYLBH7|mint> has left the channel",
        "type": "message",
        "subtype": "channel_leave",
        "ts": "1476930906.000178"
    },
    {
        "user": "U216ML5MM",
        "text": "<@U216ML5MM|witwiki> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1476932384.000179"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "more edits to the design doc:\n- added \u201cset_logger()\u201d API to Client (see description for details)\n- added justifications for \u201cnew_keyValueStore\u201d on the Client class, in response to question from Muhammad\n- added \u201cquery\u201d API to Chain class, for \u201canonymous queries\"\n- moved transaction related APIs (create\/send proposals, create\/send transactions) from Chain to Member. These require an enrolled member to carry out, so that feels like the more natural home for these APIs. Chain class COULD have convenient methods for them.\n- removed \u201cget_name\u201d from MemberServices (consensus seems to be this is not needed)\n- added \u201cquery_transaction\u201d and \u201cquery_state\u201d to the Member class (see description for details)",
        "edited": {
            "user": "U13TWBRBL",
            "ts": "1476934324.000000"
        },
        "ts": "1476934227.000180"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "get_enrollment on MemberService should be renamed to \u201cget_member\u201d as suggested by Muhammad, which should be a local-only operation (loading the user object from keyvaluestore). CA\u2019s don\u2019t really support \u201cGET existing certs\u201d, only \u201ccreate\u201d and \u201crevoke\u201d. so a client will not be able to obtain an already issued certificate from the CA outside of the \u201cenroll()\u201d operation.",
        "ts": "1476935853.000182"
    }
]