[
    {
        "user": "U1HQB4RT8",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1HQB4RT8|welsmann> has joined the channel",
        "ts": "1466148265.000248"
    },
    {
        "type": "message",
        "user": "U1H1WD4D7",
        "text": "hello, anybody can do us a favour? Is there any interface to get all the transaction data in hyperledger blockchain?",
        "ts": "1466148817.000249"
    },
    {
        "user": "U1HP94719",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1HP94719|mark_lester> has joined the channel",
        "ts": "1466149523.000250"
    },
    {
        "type": "message",
        "user": "U1HP94719",
        "text": "greetings.  what is the scope of hyperledger ?. Is this essentially a blockchain project, or should\/could it include related immutable technologies.  I think \"something else\" should probably go somewhere else, but I have an overlapping problem space I think, so this may be the right place to discuss",
        "ts": "1466150262.000251"
    },
    {
        "type": "message",
        "user": "U1HP94719",
        "text": "<@U0VKPD6A2>: hey dan, on scrolling up I guess that was for you. I'd love a quick chat when you have the time.",
        "ts": "1466150494.000252"
    },
    {
        "user": "U1HR7GUBB",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1HR7GUBB|ylh> has joined the channel",
        "ts": "1466152277.000253"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "<@U106SFX62>:  <http:\/\/stackoverflow.com\/a\/37880440\/6160507>",
        "attachments": [
            {
                "title": "How to decrypt result of query when using the Hyperledger Client SDK for Node.js",
                "title_link": "http:\/\/stackoverflow.com\/a\/37880440\/6160507",
                "text": "In the Hyperledger Client SDK for Node.js , how can I decrypt the results of the query that are returned in the results variable below ?tx.on('complete', function (results) {",
                "fallback": "How to decrypt result of query when using the Hyperledger Client SDK for Node.js",
                "thumb_url": "http:\/\/cdn.sstatic.net\/Sites\/stackoverflow\/img\/apple-touch-icon@2.png?v=73d79a89bded&a",
                "from_url": "http:\/\/stackoverflow.com\/a\/37880440\/6160507",
                "thumb_width": 316,
                "thumb_height": 316,
                "service_icon": "http:\/\/cdn.sstatic.net\/Sites\/stackoverflow\/img\/favicon.ico?v=4f32ecc8f43d",
                "service_name": "stackoverflow.com",
                "id": 1
            }
        ],
        "ts": "1466162987.000254"
    },
    {
        "user": "U1HSEPL9M",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1HSEPL9M|santhoshr> has joined the channel",
        "ts": "1466164528.000256"
    },
    {
        "user": "U1HR1RWMR",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1HR1RWMR|illya13> has joined the channel",
        "ts": "1466165034.000257"
    },
    {
        "type": "message",
        "user": "U0VKPD6A2",
        "text": "Hi <@U1HP94719> feel free to DM me. In a nutshell though this is a blockchain project.",
        "ts": "1466167429.000258"
    },
    {
        "type": "message",
        "user": "U1HP94719",
        "text": "Hey. yes, I get that. I'm just getting my head round  the stuff you've got. I've written this <https:\/\/concordatablog.wordpress.com\/tech\/>, which has been fun, but I'd gladly ditch\/refactor it with, well anything that I didnt have to look after :wink:.  SO while I am makig this argument that the partes",
        "attachments": [
            {
                "service_name": "Concordata - Distributed Smart Ledger",
                "service_url": "http:\/\/concordatablog.wordpress.com",
                "title": "How It Works",
                "title_link": "https:\/\/concordatablog.wordpress.com\/tech\/",
                "author_name": "Lester",
                "author_link": "https:\/\/concordatablog.wordpress.com\/author\/markclester\/",
                "thumb_url": "https:\/\/i0.wp.com\/concordatablog.files.wordpress.com\/2016\/06\/cropped-cropped-cropped-isambard-kingdom-brunel-at-millwall-during-the-building-of-the-great-eastern.jpg?fit=200%2C150&ssl=1",
                "thumb_width": 200,
                "thumb_height": 54,
                "text": "Overview\nConcordata is a smart contract platform. It does not depend on blockchain though it does use it and, as any observer or commentator of distributed ledger technology will appreciate, we are constantly learning about and reviewing our position on this complex subject.\nConcordata&amp;rsquo;s principal goals are ones of functionality and access. How the hell do you do this stuff that everyone is talking about, and how do we build things that can work in real life.\nThe developers come from two disparate computing backgrounds. One from the heart of the insurance industry having spent their working life confronted by issues of trust and interoperability of financial systems, and one from a systems development background, especially in publishing and an open source culture. Both of us have strongly held views about access and empowerment. One driven by these issues of trust, the other through a need to give as much work to other people as he can.\nAt the core of the system is a technology we call 3TC. There is also a leading edge web stack we call Gemini, built on systems such as Sequelize, Express and Backbone to name a few. The entire server side system is built on Node.JS. Here is not the place to wax lyrical about what is happening with Javascript. but if you don&amp;rsquo;t know what Node.JS is and what effect it&amp;rsquo;s having, you should perhaps find out.\n3TC &amp;ndash; A Provable, Immutable and Private Consensus Strategy\nThe transport, validation and publication mechanism within Concordata is called Three Tier Consensus, or 3TC. It is not a blockchain derivative. It employs a method of network saturation of signed request and acknowledgement messages, including an elegant but uncontroversial technique for applying a non blocking network wide record lock when required. As such it is not scalable with respect to the number of parties to a contract as the number of messages is proportional to the square of the number of parties to a contract. But for a small number of parties to any specific contract, the system is perfectly effective.\n\nUsing standard cryptographic techniques and secure, publicly maintained libraries and platforms, such as for two way authentication and Merkle trees, it is a trivial task to build a system which is immune from any unauthorised addition without needing to corroborate with any external system. i.e if we have the correct keys we can verify that any record has been signed correctly by foreign parties. You can also guarantee against deletion by verification of a Merkle tree, apart from the latest transactions, without reference to an external source. i.e. even if we are offline, all an intruder can do is roll back time.\nTo guarantee against deletion from the head of the transaction stream, the systems need to corroborate with each other as to what the root of their Merkle tree is. But there is sufficient proof as just discussed that any discrepancy can be proved by the external system. i.e I can prove that I have a more recent hash as I can show you all the signatures to prove it&amp;rsquo;s genuine.\nIn short, Concordata is provably immutable &amp;ndash; immune from any unauthorised&amp;nbsp; deletion or addition, provided at least one participant has not been corrupted, and totally immune from any historical tampering irrespective of a network wide security failure and without any recourse to the other parties computers to prove it.\nAs such, Concordata is not dependent on a development of the blockchain consensus algorithm, and is subsequently not concerned about having to prove that any such changes will work when scaled. This lower level synchronisation is the first of the 3 tiers.\nBlockchain\nAs discussed above, it is not possible to prove that an entire network has not been corrupted without some external verification, i.e to verify what the very latest hash is, we have to look it up on a blockchain to be certain if we are concerned that we&amp;rsquo;ve all been hacked. 3TC, as part of its 3rd tier, will publish the hash of any successful transactions to a Multichain private blockchain distributed across the entire Concordata network. This posting includes signatures from all participants and as such can also provide verification to external systems of the existence, legitimacy and timestamp of a given transaction.\nEmpowerment Through Access\nMuch like spreadsheets in the 80&amp;rsquo;s enabled accountants to develop applications that would have previously required a software engineer, Concordata allows those who understand the logic of the business process to program their systems as much as possible. The world has changed much and the industry has enveloped almost everything in the last 3 decades. Any sophisticated user has an understanding of basic relational concepts.&amp;nbsp; We need to be enabling these lead users to become business analysts, and business analysts to become software architects.\nOpen and Equitable Negotiation of a Contract\nAn important principle and design goal of Concordata is to move as much of the specification of systems to the users themselves. The user decides what fields we have and what they are called, what sub records or blocks belong to a contract, i.e the contracts structure, and what rules need to be applied to updates of a running system. Concordata does not define journal transaction types and the like, this is the users job. The entire process of the development of a contract is equitable, in that everyone has to agree what the rules are before we apply them. This process, and the details of how contention and collisions are resolved, is the 2nd tier of 3TC.\nThe architecture, developed on a comprehensive stack of contemporary Object Relational Mapping and Model View Controller technologies on Node.JS, is extensible. More complex rules and triggers can be programmed by engineers and applications developed at a lower level. But the ethos is to drive as much of this decision making onto the client\/Client.\nThe web stack architecture itself is called Gemini and was developed as part of an open mapping project. It is reactive, meaning that if you change the database, any client looking at that part of the database will automatically refresh. This is employed from the base of the Object Relational Mapper, and throughout the Gemini stack. Your models will by default automatically be instantiated within Gemini&amp;rsquo;s&amp;nbsp; data model hierarchy,&amp;nbsp; and will automatically fetch if the database changes.\nThe Future Has Just Happened\nThere is a generic contract model. Obviously there have to be some tables at some stage. We have an extensible model which will handle the design patterns of everything we&amp;rsquo;ve analysed so far.&amp;nbsp; But of course such is life, someone is going to turn up with a fundamental concept that we hadn&amp;rsquo;t come across or thought about that means we need to tweak, or maybe radically rethink our generic contract model. 3TC will replicate any schema because it works, with the wonders of ORM, at a transactional level on the tables themselves. The underlying transport mechanism remains completely unchanged and thus we can migrate or support multiple core schemas.\nBe As Smart As You Like\nIt is, at least currently, impossible to verify the execution of a program without knowing the input data. There&amp;rsquo;s no known way of magically scrambling everything up and letting blockchain nodes verify an execution of a program without knowing the data they need to work with. If you have data that needs to be private but is required to validate an event on your smart contract, you have an issue.\n3TC doesn&amp;rsquo;t use blockchain for any validation, it only uses the systems on the contract. There is an in-built rules engine to 3TC which allows the end users to develop a codeless rule based system, and we will be able to run user specified javascript code in a virtual machine on the parties systems to expand this and indeed enhance the co\u2026",
                "fallback": "Concordata - Distributed Smart Ledger Link: How It Works",
                "from_url": "https:\/\/concordatablog.wordpress.com\/tech\/",
                "service_icon": "https:\/\/secure.gravatar.com\/blavatar\/51b7fea4a6cf5584e572cf268bc2482c?s=114",
                "id": 1
            }
        ],
        "ts": "1466168045.000259"
    },
    {
        "type": "message",
        "user": "U1HP94719",
        "text": "oops. well, I continue. the parties are quiet closely bound.",
        "ts": "1466168082.000261"
    },
    {
        "type": "message",
        "user": "U1HP94719",
        "text": "anyway, I seem to have found myself up to my ears in this insurance biz, i may go back to writing wikitimetable which is much more worthwhile,",
        "ts": "1466168193.000262"
    },
    {
        "type": "message",
        "user": "U1HP94719",
        "text": "I gotta go watch a football match. any feedback appreciated. be as harsh as you like",
        "ts": "1466168412.000263"
    },
    {
        "user": "U1HT1UAG4",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1HT1UAG4|sanjeev.hegde> has joined the channel",
        "ts": "1466171302.000264"
    },
    {
        "user": "U1HUB05BL",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1HUB05BL|joshvanderfalken> has joined the channel",
        "ts": "1466174818.000265"
    },
    {
        "user": "U1J024XL7",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1J024XL7|jjosinsky> has joined the channel",
        "ts": "1466182505.000266"
    },
    {
        "type": "message",
        "user": "U1HP94719",
        "text": "does\/will sawtooth have a streams concept. I want a select group of parties to be able to findOrCreate a hash on a contract specific wallet, for those parties to be able to verify that all others have signed, and for external parties to also be able to verify that the entry has been signed. Is this a pattern you are working on or have.",
        "ts": "1466185042.000267"
    },
    {
        "user": "U1HUM3ESF",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1HUM3ESF|scottallan> has joined the channel",
        "ts": "1466185773.000268"
    },
    {
        "type": "message",
        "user": "U0YQQRNU8",
        "text": "<@U1HP94719>: within sawtooth, that would be implemented as a transaction family.  in a transaction family, you define the transaction data and then validation and storage-update functions (is_valid\/apply) to update the local store.  I don't believe we have any transaction families as examples in which multiple participants sign an object; but generallly, you could have a transaction which created the object and subsequent transactions (from different participants) for signing it, and then a client application which could inspect local state (for external parties)",
        "ts": "1466187470.000269"
    },
    {
        "type": "message",
        "user": "U0YQQRNU8",
        "text": "<@U1HP94719>: I just added a tutorial on transaction families to our docs - <https:\/\/intelledger.github.io\/> - which should help as an overview",
        "ts": "1466187587.000270"
    },
    {
        "type": "message",
        "user": "U1HP94719",
        "text": "<@U0YQQRNU8>: thanks.  a pre req is clearly to understand marketplace I guess",
        "ts": "1466188278.000271"
    },
    {
        "type": "message",
        "user": "U0YQQRNU8",
        "text": "<@U1HP94719>: it is certainly the most complex\/complete transaction family available currently.  it may or may not be a good basis for what you want to accomplish, depending on whether the concepts in mktplace coorelate to your desired goals.  the core concepts are also available sawtooth-arcade's tic-tac-toe example transaction family, without as much business logic",
        "ts": "1466188663.000272"
    },
    {
        "type": "message",
        "user": "U0YQQRNU8",
        "text": "(I used concepts twice there, first use was about business logic and the second use 'core concepts' was about transaction families)",
        "edited": {
            "user": "U0YQQRNU8",
            "ts": "1466188811.000000"
        },
        "ts": "1466188795.000273"
    },
    {
        "user": "U1J1G37U6",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1J1G37U6|hossein> has joined the channel",
        "ts": "1466192055.000275"
    },
    {
        "user": "U1J22QBB3",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1J22QBB3|benlevin> has joined the channel",
        "ts": "1466193371.000276"
    },
    {
        "user": "U1J2E6HHV",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1J2E6HHV|vjouenne> has joined the channel",
        "ts": "1466196782.000277"
    }
]