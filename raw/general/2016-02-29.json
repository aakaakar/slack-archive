[
    {
        "user": "U0PG8VA4Q",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U0PG8VA4Q|ahannigan> has joined the channel",
        "ts": "1456760639.000425"
    },
    {
        "user": "U0PG478SG",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U0PG478SG|dylan> has joined the channel",
        "ts": "1456760895.000426"
    },
    {
        "type": "message",
        "user": "U0N309X5X",
        "text": "Wrt to an implementation adoption vs reinventing, how does an examplified cpp lang approach sound\nWhere the core mission would be to draft and evolve a standard while blessing a single implementation targeted for correctness only and encouraging other implementations to claim an edge on security, performance, cutting-edge standards adoption, interop, support etc (much like we have msvc, clang, gcc, Intel cpp, etc) it's a much more vibrant approach imo.",
        "ts": "1456763775.000427"
    },
    {
        "type": "message",
        "user": "U0N309X5X",
        "text": "The correctness implementation ought to start from scratch so that the next generation experts for the community can learn from it instead of dissecting an optimized implementation that's not trivial",
        "ts": "1456764229.000428"
    },
    {
        "user": "U0PJ1R15F",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U0PJ1R15F|jecol> has joined the channel",
        "ts": "1456779174.000429"
    },
    {
        "type": "message",
        "user": "U0NQY299A",
        "text": "<@U0MUQGQUW> &amp; <@U0KPYF3PF> -- Re: [technical-discuss] Example Use Case: Music Copyrights:\nConsenSys has worked closely with Imogen to develop the Ujo Music Prototype. You can examine the Solidity (Smart Contract) code here: <https:\/\/gist.githubusercontent.com\/simondlr\/0e0ca655bd13c1dad072\/raw\/507c39a798c93f73048484a4c3e40cc51488a5b1\/TinyHuman.sol>\n\nThis smart contract is deployed to the Ethereum public network and has been invoked hundreds of times by consumers who desire to buy Imogen's music. This a real \"in the wild\" smart contract use case example. \n\nWe at ConsenSys continue to explore how smart contracts can power the future of digital rights managements with various clients &amp; stakeholders. The power of an Ethereum-based architecture allows for the rapid deployment of these types of use cases.",
        "ts": "1456795759.000430"
    },
    {
        "type": "message",
        "user": "U0NQY299A",
        "text": "As a side note, I wasn't able to respond to the thread in \"Digest Mode\" - does anyone have any recommendations for best way to manage the mailing list? I've disabled Digest mode for now until I find a better solution..",
        "ts": "1456795814.000431"
    },
    {
        "type": "message",
        "user": "U0NQY299A",
        "text": "+1 to <@U0N257PH7>'s question on Slack \/ Mailing list integration :simple_smile:",
        "ts": "1456795838.000432"
    },
    {
        "type": "message",
        "user": "U0NQY299A",
        "text": "Happy to help take a look at it if there is a technical blocker",
        "ts": "1456795853.000433"
    },
    {
        "type": "message",
        "user": "U0NLFQGHK",
        "text": "<@U0N309X5X>: Seen moxiebox?  <https:\/\/github.com\/jgarzik\/moxiebox>\nIt is an example of compiling smart contracts using actual C\/C++\/etc. GNU compiler toolchain.\nNo need to reinvent an entire developer toolsuite (debuggers, profilers, IDEs, \u2026)",
        "edited": {
            "user": "U0NLFQGHK",
            "ts": "1456796730.000000"
        },
        "ts": "1456796726.000434"
    },
    {
        "type": "message",
        "user": "U0NLFQGHK",
        "text": "Write smart contracts in your preferred programming language.",
        "ts": "1456796748.000437"
    },
    {
        "type": "message",
        "user": "U0N309X5X",
        "text": "<@U0NLFQGHK> Thanks for the link, I'll certainly check it out. I, however, was addressing the core Hyperledger mission where, from my understanding, there's or was a discussion on the approach to take for laying down the first lines of code for the project.\n\nI'm suggesting that the Hyperledger project adopt creating a standard as it's core mission and lay down fresh code for a platform only to prove the end-to-end correctness of the standard. From there onwards other forks, modifiers or fresh standard implementors can pick an edge, be it performance, security, choice of smart contracts vs utxo models, and so on.\n\nI don't believe initiating a production system approach will check-off every conceivable best approach and eventually there may be a point down the road where idea factions will make a hard divergence and that would appear to be a failure in a global mission.\n\nA standards approach with a correctness implementation will help nurture future experts while in the near term encourage various irreconcilable objectives to still gravitate towards a common Hyperledger mission. Various platform approaches can compete on security, performance, x vs y etc but yet interop (protocol, api, who-knows-what) -- surely at least have the same agreement on a standard.\n\nI only mentioned the cpp standard as an example of how a mission can realistically survive for decades yet still be relevant and even thriving because there are various implementations that push each other onwards. Hyperledger could go that route and possibly do some things better :)",
        "ts": "1456799654.000438"
    },
    {
        "user": "U0PKGK7KK",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U0PKGK7KK|diego> has joined the channel",
        "ts": "1456802416.000439"
    },
    {
        "user": "U0PKMSYKG",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U0PKMSYKG|j3ffyang> has joined the channel",
        "ts": "1456806837.000440"
    }
]