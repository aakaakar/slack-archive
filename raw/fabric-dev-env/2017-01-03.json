[
    {
        "type": "message",
        "user": "U3BSMKS21",
        "text": "hey i have a question. running a peer node with  `--peer-chaincodedev` what exactly is it doing?",
        "ts": "1483433584.000727"
    },
    {
        "type": "message",
        "user": "U3BSMKS21",
        "text": "i have read somewhere that this way the chaincode is not executed in a docker container?",
        "ts": "1483433606.000728"
    },
    {
        "type": "message",
        "user": "U3BSMKS21",
        "text": "does this mean that in normal mode the chaincode is run in a docker container although im running my peer node locally? this somehow does not make sense to me. would be thankful for any comment",
        "ts": "1483433646.000729"
    },
    {
        "type": "message",
        "user": "U3BSMKS21",
        "text": "as far as i understand when you start a peer node `peer node start` it uses the core.yaml file",
        "ts": "1483442650.000730"
    },
    {
        "type": "message",
        "user": "U3BSMKS21",
        "text": "is there any possibility to pass a different yaml-file to the peer node for configuartion?",
        "ts": "1483442684.000731"
    },
    {
        "type": "message",
        "user": "U3BSMKS21",
        "text": "same question for memberservice using membersrvc.yaml",
        "ts": "1483442789.000732"
    },
    {
        "user": "U3MBKT8UF",
        "text": "<@U3MBKT8UF|samsmith> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1483445535.000733"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "@thosjest -  \n\nfirst question:    When running in \"normal\" mode, chaincodes are ALWAYS deployed as Docker containers  (this provides isolation between multiple chaincodes).   When running in \"dev\" mode ( `--peer-chaincodedev` ) you are able to more quickly \"test\" your chaincode as in this case you actual simply compile and run the chaincode (passing the correct parameters for it to connect to the peer)\n\nsecond question:   in V1 there is an environment variable (`PEER_CFG_PATH`) you can  set to specify a custom location for `core.yaml` (but the filename is always `core.yaml`) but in v0.6 the file location is more or less \"fixed\" but of course you can change the contents of the file.  You can also override most of the `core.yaml` settings by passing in environment variables.  If you look at any of the Docker compose files you'll see the naming convention",
        "ts": "1483446272.000734"
    },
    {
        "type": "message",
        "user": "U3BSMKS21",
        "text": "<@U0PB67X4K> thx a lot",
        "ts": "1483449120.000735"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "BTW - for folks working on Fabric development, you might be interested in this recently merged build feature:    <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3555\/>\n\nSee the commit for details, but basically it allows you to run  unit-tests for a list of packages rather than running the whole suite.  It's nice as a pre-test before submitting to quickly ensure that your tests will pass in the CI environment without having to run all the unit-tests for all packages",
        "ts": "1483464710.000736"
    },
    {
        "user": "U3LU3AQM8",
        "text": "<@U3LU3AQM8|sukrit> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1483477119.000737"
    },
    {
        "user": "U3HN4GFA9",
        "text": "<@U3HN4GFA9|tzipih> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1483503895.000738"
    }
]