[
    {
        "type": "message",
        "user": "U3GLPV06R",
        "text": "`JAVA_OPTS:  -Dhttp.proxyHost=<http:\/\/zscaler.proxy.int.kn|zscaler.proxy.int.kn> -Dhttp.proxyPort=80 -Dhttps.proxyHost=<http:\/\/zscaler.proxy.int.kn|zscaler.proxy.int.kn> -Dhttps.proxyPort=80`",
        "ts": "1484035453.000794"
    },
    {
        "type": "message",
        "user": "U3GLPV06R",
        "text": "This is when I manually run `javabuild.sh`. Full output is:\n```\n$ .\/core\/chaincode\/shim\/java\/javabuild.sh\nJAVA_OPTS:  -Dhttp.proxyHost=<http:\/\/zscaler.proxy.int.kn|zscaler.proxy.int.kn> -Dhttp.proxyPort=80 -Dhttps.proxyHost=<http:\/\/zscaler.proxy.int.kn|zscaler.proxy.int.kn> -Dhttps.proxyPort=80\nNote: C:\\Data\\Github\\fabric\\core\\chaincode\\shim\\java\\src\\main\\java\\org\\hyperledger\\java\\shim\\ChaincodeStub.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\ncp: cannot create directory '\/root\/': Permission denied\n```",
        "ts": "1484035513.000795"
    },
    {
        "type": "message",
        "user": "U12452RAP",
        "text": "VAGRANT_HTTP_PROXY VAGRANT_HTTPS_PROXY vagrant up",
        "ts": "1484042641.000796"
    },
    {
        "type": "message",
        "user": "U12452RAP",
        "text": "works fine for me ",
        "ts": "1484042684.000797"
    },
    {
        "type": "message",
        "user": "U0KRRM29Z",
        "text": "<@U3GLPV06R>: the JAVA_OPTS look OK and given that it works if you run javabuild.sh we're pretty much left with some DNS mayhem in 'docker build'. As an easy quick test is it possible to replace %PROXY_SERVER% with the IP address of '<http:\/\/zscaler.proxy.int.kn|zscaler.proxy.int.kn>'. I'll see if I can work out a cleaner fix.",
        "ts": "1484051642.000798"
    },
    {
        "user": "U38JCNW5V",
        "text": "<@U38JCNW5V|divyank-sk> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1484060409.000799"
    },
    {
        "type": "message",
        "user": "U38JCNW5V",
        "text": "",
        "attachments": [
            {
                "fallback": "[January 10th, 2017 9:59 AM] divyank-sk: why does fabric use year-old beta versions of grpc and protocol buffers?",
                "ts": "1484060350.000938",
                "author_subname": "divyank-sk",
                "channel_id": "C0YPYBVJM",
                "channel_name": "fabric-dev",
                "is_msg_unfurl": true,
                "text": "why does fabric use year-old beta versions of grpc and protocol buffers?",
                "author_name": "Divyank Katira",
                "author_link": "https:\/\/hyperledgerproject.slack.com\/team\/divyank-sk",
                "author_icon": "https:\/\/secure.gravatar.com\/avatar\/8ee69409b9a05dc92013148641b64ab4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0005-48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "color": "D0D0D0",
                "from_url": "https:\/\/hyperledgerproject.slack.com\/archives\/fabric-dev\/p1484060350000938",
                "is_share": true,
                "footer": "Posted in #fabric-dev"
            }
        ],
        "ts": "1484060429.000800"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "As far as I know, protobufs are updated to a recent released version",
        "ts": "1484060896.000801"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "Can you be more specific?",
        "ts": "1484060904.000802"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "I am not sure about grpc ",
        "ts": "1484060914.000803"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "I think he means the vendor",
        "ts": "1484060930.000804"
    },
    {
        "type": "message",
        "user": "U38JCNW5V",
        "text": "yes, vendor.json declares library revisions from October \u201815. Just wondering if there was a reason for not using newer, more stable versions.",
        "ts": "1484061488.000805"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "<@U38JCNW5V> generally things get updated in response to some dev needing a feature, and stay fixed when nothing is broken",
        "ts": "1484063593.000806"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "not necessarily by design\/process",
        "ts": "1484063603.000807"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "if there is a pre-release version of a library, I agree we should endeavor to upgrade to released versions minimally",
        "ts": "1484063633.000808"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "if you see such a case in grpc and want to drive the CR to upgrade it, it would be appreciated",
        "ts": "1484063666.000809"
    },
    {
        "type": "message",
        "user": "U38JCNW5V",
        "text": "Thanks! I\u2019ll give it a shot.",
        "ts": "1484068732.000810"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3827\/> <@U0KPFAZNF> This fixes `make protos` (See <https:\/\/jira.hyperledger.org\/browse\/FAB-1468> for which you are assigned)",
        "ts": "1484071761.000811"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "<@U0XPR4NP4> you are a gentleman, ty",
        "ts": "1484072951.000812",
        "reactions": [
            {
                "name": "simple_smile",
                "users": [
                    "U0XPR4NP4"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "(and sorry for the neglect)",
        "ts": "1484073085.000813"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "we really need to get that check added to the -verify CI task",
        "ts": "1484073110.000814"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "No problem, I should have just put this changeset together a week ago when I noticed... would have saved myself some time in retrospect.",
        "ts": "1484073157.000815"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "+1 to including it in the -verify CI task, seems too often I run `make protos` and unrelated proto files end up changing.",
        "ts": "1484073182.000816"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "yeah, now that the protoc task is normalized inside docker, I would think it could be deterministic enough to rely on that",
        "ts": "1484073566.000817"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "why did `make protos` not work but `.\/scripts\/compile_protos.sh` did?",
        "ts": "1484073874.000818"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Because `.\/scripts\/compile_protos.sh` ends up trying to write `test.pb.go` into `$GOPATH` which is not writable inside docker",
        "edited": {
            "user": "U0XPR4NP4",
            "ts": "1484074114.000000"
        },
        "ts": "1484073902.000819"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "(The `go_package` directive tells `protoc` where to dump the output in `$GOPATH`)",
        "ts": "1484073945.000820"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "When there's no dependency between proto packages, it's mostly innocuous not to specify the `go_package` and simply run the `protoc` in the same directory as the `.proto` file.  But, when you have dependencies between different proto packages, this breaks.",
        "ts": "1484073999.000821"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "`.\/scripts\/compile_protos.sh` has to support the proto packages with external dependencies, so, it runs from `$GOPATH`",
        "edited": {
            "user": "U0XPR4NP4",
            "ts": "1484074066.000000"
        },
        "ts": "1484074059.000822"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "Isn't ` \"<http:\/\/github.com\/hyperledger\/fabric\/core\/comm\/testdata\/grpc|github.com\/hyperledger\/fabric\/core\/comm\/testdata\/grpc>\";` also in `$GOPATH` ?",
        "ts": "1484074233.000825"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "So, `$GOPATH\/src` is not writable, but `$GOPATH\/src\/github.com\/hyperledger\/fabric` is writable",
        "ts": "1484074314.000826"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Basically, when you run `.\/scripts\/compile_protos.sh` locally, you are putting a random `test.pb.go` somewhere in your `$GOPATH`",
        "edited": {
            "user": "U0XPR4NP4",
            "ts": "1484074412.000000"
        },
        "ts": "1484074342.000827"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Try a:\n```\n find \"$GOPATH\" -name 'test.pb.go'\n```",
        "edited": {
            "user": "U0XPR4NP4",
            "ts": "1484074388.000000"
        },
        "ts": "1484074375.000828"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "what's so special about that package? the `core\/comm\/testdata\/grpc`?",
        "ts": "1484074422.000831"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "(will boot the laptop in a few minutes)",
        "ts": "1484074432.000832"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I don't think there's anything special? I think the `test.proto` was compiled manually when it was checked in, so the missing `go_package` did not have any negative effect (for the generated file).  However, it broke `make protos` as a side effect (because it does not have `go_package` set and tries to write to a read only path)",
        "edited": {
            "user": "U0XPR4NP4",
            "ts": "1484074571.000000"
        },
        "ts": "1484074506.000833"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "The only place I found it referenced was\n```\ncore\/comm\/server_test.go\n36-    \"<http:\/\/google.golang.org\/grpc\/credentials|google.golang.org\/grpc\/credentials>\"\n37-\n38-    \"<http:\/\/github.com\/hyperledger\/fabric\/core\/comm|github.com\/hyperledger\/fabric\/core\/comm>\"\n39:    testpb \"<http:\/\/github.com\/hyperledger\/fabric\/core\/comm\/testdata\/grpc|github.com\/hyperledger\/fabric\/core\/comm\/testdata\/grpc>\"\n40-)\n41-\n42-\/\/Embedded certificates for testing\n```\n\nWhich, is overriding the import name regardless, so I don't expect any compilation problems.",
        "ts": "1484074652.000836"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "yes I remember that, I think it's the configurable gRPC server commit",
        "edited": {
            "user": "U0ZJZBJLF",
            "ts": "1484074711.000000"
        },
        "ts": "1484074687.000837"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "What I still fail to understand is - *why* would compiling that file would output not under `<http:\/\/github.com\/hyperledger\/fabric|github.com\/hyperledger\/fabric>` without the directive",
        "edited": {
            "user": "U0ZJZBJLF",
            "ts": "1484074771.000000"
        },
        "ts": "1484074747.000839"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Ah, so, you can actually blame me for that.  You can see in `compile_protos.sh`\n\n```\nfor dir in $ROOTLESS_PROTO_DIRS $PROTO_ROOT_DIRS; do\necho Working on dir $dir\n        # As this is a proto root, and there may be subdirectories with protos, compile the protos for each sub-directory which contains them\n\tfor protos in $(find \"$dir\" -name '*.proto' -exec dirname {} \\; | sort | uniq) ; do\n\t       protoc --proto_path=\"$dir\" --go_out=plugins=grpc:$GOPATH\/src \"$protos\"\/*.proto\n\tdone\ndone\n```\n\nNote the: `--go_out=plugins=grpc:$GOPATH\/src`.  `protoc` takes that path, adds the `go_package` path to it, and writes the file there.  I guess the idea is that you don't have to litter your go path with proto definitions if you do not want.",
        "ts": "1484074914.000841"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "This was the only way I could figure out to make `protoc` handle proto files in different directories which depended on eachother",
        "ts": "1484074952.000842"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "In this case, there are `fabric\/protos\/orderer` and `fabric\/protos\/peer` which depends on `fabric\/protos\/common` (and possibly others)",
        "ts": "1484075006.000843"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "I just realized I wasnt even aware of FAB-1468, i think the proximity to the holidays contributed to me missing the email",
        "ts": "1484075029.000844"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "out of curiosity, what path is it actually trying to write to?",
        "ts": "1484075044.000845"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "`$GOPATH\/src\/test.pb.go`",
        "ts": "1484075063.000846"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "in most contexts,  I volume mount \/opt\/gopath\/src",
        "ts": "1484075068.000847"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "ah, ok, I probably actually am too precise then",
        "ts": "1484075079.000848"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "i think I mount \/opt\/gopath\/src\/github.com\/hyperledger\/fabric",
        "ts": "1484075093.000849"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "That seems like the right choice to me",
        "ts": "1484075100.000850"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "yeah, though not in this case :wink:",
        "ts": "1484075106.000851"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "(Helps us catch bugs, like this one)",
        "ts": "1484075107.000852"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "true",
        "ts": "1484075115.000853"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Probably better than silently not updating the generated file.",
        "ts": "1484075127.000854"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "right",
        "ts": "1484075131.000855"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "i agree",
        "ts": "1484075133.000856"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "i was mostly wondering if I neglected to consistently set the volume mount for the proto context",
        "ts": "1484075147.000857"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "but I understand now",
        "ts": "1484075155.000858"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0ZJZBJLF> If you can find a cleaner\/better way to get the generated `.pb.go` files to link to eachother while also supporting protos which neglect to specify `go_package` you have my +2, but it was beyond me.",
        "ts": "1484075189.000859"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "can't we somehow cd to the directory, and use the `--include-imports` flag with the common?",
        "ts": "1484075256.000860"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "Didn't think of it for too long, or try this of course",
        "ts": "1484075281.000861"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "It's all been paged out of my head, so can't say for certain that that won't work, but I tried for a few hours to not generate them this way with no luck.",
        "ts": "1484075356.000862"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "yeah, I assume you tried enough stuff when you updated the script",
        "ts": "1484075364.000863"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "just - what did you mean by saying \"adds the `go_package` path to it,\" ?",
        "edited": {
            "user": "U0ZJZBJLF",
            "ts": "1484075425.000000"
        },
        "ts": "1484075406.000864"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "As I said, please prove me wrong, I'm not a big fan of the way things ended up, but it was the only way that worked for me.",
        "ts": "1484075407.000865"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Concatenates that `$GOPATH\/src` string from `\ufeff\u2060\u2060\u2060\u2060--go_out=plugins=grpc:$GOPATH\/src` with the value of `go_package` to determine where to write the file",
        "ts": "1484075460.000867"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "oh so the value of go_package is taken and concatenated!",
        "ts": "1484075488.000868"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Yep",
        "ts": "1484075499.000869"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "that's why it's a relative path there",
        "ts": "1484075499.000870"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "got it, thanks a lot for the step-by-step",
        "ts": "1484075509.000871"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "No problem",
        "ts": "1484075521.000872"
    },
    {
        "user": "U0XQ35CDD",
        "text": "<@U0XQ35CDD|kostas> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1484107965.000873"
    },
    {
        "type": "message",
        "user": "U3E300R6Z",
        "text": "In car lease demo, I want to know where the API's being kept and how from Go or node.js being they are fetching.",
        "ts": "1484115714.000874"
    }
]