[
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "<@U2X9KDDL7> - how are you submitting transactions?  Via the REST API or via the SDK?    \n\nFYI - the \"privacy\" setting in core.yaml is actually for encryption",
        "ts": "1481283564.000129"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "<@U0PB67X4K>   re: <https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1481241640000125>",
        "attachments": [
            {
                "from_url": "https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1481241640000125",
                "fallback": "[December 8th, 2016 4:00 PM] garisingh: It's actually just writing some common code to load the raw certificates into the proper Go types that we are talking about here.   Basically taking raw pem encoded certs and loafingvthem into the proper Go crypto objects ",
                "ts": "1481241640.000125",
                "author_subname": "garisingh",
                "channel_id": "C2GE7GXM1",
                "channel_name": "fabric-crypto",
                "is_msg_unfurl": true,
                "text": "It's actually just writing some common code to load the raw certificates into the proper Go types that we are talking about here.   Basically taking raw pem encoded certs and loafingvthem into the proper Go crypto objects ",
                "author_link": "https:\/\/hyperledgerproject.slack.com\/team\/garisingh",
                "author_icon": "https:\/\/avatars.slack-edge.com\/2016-09-10\/78323915894_521dc680194c08b166e0_48.jpg",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "footer": "Posted in #fabric-crypto"
            }
        ],
        "ts": "1481292626.000130"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "you mean something like this article ? <https:\/\/ericchiang.github.io\/tls\/go\/https\/2015\/06\/21\/go-tls.html>",
        "edited": {
            "user": "U0UGH3X7X",
            "ts": "1481292683.000000"
        },
        "ts": "1481292640.000132"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "I'll catch keith in a bit and see what cop can give me",
        "ts": "1481292724.000134"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "so in this case you are looking for the shim to use mutual TLS with the Kafka broker(s)?  mutual meaning use client certificates?",
        "ts": "1481292834.000135"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "right",
        "ts": "1481292884.000136"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0PB67X4K> <@U1BC5A0F9> <@U0ZR63HLK> <@U26T99AQ4> <@U0KN2SSKE> <@U0XV1HDL3> <@U0Y14MWA2> <@U0Z541B3P> <@U1KFCPFQA> <@U0XQ35CDD> It occurred to me that we never came to a conclusion on how to do the block hashing, and we are still using the non-deterministic standard proto marshaling for this.  I opened an issue here  <https:\/\/jira.hyperledger.org\/browse\/FAB-1334> for this just to track it, but this seems more crypto than consensus related, so posting it here for discussion.",
        "edited": {
            "user": "U0XPR4NP4",
            "ts": "1481306396.000000"
        },
        "ts": "1481306063.000138"
    },
    {
        "user": "U0Y14MWA2",
        "inviter": "U0XPR4NP4",
        "text": "<@U0Y14MWA2|vukolic> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1481306073.000139"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "To summarize my understanding of the existing discussion, <@U0XV1HDL3> and <@U0Y14MWA2> favored a Merkle tree based approach (to allow transaction pruning, to mirror the bitcoin model, and possibly for performance when buliding a batch of transactions over time), while <@U0Z541B3P> and <@U1KFCPFQA> were more inclined to use a simple straight hash across a custom marshaling scheme (because hashing setup is a significant cost, and at the ledger side where blocks are fixed, a Merkle tree is clearly going to be a performance cost).\n\nI think for the block header we can probably agree that we concatenate the individual block header contents marshaled individually to bytes, then hash over this concatenation, or does someone else have a different proposal?",
        "edited": {
            "user": "U0XPR4NP4",
            "ts": "1481306526.000000"
        },
        "ts": "1481306358.000141"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "I am not against a single hash",
        "ts": "1481306787.000145"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "As far as i recall merkle trees were mentioned in the context of data structures alternative to hash chain",
        "ts": "1481306855.000146"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "Not really wirhin a single block",
        "ts": "1481306864.000147"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "That said hashes of individual tx may already be there",
        "ts": "1481307093.000148"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "Signed be the client",
        "ts": "1481307103.000149"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "By",
        "ts": "1481307106.000150"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "I am not sure how is this implemented but <@U0ZR63HLK> would know",
        "ts": "1481307136.000151"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "Which may mean we may want to compute root hash over concatenation of individual hashes that are already there",
        "ts": "1481307333.000152"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "Am i answering the right question ? :)",
        "ts": "1481307350.000153"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I think so.  At its most basic level, the question is \"How do we compute the hash of a block header?\" and \"How do we compute the hash of the block data (where this hash gets embedded in the block header)?\".\n\nThe hash of the block data can most obviously be computed as the hash of the concatenation block data contents.  It could also be computed as a Merkle tree of some specified width.  Or, it could be some other scheme like the concatenation of the hashes of the individual transaction (though I imagine that at this point, the Merkle tree would be the better option).",
        "ts": "1481307616.000154"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Eventually, I think it might be a good idea to make the block data hashing scheme a parameter to the chain configuration, but, I think we can start simple by picking one.",
        "ts": "1481307697.000155"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "one hash of concatenation of all individual hashes (+block metadata seqence number, previous hash) seems fine to me",
        "ts": "1481307833.000156"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "we do want to be able to identify indivdual tx in a batch easily - e.g., for censorship control",
        "ts": "1481307867.000157"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "alternative for me is a shallow 2-level merkle tree (non-binary) over concatenation of indivudal tx hashes",
        "ts": "1481307931.000158"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "In the block structure, there is a block header, which contains the block number, the hash of the data, and the hash of the previous block header.  This gives us the chaining, and hashing over that concatenation seems easy.",
        "ts": "1481307940.000159"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "with another level combining that hash previous block hash and seqno",
        "ts": "1481307944.000160"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "So the hash chain is over the headers, where the header includes a hash over the data.",
        "ts": "1481307961.000161"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "yes that's the same thing as in my \"2nd option\"",
        "ts": "1481307979.000162"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "that is still a merkle tree in a sense :slightly_smiling_face:",
        "ts": "1481307994.000163"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "albeit a shallow one",
        "ts": "1481307999.000164"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "binary hash tree seems entirely unecessary",
        "ts": "1481308039.000165"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I guess that was intended to be more a statement of \"This is how things work\", we are chaining the headers, where the headers contain a hash of the data.  And the question is how do we hash the data.'",
        "ts": "1481308505.000166"
    },
    {
        "type": "message",
        "user": "U221LL03Z",
        "text": "<@U0PB67X4K> : The code to get Cert object from raw byte is checked-in in fabric-cop\/lib\/crypto\/cryptoutil.go. The function name is GetCertificate. It takes PEM and DER encoding.",
        "ts": "1481308777.000167"
    },
    {
        "type": "message",
        "user": "U2X9KDDL7",
        "text": "<@U0PB67X4K> I'm submitting transactions via the Node SDK HFC.  In particular, what I find avoids the \"Decryption failed\" problem is having peer privacy enabled, and submitting transactions with confidentiality disabled.",
        "ts": "1481314867.000168"
    },
    {
        "type": "message",
        "user": "U2X9KDDL7",
        "text": "<@U0PB67X4K>  I'm a bit confused by what you're saying about privacy -- the protocol spec doc <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/protocol-spec.md#13-terminology> says that privacy is about non-linkability of transactions (which I think means using one TCert, not containing user identity, per transaction -- correct me if I'm wrong), and confidentiality is about controlling who can see which transactions (which I think necessitates encryption of ledger state -- correct me if I'm wrong)",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "hyperledger\/fabric",
                "title_link": "https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/protocol-spec.md#13-terminology",
                "text": "Read-only mirror of <https:\/\/gerrit.hyperledger.org\/r\/#\/admin\/projects\/fabric>",
                "fallback": "GitHub: hyperledger\/fabric",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400",
                "from_url": "https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/protocol-spec.md#13-terminology",
                "thumb_width": 142,
                "thumb_height": 142,
                "service_icon": "https:\/\/github.com\/apple-touch-icon.png",
                "id": 1
            }
        ],
        "edited": {
            "user": "U2X9KDDL7",
            "ts": "1481314969.000000"
        },
        "ts": "1481314898.000169"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "<@U2X9KDDL7> - all I am saying is that the core.yaml security.privacy is about encryption:\n\n```\n# To enable privacy of transactions (requires security to be enabled). This\n    # encrypts the transaction content during transit and at rest. The state\n    # data is also encrypted\n    privacy: false\n```",
        "ts": "1481315144.000172"
    },
    {
        "type": "message",
        "user": "U2X9KDDL7",
        "text": "Ah ok.. so if privacy is disabled, TCerts are not used to encrypt the transactions?  And privacy has nothing to do with encrypting the ledger state, presumably?",
        "ts": "1481315262.000173"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "TCerts don't really have anything to do with encryption - they are used for signing transactions",
        "ts": "1481315384.000174"
    },
    {
        "type": "message",
        "user": "U2X9KDDL7",
        "text": "Noted.  If transaction confidentiality is enabled, then what elements (e.g. transaction, transaction response, query, ledger state, etc) are encrypted, and with what keys?",
        "ts": "1481315570.000175"
    },
    {
        "type": "message",
        "user": "U2X9KDDL7",
        "text": "My goal is to be able to have transactions, responses, and the ledger state be encrypted such that only the users I specify can decrypt the contents.  I'm thinking I'm missing some additional responsibility on the chaincode side for when this encryption is done (via enabling confidentiality?).",
        "ts": "1481315970.000176"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "<@U2X9KDDL7> - unless I missed a major change in functionality, with the 0.6 release, all validating peers have access to all data and the built-in encryption \/ decryption is \"global\" to the chain itself  (although their are some things which are encrypted using ephemeral keys as part of transporting the transaction from the client to the peer itself)",
        "ts": "1481317232.000177"
    },
    {
        "type": "message",
        "user": "U2X9KDDL7",
        "text": "Interesting.. what key(s) are used to encrypt the ledger state in v0.6?  The validating peers' keys?",
        "ts": "1481318034.000178"
    }
]