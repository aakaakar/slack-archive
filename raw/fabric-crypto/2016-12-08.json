[
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "Are the orderer shim and the kafka nodes running on different hosts? (I'm asking- what is the preferable design, not if they *technically* can do that)",
        "edited": {
            "user": "U0ZJZBJLF",
            "ts": "1481188512.000000"
        },
        "ts": "1481188491.000058"
    },
    {
        "type": "message",
        "user": "U2T7Z63NY",
        "text": "<@U2X9KDDL7>, Following is the log of membersrvc...\n\nvagrant@hyperledger-devenv:v0.0.11-ee5b85c:\/opt\/gopath\/src\/github.com\/hyperledger\/fabric$ membersrvc\n\n09:12:45.554 [server] main -&gt; INFO 001 CA Server (0.6.2-preview-snapshot-ee5b85c)\n09:12:45.738 [aca] Start -&gt; INFO 002 Staring ACA services...\n09:12:45.739 [aca] startACAP -&gt; INFO 003 ACA PUBLIC gRPC API server started\n09:12:45.739 [aca] Start -&gt; INFO 004 ACA services started\n09:12:45.739 [eca] Start -&gt; INFO 005 Starting ECA...\n09:12:45.740 [eca] startECAP -&gt; INFO 006 ECA PUBLIC gRPC API server started\n09:12:45.740 [eca] startECAA -&gt; INFO 007 ECA ADMIN gRPC API server started\n09:12:45.741 [eca] Start -&gt; INFO 008 ECA started.\n09:12:45.741 [tca] Start -&gt; INFO 009 Staring TCA services...\n09:12:45.742 [tca] startTCAP -&gt; INFO 00a TCA PUBLIC gRPC API server started\n09:12:45.743 [tca] startTCAA -&gt; INFO 00b TCA ADMIN gRPC API server started\n09:12:45.743 [tca] Start -&gt; INFO 00c TCA started.\n09:12:45.744 [tlsca] Start -&gt; INFO 00d TLSCA started.\n.\n.\n.",
        "ts": "1481189494.000060"
    },
    {
        "type": "message",
        "user": "U2T7Z63NY",
        "text": "[aca] specific logs are present here...\n\n[aca] Start -&gt; INFO 002 Staring ACA services...\n.\n.\n[aca] Start -&gt; INFO 004 ACA services started",
        "ts": "1481189593.000061"
    },
    {
        "type": "message",
        "user": "U2T7Z63NY",
        "text": "Hi,\n\nCan anyone tell me the use of \"TCertAttributesHeaders = asn1.ObjectIdentifier{1, 2, 3, 4, 5, 6, 9}\" in the \"<http:\/\/github.com|github.com>\\hyperledger\\fabric\\core\\crypto\\attributes\\attributes.go\" file.\n\nThanks",
        "ts": "1481201844.000062"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "Hi <@U2T7Z63NY>, that was used to identify the x509 extensions containing attributes",
        "ts": "1481203288.000063"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "It clearly needs a better version number, <@U0S5KF44D> <@U221LL03Z> do you have more info on the status of that field?",
        "ts": "1481203348.000064"
    },
    {
        "user": "U221LL03Z",
        "inviter": "U0ZR63HLK",
        "text": "<@U221LL03Z|ashutoshkumar> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1481203360.000065"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "<@U0XQ35CDD>  ? <https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1481188491000058>",
        "attachments": [
            {
                "from_url": "https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1481188491000058",
                "fallback": "[December 8th, 2016 1:14 AM] yacovm: Are the orderer shim and the kafka nodes running on different hosts? (I'm asking- what is the preferable design, not if they *technically* can do that)",
                "ts": "1481188491.000058",
                "author_subname": "yacovm",
                "channel_id": "C2GE7GXM1",
                "channel_name": "fabric-crypto",
                "is_msg_unfurl": true,
                "text": "Are the orderer shim and the kafka nodes running on different hosts? (I'm asking- what is the preferable design, not if they *technically* can do that)",
                "author_name": "Yacov Manevich",
                "author_link": "https:\/\/hyperledgerproject.slack.com\/team\/yacovm",
                "author_icon": "https:\/\/avatars.slack-edge.com\/2016-09-30\/85916865123_74ecb5d18535acea44aa_48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "footer": "Posted in #fabric-crypto"
            }
        ],
        "ts": "1481205286.000066"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "<@U0ZJZBJLF>: Yes. (Thanks for the heads up <@U0UGH3X7X>.)",
        "ts": "1481205388.000068"
    },
    {
        "type": "message",
        "user": "U2T7Z63NY",
        "text": "<@U0ZR63HLK>\nThanks for your reply.\n\nI encountered an error \"Failed retrieve extension\" in primitives.GetCriticalExtension() api, while testing \"invoke\" method of \"authorizable_counter\" sample application of fabric v0.6",
        "ts": "1481206217.000069"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "<@U0XQ35CDD>  - why?",
        "ts": "1481206436.000070"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Because I may want 100 shims and 10 brokers.  There is not a one-to-one mapping necessarily. ",
        "ts": "1481206487.000071",
        "reactions": [
            {
                "name": "white_check_mark",
                "users": [
                    "U0ZJZBJLF"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "<@U0ZR63HLK>,  should `SigningIdentityInfo.Public_Signer` be the cert I use for TLS ?  would need an MSP call to get that info.",
        "ts": "1481206526.000072"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "actually, that's the enrollment certificate. I think we should use different certificates and keys for that. <@U26T99AQ4> <@U1BC5A0F9> <@U0S5KF44D>  <@U0PB67X4K> what's your take on this?",
        "edited": {
            "user": "U0ZR63HLK",
            "ts": "1481207822.000000"
        },
        "ts": "1481207730.000073"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "Aren't TLS certificates self signed currently?",
        "edited": {
            "user": "U1BC5A0F9",
            "ts": "1481208026.000000"
        },
        "ts": "1481208020.000076"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "that is what <@U0ZJZBJLF> is doing but I think <@U0PB67X4K> is putting in place another tls infrastructure, not sure",
        "ts": "1481208444.000078"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "huh? what?",
        "ts": "1481208590.000079"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "<@U1BC5A0F9>, <@U0ZR63HLK>  also, kafka has its own infrastructure for TLS  ... we are using the sarama package in the orderer to act as the Kafka client",
        "ts": "1481208594.000080"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "no I'm not",
        "ts": "1481208597.000081"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "tuand- where does sarama obtain the TLS certificates from?",
        "ts": "1481208633.000082"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "does it even do mutual TLS?",
        "edited": {
            "user": "U0ZJZBJLF",
            "ts": "1481208695.000000"
        },
        "ts": "1481208677.000083"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "so on the orderer side, we need to give sarama  a cert+CA cert for its configuration",
        "ts": "1481208691.000084"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "sarama does do mutual auth",
        "ts": "1481208719.000086"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "And how does Kafka verify the client certs of sarama? is it also configured there in files or something?",
        "ts": "1481208758.000087"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "yes, the kafka broker side is configured via properties files <https:\/\/jira.hyperledger.org\/browse\/FAB-701>",
        "ts": "1481208804.000088",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0ZJZBJLF"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "in another context- <@U0ZR63HLK>  we only use self signed SSL certificates for unit tests. When the gossip runs inside the peer, a different constructor is used, and the gRPC service instance is passed from the peer to the gossip constructor.  Also, the Dialoptions are passed,  and a client TLS option can be included in that.",
        "ts": "1481208940.000089"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "<@U0ZJZBJLF>, got it. <@U0UGH3X7X> So, for kakfa we need a proper TLS infrastructure. I guess, the administrator of the kafka network is in charge of put in place such a network and release appropriate TLS certficates for the client (in our case the orderers), no?",
        "ts": "1481209803.000090"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "we only want orderers from known orgs to connect to kafka  ...  so we need to give the kafka admin our org CA certs",
        "ts": "1481210432.000091"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "Kafka admin will in turn give us the CA cert for the Kafka brokers",
        "edited": {
            "user": "U0UGH3X7X",
            "ts": "1481210527.000000"
        },
        "ts": "1481210469.000092"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "but the orderers then need a TLS certificate signed by an authority that the kafka netwrok trusts",
        "ts": "1481210598.000094"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "no?",
        "ts": "1481210606.000095"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "right ...  we would put our org CA certs into Kafka's truststore  ...   when an orderer connect , it uses a certificate signed by one of our CAs  so Kafka will accept the connection",
        "ts": "1481210766.000096"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "(Not following this discussion closely, but I just want to put it out there: <@U0UGH3X7X> let's make sure that whatever flow we adopt also works for this case: org A owns brokers 0-2, org B owns brokers 3-6, etc. This may or may not be completely orthogonal to the discussion.)",
        "ts": "1481210949.000097"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "right,  kafka admin(s)  might give us multiple CA certs which orderer would need to slurp in via a configurationItem",
        "ts": "1481211080.000098"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "mhh, not clear, Tuan, you first said that fabric will put CA certs in kafka and then you said the opposite confirming what Kostas was saying, no? Am I missing something?",
        "ts": "1481211871.000099"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "the orderers need to have the Kafka brokers CA certs and Kafka needs to have the orderers' CA certs   ...   now, you can have multiple orgs owning kafka brokers or you can have a totally separate group owning kafka brokers   ... we're ok as long as each side of the connection has the other side's CA certs so they can check incoming connection requests",
        "ts": "1481212380.000100"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "ah okay, this I parse. I agree.",
        "ts": "1481212602.000101"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "now, who is gonna generate TLS certificates?",
        "ts": "1481212621.000102"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "I think it is not recommended to use the enrollment certificate for that",
        "ts": "1481212640.000103"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "it took me days to figure out what kafka wanted ! :weary:",
        "ts": "1481212676.000104"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "heheh :slightly_smiling_face:",
        "ts": "1481212693.000105"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "let me parse a bit further :wink:   so exchanging CA certs between Orderers and Kafka should not be problem because we have them and we will exchange out of band",
        "ts": "1481212812.000106"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "right",
        "ts": "1481212827.000107"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "orderer needs a signed certficate specifically for TLS  and we need to see which component should generate",
        "ts": "1481212862.000108"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "correct",
        "ts": "1481212905.000109"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "I think <@U0PB67X4K> is working on something to address this",
        "ts": "1481212936.000110"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "not sure, I might be wrong",
        "ts": "1481212946.000111"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "can I just use golang crypto and info from MSP to generate this cert ?   All i need is a cert signed by my CA and I already have my CA cert",
        "ts": "1481213075.000112"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "unfortunately, the MSP does not give you that",
        "ts": "1481213099.000113"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "it cannot generate certificates",
        "ts": "1481213106.000114"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "you need COP, probably",
        "ts": "1481213111.000115"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "aha, another entry in the orderer genesis block I guess",
        "ts": "1481213183.000116"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "still need to have someone generate before bootstrap then",
        "ts": "1481213263.000117"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "<@U0UGH3X7X> - I am working on a GRPC server implementation which will need to deal with similar issue(s).  So hopefully we can leverage some of that work.  I'll try to post a WIP change set so we can see what pieces to factor out into a common piece",
        "ts": "1481213801.000118",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0UGH3X7X",
                    "U0ZR63HLK"
                ],
                "count": 2
            }
        ]
    },
    {
        "type": "message",
        "user": "U2X9KDDL7",
        "text": "Hi all, what are the configuration vars relevant to choosing if ECerts or TCerts will be used in transactions?  The docs mention that two schemes can be used -- look for \"depending on whether the transaction is anonymous\" under <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/protocol-spec.md#433-replay-attack-resistance>",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "hyperledger\/fabric",
                "title_link": "https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/protocol-spec.md#433-replay-attack-resistance",
                "text": "Read-only mirror of <https:\/\/gerrit.hyperledger.org\/r\/#\/admin\/projects\/fabric>",
                "fallback": "GitHub: hyperledger\/fabric",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400",
                "from_url": "https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/protocol-spec.md#433-replay-attack-resistance",
                "thumb_width": 142,
                "thumb_height": 142,
                "service_icon": "https:\/\/github.com\/apple-touch-icon.png",
                "id": 1
            }
        ],
        "ts": "1481223782.000119"
    },
    {
        "type": "message",
        "user": "U2X9KDDL7",
        "text": "I'm finding it difficult to write code using TCerts only (though I believe what I'm doing should eventually be possible this way), and would prefer to start with using fixed ECerts, so that I can work directly with users' identities via ECerts.",
        "ts": "1481224320.000121"
    },
    {
        "type": "message",
        "user": "U2X9KDDL7",
        "text": "From looking through the code, in particular, usages of GetEnrollmentCertificateHandler, it looks like perhaps only fabric\/core\/crypto\/crypto_test.go uses it, and it's a feature only provided to applications that deploy\/invoke\/query chaincode via the golang modules in fabric\/core ?  Is this correct?  I don't see any indication of this ECert\/TCert choice in HFC.",
        "ts": "1481226167.000122"
    },
    {
        "user": "U3BQF48RE",
        "text": "<@U3BQF48RE|oliverledger> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1481231715.000123"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "<@U0UGH3X7X> <@U0PB67X4K> <@U0ZR63HLK> <@U0S5KF44D> wouldn\u2019t our COP provide TLS-CA like v0.6 that we can get a TLS cert from it?  I have heard Keith mentioned we might be able to use ecert for TLS but I am not sure progress on that",
        "ts": "1481240479.000124"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "It's actually just writing some common code to load the raw certificates into the proper Go types that we are talking about here.   Basically taking raw pem encoded certs and loafingvthem into the proper Go crypto objects ",
        "edited": {
            "user": "U0PB67X4K",
            "ts": "1481241654.000000"
        },
        "ts": "1481241640.000125"
    },
    {
        "type": "message",
        "user": "U0S5KF44D",
        "text": "Yes, will work and if someone wants a separate TLS cert for some reason, you could enroll twice ... once for TLS and once for ECert",
        "edited": {
            "user": "U0S5KF44D",
            "ts": "1481293028.000000"
        },
        "ts": "1481241818.000127"
    },
    {
        "type": "message",
        "user": "U2X9KDDL7",
        "text": "Can someone give me a sanity check?  I'm running a peer with privacy enabled (which means that it uses TCerts that aren't linkable to the user identities, if I understand that correctly), and submitting transactions with confidentiality enabled (which means that the ledger state is encrypted).  I run through a sequence of transactions, write to a particular key in my ledger state, shut all the services down, then run through the sequence again, checking that the state I set in the previous run is still there.  The call to stub.GetState fails with \"Decryption failed\".  However, if I run this whole scenario twice with transaction confidentiality disabled, it works fine.  Is there some step I'm missing, or maybe I'm making a bad assumption (such as \"enabling transaction confidentiality has no impact on the chaincode itself, confidentiality can just be enabled\")?",
        "ts": "1481246058.000128"
    }
]