[
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "<@U0ULK2JPP> cool, I'll attempt a rebase of my patch on top of that branch",
        "ts": "1477641289.001216"
    },
    {
        "user": "U2CSGKHRS",
        "text": "<@U2CSGKHRS|teddy> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1477644927.001217"
    },
    {
        "type": "message",
        "user": "U2CSGKHRS",
        "text": "i want to add eca users like jim dynamically.\ni try to change the source in ecap.go with \npwd, err := ecap.eca.registerUser(id, \"bank_a\", pb.Role(1), nil, ecap.eca.aca, \"\", \"client\")\nit returns a pwd of the id, when i use it for peer network login, i get the error like :\nFailed registering client [testid] with name [testid] [x509: certificate signed by unknown authority]. \nwhat is wrong?",
        "ts": "1477645642.001218"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "<@U2CSGKHRS> - reposting this over in membership services",
        "ts": "1477646384.001219"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "but were already have the ability to add users via the NodeSDK",
        "ts": "1477646400.001220"
    },
    {
        "type": "message",
        "user": "U2CSGKHRS",
        "text": "<@U0PB67X4K>  thank you.\nyes,i see your answer before. but i don't know how to use it i will try it.",
        "ts": "1477647135.001221"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U26T99AQ4> there was a goimports error with  <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2081\/> (a test file that I missed)\u2026 just submitted the fix",
        "ts": "1477655414.001222"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "oh thx",
        "ts": "1477655438.001223"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "will rebase again",
        "ts": "1477655448.001224"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "it was a test file in ledger\u2026 you may be fine",
        "ts": "1477655474.001225"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "ah ok",
        "ts": "1477655484.001226"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "we need to look at the functions in protos\/utils and fix them for rigor",
        "ts": "1477655532.001227"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "especially around crypto usage",
        "ts": "1477655541.001228"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "I have completely ignored signature etc",
        "ts": "1477655552.001229"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "but good news is they are all in one package protos\/utils",
        "ts": "1477655574.001230"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "and then we need to revisit comments from <@U0KN2SSKE> last time around regarding naming \u2026",
        "ts": "1477655610.001231"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U0ZR63HLK> <@U26T99AQ4> ^^^",
        "ts": "1477655630.001232"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "I recall a discussion around TransactionHeader -&gt; Header",
        "ts": "1477655682.001233"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "aha, okay",
        "ts": "1477655682.001234"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "was there anything else?",
        "ts": "1477655686.001235"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "let me check",
        "ts": "1477656154.001236"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U26T99AQ4> I think that was it but we probably need to get together and hash 2 things (1)possible  consolidation of structures proposed by <@U0XPR4NP4> in <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1965\/> with all the folks in the discussion (see yesterdays chat around this above) and (2) flows for CONFIG transaction (this likely will have impact on the protos too)",
        "ts": "1477656555.001237"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i feel my remark about not using protobufs for persistent data structures is being ignored",
        "ts": "1477664749.001238"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "<@U0ZR63HLK> - can you rebase <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2029\/> (and perhaps the change sets which come after it)",
        "ts": "1477665009.001239"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "sure",
        "ts": "1477665033.001240"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0XR6J961> I'm not opposed to switching to another structure, I just have no experience with ASN.1 or how to define it in a schema-like fashion (like protobuf), which is why I submitted my work on top of protobuf as it was the path of least resistance",
        "ts": "1477665118.001241"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "you just define a go structure",
        "ts": "1477665134.001242"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "and voila, marshal\/unmarshal with ASN.1",
        "ts": "1477665152.001243"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "although we do need to support other languages besides for Go",
        "ts": "1477665198.001244"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "How about doing something like a SignedMessage, where you have a payload (a structure) and a signature.  How do you know what bytes to check the signature over, do we then need to remarshal?  (So essentially, the path would be.  Unmarshal outer struct, read signature field, re-marshal inner struct, verify? If so, that also doesn't seem extremely elegant)",
        "ts": "1477665288.001245"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "the GO ASN.1 parser allows you to have a `DataBytes` field (or similar name)",
        "ts": "1477665407.001246"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "where it stuffs in the bytes that filled the structure",
        "ts": "1477665424.001247"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Oh, interesting.  Personally, I think ASN.1 sounds like a good idea, but so much of the system is built on protobuf, I'm not sure if its use would be deemed too confusing.",
        "ts": "1477665584.001248"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "well now is really the time to decide and do it",
        "ts": "1477665656.001249"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "well it could be interesting to TRY to mix them in - given that almost all of our higher order protobuf messages end up simply carrying bytes in order to address non-deterministic serialization",
        "edited": {
            "user": "U0PB67X4K",
            "ts": "1477665680.000000"
        },
        "ts": "1477665667.001250"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "so perhaps protobuf as part of GRPC is nice for the \"protocol\" messages \/ envelopes and when we end up using \"bytes\" we move to ASN1?",
        "ts": "1477665732.001252"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "potentially means having 2 sets on encoders \/ decoders as part of any library interacting with the GRPC services, but that's not so bad",
        "ts": "1477665780.001253"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Looks like there is a js implementation out there, <https:\/\/github.com\/PeculiarVentures\/ASN1.js> the license looks a little goofy because it's nonstandard, but it's the one most links seem to point to",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "PeculiarVentures\/ASN1.js",
                "title_link": "https:\/\/github.com\/PeculiarVentures\/ASN1.js",
                "text": "ASN1.js - ASN1js is a pure JavaScript library implementing a full BER ASN.1 decoder.",
                "fallback": "GitHub: PeculiarVentures\/ASN1.js",
                "thumb_url": "https:\/\/avatars2.githubusercontent.com\/u\/8702988?v=3&s=400",
                "from_url": "https:\/\/github.com\/PeculiarVentures\/ASN1.js",
                "thumb_width": 132,
                "thumb_height": 132,
                "service_icon": "https:\/\/github.com\/apple-touch-icon.png",
                "id": 1
            }
        ],
        "ts": "1477665842.001254"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "we are already dealing with ASN1 anyway today in the NodeJS SDK for the crypto stuff",
        "ts": "1477665866.001256"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "(certificates, etc)",
        "ts": "1477665876.001257"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Ah okay, I suppose X.509 is all ASN.1",
        "ts": "1477665878.001258"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yes",
        "ts": "1477665889.001259"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "fwiw: I completely agree with <@U0XR6J961> : stuff that is persisted should be serialized in standard ways. This way, any other implementation will at least be able to read the ledger",
        "ts": "1477665915.001260"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "also: the crypto world with x509 has embraced ASN.1",
        "ts": "1477665931.001261"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U26T99AQ4> I'm not sure I entirely agree that protobuf is not 'standard'.  It's well documented and standardized with lots of different language implementations, but I would agree its non-determinstic marshaling nature makes it poorly suited for crypto work",
        "ts": "1477666016.001262"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "good point - being standard is just one piece of the puzzle; deterministic marshalling is another equally important one",
        "ts": "1477666064.001263"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "ASN.1 seems to tick both boxes",
        "ts": "1477666093.001264"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "does anyone know how ASN.1 relates to protobufs when it comes to i) speed of un\/marshalling and ii) marshalling metadata overhead?",
        "ts": "1477666124.001265"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I think <@U0XR6J961> did a test, and ASN.1 was noticeably slower.  Whether it's enough that we care, or makes up for the nested unmarshaling of the protos, I'm not sure",
        "ts": "1477666355.001266"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "(funny - was about to basically say the same thing)",
        "ts": "1477666388.001267"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "is there a clean way to patch the protobuf to have deterministic serialization?",
        "ts": "1477666431.001268"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "of course the nice thing about protobufs is that they do support a nice compatibility layer",
        "ts": "1477666438.001269"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "<@U0ZR63HLK> - the google stuff is deterministic today they just make no guarantee nor require it in their spec",
        "ts": "1477666470.001270"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "regardless of what we end up using, just want to point out that there\u2019s encapsulation confined to protos\/utils and externals don\u2019t\/shouldn\u2019t deal with structure internals.  as long as we keep it that way it shouln\u2019t be too hard to move to any format",
        "ts": "1477666489.001271"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "my way of saying we don\u2019t have to change immediately \u2026. and perhaps we could review <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2081\/> with that in mind ?",
        "ts": "1477666562.001272"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "+1",
        "ts": "1477666597.001273"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Re determinism: I _think_ one of the ideas for protobufs is that they want to allow for messages to be built incrementally, rather than a `Marshal` on a completed structure, they want to support adding fields one at a time (in arbitrary order) to do the marshaling incrementally for applications where that makes sense.  Maybe I am making this up, but believe I read this somewhere.",
        "edited": {
            "user": "U0XPR4NP4",
            "ts": "1477666816.000000"
        },
        "ts": "1477666720.001274"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "from some dude on stack overflow:\n```\nIn general, the same data will serialize in exactly the same way.\n\nHowever, this is not guaranteed by the protobuf specifications. For example, the following differences in encoding are allowable and must decode to the same result in all conforming libraries:\n\nEncoding fields in different order than the tag number order.\nEncoding packed fields as unpacked.\nEncoding integers as longer varint byte sequences than needed.\nEncoding same (non-repeated) field multiple times.\nProbably others.\n```",
        "ts": "1477666894.001276"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "`Note that most protobuf implementations (including the official ones) will always write protos in a canonical format as long as there are no unknown fields present.`",
        "ts": "1477666943.001277"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "<@U0PB67X4K> <@U0XPR4NP4> : is the information about \"what marshalling scheme was used for this chain\" even stored somewhere on the chain? should it be?",
        "ts": "1477667461.001278"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U26T99AQ4> That's a tricky one, since we'd have to define an encoding for how to store the encoding. (To your original question, no, not stored anywhere)",
        "edited": {
            "user": "U0XPR4NP4",
            "ts": "1477667648.000000"
        },
        "ts": "1477667598.001279"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "in some crypto schemes, the encoding of \"what crypto algorithm was used to encrypt me\" was the code of the cipher itself. It's a way, perhaps not the best. I believe it was done in the context of \"crypto that you can decrypt in NN years from now\"",
        "ts": "1477667702.001281"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I still feel like you need some foreknowledge.  If it's code, how is it encoded? At some point, you have to pick an initial representation",
        "ts": "1477667826.001282"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "true that",
        "ts": "1477667839.001283"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "so we should just assume that the encoding is known, and fixed forever for the entire chain",
        "ts": "1477667859.001284"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "yes, the initial representation is what is provided by a Turing machine :slightly_smiling_face:",
        "edited": {
            "user": "U0ZR63HLK",
            "ts": "1477668035.000000"
        },
        "ts": "1477668024.001285",
        "reactions": [
            {
                "name": "joy",
                "users": [
                    "U26T99AQ4"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "also that is problematic, actually :disappointed:",
        "ts": "1477668144.001287"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "we need a trusted setup assumption then",
        "edited": {
            "user": "U0ZR63HLK",
            "ts": "1477668216.000000"
        },
        "ts": "1477668204.001288"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I would think making an assumption that the chain encoding can never change drastically simplifies our life.  I'm probably just ignorant of their existence, but I'm not sure of any other sort of data stream which changes the base encoding midway through.  I would think if we wanted to switch to a new format, you would want to re-encode the whole chain.",
        "ts": "1477668217.001290"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "+1",
        "ts": "1477668238.001291"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "in that case, an hard fork is the way to go",
        "edited": {
            "user": "U0ZR63HLK",
            "ts": "1477668261.000000"
        },
        "ts": "1477668248.001292",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U26T99AQ4"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "<@U0XR6J961> <@U0XPR4NP4> re ASN.1, I\u2019ve found this interesting thread <https:\/\/groups.google.com\/forum\/#!topic\/protobuf\/eNAZlnPKVW4>\n&gt; Protobuf to be a simpler, cleaner, smaller, faster, more robust and easier-to-understand than ASN.1\n&gt; memory allocations, thus both speeding performance and decreasing the memory footprint of our product by 50-70%",
        "ts": "1477680100.001294"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0PB67X4K> <@U0KN2SSKE> <@U0ZR63HLK> <@U26T99AQ4> <@U1BC5A0F9> <@U0XQ35CDD> Per the discussion from earlier, the orderer is going to define a base transaction proto which the fabric can extend.  For the base transaction\/message\/something type, we need:\n\n1. A message which contains a signature and a thing that signature is over.  In the fabric protos, this is a `SignedTransaction`\n2. A message which represents the 'thing' that the signature is over, this should include a payload and a header, this is similar to, but slightly different from `Transaction`\/`TransactionAction` because it assumes and requires a single header, which is at the top level and not nested more deeply.\n3. A message which is the header to prevent replay attacks and provide the identity for the signing cert.\n\nWe need to pick a name for these things\n\n1. <@U0ULK2JPP> proposes the name `Envelope`, the changeset I had pushed called this `SignedData`, I'd also suggest `SignedMessage`\n2. <@U0ULK2JPP> proposes the name `Payload`, the changeset I had pushed called this `SignableData`, I'd also suggest `SignableMessage` or `Message`\n3. <@U0ULK2JPP> proposes the name `Header`, the changeset I pushed called this `SignatureHeader`, I'd also suggest `MessageHeader`\n\nPersonally, I'm fine with <@U0ULK2JPP>'s proposed names, the names already in the changeset, or moving to the alternate `Message` based ones, or even some other names.  But, I wanted to try to get the names right so that I can minimize the amount of rebasing required.  Opinions?",
        "ts": "1477685481.001295"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "Message would collide with another general message struct that peer has.  I am fine with murali's",
        "ts": "1477689225.001296"
    }
]