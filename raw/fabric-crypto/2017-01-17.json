[
    {
        "type": "message",
        "user": "U2E87MX1A",
        "text": "Hello guys, Im wondering if anyone knows if it is possible to get caller's user id from transaction from within the called chaincode function and how to do it?",
        "ts": "1484643482.000978"
    },
    {
        "user": "U2D62LCQJ",
        "text": "<@U2D62LCQJ|dsanchezseco> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1484644200.000979"
    },
    {
        "user": "U3MBTR5KK",
        "text": "<@U3MBTR5KK|tsluthra> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1484668633.000980"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U26T99AQ4> <@U0ZR63HLK> <@U1BC5A0F9> Are any of you around?",
        "ts": "1484677448.000981"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I am defining a `HashingAlgorithm` configuration parameter for the genesis block, and was wondering what reasonable parameters would be?  The most simple would obviously be a `name` which could be `sha3_shake256` or whatnot, but I didn't know if there was a more standard way of representing this, maybe something like: `family=sha3` `algorithm=shake` `width=256`",
        "ts": "1484677618.000982"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "(or perhaps a `string name = 1; bytes parameters = 2;` would be more flexible?)",
        "ts": "1484678058.000983"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "I would follow the JCA example and add it as a string :slightly_smiling_face:",
        "ts": "1484678140.000984",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0PB67X4K"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U1BC5A0F9> Thanks! That sounds like a great idea to me.  I see a whole bunch of names.... but nothing jumps out to me as sha3shake256",
        "ts": "1484678357.000985"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "<https:\/\/docs.oracle.com\/javase\/7\/docs\/api\/java\/security\/MessageDigest.html>",
        "ts": "1484678366.000986"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I'm looking <https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/guides\/security\/StandardNames.html>\n\nIs there a beter reference?",
        "ts": "1484678368.000987"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "ah so  i would say that we either specify a type to include the hash functions we would support at the fabric, and add this as a field in the proto message, but no need to separate the hash function name from its length (e.g., SHA256)",
        "edited": {
            "user": "U1BC5A0F9",
            "ts": "1484678591.000000"
        },
        "ts": "1484678494.000988"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "or we can represent it as a string inside the genesis block and depending on the version we make the decision later if is among the ones we support",
        "ts": "1484678542.000989"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "were you closer to the first path?",
        "ts": "1484678556.000990"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Yes, I think so",
        "ts": "1484678696.000992"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "<@U0XPR4NP4> the link you sent, only contains SHA-1, SHA-256, SHA-384, and SHA-512",
        "ts": "1484678702.000993"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Right, I'm trying to find the JCA name for sha3 shake256 with 512 bytes of output",
        "ts": "1484678725.000994"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "(ie, what `util.ComputeCryptoHash` produces)",
        "ts": "1484678734.000995"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "don't use SHA3",
        "ts": "1484678742.000996"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": ":wink:",
        "ts": "1484678751.000997"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I think configurable is good... we are already using sha-3 (shake256 with 512 bits of output) for our hashes, that seemed easiest.",
        "ts": "1484678803.000998"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "I was joking  of course",
        "ts": "1484678822.000999"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Oh, and here I thought I'd heard people actually complaining about sha-3 being too slow...",
        "ts": "1484678837.001000"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": ":slightly_smiling_face:",
        "ts": "1484678874.001001"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "well I'd default to SHA2-256 or SHA2-384 (but that's just me)",
        "ts": "1484678875.001002"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "right, i would vote for the same",
        "ts": "1484678898.001003"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I'd think switching hasing algorithms shouldn't be too painful.... we just need  a way to specify it.  The JCA ID sounds like a good plan to me, just can't find a list that includes the sha-3 shake256 in it",
        "ts": "1484678935.001004"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "sha3 is relatively (to the others) new, and people complain about it not having been tested enough, or that it is not supported by their systems.",
        "edited": {
            "user": "U1BC5A0F9",
            "ts": "1484679072.000000"
        },
        "ts": "1484678953.001005"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "the SHA3 names analogous to above:\n\nSHA3-224, SHA3-256, SHA3-384, SHA3-512\nSHAKE128, SHAKE256",
        "ts": "1484678956.001006"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "(well that's how NIST lists them)",
        "ts": "1484678978.001007"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Perfect, so, to start since it's what's working, we'll just use a string, and require it to be `SHAKE256` and later, we'll add support for the other ones, possibly changing the default",
        "ts": "1484679059.001008",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U1BC5A0F9"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "glad to be of service sir  :wink:",
        "ts": "1484679123.001010"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Thanks much!",
        "ts": "1484679147.001011"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0PB67X4K> You still around?",
        "ts": "1484682475.001012"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Posting it here in case anyone else would like to chime in, but the second piece of chain configuration I was about to add is regarding the `BlockDataHashingStructure`.  In particular, this could like be a flat concatenation, or a Merkle tree.  In the case of a Merkle tree, it needs a width (how many nodes per level in the tree).  Most likely for efficiency reasons, this will not be binary.\n\nSo, I was looking at how to encode this, we could:\n1. Use the proto oneof structure, explicitly enumerating which hashing schemes are supported (at the cost of third parties not being able to easily extend this field)\n2. Use a \"string name\" and \"bytes parameters\" structure, so that more arbitrary structures could be supported (at the cost of the opacity of the parameters requiring yet another unmarshaling of binary data)\n3. Only support the type of Merkle, where in order to replicate flat hashing, we would simply set the width of the Merkle tree to be equal to the maximum number of messages.",
        "edited": {
            "user": "U0XPR4NP4",
            "ts": "1484683227.000000"
        },
        "ts": "1484683049.001013"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "I am",
        "ts": "1484683163.001014"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "<@U0XPR4NP4> - definitely agree that we should not have multiple \"types\" - I like point 3 above for just that reason. \n\nIn that same vein, is there really a reason to allow different hashing schemes?   (I understand having something for future proofing \/ future pluggability, but is there some specific reason you can think of to have multiple options on day 1?)",
        "edited": {
            "user": "U0PB67X4K",
            "ts": "1484683498.000000"
        },
        "ts": "1484683425.001016"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "2) makes sense to me for extensibility",
        "edited": {
            "user": "U0PB67X4K",
            "ts": "1484683457.000000"
        },
        "ts": "1484683447.001017"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I mostly wanted us to be able to flip between tunable Merkle and flat, since there seemed to be some dissent about which was better.  And, figured \"if we allow two, do we really want to allow only two\"?",
        "edited": {
            "user": "U0XPR4NP4",
            "ts": "1484683526.000000"
        },
        "ts": "1484683512.001020"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "ah - ok - so the scheme is merkle or flat - not the actual hashing algorithm",
        "edited": {
            "user": "U0PB67X4K",
            "ts": "1484683574.000000"
        },
        "ts": "1484683563.001022"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "makes sense to me - and I am fine if \"flat\" = Merkel with max num messages",
        "edited": {
            "user": "U0PB67X4K",
            "ts": "1484683612.000000"
        },
        "ts": "1484683604.001024"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Well, I broke it into two pieces.  HashingAlgorithm, which today we only support shake256, and then scheme which I called BlockDataHashingStructure",
        "ts": "1484683609.001025"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "got it",
        "ts": "1484683620.001027"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Perfect, so, Merkle only, and set the width to batch size or MAX_UINT32 if you want flat",
        "ts": "1484683645.001028",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0PB67X4K"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Thanks again <@U0PB67X4K> !",
        "ts": "1484683669.001029"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "seems to be the most expedient way to go",
        "ts": "1484683683.001030"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Was my favorite option as well",
        "ts": "1484683701.001031"
    },
    {
        "user": "U1PSHT5C4",
        "text": "<@U1PSHT5C4|daisaku> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1484695660.001032"
    },
    {
        "user": "U1WL0FZ35",
        "text": "<@U1WL0FZ35|brianeno> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1484700553.001033"
    },
    {
        "type": "message",
        "user": "U2T7Z63NY",
        "text": "Decrypting payload - Please let us know how to decrypt payload data using certificate (Ecert\/TCert). Can anyone answer this?",
        "ts": "1484713577.001034"
    }
]