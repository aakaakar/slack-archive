[
    {
        "user": "U2RRHA11T",
        "text": "<@U2RRHA11T|kyrieleison> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1477554694.000939"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "<@U0XPR4NP4> what I care about is to design the protocol messages having security in mind :slightly_smiling_face: Then, if you start from CONFIG and generalize or you go the other way around is not so relevant to me. Please, share your design of the fabric messages and we will evaluate the security implications :slightly_smiling_face:",
        "ts": "1477558717.000940"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "<@U0ULK2JPP> regarding chaincode_transaction.proto, at that point, we can also collapse ChaincodeActionPayload and ChaincodeEndorsedAction  in a single message. It should be fine from a security point of view. <@U26T99AQ4>, @lli comments?",
        "ts": "1477558866.000941"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "<@U0ULK2JPP> regarding fabric_transaction.proto, <@U0XPR4NP4> was questioning having multiple headers in a single Transaction. Not sure anymore if we have to move to that directions. Let me just note that having a single header per transaction is fine from a security point of view.",
        "ts": "1477559085.000942"
    },
    {
        "user": "U2URZF2AF",
        "text": "<@U2URZF2AF|zxc> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1477561937.000943"
    },
    {
        "user": "U2J6ZKX19",
        "text": "<@U2J6ZKX19|wanghaibo> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1477561959.000944"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U0ZR63HLK>  I take it then you are ok with the changes above. Propose we can do other changes incrementally once the main integ is complete.",
        "ts": "1477570158.000945"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "yes, actually, <@U26T99AQ4> and me are finalizing a change-set that will introduce a lot of comments to all the messages and some refactoring to simply certain things.",
        "ts": "1477570244.000946"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "it should be ready in few hours",
        "ts": "1477570258.000947"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "perfect",
        "ts": "1477570264.000948"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "thank you <@U0ZR63HLK>",
        "ts": "1477570270.000949"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "sure :slightly_smiling_face:",
        "ts": "1477570288.000950"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "let me share what I have",
        "ts": "1477570293.000951"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "sure, please",
        "ts": "1477570410.000952"
    },
    {
        "type": "message",
        "subtype": "file_share",
        "text": "<@U0ULK2JPP|muralisr> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F2UV1KUHJ\/protos.tar|protos.tar> and commented: (1) moved everthing in next\/ to fabric\/.  (2) took what\u2019s needed in fabric_next.proto and deleted others (3) made the few changes mentioend in those two files",
        "file": {
            "id": "F2UV1KUHJ",
            "created": 1477570946,
            "timestamp": 1477570946,
            "name": "protos.tar",
            "title": "protos.tar",
            "mimetype": "application\/x-tar",
            "filetype": "tar",
            "pretty_type": "Tarball",
            "user": "U0ULK2JPP",
            "editable": false,
            "size": 51712,
            "mode": "hosted",
            "is_external": false,
            "external_type": "",
            "is_public": true,
            "public_url_shared": false,
            "display_as_bot": false,
            "username": "",
            "url_private": "https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2UV1KUHJ\/protos.tar?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "url_private_download": "https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2UV1KUHJ\/download\/protos.tar?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "permalink": "https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F2UV1KUHJ\/protos.tar",
            "permalink_public": "https:\/\/slack-files.com\/T0J024XGA-F2UV1KUHJ-e5305ec763",
            "channels": [
                "C2GE7GXM1"
            ],
            "groups": [],
            "ims": [],
            "comments_count": 1,
            "initial_comment": {
                "id": "Fc2V02CN0P",
                "created": 1477570946,
                "timestamp": 1477570946,
                "user": "U0ULK2JPP",
                "is_intro": true,
                "comment": "(1) moved everthing in next\/ to fabric\/.  (2) took what\u2019s needed in fabric_next.proto and deleted others (3) made the few changes mentioend in those two files",
                "channel": ""
            }
        },
        "user": "U0ULK2JPP",
        "upload": true,
        "display_as_bot": false,
        "username": "<@U0ULK2JPP|muralisr>",
        "bot_id": null,
        "ts": "1477570947.000955"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "if you can move all the above protos into next\/ and do your changes there , I can simplly move them back into fabric\/ when you are done",
        "ts": "1477571023.000956"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "what do you think ?",
        "ts": "1477571030.000957"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "make sense",
        "ts": "1477571064.000958"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "thanks :slightly_smiling_face:",
        "ts": "1477571097.000959"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "awesome, thanks again :slightly_smiling_face:",
        "ts": "1477571124.000960"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "<@U0XPR4NP4> <@U0PB67X4K> <@U0ULK2JPP> <@U0KN2SSKE> : Angelo and I have pushed LOTS of comments to the protobufs",
        "ts": "1477578560.000961"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2071\/>",
        "ts": "1477578562.000962"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "(and some minor cosmetic changes)",
        "ts": "1477578572.000963"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "pls have a look, looking forward to the discussion",
        "ts": "1477578590.000964"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "cool - thx",
        "ts": "1477578601.000965"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "protos\/next\/fabric.proto is a good place to start - there's an overall description of the whole flow, specific for chaincodes",
        "ts": "1477578770.000966"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U26T99AQ4> <@U0ZR63HLK> nitpicking\u2026 can we shorten field names please ? its getting quite ugly in code. Also `bytes chaincodeProposalPayloadBytes = 1;` \u2026 don\u2019t need the `Bytes` in the field name",
        "ts": "1477579017.000967"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "agreed",
        "ts": "1477579038.000968"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "will change it",
        "ts": "1477579080.000969"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "now we are focusing on semantics \u2026after a while names are going to be key ?",
        "ts": "1477579121.000970"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "(that\u2019s my excuse for the nitpick \u2026 :slightly_smiling_face: )",
        "ts": "1477579141.000971"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "heheheh :slightly_smiling_face:",
        "ts": "1477579149.000972"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "apart from this, there is still the marshalling issue. We need to find a compromise for that",
        "ts": "1477579205.000973"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "<@U0XR6J961> suggested that stuff that goes to the ledger should not be marshalled in some non-standard ways and suggested to use ASN.1. Why not...?",
        "ts": "1477579242.000974"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "(or any standard encoding for that matter)",
        "ts": "1477579287.000975"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "if we did that, we would solve the problem...",
        "ts": "1477579301.000976"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "+1",
        "ts": "1477579317.000977"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "how about this ? Get this integrated but have helpers in `fabric\/protos\/util`. Integration code such as ledger, chaincode etc will use these helpers.  Once we have this in, we can move to other formats in due time after you have time to reorganize protos. At that point the main changes will be contained to protos and protos\/util",
        "ts": "1477579740.000978",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U26T99AQ4"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "I\u2019m hoping to get the integration done by today \u2026 latest by tomorrow",
        "ts": "1477579765.000979"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "sounds like a great way forward",
        "ts": "1477579776.000980"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "+1",
        "ts": "1477579776.000981"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "so we're basically assuming that the marshalling done by those helpers is deterministic",
        "ts": "1477579829.000982"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "for now we stick with protobufs, but we can change later (with minimal impact) to ASN.1 or others",
        "ts": "1477579851.000983"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "right. no \u201cmarshal\u201d\/\u201cunmarshall\u201d will be in core code for these new structures \u2026they\u2019ll only be in protos\/util",
        "ts": "1477579935.000984"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "for example I have this in a util func `func GetPayloads(txActions *protos.TransactionAction) (*protos.ChaincodeActionPayload, *protos.ChaincodeProposalResponsePayload,  error) {`",
        "ts": "1477579986.000985"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "used by ledger",
        "ts": "1477579990.000986"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "gotcha - instead of doing manual unmarshalling, the peer code will call GetPayloads or similar helpers",
        "ts": "1477580081.000987"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "and we'll need some corresponding AssemblePayloads or something",
        "ts": "1477580106.000988"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "right",
        "ts": "1477580126.000989"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "packing and unpacking done in protos\/util",
        "ts": "1477580169.000990"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "yup",
        "ts": "1477580175.000991"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U26T99AQ4> Please see my replies in <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2071\/>",
        "ts": "1477580540.000992"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U0XPR4NP4> I answered to the \u201cTransaction2\u201d question\u2026 its just temporary as the \u201cTransaction\u201d from 0.5 is used internally. The old Transaction will be replaced",
        "ts": "1477580919.000993"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "basically don\u2019t worry about the internal use for a bit and keep the build happy while integrating",
        "ts": "1477580989.000994"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Thanks <@U0ULK2JPP> , I guess what confused me is that the previous push did not include the 2, that it was new in this one, just wanted to make sure it was purposeful",
        "ts": "1477581010.000995"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "agreed and understood\u2026 \u201c2\u201d was a carryover from my changes",
        "ts": "1477581045.000996"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "<@U0XPR4NP4> thx, going through them, will post responses\/changes soon",
        "ts": "1477581908.000997"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "done - pls see my responses and I'll push a new revision soon",
        "ts": "1477582819.000998"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U0XPR4NP4> ^^^",
        "ts": "1477583147.000999"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "(Looking)",
        "ts": "1477583188.001000"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U26T99AQ4> Replied",
        "ts": "1477583248.001001"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "<@U0XPR4NP4> <@U0ULK2JPP> pushed new comments and minor changes",
        "ts": "1477584659.001002",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0ULK2JPP"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "<@U0XPR4NP4> I wanted to follow up here on \n&gt; What if we required that every transaction is endorsed by the proposer? This seems like it would solve the problem of 'stolen' proposals. If the network wanted to allow 'proxied' proposal submission (where there is a different transaction submitter than proposal creator) then this could still be supported.",
        "ts": "1477590043.001003"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "I'm not sure I fully understand yet. Here's my doubt: how can we support transactions that can include multiple actions, where each action may result from the proposal of a different client, while still ensuring that only one actor signs the transaction?",
        "ts": "1477590234.001004"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "But the transaction must be signed by one actor?",
        "ts": "1477590302.001005"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "currently yes, only by one",
        "ts": "1477590312.001006"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "we could have multiple sigs",
        "ts": "1477590317.001007"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "or multisigs",
        "ts": "1477590323.001008"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "but that wasn't discussed so far",
        "ts": "1477590331.001009"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Ultimately, it will be a single client who submits the transaction",
        "ts": "1477590346.001010"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "And I would think there should be a transaction header, which that client must sign over",
        "ts": "1477590357.001011"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "right but we want to retain the consent of the submitting actor in its signature of the tx. If the actions are from somebody else, where is *their* consent recorded?",
        "ts": "1477590397.001012"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "imagine both of us submits a proposal, gets an endorsed action",
        "ts": "1477590437.001013"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "now we want to create a tx with both our actions",
        "ts": "1477590445.001014"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "who signs it?",
        "ts": "1477590448.001015"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "if only one does, the other can always claim it didn't mean to do that - it's my word against yours",
        "ts": "1477590474.001016"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "but the second anyone signs, then they are bound by the signature",
        "ts": "1477590512.001017"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "they can't claim that they didn't mean to",
        "ts": "1477590520.001018"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I still maintain, whoever submits it, must sign it, as the submitter",
        "ts": "1477590853.001019"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "I don't disagree with that",
        "ts": "1477590864.001020"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "And I would say there can only ever be a single submitter",
        "ts": "1477590872.001021"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "(for a particular tran)",
        "ts": "1477590881.001022"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "in that case, how do you solve our little dispute of a tx signed by you with both our proposal actions?",
        "ts": "1477590910.001023"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "I can claim I didn't give you any authorization - and then in front of the judge they'll say \"no, sorry. Ale is Italian and we don't trust them\" and then I'm screwed :stuck_out_tongue:",
        "ts": "1477590950.001024"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "????",
        "ts": "1477590960.001025"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "<@U0PB67X4K> the disucssion concerns a transaction containing 2 actions stemming from proposals from 2 different clients",
        "ts": "1477591012.001026"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "who signs that transaction?",
        "ts": "1477591017.001027"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "I don't think we were trying to support transactions from multiple submitters (clients) in the same envelope",
        "ts": "1477591026.001028"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "then we're good",
        "ts": "1477591034.001029"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "but I think <@U0XPR4NP4> had reservations about that",
        "ts": "1477591057.001030"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "(if I understood correctly)",
        "ts": "1477591068.001031"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "It is more that having the creator specified in a repeated header implies to me that it is possible",
        "ts": "1477591161.001032"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2075\/1\/orderer\/atomicbroadcast\/ab.proto> Please look at `SignedData`, `SignableData` and `SignatureHeader` as a proposal for the 'orderer transaction'",
        "ts": "1477591205.001033"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "(Here, where `Broadcast` accepts a stream of `SignedData`, and a fabric transaction would either build upon or simply be wrapped by the `SignedData`)",
        "ts": "1477591249.001034"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "will have a look",
        "ts": "1477591285.001035"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "(Please have a look <@U0PB67X4K> <@U0XQ35CDD> <@U0XR6J961> as well)",
        "ts": "1477591351.001036"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "<@U0XPR4NP4> I've added the flow descriptipon for generic transactions to fabric_proposal.proto",
        "ts": "1477594983.001037"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Thanks",
        "ts": "1477595005.001038"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I'll take a look",
        "ts": "1477595013.001039"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U0XPR4NP4> can you take a look at <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1973\/> ? looks like you had reviewed it before \u2026 if you are ok with that good to merge so I can rebase and work",
        "ts": "1477595288.001040"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Sure",
        "ts": "1477595306.001041"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "oops",
        "ts": "1477595338.001042"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "wrong one",
        "ts": "1477595340.001043"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I +2-ed because it looked good to me, but it has a merge conflict, so that will go away",
        "ts": "1477595465.001044"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "no that\u2019s the right one (sorry)",
        "ts": "1477595477.001045"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "ok",
        "ts": "1477595479.001046"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "If you wanted to simply pass a tran, the SignatureHeader's type is `UNKNOWN` I guess?",
        "edited": {
            "user": "U0XQ35CDD",
            "ts": "1477596414.000000"
        },
        "ts": "1477596389.001047"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "And can we clarify what is the difference between `CONFIGURATION_TRANSACTION` and `CONFIGURATION_ITEM`? (I can guess, but I don't want to.)",
        "ts": "1477596502.001049"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I was just discussing this with <@U0ULK2JPP> we could add a field of type `FABRIC`",
        "ts": "1477597940.001050"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "sounds like if we did that then `Transaction2` becomes `Data` for `Type == FABRIC`\u2026 and we don\u2019t need `SignedTransaction`",
        "ts": "1477598377.001051"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "did  I read that right ?",
        "ts": "1477598386.001052"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "actually talking with <@U0KN2SSKE> we could consolidate even further like so",
        "ts": "1477601817.001053"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "```Envelope == SignedData\nPayload == SignableData\nHeader == SignatureHeader\n\nso that \n\nEnvelope { Payload, Signature }\nPayload {Header, Data}\n\nmaps to <@U0XPR4NP4> structures. ie, basically use standard names such as Envelope, Header etc to describe generic objects and then `Data` becomes specialized based on Header```",
        "ts": "1477602007.001054"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0PB67X4K> <@U0KN2SSKE> <@U0XQ35CDD> <@U0XR6J961> <@U0ULK2JPP> I think we really need to make a decision as to whether configuration tx is on the fabric transaction type with fabric style endorsements or not.  I've heard very different stories depending on who I ask.\n\nBelow is my understanding:\n\nThere are some who suggest that configuration transaction endorsement should be done by endorsers (even if it requires out of band manual human interaction to approve the endorsement).  This means all orderering entities would need deploy endorsing peers to support reconfiguring the ordering network.  \n\nPros: Reuse of components, reuse of concepts\nCons: Violates layering idea of the orderer network being unaware of the peer, fabric transaction format is complex\n\nThere are some who suggest that configuration transaction endorsement should be done entirely in an out of band procedure using a simpler mechanism than endorsement, with admins doing key signatures manually out of band (because modifying config should always require human approval).\n\nPros: Makes bootstrapping simple, keeps orderer concept relatively isolated from fabric concepts\nCons: Require reinventing mechanisms from the fabric",
        "edited": {
            "user": "U0XPR4NP4",
            "ts": "1477603217.000000"
        },
        "ts": "1477603181.001055"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "I go with the latter - separate from fabric.  ",
        "ts": "1477603277.001058"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "And I think the only reinvention might be policy which we could share",
        "ts": "1477603307.001059"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Strong vote for the latter option. ",
        "ts": "1477603368.001060"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "why would \" fabric transaction format is complex\u201d ?",
        "ts": "1477603408.001062"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "i am fine with have manual configurations for orderer but if it requires to be in the ledger, it need to be a transaction",
        "ts": "1477603456.001064"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "which should be interpreted by the peers on both endorsing (if required) and validating",
        "ts": "1477603509.001065"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "channel creation, for example, can\u2019t and shouldn\u2019t be done manually",
        "ts": "1477603536.001066"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "the current transaction object is defined to contain a header and a payload.  The payload depends on the type in the header",
        "ts": "1477603603.001067"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "why would that be complex?",
        "ts": "1477603617.001068"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "If we are doing automated endorsement over it, then I maintain we _must_ use the Proposal\/ProposalResponse\/etc. which I think, are complex.",
        "ts": "1477603633.001069"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "There is no technical reason which would prevent us from using this construct, I've been thinking about how we might do this, and I actually think it can be made mildly elegant, but I have not worked all the kinks out.",
        "ts": "1477603682.001070"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "what CONFIG trans that don\u2019t effect the peers ?  separate those out and handle them on the orderer",
        "ts": "1477603708.001071"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "But I think the aggregation of the transaction proposal, proposalresponse etc. is undeniably complex",
        "ts": "1477603715.001072"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Having different styles of config endorsement seems like a bad road to me.",
        "ts": "1477603762.001073"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "for those that effect the peer and ledger, we need to follow a clear path otherwise we would only confuse developers",
        "ts": "1477603772.001074"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "nothing prevent us from defining another type of trans",
        "ts": "1477603839.001075"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "if a trans (regardless of type) effecting both peer and orderer, it needs to travel the same path, so that all the APIs would work the same way;  some of them (types) might not need endorsements",
        "ts": "1477604019.001076"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I'm confused how you could have a reconfiguration transaction without endorsement",
        "ts": "1477604048.001077"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "(here I use endorsement in a generic non-fabric way)",
        "ts": "1477604062.001078"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "what are the reconfiguration transactions that we know of today?  after all, endorsement is a process determined by the app, not the fabric",
        "ts": "1477604193.001079"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Changing transactor membership, changing orderer membership, changing policy (including modification policies for the membership)",
        "ts": "1477604400.001080"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "(And possibly other chain configuration data which we haven't realized we need yet)",
        "ts": "1477604535.001081"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Changing orderer addresses, orderer characteristics (think pbft f, or K, or L), changing other chain characteristics like block size or batch timeout, changing block validation policies, expiring certs (are a few more that come to mind)",
        "edited": {
            "user": "U0XPR4NP4",
            "ts": "1477604619.000000"
        },
        "ts": "1477604610.001082"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "do we need to record these changes on the ledger  or some private orderer\u2019s db?",
        "ts": "1477604696.001084"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "if ledger, which ledger and which peers maintain the ledger?",
        "ts": "1477604727.001085"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I would say these are the properties of the 'configuration block'.  A 'configuration block' should contain all the configuration for the chain, so that any peer or orderer, given this block (and told to trust it) could completely participate in validation and reception of the chain going forward.  (For a peer, for application logic, they would likely need past blocks).",
        "ts": "1477604832.001086"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U0XPR4NP4> if these properties are on the `configuration block` are maintained on the ledger .. seems to logically follow that they are maintained as states on a chaincode  OR are they are maintained outside of the ledger in some trusted manner ?",
        "ts": "1477605051.001087"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I'm wary of the term 'the ledger', to me this implies some database or other",
        "ts": "1477605078.001088"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "chain = channel + ledger  which is created by the application + peers,  so without that, there would be no chain to begin with\nWe could treat this config block as a structure maintained by the orderers some how  and given to the application when the app creates a chain",
        "ts": "1477605103.001089"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I would see there being a simple transformative function \"Config\" -&gt; In memory structure.  When a peer starts up, it picks the most recent config block, and uses that for config.",
        "ts": "1477605130.001090"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "ok",
        "ts": "1477605142.001091"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "so its not part of the \u201cblock\u201d but modified in some trusted manner",
        "ts": "1477605184.001092"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "so this has nothing to do with transactions",
        "ts": "1477605198.001093"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "just some confguration on the orderer",
        "ts": "1477605210.001094"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "if that\u2019s true then we don\u2019t need a \u201ctransaction\u201d to modify it",
        "ts": "1477605210.001095"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "an API",
        "ts": "1477605232.001096"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "how would existing peers learn about the changes on the configuration block?",
        "ts": "1477605292.001097"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Whenever the configuration changes, a new configuration block is emitted as the next block in the chain",
        "ts": "1477605311.001098"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "A configuration block only ever contains exactly one 'configuration transaction'",
        "edited": {
            "user": "U0XPR4NP4",
            "ts": "1477605347.000000"
        },
        "ts": "1477605329.001099"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "no, you\u2019re mixing the metaphor of transaction with configuration data on orderer",
        "ts": "1477605349.001101"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "This is chain wide configuration",
        "ts": "1477605362.001102"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "which chain?",
        "ts": "1477605374.001103"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "there are multi chains",
        "ts": "1477605380.001104"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Each channel has a chain",
        "ts": "1477605385.001105"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Every chain has a most recent configuration block",
        "ts": "1477605395.001106"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "that doesn\u2019t work",
        "ts": "1477605438.001107"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Why?",
        "ts": "1477605441.001108"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "we can say (1) config is on ledger and would need to be managed using a chaincode (config being properties) or (2) config is outside of ledger and does not need fabric\u2019s transaction semantics  (no need to invoke chaincode etc)",
        "ts": "1477605445.001109"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "what we CANNOT say is config is on ledger but does not need fabrics transaction semantics as there\u2019s no way you can modify the states represented by the configuration outside of the chaincode path\u2026I\u2019m thinking states as properties tat have to be manipulate via RW set",
        "edited": {
            "user": "U0ULK2JPP",
            "ts": "1477605593.000000"
        },
        "ts": "1477605504.001110"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "(2) is not an option, config must be processed in line with the blocks, otherwise it is extremely hard not to be non-deterministic",
        "ts": "1477605508.001111"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "t1 broadcasted before config changes; t2 broadcasted after config changes;  t1 and t2 were ordered in the same block; config changes was in another block;  which block get to peer first?",
        "ts": "1477605523.001112"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Config is not changed until it makes it into a block.  The transactions are processed against the most recent config change.  If it's in a block before the block this tx is bound for, then you apply that config.  If the tx was processed before that config, then it wouldn't.",
        "ts": "1477605602.001114"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "if 2 is not an option, then we must use transaction \u2014 it is for auditability and all the api\u2019s to work the same way",
        "ts": "1477605645.001115"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "oh I see",
        "ts": "1477605677.001116"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "We can do (1), but per <@U0XQ35CDD> and <@U0PB67X4K> they do not like the idea of it",
        "ts": "1477605678.001117"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "you are saying you\u2019ll construct a block on the fly and just \u201cplug\u201d it in",
        "ts": "1477605695.001118"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "(I also believe <@U0MRY2LKY> and <@U0XR6J961> do not like the idea of using the fabric transaction)",
        "ts": "1477605702.001119"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "gosh",
        "ts": "1477605704.001120"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0ULK2JPP> It is not that complicated.  The transaction that comes in contains the config.",
        "ts": "1477605724.001121"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "There's not transformation, nothing complicated, we just validate it, and if it's good, throw it in a block.  If it's not, we discard it.",
        "ts": "1477605740.001122"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "As my initial post to this whole discussion, I see pros and cons to reusing the fabric transaction.  I just need a decision as I can't implement both.",
        "ts": "1477605798.001123"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "(Or rather, it would be a waste to do both)",
        "ts": "1477605807.001124"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "right",
        "ts": "1477605811.001125"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "if it\u2019s on ledger, how would we get\/query the content?",
        "ts": "1477605812.001126"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "how would the ledger know to build the merkle tree",
        "ts": "1477605847.001127"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I would imagine a switch that says \"If it's configuration, pass it to this little library, it will either tell you the config was inappropriately updated (in which case, you have a problem and should stop participating in the network) or, it will hand you back a little map of the config values, or some other convenient structure.",
        "ts": "1477605875.001128"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "so then this is what needs to happen \u2026 ledger peeks into the tran and if a CHAINCODE tran does read\/write consolidation or if its a CONFIG transaction it would just call an API into the peer to set it",
        "ts": "1477605892.001129"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "?",
        "ts": "1477605894.001130"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Right.  When you receive a block from ordering, you already need to inspect it to make sure it's valid.  So, extend that further, if it only has one transaction, check to see if it's a config tran, and if so, try to apply it.",
        "ts": "1477605945.001131"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "ok",
        "ts": "1477605963.001132"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "so now on every call, we need to check type",
        "ts": "1477606015.001133"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "This makes perfect sense to me.",
        "ts": "1477606017.001134"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "in other words, ledger needs to be aware of CONFIG type and treat it differently",
        "ts": "1477606031.001135"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "well, we already peek into the tran in the ledger",
        "ts": "1477606053.001136"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "this wouldbe exception processing;  ugly",
        "ts": "1477606076.001137"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "bad design",
        "ts": "1477606081.001138"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Then why do we support non-chaincode types?",
        "ts": "1477606094.001139"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "it should behave the same from persistence point of view some that we can protect the other APIs",
        "ts": "1477606165.001140"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "just for reference",
        "ts": "1477606171.001141"
    },
    {
        "type": "message",
        "subtype": "file_share",
        "text": "<@U0ULK2JPP|muralisr> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F2V94SWKG\/pasted_image_at_2016_10_27_06_09_pm.png|Pasted image at 2016-10-27, 6:09 PM>",
        "file": {
            "id": "F2V94SWKG",
            "created": 1477606174,
            "timestamp": 1477606174,
            "name": "Pasted image at 2016_10_27 06_09 PM.png",
            "title": "Pasted image at 2016-10-27, 6:09 PM",
            "mimetype": "image\/png",
            "filetype": "png",
            "pretty_type": "PNG",
            "user": "U0ULK2JPP",
            "editable": false,
            "size": 217562,
            "mode": "hosted",
            "is_external": false,
            "external_type": "",
            "is_public": true,
            "public_url_shared": false,
            "display_as_bot": false,
            "username": "",
            "url_private": "https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2V94SWKG\/pasted_image_at_2016_10_27_06_09_pm.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "url_private_download": "https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2V94SWKG\/download\/pasted_image_at_2016_10_27_06_09_pm.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_64": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2V94SWKG-4597ed4743\/pasted_image_at_2016_10_27_06_09_pm_64.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_80": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2V94SWKG-4597ed4743\/pasted_image_at_2016_10_27_06_09_pm_80.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_360": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2V94SWKG-4597ed4743\/pasted_image_at_2016_10_27_06_09_pm_360.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_360_w": 360,
            "thumb_360_h": 135,
            "thumb_480": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2V94SWKG-4597ed4743\/pasted_image_at_2016_10_27_06_09_pm_480.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_480_w": 480,
            "thumb_480_h": 180,
            "thumb_160": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2V94SWKG-4597ed4743\/pasted_image_at_2016_10_27_06_09_pm_160.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_720": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2V94SWKG-4597ed4743\/pasted_image_at_2016_10_27_06_09_pm_720.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_720_w": 720,
            "thumb_720_h": 270,
            "thumb_960": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2V94SWKG-4597ed4743\/pasted_image_at_2016_10_27_06_09_pm_960.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_960_w": 960,
            "thumb_960_h": 359,
            "thumb_1024": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2V94SWKG-4597ed4743\/pasted_image_at_2016_10_27_06_09_pm_1024.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_1024_w": 1024,
            "thumb_1024_h": 383,
            "image_exif_rotation": 1,
            "original_w": 2014,
            "original_h": 754,
            "permalink": "https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F2V94SWKG\/pasted_image_at_2016_10_27_06_09_pm.png",
            "permalink_public": "https:\/\/slack-files.com\/T0J024XGA-F2V94SWKG-8b4c9e7d1c",
            "channels": [
                "C2GE7GXM1"
            ],
            "groups": [],
            "ims": [],
            "comments_count": 0
        },
        "user": "U0ULK2JPP",
        "upload": true,
        "display_as_bot": false,
        "username": "<@U0ULK2JPP|muralisr>",
        "bot_id": null,
        "ts": "1477606178.001142"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "that\u2019s what we do today to prepare for read\/write",
        "ts": "1477606194.001143"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "ledger now operates on read-write-set, this config type would not have that but it changed the state",
        "ts": "1477606234.001144"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "If we ever support another transaction type like, say UTXO, we will have to process the transaction differently.  The config transaction is just a very very simple sort transaction which doesn't require a backing DB to parse.",
        "edited": {
            "user": "U0XPR4NP4",
            "ts": "1477606365.000000"
        },
        "ts": "1477606336.001145"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Assuming that this is a bad design, how is it better than violating this nice layer separation between orderers\/endorsers that we currently have?",
        "edited": {
            "user": "U0XQ35CDD",
            "ts": "1477606349.000000"
        },
        "ts": "1477606339.001146"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "we already violate the layer by sending an unknown block to the ledger maintained by the peers",
        "ts": "1477606407.001150"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Peers layer on top of ordering, so it is fine for them to need to know about ordering concepts",
        "ts": "1477606429.001151"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "I disagree. Consider what the alternative path entails for orderers.",
        "ts": "1477606446.001152"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "my take is very simple - the ordering service should have no awareness of fabric transactions.   Now the peers will need to know how to interpret batches of opaque messages and special config messages.   That's because they use the ordering service.",
        "ts": "1477606474.001153"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "it's as simple as that.   config of the ordering service is not governed by peers",
        "ts": "1477606499.001154"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "i agreed, but there are config trans that governed by the peers",
        "ts": "1477606538.001155"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "such as channel",
        "ts": "1477606543.001156"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "for fabric - opaque will be fabric transactions",
        "ts": "1477606543.001157"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "then those can be fabric transactions",
        "ts": "1477606561.001158"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "rest my case",
        "ts": "1477606594.001159"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "ordering service needs to know nothing about those other than to order them as opaque and deliver to the proper channel like any other mesages",
        "ts": "1477606597.001160"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "hang on",
        "ts": "1477606633.001161"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "someone will need to tell the ordering service to create \/ modify a channel and add\/remove members\/identities.  that is an orderer specific transaction.",
        "ts": "1477606704.001162"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "this whole thing seems messy to me - let me step away for a few and think about this",
        "ts": "1477606737.001163"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "meanwhile can we merge <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2071> ?",
        "ts": "1477606765.001164"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "creation of a channel and telling peers to join a channel actually are 2 separate things",
        "ts": "1477606769.001165"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "If we are ok with the changes, I can incorporate them",
        "ts": "1477606779.001166"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "one is an orderer API (create the channel) and agreement to use\/join is a fabric transaction",
        "ts": "1477606809.001167"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "i don\u2019t agree with the changes in 2071 and voted -1, but others can override as always",
        "ts": "1477606854.001168"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "otherwise we will have made one entangled web of complexity",
        "ts": "1477606857.001169"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0PB67X4K> This has always been my viewpoint, that anyone with authority to create a channel on the ordering service can do so, with whatever properties they want.  It is up to the peers to decide whether or not they wish to join that channel.",
        "ts": "1477606867.001170"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Telling peers to join a channel is something that happens between the company's app and the company's peers. This has nothing to do with ordering.",
        "edited": {
            "user": "U0XQ35CDD",
            "ts": "1477606964.000000"
        },
        "ts": "1477606876.001171",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0PB67X4K"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "<@U0KN2SSKE>  \"but others can override\" is my line  :wink:",
        "edited": {
            "user": "U0PB67X4K",
            "ts": "1477606918.000000"
        },
        "ts": "1477606891.001172"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U0KN2SSKE>  I don\u2019t see any -1 there",
        "ts": "1477606960.001174"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "It was prior to thee last push, so went away",
        "ts": "1477606993.001176"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "<@U0ULK2JPP>: It's there on a previous patchset.",
        "ts": "1477606994.001177"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "13:36.",
        "ts": "1477606996.001178"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "ah ok",
        "ts": "1477607019.001179"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "I just wanted to make progress with the integration\u2026 looks like theres going to be a whole bunch of things to iron out",
        "ts": "1477607072.001180"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "I can just go with what I have but there are some good things in the patch (such as comments) which will be good to have",
        "ts": "1477607153.001181"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0ULK2JPP> I would vote merge, purely because of the doc improvements.  I may not agree entirely with the format, but at least it is more clear now.",
        "ts": "1477607212.001182"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "right, exactly",
        "ts": "1477607223.001183"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "also it is closer to the mainline transaction processing even if we have to adjust later for the config processing",
        "ts": "1477607246.001184"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "is that a true statement ?",
        "ts": "1477607256.001185"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "i think we need to design the CONFIG trans careful to protect the ledger operations;  could some gather the info so that we can have a call with manish and dave \u2014 at least the ledger can index the config trans, which has the same struct but different payload, so that API such as getTrans(123) still work",
        "ts": "1477607570.001186"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "i m out of here, will check back later on",
        "ts": "1477607629.001187"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0ULK2JPP> I'm not sure that I understand your statement.  I too have to run, but will be back on later",
        "ts": "1477607763.001188"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "well if everyone else is leaving - I'm outta here too!  time to workout methinks",
        "ts": "1477607846.001189"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "guys",
        "ts": "1477607856.001190"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "I guess I\u2019ll just have to keep using the old protos",
        "ts": "1477607872.001191"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "build job is stalled",
        "ts": "1477608129.001192"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "I gave it a +2 and ran reverify",
        "ts": "1477608167.001193"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U0PB67X4K> thanks\u2026 will wait for it to complete and merge",
        "ts": "1477608204.001194"
    },
    {
        "type": "message",
        "user": "U0MRY2LKY",
        "text": "<@U0XPR4NP4>: It would be nice if other types of messages could be sent through consensus (for possible extensibility). I also think this is a possible consideration for versioning. I have typically advocated that many application-level configurations should be endorsed as fabric transactions. ",
        "edited": {
            "user": "U0MRY2LKY",
            "ts": "1477611248.000000"
        },
        "ts": "1477609652.001195"
    },
    {
        "type": "message",
        "user": "U0MRY2LKY",
        "text": "I would also think that several middle-level configurations surface in a similar way ... such as creation of subledgers, peer membership, etc. I would also advocate for those items as being endorsed (regardless of the transaction type) and not use a totally out-of-band mechanism. ",
        "edited": {
            "user": "U0MRY2LKY",
            "ts": "1477610927.000000"
        },
        "ts": "1477609835.001197"
    },
    {
        "type": "message",
        "user": "U0MRY2LKY",
        "text": "Sorry - I was editing :)",
        "ts": "1477610935.001204"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0MRY2LKY> Sorry if I put words in your mouth, just thought I'd seen you +1 a comment about building the fabric Tran on an orderer Tran",
        "ts": "1477610937.001205"
    },
    {
        "type": "message",
        "user": "U0MRY2LKY",
        "text": "No worries - I did intend that part :) ",
        "ts": "1477611130.001206"
    },
    {
        "type": "message",
        "user": "U0MRY2LKY",
        "text": "<@U0XPR4NP4>:  Btw - I was reading a gerrit change log where my understanding was that the Metadata field isn't included in the hash structure of a block. Is there an equivalent in batches?",
        "ts": "1477611532.001208"
    },
    {
        "type": "message",
        "user": "U0MRY2LKY",
        "text": "And is the metadata intended to be synched between peers along with the rest of the block data?",
        "ts": "1477613641.001209"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Metadata is intended to be synced, and is usually used to contain signatures, for instance if 3 of 4 ordering nodes need to sign, there are four different valid sets of signatures (five if you want to be technical) , which would result in four different hashes if they were included in the block hash. It's okay to sync this unhashed data because the receiver can verify it. ",
        "edited": {
            "user": "U0XPR4NP4",
            "ts": "1477616399.000000"
        },
        "ts": "1477615929.001210"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "As far as batches vs blocks, they're the same data structure ",
        "ts": "1477616108.001212"
    },
    {
        "type": "message",
        "user": "U0MRY2LKY",
        "text": "Cool.. excellent.",
        "ts": "1477617563.001214"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "protos integrated with <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2081\/>",
        "ts": "1477631381.001215"
    }
]