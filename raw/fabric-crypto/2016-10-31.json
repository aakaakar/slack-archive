[
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "created <https:\/\/jira.hyperledger.org\/browse\/FAB-913> for addressing remaining changes to protos",
        "ts": "1477930269.001316"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "please do edit\/correct",
        "ts": "1477930311.001317"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0ULK2JPP> <@U26T99AQ4> <@U0ZR63HLK> <@U0KN2SSKE> As requested, here is the ordering service converted to the simpler proto, with the top level message in its own proto file and the names per Murali <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2075\/>",
        "ts": "1477932372.001318"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "great, thanks",
        "ts": "1477932417.001319"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "<@U0XPR4NP4> Should I pull this one for my work, or should I hold off a bit more? (Looks like a good RC?)",
        "ts": "1477932721.001320"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "so <@U0XQ35CDD> \u2026 was going to ask <@U0XPR4NP4> we\u2019d need to consolidate with fabric\/protos\/ right ?",
        "ts": "1477932750.001321"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0XQ35CDD> I'd recommend pulling this and working on top of it, I don't anticipate the format changing after the consensus achieved Friday",
        "ts": "1477932839.001322"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0ULK2JPP> Yes, I'd love to see the fabric protos consolidate on top of this new message, for <@U0XQ35CDD> this shouldn't matter (since he is not working with those messages), but I do think consolidating the fabric messages sooner rather than later will make for much less rebasing",
        "ts": "1477932911.001323"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Right, I'm focusing strictly on the orderer side of things <@U0ULK2JPP>,  so I'm good. Thanks <@U0XPR4NP4>, will do.",
        "ts": "1477932968.001324"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "so we're still keeping our options open for protobufs vs asn.1?",
        "ts": "1477933523.001325"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "or do we have a definite format?",
        "ts": "1477933531.001326"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Per <@U0KN2SSKE> making the switch, even if it slows us down by a week, is too expensive for now.  The best we can do is try to write things to minimize the headache of switching later if we decide to.",
        "ts": "1477933633.001327"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "what does it mean, for now",
        "ts": "1477933698.001328"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "before MVP?",
        "ts": "1477933703.001329"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i.e. 1.0?",
        "ts": "1477933714.001330"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i've been running into inconveniences with that whole bytes thing",
        "ts": "1477933781.001331"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "because i keep having to unmarshal the bytes when i want to access a field",
        "ts": "1477933800.001332"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Per <@U0ULK2JPP> we can write simple wrappers to largely avoid this, and facilitate the switch to another encoding down the line",
        "ts": "1477933878.001333"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "As far as time frames go, I'm not 100% certain, I assume it is a 'until we have time or cause to revisit it'",
        "ts": "1477933961.001334"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "lol",
        "ts": "1477934037.001335"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "just no decisions",
        "ts": "1477934047.001336"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U0XR6J961> currently there are wrappers in fabric\/protos\/utils which ledger, endorser, peer etc access. As long as we are careful not to let marshal\/unmarshal bleed outside, we can revisit this. There are cons too\u2026 performance from what I understand.",
        "edited": {
            "user": "U0ULK2JPP",
            "ts": "1477934236.000000"
        },
        "ts": "1477934220.001337"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "so though decisions :slightly_smiling_face: at least some preparation",
        "ts": "1477934266.001339"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "just make a decision",
        "ts": "1477934275.001340"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "not a non-decision decision",
        "ts": "1477934286.001341"
    },
    {
        "type": "message",
        "user": "U2L9F7VL1",
        "text": "late to the party here but fwiw we decided to go with the newer (and nicer in our opinion) OER encoding and ASN.1 for the Interledger project. ASN.1 gives you unambiguous data structures with deterministic encoded content and OER encoding is more flexible and generally simpler and nicer to use than PER and more compact than BER. It\u2019s worth noting though that you can affect your encoding or decoding performance by simply designing the messages differently. Choosing an specific encoding format doesn\u2019t magically make streaming encoders\/decoders faster :slightly_smiling_face:",
        "ts": "1477947358.001342",
        "reactions": [
            {
                "name": "ok_hand",
                "users": [
                    "U0XQ35CDD"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U2L9F7VL1",
        "text": "<http:\/\/www.oss.com\/asn1\/resources\/books-whitepapers-pubs\/Overview%20of%20OER.pdf>",
        "ts": "1477947360.001343"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "^^^ interesting (especially the OER)",
        "ts": "1477947411.001344"
    },
    {
        "type": "message",
        "user": "U2L9F7VL1",
        "text": "bad news is you may have to write some of the encoding\/decoding stuff yourself",
        "ts": "1477947445.001345"
    },
    {
        "type": "message",
        "user": "U2L9F7VL1",
        "text": "good news is that a lot has been done by the interledger contributors already :slightly_smiling_face:",
        "ts": "1477947471.001346"
    },
    {
        "type": "message",
        "user": "U2L9F7VL1",
        "text": "<https:\/\/github.com\/interledgerjs\/oer-utils>",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "interledgerjs\/oer-utils",
                "title_link": "https:\/\/github.com\/interledgerjs\/oer-utils",
                "text": "oer-utils - Tools for OER parsing and serialization",
                "fallback": "GitHub: interledgerjs\/oer-utils",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/22465593?v=3&s=400",
                "from_url": "https:\/\/github.com\/interledgerjs\/oer-utils",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https:\/\/github.com\/apple-touch-icon.png",
                "id": 1
            }
        ],
        "ts": "1477947511.001347"
    },
    {
        "type": "message",
        "user": "U2L9F7VL1",
        "text": "Last comment on the encoding subject is that we are also looking at CBOR which is getting a lot of traction lately and is being used in a number of projects at IETF",
        "ts": "1477947797.001349"
    }
]