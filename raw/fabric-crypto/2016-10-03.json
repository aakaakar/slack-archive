[
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "Next steps &amp; priorities for cryptology squad: \n1. Transition to the next security architecture\n(a) Security review on the protocol messages for the next consensus architecture FAB 351- all ( <@U26T99AQ4> , <@U0ZR63HLK>, elli) =&gt; Done\n(b) Creation of protobuffs based on the previous bullet point FAB 489 - <@U0ZR63HLK> (with help from <@U26T99AQ4>) =&gt; In progress\n(c) Transition the crypto code to the new architecture - <@U26T99AQ4> =&gt; Todo\n\n2. Modular crypto library, with multi CSP support (FAB-355)\n(a) Definition of the crypto provider interface - <@U0ZR63HLK> , <@U10Q62R8X> , Tamas =&gt; In Progress\n(b) Software provider - <@U10Q62R8X>  =&gt; In Progress\n(c) Refactoring on the hyperledger code to use that library - <@U0ZR63HLK> =&gt; In Progress",
        "edited": {
            "user": "U1BC5A0F9",
            "ts": "1475482309.000000"
        },
        "ts": "1475482255.000003"
    },
    {
        "user": "U10Q62R8X",
        "inviter": "U1BC5A0F9",
        "text": "<@U10Q62R8X|vpaprots> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1475482264.000004"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "We are also working with <@U0S5KF44D> on finalizing the membership service API, as well as the high level flow of membership service operations (the ones done through the blockchain).",
        "edited": {
            "user": "U1BC5A0F9",
            "ts": "1475482459.000000"
        },
        "ts": "1475482436.000006"
    },
    {
        "user": "U0XV1HDL3",
        "text": "<@U0XV1HDL3|cca> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1475486934.000008"
    },
    {
        "type": "message",
        "subtype": "file_share",
        "text": "<@U0ZR63HLK|adc> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/adc\/F2JKXGXEU\/protobufmessagesandflow.pdf|ProtobufMessagesAndFlow.pdf> and commented: Hi All, this file contains the protobuf messages and the relative flow with the security checks to put in place. This a joint effort with <@U1BC5A0F9> and <@U26T99AQ4>.",
        "file": {
            "id": "F2JKXGXEU",
            "created": 1475506254,
            "timestamp": 1475506254,
            "name": "ProtobufMessagesAndFlow.pdf",
            "title": "ProtobufMessagesAndFlow.pdf",
            "mimetype": "application\/pdf",
            "filetype": "pdf",
            "pretty_type": "PDF",
            "user": "U0ZR63HLK",
            "editable": false,
            "size": 824792,
            "mode": "hosted",
            "is_external": false,
            "external_type": "",
            "is_public": true,
            "public_url_shared": false,
            "display_as_bot": false,
            "username": "",
            "url_private": "https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2JKXGXEU\/protobufmessagesandflow.pdf?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "url_private_download": "https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2JKXGXEU\/download\/protobufmessagesandflow.pdf?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "permalink": "https:\/\/hyperledgerproject.slack.com\/files\/adc\/F2JKXGXEU\/protobufmessagesandflow.pdf",
            "permalink_public": "https:\/\/slack-files.com\/T0J024XGA-F2JKXGXEU-66a1d1cac6",
            "channels": [
                "C2GE7GXM1"
            ],
            "groups": [],
            "ims": [],
            "comments_count": 1,
            "initial_comment": {
                "id": "Fc2JJF8RPV",
                "created": 1475506254,
                "timestamp": 1475506254,
                "user": "U0ZR63HLK",
                "is_intro": true,
                "comment": "Hi All, this file contains the protobuf messages and the relative flow with the security checks to put in place. This a joint effort with <@U1BC5A0F9> and <@U26T99AQ4>.",
                "channel": ""
            },
            "reactions": [
                {
                    "name": "+1",
                    "users": [
                        "U1GN670VD"
                    ],
                    "count": 1
                }
            ]
        },
        "user": "U0ZR63HLK",
        "upload": true,
        "display_as_bot": false,
        "username": "<@U0ZR63HLK|adc>",
        "bot_id": null,
        "ts": "1475506255.000009"
    },
    {
        "user": "U0XQ35CDD",
        "text": "<@U0XQ35CDD|kostas> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1475514426.000010"
    },
    {
        "user": "U0YJUECE8",
        "text": "<@U0YJUECE8|silliman> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1475519868.000011"
    },
    {
        "user": "U0XPR4NP4",
        "text": "<@U0XPR4NP4|jyellick> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1475523942.000012"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Hey <@U1BC5A0F9>, just had a long talk with <@U0S5KF44D> about bootstrapping.  Also talked some with <@U0XQ35CDD> and <@U0XR6J961> and there seems to be considerable resistance to using the transaction format as is for configuration changes as it is complicated to produce and consume.  Maybe this is my poor understanding of the transaction format, so perhaps you can enlighten me.\n\nStill, I would like to see how we can support the use case enumerated in my email a while back.  Namely, I would like to create a binary blob (a configuration) and send it to parties for review and approval (endorsement, but no actual execution or execution results), then collect this into a transaction which can clearly (and efficiently) be identified as a 'configuration transaction'.\n\nI think that if the fabric transaction format can be generalized to support this simply, that would be ideal.  However, it might be simpler just to start from scratch.  I think many of the problems which are being solved for the fabric transaction type can be eliminated for the reconfiguration transaction type because there is no need for unlinkability.  We could also use a globally unique sequence number or some such to prevent replay, as these configuration changes will always allow for a high degree of orchestration.",
        "ts": "1475524584.000013"
    },
    {
        "user": "U0XR6J961",
        "inviter": "U0XPR4NP4",
        "text": "<@U0XR6J961|simon> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1475524595.000014"
    },
    {
        "user": "U12452RAP",
        "text": "<@U12452RAP|grapebaba> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1475539355.000015"
    },
    {
        "user": "U1GN670VD",
        "text": "<@U1GN670VD|thiruworkspace> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1475539490.000016"
    }
]