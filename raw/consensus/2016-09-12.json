[
    {
        "type": "message",
        "user": "U10PFCC4R",
        "text": "not really related to hyperledger, but ... <http:\/\/buhrmi.de\/post\/150299260509\/quest-for-consensus-open-source-hashgraph>",
        "attachments": [
            {
                "service_name": "\/whatever",
                "title": "Quest for Consensus: Open Source Hashgraph",
                "title_link": "http:\/\/buhrmi.de\/post\/150299260509\/quest-for-consensus-open-source-hashgraph",
                "text": "It\u2019s been a while since I blogged anything interesting. A new white paper created by Leemon Baird titled \u201cTHE SWIRLDS HASHGRAPH CONSENSUS ALGORITHM:FAIR, FAST, BYZANTINE FAULT TOLERANCE\u201d has captured my interest. As far as I can tell, the technology described in the paper has the potential to completely deprecate all block chains in existence. However, currently the only implementation of this technology is written in Java and is not open source, and is only usable with licensing agreements. I would like to create an open source implementation of Hashgraph and the Hashgraph consensus based on javascript. And I\u2019m also looking for some help to do it because I think an openly accessible network based on hashgraph technology can solve some real problems. But why, and how? Well, currently all openly accessible blockchain networks that maintain some sort of consensus over the state of a distributed ledger require some sort of proof-of-x, with \u201cx\u201d being one of \u201cwork\u201d, \u201cstake\u201d, \u201celapased time\u201d, etc. Unfortunately, all these networks come with some kind of disadvantage. A \u201cproof-of-work\u201d-based network encourages participants to burn more energy and find more and more efficient methods to calculate some arbitrary hashes. All this energy is taken from our planet which is already heating up quickly. I\u2019ve been proposing to immediately cease all efforts that goes into the development of \u201cproof-of-work\u201d based networks for a long time, but never wrote about it. So now I\u2019m writing about it. Please stop. A \u201cproof-of-stake\u201d-based network can only work if the participants of the network are also registered somewhere else, some kind of central authority, or certificate authority that authorizes the participants to contribute to the network. There are also blockchain networks that use neither of that, but these are only run on private networks. With Open Source Hashgraph I\u2019d like to provide a new network and new \u201cx\u201d: A \u201cproof-of-trust\u201d-based network. So what does proof-of-trust even mean? It means that anyone is free to participate in the network as long as they have trust in basic math. By participating in the network, you automatically have shown \u201cproof-of-trust\u201d. In the white paper it is mathematically shown that all nodes that participate in the network eventually reach a consensus with probability 1. That\u2019s a mathematical certainty. So with a public and global network, it should be possible to bring the entire world to a consensus. So what is in it for you? Assume you\u2019re working on a project that requires some sort of consensus among multiple computers (eg. replicated state machines, log replication, stock exchanges, etc.). Wouldn\u2019t it be nice if you could simply do this:hashgraph = require('hashgraph');hashgraph.join(someIpAddress);hashgraph.sendTransaction('transfer 5 dollars from peter to stefan')hashgraph.on('consensus', function(transactions) { myApplication.runTransactions(transaction)}) And by doing this you know that the order of transactions will be exactly the same on all nodes that participate in the network, completely immutable, recorded forever and completely for free, and does NOT heat up our planet event more by burning energy to find some dumb hashes. That\u2019s what the hashgraph technology provides. Of course, users would submit application-specific transactions. The string transfer 5 dollars... can be replaced with some binary sequence, signed with a private key. So that anyone can send signed transactions into the hashgraph and build applications on top of it. This is more or less the use-case that I want to cover with an open source hashgraph implementation. I\u2019m currently trying to implement the pseudo-code found in the whitepaper in javascript (current progress here: <http:\/\/github.com\/buhrmi\/hashgraph> Note: It\u2019s not even close to functional), but I\u2019m kinda stuck right now. I\u2019d like to raise some money to hire Leemon Baird to help me (assuming he\u2019s interested, haha). If you also think that this can be usefull and you or your company has some resources to put behind this, please get in touch.",
                "fallback": "\/whatever: Quest for Consensus: Open Source Hashgraph",
                "from_url": "http:\/\/buhrmi.de\/post\/150299260509\/quest-for-consensus-open-source-hashgraph",
                "service_icon": "http:\/\/65.media.tumblr.com\/avatar_81f3cf1c378a_128.png",
                "id": 1
            }
        ],
        "ts": "1473672442.000011"
    },
    {
        "user": "U12452RAP",
        "text": "<@U12452RAP|grapebaba> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1473686759.000013"
    },
    {
        "user": "U0N4P17ND",
        "text": "<@U0N4P17ND|oiakovlev> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1473686951.000014"
    }
]