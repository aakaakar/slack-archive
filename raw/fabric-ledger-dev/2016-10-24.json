[
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "A few updates at the end of Sprint3:",
        "ts": "1477328183.000227"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "<https:\/\/jira.hyperledger.org\/browse\/FAB-729>",
        "ts": "1477328204.000228"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "Initial implementation for CouchDB docker can be found in this feature\/convergence branch commit:\n<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1865\/>\n\"couchdb start\" will start the couchdb docker image and couchdb process, and will also download the couchdb docker if this is the first time using it.\nThis commit will be ported to master branch and then will be merged.",
        "ts": "1477328210.000229"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "\u2026and...",
        "ts": "1477328215.000230"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "<https:\/\/jira.hyperledger.org\/browse\/FAB-728>",
        "ts": "1477328230.000231"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "Initial implementation for CouchDB can be found in these feature\/convergence branch commits (that build on each other):\n    <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1669\/>\n    <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1891\/>\nThese commits will be ported to master branch and then will be merged.",
        "ts": "1477328244.000232"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "See Jira for Sprint4 plan, in a nutshell, look into replacing RocksDB with LevelDB or something similar as the default embedded state database, due to new licensing issues with RocksDB.  In parallel, try to get the CouchDB prototype working in an end-to-end v1 transaction flow, as an option for queryable state database (experimental in v1)",
        "ts": "1477328348.000233"
    },
    {
        "type": "message",
        "user": "U1CTBUNEN",
        "text": "<@U1KFCPFQA> thanks for the update",
        "ts": "1477329520.000234"
    },
    {
        "type": "message",
        "user": "U1CTBUNEN",
        "text": "it\u2019s really awesome that something like CouchDB is coming along",
        "ts": "1477329534.000235"
    },
    {
        "type": "message",
        "user": "U1CTBUNEN",
        "text": "I was curious about adding a new query method \u201c\/db\/_find\" to your module",
        "edited": {
            "user": "U1CTBUNEN",
            "ts": "1477329650.000000"
        },
        "ts": "1477329602.000236"
    },
    {
        "type": "message",
        "user": "U1CTBUNEN",
        "text": "since this is a query transaction, what should the code flow be like?",
        "ts": "1477329617.000237"
    },
    {
        "type": "message",
        "user": "U1CTBUNEN",
        "text": "Is there a similar query example that I can follow?",
        "ts": "1477329633.000238"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "<@U1CTBUNEN> there are no query APIs implemented yet\u2026 but there is a placeholder in couchdb_query_executor.go RWLockQueryExecutor.ExecuteQuery(query string).  Actually it needs to be changed to CouchDBQueryExecutor.ExecuteQuery(query string).  The _find json payload would be the string passed in.  You can go ahead and give it a shot.  I expect it would call into a query function in couchdb.go (peer of SaveDoc and ReadDoc).",
        "ts": "1477331144.000240"
    },
    {
        "type": "message",
        "user": "U1CTBUNEN",
        "text": "<@U1KFCPFQA> thank you so much !!!",
        "ts": "1477337644.000241"
    },
    {
        "type": "message",
        "user": "U1CTBUNEN",
        "text": "I will give it a try",
        "ts": "1477337654.000242"
    }
]