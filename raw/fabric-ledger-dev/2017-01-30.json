[
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "<@U1KFCPFQA>  <@U0Z541B3P>  -  looking at <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/5011\/>  reminded me that I've been meaning to ask \/ suggest something for a while now (but forgot given how much churn there is)\n\nI thing we need to be able to provide \"external\" query functions which allow us to get a key and\/or range of keys and this should work regardless of the underlying database.  It's basically exposing the \"GetState\" and range query functions outside of chaincode.  IMHO, it's a *terrible* experience to use the proposal \/ chaincode invoke if I simply want to get the current value(s) of a (range of) key(s)",
        "ts": "1485779461.000286"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "<@U0PB67X4K> <@U0KN2SSKE> I was thinking the same thing - we expose rich query via QSCC, but not GetState and GetRange.  For symmetry those should be exposed to QSCC as well.  There will be people that don\u2019t like this (they want everything to go through application chaincode), and for them we can give them an option to disable QSCC functions until such time that we have ACL support on the QSCC functions.   This being said, QSCC will still require Proposal\/ProposalResponse communication, it\u2019s just that it\u2019s provided in an out of the box system chaincode vs requiring custom chaincode.",
        "ts": "1485784233.000287"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "(we decided to implement external ledger APIs as QSCC vs grpc, since clients already know how to work with chaincodes.  are you proposing we re-visit that?)",
        "ts": "1485784331.000288"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "Hey Dave - makes sense on adding to qscc (and ability to disable \/ access control).   My preference would be to not use the proposal\/proposalresponse mechanism, but its more important to expose the functions IMHO and then we can revisit the actual API",
        "ts": "1485784654.000289"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "makes sense, as a first step we\u2019ll expand the QSCC after alpha.  Then we can have a broader conversation about whether to bake these in as peer GRPC apis (Binh was hesitant)",
        "edited": {
            "user": "U1KFCPFQA",
            "ts": "1485785045.000000"
        },
        "ts": "1485785013.000290"
    },
    {
        "user": "U1HFNJB50",
        "text": "<@U1HFNJB50|c0rwin> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1485787623.000292"
    },
    {
        "user": "U3V4G8HUZ",
        "text": "<@U3V4G8HUZ|sagmeister> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1485787942.000293"
    },
    {
        "user": "U3BH74NH0",
        "text": "<@U3BH74NH0|passkit> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1485832596.000294"
    }
]