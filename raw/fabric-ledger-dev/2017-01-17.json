[
    {
        "user": "U195M30MD",
        "text": "<@U195M30MD|nickmelis> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1484643178.000201"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "<@U1KFCPFQA> I have a question about Table API and someone suggested to ask you directly in here",
        "ts": "1484644164.000202"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "first question is why the go version has a getRows() method and the Java one doesn\u2019t?",
        "ts": "1484644205.000203"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "also, how does it work in the background? does it just use the state?",
        "ts": "1484644230.000204"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "<@U195M30MD> Table API uses the same state db key-value structure under the covers.  It creates a composite key based on the keys you provide.  getRows() enables partial key queries where you pass in a set of partial keys, but the major limitation is that you have to query the partial keys left to right only - you cannot query on arbitrary keys.",
        "ts": "1484645231.000205"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "Project teams have found that the table metaphor did not map well over key-value database. Instead of a implementing a series of patches on top of an imperfect metaphor, it was decided to not support table api in v1 and instead encourage projects to model data as JSON and persist the exact composite keys that they need for their requirements. New chaincode APIs CreateCompositeKey() and PartialCompositeKeyQuery() have been implemented to assist chaincode developers with querying based on a subset of keys, to fulfill their query requirements in a more controllable manner.\nSee gerrit changeset: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3649\/>\nSee Jira item for more details: <https:\/\/jira.hyperledger.org\/browse\/FAB-1257>",
        "ts": "1484645237.000206"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "thanks <@U1KFCPFQA> that was useful. I was struggling with the concept of partial key search when the key is arbitrary.",
        "ts": "1484645323.000207"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "Right, if you have two keys you want to query on, you\u2019ll need to persist as two items so that you can query on either one",
        "ts": "1484645386.000208"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "Also, in v1 there is beta support for CouchDB which allows queries on the JSON content itself",
        "ts": "1484645429.000209"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "ok so if I have a structure A B C D where A B and C are keys, and I want to query for a certain value of A and C (but any B), I would need to store the record in the map as A -&gt; D, B -&gt; D and C -&gt; D and then query over A and C and merge the results?",
        "ts": "1484645491.000210"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "You would persist a key of A-C-B and do a range query to pick up all the A-Cs",
        "ts": "1484645554.000211"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "and then a key of A-B-C if I want to range query for A and B right?",
        "ts": "1484645622.000212"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "The new APIs abstract this for you, so that you can simply pass in A-C into the query",
        "ts": "1484645629.000213"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "right",
        "ts": "1484645638.000214"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "unfortunately I\u2019m using v0.6 so I have to use either table API or build something myself",
        "ts": "1484645669.000215"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "right - those utility methods are not complex - you can look at the changeset and do the same thing yourself in 0.6",
        "ts": "1484645709.000216"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "if you intent to port to v1 eventually, better to not use table api",
        "ts": "1484645737.000217"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "yeah, that\u2019s why I would like not to use them",
        "ts": "1484645766.000218"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "here\u2019s another question, could I store all my records in a map of objects in my chaincode? What\u2019s the disadvantage of not using the state?",
        "ts": "1484645794.000219"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "if you want the data persisted across transactions, you have to persist to state database",
        "ts": "1484645845.000220"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "ok I see",
        "ts": "1484645872.000221"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "just thinking about Ethereum smart contracts, where you can have local variables in your contract and they are also part of the world state",
        "ts": "1484645902.000222"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "I guess in Hyperledger the state is only what you put in the state database right?",
        "ts": "1484645922.000223"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "right",
        "ts": "1484645926.000224"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "ok I think I get it",
        "ts": "1484645986.000225"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "dave.enyeart [9:37 AM] \nif you want the data persisted across transactions, you have to persist to state database",
        "ts": "1484646026.000226"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "just one more question about it, what happens if I store my records in a map within the chaincode? When does it get wiped out?",
        "ts": "1484646051.000227"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "I guess whenever you re-init the chaincode?",
        "ts": "1484646063.000228"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "just thinking about having the record (with composite key) persisted in the state db and some indexes stored in my chaincode",
        "ts": "1484646097.000229"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "something like id -&gt; A B C D and then indexes like A B -&gt; D, A C -&gt; D, B C -&gt; D etc",
        "ts": "1484646176.000230"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "what do you mean by \u2018stored in my chaincode\u2019?  if it is not persisted, it would be local to the transaction, and would get wiped out when the tran ends.",
        "ts": "1484646236.000231"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "stored in my chaincode = a map declared in my chaincode class and populated on init()",
        "ts": "1484646282.000232"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "sorry scrap the last part, I just mean a local class variable in my chaincode class",
        "ts": "1484646326.000233"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "items can be added to the map with every invoke()",
        "ts": "1484646352.000234"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "if the peer gets restarted you would lose that right",
        "ts": "1484646380.000235"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "that was my question",
        "ts": "1484646428.000236"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "so whenever I restart the chaincode, I would have to re-populate the indexes",
        "ts": "1484646446.000237"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "yes, but you are not in control of that if the peer restarts right",
        "ts": "1484646488.000238"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "I need to ask another question here: does init() get called when the peer start?",
        "ts": "1484646556.000239"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "I guess in dev mode, whenever you start\/restart the peer, you\u2019ll have to restart the chaincode too, which will then require a new deploy, thus a init() invocation",
        "ts": "1484646584.000240"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "no, only on chaincode deploy - intent is to populate initial state (persisted)",
        "ts": "1484646586.000241"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "so, when the peer restarts, do I need to redeploy the chaincode?",
        "ts": "1484646670.000242"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "I guess the answer is no, right?",
        "ts": "1484646678.000243"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "no need to redeploy",
        "ts": "1484646702.000244"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "and there\u2019s no way to detect a peer restart from within the chaincode right?",
        "ts": "1484646728.000245"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "the chaincode itself is persisted as state",
        "ts": "1484646728.000246"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "right",
        "ts": "1484646734.000247"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "ok so everything would have to be stored in the state",
        "ts": "1484646750.000248"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "which is only a map&lt;String, String&gt; right?",
        "ts": "1484646760.000249"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "yes",
        "ts": "1484646764.000250"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "actually String, []byte",
        "ts": "1484646799.000251"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "ok I think I get the picture now",
        "ts": "1484646890.000252"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "I may go with composite keys and query only for A, or AB, or ABC then",
        "edited": {
            "user": "U195M30MD",
            "ts": "1484646916.000000"
        },
        "ts": "1484646913.000253"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "thanks a lot <@U1KFCPFQA>",
        "ts": "1484646944.000255"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "my pleasure",
        "ts": "1484646964.000256"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "I guess with v1.0 the state will be stored in CouchDB which will allow to query for partial text right?",
        "ts": "1484647046.000257"
    },
    {
        "type": "message",
        "user": "U195M30MD",
        "text": "so no need for composite keys or stuff like that?",
        "ts": "1484647056.000258"
    },
    {
        "type": "message",
        "user": "U12452RAP",
        "text": "<@U0Z541B3P> about <https:\/\/jira.hyperledger.org\/browse\/FAB-1187>",
        "ts": "1484714913.000259"
    },
    {
        "type": "message",
        "user": "U12452RAP",
        "text": "could you describe more detail",
        "ts": "1484714929.000260"
    },
    {
        "type": "message",
        "user": "U12452RAP",
        "text": "such as why couchDB cannot support",
        "ts": "1484714948.000261"
    },
    {
        "type": "message",
        "user": "U12452RAP",
        "text": "many thanks",
        "ts": "1484714952.000262"
    },
    {
        "type": "message",
        "user": "U0Z541B3P",
        "text": "<@U12452RAP> - not specific about couch - in general when providing support for rich queries, for supporting RYW phenomenon in transactions, a query engine needs to operate the committed data + delta caused by the previous writes of a transaction. For instance, in two phase locking in rdbms, a transaction would lock a page and further queries in the transaction would consider the modified page. Now, for couch - as of now, the transaction mgmt is implemented on top of couch and couch query engine would have no clue about the changes caused by a tran.",
        "ts": "1484715610.000263"
    },
    {
        "type": "message",
        "user": "U12452RAP",
        "text": ":ok_hand:need some time to understand",
        "ts": "1484716215.000264"
    },
    {
        "type": "message",
        "user": "U12452RAP",
        "text": "thanks",
        "ts": "1484716223.000265"
    }
]