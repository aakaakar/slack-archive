[
    {
        "user": "U17CZFXGU",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U17CZFXGU|plucena> has joined the channel",
        "ts": "1462891093.000009"
    },
    {
        "user": "U0KPFAZNF",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U0KPFAZNF|ghaskins> has joined the channel",
        "ts": "1462892074.000010"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "<@U0ULK2JPP>: <@U0KPFAZNF> can we discuss here your thoughts on the events support, since I\u2019m told you guys are working on this? i think it\u2019s a given that businesses would like to be notified of critical events like when particular transactions, or types of transactions, get validated and committed to the ledger (gets included in a new block). maybe related actions needs to be taken as part of the internal enterprise business process (triggering a BPM process?)",
        "ts": "1462906218.000011"
    },
    {
        "user": "U0ULK2JPP",
        "inviter": "U13TWBRBL",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U0ULK2JPP|muralisr> has joined the channel",
        "ts": "1462906226.000012"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "have this been written down somewhere? I see a few requirements: 1) right now there\u2019s only events for new blocks, will i believe able to figure out which transactions of my interest (and am allowed access to inspect) are included? 2) should the fabric provide reliable messaging via a queue so a client won\u2019t miss any events if it\u2019s gone offline for whatever reason, or would that be considered the client\u2019s responsibility?",
        "ts": "1462906452.000013"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U13TWBRBL>: you mean \u201ccustom events\u201d (\u201cchaincode events\u201d)",
        "ts": "1462906560.000014"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U0KQ9QKH6> and I are looking at it",
        "ts": "1462906587.000015"
    },
    {
        "user": "U0KQ9QKH6",
        "inviter": "U0ULK2JPP",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U0KQ9QKH6|pmullaney> has joined the channel",
        "ts": "1462906605.000016"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "i meant event delivery in general, even for system events, like the block event, I think enterprise clients would like to have the fabric support some level of reliable messaging instead of getting ephemeral events",
        "ts": "1462906695.000017"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "right",
        "ts": "1462906751.000018"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "no we were only focusing on custom events",
        "ts": "1462906762.000019"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "so is there plan to have an event queue for custom events?",
        "ts": "1462906818.000020"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "no. we don\u2019t want to give any special treatment for custom events (in general)\u2026. which brings back your question about event delivery in general",
        "ts": "1462906884.000021"
    },
    {
        "user": "U0YNLG611",
        "inviter": "U13TWBRBL",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U0YNLG611|mccox> has joined the channel",
        "ts": "1462906906.000022"
    },
    {
        "user": "U14APLT0C",
        "inviter": "U13TWBRBL",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U14APLT0C|ijmitch> has joined the channel",
        "ts": "1462906907.000023"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "yep",
        "ts": "1462906925.000024"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "if I understood the direction of your question correctly, things such as persistence of events or guranteed delivery are not built into the system",
        "edited": {
            "user": "U0ULK2JPP",
            "ts": "1462906990.000000"
        },
        "ts": "1462906927.000025"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "right, that seems to be the case from my understanding as well",
        "ts": "1462906950.000026"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "pluses and minus to building such things into the fabric vs loosely coupling them via adapters",
        "ts": "1462907134.000028"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U0YNLG611>: <@U14APLT0C> <@U13TWBRBL>  \u2026 your thoughts please ?",
        "ts": "1462907206.000029"
    },
    {
        "type": "message",
        "user": "U0KQ9QKH6",
        "text": "initially were looking at basic event delivery and generation for all events, custom and system, the ability for clients to register for events with filtering",
        "ts": "1462907291.000030"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "i would think given the distributed nature of a kafka cluster, it could work well with a hyperledger network, basically you have multiple replicas each local to a VP node, and have kafka manage the replication throughout the network",
        "ts": "1462907386.000031"
    },
    {
        "type": "message",
        "user": "U0KQ9QKH6",
        "text": "after this is in place, we could implement such that an NVP(or multiple) could offload the registration and delivery - perhaps even implement persistence and reliability",
        "ts": "1462907433.000032"
    },
    {
        "type": "message",
        "user": "U0KQ9QKH6",
        "text": "<@U13TWBRBL>: kafka would be interesting in that second step",
        "ts": "1462907492.000033"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "yep\u2026 I\u2019d start with the adapter approach to build that. And as we need support in the system build it as we go along",
        "edited": {
            "user": "U0ULK2JPP",
            "ts": "1462907526.000000"
        },
        "ts": "1462907495.000034"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "+1 for kafka in any form",
        "ts": "1462907514.000035"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U13TWBRBL>: we could even create an adapter immediately to play with kafka integration",
        "ts": "1462907552.000037"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "is the adapter piece described or coded up somewhere?",
        "ts": "1462907587.000038"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "yes",
        "ts": "1462907593.000039"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "its in a simple test case",
        "ts": "1462907601.000040"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "and also in a recent checkin",
        "ts": "1462907606.000041"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<http:\/\/github.com\/hyperledger\/fabric\/examples\/events\/block-listener|github.com\/hyperledger\/fabric\/examples\/events\/block-listener>",
        "ts": "1462907661.000042"
    },
    {
        "type": "message",
        "user": "U14APLT0C",
        "text": "I\u2019m still attracted by a symmetry between submitting transactions and listening for transactions - at least at the business application level\u2026. and being able to \u2018de-block\u2019 transactions makes that component quite a clever and privileged thing",
        "ts": "1462907889.000043"
    },
    {
        "type": "message",
        "user": "U14APLT0C",
        "text": "but something we could likely build using the block events from the fabric",
        "ts": "1462907970.000044"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "so that sounds close to what we have .. provide the building blocks for writing event driven applications",
        "ts": "1462908184.000045"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "for block \/ transaction events, you really don't need a queue - you already have the ledger being stored on the peer.  blocks have sequential numbering and if you crash and come back up, you'll realize that you are missing blocks.  Putting the onus of persistent messaging on the peer seems like overkill in this case.  Now perhaps we need to have a better \"range\" query to retrieve blocks you missed, but I think that is a good thing to have in any case",
        "ts": "1462909184.000046"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "custom events could perhaps be treated as any other type of transaction as well and follow a similar architectural path",
        "ts": "1462909273.000047"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "<@U0PB67X4K>: what happens to custom events?",
        "ts": "1462909504.000048"
    },
    {
        "type": "message",
        "user": "U0KQ9QKH6",
        "text": "our goal is to treat them the same architecturally",
        "ts": "1462909505.000049"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "i guess custom events need to be re-constructed from the transactions?",
        "ts": "1462909565.000050"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "a custom event = transaction basically",
        "ts": "1462909591.000051"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "so createEvent() could be executetrans under the covers",
        "edited": {
            "user": "U0PB67X4K",
            "ts": "1462909654.000000"
        },
        "ts": "1462909619.000052"
    },
    {
        "type": "message",
        "user": "U0KQ9QKH6",
        "text": "generated as a result of a transaction, no?",
        "ts": "1462909623.000053"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "if we are smart, we could include events as a transaction type \/ output in committed blocks",
        "ts": "1462909708.000055"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "so chaincode executes, and when committed event would be emitted but would actually be included in the block with the transaction (or something like that)",
        "ts": "1462909753.000056"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "that got me thinking: what\u2019s the definition of a \u201ccustom event\u201d, and what scenarios are we trying to tackle with that?",
        "ts": "1462909771.000057"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "I think of it as transaction processing metadata you want to broadcast",
        "ts": "1462909800.000058"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "ok",
        "ts": "1462909809.000059"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "but i think other people might have more grandiose ideas.  :simple_smile:",
        "ts": "1462909836.000060"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "but as I say, I am a simple man",
        "ts": "1462909867.000061",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U13TWBRBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "me too, always looking for the simplest solution to the problem at hand :wink:",
        "ts": "1462909919.000062"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "it might be helpful if someone provided an example of chaincode where they want to emit a custom event and explained how they want to use it",
        "ts": "1462909985.000063"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "so i think your idea is similar to Kafka\u2019s philosophy: the server\u2019s responsibility is providing the event log, the onus is on the client how to handle offset etc.",
        "ts": "1462910003.000064"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "<@U13TWBRBL>:  you know too many of my secrets",
        "ts": "1462910021.000065"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "Tibco RV used to do the same thing",
        "edited": {
            "user": "U0PB67X4K",
            "ts": "1462910057.000000"
        },
        "ts": "1462910046.000066"
    },
    {
        "type": "message",
        "user": "U13TWBRBL",
        "text": "<@U0ULK2JPP>: <@U0KQ9QKH6> do you have exemplary scenarios for custom events?",
        "ts": "1462910215.000068"
    },
    {
        "type": "message",
        "user": "U0KQ9QKH6",
        "text": "so, a chaincode may want to indicate a threshold of some kind has been exceeded and an action must be taken",
        "ts": "1462910426.000069"
    },
    {
        "type": "message",
        "user": "U0KQ9QKH6",
        "text": "many of our use cases can fall into that scenario, the data that the event may carry might be slightly different in different cases",
        "ts": "1462910488.000070"
    },
    {
        "type": "message",
        "user": "U0KQ9QKH6",
        "text": "these next examples may not fall under custom events but we would like to clients to be able to easily determine when certain transaction have been committed for serialization purposes",
        "ts": "1462910591.000071"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<!here|@here> catching up :simple_smile: \u2026 and this from <@U0PB67X4K> caught the eye \"I think of it as transaction processing metadata you want to broadcast\"",
        "ts": "1462914147.000072"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "I think of it like that too\u2026 with the addition \u201cjust like other transaction data it is desirable that events are satisfy transaction properties such as immutably stored, deterministic (same event on all peer) etc\"",
        "ts": "1462914234.000073"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "this means that we not only broadcast but also store",
        "ts": "1462914246.000074"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "this excludes events such as transient events, events not part of a transaction scope (\u201cautonomous events\u201d) etc.. it could be restrictive (it woud be nice for a chaincode to wakeup and send a timer event but we cannot do that in this model) but at least it gets us started simply and more importantly make sure we don\u2019t break rules",
        "ts": "1462914587.000075"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "any disagreements in any of the above ?",
        "ts": "1462914660.000076"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "just saw this <@U0PB67X4K> \"so chaincode executes, and when committed event would be emitted but would actually be included in the block with the transaction (or something like that)\u201d\u2026 so all that has been said :simple_smile:",
        "ts": "1462914916.000077"
    },
    {
        "type": "message",
        "user": "U0XRC0KLH",
        "text": "<@U0ULK2JPP> <@U0PB67X4K> guys, you've looked at that spec for events, hes?",
        "ts": "1462919138.000078"
    },
    {
        "type": "message",
        "user": "U0XRC0KLH",
        "text": "yes?",
        "ts": "1462919139.000079"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "hey <@U0XRC0KLH> \u2026 vaguely remember",
        "ts": "1462919230.000080"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "handy link ?",
        "ts": "1462919235.000081"
    },
    {
        "type": "message",
        "user": "U0XRC0KLH",
        "text": "uh .... not anymore *grin*",
        "ts": "1462919243.000082"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "that\u2019s what I thought",
        "ts": "1462919249.000083"
    },
    {
        "type": "message",
        "user": "U0XRC0KLH",
        "text": "but it should be in your email someplace",
        "ts": "1462919251.000084"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "ok",
        "ts": "1462919255.000085"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "will look",
        "ts": "1462919257.000086"
    }
]