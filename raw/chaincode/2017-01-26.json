[
    {
        "type": "message",
        "user": "U3SCKQB4P",
        "text": "I seriously need help and if any body can help.\n \nI downloaded the Docker images supported by IBM 0.6 one as you mentioned.\n \nThis does not work when pbft enabled on 4 nodes and all these nodes are on different cloud (AWS,RACKSPACE,BLUEBOX and SOFTLAYER) where i am making Softlayer as root node.\n \nChaincode gets deployed but then not able to query it says -:\n \n{\n  \"jsonrpc\": \"2.0\",\n  \"error\": {\n    \"code\": -32003,\n    \"message\": \"Query failure\",\n    \"data\": \"Error when querying chaincode: Error:Failed to launch chaincode spec(Could not get deployment transaction for de67a47261ab91c0e012d770f59ac23b82a247e5b9a44a1632034fc974df925afc2c588682ac693d9365576c6be516fb44362f05cc815949a8a0e3d8b61d91ac - LedgerError - ResourceNotFound: ledger: resource not found)\"\n  },\n  \"id\": 5\n}\n \nHas any one tried on realy 4 Nodes on different machine ?",
        "ts": "1485423080.001330"
    },
    {
        "type": "message",
        "user": "U3SCKQB4P",
        "text": "This works on NOOPS but not PBFT",
        "ts": "1485423139.001331"
    },
    {
        "type": "message",
        "user": "U0P1VU0QG",
        "text": "hey <@U3BSMKS21> : it is true that in v0.6, the error that you might expect from the invoke method signature will effectively not be populated...it is a known limitation that is being addressed in v1.0...it is also true with the actual byte[] returned by the invoke method...it won't work either: You will just get the transaction hash, regardless of it being actually fully validated\/committed to the chain. If you do want to get going and can't wait for v1.0, I would suggest leveraging the Event (SetEvent method) and using the EventHub within hfc to consume potential outcomes of the invoke (being success or failure)...it is not ideal, but that's possibly one way for you to do what you are trying to do...I guess",
        "ts": "1485423223.001332"
    },
    {
        "type": "message",
        "user": "U3BSMKS21",
        "text": "hey <@U0P1VU0QG>  thx alot. thats what i expected. but thanks for the answer",
        "ts": "1485425075.001333"
    },
    {
        "type": "message",
        "user": "U3BSMKS21",
        "text": "i think it would also be possible to call a query after certain invokes to somehow fake an invoke return",
        "ts": "1485425095.001334",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0P1VU0QG"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U3WM9K85R",
        "text": "<@U3WM9K85R|mbaizan> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1485429180.001335"
    },
    {
        "user": "U3WQGBA2E",
        "text": "<@U3WQGBA2E|srm> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1485434548.001336"
    },
    {
        "type": "message",
        "user": "U0P2GSA8Z",
        "text": "<@U0ULK2JPP> <@U0PB67X4K> I was glad to see Nick's demo on multichannel unfortunately it doesn't work for me and I get a weird error",
        "ts": "1485441594.001337"
    },
    {
        "type": "message",
        "user": "U0P2GSA8Z",
        "text": "it seems to create the channel all right",
        "ts": "1485441630.001338"
    },
    {
        "type": "message",
        "user": "U0P2GSA8Z",
        "text": "but when I try to join I get this:",
        "ts": "1485441638.001339"
    },
    {
        "type": "message",
        "user": "U0P2GSA8Z",
        "text": "...\n2017-01-26 14:13:41.202 UTC [protoutils] ValidateTransaction -&gt; INFO 1d7\u001b[0m ValidateTransactionEnvelope returns err %!s(&lt;nil&gt;)\n\u001b[36m2017-01-26 14:13:41.202 UTC [txvalidator] Validate -&gt; DEBU 1d8\u001b[0m Transaction is for chain %s alhc\n\u001b[36m2017-01-26 14:13:41.203 UTC [common\/configtx] beginHandlers -&gt; DEBU 1d9\u001b[0m Beginning new configuration for chain alhc\n\u001b[36m2017-01-26 14:13:41.203 UTC [common\/configtx] rollbackHandlers -&gt; DEBU 1da\u001b[0m Rolling back configuration for chain alhc\n\u001b[35m2017-01-26 14:13:41.203 UTC [txvalidator] Validate -&gt; CRIT 1db\u001b[0m Error validating configuration which passed initial validity checks: Config sequence number jumped from 0 to 0\n\u001b[36m2017-01-26 14:13:41.203 UTC [txvalidator] Validate -&gt; DEBU 1dc\u001b[0m END Block Validation\n\u001b[31m2017-01-26 14:13:41.203 UTC [GossipStateProvider] commitBlock -&gt; ERRO 1dd\u001b[0m Got error while committing(Error validating configuration which passed initial validity checks: Config sequence number jumped from 0 to 0)",
        "ts": "1485441668.001340"
    },
    {
        "type": "message",
        "user": "U0P2GSA8Z",
        "text": "\"Error validating configuration which passed initial validity checks: Config sequence number jumped from 0 to 0\" doesn't  look right",
        "ts": "1485441773.001341"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "hmm - well we are about to try this again around 12 noon EST - hopefully it's all working",
        "ts": "1485445985.001342"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U0P2GSA8Z> that error has been there but (kinda hidden) and need to be looked at",
        "ts": "1485449729.001345"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "however it shoud not cause issues for deploy and invoke",
        "ts": "1485449745.001346"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "I think it DOES cause issues when you kill the peer and restart",
        "ts": "1485449761.001347"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U26T99AQ4> and <@U1HFNJB50> <@U0XPR4NP4>  ^^^ for your awareness. \u2026 we should try to get this fixed quickly",
        "ts": "1485449805.001348"
    },
    {
        "user": "U26T99AQ4",
        "inviter": "U0ULK2JPP",
        "text": "<@U26T99AQ4|aso> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1485449825.001349"
    },
    {
        "user": "U0XPR4NP4",
        "inviter": "U0ULK2JPP",
        "text": "<@U0XPR4NP4|jyellick> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1485449826.001350"
    },
    {
        "type": "message",
        "user": "U1HFNJB50",
        "text": "working to prepare patch",
        "edited": {
            "user": "U1HFNJB50",
            "ts": "1485449834.000000"
        },
        "ts": "1485449831.001351",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0ULK2JPP"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U1HFNJB50",
        "text": "<@U0ULK2JPP> will be pushed in a few moments",
        "ts": "1485449848.001353"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "thanks <@U1HFNJB50>",
        "ts": "1485449858.001354",
        "reactions": [
            {
                "name": "stuck_out_tongue_winking_eye",
                "users": [
                    "U1HFNJB50"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "also <@U0P2GSA8Z> one other thing struck me",
        "ts": "1485450504.001355"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "you would want to preface `CORE_PEER_MSPCONFIGPATH=\/opt\/gopath\/src\/github.com\/hyperledger\/fabric\/msp\/sampleconfig` to peer and CLI commands",
        "ts": "1485450525.001356"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "so `CORE_PEER_MSPCONFIGPATH=\/opt\/gopath\/src\/github.com\/hyperledger\/fabric\/msp\/sampleconfig peer node start \u2014peer-defaultchain=false`",
        "ts": "1485450551.001357"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "and",
        "ts": "1485450553.001358"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "`CORE_PEER_MSPCONFIGPATH=\/opt\/gopath\/src\/github.com\/hyperledger\/fabric\/msp\/sampleconfig peer chaincode deploy \u2026.`",
        "ts": "1485450569.001359"
    },
    {
        "type": "message",
        "user": "U0P2GSA8Z",
        "text": "Ok, thanks, I will look into that but joining the channel failed after that...",
        "ts": "1485452985.001360"
    },
    {
        "type": "message",
        "user": "U0P2GSA8Z",
        "text": "I didn't get the expected 200 response. I got no response code...",
        "ts": "1485453027.001361"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "```CORE_PEER_MSPCONFIGPATH=\/opt\/gopath\/src\/github.com\/hyperledger\/fabric\/msp\/sampleconfig peer channel create -c myc\nCORE_PEER_MSPCONFIGPATH=\/opt\/gopath\/src\/github.com\/hyperledger\/fabric\/msp\/sampleconfig peer node start --peer-defaultchain=false\nCORE_PEER_MSPCONFIGPATH=\/opt\/gopath\/src\/github.com\/hyperledger\/fabric\/msp\/sampleconfig peer channel join -b myc.block  \nCORE_PEER_MSPCONFIGPATH=\/opt\/gopath\/src\/github.com\/hyperledger\/fabric\/msp\/sampleconfig peer chaincode deploy -n mycc -C myc -p <http:\/\/github.com\/hyperledger\/fabric\/examples\/chaincode\/go\/chaincode_example02|github.com\/hyperledger\/fabric\/examples\/chaincode\/go\/chaincode_example02> -c '{\"Args\":[\"init\",\"a\",\"100\",\"b\",\"200\"]}'\nCORE_PEER_MSPCONFIGPATH=\/opt\/gopath\/src\/github.com\/hyperledger\/fabric\/msp\/sampleconfig peer chaincode query -n mycc -C myc -c '{\"Args\":[\"query\",\"a\"]}\u2019``` my little cheat sheet <@U0P2GSA8Z>",
        "edited": {
            "user": "U0ULK2JPP",
            "ts": "1485453219.000000"
        },
        "ts": "1485453159.001362"
    },
    {
        "type": "message",
        "user": "U12J2D15H",
        "text": "Can I do the network deployment of chaincodes in fabric 1.0 ?",
        "ts": "1485453877.001364"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U12J2D15H> 0.6 relied on fabric to get the chaincode and deploy.  In 1.0 the packaging is done in CLI and SDK (and <@U0KPFAZNF> was working on refining it even further I think\u2026) which are not \u201cpeer\u201d processes. so in a sense deployment is external already\u2026 now, can the CLI or SDK go out to network and get the chaincode before packaging ? They probably can\u2026 that path in CLI is there (the `peer chaincode deploy -p https:\/\/...` path) but I think is broken.",
        "ts": "1485454541.001365"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "(not sure if that answers the question\u2026 :slightly_smiling_face: )",
        "ts": "1485454555.001366"
    },
    {
        "type": "message",
        "user": "U0P2GSA8Z",
        "text": "Thanks <@U0ULK2JPP>!",
        "ts": "1485454836.001367"
    },
    {
        "type": "message",
        "user": "U0Y55KNG2",
        "text": "WOW ... I sure hope that the fairly recent change in the return signatures for Init and Invoke to \"pb.Response\" has bought us some seriously impressive features, because I have some pretty extensive refactoring ahead of me.",
        "ts": "1485454965.001368"
    },
    {
        "type": "message",
        "user": "U0P2GSA8Z",
        "text": "Why do you specify CORE_PEER_MSPCONFIGPATH on every command rather setting it once and for all in your env if it's always the same? ",
        "ts": "1485455002.001369"
    },
    {
        "type": "message",
        "user": "U1934J6RX",
        "text": "hello, I was hoping that someone could provide clarification regarding non-determinism described here (<https:\/\/console.ng.bluemix.net\/docs\/services\/blockchain\/nondeterministic.html>). Specifically, this sentence \"For example, do not run any query transactions in parallel with invoke transactions, because parallel queries could produce variance in the invocation values across nodes.\u201d Does this mean a client should not issue concurrent queries and invokes  ?",
        "ts": "1485455068.001370"
    },
    {
        "type": "message",
        "user": "U0Y55KNG2",
        "text": "<@U1934J6RX> You have to take into account the fact that the query will see only committed blocks, so if you tun queries against commits that are in progress, you will randomly get the before state or the after state, depending on race conditions and other timing issues. If you want the queries to be deterministic, you will want to ensure that a transaction is completed and committed before looking for its results.",
        "ts": "1485455181.001371"
    },
    {
        "type": "message",
        "user": "U1934J6RX",
        "text": "<@U0Y55KNG2> thank you. So your app that uses the client might be non-deterministic, but this wouldn\u2019t trigger non-determinism within the chain code and a failure in consensus, correct?",
        "ts": "1485455264.001372"
    },
    {
        "type": "message",
        "user": "U0Y55KNG2",
        "text": "if you write chaincode that depends on the results of a query to another chaincode, you can be burnt by timing issues and have each peer get a differing result. That will cause endorsers to return differing r\/w sets and thus will fail consensus.",
        "ts": "1485455329.001373"
    },
    {
        "type": "message",
        "user": "U0Y55KNG2",
        "text": "you need to know that the data is stable before depending on it",
        "ts": "1485455359.001374"
    },
    {
        "type": "message",
        "user": "U1934J6RX",
        "text": "OK. In this case, the chaincode does not call any other chaincode, but a client off chain issues concurrent queries and invokes. That wouldn\u2019t trigger consensus failure in the chaincode per se, would it? Thanks again <@U0Y55KNG2>",
        "ts": "1485455450.001375"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U0P2GSA8Z> `Why do you specify CORE_PEER_MSPCONFIGPATH on every command rather setting it once and for all in your env if it's always the same?` working on that",
        "ts": "1485455527.001376"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "^^^ trying to wean away from \u201csampleconfig\u201d as the default now that bootstrap is progressing caused that inconvenience.",
        "ts": "1485455589.001377"
    },
    {
        "type": "message",
        "user": "U0Y55KNG2",
        "text": "No ... but it might create logically inconsistent data in world state. If you are running a state machine in the client and you depend on seeing everything in the right order, and if you don't watch for events that guarantee that the data is stable (i.e. you see a transaction in a block event) then you could end up thinking you are sending the latest state where you are actually sending the previous state again ...",
        "ts": "1485455590.001378"
    },
    {
        "type": "message",
        "user": "U0P2GSA8Z",
        "text": "<@U0ULK2JPP> ok",
        "ts": "1485455625.001379"
    },
    {
        "type": "message",
        "user": "U3DKG7M54",
        "text": "<@U0Y55KNG2> - My understanding, this is coming from the MVCC mechanism used by Couch DB where a read-set getting constructed from multiple keys may not be from a single KV-Ledger snapshot if there is transaction commit getting processed by peer at the same time of query processing.",
        "ts": "1485459409.001380"
    },
    {
        "type": "message",
        "user": "U1934J6RX",
        "text": "Thanks again <@U0Y55KNG2> . a related question I had is the ordering of transactions within a block\u2014are they all applied in the same order across nodes?",
        "ts": "1485461130.001381"
    },
    {
        "type": "message",
        "user": "U0Y55KNG2",
        "text": "<@U1934J6RX> Yes, the ordering service ensures that all blocks are identical.",
        "ts": "1485461181.001382"
    },
    {
        "type": "message",
        "user": "U1934J6RX",
        "text": "and the transactions within an individual block are applied in the same order?",
        "ts": "1485461210.001383"
    },
    {
        "type": "message",
        "user": "U0Y55KNG2",
        "text": "<@U1934J6RX> Yes. Identical does not have any other interpretation :slightly_smiling_face: ... the ordering service creates what amounts to the block structure and that is passed to all committers. To my knowledge.",
        "ts": "1485461271.001384"
    },
    {
        "type": "message",
        "user": "U0Y55KNG2",
        "text": "<@U3DKG7M54> Well, if the peers are not able to agree on the world state snapshot level for the transaction, then the results will vary and consensus will fail. On the other hand, the creation of the next block in a chain is not done in parallel with other blocks (subchains can be done in parallel but my understanding is that each chain is processed serially for this very reason.) So that means that the chaincode that happens to be executing should be seeing a consistent world state level. No other chaincode can interfere on one chain (and if they start allowing that then good luck with consensus :-))",
        "ts": "1485461499.001385"
    },
    {
        "type": "message",
        "user": "U0Y55KNG2",
        "text": "<@U3DKG7M54> I suppose that the r\/w sets could be different if each endorser receives interleaved requests for the same asset keys from different clients. The state of each key will be different across peers. But assume that you can get the required number of endorsers to agree on a r\/w set, then you override the others and the orderers ensure that block x+1 is identical across peers.",
        "ts": "1485461749.001386"
    },
    {
        "type": "message",
        "user": "U0Y55KNG2",
        "text": "A well-designed system is not likely to do a lot of the interleaved writes thing ...",
        "ts": "1485461801.001387"
    },
    {
        "user": "U3X1M7VFD",
        "text": "<@U3X1M7VFD|youngbamboo> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1485465421.001388"
    },
    {
        "type": "message",
        "user": "U3X1M7VFD",
        "text": "Hi guys, I have a question. I'm trying to play the chaincode example based on the instruction.  After the command 'CORE_CHAINCODE_ID_NAME=mycc CORE_PEER_ADDRESS=0.0.0.0:7051 .\/chaincode_example02', I opened a new terminal and run the command 'peer chaincode deploy -n mycc -c '{\"Args\": [\"init\", \"a\",\"100\", \"b\", \"200\"]}''. There is error message said 'Error getting chaincode package bytes: Cannot generate hashcode from empty chaincode path'. I logged in the node by 'docker exec -it pbft_vp0_1 bash', there is no such file under \/opt\/gopath\/src\/github.com.  Could you help?",
        "ts": "1485465772.001389"
    },
    {
        "type": "message",
        "user": "U3X1M7VFD",
        "text": "Thanks.",
        "ts": "1485465774.001390"
    },
    {
        "type": "message",
        "user": "U0Y55KNG2",
        "text": "<@U3X1M7VFD> Did you start your peer in chaincodedev mode? Because it does not try to fetch the chaincode in that mode. Looks like you are trying to debug against a normal peer ...",
        "ts": "1485466064.001391"
    },
    {
        "type": "message",
        "user": "U3X1M7VFD",
        "text": "Oh I see. I will start in dev mode and try again. Thanks.",
        "ts": "1485466100.001392"
    },
    {
        "type": "message",
        "user": "U0Y55KNG2",
        "text": "cd $GOPATH\/src\/github.com\/hyperledger\/fabric\nmake peer\npeer node start --peer-chaincodedev",
        "ts": "1485466105.001393"
    },
    {
        "type": "message",
        "user": "U0Y55KNG2",
        "text": "Those are from the chaincode-setup doc ...",
        "ts": "1485466123.001394"
    },
    {
        "type": "message",
        "user": "U3X1M7VFD",
        "text": "Cool. Thanks.",
        "ts": "1485466208.001395"
    },
    {
        "user": "U3B52L21K",
        "text": "<@U3B52L21K|ty531> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1485479990.001398"
    },
    {
        "user": "U3X6RA34J",
        "inviter": "U0UHG4VP1",
        "text": "<@U3X6RA34J|archivebot> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1485489880.001399"
    },
    {
        "user": "U2UGBCT89",
        "text": "<@U2UGBCT89|thiru> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1485493153.001400"
    }
]