[
    {
        "user": "U1CTBUNEN",
        "text": "<@U1CTBUNEN|mart0nix> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1468918176.000006"
    },
    {
        "type": "message",
        "user": "U1CTBUNEN",
        "text": "hello",
        "ts": "1468918181.000007"
    },
    {
        "type": "message",
        "user": "U1CTBUNEN",
        "text": "I have a question regarding the car lease demo chaincode",
        "ts": "1468918192.000008"
    },
    {
        "type": "message",
        "user": "U1CTBUNEN",
        "text": "is anyone around who may be able to help out ?",
        "ts": "1468918198.000009"
    },
    {
        "type": "message",
        "user": "U1JB7QCBD",
        "text": "mart0nix: i think it's best to just ask the question and if someone sees it and they feel then can answer they will",
        "ts": "1468921399.000010"
    },
    {
        "type": "message",
        "user": "U1CTBUNEN",
        "text": "at some point there was vehicle_log.go chaincode which was storing history of the vehicles and the steps in their lifecycle",
        "ts": "1468921443.000011"
    },
    {
        "type": "message",
        "user": "U1CTBUNEN",
        "text": "that chaincode was removed a few weeks ago and I don't understand how I can retrieve the history of a vehicle with the current chaincode",
        "ts": "1468921476.000012"
    },
    {
        "user": "U19PSLZV1",
        "text": "<@U19PSLZV1|kanelai> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1468924325.000013"
    },
    {
        "type": "message",
        "user": "U19PSLZV1",
        "text": "hi",
        "ts": "1468924395.000014"
    },
    {
        "type": "message",
        "user": "U19PSLZV1",
        "text": "i have a question about the concept of chaincode execution. i have compiled a chaincode. as far as i know, the workflow of using a chaincode is as below:\n1. write it and compile it into an executable\n2. upload it somewhere and run it\n3. \u201cdeploy\u201d it (and the init function is called at this step)\n4. \u201cuse\u201d it (i can now call the invoke or query functions)\n\ni have a few questions:\n1. as the binary must be put somewhere to run, how is it related to the server running the peer? for ethereum, their smart contract code is really deployed to every blockchain node in the network, because the code are interpreted to some byte code format and uploaded to the blockchain. however, for fabric, the execution is done by the chaincode executable. so it must be put to servers manually. then how can we achieve the redundancy of having multiple peers when running chaincode?\n2. what does the \u201cdeploy\u201d action actually do? it is specific to the peer i run the \u201cdeploy\u201d action against, or it does something to the blockchain network globally? Thanks!",
        "edited": {
            "user": "U19PSLZV1",
            "ts": "1468929247.000000"
        },
        "ts": "1468924786.000015"
    },
    {
        "user": "U1STYFZK3",
        "text": "<@U1STYFZK3|thirumanoj> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1468933292.000018"
    },
    {
        "type": "message",
        "user": "U1STYFZK3",
        "text": "i have a chaincode deployed on all the nodes as a container. Now that i have updated some logic (another version) of same chaincode.. is there a way i can remove the chaincode deployed in hyperledger and redeploy the new chaincode ??",
        "ts": "1468933427.000019"
    },
    {
        "user": "U1GLPP8QN",
        "text": "<@U1GLPP8QN|deeflorian> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1468934418.000020"
    },
    {
        "type": "message",
        "user": "U1GLPP8QN",
        "text": "Hi!\n<@U19PSLZV1>: when you deploy a CC, you connect to a single peer (hence the core peer address parameter) that'll deploy the chaincode. Then that peer will automatically broadcast the CC as a message to the other peers. The deploy messages themselves will eventually end up getting handled in the core\/container module, which will in turn launch a docker container that'll host the CC. This is done by every peer when they receive the broadcasted message -- which means there is no need to run the CC manually at all, just make the CC accessible to the first peer, and the deploy action takes care of the rest.",
        "ts": "1468936222.000021"
    },
    {
        "type": "message",
        "user": "U1GLPP8QN",
        "text": "<@U1STYFZK3>: you'll need to remove the docker containers that are created for your previous chaincode (I don't think it's needed, but the peers themselves might have stored some info about them -- I have a script that removes the peers and the CCs too, that'll do the trick if the chaincode removal isn't enough -- also, if your peers aren't running in docker containers, the \/var\/hyperledger folder's contents should be cleaned).",
        "ts": "1468936660.000022"
    },
    {
        "type": "message",
        "user": "U1STYFZK3",
        "text": "<@U1GLPP8QN>. Tnx for the response. My four node peers are actual process running on virtual machines.  can you tell me.. what all things needs to be cleaned apart from the docker CC containers.",
        "ts": "1468936916.000023"
    },
    {
        "type": "message",
        "user": "U1STYFZK3",
        "text": "or can you share your script",
        "ts": "1468936943.000024"
    },
    {
        "type": "message",
        "subtype": "file_share",
        "text": "<@U1GLPP8QN|deeflorian> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/deeflorian\/F1T2TCT1N\/-.txt|Untitled> and commented: I use this as a cleaner... The docker parts are actually documented somewhere on the wiki.",
        "file": {
            "id": "F1T2TCT1N",
            "created": 1468937235,
            "timestamp": 1468937235,
            "name": "-.txt",
            "title": "Untitled",
            "mimetype": "text\/plain",
            "filetype": "text",
            "pretty_type": "Plain Text",
            "user": "U1GLPP8QN",
            "editable": true,
            "size": 254,
            "mode": "snippet",
            "is_external": false,
            "external_type": "",
            "is_public": true,
            "public_url_shared": false,
            "display_as_bot": false,
            "username": "",
            "url_private": "https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1T2TCT1N\/-.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "url_private_download": "https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1T2TCT1N\/download\/-.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "permalink": "https:\/\/hyperledgerproject.slack.com\/files\/deeflorian\/F1T2TCT1N\/-.txt",
            "permalink_public": "https:\/\/slack-files.com\/T0J024XGA-F1T2TCT1N-eeaa84efa3",
            "edit_link": "https:\/\/hyperledgerproject.slack.com\/files\/deeflorian\/F1T2TCT1N\/-.txt\/edit",
            "preview": "docker rm $(docker ps -a -q)\r\ndocker rmi $(docker images | grep none | tr -s \" \" | cut -f 3 -d \" \")\r\ndocker rmi $(docker images | grep dev | cut -f 1 -d \" \")\r\ncd \/var\/hyperledger\r\nrm -r -f .\/*\r",
            "preview_highlight": "<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>docker rm $(docker ps -a -q)<\/pre><\/div>\n<div><pre>docker rmi $(docker images | grep none | tr -s &quot; &quot; | cut -f 3 -d &quot; &quot;)<\/pre><\/div>\n<div><pre>docker rmi $(docker images | grep dev | cut -f 1 -d &quot; &quot;)<\/pre><\/div>\n<div><pre>cd \/var\/hyperledger<\/pre><\/div>\n<div><pre>rm -r -f .\/*<\/pre><\/div>\n<div><pre><\/pre><\/div>\n<\/div>\n<\/div>\n",
            "lines": 7,
            "lines_more": 2,
            "preview_is_truncated": false,
            "channels": [
                "C19ABCKPW"
            ],
            "groups": [],
            "ims": [],
            "comments_count": 1,
            "initial_comment": {
                "id": "Fc1T1CT0EP",
                "created": 1468937235,
                "timestamp": 1468937235,
                "user": "U1GLPP8QN",
                "is_intro": true,
                "comment": "I use this as a cleaner... The docker parts are actually documented somewhere on the wiki.",
                "channel": ""
            }
        },
        "user": "U1GLPP8QN",
        "upload": true,
        "display_as_bot": false,
        "username": "<@U1GLPP8QN|deeflorian>",
        "bot_id": null,
        "ts": "1468937235.000025"
    },
    {
        "type": "message",
        "user": "U19PSLZV1",
        "text": "<@U1GLPP8QN>: oh i\u2019m confused. recently i just have a lesson given by ibm staff, and they demonstrated how a simple CC is created and used. they first write some code base on shim. then `go build` it. what i get is a binary executable file. then i have to set `CORE_CHAINCODE_ID_NAME` and `CORE_PEER_ADDRESS` and execute it. next we use `peer chaincode deploy` and specify the CC name using `-n` arg.\nso, what i get so far is, the binary that i executed is the one who actually does run the CC logic (though i do not quite understand how it relates to docker and who actually spawns the VM). and the `deploy` step is simply used to instantiate the CC instance by calling the \u201cconstructor\u201d (i don\u2019t know how to call it, but i think you know what i mean).\nall these seems not quite align with your description. could you please elaborate more?",
        "edited": {
            "user": "U19PSLZV1",
            "ts": "1468940724.000000"
        },
        "ts": "1468937601.000026"
    },
    {
        "user": "U1T2X90HG",
        "text": "<@U1T2X90HG|shishirvd> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1468938259.000027"
    },
    {
        "type": "message",
        "user": "U1GLPP8QN",
        "text": "<@U19PSLZV1>: Ah... I'll be guessing from here on, but isn't that only used to develop and test CCs? I think actual deployment to a network of peers should be done through a `peer chaincode deploy` with a `-p` argument that specifies the binary location itself, and a `-c` argument that has the 'constructor'?",
        "edited": {
            "user": "U1GLPP8QN",
            "ts": "1468938959.000000"
        },
        "ts": "1468938914.000028"
    },
    {
        "type": "message",
        "user": "U19PSLZV1",
        "text": "<@U1GLPP8QN>: you\u2019ve made a good point! because that\u2019s a tutorial lesson so that procedure may not be the same as that in prod. i\u2019ll check with the teachers. thanks!",
        "ts": "1468941022.000033"
    },
    {
        "user": "U1T765UQ0",
        "text": "<@U1T765UQ0|riz> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1468959482.000034"
    },
    {
        "user": "U1T7KJH9P",
        "text": "<@U1T7KJH9P|kkoiwai> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1468959628.000035"
    },
    {
        "user": "U1TA5FDU7",
        "text": "<@U1TA5FDU7|warm3snow> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1468986938.000036"
    }
]