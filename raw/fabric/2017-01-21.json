[
    {
        "user": "U2UNR91RB",
        "text": "<@U2UNR91RB|bmatsuo> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1484992209.002435"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "<@U0ULK2JPP> <@U0KM61BCP> trying to wrap my head around the changes regarding the old Query() interface in master",
        "ts": "1485002548.002436"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "are queries basically gone now?",
        "ts": "1485002588.002437"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "or is there still a notion of a certain mode in which invokes are RO?",
        "ts": "1485002606.002438"
    },
    {
        "type": "message",
        "user": "U0YJUECE8",
        "text": "<@U0KPFAZNF> in v1.0 explicit queries are no longer necessary.   For a query you would send a TransactionProposal,  and within the TransactionProposalResponse you will get your ReadSet.  If you're satisfied with the results, you're done....since you don't want to update anything, you just call it a day and you don't need to send an endorsement to the Orderer.     I suppose for purposes of a Query you could even invoke a function that might even perform updates, since, if you don't send along the Endorsement to the orderer,  those changes won't ever be committed.",
        "ts": "1485007558.002439"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "<@U0YJUECE8> ty, this makes sense",
        "ts": "1485007587.002440",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0YJUECE8"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U0P2GSA8Z",
        "text": "<@U0YJUECE8> although I understand the logic the resulting API isn't as intuitive",
        "ts": "1485007951.002441"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "<@U0KPFAZNF>  - it also allows you to do some strong reads as well.   but I am pretty sure that we also want to add pass-thru queries on the peer itself as well",
        "ts": "1485007972.002442"
    },
    {
        "type": "message",
        "user": "U0P2GSA8Z",
        "text": "we're going to have to keep explaining that to query you make a proposal you never commit",
        "ts": "1485007977.002443"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "that all makes sense, I was mostly trying to plan how I would update the chaintool schema\/code-generator",
        "ts": "1485008016.002444"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "in v0.6 and earlier, transactions\/queries were first class in the grammar",
        "ts": "1485008040.002445"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "I'd wait a bit on that but I hear ya  :wink:",
        "ts": "1485008050.002446"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "wait a bit on what?",
        "ts": "1485008060.002447"
    },
    {
        "type": "message",
        "user": "U0P2GSA8Z",
        "text": "I wonder whether you shouldn't have query as a synonym, just to make the interface more user friendly",
        "ts": "1485008076.002448"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "until everything is finalized from an endorser API \/ chaincode perspective",
        "ts": "1485008079.002449"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "although I think the chaincode should stay mostly the same t this point",
        "ts": "1485008107.002450"
    },
    {
        "type": "message",
        "user": "U0YJUECE8",
        "text": "<@U0P2GSA8Z> well, when you do an Invoke you have to submit a function name as well so you can just code function names that make it evident it's a query ... just think of invoke as invoking a transaction, some will be read-only, some will perform updates.... just my 2 cents",
        "ts": "1485008124.002451"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "<@U0P2GSA8Z> I am unclear if you are advocating to keep or remove the query notion in the chaintool grammar?",
        "ts": "1485008135.002452"
    },
    {
        "type": "message",
        "user": "U0P2GSA8Z",
        "text": "I'm advocating to add it back :slightly_smiling_face:",
        "ts": "1485008164.002453"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "heh...im not sure it works well with the current fabric though",
        "ts": "1485008199.002456"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "Im referring specifically to this: <https:\/\/github.com\/hyperledger\/fabric-chaintool#definition>",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "hyperledger\/fabric-chaintool",
                "title_link": "https:\/\/github.com\/hyperledger\/fabric-chaintool#definition",
                "text": "fabric-chaintool - Chaintool - Chaincode Tooling for <https:\/\/github.com\/hyperledger\/fabric>",
                "fallback": "GitHub: hyperledger\/fabric-chaintool",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400",
                "from_url": "https:\/\/github.com\/hyperledger\/fabric-chaintool#definition",
                "thumb_width": 142,
                "thumb_height": 142,
                "service_icon": "https:\/\/github.com\/apple-touch-icon.png",
                "id": 1
            }
        ],
        "ts": "1485008214.002457"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "in the code I am working on now, I am collapsing transactions\/queries into one \"functions\" block",
        "ts": "1485008248.002459"
    },
    {
        "type": "message",
        "user": "U0P2GSA8Z",
        "text": "I see",
        "ts": "1485008307.002460"
    },
    {
        "type": "message",
        "subtype": "file_share",
        "text": "<@U0KPFAZNF|ghaskins> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/ghaskins\/F3UJ58AE7\/-.txt|Untitled> and commented: It would look like this now",
        "file": {
            "id": "F3UJ58AE7",
            "created": 1485008339,
            "timestamp": 1485008339,
            "name": "-.txt",
            "title": "Untitled",
            "mimetype": "text\/plain",
            "filetype": "text",
            "pretty_type": "Plain Text",
            "user": "U0KPFAZNF",
            "editable": true,
            "size": 152,
            "mode": "snippet",
            "is_external": false,
            "external_type": "",
            "is_public": true,
            "public_url_shared": false,
            "display_as_bot": false,
            "username": "",
            "url_private": "https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3UJ58AE7\/-.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "url_private_download": "https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3UJ58AE7\/download\/-.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "permalink": "https:\/\/hyperledgerproject.slack.com\/files\/ghaskins\/F3UJ58AE7\/-.txt",
            "permalink_public": "https:\/\/slack-files.com\/T0J024XGA-F3UJ58AE7-532222b711",
            "edit_link": "https:\/\/hyperledgerproject.slack.com\/files\/ghaskins\/F3UJ58AE7\/-.txt\/edit",
            "preview": "functions {\r\n        void MakePayment(PaymentParams) = 1;\r\n        void DeleteAccount(Entity) = 2;\r\n        BalanceResult CheckBalance(Entity) = 3;\r\n}\r",
            "preview_highlight": "<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>functions {<\/pre><\/div>\n<div><pre>        void MakePayment(PaymentParams) = 1;<\/pre><\/div>\n<div><pre>        void DeleteAccount(Entity) = 2;<\/pre><\/div>\n<div><pre>        BalanceResult CheckBalance(Entity) = 3;<\/pre><\/div>\n<div><pre>}<\/pre><\/div>\n<div><pre><\/pre><\/div>\n<\/div>\n<\/div>\n",
            "lines": 6,
            "lines_more": 1,
            "preview_is_truncated": false,
            "channels": [
                "C0Y4PEU22"
            ],
            "groups": [],
            "ims": [],
            "comments_count": 1,
            "initial_comment": {
                "id": "Fc3UNRB40M",
                "created": 1485008339,
                "timestamp": 1485008339,
                "user": "U0KPFAZNF",
                "is_intro": true,
                "comment": "It would look like this now",
                "channel": ""
            }
        },
        "user": "U0KPFAZNF",
        "upload": true,
        "display_as_bot": false,
        "username": "<@U0KPFAZNF|ghaskins>",
        "bot_id": null,
        "ts": "1485008340.002461"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "from a function-dispatch perspective, it probably doesnt make sense to delineate them in the grammar any more",
        "ts": "1485008387.002462"
    },
    {
        "type": "message",
        "user": "U0P2GSA8Z",
        "text": "I agree that at this level this actually simplifies the interface",
        "ts": "1485008601.002463"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "To add to the discussion (and to <@U0YJUECE8> note) \u2026 (1) note that we could potentially send  a proposal to multiple peers AND have endorserments from them to make sure they all say the same thing. (2) the \u201cquery\u201d CLI was just a convenience method as a synonym for \u201cthe invoke that won\u2019t be sent as transaction\u201d \u2026 ie, the peer itself doesn\u2019t care what the SDK \/ CLI \/ User does with it",
        "edited": {
            "user": "U0ULK2JPP",
            "ts": "1485013641.000000"
        },
        "ts": "1485013443.002466"
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "sending a proposal to multiple peers sounds good but how do you know about them?",
        "ts": "1485014145.002469"
    },
    {
        "type": "message",
        "user": "U0YJUECE8",
        "text": "<@U0ZJZBJLF>  as of two days ago in discussions in <#C0YPYBVJM|fabric-dev> <@U0ULK2JPP> stated that the CLI does not support a single request being sent to multiple endorsers, so at this time you'd have to send multiple requests to each endorser that interests you.   <@U1KFBBWG1> then said that the node SDK does support multiple endorsers so perhaps he would be willing to share more details.   As to how the client or SDK would know about them, I assume this would be a configuration exercise.",
        "ts": "1485015247.002472"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "right, `sending a proposal to multiple peers sounds good but how do you know about them?` we have to enhace the CLI to take a list of peers\u2026 I believe there\u2019s already support in node SDK for this but do double-check <@U0ZJZBJLF>",
        "edited": {
            "user": "U0ULK2JPP",
            "ts": "1485015728.000000"
        },
        "ts": "1485015717.002473"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "(for some reason I keep hitting enter before a name is completed today\u2026 wonder if theres some subtle change in slack interface my muscle memory is tripping upon)",
        "edited": {
            "user": "U0ULK2JPP",
            "ts": "1485015805.000000"
        },
        "ts": "1485015789.002475",
        "reactions": [
            {
                "name": "laughing",
                "users": [
                    "U0ZJZBJLF"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U0ZJZBJLF",
        "text": "But does this approach scale? The user needs to remember which peers are in which channel",
        "ts": "1485015902.002477"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "well, its probably a combination of user\/application \u2026 the \u201ccarasset\u201d application knows to send a \u201cnew car \u201c proposal to DMV and Insurance peers",
        "ts": "1485016400.002478"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "but yes, in other applications \u201cwho are the peers to send to ?\u201d may not be easy\/obvious",
        "ts": "1485016444.002479"
    },
    {
        "user": "U3UPNQL3E",
        "text": "<@U3UPNQL3E|bcq> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1485028139.002480"
    },
    {
        "type": "message",
        "user": "U3UPNQL3E",
        "text": "from <http:\/\/hyperledger-fabric.readthedocs.io\/en\/v0.6\/starter\/fabric-starter-kit\/#further-exploration>\n&gt; The setup uses Docker to provide a controlled environment with all the necessary Hyperledger fabric components to support a Node.js application built with the fabric\u2019s Node.js SDK, and chaincode written in Go.\n1. what is the difference between the application and the chain code?\n2. is it possible to get the same functionality of both the node.js app and the go chaincode using the REST API for the fabric network?",
        "edited": {
            "user": "U3UPNQL3E",
            "ts": "1485032106.000000"
        },
        "ts": "1485031812.002483"
    },
    {
        "type": "message",
        "user": "U0YJUECE8",
        "text": "<@U3UPNQL3E> for #1,  in this case, the application is your front-end logic, typically, but not necessarily, including a GUI, that will call the APIs provided by the Node.js SDK.  In turn, the implementation of the SDK APIs will deploy or invoke chaincode, also known as smart contracts,  which is where CRUD (Create\/Read\/Update\/Delete) operations on the state takes place, and the 'CUD' part of CRUD, in the \"happy path\", causes immutable transactions to be saved on the blockchain.  \n\nfor #2, in Fabric  v0.6, for the most part, the REST API can mimic the SDK calls, but not exactly, e.g. registering and enrolling users behaves differently when done through the SDK than when done through the REST API.   Furthermore, the REST API is deprecated for Fabric v1.0.  In v1.0 the best practice programming model is to use one of the SDKs.  In either case, whether you use SDK calls or REST API calls that deal with chaincode, you are deploying or invoking the chaincode from them,  you are not replacing chaincode with them.",
        "ts": "1485034588.002487"
    },
    {
        "type": "message",
        "user": "U3UPNQL3E",
        "text": "<@U0YJUECE8> thanks for the explanation. that's very helpful",
        "ts": "1485036911.002488",
        "reactions": [
            {
                "name": "white_check_mark",
                "users": [
                    "U0YJUECE8"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U3NKHU4F7",
        "text": "<@U3NKHU4F7|alacambra> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1485071629.002489"
    }
]