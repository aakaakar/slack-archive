[
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U0TFEHX8E> <@U0KPFAZNF> : chaincode_example04 tests calling chaincode_example02 with ID hardcoded in chaincode_example04.",
        "ts": "1462535079.000928"
    },
    {
        "type": "message",
        "subtype": "file_share",
        "text": "<@U0ULK2JPP|muralisr> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F16MHQGTE\/pasted_image_at_2016_05_06_07_44_am.png|from chaincode_example04>",
        "file": {
            "id": "F16MHQGTE",
            "created": 1462535101,
            "timestamp": 1462535101,
            "name": "Pasted image at 2016_05_06 07_44 AM.png",
            "title": "from chaincode_example04",
            "mimetype": "image\/png",
            "filetype": "png",
            "pretty_type": "PNG",
            "user": "U0ULK2JPP",
            "editable": false,
            "size": 59085,
            "mode": "hosted",
            "is_external": false,
            "external_type": "",
            "is_public": true,
            "public_url_shared": false,
            "display_as_bot": false,
            "username": "",
            "url_private": "https:\/\/files.slack.com\/files-pri\/T0J024XGA-F16MHQGTE\/pasted_image_at_2016_05_06_07_44_am.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "url_private_download": "https:\/\/files.slack.com\/files-pri\/T0J024XGA-F16MHQGTE\/download\/pasted_image_at_2016_05_06_07_44_am.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_64": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F16MHQGTE-ac9649467e\/pasted_image_at_2016_05_06_07_44_am_64.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_80": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F16MHQGTE-ac9649467e\/pasted_image_at_2016_05_06_07_44_am_80.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_360": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F16MHQGTE-ac9649467e\/pasted_image_at_2016_05_06_07_44_am_360.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_360_w": 360,
            "thumb_360_h": 31,
            "thumb_480": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F16MHQGTE-ac9649467e\/pasted_image_at_2016_05_06_07_44_am_480.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_480_w": 480,
            "thumb_480_h": 41,
            "thumb_160": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F16MHQGTE-ac9649467e\/pasted_image_at_2016_05_06_07_44_am_160.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_720": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F16MHQGTE-ac9649467e\/pasted_image_at_2016_05_06_07_44_am_720.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_720_w": 720,
            "thumb_720_h": 62,
            "thumb_960": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F16MHQGTE-ac9649467e\/pasted_image_at_2016_05_06_07_44_am_960.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_960_w": 960,
            "thumb_960_h": 83,
            "thumb_1024": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F16MHQGTE-ac9649467e\/pasted_image_at_2016_05_06_07_44_am_1024.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_1024_w": 1024,
            "thumb_1024_h": 88,
            "image_exif_rotation": 1,
            "original_w": 2414,
            "original_h": 208,
            "permalink": "https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F16MHQGTE\/pasted_image_at_2016_05_06_07_44_am.png",
            "permalink_public": "https:\/\/slack-files.com\/T0J024XGA-F16MHQGTE-26bc4ba006",
            "channels": [
                "C0Y4PEU22"
            ],
            "groups": [],
            "ims": [],
            "comments_count": 0
        },
        "user": "U0ULK2JPP",
        "upload": true,
        "display_as_bot": false,
        "username": "<@U0ULK2JPP|muralisr>",
        "bot_id": null,
        "ts": "1462535107.000929"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "TestChaincodeInvokeChaincode uses example04",
        "ts": "1462535152.000930"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "oh my",
        "ts": "1462535183.000931"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "TestChaincodeQueryChaincoide uses example05 which accepts an ID passed to it",
        "ts": "1462535189.000932"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "so the later won\u2019t fail for changes to example02 and the former will",
        "ts": "1462535223.000933"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "this is not a trivial issue - what are the semantics of upgrading a chaincode?  should all chaincodes start using the new version?",
        "ts": "1462535255.000934"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "shouldn't they have a choice on whether they should use the new version or not?",
        "ts": "1462535288.000935"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "well, that\u2019s the purpose of the two examples - to show the effect of hard coding ids. But changing example02 is not really an \u201cupgrade\u201d as something known to the system.",
        "ts": "1462535598.000936"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U0TFEHX8E>: <@U0KPFAZNF> - will run the latest and push out a PR to fix the test case if chaincode example02 has changed. I\u2019ll also put a comment in chaincodeexample02 to note changes to 02 will affect 04",
        "ts": "1462536029.000937"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "ah!",
        "ts": "1462536073.000938"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "at least that makes sense",
        "ts": "1462536078.000939"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "i meant to run that last night but got sidetracked\u2026. sorry about that",
        "ts": "1462536169.000940"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "one odd thing, it seems like the tests pass when I run locally",
        "ts": "1462536702.000941"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "ok",
        "ts": "1462536883.000942"
    },
    {
        "type": "message",
        "user": "U0TFEHX8E",
        "text": "They were failing locally for me",
        "ts": "1462538289.000943"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "is there an issue I can attach the PR to ?",
        "ts": "1462538335.000944"
    },
    {
        "type": "message",
        "user": "U0TFEHX8E",
        "text": "<@U0ULK2JPP>: this seems to indicate the Go binaries do include source. I also read they're adding a feature in 1.7 to optionally not include the source. I remember we were asking this question for system chaincode",
        "ts": "1462538386.000945"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U0TFEHX8E>: the unit tests run on the local file system and the peer image we create has the file system. It is only when you use the peer exe without the files in GOPATH that we will have a problem\u2026 right ?",
        "ts": "1462538608.000946"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "binaries include source code?",
        "ts": "1462538726.000947"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i guess they include line numbers for traceback",
        "ts": "1462538739.000948"
    },
    {
        "type": "message",
        "user": "U0TFEHX8E",
        "text": "<https:\/\/github.com\/golang\/proposal\/blob\/master\/design\/2775-binary-only-packages.md>",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "golang\/proposal",
                "title_link": "https:\/\/github.com\/golang\/proposal\/blob\/master\/design\/2775-binary-only-packages.md",
                "text": "proposal - Go Project Design Documents",
                "fallback": "GitHub: golang\/proposal",
                "thumb_url": "https:\/\/avatars1.githubusercontent.com\/u\/4314092?v=3&s=400",
                "from_url": "https:\/\/github.com\/golang\/proposal\/blob\/master\/design\/2775-binary-only-packages.md",
                "thumb_width": 400,
                "thumb_height": 400,
                "id": 1
            }
        ],
        "ts": "1462538933.000949"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "ah",
        "ts": "1462539287.000951"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i wonder why we don't just ship a single binary",
        "ts": "1462539306.000952"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "docker container",
        "ts": "1462539317.000953"
    },
    {
        "type": "message",
        "user": "U0MM86C84",
        "text": "How do i check the signature of a transaction within a chaincode. There is an example asset management which checks the signature, but they are using the metadata that means it is done manually",
        "ts": "1462539368.000954"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "novusopt: manually as opposed to?",
        "ts": "1462539675.000955"
    },
    {
        "user": "U0PB67X4K",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U0PB67X4K|garisingh> has joined the channel",
        "ts": "1462539698.000956"
    },
    {
        "type": "message",
        "user": "U0MM86C84",
        "text": "<@U0XR6J961>: how can i access the signature of a transaction, without using the metadata field ?",
        "ts": "1462539804.000957"
    },
    {
        "type": "message",
        "user": "U0MM86C84",
        "text": "<@U0XR6J961>: correct me if i am wrong, i thought the metadata field is optional...?",
        "ts": "1462539837.000958"
    },
    {
        "type": "message",
        "user": "U0MM86C84",
        "text": "i can paste any information i want...",
        "edited": {
            "user": "U0MM86C84",
            "ts": "1462539889.000000"
        },
        "ts": "1462539876.000959"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "you mean `GetCallerMetadata`?",
        "ts": "1462539897.000961"
    },
    {
        "type": "message",
        "user": "U0MM86C84",
        "text": "yes",
        "ts": "1462539907.000962"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i'm no expert - maybe <@U0ZR63HLK> can help out here",
        "ts": "1462539956.000963"
    },
    {
        "type": "message",
        "user": "U0KPTLRGU",
        "text": "Hi <@U0TFEHX8E> , <@U0ULK2JPP> : so was that error determined?  I'm running into a similar error when calling one cc from another (ie client(dev cmndline) -&gt; cc1 -&gt; cc2).  If there is no error in cc2, it works fine, but if cc2 returns an Error (whether in an invoke or query), I get this type of error (ie Chaincode handler FSM cannot handle message) and cc1 gets killed even before it can print the response from cc2.",
        "ts": "1462540023.000964"
    },
    {
        "type": "message",
        "user": "U0MM86C84",
        "text": "<@U0XR6J961>: <@U0ZR63HLK> or can i skip this in the chaincode because the validator checks already the signature?",
        "ts": "1462540057.000965"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "the validator doesn't know what you want to check the signature against",
        "ts": "1462540079.000966"
    },
    {
        "type": "message",
        "user": "U0KPTLRGU",
        "text": "(this was on sha 53c67ac btw)",
        "ts": "1462540089.000967"
    },
    {
        "type": "message",
        "user": "U0MM86C84",
        "text": "<@U0XR6J961>: i think the validator checks the signature of every transaction, \"does the user have the correct private key to the corresponding public key\"....",
        "ts": "1462540159.000968"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "well, but for asset management, you don't know who owns the asset",
        "ts": "1462540180.000969"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U0KPTLRGU>: you may be running into a different issue. I can help you with that if you are still running into that problem.",
        "ts": "1462540995.000970"
    },
    {
        "type": "message",
        "user": "U0KPTLRGU",
        "text": "<@U0ULK2JPP>:  maybe... how do you suggest we proceed, I still have the issue and nothing obvious so far",
        "ts": "1462541256.000971"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "perhaps do this 1-1 \u2026 in 10 mins maybe ?",
        "ts": "1462541303.000972"
    },
    {
        "type": "message",
        "user": "U0MM86C84",
        "text": "<@U0XR6J961> but why i have to create a manual signature?",
        "ts": "1462541334.000973"
    },
    {
        "type": "message",
        "user": "U0MM86C84",
        "text": "by using the metadata",
        "ts": "1462541344.000974"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i don't think so",
        "ts": "1462541351.000975"
    },
    {
        "type": "message",
        "user": "U0MM86C84",
        "text": "each transaction gets signed",
        "ts": "1462541351.000976"
    },
    {
        "type": "message",
        "user": "U0KPTLRGU",
        "text": "<@U0ULK2JPP>:  sounds good, i'm on a call till the next hour, but anytime after that is great",
        "ts": "1462541371.000977"
    },
    {
        "user": "U15L37XJN",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U15L37XJN|yannik> has joined the channel",
        "ts": "1462541897.000978"
    },
    {
        "type": "message",
        "user": "U15L37XJN",
        "text": "I am experiencing a suspicious behaviour when using the default dev setup (noobs consensus). If I boot up three nodes, vp0, vp1, vp2 and  init some contracts to vp0, then all three nodes sync them and I can query \/ invoke contracts from any of them. However, if I turn off one of the node and boot it up again, even if it picks up the network, it does not get the contracts in the blockchain - I can't query the reborn. Is this the expected behaviour? I would rather have the new one syncing the contracts and after a while, being able to query it. Happy to dump here any trace if needed.",
        "ts": "1462542418.000979"
    },
    {
        "user": "U16NAHH8U",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U16NAHH8U|michaelhaley> has joined the channel",
        "ts": "1462542429.000980"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U15L37XJN> assuming \u201csync\u201d works correctly we still have a problem (just remembered)\u2026 we don\u2019t currently resurrect the image from a deploy transaction if it doesn\u2019t exist",
        "ts": "1462542663.000981"
    },
    {
        "type": "message",
        "user": "U15L37XJN",
        "text": "<@U0ULK2JPP>: I can query \/ invoke the deployed contract from vp1 and vp2 without problem and I can see contract's containers running from the `docker ps` command.",
        "ts": "1462542941.000982"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "docker ps will show the chaincode containers",
        "ts": "1462543017.000983"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "does anyone recall\/know which unit-test(s) specifically require the peer to be running?",
        "ts": "1462555677.000984"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": ".\/core\/peer\/peer_test.go i believe",
        "ts": "1462555834.000985"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "<@U0UGH3X7X>: ty",
        "ts": "1462555843.000986"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "<@U0TFEHX8E> <@U0KM61BCP> <@U0Z81GL6S> <@U11HH3P7Y> (on mobile, not logged into github). I have a proposal regarding the sdk unit tests",
        "ts": "1462557936.000987"
    },
    {
        "user": "U11HH3P7Y",
        "inviter": "U0KPFAZNF",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U11HH3P7Y|ramesh> has joined the channel",
        "ts": "1462557945.000988"
    },
    {
        "user": "U0Z81GL6S",
        "inviter": "U0KPFAZNF",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U0Z81GL6S|anya> has joined the channel",
        "ts": "1462557945.000989"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "Assuming the makefile PR is accepted, Travis can call \"make all-tests\" and we can hook it from there",
        "ts": "1462557989.000990"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "With go-tests, sdk-tests, behave as sub targets",
        "ts": "1462558023.000991"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "I have a patch in progress that manages the peer wrt the go unit tests, it strikes me that the sdk could either use something similar or behave, as appropriate",
        "ts": "1462558100.000992"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "I'll send out a patch that highlights the idea when at my desk",
        "ts": "1462558125.000993"
    },
    {
        "type": "message",
        "user": "U11HH3P7Y",
        "text": "yes <@U0KPFAZNF> . Also, I have install few steps in travis yml file to install supporting language to test sdk",
        "ts": "1462558180.000994"
    },
    {
        "type": "message",
        "user": "U0TFEHX8E",
        "text": "ok, sounds like we should merge 1378 and then add the tests into travis using another PR?",
        "ts": "1462559335.000995"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "that sounds reasonable to me",
        "ts": "1462559546.000996"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "what I am proposing would be predicated on 1374 also going in, so we can decide how the sdk tests are integrated an an extension of that conversation",
        "ts": "1462559599.000997"
    },
    {
        "type": "message",
        "user": "U0TFEHX8E",
        "text": "ok, will merge",
        "ts": "1462560248.000998"
    },
    {
        "type": "message",
        "subtype": "file_share",
        "text": "<@U0KPFAZNF|ghaskins> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/ghaskins\/F16RSADJR\/-.txt|Untitled> and commented: <@U0TFEHX8E>: this is what my current patch looks like on top of 1374",
        "file": {
            "id": "F16RSADJR",
            "created": 1462560607,
            "timestamp": 1462560607,
            "name": "-.txt",
            "title": "Untitled",
            "mimetype": "text\/plain",
            "filetype": "text",
            "pretty_type": "Plain Text",
            "user": "U0KPFAZNF",
            "editable": true,
            "size": 851,
            "mode": "snippet",
            "is_external": false,
            "external_type": "",
            "is_public": true,
            "public_url_shared": false,
            "display_as_bot": false,
            "username": "",
            "url_private": "https:\/\/files.slack.com\/files-pri\/T0J024XGA-F16RSADJR\/-.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "url_private_download": "https:\/\/files.slack.com\/files-pri\/T0J024XGA-F16RSADJR\/download\/-.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "permalink": "https:\/\/hyperledgerproject.slack.com\/files\/ghaskins\/F16RSADJR\/-.txt",
            "permalink_public": "https:\/\/slack-files.com\/T0J024XGA-F16RSADJR-9b2b29a249",
            "edit_link": "https:\/\/hyperledgerproject.slack.com\/files\/ghaskins\/F16RSADJR\/-.txt\/edit",
            "preview": "commit a63396c427a7d7ee0bb44a724c6cc59451140a85\r\nAuthor: Gregory Haskins <gregory.haskins@gmail.com>\r\nDate:   Fri May 6 13:35:32 2016 -0400\r\n\r\n    Ensure we run a peer for the unit-tests\r",
            "preview_highlight": "<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>commit a63396c427a7d7ee0bb44a724c6cc59451140a85<\/pre><\/div>\n<div><pre>Author: Gregory Haskins &lt;gregory.haskins@gmail.com&gt;<\/pre><\/div>\n<div><pre>Date:   Fri May 6 13:35:32 2016 -0400<\/pre><\/div>\n<div><pre><\/pre><\/div>\n<div><pre>    Ensure we run a peer for the unit-tests<\/pre><\/div>\n<div><pre><\/pre><\/div>\n<\/div>\n<\/div>\n",
            "lines": 25,
            "lines_more": 20,
            "preview_is_truncated": false,
            "channels": [
                "C0Y4PEU22"
            ],
            "groups": [],
            "ims": [],
            "comments_count": 1,
            "initial_comment": {
                "id": "Fc16RG64R2",
                "created": 1462560607,
                "timestamp": 1462560607,
                "user": "U0KPFAZNF",
                "is_intro": true,
                "comment": "<@U0TFEHX8E>: this is what my current patch looks like on top of 1374",
                "channel": "C0Y4PEU22"
            }
        },
        "user": "U0KPFAZNF",
        "upload": true,
        "display_as_bot": false,
        "username": "<@U0KPFAZNF|ghaskins>",
        "bot_id": null,
        "ts": "1462560608.000999"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "I am envisioning that the sdk steps could be modeled in a similar way (unless integrating with behave is more appropriate",
        "ts": "1462560634.001000"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "(or a middle ground might be similar to above, but use docker-compose to set up the CA+peer rather than drive by the makefile",
        "ts": "1462560730.001001"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "<@U11HH3P7Y> <@U11HTMW0H> and team are working on a mapping layer that sits between behave and sdk.  The goal is that you can drive sdk tests and backend tests  via behave",
        "ts": "1462561730.001002"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "<@U0UGH3X7X>: ok, that sounds good too",
        "ts": "1462561808.001003"
    },
    {
        "user": "U11K2BN2C",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U11K2BN2C|theophoric> has joined the channel",
        "ts": "1462567540.001004"
    }
]