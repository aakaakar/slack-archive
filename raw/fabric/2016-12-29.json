[
    {
        "user": "U3KGH29A7",
        "text": "<@U3KGH29A7|yongxinq> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1483000806.000839"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "just thought I'd cross post this over to fabric since it is Fabric related",
        "attachments": [
            {
                "fallback": "[December 29th, 2016 4:23 AM] garisingh: <@U3BH74NH0> - I'll  give the shortest version of the answer for now (as we continue with the v1.0 release additional operational documentation will be added as we implement the v1.0 architecture \/ design).  I'm not going to answer in the context of v0.6 as that version is based on a prior architecture and we are adding any new capabilities there nor will running that version in production actually be supported moving forward.\n\n\nHere's the v1.0 \"highlights\"\n\n*chain data*\n\neach *endorsing\/committing peer* basically \"stores\" the following:\n\n1.  *file-based ledger* - we store the _blocks_ (each block contains transactions which create\/update _keys_ in the system) using a file-based structure persisted on each peer's local file system.  You can of course \"back\" this file up but there is also the ability for a peer to \"recover\" the ledger by communicating with other peers and\/or ordering nodes to retrieve the entire ledger as well\n2.  *state store* - the state store holds the latest _value_ for each _key_ .  The default state store is LevelDB  (goLevelDB to be precise).  We are also working on an optional CouchDB-based state store as well.   Of course you can back this up as well, but think of the state store as more of a cache which can be rebuilt from the file-based ledger\n3.  *identity* - cryptographic material used by each peer to identify itself (typically be signing messages which flow through the system).  The default provider is X509-based so you would typically need to minimally backup the private key (or store it in an HSM).  You would also back up the X509 public key although technically you could generate a new certificate request using the private key  \n\n*ordering nodes*\n\nThe default ordering service for v1.0 is crash fault tolerant and based on Kafka so we can leverage best practices for deploying a CFT cluster of Kafka nodes.  Additionally, there are _shim_ nodes which provide the external interface(s) for the ordering service and each of them maintains a file-based ledger of \"blocks\" as well.  This is basically the same thing as the file-based ledger above for the peers \n\n*certificate data* \n\nin the v1.0 architecture, we have removed the \"dependency\" between peer nodes and fabric-cop (which takes the place of membersrvcs).  fabric-cop supports fault tolerant deployments (e.g. multiple nodes) but again you'd need to minimally back up things like the certificate signing pair, revocation lists and if you use transaction certificates there are certain pieces of info which need to be backed up.  The good news is that the storage for this info is actually a database (e.g. MySQL, Postgres) so you would simply follow standard procedures there.  \n\n There is also a bunch of crypto material which is actually distributed via the blockchain itself to all of the peer nodes (e.g. channel membership, trusted toot authorities, etc) so all of that information persisted to the chains themselves\n\nMore to come, but hopefully this gives you the basic idea",
                "ts": "1483003413.002328",
                "author_subname": "garisingh",
                "channel_id": "C0J02NU1E",
                "channel_name": "general",
                "is_msg_unfurl": true,
                "text": "<@U3BH74NH0> - I'll  give the shortest version of the answer for now (as we continue with the v1.0 release additional operational documentation will be added as we implement the v1.0 architecture \/ design).  I'm not going to answer in the context of v0.6 as that version is based on a prior architecture and we are adding any new capabilities there nor will running that version in production actually be supported moving forward.\n\n\nHere's the v1.0 \"highlights\"\n\n*chain data*\n\neach *endorsing\/committing peer* basically \"stores\" the following:\n\n1.  *file-based ledger* - we store the _blocks_ (each block contains transactions which create\/update _keys_ in the system) using a file-based structure persisted on each peer's local file system.  You can of course \"back\" this file up but there is also the ability for a peer to \"recover\" the ledger by communicating with other peers and\/or ordering nodes to retrieve the entire ledger as well\n2.  *state store* - the state store holds the latest _value_ for each _key_ .  The default state store is LevelDB  (goLevelDB to be precise).  We are also working on an optional CouchDB-based state store as well.   Of course you can back this up as well, but think of the state store as more of a cache which can be rebuilt from the file-based ledger\n3.  *identity* - cryptographic material used by each peer to identify itself (typically be signing messages which flow through the system).  The default provider is X509-based so you would typically need to minimally backup the private key (or store it in an HSM).  You would also back up the X509 public key although technically you could generate a new certificate request using the private key  \n\n*ordering nodes*\n\nThe default ordering service for v1.0 is crash fault tolerant and based on Kafka so we can leverage best practices for deploying a CFT cluster of Kafka nodes.  Additionally, there are _shim_ nodes which provide the external interface(s) for the ordering service and each of them maintains a file-based ledger of \"blocks\" as well.  This is basically the same thing as the file-based ledger above for the peers \n\n*certificate data* \n\nin the v1.0 architecture, we have removed the \"dependency\" between peer nodes and fabric-cop (which takes the place of membersrvcs).  fabric-cop supports fault tolerant deployments (e.g. multiple nodes) but again you'd need to minimally back up things like the certificate signing pair, revocation lists and if you use transaction certificates there are certain pieces of info which need to be backed up.  The good news is that the storage for this info is actually a database (e.g. MySQL, Postgres) so you would simply follow standard procedures there.  \n\n There is also a bunch of crypto material which is actually distributed via the blockchain itself to all of the peer nodes (e.g. channel membership, trusted toot authorities, etc) so all of that information persisted to the chains themselves\n\nMore to come, but hopefully this gives you the basic idea",
                "author_link": "https:\/\/hyperledgerproject.slack.com\/team\/garisingh",
                "author_icon": "https:\/\/avatars.slack-edge.com\/2016-09-10\/78323915894_521dc680194c08b166e0_48.jpg",
                "mrkdwn_in": [
                    "text"
                ],
                "color": "D0D0D0",
                "from_url": "https:\/\/hyperledgerproject.slack.com\/archives\/general\/p1483003413002328",
                "is_share": true,
                "footer": "Posted in #general"
            }
        ],
        "ts": "1483009006.000840"
    },
    {
        "user": "U36HLH8SC",
        "text": "<@U36HLH8SC|madhava> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1483009692.000841"
    },
    {
        "type": "message",
        "user": "U1SHFS1Q9",
        "text": "<@U0PB67X4K>, Thanks so much for the details.  The explanations are very helpful",
        "ts": "1483011589.000842"
    },
    {
        "type": "message",
        "user": "U1CS08EP3",
        "text": "<@U0PB67X4K>, so these changes signal a totally revamped fabric architecture. So how are these features going to be released? I mean are they going to be released phase by phase, on the top of 0.6 or 0.7 which we have, all the while maintaining backward compatibility?",
        "edited": {
            "user": "U1CS08EP3",
            "ts": "1483022886.000000"
        },
        "ts": "1483022859.000843"
    },
    {
        "type": "message",
        "user": "U1CS08EP3",
        "text": "And thank u <@U0PB67X4K>, for the details.  ",
        "ts": "1483022965.000845"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "<@U1CS08EP3> - the architecture is not backwards compatible with v0.6 (although you'll only need to make a few minor changes to chaincode developed in v0.6 for it to work with v1.0)",
        "ts": "1483026473.000846"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "v0.7 is actually the v1.0 architecture but basically the master branch will continue to evolve to the final v1.0 architecture.  most of the interfaces are pretty solid right now",
        "ts": "1483026526.000847"
    },
    {
        "type": "message",
        "user": "U1CS08EP3",
        "text": "<@U0PB67X4K> Okay, That's okay, minor changes are always okay. ",
        "ts": "1483030197.000848"
    },
    {
        "type": "message",
        "subtype": "file_share",
        "text": "<@U351SSVMM|zainx01> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/zainx01\/F3K49R681\/capture.png|Capture.PNG> and commented: hi, i'm having some trouble installing the hfc kit. I get this error. The command is npm install hfc@0.6.5. Does anyone know about this?",
        "file": {
            "id": "F3K49R681",
            "created": 1483043438,
            "timestamp": 1483043438,
            "name": "Capture.PNG",
            "title": "Capture.PNG",
            "mimetype": "image\/png",
            "filetype": "png",
            "pretty_type": "PNG",
            "user": "U351SSVMM",
            "editable": false,
            "size": 28496,
            "mode": "hosted",
            "is_external": false,
            "external_type": "",
            "is_public": true,
            "public_url_shared": false,
            "display_as_bot": false,
            "username": "",
            "url_private": "https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3K49R681\/capture.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "url_private_download": "https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3K49R681\/download\/capture.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_64": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F3K49R681-a905f3a777\/capture_64.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_80": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F3K49R681-a905f3a777\/capture_80.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_360": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F3K49R681-a905f3a777\/capture_360.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_360_w": 360,
            "thumb_360_h": 210,
            "thumb_480": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F3K49R681-a905f3a777\/capture_480.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_480_w": 480,
            "thumb_480_h": 280,
            "thumb_160": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F3K49R681-a905f3a777\/capture_160.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_720": "https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F3K49R681-a905f3a777\/capture_720.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "thumb_720_w": 720,
            "thumb_720_h": 420,
            "image_exif_rotation": 1,
            "original_w": 811,
            "original_h": 473,
            "permalink": "https:\/\/hyperledgerproject.slack.com\/files\/zainx01\/F3K49R681\/capture.png",
            "permalink_public": "https:\/\/slack-files.com\/T0J024XGA-F3K49R681-04481add5c",
            "channels": [
                "C0Y4PEU22"
            ],
            "groups": [],
            "ims": [],
            "comments_count": 1,
            "initial_comment": {
                "id": "Fc3KQ8TV6E",
                "created": 1483043438,
                "timestamp": 1483043438,
                "user": "U351SSVMM",
                "is_intro": true,
                "comment": "hi, i'm having some trouble installing the hfc kit. I get this error. The command is npm install hfc@0.6.5. Does anyone know about this?",
                "channel": ""
            }
        },
        "user": "U351SSVMM",
        "upload": true,
        "display_as_bot": false,
        "username": "<@U351SSVMM|zainx01>",
        "bot_id": null,
        "ts": "1483043440.000849"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U351SSVMM> I had some problems till i had the latest node\u2026 not sure if you are running into the same thing but I\u2019d certainly uninstalling node and npm and get the latest \u2026 also do try fabric-sdk-node-dev",
        "ts": "1483045155.000850"
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "<@U351SSVMM>  - what is your host operating system?",
        "ts": "1483045695.000851"
    },
    {
        "user": "U3KAS13FG",
        "text": "<@U3KAS13FG|serinth> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1483049618.000852"
    },
    {
        "user": "U2D62LCQJ",
        "text": "<@U2D62LCQJ|dsanchezseco> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1483052787.000853"
    },
    {
        "user": "U3E300R6Z",
        "text": "<@U3E300R6Z|abhinav.garg> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1483071116.000856"
    },
    {
        "type": "message",
        "user": "U3E300R6Z",
        "text": "Hi,\n\nI saw sample on youtube relates with Hyperledger for art auction.\nI want to deploy to my local machine.Please provide me a proper installation guide for it.\nI tried github sample but i am much confused related what additional softwares like vagrant,node .js installation for ubuntu.\nplease took a king consideration.",
        "edited": {
            "user": "U3E300R6Z",
            "ts": "1483072484.000000"
        },
        "ts": "1483071119.000857"
    },
    {
        "user": "U3EC89DFS",
        "text": "<@U3EC89DFS|akong> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1483084730.000859"
    }
]