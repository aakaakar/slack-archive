[
    {
        "type": "message",
        "user": "U0MM86C84",
        "text": "<@U0ZR63HLK> yes that make sense, thank u :simple_smile: so that means currently the fabric does not notify the involved users?",
        "ts": "1461135602.000123"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "<@U0MM86C84>, yes, it is correct.",
        "ts": "1461136118.000124"
    },
    {
        "user": "U126CGDSN",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U126CGDSN|harry96> has joined the channel",
        "ts": "1461143017.000125"
    },
    {
        "user": "U0Z6VMEER",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U0Z6VMEER|beauson45> has joined the channel",
        "ts": "1461157598.000126"
    },
    {
        "type": "message",
        "user": "U0KN2SSKE",
        "text": "<!here|@here>  with the Latest commit 488d266  issue #1131 \u2014 moving main.go to fabric\/peer.  You may encounter the problem in vagrant:\n```vagrant@hyperledger-devenv:v0.0.9-2457c97:\/opt\/gopath\/src\/github.com\/hyperledger\/fabric$ cd peer\/\n-bash: cd: peer\/: Not a directory```\nIt seems vagrant caches the `peer` exe file. The solution is to run:\n```vagrant halt\nvagrant up\n```",
        "edited": {
            "user": "U0KN2SSKE",
            "ts": "1461161116.000000"
        },
        "ts": "1461161016.000127"
    },
    {
        "type": "message",
        "user": "U0Z3BE0F5",
        "text": "To implement an ACL into the invocation methods the application layer must use CertificateHandler? How can the application access the CertificateHandler to sign the invocation?",
        "ts": "1461162293.000129"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "<@U0Z3BE0F5>: Actually a CertificateHandler and a TransactionHandler are needed as described here <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/tech\/application-ACL.md>",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "hyperledger\/fabric",
                "title_link": "https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/tech\/application-ACL.md",
                "text": "fabric - Fabric is a blockchain project in Incubation proposed to the community and documented at <https:\/\/goo.gl\/RYQZ5N>. Information on what Incubation entails can be found in the Hyperledger Proj...",
                "fallback": "GitHub: hyperledger\/fabric",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400",
                "from_url": "https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/tech\/application-ACL.md",
                "thumb_width": 142,
                "thumb_height": 142,
                "id": 1
            }
        ],
        "ts": "1461162854.000130"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "How the application can access these structures is more trickier. We are exactly working on this to make the API accessible in a secure way to the application. In the meantime, you can have a look at here <https:\/\/github.com\/hyperledger\/fabric\/tree\/master\/examples\/chaincode\/go\/asset_management>",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "hyperledger\/fabric",
                "title_link": "https:\/\/github.com\/hyperledger\/fabric\/tree\/master\/examples\/chaincode\/go\/asset_management",
                "text": "fabric - Fabric is a blockchain project in Incubation proposed to the community and documented at <https:\/\/goo.gl\/RYQZ5N>. Information on what Incubation entails can be found in the Hyperledger Proj...",
                "fallback": "GitHub: hyperledger\/fabric",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400",
                "from_url": "https:\/\/github.com\/hyperledger\/fabric\/tree\/master\/examples\/chaincode\/go\/asset_management",
                "thumb_width": 142,
                "thumb_height": 142,
                "id": 1
            }
        ],
        "ts": "1461162935.000132"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "it contains an example (code) of how to implement access control at the chaincode level",
        "ts": "1461162963.000134"
    },
    {
        "type": "message",
        "user": "U0Z3BE0F5",
        "text": "I see, the API access is what I was missing",
        "ts": "1461163040.000135"
    },
    {
        "type": "message",
        "user": "U0Z3BE0F5",
        "text": "because the user ECerts are stored in the trusted VP right? For the ChainCode to access the public keys of other user's certificates you need to connect the ChainCode to the CA?",
        "edited": {
            "user": "U0Z3BE0F5",
            "ts": "1461164107.000000"
        },
        "ts": "1461163072.000136"
    },
    {
        "type": "message",
        "user": "U0Z3BE0F5",
        "text": "and how is the user ECert accessed from the application, is it possible currently?",
        "edited": {
            "user": "U0Z3BE0F5",
            "ts": "1461163987.000000"
        },
        "ts": "1461163949.000137"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "<@U0Z3BE0F5>:  Q1: yes, Q2: actually the chaincode stores the ECert\/TCert in its state",
        "ts": "1461165447.000140"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "the ECert can be accessed via REST api but anyway we are actively working on the client SDK that will allow to orchestrate the chaincodes",
        "ts": "1461165501.000141"
    },
    {
        "type": "message",
        "user": "U0Z3BE0F5",
        "text": "<@U0ZR63HLK>: oh I see: GET \/registrar\/{enrollmentID}\/ecert retrieves the Ecert from the trusted VP not the CA?",
        "edited": {
            "user": "U0Z3BE0F5",
            "ts": "1461165731.000000"
        },
        "ts": "1461165705.000142"
    },
    {
        "user": "U12CQUQLU",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U12CQUQLU|davids> has joined the channel",
        "ts": "1461188437.000145"
    },
    {
        "user": "U12E0JBLZ",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U12E0JBLZ|csweir> has joined the channel",
        "ts": "1461195976.000146"
    },
    {
        "user": "U0J5URUJU",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U0J5URUJU|nycnewman> has joined the channel",
        "ts": "1461202443.000147"
    },
    {
        "type": "message",
        "user": "U11CP8FF1",
        "text": "Question about environmental variable. I believe config file and environmental variable handling is done by \"viper\".  The setting file \"core.yml\" has cascade, like:\n\n```peer:\n    id: jdoe\n    networkId: dev\n    addressAutoDetect: false\n    port:    30303\n    gomaxprocs: -1\n    workers: 2\n    validator:\n        enabled: true```",
        "ts": "1461217622.000148"
    },
    {
        "type": "message",
        "user": "U11CP8FF1",
        "text": "If I want change the peer functionality as non-validating peer by environmental variable, CORE_ prefixed like:\n\n```CORE_PEER_VALIDATOR_ENABLED=false```\n\nis valid setting. Is this understanding correct ?",
        "edited": {
            "user": "U11CP8FF1",
            "ts": "1461217719.000000"
        },
        "ts": "1461217707.000149"
    }
]