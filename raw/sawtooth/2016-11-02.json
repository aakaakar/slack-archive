[
    {
        "type": "message",
        "user": "U2LH2TFTP",
        "text": "launcher script keep on trying to start the initial validator. Not able to see errors in the \/tmp\/. Any suggestions for debugging?\nvalidator-0-debug.log shows \"[MainThread] gossip.gossip_core DEBUG] calling handler for message 16d384ca from 14F6SsgF of type \/journal.messages.TransactionBlockMessage\/BlockRetry\" repeatedly.\n\nThank you.",
        "edited": {
            "user": "U2LH2TFTP",
            "ts": "1478071224.000000"
        },
        "ts": "1478070885.000315"
    },
    {
        "user": "U2XF5L2S3",
        "text": "<@U2XF5L2S3|tbltzk> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1478081983.000318"
    },
    {
        "type": "message",
        "user": "U1ZUSJHAA",
        "text": "<@U0VKPD6A2> Yes, I'm interested in it. what is the whitelist, where is it stored in? and what's the difference between the whitelist and a list of  x.505 certificates if the administrator could provide a list of validator public keys that were trusted ?",
        "ts": "1478089466.000319"
    },
    {
        "type": "message",
        "user": "U1ZUSJHAA",
        "text": "I updated  codes ofSTL, but the validator couldn't run, the error messages are as follow:",
        "ts": "1478089578.000320"
    },
    {
        "type": "message",
        "user": "U1ZUSJHAA",
        "text": "[20:24:31 DEBUG   validator] peer count is 0 of 1\n[20:24:31 INFO    validator] attempting to load peers using url <http:\/\/localhost:8800\/>\n[20:24:31 DEBUG   client] get content from url &lt;http:\/\/localhost:8800\/store\/EndpointRegistryTransaction\/*&gt;\n[20:24:41 WARNING client] no response from server\n[20:24:41 ERROR   validator] Unable to get endpoints from LedgerURL: no response from server\n[20:24:41 INFO    validator] requested connection to unknown peer 127.0.0.1:8800\n[20:24:41 DEBUG   gossip_core] calling handler for message b2288646 from 139ZT3ot of type \/journal.messages.TransactionBlockMessage\/BlockRetry\n[20:24:41 INFO    base_page] StorePage.do_get \/store\/EndpointRegistryTransaction\/*\n[20:24:41 ERROR   base_page] No connection when request.finish called",
        "ts": "1478089590.000321"
    },
    {
        "type": "message",
        "user": "U1ZUSJHAA",
        "text": "<@U0VKPD6A2>, a list of x.509 certificates. How could revoke one of them in the whitelist?",
        "ts": "1478089824.000322"
    },
    {
        "type": "message",
        "user": "U0VKPD6A2",
        "text": "<@U1ZUSJHAA> how are you launching the validator? can you post the command?",
        "ts": "1478096254.000323"
    },
    {
        "type": "message",
        "user": "U1M3199JP",
        "text": "hi <@U1ZUSJHAA> <@U2LH2TFTP> ... for the initial validator, InitialConnectivity must now be zero",
        "ts": "1478096370.000324"
    },
    {
        "type": "message",
        "user": "U1M3199JP",
        "text": "we're working on makeing that more explicit in the documentation presently",
        "ts": "1478096392.000325"
    },
    {
        "type": "message",
        "user": "U0VKPD6A2",
        "text": "<@U1ZUSJHAA> regarding the validator registry it may be easiest to do this in phases.  1. provide a whitelist of public keys (perhaps in the config file). and create the policy to accept them.  2. With that policy in place upgrade from public key list to x509 certs. 3. address revocation",
        "ts": "1478096398.000326"
    },
    {
        "type": "message",
        "user": "U0VKPD6A2",
        "text": "a good place to start is look at that document posted earlier on the endpoint registry.  look at the permissioned section.",
        "ts": "1478096424.000327"
    },
    {
        "type": "message",
        "user": "U0VKPD6A2",
        "text": "I did not implement the inheritance structure in that doc, so don't get hung up on that.",
        "ts": "1478096463.000328"
    },
    {
        "type": "message",
        "user": "U0VKPD6A2",
        "text": ":slightly_smiling_face:",
        "ts": "1478096464.000329"
    },
    {
        "type": "message",
        "user": "U1M3199JP",
        "text": "this \"initialConnectivity: 0 is a config setting.  We've removed the GenesisLedger argument.  Take a look at the tutorial as you now have to run the sawtooth admin &lt;CONSENSUS_TYPE&gt;-genesis command to create a genesis block.",
        "edited": {
            "user": "U1M3199JP",
            "ts": "1478096543.000000"
        },
        "ts": "1478096517.000330"
    },
    {
        "type": "message",
        "user": "U1M3199JP",
        "text": "that shell script in the tutorial hides some detail we're going to call out more explicitly very soon",
        "ts": "1478096594.000332"
    },
    {
        "type": "message",
        "user": "U1V9UML9E",
        "text": "<@U1M3199JP>  and I talked: we will make this explicit in the tutorials!",
        "ts": "1478096700.000333"
    },
    {
        "type": "message",
        "user": "U1M3199JP",
        "text": "The basic idea is that there is no longer a special or validator type or 'privileged' validator, only some initial validator who happens to already have the genesis\/root block.  Currently. peering gates the ability of a validator to start, so the first validator has to bypass this gate via the config.  We don't intend to preserve this gate in the long run.",
        "edited": {
            "user": "U1M3199JP",
            "ts": "1478097407.000000"
        },
        "ts": "1478097389.000334"
    },
    {
        "user": "U2Y0TCSBG",
        "text": "<@U2Y0TCSBG|kernel> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1478128129.000336"
    }
]