[
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "Maintainers, I would like to know what you think:\nError handling (again). We want to have a solution with multi language support, and some level of hierarchy for errors. (We also want optional call stack support but this is OK.) Now, I see two possible solutions for this:\n1) see <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/941\/>  It has an error descriptor file (errors.json) with errors which are hierarchical, and consist of a return code plus a reason code. A return code is e.g. the originating module\/package\/component (e.g. ledger). A reason code is something lower level e.g. Genesis_not_found. These errors have a map of languages + error messages. In JSON this looks like: { \"1\" : { \"1\" : { \"en\" : \"Error message\" } } }\nWith this approach a developer instantiates an error using e.g. the following code: errors.Error(LEDGER, GENESIS_NOT_FOUND) where LEDGER and GENESIS... are constants defined in errors.go (framework module) and they are numbers.\nThe only problem I see with this approach is that we have to maintain the relation between the constants defined in errors.go and the JSON in errors.json. We should be sure that 1) there is an error from the JSON for every constant and a constant for every error from the JSON   2) users do not use wrong pairs, non-existing or ad-hoc defined errors etc...\n2) we could have a pre-build source generation process (like in case of protos and make protos) where we would generate a go file containing 1 error struct for every return-reason pair defined by the JSON. (not many files but one with all the structs). e.g. we could use this: <https:\/\/github.com\/ChimeraCoder\/gojson> problem is whether we should commit the generated go file, when to regenerate it, how to do the build etc etc something like in case of protos.",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "ChimeraCoder\/gojson",
                "title_link": "https:\/\/github.com\/ChimeraCoder\/gojson",
                "text": "gojson - Automatically generate Go (golang) struct definitions from example JSON",
                "fallback": "GitHub: ChimeraCoder\/gojson",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/376414?v=3&s=400",
                "from_url": "https:\/\/github.com\/ChimeraCoder\/gojson",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https:\/\/github.com\/apple-touch-icon.png",
                "id": 1
            }
        ],
        "ts": "1476452220.001160"
    },
    {
        "user": "U2PE37K3J",
        "text": "<@U2PE37K3J|n.ohagan> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1476453397.001162"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "<@U0PB67X4K> <@U0KM61BCP> <@U0KPFAZNF> <@U11MANG9G> and others :slightly_smiling_face:",
        "ts": "1476453975.001163"
    },
    {
        "user": "U2PE37K3J",
        "text": "<@U2PE37K3J|n.ohagan> has left the channel",
        "type": "message",
        "subtype": "channel_leave",
        "ts": "1476454303.001164"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U1AU8DRQR> after we merge master and convergence, we can expect lot of activity\u2026 it would be better to get the error framework in so developers can instructed to use it from get-go and maintainers to catch if submissions don\u2019t use the framework\u2026 so whatever we decide better be soon so as to unblock you",
        "ts": "1476455640.001165"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "I think having a jason based approach to capture {maincode , subcode, language (def. english)} like you describe is reasonable\u2026 perhaps also have (1) with instructions for use (2) example of its use in some package and (3) playback showing it in action ?",
        "ts": "1476455902.001166"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/941> added some simple tests and examples. will add more info to the wiki",
        "ts": "1476471965.001167"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "and will record a playback",
        "ts": "1476471972.001168"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "this is out of date: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/977\/10> I won't fix it, will create a new for examples",
        "ts": "1476472010.001169"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "<https:\/\/wiki.hyperledger.org\/error-handling>",
        "ts": "1476474038.001170"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "I owe you with some real life examples and a playback",
        "ts": "1476474065.001171"
    },
    {
        "type": "message",
        "user": "U11MANG9G",
        "text": "<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1757\/1>",
        "ts": "1476480814.001172"
    },
    {
        "type": "message",
        "user": "U11MANG9G",
        "text": "(branch v0.6)",
        "ts": "1476480834.001173"
    },
    {
        "type": "message",
        "user": "U11MANG9G",
        "text": "<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1759\/>\n(branch v0.6)",
        "ts": "1476481482.001174"
    }
]