[
    {
        "user": "U1K5BG4S1",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1K5BG4S1|ffcs> has joined the channel",
        "ts": "1466583764.000168"
    },
    {
        "user": "U1K5R1CP9",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1K5R1CP9|venkat> has joined the channel",
        "ts": "1466586837.000169"
    },
    {
        "user": "U1K70V1MY",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1K70V1MY|adizere> has joined the channel",
        "ts": "1466595203.000170"
    },
    {
        "user": "U1K72JJHW",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1K72JJHW|simonloader> has joined the channel",
        "ts": "1466599159.000171"
    },
    {
        "user": "U1K7KUA0M",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1K7KUA0M|htyagi> has joined the channel",
        "ts": "1466601506.000172"
    },
    {
        "user": "U1K869J4W",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1K869J4W|mihaig> has joined the channel",
        "ts": "1466605857.000173"
    },
    {
        "user": "U1K7R4927",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1K7R4927|sj> has joined the channel",
        "ts": "1466609346.000174"
    },
    {
        "user": "U1K9UT77U",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1K9UT77U|mvankempen> has joined the channel",
        "ts": "1466611016.000175"
    },
    {
        "type": "message",
        "user": "U1ENXTQRL",
        "text": "Given the recent DAO \"hack\", many people agree on the problem being on Solidity design itself.  I do think that there are many dangers on having Turing-complete languages as the platform for smart contracts, and especially for running _autonomous_ companies.  There should be a way to formally verify the integrity of a contract, and that can't be achieved (as far as I know) with turing-complete languages.\n\nDoes anyone have a technically-grounded view on how Hyperledger is secure against the same dangers? For example, fabric is made in Go... Does Go-lang have any particular characteristics that might help in securing the integrity of contract code? Are there any known mechanisms for ensuring the correctness of smart contracts?",
        "ts": "1466611094.000176"
    },
    {
        "user": "U1K9Z03DY",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1K9Z03DY|aish> has joined the channel",
        "ts": "1466611551.000177"
    },
    {
        "user": "U1K9S1F3P",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1K9S1F3P|sri44> has joined the channel",
        "ts": "1466612007.000178"
    },
    {
        "user": "U1K9UHPMK",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1K9UHPMK|greg.fitzpatrick> has joined the channel",
        "ts": "1466612373.000179"
    },
    {
        "type": "message",
        "user": "U0YQQRNU8",
        "text": "<@U1ENXTQRL>: in sawtooth lake, the transaction families could be used to implement variant smart contracts implementations; such that an implementation of a transaction family could add support for a non-turing-complete VM with specific properties, in the same way that we could add a turing-complete implementation",
        "ts": "1466613607.000180"
    },
    {
        "type": "message",
        "user": "U1ENXTQRL",
        "text": "Interesting..",
        "ts": "1466613715.000181"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "<@U1ENXTQRL>: <@U0YQQRNU8> fabric also has an extension mechanism for the contract language\u2026the canonical impl is a golang based environment but others can be (and are being) built.  Golang itself doesn\u2019t have specific mechanisms but I dont view that as problematic as the problem needs to be solved at the layer below it anyway",
        "ts": "1466613753.000182"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "I dont see turing completeness as a barrier there either",
        "ts": "1466613783.000183"
    },
    {
        "type": "message",
        "user": "U1ENXTQRL",
        "text": "Not a barrier, just too general.",
        "ts": "1466613845.000184"
    },
    {
        "type": "message",
        "user": "U1ENXTQRL",
        "text": "You can't verify or analyse or understand (from a machine view) code without running it.",
        "ts": "1466613884.000185"
    },
    {
        "type": "message",
        "user": "U0YQQRNU8",
        "text": "well, you basically use the turing-completeness of the platform to implement something non-turing complete",
        "ts": "1466613885.000186"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "i disagree, it just requires different constraints",
        "ts": "1466613889.000187"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "honestly, i think the bigger problem to solve is non determinism, turing completeness is just one more form of resource controls",
        "ts": "1466613920.000188"
    },
    {
        "type": "message",
        "user": "U1ENXTQRL",
        "text": "Then it falls into the hands of humans the responsibility of validating and ensuring that code will behave as expected.",
        "ts": "1466613930.000189"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "<@U1ENXTQRL>: not at all",
        "ts": "1466613943.000190"
    },
    {
        "type": "message",
        "user": "U1ENXTQRL",
        "text": "Would you expand on that view about non-determinism?",
        "ts": "1466613964.000191"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "think about it this way: someone gives you arbitrary untrusted code in a turing complete language",
        "ts": "1466613975.000192"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "that code might want to expand in various metrics, such as heap, storage, threads, or runtime in ways that are undesirable to the integrity of the hosting platform",
        "ts": "1466614038.000193"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "so, the hosting platform would want to constrain those resources such that policies are enforced",
        "ts": "1466614086.000194"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "think \u201culimit\u201d in unix terms",
        "ts": "1466614096.000195"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "turing completeness is just a form of runtime limit",
        "ts": "1466614116.000196"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "so, i am not worried about a turing complete language per se, the resource constraints need to be imposed below the semantics of the execution platform anyway",
        "ts": "1466614205.000197"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "not just runtime",
        "ts": "1466614208.000198"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "now, regarding non-determinism, a consensus network such as a blockchain is predicated on determinism",
        "ts": "1466614273.000199"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "non deterministic responses to inputs at best should be detected and thrown away\u2026at worst, affect the integrity of your network (if it wasnt designed properly)",
        "ts": "1466614311.000200"
    },
    {
        "type": "message",
        "user": "U0YQQRNU8",
        "text": "determinism is required and separate from the benefit of being able to implement non-turing-complete contract languages",
        "ts": "1466614331.000201"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "general purpose languages make it easier to write non deterministic code (by accident or malicious intent)",
        "ts": "1466614358.000202"
    },
    {
        "type": "message",
        "user": "U0YQQRNU8",
        "text": "the point is that you can do more formal analysis and proofs (outside the running system - during design, etc.) - if you removing the turning-complete piece",
        "ts": "1466614366.000203"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "<@U0YQQRNU8>: I dont disagree with that, I am just pointing out that turing complete languages are not the problem per se",
        "ts": "1466614440.000204"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "you can have a consensus network, with integrity, even with turing complete contracts, thats my only point",
        "ts": "1466614484.000205"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "that said, a network rife with a bunch of non-deterministic, resource abusing contracts, is undesirable, even if we can mitigate\/detect\/alert\/discard them",
        "ts": "1466614554.000206"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "so, anything that can make that less likely is probably a good thing",
        "ts": "1466614570.000207"
    },
    {
        "type": "message",
        "user": "U0YQQRNU8",
        "text": "sure, two different problems though; hosting\/execution vs. trust of the contract itself",
        "ts": "1466614830.000208"
    },
    {
        "type": "message",
        "user": "U0YQQRNU8",
        "text": "(by the users, not the nodes)",
        "ts": "1466614847.000209"
    },
    {
        "type": "message",
        "user": "U1ENXTQRL",
        "text": "<@U0KPFAZNF>: Hmmm but you're only mentioning constraints on hardware resources, that's not the only type of contraint that we should be taking care of when dealing with \"smart\" contracts. The true relevance lies in the constraints in the domain of the legal, economic and social scope... Back to the DAO case, the problem was not a DoS attack, it was exploiting a contract that allowed things like recursive calls to deplete a wallet... \n\nI'm not fully acquainted with the technicalities of the DAO case, but as far as I understand, these type of gap is what arises when you have total code freedom (turing-completeness) over something that will be run autonomously and vulnerable to bugs.",
        "ts": "1466616268.000210"
    },
    {
        "type": "message",
        "user": "U1ENXTQRL",
        "text": "A contract that can be formally proven doesn't open such possibilities.",
        "ts": "1466616285.000211"
    },
    {
        "type": "message",
        "user": "U1ENXTQRL",
        "text": "because then code can check code.",
        "ts": "1466616296.000212"
    },
    {
        "type": "message",
        "user": "U1ENXTQRL",
        "text": "In turing completeness, code must _run_ code, and that is always dangerous.",
        "ts": "1466616308.000213"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "I think you are conflating issues though",
        "ts": "1466616326.000214"
    },
    {
        "type": "message",
        "user": "U1ENXTQRL",
        "text": "It's possible.",
        "ts": "1466616330.000215"
    },
    {
        "type": "message",
        "user": "U1ENXTQRL",
        "text": "I just want to understand it well.",
        "ts": "1466616337.000216"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "from a pure concept perspective, we want a \u201ccontract\u201d to consist of a set of pure functions like S\u2019 = f(S, M)",
        "ts": "1466616385.000217"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "for a given state S, and an input message M, apply function f() and derive a new state S'",
        "ts": "1466616411.000218"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "run that in multiple places, and see if you have \u201cagreement\u201d, where agreement can mean different things to different networks",
        "ts": "1466616451.000219"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "it doesn\u2019t really matter if f() is represented by a turing complete language or not",
        "ts": "1466616499.000220"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "what does matter is if I run f(S, M), I get S'",
        "ts": "1466616516.000221"
    },
    {
        "type": "message",
        "user": "U1ENXTQRL",
        "text": "Something like unit testing, right?",
        "ts": "1466616566.000222"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "now, f() might be broken in various ways: for instance, it might try to take too much stack or run too long, but I can handle that at a hypervisor level",
        "edited": {
            "user": "U0KPFAZNF",
            "ts": "1466616585.000000"
        },
        "ts": "1466616574.000223"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "well, unit-testing would be good for the developer of f(), yes, but it doesn\u2019t matter that much to the network",
        "ts": "1466616627.000225"
    },
    {
        "type": "message",
        "user": "U1ENXTQRL",
        "text": "Now, S' can be very complex... S' can in fact mean the execution of further functions, which I would also need to run in order to verify that S' is _true_... Isn't it?",
        "ts": "1466616639.000226"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "the network is going to take f(S, M) and check that it gets S\u2019 across a subset of nodes",
        "ts": "1466616648.000227"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "yes, though for this level of the conversation, assume f() represents the composition of all contracts affected by the transaction",
        "ts": "1466616682.000228"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "i digress\u2026the network doesnt care if f() was unit tested, all it cares is that f() executes within its constraints and returns an S\u2019 that matches what other nodes found for S'",
        "edited": {
            "user": "U0KPFAZNF",
            "ts": "1466616762.000000"
        },
        "ts": "1466616752.000229"
    },
    {
        "type": "message",
        "user": "U1ENXTQRL",
        "text": "alright.",
        "ts": "1466616767.000231"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "if it doesn\u2019t take too long, try to allocate too much memory or storage, blah blah blah and it returns an S\u2019 that is in agreement with the rest of the network, we have consensus",
        "ts": "1466616824.000232"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "now, as to the legitimacy of S\u2019 in a functional, legal, or any other sense, that is something else entirely",
        "ts": "1466616850.000233"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "so, you asked if fabric has any protections for the integrity of the code",
        "ts": "1466616924.000234"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "the answer is yes",
        "ts": "1466616931.000235"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "the answer is that the addressing of the code is based on a cryptographic hash of the code itself",
        "ts": "1466616951.000236"
    },
    {
        "type": "message",
        "user": "U1ENXTQRL",
        "text": "Ok, that's good info.",
        "ts": "1466616974.000237"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "so, in order to target my M at f(), I have an opportunity to (if I care) confirm that the address that I am sending to is a specific instance of the code",
        "ts": "1466616995.000238"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "so, if I want to have a technical\/legal vet of what exactly f() will do, I can do that",
        "ts": "1466617013.000239"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "and we therefore not only have consensus for S\u2019, but also on what f() even is, down to the byte level",
        "ts": "1466617060.000240"
    },
    {
        "type": "message",
        "user": "U1ENXTQRL",
        "text": "Hmmm I think I got it.",
        "ts": "1466617071.000241"
    },
    {
        "type": "message",
        "user": "U1ENXTQRL",
        "text": "Is there any formal documentation on that specific feature?",
        "ts": "1466617107.000242"
    },
    {
        "type": "message",
        "user": "U1ENXTQRL",
        "text": "...I have to be away from keyboard for a while. But I'll probably be bothering with a couple of questions later.  Thank you very much for the feedback.",
        "ts": "1466617223.000243"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "<@U1ENXTQRL>: I cant find the original discussion where I asked for this, but this issue talks about it a bit",
        "ts": "1466617584.000244"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "<https:\/\/github.com\/hyperledger\/fabric\/issues\/748>",
        "edited": {
            "user": "U0KPFAZNF",
            "ts": "1466617596.000000"
        },
        "ts": "1466617586.000245"
    },
    {
        "user": "U1KBFBDRB",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1KBFBDRB|rick> has joined the channel",
        "ts": "1466620437.000248"
    },
    {
        "user": "U1KC1TAHE",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1KC1TAHE|brendan> has joined the channel",
        "ts": "1466624322.000249"
    },
    {
        "user": "U1KASSN2F",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1KASSN2F|bensor> has joined the channel",
        "ts": "1466624536.000250"
    },
    {
        "user": "U1KC4A2AC",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1KC4A2AC|remkohdev> has joined the channel",
        "ts": "1466624722.000251"
    },
    {
        "user": "U1KC1CMF0",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1KC1CMF0|manjeet> has joined the channel",
        "ts": "1466624826.000252"
    },
    {
        "user": "U1KDHJT6H",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1KDHJT6H|claytonsims> has joined the channel",
        "ts": "1466631912.000253"
    },
    {
        "user": "U1KEALAV8",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1KEALAV8|raravindakshan> has joined the channel",
        "ts": "1466635615.000254"
    },
    {
        "user": "U1KDAMDJ7",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1KDAMDJ7|sanchezl> has joined the channel",
        "ts": "1466642846.000255"
    },
    {
        "user": "U1KFCPFQA",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1KFCPFQA|dave.enyeart> has joined the channel",
        "ts": "1466646363.000256"
    },
    {
        "user": "U1KFBBWG1",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1KFBBWG1|harrisob> has joined the channel",
        "ts": "1466647496.000257"
    },
    {
        "user": "U1KFCBGR4",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1KFCBGR4|ethdun> has joined the channel",
        "ts": "1466653269.000258"
    },
    {
        "user": "U1KG9H47J",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1KG9H47J|jagdeeshs> has joined the channel",
        "ts": "1466664719.000259"
    }
]