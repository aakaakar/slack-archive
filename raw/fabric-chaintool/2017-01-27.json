[
    {
        "user": "U3X6RA34J",
        "inviter": "U0KPFAZNF",
        "text": "<@U3X6RA34J|archivebot> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1485529393.000325"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "test",
        "ts": "1485529413.000326"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "<@U0KPFAZNF> I created another enhancement request for fabric-chaintool <https:\/\/github.com\/hyperledger\/fabric-chaintool\/issues\/38>",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "Expose the mapping from function ids to Tx\/Query names for the chaincode application to use \u00b7 Issue #38 \u00b7 hyperledger\/fabric-chaintool \u00b7 GitHub",
                "title_link": "https:\/\/github.com\/hyperledger\/fabric-chaintool\/issues\/38",
                "text": "This desire is mostly based around logging. I want (some) log messages from the chaincode to state the chaincode-operation they are a part of. Currently, I can only log stub.GetStringArgs()[0], whi...",
                "fallback": "GitHub: Expose the mapping from function ids to Tx\/Query names for the chaincode application to use \u00b7 Issue #38 \u00b7 hyperledger\/fabric-chaintool",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/15089?v=3&s=400",
                "from_url": "https:\/\/github.com\/hyperledger\/fabric-chaintool\/issues\/38",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https:\/\/a.slack-edge.com\/bfaba\/img\/unfurl_icons\/github.png",
                "id": 1
            }
        ],
        "ts": "1485529768.000327",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0KPFAZNF"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "ty, keep them coming",
        "ts": "1485529799.000329"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "ill try to get to your patch today too",
        "ts": "1485529803.000330"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Oh. That would be great honestly.",
        "ts": "1485529820.000331"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "I either need a release binary from the upstream project or I need to build myself a binary to put on S3",
        "ts": "1485529845.000332"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "It's not a big deal either way, not worth rushing you over",
        "ts": "1485529901.000333"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "ok, will shoot for that",
        "ts": "1485529993.000334"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "regarding Issue 38, chaintool def has all that info, its just a matter of how it is exposed",
        "ts": "1485530012.000335"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "help me to understand your use case",
        "ts": "1485530019.000336"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "from the context, I assume you are trying to log something in your chaincode via the stub parameters?",
        "ts": "1485530046.000337"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Well yea. I'm trying to attach useful info to log message for debugging\/auditing purposes",
        "ts": "1485530077.000338"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "(as an aside, I had been planning on adding general logging to the emitted code",
        "ts": "1485530080.000339"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Ah",
        "ts": "1485530090.000340"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "if I automatically generated debug logs for the function\/parameters, would that cover what you are after?",
        "ts": "1485530104.000341"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Well logging from within generated chaintool code would help, though in general I would want more",
        "ts": "1485530108.000342"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "then you dont have to write anything, the code generator can tackle",
        "ts": "1485530114.000343"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "ok, if I passed you some additional context object (say MyCCFunc(stub, ctctx, ... )",
        "ts": "1485530170.000344"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Ok. here is an example...",
        "ts": "1485530186.000345"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "and the ctctx had extra info in it for decoding, would that help?",
        "ts": "1485530189.000346"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "ok",
        "ts": "1485530190.000347"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Say chaincode B wants to invoke chaincode A",
        "ts": "1485530202.000348"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "And it wants to tell chaincode A what function in B caused the transaction in A",
        "ts": "1485530234.000349"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "i see",
        "ts": "1485530250.000350"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "the only way I can think to do that would be to carry perhaps a meta parameter, which I think we can do",
        "ts": "1485530276.000351"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "I'm not sure I understand what you mean by a meta parameter",
        "ts": "1485530300.000352"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "e.g. I current stuff the function parameters in arg[0] (well, really arg[1] in master since they got rid of the function name)",
        "ts": "1485530306.000353"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "what I am saying is, I could add an optional arg[2], and if its there, it could be decoded",
        "ts": "1485530333.000354"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "hrm",
        "ts": "1485530353.000355"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "though actually, now that I think about it, what you are asking for could be tracked at a lower level and apply to non-chaintool applications as well",
        "ts": "1485530408.000356"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "if A invokes B, B should be able to tell who the caller is (in this case A running function Foo",
        "ts": "1485530439.000357"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "oh? honestly I'm not completely sure of the boundary between chaintool and fabric",
        "ts": "1485530449.000358"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "for the most part, fabric is completely unaware",
        "ts": "1485530467.000359"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Ok. Right.. that much I can understand",
        "ts": "1485530475.000360"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "chaintool just writes code that looks like chaincode as far as fabric is concerned",
        "ts": "1485530488.000361"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "the one exception is there is explicit support for peer to launch .car based chaincode",
        "ts": "1485530508.000362"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "but transport wise, it is unaware",
        "ts": "1485530513.000363"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Ah yes. I noticed the car code in the fabric repo",
        "ts": "1485530555.000364"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "I was wondering if there was an effort to completely integrate chaintool into that project or something",
        "ts": "1485530578.000365"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "yeah, though I dont see it needing to go too much beyond where it already is",
        "ts": "1485530619.000366"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "But now that I understand more about how the chaincode deployment system works I basically figured all of what you said out",
        "ts": "1485530619.000367"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "the biggest gap right now is the SDKs lack the ability to deploy .car",
        "ts": "1485530628.000368"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "which I am actively working on",
        "ts": "1485530632.000369"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Meaning the node sdk?",
        "ts": "1485530641.000370"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "yeah",
        "ts": "1485530644.000371"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Ok. I have not used them, actually",
        "ts": "1485530651.000372"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "right",
        "ts": "1485530660.000373"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "im just saying, integration wise, that is the biggest gap right now",
        "ts": "1485530670.000374"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Gotcha",
        "ts": "1485530683.000375"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "anyway, ill give it some more thought...i might have more questions for you as I am not sure I fully understand your use case",
        "ts": "1485530704.000376"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "OK. Here is one more example",
        "ts": "1485530713.000377"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "A quick one",
        "ts": "1485530719.000378"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "I do plan on having some kind of automated logger emitted into the code, so that part should be covered",
        "ts": "1485530721.000379"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "I might want to attach the name of the function to all of my chaincode logs",
        "ts": "1485530744.000380"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "So that I can write a simple query with `grep` to say \"when did MyBusinessProcess log a ~error~ warning?\"",
        "edited": {
            "user": "U2UNR91RB",
            "ts": "1485531068.000000"
        },
        "ts": "1485530773.000381"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "AFAIK right now that is not an easy question to answer",
        "ts": "1485530802.000382"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "so what would that look like in terms of chaintool integration in your mind?",
        "ts": "1485532171.000385"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "you have a client, a chaincode A, and a chaincode B",
        "ts": "1485532185.000386"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "client sends an invoke to A, which sends another invoke to B",
        "ts": "1485532199.000387"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "you want to attach \"MyBusinessProcess\" tag to logs for that flow",
        "ts": "1485532221.000388"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "right?",
        "ts": "1485532222.000389"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "would it be the kind of thing you foresee being in the CCI schema for the interfaces for A and B (e.g. a compile time tagging), or would it be a thing that is carried in the payload (runtime tagging)",
        "edited": {
            "user": "U0KPFAZNF",
            "ts": "1485532323.000000"
        },
        "ts": "1485532305.000390"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Well, it's a good question. \"runtime tagging or not?\"",
        "ts": "1485534730.000392"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "I had some time to think about it while I was grabbing coffee",
        "ts": "1485534743.000393"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "I came to a different question.",
        "ts": "1485534772.000394"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "What is chaintool?",
        "ts": "1485534776.000395"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Is it a tool for fabric to build chaincode containers with?",
        "edited": {
            "user": "U2UNR91RB",
            "ts": "1485534862.000000"
        },
        "ts": "1485534796.000396"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Is it a protocol that allows chaincode to communicate in a structured way?",
        "ts": "1485534824.000397"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Is it a chaincode application framework?",
        "ts": "1485534838.000398"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Right now it is all of these things, I believe",
        "ts": "1485534913.000400"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "I believe this tagging is an application concern (or a concern of the application framework if the developer wishes)",
        "edited": {
            "user": "U2UNR91RB",
            "ts": "1485535990.000000"
        },
        "ts": "1485534992.000401"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "But it seems to me that CCI is strictly in the domain of chaintool the protocol",
        "ts": "1485535374.000402"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "OK. So now I think I have the use case to knock all your curveballs out of the park, <@U0KPFAZNF> (sorry for the colloquialism)... In this example where chaincode A invokes chaincode B, what if chaincode B wasn't built with chaintool? What if my company contracted some person to write a complex chaincode application and they just used straight Go (or an alternate Go framework that isn't based on CAR files)?",
        "ts": "1485537768.000404"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "ok, go on",
        "ts": "1485537814.000405"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "(or was that it?)",
        "ts": "1485537824.000406"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "How does A tell B where the invocation originated from?",
        "ts": "1485537852.000407"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "so I wouldnt have much power to generate any kind of logs within B",
        "ts": "1485537868.000408"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "How does the tag get communicated when B doesn't speak CCI?",
        "ts": "1485537869.000409"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Exactly",
        "ts": "1485537877.000410"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "BUT, (and I am not sure if this is implemented yet)",
        "ts": "1485537891.000411"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "At the application level A needs to communicate that to B",
        "ts": "1485537895.000412"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "that sounds like more of a general fabric \"IPC\" substrate feature",
        "ts": "1485537907.000413"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "theres a few things that I think we need (and they may already be there, <@U0ULK2JPP> would know)",
        "ts": "1485537925.000414"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "one of them would be that B could tell who the original sender is (via tcert, attributes, etc",
        "ts": "1485537941.000415"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "i have to step away for 10m",
        "ts": "1485537947.000416"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "brb",
        "ts": "1485537947.000417"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "back",
        "ts": "1485538103.000418"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "so as I was saying: another feature (I dont think we have this today) would be that the IPC substrate could offer endpoint tracing",
        "ts": "1485538131.000419"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "I see",
        "ts": "1485538144.000420"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "e.g. it could maintain a stack that, at B, would show stack[B, A]",
        "ts": "1485538153.000421"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "I'm still not sure how B would map the stack back into my business domain",
        "ts": "1485538187.000422"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "we would have to think about if it makes sense to allow some additional context to be attached",
        "ts": "1485538192.000423"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Oh, I see",
        "ts": "1485538209.000424"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "like stack[B-&gt;ctx(), A-&gt;ctx(\"FUNCTION=\"MyBusinessProcess\", \"PARAMS=blah\")]",
        "ts": "1485538234.000425"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "and provide some stub function to allow that context to be set",
        "ts": "1485538250.000426"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Yea. That makes sense, I think",
        "ts": "1485538256.000427"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "then, chaintool could generate context assignments automatically and attach them",
        "ts": "1485538269.000428"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "something like that",
        "ts": "1485538288.000429"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "im thinking that the context would be some kind of KV mapping because that would be the most conducive to collision-avoidance as well as general logging",
        "ts": "1485538335.000430"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "e.g. chaintool could use keys like \"chaintool.function\", so that we dont collide if you also want to say \"mybusiness.flarf\" too",
        "ts": "1485538379.000431"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "This sounds OK, though the scope of this is much bigger than I expected it would be initially",
        "ts": "1485538458.000432"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "well, I am just spitballing anyway",
        "ts": "1485538470.000433"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "maybe there is a simpler way",
        "ts": "1485538476.000434"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "its easy(er) if we stick to .car to .car since I can control that layer with the code generator",
        "ts": "1485538500.000435"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "I just wanted a generated function which I could call to translate first argument to a meaningful string.",
        "ts": "1485538543.000436"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "how do you envision that working?",
        "ts": "1485538561.000437"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "oh i think I get you",
        "ts": "1485538573.000438"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "A function that is in server-stub.go i guess",
        "ts": "1485538578.000439"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "yeah, that would be easy",
        "ts": "1485538583.000440"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "GetFunctionName(id string)",
        "ts": "1485538591.000441"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Or something",
        "ts": "1485538593.000442"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "you want to map \"com.foo\/txn\/1\" to \"MyBusinessFunctionAlpha\"",
        "ts": "1485538608.000443"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Yea",
        "ts": "1485538618.000444"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "thats easy, we can do that",
        "ts": "1485538626.000445"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "It's the simplest way to get tracing today",
        "ts": "1485538630.000446"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "but heres the thing:",
        "ts": "1485538632.000447"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "seems to me",
        "ts": "1485538633.000448"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "wouldnt you already know what function you are in ? :wink:",
        "ts": "1485538643.000449"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "No, because I want tracing through chained invocation",
        "ts": "1485538661.000450"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "I want everything you talked about right now :wink:",
        "ts": "1485538672.000451"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "I am going to build what I need of it for  my project",
        "ts": "1485538710.000452"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "ok, so if I assume you have taken care of getting \"com.foo\/txn\/1\" to the right place, translating that to name is piece of cake",
        "ts": "1485538713.000453"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "It is",
        "ts": "1485538732.000454"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "(within the .car application that uses the com.foo interface, anyway)",
        "ts": "1485538735.000455"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "I just need the code generated",
        "ts": "1485538739.000456"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "ok, thats easy, I can do that",
        "ts": "1485538748.000457"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "I was going to write a tool myself if it couldn't be integrated into chaintool's code generation",
        "ts": "1485538762.000458"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "nah, everything I need is already in place, at least in the AST",
        "ts": "1485538786.000459"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Right",
        "ts": "1485538792.000460"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "i might have to update the view I push to the STG generator, worst case",
        "ts": "1485538804.000461"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "but that is not hard",
        "ts": "1485538807.000462"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "actually no, I know the function name, I use that to generate the interface into your app code",
        "ts": "1485538868.000463"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Right... you may already have a `map[string]string` variable in server-stub.go that contains exactly the info I want?",
        "ts": "1485538916.000464"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "i dont think its readily consumable (yet), but that is probably exactly what I will add",
        "ts": "1485538938.000465"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Great.",
        "ts": "1485538946.000466"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "I can use it when I add the built-in logger too",
        "ts": "1485538947.000467"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "I could add it myself if that would be faster?",
        "ts": "1485538953.000468"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "totally up to you",
        "ts": "1485538961.000469"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "i think its all in the .stg domain, so no clojure",
        "ts": "1485538968.000470"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "it would help me out if you are willing, i am swamped",
        "ts": "1485538985.000471"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Even if there was I bet I could piece it together",
        "ts": "1485538988.000472"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "I have written clojure before",
        "ts": "1485538992.000473"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "cool",
        "ts": "1485539001.000474"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "OK. Right. I figured you might be rather busy with the upcoming 1.0 release",
        "ts": "1485539040.000475"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "while you are in there, one thing I hate about the current generator is it spits out a switch statement",
        "ts": "1485539048.000476"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "I can't promise I will have it done as fast as that current PR, but I will try to get it done soon",
        "ts": "1485539065.000477"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "it might be better to have a map with all this",
        "ts": "1485539069.000478"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Agreed",
        "ts": "1485539075.000479"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Go switch statements are not as fast as C switch statements",
        "ts": "1485539085.000480"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "(though I guess I would need at least two indices",
        "ts": "1485539085.000481"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "one by fqn, another by fcnid",
        "ts": "1485539098.000482"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "wonder if golang has a multi-index map like boost",
        "ts": "1485539119.000483"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "I might need to look at the code to understand more about what you mean",
        "ts": "1485539127.000484"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "I don't write C++ either &gt;_&lt;",
        "ts": "1485539148.000485"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "ok, well if you abstract the interface to the name transaction behind a function call, we can always enhance the backend model later",
        "ts": "1485539171.000486"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "But I think the answer is no.. it's probably no",
        "ts": "1485539171.000487"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "then you can just keep this task focused to name translation",
        "ts": "1485539195.000488"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Great",
        "ts": "1485539210.000489"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "we can tackle optimizing\/cleaning-up into a map as a different step",
        "ts": "1485539215.000490"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "I'm definitely open to suggestions about what to name the new function",
        "ts": "1485539236.000491"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "id have to look at the code to come up with a good suggestion",
        "ts": "1485539251.000492"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Since it is part of an exported API there should be more thought to it than I gave when I type that suggestion",
        "edited": {
            "user": "U2UNR91RB",
            "ts": "1485539267.000000"
        },
        "ts": "1485539256.000493"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "just come up with something, if I hate it, i will tell you :wink:",
        "ts": "1485539259.000494"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "but yes, apply API design principles to it",
        "ts": "1485539283.000496"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "we'll be stuck with supporting it in the not too distant future :wink:",
        "ts": "1485539312.000497"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "heh",
        "ts": "1485539324.000498"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "we have a little wiggle room for now though",
        "ts": "1485539332.000499"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "It could work a little differently too, I suppose",
        "ts": "1485539390.000500"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Something like `func GetFunctionName(stub shim.ChaincodeStubInterface) string`",
        "ts": "1485539413.000501"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "I think that is reasonable",
        "ts": "1485539543.000502"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Did you mention something about 1.0 changing how arguments are arranged?",
        "ts": "1485539567.000503"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "yeah, they are a little different now",
        "ts": "1485539579.000504"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Well maybe that would be the best for me as an application developer",
        "ts": "1485539601.000505"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "its all [][]byte as opposed to [string, []string] tuple",
        "ts": "1485539604.000506"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Oh wait, I thought that was how it worked on v0.6.1",
        "ts": "1485539626.000507"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "though there is a synthetic interface on the stub that makes it still appear to have a discrete function",
        "ts": "1485539634.000508"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "ah, haha",
        "ts": "1485539638.000509"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "it could",
        "ts": "1485539639.000510"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "i cant keep it straight any more",
        "ts": "1485539644.000511"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": ":wink:",
        "ts": "1485539644.000512"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "its changed like 4 times",
        "ts": "1485539652.000513"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "np",
        "ts": "1485539654.000514"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "I understand",
        "ts": "1485539658.000515"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "So that is my point, I guess",
        "ts": "1485539663.000516"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "yeah, ideally abstract to you, because chaintool is opinionated that you are invoking function(params)",
        "ts": "1485539693.000517"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "If it's going to change again, then the function would be better taking `stub` so that there is less friction for application developers who are trying to upgrade their code for a new version of fabric",
        "ts": "1485539718.000518"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "speaking of ABI changes though, one of the thing I am planning on doing for v1.0 is forgoing the base64 encoding and just go binary on the wire",
        "ts": "1485539738.000519"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "should be transparent to chaincode",
        "ts": "1485539752.000520"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "Right",
        "ts": "1485539757.000521"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "but may be visible on the client side",
        "ts": "1485539763.000522"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "(or, I should say, _will_ be visible)",
        "ts": "1485539777.000523"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "I have wondered why fabric uses base64 encoded protobufs in a lot of places",
        "ts": "1485539785.000524"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "historically, the interfaces were strings",
        "ts": "1485539797.000525"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "it only changed to bytes late in the game",
        "ts": "1485539820.000526"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "(at least at the chaintool level)",
        "ts": "1485539838.000527"
    },
    {
        "type": "message",
        "user": "U2UNR91RB",
        "text": "OK. That definitely explains a couple specific cases that had come to mind",
        "ts": "1485539838.000528"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "i cant speak for other transports",
        "ts": "1485539842.000529"
    }
]