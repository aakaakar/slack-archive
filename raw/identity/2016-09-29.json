[
    {
        "user": "U2HJP0N4D",
        "text": "<@U2HJP0N4D|ksarin> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1475163157.000021"
    },
    {
        "type": "message",
        "user": "U2HJP0N4D",
        "text": "Hi all, I just joined as I wanted to discuss a proposal I made to Christopher Allen last week who kindly suggested to post it here. You can read the proposal below so any feedback and thoughts would be more than welcome.",
        "ts": "1475166208.000022"
    },
    {
        "type": "message",
        "user": "U2HJP0N4D",
        "text": "Pluggable Membership Service Member Connector proposal\n\n1. Motivation\n\nDuring development of recent blockchain implementation, we ran into a problem where we had user information, including login, stored outside of the hyperledger.\n\nImporting users through yaml or gRPC is not optimal as it can eventually duplicate the enterprise user directory. On top of that, systems usually keep creating new users even after the initial import. This means that not only we need to initially import the users, but also sync the external user directory with hyperledger whenever external system creates a new user.\n\nThis process leaves user creation in blockchain, which is a very important authentication factor, very error prone. This will usually happen for enterprise customers having large number of users.\n\n2. The possible solution \n\nWe could let membership service optionally externalize users. This could work by implementing a pluggable Member Connector interface.\n\nMembership service could be configured through a property to use a implementation of the Member connector interface.\n\nOnce configured, this implementation of the interface would be getting user information from external user directory and returning required information to the Membership service, just as it happens for users added through either member yaml files or gRPC interface.\n\nAs a part of this story, we could provide sample implementations of the Member connector interface implementations for the most common types of external user directories (LDAP, SQL DB, etc...).\n\nThe sample could be shipped as part of hyperledger and would serve two purposes. First would be that customers do not to do any coding to connect to most common user directories. And the second would be to provide guidelines in case they would need to implement Member connector for some less common type of user directories they are using. This is to ensure the Member connector can link to anything, if required.",
        "ts": "1475166218.000023"
    },
    {
        "user": "U21TE1Q9E",
        "text": "<@U21TE1Q9E|obernin> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1475166335.000024"
    },
    {
        "type": "message",
        "user": "U221LL03Z",
        "text": "I see one problem over here : The Enterprise LDAP will need to provide you something like LDAP filter to get info out from LDAP that can be consumed by Membership services , whereas in asserted Identity model Enterprise application will provide all the information without providing directory details.",
        "edited": {
            "user": "U221LL03Z",
            "ts": "1475169073.000000"
        },
        "ts": "1475168977.000025"
    },
    {
        "type": "message",
        "user": "U221LL03Z",
        "text": "Publishing LDAP filter has potential of exposing their directory structure.",
        "ts": "1475169020.000026"
    },
    {
        "user": "U2HPVBZ4K",
        "text": "<@U2HPVBZ4K|mikeward> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1475196846.000028"
    },
    {
        "user": "U2HSRQXGQ",
        "text": "<@U2HSRQXGQ|shannon_wie> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1475214682.000029"
    }
]