[
    {
        "user": "U1ADSTE0N",
        "text": "<@U1ADSTE0N|viewer> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1468915231.000018"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "anybody around?",
        "ts": "1468932360.000019"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "jyellick: around?",
        "ts": "1468933861.000020"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Yep",
        "ts": "1468933868.000021"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i keep trying to figure out a way how to configure the consensus peer",
        "ts": "1468933894.000022"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "like, create the initial configuration",
        "ts": "1468933901.000023"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Right",
        "ts": "1468933923.000024"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "just on a commandline use level",
        "ts": "1468933930.000025"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "and i can't figure it out",
        "ts": "1468933939.000026"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "there are a few small restrictions",
        "ts": "1468933950.000027"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "so i start with a `.ini` file",
        "ts": "1468933963.000028"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "that sets all the pbft things",
        "ts": "1468933970.000029"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "that works fine",
        "ts": "1468933973.000030"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "but in addition to `N`, i need certificates and addresses for the peers",
        "ts": "1468933995.000031"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "just point it to a dir where these are stored?",
        "ts": "1468934044.000032"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "stored how?",
        "ts": "1468934056.000033"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "every peer is a tuple of (address, certificate)",
        "ts": "1468934078.000034"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "A generation step comes first. ",
        "ts": "1468934089.000035"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "well in a realistic scenario, some other operator would create a certificate, and then tell you the address the peer is on",
        "ts": "1468934132.000036"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "and would hand you the certificate and address",
        "ts": "1468934166.000037"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "possibly somebody would compile a configuration of all peers",
        "ts": "1468934184.000038"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "like, an authoritative config file",
        "ts": "1468934206.000039"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I guess we do not want to require that the address is in the cert, ie the common name?",
        "ts": "1468934213.000040"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i didn't require this at the moment",
        "ts": "1468934235.000041"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "right now to authenticate, i compare the certificiate that is sent",
        "ts": "1468934256.000042"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i don't know whether comparing a fingerprint is acceptable",
        "ts": "1468934268.000043"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "so the problem basically is that certificates are usually stored in a separate file",
        "ts": "1468934292.000044"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "which complicates things",
        "ts": "1468934309.000045"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "because then i can't just store the ini in verbatim",
        "ts": "1468934321.000046"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "but maybe i shouldn't do that at all",
        "ts": "1468934337.000047"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yea i guess that's too brittle",
        "ts": "1468934432.000048"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "How are you enumerating the peers? A comma separated list? If you want to stick with something like ini which doesn't natively support multi-entry fields and such, I would be inclined to go with a nested directory structure.",
        "ts": "1468934462.000049"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "well, exactly, how",
        "ts": "1468934489.000050"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "You could simply have a 'peers' directory, and a directory for each peer, which includes a name and a certificate.",
        "ts": "1468934491.000051"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "ignoring the ini format for a moment",
        "ts": "1468934494.000052"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "peers are tuples of address and certificate",
        "ts": "1468934507.000053"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "address, meaning IP\/name, port",
        "ts": "1468934529.000054"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Here I am using name\/address interchangeably",
        "ts": "1468934538.000055"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Yes",
        "ts": "1468934543.000056"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "so my prototype is something like",
        "ts": "1468934568.000057"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "```[peer \"foo\"]\naddress = name:5111\ncert = foocert.pem\n```",
        "ts": "1468934598.000058"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "which works good enough",
        "ts": "1468934610.000059"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "just to initialize the local peer",
        "ts": "1468934657.000060"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i guess that works",
        "ts": "1468934660.000061"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "then the question becomes: how do we store the pbft config in our consensus state",
        "ts": "1468934686.000062"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "because the config should basically form the genesis hash, so that all replicas are configured the same way",
        "ts": "1468934716.000063"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "So, do we have a plan for updating configuration at runtime?",
        "ts": "1468934751.000064"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i have a vague plan",
        "ts": "1468934761.000065"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "basically assuming there is a protocol that allows submission of a new config, which has to be signed by enough replicas, goes through consensus, check signatures, apply configuration to state at some point, then restart application",
        "ts": "1468934859.000066"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "How is this reflected in the local configuration? Are the config files essentially inert after bootstrapping?",
        "ts": "1468934909.000067"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "that's why i want to put them into the state",
        "ts": "1468934931.000068"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "and not operate from some random config file",
        "ts": "1468934940.000069"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I understand and like the simplicity of a plain config file to start, but I would be in favor of using whatever this runtime facility is to do the modification",
        "ts": "1468934961.000070"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "you go `consensus-peer -init somefile.ini -data-dir foo`",
        "ts": "1468934962.000071"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Maybe start in a state of 'operate in N=1, f=0, listen only on a local socket, and wait for a config update'",
        "ts": "1468934982.000072"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "and this creates `foo` and populates it with some internal representation of `somefile.ini`",
        "ts": "1468934997.000073"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "And then use whatever mechanism it is that injects runtime config changes to do the bootstrapping",
        "ts": "1468935002.000074"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "but then we would have to first develop the mechanism on how to change config during runtime",
        "ts": "1468935022.000075"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i don't think that's a low effort sequence",
        "ts": "1468935035.000076"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Yes, that's true.  I just dislike the idea of multiple configuration paths.  I suppose we could always migrate things later.",
        "ts": "1468935102.000077"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "one is \"initial setup\", the other is \"modify setup\"",
        "ts": "1468935129.000078"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "there always will be those two",
        "ts": "1468935152.000079"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "anyways, how do we store our state?",
        "ts": "1468935207.000080"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "especially, how do we store our config",
        "ts": "1468935221.000081"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "the problem with grpc is that if we serialize it multiple times, we are not guaranteed the same output",
        "ts": "1468935247.000082"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i think practically right now there is",
        "ts": "1468935262.000083"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "but it is not good practice to rely on it",
        "ts": "1468935277.000084"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "should we store all pbft config settings in separate persist keys and (un)serialize them by ourselves?",
        "ts": "1468935359.000085"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "then we have a defined format",
        "ts": "1468935381.000086"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Can you explain this?",
        "attachments": [
            {
                "fallback": "[July 19th, 2016 9:34 AM] simon: the problem with grpc is that if we serialize it multiple times, we are not guaranteed the same output",
                "author_subname": "simon",
                "ts": "1468935247.000082",
                "channel_id": "C0Z4NBUN6",
                "channel_name": "fabric-consensus-dev",
                "is_msg_unfurl": true,
                "text": "the problem with grpc is that if we serialize it multiple times, we are not guaranteed the same output",
                "author_name": "Simon Schubert",
                "author_link": "https:\/\/hyperledgerproject.slack.com\/team\/simon",
                "author_icon": "https:\/\/secure.gravatar.com\/avatar\/676aeb5acbd353b77e077be1b7bd1a6e.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0016-48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "color": "D0D0D0",
                "from_url": "https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1468935247000082",
                "is_share": true,
                "footer": "Posted in #fabric-consensus-dev"
            }
        ],
        "ts": "1468935405.000087"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "&gt; the problem with grpc is that if we serialize it multiple times, we are not guaranteed the same output",
        "ts": "1468935407.000088"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Not sure I follow. ",
        "ts": "1468935412.000089"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Ah.",
        "ts": "1468935414.000090"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "(Same here.)",
        "ts": "1468935428.000091"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "nothing in the grpc spec says that the same structure will always be serialized the same way",
        "ts": "1468935516.000092"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "fields could be reordered",
        "ts": "1468935527.000093"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "well, protobufs",
        "edited": {
            "user": "U0XR6J961",
            "ts": "1468935549.000000"
        },
        "ts": "1468935546.000094"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "not grpc",
        "ts": "1468935550.000096"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Got it, so hash will be different, etc. ",
        "ts": "1468935576.000097"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U0XR6J961>\u2026 sorry to jump in :slightly_smiling_face: \u2026. but the grpc statement caught the eye",
        "ts": "1468935624.000098"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yes",
        "ts": "1468935625.000099"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "So you suggest timeout.request goes to a separate persist key, and the same process is followed for every PBFT key essentially.",
        "ts": "1468935627.000100"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "kostas: that could be one way of doing it",
        "ts": "1468935641.000101"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "do protofbuf folks specifically say that we cannot depend on structures being serialized the same way ?",
        "ts": "1468935691.000102"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "typically we expect \u201cbackward compatibility\u201d so we can dd new fields to the end\u2026. but if we cannot rely upon ordering even among existing fields, that goes out of the window",
        "ts": "1468935764.000103"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "nothing states that all implementations will always do it the same way",
        "ts": "1468935766.000104"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "not saying you are wrong\u2026. but it is surprising",
        "ts": "1468935784.000105"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "unless there is a clear statement that this is a format requirement, i don't think we can rely on it",
        "ts": "1468935817.000106"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "This is surprising to me, I thought the numbers associated with the protobuf fields indicated a required ordering (not saying you are wrong, just surprising)",
        "ts": "1468935899.000107"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "^^^ ditto",
        "ts": "1468935930.000108"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<https:\/\/developers.google.com\/protocol-buffers\/docs\/encoding#order>",
        "ts": "1468936175.000109"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "\"when a message is serialized its known fields should be written sequentially by field number\"",
        "ts": "1468936202.000110"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "It sounds to me like we can rely on field ordering when serializing, however decoding must support arbitrary ordering.",
        "ts": "1468936246.000111"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "should",
        "ts": "1468936422.000112"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "not MUST",
        "ts": "1468936434.000113"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "or will",
        "ts": "1468936438.000114"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Yes, I suppose read with the RFC type meaning of 'should', then it is not guaranteed.  This comes back to a possible runtime reconfiguration.  If runtime reconfiguration is done by simply broadcasting an encoded protobuf of the config, then it seems like we have no problem?",
        "ts": "1468936684.000115"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "correct",
        "ts": "1468936778.000116"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "if just one person encodes it, all is fine",
        "ts": "1468936792.000117"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I'd be inclined to make the config generation a separate tool, parses your INI, spits out an encoded protobuf config, which is consumable initially only via some 'bootstrap with this config' param, and later via the runtime reconfiguration.  Less intuitive to start, but seems more consistent to me.",
        "ts": "1468936905.000118"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "I still think the \u201cshould\u201d is misleading\u2026. we can take it to the extreme and take it to mean two back to back serializations in the same transport can be serialized differently\u2026 would make the deserilization more complex and inefficient.",
        "ts": "1468936937.000119"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "I think its worth confirming that the \u201cshould\u201d is meant to be a \u201cshould\"",
        "ts": "1468936964.000120"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "what do you mean by misleading?",
        "ts": "1468936998.000121"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "I think they could have wanted to mean would or must",
        "ts": "1468937031.000122"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "jyellick: so use protobuf as internal config serialization?",
        "ts": "1468937038.000123"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "did they put the should in bold ? as SHOULD ?",
        "ts": "1468937046.000124"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "muralisr: what does it matter?",
        "ts": "1468937053.000125"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "clearly it doesn't say WILL ALWAYS SRSLY YOU CAN TRUST US",
        "ts": "1468937065.000126"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "it matters if it makes implementation convoluted",
        "ts": "1468937091.000127"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "simon: That seems like the most direct path to me, and the easiest to extend down the road",
        "ts": "1468937092.000128"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "if not, then it doesn't",
        "ts": "1468937106.000129"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "btw way I meant the should in caps as they do typically in an RFC\u2026.it would add weight to that that intent",
        "ts": "1468937276.000130"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": ":slightly_smiling_face:",
        "ts": "1468937278.000131"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i don't think it is good software engineering practice to sloppily accept third party outputs as the foundation for a data structure that should (cryptograpically) last for years or decades",
        "ts": "1468937337.000132"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "agreed",
        "ts": "1468937359.000133"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "so our stable outputs need to be hand crafted",
        "ts": "1468937373.000134"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "the wire formats can change more easily",
        "ts": "1468937411.000135"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "okay, protobufs then",
        "ts": "1468937449.000136"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "however backward compatibility is a big issue with all these wire format datastructures. \u2026. not sure if they\u2019d change that easily. There maybe a new \u201cversion\u201d as in protobuf2 vs 3",
        "ts": "1468937705.000137"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "<@U0XQ35CDD> <@U0XPR4NP4> <@U0UGH3X7X> in preparation for the scrum, let's make a list of targets we need to reach, and break them down into tasks",
        "ts": "1468937714.000138"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "anyway that\u2019s my story",
        "ts": "1468937745.000139"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "<@U0XPR4NP4>: can we derive all these viewchange and request and resend timeouts from a single value?",
        "ts": "1468938747.000140"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I think we should",
        "ts": "1468938802.000141"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "There is too much dependency between them all",
        "ts": "1468938811.000142"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I'd actually love to set them more heuristically, based on network performance, but that is a step for later",
        "ts": "1468938828.000143"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "batch timeout &lt; request timeout &lt; null request timeout",
        "ts": "1468938902.000144"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "okay, so we just define one, and calculate the others",
        "ts": "1468938915.000145"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Right",
        "ts": "1468938919.000146"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "and just say null requests enabled: yes\/no",
        "ts": "1468938929.000147"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Request timeout is the one to go for I think, based on the issues I witnessed last Friday with the Bluemix service.",
        "ts": "1468938947.000148"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "The code today I think defaults to:\n\nbatch = 1\/2 * request\nnull = 3\/2 * request",
        "ts": "1468938988.000149"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "It does.",
        "ts": "1468938997.000150"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i think we should define it based on some notion of \"network diameter\"",
        "ts": "1468939021.000151"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "and use multiplicatives",
        "ts": "1468939032.000152"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "f(N) essentially?",
        "ts": "1468939043.000153"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "no",
        "ts": "1468939047.000154"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "I'm listening.",
        "ts": "1468939122.000155"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "running in a datacenter, you'd put it at maybe 1ms",
        "ts": "1468939135.000156"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "running on multiple clouds, maybe 2s",
        "ts": "1468939159.000157"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "or 5s",
        "ts": "1468939161.000158"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I still maintain that we should have an option to set these dynamically",
        "ts": "1468939193.000159"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Say, have a floating request timeout equal to 3 times the average request time to execution",
        "ts": "1468939216.000160"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "(up to some ceiling or whatnot)",
        "ts": "1468939224.000161"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Simon: Sure, but then you need to add logic to identify whether all the peers are in the same subnet, or whatever, right?",
        "ts": "1468939256.000162"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "well, that's in the future",
        "ts": "1468939257.000163"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "kostas: well, when you configure your network, you know that",
        "ts": "1468939270.000164"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i mean, this is the part where we poke through the \"asynchronous network\" abstraction",
        "ts": "1468939293.000165"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "so i think the person designing the network should do it",
        "ts": "1468939307.000166"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "it's just a matter of deriving the other timeouts from that one",
        "ts": "1468939324.000167"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "OK, my initial impression was that you were trying to do this behind-the-scenes, in code.",
        "ts": "1468939335.000168"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "oh no",
        "ts": "1468939340.000169"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "what i want is one timeout, and the other ones are derived from it",
        "ts": "1468939354.000170"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "just to simplify configuration",
        "ts": "1468939362.000171"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "but we can tackle that later",
        "ts": "1468939367.000172"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "so just to get started on targets like <@U0XR6J961> mentioned ... from  the various conversations from last week ...",
        "ts": "1468939517.000173"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "separate out consensus service",
        "ts": "1468939525.000174"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "\"solo\" consensus",
        "ts": "1468939543.000175"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "separate consensus using pbft and others (raft, kafka , etc ... )",
        "ts": "1468939579.000176"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "i don't know what we want to do with endorsers ??",
        "ts": "1468939604.000177"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "what other targets ?",
        "ts": "1468939619.000178"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i would say endorsement stuff is still being worked on, and at least for now we can't take this into consideration",
        "ts": "1468939659.000179"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I think we should include a target for getting the consensus code out of the main fabric repo",
        "ts": "1468939688.000180"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "okay",
        "ts": "1468939698.000181"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "more specifically, we need:",
        "ts": "1468939713.000182"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "- \"state\" transfer between consensus nodes (can just be the checkpoint \"hash\" contents)",
        "ts": "1468939753.000183"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "- persisting raw log",
        "ts": "1468939796.000184"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "- reconfiguration",
        "ts": "1468939823.000185"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "- signatures on batches\/checkpoints",
        "ts": "1468939868.000186"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "i'll add as target  :  dynamic addition of consensters, committers",
        "ts": "1468939875.000187"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yea, that would be reconfiguration",
        "ts": "1468939883.000188"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "committers are just clients",
        "ts": "1468939896.000189"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "but some of them need to persist the log \"for sure\"",
        "ts": "1468939904.000190"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i.e. we cannot advance without these peers having confirmed reception",
        "ts": "1468939923.000191"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "or we need to persist ourselves",
        "ts": "1468939930.000192"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Going back to the grpc ordering guarantees discussion for a sec, this is what the `protoc` release notes of v3-b4 (released 17h ago) write:",
        "edited": {
            "user": "U0XQ35CDD",
            "ts": "1468940076.000000"
        },
        "ts": "1468940041.000193"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "&gt; The deterministic serialization is, however, NOT canonical across languages; it is also unstable across different builds with schema changes due to unknown fields. Users who need canonical serialization, e.g. persistent storage in a canonical form, fingerprinting, etc, should define their own canonicalization specification and implement the serializer using reflection APIs rather than relying on this API.",
        "ts": "1468940045.000194"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "<https:\/\/github.com\/google\/protobuf\/releases>",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "google\/protobuf",
                "title_link": "https:\/\/github.com\/google\/protobuf\/releases",
                "text": "protobuf - Protocol Buffers - Google's data interchange format",
                "fallback": "GitHub: google\/protobuf",
                "thumb_url": "https:\/\/avatars2.githubusercontent.com\/u\/1342004?v=3&s=400",
                "from_url": "https:\/\/github.com\/google\/protobuf\/releases",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https:\/\/github.com\/apple-touch-icon.png",
                "id": 1
            }
        ],
        "ts": "1468940048.000195"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "So Simon's right.",
        "ts": "1468940055.000197"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "registration of committers  ... is this something we handle as part of consensus service ?",
        "ts": "1468940239.000199"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "ah good. thanks <@U0XQ35CDD> that does clear it",
        "ts": "1468940317.000200"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "what would be registration of committers?",
        "ts": "1468940325.000201"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "<@U0XQ35CDD>: :slightly_smiling_face:",
        "ts": "1468940341.000202"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "oh, protobufs also generates a json description",
        "ts": "1468940359.000203"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "so there is a json serialization format",
        "ts": "1468940366.000204"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "we can use this for initial config ingress",
        "ts": "1468940374.000205"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I like the human readability aspect of that",
        "ts": "1468940375.000206"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "I threw together this page <https:\/\/github.com\/hyperledger\/fabric\/wiki\/Consensus-work-items-for-next-Architecture-proposal> .  Add your items today\/tomorrow then we can use the list to prioritize our work",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "hyperledger\/fabric",
                "title_link": "https:\/\/github.com\/hyperledger\/fabric\/wiki\/Consensus-work-items-for-next-Architecture-proposal",
                "text": "fabric - Fabric is a blockchain project in Incubation proposed to the community and documented at <https:\/\/goo.gl\/RYQZ5N>. Information on what Incubation entails can be found in the Hyperledger Proj...",
                "fallback": "GitHub: hyperledger\/fabric",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400",
                "from_url": "https:\/\/github.com\/hyperledger\/fabric\/wiki\/Consensus-work-items-for-next-Architecture-proposal",
                "thumb_width": 142,
                "thumb_height": 142,
                "service_icon": "https:\/\/github.com\/apple-touch-icon.png",
                "id": 1
            }
        ],
        "ts": "1468943174.000207"
    }
]