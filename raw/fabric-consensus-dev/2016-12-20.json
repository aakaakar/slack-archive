[
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "<@U0XQ35CDD> for example now :slightly_smiling_face:",
        "ts": "1482221754.000919"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "I will add something like this:\nif short: skip",
        "ts": "1482222013.000920"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "if I am right we also have to add the short option to the test run",
        "ts": "1482222047.000921"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "e.g. go test -short (or the proper form)",
        "ts": "1482222058.000922"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "ok  \t<http:\/\/github.com\/hyperledger\/fabric\/orderer\/sbft\/main|github.com\/hyperledger\/fabric\/orderer\/sbft\/main>\t5.423s",
        "ts": "1482224814.000923"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "I have this: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3419\/>",
        "ts": "1482225342.000924"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "I will also have to modify the way tests are started",
        "ts": "1482226412.000925"
    },
    {
        "user": "U3D5886CB",
        "text": "<@U3D5886CB|ruslan> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1482228102.000926"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3421\/>",
        "ts": "1482230847.000927"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Correct. (And thanks!)",
        "attachments": [
            {
                "fallback": "[December 20th, 2016 3:20 AM] hgabor: if I am right we also have to add the short option to the test run",
                "ts": "1482222047.000921",
                "author_subname": "hgabor",
                "channel_id": "C0Z4NBUN6",
                "channel_name": "fabric-consensus-dev",
                "is_msg_unfurl": true,
                "text": "if I am right we also have to add the short option to the test run",
                "author_name": "Gabor Hosszu",
                "author_link": "https:\/\/hyperledgerproject.slack.com\/team\/hgabor",
                "author_icon": "https:\/\/secure.gravatar.com\/avatar\/00f4290e36c198abb7d4f0ea586245db.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0012-48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "color": "D0D0D0",
                "from_url": "https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1482222047000921",
                "is_share": true,
                "footer": "Posted in #fabric-consensus-dev"
            }
        ],
        "ts": "1482236334.000928"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "<@U0PB67X4K> others love this: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3419\/3> you can +2 it :smile:",
        "ts": "1482241834.000929",
        "reactions": [
            {
                "name": "relaxed",
                "users": [
                    "U11MANG9G"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U0PB67X4K",
        "text": "hehe - done  :wink:",
        "ts": "1482241868.000930"
    },
    {
        "type": "message",
        "user": "U11MANG9G",
        "text": "For the love of shorter testing cycles! Merged.",
        "ts": "1482241916.000931"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "<@U11MANG9G> note that for that we also need this: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3421\/2> without this it is only a half armed giant",
        "ts": "1482242184.000932"
    },
    {
        "type": "message",
        "user": "U11MANG9G",
        "text": "OK. Let\u2019s wait for the build to complete.",
        "ts": "1482242277.000933"
    },
    {
        "type": "message",
        "user": "U11MANG9G",
        "text": "+1 on \u201cnegotiation skills\u201d :wink:",
        "ts": "1482242287.000934"
    },
    {
        "type": "message",
        "user": "U2DHRR4TE",
        "text": "<@U0XPR4NP4> <@U0ULK2JPP> I'm still a bit lost as to how a submitting client know which endorsers to send a transaction proposal to - you said 'the application' knows but I'm a bit lost as to what this refers to?",
        "ts": "1482251577.000935"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U2DHRR4TE> You can think that 'the application' instructs peers to join a chain, and also deploys chaincode.  So, it makes sense that 'the application' knows which peers are capable of endorsing a proposal, and which endorsements are required (because again, 'the application' was the one who initially decided what these requirements were)",
        "ts": "1482252107.000936"
    },
    {
        "type": "message",
        "user": "U2DHRR4TE",
        "text": "I'm still confused :confused: Perhaps it might help if I explain what I understand about the current way of doing development:\n\n(on the subject of what 'the application' means)\n\nFrom what I understand when you develop using hyperledger as your platform what you are doing is making a collection of chaincode files which contain go (at least for now) code that reads and writes to a 'world state'.\n\nYou can control who is able to make calls to this go code from defining users in the membersrvc.yaml and giving them  groups and therefore rights. This and core.yaml are also used to change how the peers and member service behave (such as whether attributes are in tcerts, consensus alg to use etc.).\n\nFinally you can also make front-end apps with node.js and the hfc library which allow you to interact with the peers, deploying chaincode and sending transactions. Using an hfc app requires you to log in with one of the users you defined in membersrvc.yaml. We can also use HFC to register new users and change the rights and privileges of existing users.\n\nObviously the above is based on knowledge of v0.6 but in the above context what is 'the application' - is it the chaincode? the yaml? the hfc app? or all of these together?\n\n\n\n(on the subject of how do submitters know where to send endorsers)\n\nNow bringing this into v1.0 I presume it will work in more or less the same way (i.e. we have chaincode pushed to endorsers whose behaviour is controlled by these yaml files).\n\nIf I could just clarify - what is a submitter in this setup? Would the hfc app mentionned previously be the submitter - the name 'client submitter' simply referring to the fact that it is not a peer instead of meaning it runs on a user's machine.\n\nNow regarding where to send transaction proposals, how would this submitter know what the addresses of the endorsers are? If the submitter is an hfc node app running on a server somewhere does it have the IP addresses hardcoded? How does it know if endorsers are taken down\/crash\/are added?\n\n(apologies if I've misunderstood some of the key bits of how this works)",
        "ts": "1482253239.000937"
    },
    {
        "type": "message",
        "user": "U2DHRR4TE",
        "text": "<@U0XPR4NP4>",
        "ts": "1482253250.000938"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "The big point of divergence between 0.6 and the new architecture is that there is no longer a single point of authority in the form of membership services.  You can think for instance that you have three organizations(A,B,C) participating in the blockchain, none of which has sole authority to do anything.\n\nEach organization will have some sort of administrator who deploys peers, and instructs them to participate in a given chain.  Obviously organization A's admin can't provision peers for organization B, and organization B can't instruct organization A's peers to participate in a particular chain.  \n\nSimilary, if you wish to do something like deploy a chaincode, because this code will execute on every endorsing peer participating on the chain, usually it's not sufficient for a single organization to endorse the deployment of a chaincode.  So, when a chain is created (or reconfigured) the participating orgs need to agree on policies for chaincode deployment.  That policy might be that every organization needs to agree, or, it might be that only one special 'dictator' needs to agree (or some other more complicated scheme), but this policy governs what endorsements are required for chaincode deployment.  Because this consortium created that policy, it inherently knows what the endorsement requirements are.\n\nWhen it comes to actually finding endorsing peers, the expectation is that when an organization agrees to participate in a chain, it will provision some peers, and join them to the chain.  However, rather than enforce that the network tracks a full list of all peers, those peers which the org admin wants to designate as endorsers can be reported (via whatever mechanism is appropriate) to the consortium so that any of these peers may be targeted when a chaincode requires endorsement from that particular organization. It is possible to build some layer on top of the fabric to track which peers are available (in fact, the gossip piece does this to some extent), but there is no requirement to do so. \n\nNote that I haven't really discussed users etc., because this is all 'chain management'.  The individual user rights within an organization for a particular chaincode are all still managed as you indicated (this is to the best of my knowledge, that is leaving my domain of expertise).  \n\nThe 'client submitter', is generally the hfc app you described, I would not typically expect for this code to execute on a user's machine.  Naively and out of the gate, I would expect that yes, hfc app developer would simply require a list of orgs and their endorsers, and it would randomly pick among them as needed (switching on failure etc.).  For a more robust deployment, I would actually see the peer lists maintained via a chaincode or other API so that the manual distribution of machine names could be eliminated, but it's certainly not a prerequisite to having a working application.",
        "edited": {
            "user": "U0XPR4NP4",
            "ts": "1482259362.000000"
        },
        "ts": "1482259320.000939"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U2DHRR4TE> ^",
        "ts": "1482259336.000940"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "if any maintainers around: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3445\/>",
        "ts": "1482270615.000942"
    }
]