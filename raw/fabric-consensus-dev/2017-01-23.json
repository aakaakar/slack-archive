[
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "where can I read about configuration transactions? I mean something high level, e.g. we have these docs: <https:\/\/wiki.hyperledger.org\/community\/fabric-design-docs>",
        "ts": "1485164431.001577"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "please give it some love in the form of a +2",
        "ts": "1485173217.001578"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3635\/>",
        "ts": "1485173219.001579"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "or even +3s are welcome",
        "ts": "1485173224.001580"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "but it would be good if I didn't have to rebase it again as it is a pain.. you know :smile:",
        "ts": "1485173254.001581"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U1AU8DRQR> <https:\/\/docs.google.com\/document\/d\/1Qg7ZEccOIsrShSHSNl4kBHOFvLYRhQ3903srJ6c_AZE\/edit> contains information on the configuration transaction (towards the end)",
        "ts": "1485182385.001582"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "is that document linked on this page? <https:\/\/wiki.hyperledger.org\/community\/fabric-design-docs>",
        "ts": "1485182439.001584"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Yes",
        "ts": "1485182511.001585"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "The MSP + ACL document",
        "ts": "1485182516.001586"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "nice",
        "ts": "1485182522.001587"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "thanks",
        "ts": "1485182526.001588"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "I did not know that it is in the MSP+ACL docs",
        "ts": "1485182556.001589"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "is this trivial?",
        "ts": "1485182690.001590"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Not entirely sure what you mean",
        "ts": "1485184981.001591"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I'd say it's not trivial, might be worth putting into its own doc",
        "ts": "1485184997.001592"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "yeah, that is what I meant :slightly_smiling_face:",
        "ts": "1485185596.001593"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "The concept of the configuration transaction is simple enough, can be explained in a few sentences",
        "ts": "1485186705.001594"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "The details of what pieces map to what have gotten increasingly complicated though since its inception",
        "ts": "1485186721.001595"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "yep, but I think having docs on everything easily available is a must",
        "ts": "1485187846.001596"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "there is a doc on that config tx thing and that's great, but it is a little bit (maybe) hard to find",
        "ts": "1485187882.001597"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "anybody please <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3635\/>",
        "ts": "1485188519.001598"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "+1 ^ I have reviewed this, would appreciate if others would as well",
        "ts": "1485191460.001599"
    },
    {
        "type": "message",
        "user": "U3UPDJXV2",
        "text": "<@U0XQ35CDD> this is very interesting.. \nwe are using kafka at my job.  But we are simply making the customers\/services auth before they are able to write.. what added security are we achieving with this system?  It almost seems like the benefits of this is to see if something has been tampered with, but I\u2019m wondering under what pretext could something be tampered with if you it\u2019s a permissioned based system in the first place.. if the nodes that are the oracles of this system allow something to be added that is fraudulent\/false it shouldn\u2019t allow the write to happen in the first place without the proper digital signature.. right?  I feel like the system will be severely compromised if this kind of activity were able to take place, and hashes and such could be re-written with signatures to rewrite events.. like to hear your thoughts.",
        "ts": "1485194451.001600"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "<@U3UPDJXV2>: Isn't tampering orthogonal to whether the system is permission-based or not?",
        "ts": "1485194600.001601"
    },
    {
        "type": "message",
        "user": "U3UPDJXV2",
        "text": "isn\u2019t tampering relative\u2026 if a customer or service has a proper key\/ or has authed.. it looks legitimate when it writes or puts data into a topic right?",
        "ts": "1485194718.001602"
    },
    {
        "type": "message",
        "user": "U3UPDJXV2",
        "text": "i see it being extremely hard to go back and tamper with an entry in the generic sense of going back in and changing something in a kafka topic..",
        "ts": "1485194754.001603"
    },
    {
        "type": "message",
        "user": "U3UPDJXV2",
        "text": "it\u2019s an append only queue right?",
        "ts": "1485194770.001604"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U3UPDJXV2> although Kafka may not support modifying items which have been queued, there is no technical reason a sufficiently motivated attacker with access to the brokers could not do this, and there would be no way to detect or refute this change",
        "ts": "1485195015.001605"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Right, I imagine that given enough incentive this isn't impossible.",
        "ts": "1485195043.001606"
    },
    {
        "type": "message",
        "user": "U3UPDJXV2",
        "text": "<@U0XPR4NP4> good point, little green on this still.. how does fabric prevent this?  I was thinking you could just rewrite the hashes if needed and it would also be undetectable.",
        "ts": "1485195143.001607"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "You could absolutely rewrite history that way, which is where a periodic key rotation would come handy.",
        "ts": "1485195261.001608"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U3UPDJXV2> Anyone who already has a copy of the chain, could refute this, and would be able to trivially locate the change, based on where the hash chains diverge.  Additionally, because blocks are signed by the ordering service, the attacker would have to have access to the signing keys of the orderers and falsify a signature for every block.  But, yes, if the keys are compromised, a new chain could be forged.",
        "ts": "1485195297.001609"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "And as <@U0XQ35CDD> points out, if keys are periodically rotated (and destroyed) this should become impossible for blocks whose key has already been rotated",
        "edited": {
            "user": "U0XPR4NP4",
            "ts": "1485195397.000000"
        },
        "ts": "1485195328.001610"
    },
    {
        "type": "message",
        "user": "U3UPDJXV2",
        "text": "it seems like this kind of idea of fabric comes into handy when auditors or another party wants to be able to say with more assurety that something hasn\u2019t been tampered with very quickly. \nkey rotation is mandated by protocol?  or does it kind of have a TTL?  i imagine a rotating key would just prevent bad new writes not rewrites",
        "ts": "1485195482.001612"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "I think what makes these arguments a bit difficult to digest is that we're parsing them in a Kafka (fully-trusted essentially) environment, where an attack is theoretically easier. Once you start parsing them in a BFT context where multiple signatures are needed, things become much more difficult for the attacker.",
        "ts": "1485195602.001613"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Indeed a rotating key would still allow you to rewrite up to a point. And then a hashchain would make it obvious that there's a point of divergence, assuming you know that for block 100 and onward you're supposed to be getting signatures from pubKey `foo`.",
        "ts": "1485195704.001614"
    },
    {
        "type": "message",
        "user": "U3UPDJXV2",
        "text": "<@U0XQ35CDD> this has been really helpful information.  Any thoughts or experiments on optimal *blocksize\/blocktimes*   (is this good terminology you are using in fabric?)",
        "ts": "1485195845.001615"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "There is a lot of work to be done there for sure. <@U0N1D1UAE> has done some great preliminary work on batch size (blocksize) <https:\/\/jira.hyperledger.org\/browse\/FAB-1171>, but that's all we have for now. We're almost there with adding functionality at this point. Next on my list is to add instrumentation, and then work on perf. evaluations and optimizations.",
        "edited": {
            "user": "U0XQ35CDD",
            "ts": "1485196356.000000"
        },
        "ts": "1485196151.001616"
    },
    {
        "type": "message",
        "user": "U3UPDJXV2",
        "text": "<@U0XQ35CDD> one more question.. forgot.. where does persisting state come in through couchdb?  isn\u2019t data persisted in kafka itself?",
        "ts": "1485198552.001618"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "<@U3UPDJXV2>: So Kafka is the message bus. It persists data, but not forever, unless the administrator chooses so. Once an ordering node gets the (orderer) messages from Kafka for a chain, it persists them locally in a CouchDB or what-have-you ledger instance.",
        "ts": "1485200148.001619"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "<@U3UPDJXV2>  It would probably help if you review the ledger overview charts in <https:\/\/jira.hyperledger.org\/browse\/FAB-758>",
        "ts": "1485200258.001620",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U3UPDJXV2"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U3UPDJXV2",
        "text": "<@U1KFCPFQA> i see _Ability to retrieve past values\/trans for key (simple provenance), uses new index into blockchain_ \nWhich part exactly is the blockchain? or the whole system is considered a blockchain?",
        "ts": "1485200522.001621"
    },
    {
        "type": "message",
        "user": "U1KFCPFQA",
        "text": "we often consider the whole system a blockchain and therefore we are usually specific, for example ledger is comprised of the block hash chain on the file system, some indexes into that (leveldb), as well as a state database in either leveldb or couchdb",
        "ts": "1485200649.001622"
    }
]