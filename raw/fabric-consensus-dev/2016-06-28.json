[
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "hah, i just ran into an issue where with N=1, F=0, i stopped the replica (probably while some requests were in flight), and now the replica won't process request anymore",
        "ts": "1467118491.001049"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "because lastExec is 4867, and seqNo is 4872",
        "ts": "1467118521.001050"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "maybe a view change would fix it?",
        "ts": "1467118545.001051"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "if somebody could look at the split-request-ingress branch",
        "ts": "1467120612.001052"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "<@U0XPR4NP4>, <@U0XQ35CDD>: you've been talking about the design",
        "ts": "1467120630.001053"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "having it in the external event receiver is ugly",
        "ts": "1467120642.001054"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0XR6J961>: Sure, I can take a look",
        "ts": "1467120676.001055"
    },
    {
        "text": "looking",
        "type": "message",
        "subtype": "me_message",
        "user": "U0XQ35CDD",
        "ts": "1467120681.001056"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "<https:\/\/github.com\/corecode\/fabric\/tree\/split-request-ingress>",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "corecode\/fabric",
                "title_link": "https:\/\/github.com\/corecode\/fabric\/tree\/split-request-ingress",
                "text": "Blockchain fabric code",
                "fallback": "GitHub: corecode\/fabric",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400",
                "from_url": "https:\/\/github.com\/corecode\/fabric\/tree\/split-request-ingress",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https:\/\/github.com\/apple-touch-icon.png",
                "id": 1
            }
        ],
        "ts": "1467120688.001057"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "so i'd appreciate some ideas how to improve that",
        "ts": "1467120690.001059"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "but it seems to be working",
        "ts": "1467120709.001060"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "meaning, it is closed loop now",
        "ts": "1467120730.001061"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yey",
        "ts": "1467120731.001062"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "without my hack",
        "ts": "1467120761.001063"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0XR6J961>: I discussed this some with <@U0XQ35CDD>, I could not figure out why you wanted to assign the ID in `external.go` instead of simply sending in the transaction",
        "ts": "1467121001.001064"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "it was the first data structure that came to my mind",
        "ts": "1467121028.001065"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i'm fine with whatever",
        "ts": "1467121037.001066"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Okay, then I think `external.go` can be cleaned up pretty simply",
        "ts": "1467121048.001067"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "the nice thing now is that we can reject duplicate transactions :slightly_smiling_face:",
        "ts": "1467121049.001068"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "which is more a protection of the data structure than anything else",
        "ts": "1467121075.001069"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0XR6J961> <@U0XQ35CDD> <@U0UGH3X7X> Anyone have a chance to look at <https:\/\/github.com\/hyperledger\/fabric\/pull\/2030> ?",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "Remove the sieve PBFT consensus plugin and all references to it by jyellick \u00b7 Pull Request #2030 \u00b7 hyperledger\/fabric \u00b7 GitHub",
                "title_link": "https:\/\/github.com\/hyperledger\/fabric\/pull\/2030",
                "text": "Description This changeset removes the code for the Sieve PBFT variant, as well as references to it, and 'classic' in both the documentation and tests. Motivation and Context Sieve and classic a...",
                "fallback": "GitHub: Remove the sieve PBFT consensus plugin and all references to it by jyellick \u00b7 Pull Request #2030 \u00b7 hyperledger\/fabric",
                "thumb_url": "https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400",
                "from_url": "https:\/\/github.com\/hyperledger\/fabric\/pull\/2030",
                "thumb_width": 420,
                "thumb_height": 420,
                "service_icon": "https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png",
                "id": 1
            }
        ],
        "ts": "1467121306.001070"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "(Actually, saw your remark <@U0UGH3X7X> we can post to slack before merge, but as we just forked off the release, no one seems to be too worried about potential breakage, if anyone wants something stable to play with, they should use the dev preview, as master is likely to be in serious flux)",
        "ts": "1467121397.001072"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "np ... good point about advertising on slack in advance",
        "ts": "1467121546.001073"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "oh man, closed loop",
        "ts": "1467121793.001074"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "so fantastic",
        "ts": "1467121795.001075"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0XR6J961>: Is it safe for me to base my work from your branch?",
        "ts": "1467122392.001076"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i think we should remove the closed loop hack first",
        "ts": "1467122435.001077"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "which is in the middle of the telemetry branch",
        "ts": "1467122445.001078"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "but you can also take the two commits and rebase them onto anything you want",
        "ts": "1467122470.001079"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "either way",
        "ts": "1467122472.001080"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Alright",
        "ts": "1467122506.001081"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i'll remove the hack and push again",
        "ts": "1467122586.001082"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "ok",
        "ts": "1467122674.001083"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Just cherry picked those commits onto a fork of the sieveless branch, hopefully good enough to work from there",
        "ts": "1467122721.001084"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "should i merge your sieveless branch?",
        "ts": "1467122953.001085"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "(Hope the answer is yes, I already have)",
        "ts": "1467122969.001086"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "okay",
        "ts": "1467122975.001087"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i can rebase on top of the sieveless branch",
        "ts": "1467122990.001088"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "If you guys vote your approval on the PR, we can probably get it pulled into master today",
        "ts": "1467123003.001089"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "I don't think it's an issue of lack of approvals, but a matter of Sheehan &amp; co. being backlogged",
        "ts": "1467123034.001090"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "jyellick: maybe you can merge your sieveless branch into my branch, that way we all have the same history",
        "ts": "1467123149.001091"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Sure, or just push your branch and I can rebase onto it",
        "ts": "1467123192.001092"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i did",
        "ts": "1467123212.001093"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "simon\/split-request-ingress ?",
        "ts": "1467123238.001094"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yep",
        "ts": "1467123251.001095"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Thanks",
        "ts": "1467123278.001096"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "so what is missing is function doc and tests",
        "ts": "1467123317.001097"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "but i guess you'll change that stuff anyways",
        "ts": "1467123328.001098"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "The reqqueue stuff?",
        "ts": "1467123409.001099"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yea",
        "ts": "1467123419.001100"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "That's the plan",
        "ts": "1467123468.001101"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "as for simplifying `RecvRequest` further, do we agree that this is as simple as it can go?\n\n```func (eer *externalEventReceiver) RecvRequest(tx *pb.Transaction) error {\n  &lt;- eer.reqQueue.GetReady()\n  eer.manager.Queue() &lt;- transactionEvent{tx}\n  return nil\n}```",
        "ts": "1467123536.001102"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "(and is that less ugly?)",
        "attachments": [
            {
                "fallback": "[June 28th, 2016 9:30 AM] simon: having it in the external event receiver is ugly",
                "author_subname": "simon",
                "ts": "1467120642.001054",
                "channel_id": "C0Z4NBUN6",
                "channel_name": "fabric-consensus-dev",
                "is_msg_unfurl": true,
                "text": "having it in the external event receiver is ugly",
                "author_name": "Simon Schubert",
                "author_link": "https:\/\/hyperledgerproject.slack.com\/team\/simon",
                "author_icon": "https:\/\/secure.gravatar.com\/avatar\/676aeb5acbd353b77e077be1b7bd1a6e.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0016-48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "color": "D0D0D0",
                "from_url": "https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1467120642001054",
                "is_share": true,
                "footer": "Posted in #fabric-consensus-dev"
            }
        ],
        "ts": "1467123556.001103"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "`WaitReady()` maybe",
        "ts": "1467123558.001104"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "right, that seems like a better method name",
        "ts": "1467123575.001105"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "(and I guess the thinking is that you call the reqQueue's `Register` from the manager's `ProcessEvent`)",
        "ts": "1467123666.001106"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I'd rather get the `reqQueue` out of `external.go` entirely, have it be a very simple channel logic in `external.go` and then deal with the more complicated stuff on the other side.\n\n```\nfunc (eer *externalEventReceiver) RecvRequest(tx *pb.Transaction) error {\n  eer.manager.Queue() &lt;- eer.createTxEvent(tx)\n  return nil\n}\n```",
        "ts": "1467123761.001107"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Where here `createTxEvent` waits for some channel to unblock",
        "ts": "1467123783.001108"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "but createTxEvent is still part of external.go?",
        "ts": "1467123828.001109"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "where that channel is the reqQueue's Ready channel I presume?",
        "ts": "1467123830.001110"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "if that's the case, where do you hold the reqQueue?",
        "ts": "1467123865.001111"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Yes, `createTxEvent` is still part of `external.go` but there's just a simple counter that PBFT can hit saying \"I've got a slot available\", and that call (`createTxEvent`) blocks unless that counter is greater than 0 (implemented as a buffered channel)",
        "edited": {
            "user": "U0XPR4NP4",
            "ts": "1467123932.000000"
        },
        "ts": "1467123913.001112"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "There would be no queueing on the `external.go` side.  If you want correct ordering, call it serially.",
        "ts": "1467123961.001114"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "where is the diffierence?",
        "ts": "1467123984.001115"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Purely that the queue state is managed inside of PBFT, rather than `external.go`",
        "ts": "1467124003.001116"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "so createTxEvent() would just do &lt;- somechannel",
        "ts": "1467124005.001117"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "More or less",
        "ts": "1467124011.001118"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "how do you envision counting and unblocking?",
        "edited": {
            "user": "U0XR6J961",
            "ts": "1467124073.000000"
        },
        "ts": "1467124066.001119"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "it still would be a buffered chan of the same size?",
        "ts": "1467124091.001121"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Yes",
        "ts": "1467124094.001122"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "okay",
        "ts": "1467124117.001123"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "That does look like a cleaner approach.",
        "ts": "1467124124.001124"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "aside: i want to start using panic() when a function is called incorrectly",
        "ts": "1467124156.001125"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "not about network data being incorrect, but function with incorrect data\/state",
        "ts": "1467124178.001126"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "It would make the code cleaner",
        "ts": "1467124228.001127"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "send an event before calling panic() ?",
        "ts": "1467124406.001128"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "what event?",
        "ts": "1467124434.001129"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "panic is just to abort the code because there is a clear programming bug",
        "ts": "1467124450.001130"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "using our event framework  ...  whoever's monitoring the network might not be sitting at a console",
        "ts": "1467124517.001131"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "whoever is running the network better have a pager connected to when a node crashes",
        "ts": "1467124538.001132"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "event would also automatically log reason for crash",
        "ts": "1467124643.001133"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "events log something?",
        "ts": "1467124682.001134"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "i would hope that there is a listener that is monitoring events from all peers",
        "ts": "1467124748.001135"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "An announcement for anyone who is still using the \"sieve\" or \"classic\" PBFT variants.\n\nThere is a pending PR ( <https:\/\/github.com\/hyperledger\/fabric\/pull\/2030> ) which removes the \"sieve\" and \"classic\" PBFT variants from the fabric master branch.  Unless there is some new opposition, hopefully this PR will be merged later today.\n\nAnyone relying on these PBFT variants in their own scripts or automation should modify them to use the \"batch\" PBFT mode.\n\n\n^ Was about to send this to the fabric mailing list, unless anyone has any suggestions?",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "Remove the sieve PBFT consensus plugin and all references to it by jyellick \u00b7 Pull Request #2030 \u00b7 hyperledger\/fabric \u00b7 GitHub",
                "title_link": "https:\/\/github.com\/hyperledger\/fabric\/pull\/2030",
                "text": "Description This changeset removes the code for the Sieve PBFT variant, as well as references to it, and 'classic' in both the documentation and tests. Motivation and Context Sieve and classic a...",
                "fallback": "GitHub: Remove the sieve PBFT consensus plugin and all references to it by jyellick \u00b7 Pull Request #2030 \u00b7 hyperledger\/fabric",
                "thumb_url": "https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400",
                "from_url": "https:\/\/github.com\/hyperledger\/fabric\/pull\/2030",
                "thumb_width": 420,
                "thumb_height": 420,
                "service_icon": "https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png",
                "id": 1
            }
        ],
        "ts": "1467127164.001136",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0UGH3X7X"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "go for it",
        "ts": "1467127192.001138"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "ship it",
        "ts": "1467127194.001139"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "and then we also remove noops",
        "ts": "1467127197.001140"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "and drop the `obc` prefix from the entire package",
        "ts": "1467127219.001141"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "oh you and your OCD :slightly_smiling_face:",
        "ts": "1467127233.001142"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "I've been getting better at it, but still, a long way to go admittedly.",
        "ts": "1467127256.001143"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Do we have a plan for ensuring that all replicas have the same config? There are some obvious misconfigurations, like mismatched checkpoint intervals which could break us, but some of the new stuff like 'outstandingrequests' being out of sync might also break things in subtle, not so easy to spot ways",
        "ts": "1467127694.001144"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "<https:\/\/github.com\/hyperledger\/fabric\/issues\/999>",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "configuration for consensus must be part of genesis block \u00b7 Issue #999 \u00b7 hyperledger\/fabric \u00b7 GitHub",
                "title_link": "https:\/\/github.com\/hyperledger\/fabric\/issues\/999",
                "text": "For strong consistency between new replicas, all consensus configuration must be the same. The genesis block and system chaincode can guarantee that only replicas that are configured identically w...",
                "fallback": "GitHub: configuration for consensus must be part of genesis block \u00b7 Issue #999 \u00b7 hyperledger\/fabric",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400",
                "from_url": "https:\/\/github.com\/hyperledger\/fabric\/issues\/999",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png",
                "id": 1
            }
        ],
        "ts": "1467127726.001145"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "I'm having the same concerns, which is why I resurfaced this during the weekend.",
        "ts": "1467127763.001147"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Step 4 is still not clear to me as I'd like it to be. I can make assumptions but I'm not sure about their validity. One way of interpreting it: the chain creator creates the genesis block (`$make genesis` or whatever). How is this distributed to all nodes? An off-band process (\"make sure you have this file in this directory before you bring up your node\"), or a process that happens during hand-shaking? Simon's last comment makes me think we're going for the former.",
        "ts": "1467128097.001148"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yes, of course",
        "ts": "1467128214.001149"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Bootstrapping is notoriously hard to do securely and automatically.  Even if we say \"make sure the config is the same when you first start so you get matching genesis blocks\" and then verify it on startup, it's effectively the same as distributing the genesis block.",
        "ts": "1467128277.001150"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0XR6J961> <@U0Y14MWA2> <@U0XV1HDL3> <@U0XQ35CDD> My reading of the paper indicates that a byzantine client could broadcast a request to only f+1 backups, and force a view change.  It could continue to do this indefinitely, forcing the network to constantly change views.  This seems like a problem to me? Is this something that has been addressed before?",
        "ts": "1467129017.001151"
    },
    {
        "type": "message",
        "user": "U0XV1HDL3",
        "text": "<@U0XPR4NP4>: referring to the PBFT paper? wouldnt the client in our case send the request to the leader first anyway, adn the leader inserts it into the system?",
        "ts": "1467129383.001152"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0XV1HDL3> I'm proposing a byzantine client, who is trying to slow the throughput of the system (And yes, to the Castro paper)",
        "edited": {
            "user": "U0XPR4NP4",
            "ts": "1467129461.000000"
        },
        "ts": "1467129420.001153"
    },
    {
        "type": "message",
        "user": "U0XV1HDL3",
        "text": "but, isnt the client here supposed to send it to the leader?",
        "ts": "1467129520.001155"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "The point is that a client can follow this tactic to overthrow a normally-functioning leader, correct?",
        "ts": "1467129643.001156"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Yes, maybe I am missing something here, but the client is byzantine, and intentionally not following the protocol.  So instead of broadcasting to all replicas, it is only broadcasting to f+1, which it knows are *not* the leader.",
        "ts": "1467129686.001157"
    },
    {
        "type": "message",
        "user": "U0XV1HDL3",
        "text": "certainly possible, sounds like things discussed in the Aardvark paper and \"Byzantine replication under attack\" by Yair Aimr et al",
        "ts": "1467129690.001158"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "My concern is that, because in the fabric scheme, the replicas themselves act as clients.  So, a single byzantine replica could essentially force a view change until that replica becomes the primary.  With f conspiring together, it seems that they could force the network usually be led by a byzantine replica.",
        "ts": "1467129811.001159"
    },
    {
        "type": "message",
        "user": "U0XV1HDL3",
        "text": "yes - read these 2 papers (aardvark = Making Byzantine Fault Tolerant Systems Tolerate Byzantine Faults)",
        "ts": "1467129905.001160"
    },
    {
        "type": "message",
        "user": "U0XV1HDL3",
        "text": "given the FLP impossibility in the asynchronous model, with enough asynchrony the system never gets anything useful done. only randomized can give this",
        "ts": "1467129952.001161"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I will try to give those papers a read.  Would you suggest that we simply ignore this sort of attack for the time being, or are there some proactive steps we can take now in development to make adapting to these easier in the future?",
        "ts": "1467130176.001162"
    },
    {
        "type": "message",
        "user": "U0XV1HDL3",
        "text": "ignore that for now",
        "ts": "1467130197.001163"
    },
    {
        "type": "message",
        "user": "U0XV1HDL3",
        "text": "the quick remedies are pretty simple, i recall, see papers",
        "ts": "1467130223.001164"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "<@U0XPR4NP4>",
        "ts": "1467133706.001165"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "not sure what PBFT is exactly doing - how client retransmission should be done is as follows",
        "ts": "1467133725.001166"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "client is supposed to resend to f+1 or more replicas",
        "ts": "1467133740.001167"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "who then forward the request to the primary",
        "ts": "1467133749.001168"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "and only then replicas fire the timer",
        "ts": "1467133756.001169"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "which prevents the scenario you are describing above",
        "ts": "1467133769.001170"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "now this may be departing from PBFT - and in this case yes this is a bug in the paper",
        "ts": "1467133794.001171"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "notice that other such bugs were discussed in <https:\/\/www.usenix.org\/conference\/nsdi-09\/making-byzantine-fault-tolerant-systems-tolerate-byzantine-faults>",
        "ts": "1467133831.001172"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "(I just saw that <@U0XV1HDL3> already pointed to that paper)",
        "ts": "1467133876.001173"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0Y14MWA2> I've been discussing with <@U0XQ35CDD>, and am becoming increasingly convinced, that unless requests are signed (so that their origin cannot be forged), many of these problems are not solvable.  In particular, in order to avoid executing requests multiple times, we must filter out requests we receive which are older than our 'last executed time' for that particular client.  This is because by the time we receive a request from a client, in an asynchronous network, the network may have already executed that request.  If a malicious client\/replica can forge a request from far in the future for a client, it may effectively censor that client indefinitely.",
        "edited": {
            "user": "U0XPR4NP4",
            "ts": "1467134287.000000"
        },
        "ts": "1467134105.001174"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "in HL fabric theory - client signs all requests",
        "ts": "1467134166.001176"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "however this is now done, I believe, only if \"security is turned on\"",
        "ts": "1467134187.001178"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "which painfully slows the things...",
        "ts": "1467134196.001179"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "so we need to revisit that going towards v2",
        "ts": "1467134213.001180"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "So I think the problem is that a HL fabric 'request' is a transaction, but PBFT operates on `Request` messages, which contain a transaction, plus some other information like originating replica.",
        "ts": "1467134237.001181"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "So, the actual `Request` structure is never signed, and consequently, any replica can forge a `Request` as originating from another replica in a scenario as you described such as \"forwarding to the primary\"",
        "ts": "1467134372.001183"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "the short answer is - PBFT request must be signed",
        "ts": "1467134382.001184"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "so we agree",
        "ts": "1467134388.001185"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "let's fix this in v2",
        "ts": "1467134394.001186"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Do you think we could instead use a scheme of REQUEST-ACK such as the VIEW-CHANGE-ACK described in the Castro paper?",
        "ts": "1467134425.001187"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "take a look at this one re client signatures  <https:\/\/www.usenix.org\/conference\/nsdi-09\/making-byzantine-fault-tolerant-systems-tolerate-byzantine-faults>",
        "ts": "1467134459.001188"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "it describes other attacks which are possible if you do not have client's signature (cf. BigMac attack)",
        "ts": "1467134480.001189"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "now I do not know what you refer to with REQ-ACK - but if this is too chatty as in all to all communication - I would not do it - signature is cleaner and better and simpler",
        "ts": "1467134531.001190"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Signed requests in v2 will align neatly with the signed view-change messages.",
        "edited": {
            "user": "U0XQ35CDD",
            "ts": "1467134999.000000"
        },
        "ts": "1467134564.001191"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "I think we have those <@U0XR6J961>",
        "ts": "1467134576.001192"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "We already do signatures, yes",
        "edited": {
            "user": "U0XPR4NP4",
            "ts": "1467134587.000000"
        },
        "ts": "1467134582.001193"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "because this is our departure from PBFT",
        "ts": "1467134587.001195"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "as unsigned view change msgs are merely an academic showcase",
        "edited": {
            "user": "U0Y14MWA2",
            "ts": "1467134662.000000"
        },
        "ts": "1467134601.001196"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "In the Castro paper, rather than sign view change messages, replicas reply to a VIEW-CHANGE with a VIEW-CHANGE-ACK, and a view change message is only considered to be valid after it has a quorum cert of VIEW-CHANGE-ACKs (or something similar)",
        "edited": {
            "user": "U0XPR4NP4",
            "ts": "1467134624.000000"
        },
        "ts": "1467134603.001197"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Right, right. I just sent Jason your slides on this yesterday.",
        "ts": "1467134603.001198"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "of the fact that it is possible to have signature-free protocol",
        "ts": "1467134616.001199"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "which was interesting at that time, for, well, academic reasons...",
        "ts": "1467134631.001201"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "so we dropped that early on",
        "ts": "1467134636.001202"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Right, I wasn't sure whether it was a coding optimization, or a performance one.",
        "ts": "1467134676.001204"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "I felt it is both :slightly_smiling_face:",
        "ts": "1467134686.001205"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "As certainly the implementation without signatures is more complicated.",
        "ts": "1467134687.001206"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "optimizing for the uncommon case rarely brings benefits",
        "ts": "1467134714.001207"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "and if it complicates the code - for me it was a no go",
        "ts": "1467134721.001208"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Right.",
        "ts": "1467134724.001209"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "This is why I was curious if such a scheme would be good for requests, as it is the common path.",
        "ts": "1467134741.001210"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "it is if client's signature is expensive for you",
        "ts": "1467134757.001211"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "to generate and verify",
        "ts": "1467134762.001212"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "for generation we do not care - client does it",
        "ts": "1467134770.001213"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "for verification - IMO it is much faster\/scalable than all to all chat",
        "ts": "1467134784.001214"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Ah, but the problem here is that the only clients are validating peers",
        "ts": "1467134800.001215"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "(ie replicas)",
        "ts": "1467134831.001216"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "yes - so they will have a bit more latency with a signature - but then again a decent signature is miliseconds",
        "ts": "1467134834.001217"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "all to all among consenters might be 100s of ms",
        "ts": "1467134843.001218"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "+ there is a BigMac issue described in that paper up there",
        "ts": "1467134907.001219"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "so conclusion of that paper - if you want stable performance - do have clients' signatures",
        "ts": "1467134927.001220"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Maybe for v2 we should be looking at having the client and consenter be truly different entities?",
        "ts": "1467134972.001221"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "this is the case, no?",
        "edited": {
            "user": "U0Y14MWA2",
            "ts": "1467135044.000000"
        },
        "ts": "1467134984.001222"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "client = peer",
        "ts": "1467134986.001223"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "consenter = consenter",
        "ts": "1467134990.001224"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "But today, the peer submits a fabric transaction, which is not a PBFT request.  Then, the PBFT replica receives that transaction, wraps it in a PBFT request, and submits it to the network, acting as a client.",
        "ts": "1467135045.001227"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "my intuition is that this is ok so long as one verifies fabric tx signature",
        "ts": "1467135109.001228"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "(not sure we do that though)",
        "ts": "1467135110.001229"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "this should be the TCert signature",
        "edited": {
            "user": "U0Y14MWA2",
            "ts": "1467135216.000000"
        },
        "ts": "1467135161.001230"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "the question is do we verify it in PBFT or not?",
        "ts": "1467135176.001231"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I do not believe that we do.",
        "ts": "1467135230.001233"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "```\nmessage Transaction {\n    enum Type {\n        UNDEFINED = 0;\n        \/\/ deploy a chaincode to the network and call `Init` function\n        CHAINCODE_DEPLOY = 1;\n        \/\/ call a chaincode `Invoke` function as a transaction\n        CHAINCODE_INVOKE = 2;\n        \/\/ call a chaincode `query` function\n        CHAINCODE_QUERY = 3;\n        \/\/ terminate a chaincode; not implemented yet\n        CHAINCODE_TERMINATE = 4;\n    }\n    Type type = 1;\n    \/\/store ChaincodeID as bytes so its encrypted value can be stored\n    bytes chaincodeID = 2;\n    bytes payload = 3;\n    bytes metadata = 4;\n    string uuid = 5;\n    google.protobuf.Timestamp timestamp = 6;\n\n    ConfidentialityLevel confidentialityLevel = 7;\n    string confidentialityProtocolVersion = 8;\n    bytes nonce = 9;\n\n    bytes toValidators = 10;\n    bytes cert = 11;\n    bytes signature = 12;\n}\n```\n\nThis is the transaction definition",
        "ts": "1467135327.001234"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "```\nmessage request {\n    google.protobuf.Timestamp timestamp = 1;  \/\/ Generated at the client level. Ensures that client's requests are atomically ordered.\n    bytes payload = 2;  \/\/ opaque payload\n    uint64 replica_id = 3;\n    bytes signature = 4;\n}\n```",
        "ts": "1467135349.001235"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "This is the request definition.",
        "ts": "1467135353.001236"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "ah so there are two signatures?",
        "ts": "1467135399.001237"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Well, it looks that way, but today, we do nothing to populate or validate the `Request` signaure",
        "ts": "1467135418.001238"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "One for the submitter, one for the validator.",
        "ts": "1467135419.001239"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "We could start doing this, but then we will be having two signatures, which seems suboptimal",
        "ts": "1467135449.001240"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "so request.payload is Transaction (from above)",
        "ts": "1467135477.001241"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Correct, marshaled via protobuf to a byte slice.",
        "ts": "1467135493.001242"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "But if the plan is to have the validator assign it a slot number, he needs to sign on that assignment. So you definitely need a validator signature.",
        "ts": "1467135503.001243"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "then we could verify Transaction.signature",
        "ts": "1467135526.001244"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "aha - what is slot?",
        "ts": "1467135532.001245"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "<@U0XQ35CDD>",
        "ts": "1467135535.001246"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0Y14MWA2>: This is a new concept",
        "ts": "1467135539.001247"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "creative :slightly_smiling_face:",
        "ts": "1467135545.001248"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "You can think of them as 'virtual clients'",
        "ts": "1467135545.001249"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "The problem we had was, per the PBFT paper, a client should only have one request in flight at a time",
        "ts": "1467135560.001250"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "It should wait until the request is fulfilled before submitting another one",
        "ts": "1467135570.001251"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "With multiple requests in flight, the primary can pick the later request to order first, and the network will believe that the second request is stale (because its time stamp is older), and effectively censor this second request.",
        "ts": "1467135615.001252"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "We suffer from this censorship problem today.",
        "ts": "1467135629.001253"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "The idea was to assign each submitted request to one of a finite number of 'slots', or 'virtual client ids' (I like 'slot', as it's shorter)",
        "ts": "1467135651.001254"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "So that you could have as many outstanding requests, as you had slots, and still solve the censorship problem.",
        "ts": "1467135668.001255"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "how about using not UTC timestamps but a counter",
        "ts": "1467135669.001256"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "so primary would not be able to do this",
        "ts": "1467135681.001257"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "(For more context on slots, they were first brought up here I think: <https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1466604480000530>)",
        "edited": {
            "user": "U0XQ35CDD",
            "ts": "1467135868.000000"
        },
        "ts": "1467135719.001258"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "(because holes could be detected)",
        "ts": "1467135724.001260"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I briefly considered a counter, I think the problem is that a client may not always be sure if its request was processed.",
        "ts": "1467135779.001262"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Imagine the replica crashes, or is too slow.",
        "ts": "1467135788.001263"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Then the replica would be unsure of what its counter's value should truly be at.",
        "ts": "1467135805.001264"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "(Because the network may have executed his requests, or not, it has no way to know)",
        "ts": "1467135818.001265"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "hmmm...",
        "ts": "1467135828.001266"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "don't we implement consensus :slightly_smiling_face:",
        "ts": "1467135834.001267"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "anyway seems we are going in the direction of including FIFO into consensus total order",
        "ts": "1467135889.001269"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "there is a precedence for this - a very practical system actually doing this",
        "ts": "1467135902.001270"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "(albeit in crash)",
        "ts": "1467135906.001271"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "it is Zookeeper",
        "ts": "1467135910.001272"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "so I cannot recall exactly how they do it - but we may want to peek @ <https:\/\/www.semanticscholar.org\/paper\/Zab-High-performance-broadcast-for-primary-backup-Junqueira-Reed\/b02c6b00bd5dbdbd951fddb00b906c82fa80f0b3\/pdf>",
        "attachments": [
            {
                "title": "Zab: High-performance broadcast for primary-backup systems (PDF) - Semantic Scholar",
                "title_link": "https:\/\/www.semanticscholar.org\/paper\/Zab-High-performance-broadcast-for-primary-backup-Junqueira-Reed\/b02c6b00bd5dbdbd951fddb00b906c82fa80f0b3\/pdf",
                "text": "\u2014Zab is a crash-recovery atomic broadcast algorithm we designed for the ZooKeeper coordination service. ZooKeeper implements a primary-backup scheme in which a primary process executes clients operations and uses Zab to propagate the corresponding incremental state changes to backup processes 1. Due the dependence of an incremental state change on the sequence of changes previously generated, Zab must guarantee that if it delivers a given state change, then all other changes it depends upon must be delivered first. Since primaries may crash, Zab must satisfy this requirement despite crashes of primaries. Applications using ZooKeeper demand high-performance from the service, and consequently, one important goal is the ability of having multiple outstanding client operations at a time. Zab enables multiple outstanding state changes by guaranteeing that at most one primary is able to broadcast state changes and have them incorporated into the state, and by using a synchronization phase while establishing a new primary. Before this synchronization phase completes, a new primary does not broadcast new state changes. Finally, Zab uses an identification scheme for state changes that enables a process to easily identify missing changes. This feature is key for efficient recovery. Experiments and experience so far in production show that our design enables an implementation that meets the performance requirements of our applications. Our implementation of Zab can achieve tens of thousands of broadcasts per second, which is sufficient for demanding systems such as our Web-scale applications.",
                "fallback": "Zab: High-performance broadcast for primary-backup systems (PDF) - Semantic Scholar",
                "image_url": "https:\/\/www.semanticscholar.org\/img\/semantic_scholar_og.jpg",
                "from_url": "https:\/\/www.semanticscholar.org\/paper\/Zab-High-performance-broadcast-for-primary-backup-Junqueira-Reed\/b02c6b00bd5dbdbd951fddb00b906c82fa80f0b3\/pdf",
                "image_width": 476,
                "image_height": 250,
                "image_bytes": 62051,
                "service_icon": "https:\/\/www.semanticscholar.org\/img\/favicon.png",
                "service_name": "semanticscholar.org",
                "id": 1
            }
        ],
        "ts": "1467135990.001273"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "that said - let me have a look at slots",
        "ts": "1467136015.001275"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "ok so what I could quickly grasp is - slots can be seen to be a sort of a moving window on a counter?",
        "ts": "1467136150.001276"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "does that interpretation make sense?",
        "ts": "1467136156.001277"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I would say, slots are analogous to virtual clients.  Each slot holds a request until it is executed.  In this way, you can have as many requests in flight, as you have slots, without risking duplication or censorship.",
        "ts": "1467136235.001278"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "When the replica, acting as a client, generates a request, it picks a free slot to assign that request to.  In this way, it simulates that it had received this request from that virtual client.",
        "ts": "1467136274.001279"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "so my take on this is - stick with 1 request at a time for v0.5",
        "ts": "1467136286.001280"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "and lets add sth like slots w. FIFO for v2",
        "ts": "1467136295.001281"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Absolutely, this is all post 0.5",
        "ts": "1467136300.001282"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "but for v2 we do need also signatures",
        "ts": "1467136315.001283"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "clients' signatures",
        "ts": "1467136321.001284"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "(All the work from now on is post v0.5 by the way.)",
        "ts": "1467136326.001285"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "allowing multiple outstanding requests (w. FIFO) is a noble idea",
        "ts": "1467136343.001286"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "and should be implemented :slightly_smiling_face:",
        "ts": "1467136347.001287"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Yes, I think we can definitely preserve the FIFO nature with slots.  I will think on switching to a counter over a timestamp, as although I think it may have some problems, it may have fewer than the timestamp.",
        "ts": "1467136424.001288"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "BTW, guys do have a look at ZAB paper and making BFT systems tolerate byzantine faults papers",
        "ts": "1467136439.001289"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "both are good stuff",
        "ts": "1467136444.001290"
    },
    {
        "type": "message",
        "user": "U0KM0C3M3",
        "text": "is there an interface specification for implementing a new\/different consensus algorithm?",
        "ts": "1467136464.001291"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "<@U0XQ35CDD> is the expert on specs :slightly_smiling_face:",
        "ts": "1467136496.001292"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "short answer is - yes",
        "ts": "1467136516.001293"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0KM0C3M3>: There is a protocol spec, but I think it is unfortunately a little outdated",
        "ts": "1467136528.001294"
    },
    {
        "type": "message",
        "user": "U0KM0C3M3",
        "text": ":point_left: :point_right:",
        "ts": "1467136532.001295"
    },
    {
        "type": "message",
        "user": "U0KM0C3M3",
        "text": ":slightly_smiling_face:",
        "ts": "1467136536.001296"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Look into the spec, section 3.4",
        "ts": "1467136549.001297"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "see sec 5 of <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/protocol-spec.md>",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "hyperledger\/fabric",
                "title_link": "https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/protocol-spec.md",
                "text": "fabric - Fabric is a blockchain project in Incubation proposed to the community and documented at <https:\/\/goo.gl\/RYQZ5N>. Information on what Incubation entails can be found in the Hyperledger Proj...",
                "fallback": "GitHub: hyperledger\/fabric",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400",
                "from_url": "https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/protocol-spec.md",
                "thumb_width": 142,
                "thumb_height": 142,
                "service_icon": "https:\/\/github.com\/apple-touch-icon.png",
                "id": 1
            }
        ],
        "ts": "1467136552.001298"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "But as Marko said it is outdated.",
        "ts": "1467136555.001300"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "for the outdated hint",
        "ts": "1467136556.001301"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "for an outlook in how the interface will look like - down the road have a look here <https:\/\/github.com\/hyperledger\/fabric\/wiki\/Next-Consensus-Architecture-Proposal>",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "hyperledger\/fabric",
                "title_link": "https:\/\/github.com\/hyperledger\/fabric\/wiki\/Next-Consensus-Architecture-Proposal",
                "text": "fabric - Fabric is a blockchain project in Incubation proposed to the community and documented at <https:\/\/goo.gl\/RYQZ5N>. Information on what Incubation entails can be found in the Hyperledger Proj...",
                "fallback": "GitHub: hyperledger\/fabric",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400",
                "from_url": "https:\/\/github.com\/hyperledger\/fabric\/wiki\/Next-Consensus-Architecture-Proposal",
                "thumb_width": 142,
                "thumb_height": 142,
                "service_icon": "https:\/\/github.com\/apple-touch-icon.png",
                "id": 1
            }
        ],
        "ts": "1467136606.001302"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "so we have an outlook and dated specs - but not the current one :slightly_smiling_face:",
        "ts": "1467136629.001304"
    },
    {
        "type": "message",
        "user": "U0KM0C3M3",
        "text": "<http:\/\/www.swirlds.com\/developer-resources\/whitepapers\/> - crossposting here from <#C0J02NU1E>",
        "attachments": [
            {
                "service_name": "Swirlds",
                "title": "Whitepapers - Swirlds",
                "title_link": "http:\/\/www.swirlds.com\/developer-resources\/whitepapers\/",
                "text": "See the latest whitepapers about Swirlds such as: Overview of Swirlds Hashgraph, Swirlds and Sybil Attacks, and Dictatorship, Democracy, and Blockchain.",
                "fallback": "Swirlds: Whitepapers - Swirlds",
                "thumb_url": "http:\/\/www.swirlds.com\/wp-content\/uploads\/2016\/05\/Fotolia_101984598_Subscription_XXL.jpg",
                "from_url": "http:\/\/www.swirlds.com\/developer-resources\/whitepapers\/",
                "thumb_width": 1000,
                "thumb_height": 667,
                "service_icon": "http:\/\/www.swirlds.com\/favicon\/apple-touch-icon-57x57.png",
                "id": 1
            }
        ],
        "ts": "1467136676.001305"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "that one is still on my \"to read\" list...",
        "ts": "1467136718.001307"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "I am still trying to wrap my head around the \"Attacking PBFT\" section in Miller's paper, but that's another story I guess.",
        "ts": "1467136806.001308"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "in the meantime - informed, brief reviews welcome here",
        "ts": "1467136807.001309"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "or perhaps we can open a #reading-section channel :slightly_smiling_face:",
        "ts": "1467136893.001310"
    },
    {
        "user": "U18U45W48",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U18U45W48|davidjhowie> has joined the channel",
        "ts": "1467151945.001311"
    }
]