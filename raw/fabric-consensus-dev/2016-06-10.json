[
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "so #1741 = non-det genesis blocks?",
        "ts": "1465552297.000450"
    },
    {
        "type": "message",
        "user": "U0Y14MWA2",
        "text": "bcs timestamps?",
        "ts": "1465552309.000451"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yep",
        "ts": "1465552560.000452"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "is the thought that each node will generate its own genesis block?",
        "ts": "1465556610.000453"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "that or for provisioning, the genesis block is created in one place and imported on all nodes, i'd say",
        "ts": "1465557305.000454"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "but i don't think there is any plan for that",
        "ts": "1465557313.000455"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i don't think anybody even thought about this",
        "ts": "1465557323.000456"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "thats hows its done for most blockchains and I assumed would be the case here too",
        "ts": "1465557333.000457"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "personally, i think its fine to assume that\u2026so if that simplifies anything w.r.t. 1741...",
        "ts": "1465557385.000458"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i'd say it is a requirement",
        "ts": "1465557418.000459"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "and all settings need to be driven from that genesis block",
        "ts": "1465557435.000460",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0KPFAZNF"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "all settings that influence chain creation",
        "ts": "1465557444.000461"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "totally agree",
        "ts": "1465557450.000462"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "though it might be nice to properly delineate settings that influence genesis block creation and settings that are used dynamically over the lifetime of the system",
        "ts": "1465557518.000463"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "(if there are any)",
        "ts": "1465557525.000464"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "im thinking something like the seed\/root nodes needs to be dynamic minimally",
        "ts": "1465557545.000465"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i'd say the genesis block shouldn't be created implicitly",
        "ts": "1465557546.000466"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "but explicitly, and imported explicitly",
        "ts": "1465557559.000467"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "agreed, it should be an explicit operation",
        "ts": "1465557560.000468"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "yep",
        "ts": "1465557564.000469"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "i havent looked, but i am assuming that there isnt currently an external representation of a block?",
        "ts": "1465557704.000470"
    },
    {
        "type": "message",
        "user": "U0KPFAZNF",
        "text": "(i.e. the system detects that the db is empty is emits a genesis block straight to the ledger)",
        "ts": "1465557734.000471"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "<https:\/\/github.com\/hyperledger\/fabric\/issues\/1784>",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "genesis block should be created explicitly and (separately) imported explicitly \u00b7 Issue #1784 \u00b7 hyperledger\/fabric \u00b7 GitHub",
                "title_link": "https:\/\/github.com\/hyperledger\/fabric\/issues\/1784",
                "text": "Description At the moment the genesis block is created implicitly when a peer starts the first time with an empty blockchain. This can lead to surprising problems: #1741. All peers in the netw...",
                "fallback": "GitHub: genesis block should be created explicitly and (separately) imported explicitly \u00b7 Issue #1784 \u00b7 hyperledger\/fabric",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400",
                "from_url": "https:\/\/github.com\/hyperledger\/fabric\/issues\/1784",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png",
                "id": 1
            }
        ],
        "ts": "1465557887.000472",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0KPFAZNF"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U0XR6J961> <@U0KPFAZNF> with the Lifecycle work  we were considering not having system cc depoy transaction on the ledger at all.  (especially  for \u201cupgrade\u201d issues)",
        "ts": "1465561342.000474"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "do you think - at least for now - we should go ahead with that plan ? Basically treat system chaincode the same way we would treat the fabric itself",
        "ts": "1465561433.000475"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i don't know what you mean",
        "ts": "1465561445.000476"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "what is the terminology?",
        "ts": "1465561460.000477"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "ledger is blockchain?",
        "ts": "1465561464.000478"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "or ledger is blocks?",
        "ts": "1465561476.000479"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "or state?",
        "ts": "1465561485.000480"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "system chaincode deploy transaction does not go through consensus. Each peer brings it up outside of consensus. So we can take the next step and not write the deploy transaction on the genesis block",
        "ts": "1465561619.000481"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "by doing that we are treating the system chaincode as part of the fabric in some sense. So \u201cupgrade\u201d of sys cc would have the same considerations as upgrade of the fabric itself",
        "ts": "1465561693.000482"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "but how do you invoke system chaincode then?",
        "ts": "1465561753.000483"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "how do you know it is enabled?",
        "ts": "1465561762.000484"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "invoke will work or fail depending on the sys cc is installed or not, no ?",
        "ts": "1465561818.000485"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "I have a branch where I was playing with the sys cc not being on the block",
        "ts": "1465561879.000486"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "what determines whether it is registered or not?",
        "ts": "1465562020.000487"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "it is registered if its in the core.yaml and hooked up via code",
        "ts": "1465562365.000488"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "and if it is not, invokes and queries will fail",
        "ts": "1465562380.000489"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yea no",
        "ts": "1465562686.000490"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "we need to make sure that all replicas are the same",
        "ts": "1465562695.000491"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "it's fine as a prototype to have it in core.yaml",
        "ts": "1465562721.000492"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "but for production, this needs to come from the ledger itself",
        "ts": "1465562733.000493"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "which chaincode is enabled",
        "ts": "1465562738.000494"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "otherwise different peers might run different chaincode",
        "ts": "1465562753.000495"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "yea, I can see how that might be a good separation.",
        "ts": "1465562887.000496"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "that\u2019s a different problem from having the dep. transaction on the block",
        "ts": "1465562950.000497"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "so maybe we don't need a deploy transaction",
        "ts": "1465562955.000498"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "yeah",
        "ts": "1465562960.000499"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "but we need some form of registration",
        "ts": "1465562961.000500"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "yea",
        "ts": "1465562965.000501"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "didn't we want to move chaincode into the state?",
        "ts": "1465562973.000502"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "yes",
        "ts": "1465563010.000503"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "the dep transaction",
        "ts": "1465563019.000504"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U0Z541B3P> already did that work when we played with the things needed for \u201clife cycle\"",
        "ts": "1465563067.000505"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "(of course not in the main branch)",
        "ts": "1465563078.000506"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i don't quite understand how we can remove the data from the deploy transaction",
        "ts": "1465563174.000507"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i guess it would be both in the transaction, and in the state",
        "ts": "1465563186.000508"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0XR6J961>: <@U0UGH3X7X> <@U0XQ35CDD> <https:\/\/github.com\/hyperledger\/fabric\/pull\/1785>",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "Add executor service by jyellick \u00b7 Pull Request #1785 \u00b7 hyperledger\/fabric \u00b7 GitHub",
                "title_link": "https:\/\/github.com\/hyperledger\/fabric\/pull\/1785",
                "text": "Description This changeset introduces the new executor service advertised in PR #1758. It adds an API for asynchronously invoking executions, commits, and state transfer. This changeset tries to...",
                "fallback": "GitHub: Add executor service by jyellick \u00b7 Pull Request #1785 \u00b7 hyperledger\/fabric",
                "thumb_url": "https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400",
                "from_url": "https:\/\/github.com\/hyperledger\/fabric\/pull\/1785",
                "thumb_width": 420,
                "thumb_height": 420,
                "service_icon": "https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png",
                "id": 1
            }
        ],
        "ts": "1465565357.000509"
    },
    {
        "user": "U1AU8DRQR",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U1AU8DRQR|hgabor> has joined the channel",
        "ts": "1465571455.000511"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "jyellick: you around?",
        "ts": "1465578717.000512"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I am",
        "ts": "1465578733.000513"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "(<@U0XR6J961>)",
        "ts": "1465578745.000514"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "hi",
        "ts": "1465578747.000515"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "so i'm trying to test the broadcaster stuff",
        "ts": "1465578759.000516"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "and something is odd with state transfer",
        "ts": "1465578765.000517"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "it transfers to a point, and it has entries for the rest in its certstore, but i think it is missing a commit cert",
        "ts": "1465578802.000518"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "and then it just sits there",
        "ts": "1465578809.000519"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "sending prepares and commits",
        "ts": "1465578821.000520"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "but unable to execute",
        "ts": "1465578826.000521"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "not sure whether this is expected or not",
        "ts": "1465578851.000522"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Hmm, so, I suppose it is possible that we request transfer to a point, but we've already missed some messages and will basically need to wait for state transfer to trigger again",
        "ts": "1465578901.000523"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yea i guess that would be it",
        "ts": "1465578913.000524"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I'm not really sure how to avoid that.  We pre-emptively move our watermarks before picking a point to state transfer to, in the hope of capturing all needed messages",
        "ts": "1465578959.000525"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "But that's really just best effort, I don't think there's any way to guarantee that we've not missed any messages, in practice, I've never seen it fail, where are you seeing this?",
        "ts": "1465579049.000526"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "pausing a peer",
        "ts": "1465579085.000527"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "and then unpausing",
        "ts": "1465579088.000528"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "a subset of messages replays from tcp buffers",
        "ts": "1465579098.000529"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "and other buffers",
        "ts": "1465579103.000530"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I think this is expected then",
        "ts": "1465579280.000531"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I am trying to fix up complaints, because perceived stale requests end up getting dropped, and it is causing problems for us.  I am trying to move the deduplicator `Execute` check to filter out pre-prepares with stale requests, but I'm not sure how to reset the de-duplicator on view change, as it's valid to pre-prepare the same request multiple times in multiple views.",
        "ts": "1465579516.000532"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yea",
        "ts": "1465579623.000533"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "well",
        "ts": "1465579642.000534"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i've been there several times, it is difficult",
        "ts": "1465579669.000535"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "oh it seems that the primary isn't complaining to itself, so it will never send a complaint view change",
        "ts": "1465579911.000536"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "`[31m17:19:56.433 [consensus\/obcpbft] processMessage -&gt; ERRO 2456ESC[0m Unknown request: request:&lt;timestamp:&lt;seconds:1465579186 nanos:339740631 &gt; payload:...`",
        "ts": "1465579968.000537"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "wut",
        "ts": "1465579972.000538"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Yes, I've seen this....",
        "ts": "1465580107.000539"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "`[33m17:20:12.097 [consensus\/handler] SkipTo -&gt; WARN 1104ESC[0m State transfer is being called for, but the state has not been invalidated`",
        "ts": "1465580242.000540"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Is this in view change?",
        "ts": "1465580304.000541"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Yes, it looks like the view change state transfer code was not updated to mark the state as invalid, should be an easy one line fix",
        "ts": "1465580413.000542"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "All this code needs a serious overhaul, trying to minimize diffs by leaving in old interfaces is causing lots of cruft to build up",
        "ts": "1465580461.000543"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Oh, got it",
        "ts": "1465580994.000544"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Those `Unknown request` messages are benign",
        "ts": "1465581004.000545"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "If we're not the leader, we ignore the `Request` message, and fall through to the end",
        "ts": "1465581025.000546"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I'll fix",
        "ts": "1465581042.000547"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "(basically when one replica is in the wrong view, and thinks a backup is the primary, the backup will spew those messages)",
        "ts": "1465581508.000548"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "aha",
        "ts": "1465582120.000549"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "oh now i'm running into stale requests -_-",
        "ts": "1465586506.000550"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Yeah... am trying to clean that up",
        "ts": "1465587949.000551"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Wonder if we shouldn't just broadcast new requests into the network (not just to the primary), and count on the fact that since we have a periodic view change, they will all eventually be executed",
        "ts": "1465588003.000552"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "This deduplication complaining stuff is complicated",
        "ts": "1465588019.000553"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yea",
        "ts": "1465588367.000554"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "fine with me",
        "ts": "1465588381.000555"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "<https:\/\/github.com\/hyperledger\/fabric\/pull\/1793>",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "consensus: non-blocking broadcast by corecode \u00b7 Pull Request #1793 \u00b7 hyperledger\/fabric \u00b7 GitHub",
                "title_link": "https:\/\/github.com\/hyperledger\/fabric\/pull\/1793",
                "text": "Description Introduces a broadcaster service, which will block only for N-f replicas, so that a byzantine replica cannot halt the network. Motivation and Context Fixes #1056 How Has This...",
                "fallback": "GitHub: consensus: non-blocking broadcast by corecode \u00b7 Pull Request #1793 \u00b7 hyperledger\/fabric",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400",
                "from_url": "https:\/\/github.com\/hyperledger\/fabric\/pull\/1793",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png",
                "id": 1
            }
        ],
        "ts": "1465588885.000556"
    },
    {
        "user": "U0PV6MUD6",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U0PV6MUD6|sbrakev> has joined the channel",
        "ts": "1465592684.000558"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Tagged you in it, but here is a PR without complaints in batch, <https:\/\/github.com\/hyperledger\/fabric\/pull\/1798>",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "No complaints preview PR by jyellick \u00b7 Pull Request #1798 \u00b7 hyperledger\/fabric \u00b7 GitHub",
                "title_link": "https:\/\/github.com\/hyperledger\/fabric\/pull\/1798",
                "text": "This pull request is intended as a preview for stability, especially for @bcbrock in regards to issue #1091. There were several outstanding bugs in the logic of the complaints code, so this change...",
                "fallback": "GitHub: No complaints preview PR by jyellick \u00b7 Pull Request #1798 \u00b7 hyperledger\/fabric",
                "thumb_url": "https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400",
                "from_url": "https:\/\/github.com\/hyperledger\/fabric\/pull\/1798",
                "thumb_width": 420,
                "thumb_height": 420,
                "service_icon": "https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png",
                "id": 1
            }
        ],
        "ts": "1465600088.000559"
    }
]