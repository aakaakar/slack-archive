[
    {
        "type": "message",
        "user": "U12AHQ3NK",
        "text": "Is there any restrictions on Block size?Like in Bitcoin blockchain there is 1MB per block and it handles only 7transactions per seconds... what in case of OBC?",
        "ts": "1461574455.000574"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "you can configure how many transactions go into a block",
        "ts": "1461578709.000575"
    },
    {
        "user": "U13DAL5V5",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U13DAL5V5|wimtobback> has joined the channel",
        "ts": "1461584322.000576"
    },
    {
        "type": "message",
        "user": "U12AHQ3NK",
        "text": "and also the timeout ?",
        "ts": "1461586282.000577"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yes",
        "ts": "1461586825.000578"
    },
    {
        "type": "message",
        "user": "U12AHQ3NK",
        "text": "what happens when a peer on which chaincode is deployed  goes down?",
        "ts": "1461588179.000579"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "crashes, you mean?",
        "ts": "1461588219.000580"
    },
    {
        "type": "message",
        "user": "U12AHQ3NK",
        "text": "Yes",
        "ts": "1461588224.000581"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "then everything proceeds as normal",
        "ts": "1461588241.000582"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "unless more than f replicas don't answer",
        "ts": "1461588251.000583"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "then the network stops processing requests until there are 2f+1 replicas operating correctly again",
        "ts": "1461588270.000584"
    },
    {
        "type": "message",
        "user": "U12AHQ3NK",
        "text": "Ohh okay! ",
        "ts": "1461589287.000585"
    },
    {
        "type": "message",
        "user": "U12AHQ3NK",
        "text": "In case of obcpbft\/config.yaml what does N value signify?",
        "ts": "1461589597.000586"
    },
    {
        "type": "message",
        "user": "U0Z3BE0F5",
        "text": "number of peers in the network",
        "ts": "1461589616.000587"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0XR6J961>: Are you close to merging your crash fault tolerance work? Was going to rebase my single-threading work onto it if so",
        "ts": "1461594428.000588"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "oh, i didn't see that work",
        "ts": "1461594446.000589"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "am i tracking the wrong repo?",
        "ts": "1461594452.000590"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yes, i'm close",
        "ts": "1461594460.000591"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "No, I just have done it in a few different branches and not pushed anything",
        "ts": "1461594474.000592"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "ah",
        "ts": "1461594487.000593"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i'm having problems with state transfer",
        "ts": "1461594502.000594"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i fixed a couple of bugs",
        "ts": "1461594516.000595"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "now trying again",
        "ts": "1461594519.000596"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<https:\/\/github.com\/corecode\/fabric\/tree\/revert-executor> &lt;- the correct branch to rebase onto?",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "corecode\/fabric",
                "title_link": "https:\/\/github.com\/corecode\/fabric\/tree\/revert-executor",
                "text": "Blockchain fabric code",
                "fallback": "GitHub: corecode\/fabric",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400",
                "from_url": "https:\/\/github.com\/corecode\/fabric\/tree\/revert-executor",
                "thumb_width": 400,
                "thumb_height": 400,
                "id": 1
            }
        ],
        "ts": "1461594549.000597"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i just pushed a rebased version",
        "ts": "1461594558.000599"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "because of jeff's changes",
        "ts": "1461594564.000600"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "could you push your current changes?",
        "ts": "1461594604.000601"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I will try to get them pushed soon, rebasing may take me some time.  In your code I see this:\n\n```\n                go func() {\n                        instance.consumer.execute(idx.n, req.Payload)\n                        <http:\/\/logger.Info|logger.Info>(\"Replica %d finished execution %d, trying next\", instance.id, idx.n)\n                        instance.lock()\n                        defer instance.unlock()\n                        instance.execDone()\n                }()\n```",
        "ts": "1461594848.000602"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "What guarantees multiple of those goroutines from being started at the same time? And if nothing, what guarantees they execute in order?",
        "ts": "1461594883.000603"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "executeOne() will only run again if currentExec is nil",
        "ts": "1461594911.000604"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "which is set to nil by execDone()",
        "ts": "1461594928.000605"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "it's all an ad hoc state machine - i'd prefer if all of this was formalized using a declarative state machine",
        "ts": "1461594951.000606"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Okay, thanks",
        "ts": "1461594961.000607"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "do you have a suggestion how to make this more explicit and less open-coded?",
        "ts": "1461595013.000608"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Not off the top of my head, we just had that outstanding bug around dropping the lock before executions which was causing our executions to occur out of order",
        "ts": "1461595304.000609"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i guess this could go into a mini-executor",
        "ts": "1461595312.000610"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yea",
        "ts": "1461595316.000611"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Yes, it might be worth factoring out, `pbft-core.go` is complex enough as it is.",
        "ts": "1461595425.000612"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "right",
        "ts": "1461595430.000613"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "doesn't have to go into a separate package, but a separate \"object\" may be a good idea",
        "ts": "1461595460.000614"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "oh I realized that many patterns work well with embedding",
        "ts": "1461595476.000615"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "I didn't know enough go early on to use embedding effectively",
        "ts": "1461595494.000616"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "e.g. the omniproto could be used as a base for embedding",
        "ts": "1461595568.000617"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "instead of using these \"impl\" function pointers",
        "ts": "1461595590.000618"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "```14:47:22.035 [consensus\/obcpbft] restoreState -&gt; INFO 036\u001b[0m Replica 3 restored state: view: 0, seqNo: 31, lastExec: 0, pset: 1, qset: 0, reqs: 31```",
        "ts": "1461595837.000619"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "why lastExec 0?",
        "ts": "1461595842.000620"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "and then this: ```\u001b[33m14:47:39.387 [consensus\/statetransfer] tryOverPeers -&gt; WARN 18a\u001b[0m name:\"vp3\"  in tryOverPeers loop trying name:\"vp0\"  : name:\"vp3\"  got block 37 from name:\"vp0\"  with hash 81e3da4e5fe0d18f2a7fd662e8e982e1e7ab5ab5a36e73587f97b772f0546370424a6b7eee8f60304d37faf07171e3466506349995596e6ae7c28bbf782b5ac9, was expecting hash 763d71e4e31a313973c000ac68d0414f95ff87bc6efe9f66c662a880b81381d11d3a4b7fd18dcea25590adec5f8eee74fae9c0cc63f1e878cab4250cf9badb6b```",
        "ts": "1461595879.000621"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": ":disappointed:",
        "ts": "1461595884.000622"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i don't get it",
        "ts": "1461596039.000623"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i need an offline block explorer",
        "ts": "1461596044.000624"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "DUH",
        "ts": "1461596173.000625"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i didn't update batch yet",
        "ts": "1461596183.000626"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "wrong hash, why",
        "ts": "1461597916.000627"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "how do i even start to debug this",
        "ts": "1461597963.000628"
    },
    {
        "text": "dreams of distributed gdb",
        "type": "message",
        "subtype": "me_message",
        "user": "U0XR6J961",
        "ts": "1461597999.000629"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I usually find that things are an off by one error, try grep-ing for 'wrong' hash in the logs? You might find it belongs to an adjacent block?",
        "ts": "1461598211.000630"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yea i dunno",
        "ts": "1461598241.000631"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "trying delve now",
        "ts": "1461598246.000632"
    },
    {
        "type": "message",
        "user": "U12AHQ3NK",
        "text": "Am in correct on this ?The peer on which i deploy a chaincode becomes my primary replica?",
        "ts": "1461599397.000633"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "no",
        "ts": "1461599673.000634"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "all peers will deploy the chaincode",
        "ts": "1461599685.000635"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "the primary is just part of PBFT, and changes during network problems or incorrect behavior of the primary",
        "ts": "1461599720.000636"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "all validating peers are exactly the same",
        "ts": "1461599739.000637"
    },
    {
        "type": "message",
        "user": "U12AHQ3NK",
        "text": "ohh... what id the significance of N=\"4\" peers in the network? and also .yaml has 9 test VP's listed..can you please explain me their importance?",
        "ts": "1461599839.000638"
    },
    {
        "type": "message",
        "user": "U12AHQ3NK",
        "text": "is**",
        "ts": "1461599847.000639"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "N=4 means that there are 4 peers in the network",
        "ts": "1461599862.000640"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i don't know which yaml lists 9 test VPs",
        "ts": "1461599888.000641"
    },
    {
        "type": "message",
        "user": "U12AHQ3NK",
        "text": "membersrvc.yaml",
        "ts": "1461599954.000642"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "oh i don't know about membersvc",
        "ts": "1461600034.000643"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "membersrvc.yaml list userids that you can use when developing\/testing fabric  ... not meant to map to actual number of peers",
        "ts": "1461600036.000644"
    },
    {
        "type": "message",
        "user": "U12AHQ3NK",
        "text": "ohh so basically in dev-net environment i can start max 4 VP's",
        "ts": "1461600181.000645"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i have no idea about dev-net - i'd start a single one",
        "ts": "1461600261.000646"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "passed!",
        "ts": "1461600271.000647"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "jyellick: right on, off-by one regarding block height",
        "ts": "1461600281.000648",
        "reactions": [
            {
                "name": "simple_smile",
                "users": [
                    "U0XPR4NP4"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "right, devnet shows an example. You can start N &gt; 4 peers if you wish",
        "ts": "1461600377.000649"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "N=4 just happens to show how PBFT works if you allow 1 peer to go byzantine\/stop working",
        "ts": "1461600429.000650"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "nits7sid: do you want to work on consensus code, or on chaincode?",
        "ts": "1461600453.000651"
    },
    {
        "type": "message",
        "user": "U12AHQ3NK",
        "text": "Well i actually want to work on chaincode..But i had some queries on consensus which got solved..Thanks to <@U0XR6J961> and <@U0UGH3X7X>",
        "ts": "1461600830.000652"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "jyellick: what I pushed works for batch and classic.  working on sieve now",
        "ts": "1461600837.000653"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0XR6J961>: I still don't understand how your branch handles state transfer, what happens if you witness a weak checkpoint for seqNo 10, and then one for seqNo 20, passing them both to state transfer, how do you know which seqNo state transfer completes to?",
        "ts": "1461604346.000654"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yea, i just added a XXX for that",
        "ts": "1461604364.000655"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "it will have to retrieve the lastExec seqno from the block",
        "ts": "1461604380.000656"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "So seqNo is now in the consensusMetadata in the block?",
        "ts": "1461604398.000657"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yes",
        "ts": "1461604457.000658"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "How do you handle this for Sieve? (It used to be in the block, but we removed it explicitly to support Sieve)",
        "ts": "1461604528.000659"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "sieve uses the block height",
        "ts": "1461604788.000660"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "from the blockchain",
        "ts": "1461604791.000661"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "But Sieve could still have null requests? And this would cause the seqNo and block number to diverge?",
        "ts": "1461604982.000662"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I guess what I am getting at, is that Sieve will need to call into `pbft-core.go` to update the `lastExec` properly, and the block number does not help us there?",
        "ts": "1461605077.000663"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "sieve does not have null requests",
        "ts": "1461605195.000664"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yes, any state transfer needs to call (eventually) into pbft so that it can update lastexec",
        "ts": "1461605227.000665"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Why does Sieve rule out null requests? What if a byzantine primary skips a sequence number when it sends the pre-prepare, this will lead to a view change, and force the next primary to send a null request.  I didn't notice any inspection of the PBFT message to ensure that primary does not do this",
        "ts": "1461605427.000666"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "ah, that's a pbft request",
        "ts": "1461605458.000667"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i thought you meant sieve requests",
        "edited": {
            "user": "U0XR6J961",
            "ts": "1461605484.000000"
        },
        "ts": "1461605471.000668"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Ah, no, certainly Sieve does not allow null requests",
        "ts": "1461605489.000670"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "pbft null requests are fine, sieve itself uses the blockchain height for its blocknumber",
        "ts": "1461605514.000671"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "But at the completion of state transfer, how does Sieve know which PBFT sequence number the PBFT core has now `lastExec`-ed?",
        "ts": "1461605546.000672"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "pbft restores its state from the head block",
        "ts": "1461605558.000673"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "like it had just been restarted",
        "ts": "1461605563.000674"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "from the consensus metadata",
        "ts": "1461605582.000675"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "But if Sieve is consenting on the block hash, and the block contains the consensus metadata, which contains the PBFT sequence number, then how does Sieve pick the right info, prior to PBFT ordering?",
        "ts": "1461605641.000676"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i'm just using the last verify exec number",
        "ts": "1461605722.000677"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "it's not nice, but it works",
        "ts": "1461605734.000678"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "it's functionally the same as if verify+exec were in one double message",
        "ts": "1461605756.000679"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "But `Verify` is a Sieve message, not a PBFT one? (it doesn't have a sequence number?)",
        "ts": "1461605914.000680"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "(Sorry if I am being dense)",
        "ts": "1461605922.000681"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yes, but it comes through pbft",
        "ts": "1461606882.000682"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "and therefore provides a seqno that can be used to restore to",
        "ts": "1461606898.000683"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "It looks like the `Verify` is broadcast directly,  but the `VerifySet` comes through as a pbft message which would have a sequence number, so I'm guessing you were talking about.  So block `n`, would contain the consensus metadata that actually went into  block `n-1`? How then do you actually recover the sequence number which corresponds to a state transfer to block `n`?",
        "ts": "1461608272.000684"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "ah yes, sorry",
        "ts": "1461608395.000685"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "verifyset",
        "ts": "1461608398.000686"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "you're just one off",
        "ts": "1461608425.000687"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "But you don't know if there was a null request? You could be 20 off?",
        "ts": "1461608440.000688"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yes, you could be",
        "ts": "1461609376.000689"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "but if they execute, all is fine",
        "ts": "1461609384.000690"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "because they're null requests",
        "ts": "1461609392.000691"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I guess the problem I am seeing is:\n\nvp0,1,2 in network, vp0 byzantine and primary, at block 8, seqNo 8\nvp0 deliberately skips seqNo 9 and sends pre-prepare for seqNo 10, for block 9 (which gets a commit cert)\nThis triggers a view change, and new primary vp1 is forced to queue null request, and skip seqNo 9, as seqNo 10 has a commit certificate and it is for block 9.\nThe network now has a stable checkpoint for seqNo 10, corresponding to block 9, which has consensus metadata of seqNo 8.\nvp3 rejoins the network after crash, vp0 decides now to ignore all requests.\nEventually, because of view change, vp3 gets the last stable checkpoint to transfer to, which corresponds to block 9 (seqNo 10), so it performs a state transfer to this point, and sets its seqNo to 8+1 (according to the consensus metadata).  Its sequence number is now out of sync, and the network will never make progress, as byzantine vp0 has effectively tricked vp3 into a bad state (and now f=2).",
        "ts": "1461610532.000692"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "which seqno is set?",
        "ts": "1461610616.000693"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "lastexec?",
        "ts": "1461610621.000694"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Yes",
        "ts": "1461610631.000695"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "(the above is for k=10 as our defaults, if it was not clear)",
        "ts": "1461610677.000696"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "sorry, i don't understand",
        "ts": "1461610739.000697"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "can you write a step by step sequence?",
        "ts": "1461610749.000698"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i think you're saying that because state transfer catches up to seqno 10, so should lastexec?",
        "ts": "1461610832.000699"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Is it alright if I start from:\n\nThe network now has a stable checkpoint for seqNo 10, corresponding to block 9, which has consensus metadata of seqNo 8.\n\n?",
        "ts": "1461610929.000700"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yes",
        "ts": "1461610947.000701"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i think i know what you mean",
        "ts": "1461610953.000702"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "so state transfer needs to get the tag to play forward to, and then pass this tag to the callback",
        "ts": "1461611022.000703"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "but will that solve all issues?",
        "ts": "1461611029.000704"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Yes, so that is why state transferred got enhanced to take that interface, which it would pass back to the caller so that it knew which point was transferred to.",
        "ts": "1461611075.000705"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "right - that will be easy",
        "ts": "1461611152.000706"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "what if sieve needs to sync?",
        "ts": "1461611185.000707"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Yes, this is exactly why the executor had that wrapping pattern for checkpoint IDs.  The executor would generate an ID which embedded the block hash and sequence number.  Then, Sieve would wrap that ID with its own block number information, before passing it into pbft-core as the checkpoint",
        "ts": "1461611232.000708"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "That was the big point of the executor, was eliminating the sync logic from PBFT and plugins, that on sync completion only the executor had to manipulate itself, the core and plugins manipulated their own state and initiation of state transfer, so the callbacks were not needed.",
        "ts": "1461611441.000709"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Otherwise, there will need to be some other sort of cooperation mechanism between pbft and plugin to ensure that everything both pieces need for that callback gets embedded",
        "ts": "1461611519.000710"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "probably not needed, because sieve can restore its state from the blockchain",
        "ts": "1461611557.000711"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "it would be nice if pbft could do the same",
        "ts": "1461611581.000712"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Agreed, but Sieve seems to make that impossible, as we need to compute the block before PBFT has been invoked, so we can't embed the PBFT state in there.",
        "ts": "1461611618.000713"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "we can, just an earlier state",
        "ts": "1461611639.000714"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "which sieve can deal with",
        "ts": "1461611654.000715"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "But then we have the problem I just described, where the PBFT state changes in an unlikely way (such as null requests)",
        "ts": "1461611664.000716"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "hmm i may have made an incorrect change anyways",
        "ts": "1461611709.000717"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "stopping timer on commit certificate reception",
        "ts": "1461611719.000718"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "not on execute",
        "ts": "1461611721.000719"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "but we can't stop on execute, because they take forever (deploy)",
        "ts": "1461611736.000720"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "so i don't know",
        "ts": "1461611753.000721"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "hm yes",
        "ts": "1461616005.000722"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "jyellick: indeed.  it already doesn't work for the behave test.  sieve retrieves an older exec and then pbft can't commit",
        "ts": "1461616036.000723"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i'm pondering a nasty hack",
        "ts": "1461616051.000724"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "What sort of hack?",
        "ts": "1461616092.000725"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "(other than nasty, of course)",
        "ts": "1461616103.000726"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i thought about adding 1 to the seqno stored by sieve",
        "ts": "1461616445.000727"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "but i'll try the tag first",
        "ts": "1461616450.000728"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "it won't help with a replica restarting though",
        "ts": "1461616460.000729"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "that's a problem",
        "ts": "1461616469.000730"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "imagine all replicas crash except for one",
        "ts": "1461616476.000731"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "and restart",
        "ts": "1461616478.000732"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "they will be one behind and won't ever catch up",
        "ts": "1461616496.000733"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "my at&amp;t vpn doesn't work",
        "ts": "1461616542.000734"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Yes, the crash scenario remains a problem.",
        "ts": "1461616740.000735"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "(for what it's worth, VPN here seems fine)",
        "ts": "1461616754.000736"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "So here is a question for you <@U0XR6J961>, I have pbft-core doing everything on a single thread, driven by channels now.  In ordinary operations, it sits in a select waiting for one of those channels to send a message, and then does the work.  The problem this causes with all of our existing test cases is that `process()` assumes that the thread which sends the message is consumed, so it immediately goes to check if things are idle, and they are, because the thread in the select hasn't had a chance to do anything.",
        "ts": "1461616905.000737"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I initially added yet another boolean that could be checked, but it is a race.  There is the idle channel type pattern which I used before, but am not crazy about, and I saw you had removed it from `process()`, how would you suggest I get `process()` to block?",
        "ts": "1461616976.000738"
    },
    {
        "user": "U13JUH485",
        "type": "message",
        "subtype": "channel_join",
        "text": "<@U13JUH485|fabio> has joined the channel",
        "ts": "1461617675.000739"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0XR6J961>: Everything's not passing yet, but if you are eager to take a look, you can see my issue-973 branch",
        "ts": "1461621748.000740"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "cool",
        "ts": "1461622121.000741"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "it's past midnight here",
        "ts": "1461622126.000742"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "so i'll have a look tomorrow",
        "ts": "1461622131.000743"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "```22:03:57.884 [consensus\/obcpbft] executeVerifySet -&gt; INFO 64c\u001b[0m Decision successful, but our output does not match (0826124039f938d3f299e917e859e9611c4d31d41336be61842cdd3ef944e38fa201ab8d00bcc5143c602794a1ae1d33495c7a489931ee6e2741787f4afb9f2ff001ba1a1a400b70443534fd04f0e73aa20148edd33f6e5672d311bb37f0718f1f5a156ff8c6bc2c5f033158e2a2178c73c85b2934954ab73bb84f66e257ed8c41670247fffc) vs (082612404c63aaba876263c7f6fbd635ab1fce88ede426806f8e8d601d4eb50b122f6f9b9eccbe0923fb881ec000bc263a4614f17067f677e990f5aa0c7221f35fdffc931a400b70443534fd04f0e73aa20148edd33f6e5672d311bb37f0718f1f5a156ff8c6bc2c5f033158e2a2178c73c85b2934954ab73bb84f66e257ed8c41670247fffc)\n```",
        "ts": "1461622525.000744"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "hmmm",
        "ts": "1461622527.000745"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "why?",
        "ts": "1461622528.000746"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "this is going to be so much pain",
        "ts": "1461622686.000747"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "to make this work reliably",
        "ts": "1461622690.000748"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i think exec needs to go into pbft",
        "ts": "1461622845.000749"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "but there was some reason marko told me",
        "ts": "1461622857.000750"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "if we just can treat the sieve commits as checkpoints",
        "ts": "1461622961.000751"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "that would be great",
        "ts": "1461622965.000752"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "they effectively are",
        "ts": "1461622994.000753"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "they even carry the previous block hash...",
        "ts": "1461623006.000754"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "which means that we should be able to seek to every block",
        "ts": "1461623050.000755"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i need to move the execDone out to make it completely asynchronous",
        "ts": "1461623071.000756"
    }
]