[
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "Hi, <@U0XQ35CDD>, <@U0ULK2JPP>; correct there was a thought of having chainid as the hash of the genesis config content (assuming that it is equipped with a nonce or sequence number of requested chains per participant). This just had the advantage, that it could be pre-computed by the application that submits the config block, that could henceforth bind a chain to its configuration data. Proper encoding would avoid the use of non-acceptable chars.",
        "ts": "1481011497.000095"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "But it is true that it is also not the friendliest of identifiers. So a user-friendly name may nevertheless be needed :slightly_smiling_face: Up to you.",
        "ts": "1481011540.000096"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "Hi <@U0UGH3X7X>, what happened with <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2605\/>? Are you still working on it?",
        "ts": "1481012804.000097"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "hi <@U0ZR63HLK>, i'm redoing the genesis block create tool  and  2605 as well  ... anything you need me to do there ?",
        "ts": "1481032068.000098"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U1BC5A0F9> chain ID is going to be in every proposal, every transaction\u2026 would the length be any concern ?",
        "ts": "1481032995.000099"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "Hi <@U0ULK2JPP>: hm,  hash output can be 128\/256 bits. Do you consider that be too long?",
        "ts": "1481033540.000100"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "not sure\u2026 just asking, that\u2019s all",
        "ts": "1481033559.000101"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "<@U0UGH3X7X>, just pushed a cleaner version of the protos\/golang schemas for config in a new changeset. <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3015\/>",
        "ts": "1481033577.000102"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "Just fyi :slightly_smiling_face:",
        "ts": "1481033581.000103",
        "reactions": [
            {
                "name": "innocent",
                "users": [
                    "U0UGH3X7X"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "I wouldn;t say its long at all but does depend upon the average size",
        "ts": "1481033584.000104"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "thanks elli !",
        "ts": "1481033625.000105"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "<@U1BC5A0F9> <@U0ZR63HLK> <@U0XPR4NP4>   do you want to put  ChainInitConfig inside one configurationItem ?  or have separate configurationItems for MSPManager, gossipAnchors etc ... ? probably easier to treat it as one big configurationItem ?",
        "ts": "1481034601.000106"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I thought we had decided on individual config items per MSP",
        "ts": "1481034643.000107"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "Ok, so it would be",
        "ts": "1481034676.000108"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "- one config item per MPS",
        "ts": "1481034691.000109"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "(including the entire config of that msp: what is described in the schema as MSPConfig)",
        "ts": "1481034715.000110"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "- one config item for chain configuration including: readers, writers, admins, and available MSPs?",
        "ts": "1481034748.000111"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "That seems too coarse to me",
        "edited": {
            "user": "U0XPR4NP4",
            "ts": "1481034770.000000"
        },
        "ts": "1481034762.000112"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "But for the beginning it may be fine",
        "ts": "1481034770.000114"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "since we only have one admin",
        "ts": "1481034775.000115"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "or one admin list",
        "ts": "1481034780.000116"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I was about to comment on the changeset, but I think we should take this much more incrementally",
        "ts": "1481034789.000117"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Let's start simply by defining the MSPs, and a policy for who is allowed to `Broadcast`, I assume this is equivalent to writers?",
        "ts": "1481034830.000118"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "Correct.",
        "ts": "1481034845.000119"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "But why would we need to define a policy  if this is a hardcoded one?",
        "ts": "1481034860.000120"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I still don't understand what it means for the policy to be hardcoded",
        "ts": "1481034890.000121"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "That is if we say whenever one is to check if X has permission to broadcast check that list.",
        "ts": "1481034896.000122"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "We can have the tool automatically generate this policy, but if we don't have to define it statically in the code, I don't think we should",
        "ts": "1481034914.000123"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "So if you assume that you have a policy t out of N identities do X",
        "ts": "1481034931.000124"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "then there is a part of the policy that can be hardcoded, and that is that it is always 1 out of N",
        "ts": "1481034954.000125"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "(for example)",
        "ts": "1481034959.000126"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "or always N out of N",
        "ts": "1481034962.000127"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "(AND case)",
        "ts": "1481034968.000128"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "then the part of the policy that you can modify is only the list of certificates",
        "ts": "1481034986.000129"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "(that would implicitly define N)",
        "ts": "1481034994.000130"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "But you always have to specify who the `N` are.  We don't have to expose the fact that the tool also generates a `1 out of` or an `N out of`, but in implementation, it's much easier to have a single case than two.",
        "edited": {
            "user": "U0XPR4NP4",
            "ts": "1481035119.000000"
        },
        "ts": "1481035101.000131"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "Correct",
        "ts": "1481035141.000133"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "And that is part of the MSP config.",
        "ts": "1481035151.000134"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "(under  rootCAs)",
        "ts": "1481035155.000135"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "Hi <@U0UGH3X7X>, I was just interested on the status of the change-set because it is a good starting point to include the MSP as soon as it is ready.",
        "edited": {
            "user": "U0ZR63HLK",
            "ts": "1481035296.000000"
        },
        "ts": "1481035157.000136"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "cool <@U0ZR63HLK> ! I shall ping you in about 8 hours with new news :slightly_smiling_face:",
        "ts": "1481035221.000137"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I just feel like we are trying to tackle too much here.  What is the minimum set that is required to instantiate an MSP (manager?) and validate a signature against that MSP?  We can even ignore policies for the moment.",
        "ts": "1481035269.000138"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "great :slightly_smiling_face:",
        "ts": "1481035278.000139"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "Correct. But RootCAs are needed  for the validation of certificates. <@U26T99AQ4> is already working on that.",
        "ts": "1481035351.000141"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "For the admin case\/reconfiguration agreed,that this can wait.",
        "ts": "1481035388.000142"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "<@U0XPR4NP4> yeah, I'll try to have a change-set for us to stare at later today",
        "ts": "1481035414.000143"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "<@U0XPR4NP4> we are already going in the direction of minimalism :slightly_smiling_face:",
        "ts": "1481035549.000144"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "+1",
        "ts": "1481035573.000145"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U26T99AQ4> Can you point me to the data structure you will need the orderer to feed you? There is <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3015\/>, but it contains a lot of structures, is it `MSPDesc`?",
        "ts": "1481035605.000146"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "And is there a good sample which provides real certs etc. that we can use in unit tests?",
        "ts": "1481035635.000147"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "I've taken <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3015\/1\/config-schemas\/chain-genesis-config-schema.go> and made some small changes",
        "ts": "1481035780.000148"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "but <@U1BC5A0F9> should review them once more",
        "ts": "1481035790.000149"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "so ignoring policies for a bit ,  for chainInitConfig, i think then we want separate configurationItems for MSPManager(including readers\/writers\/admin) , OrderingClientConfig, OrderingServerConfig, GossipAnchors ?",
        "ts": "1481035795.000150"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "and yes, in the change set I'll produce a sample config file that will allow a proper local MSP to be created",
        "ts": "1481035817.000151"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "I have half a mind to also write a small sample program to generate those json files from a cert, a CA cert and a keypair",
        "ts": "1481035857.000152"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "that should be helpful for <@U0UGH3X7X> I guess",
        "ts": "1481035874.000153",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0UGH3X7X"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U1BC5A0F9> I see there is the notion of an `MSPGroup`, is this what we are settling on for our first class identity citizen? So policies should be written against `MSPGroup`s (supplied as the identity bytes to the signature validation)?",
        "ts": "1481036058.000154"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "<@U26T99AQ4>: i already have test files for that.",
        "ts": "1481036105.000155"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "that is code, that can be used on that end. I just removed them from the changeset to avoid confusion.",
        "ts": "1481036150.000156"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "awesome! That'll save me some time! :slightly_smiling_face: Do they already read certs\/keys files in pem format from command line?",
        "ts": "1481036219.000157"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "if parsing methods are needed, the crypto\/primitives packages has many :slightly_smiling_face:",
        "ts": "1481036290.000158"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "No, they assume you have some string version of the certs, and creates a sample config file with these...",
        "ts": "1481036342.000159"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "super",
        "ts": "1481036342.000160"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "ah ok, so I'll write that part then",
        "ts": "1481036353.000161"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "shouldn't be too much work anyway",
        "ts": "1481036362.000162"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U26T99AQ4> You said you've taken  <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3015\/1\/config-schemas\/chain-genesis-config-schema.go> and made some changes, but surely you don't need all of those structures, only some subset of them?",
        "edited": {
            "user": "U0XPR4NP4",
            "ts": "1481036431.000000"
        },
        "ts": "1481036374.000163"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "Instantiates the objects and put them together into that json config.",
        "ts": "1481036375.000164"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "Hm, it is actually this one for the local setup",
        "ts": "1481036437.000167"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3015\/1\/config-schemas\/node-init-config-schema.go>",
        "ts": "1481036438.000168"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "Used for orderers and\/or peers. Indeed a small subset of the previous one.",
        "ts": "1481036468.000169"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "<@U0XPR4NP4> this is still WIP, but the peer config schema looks a bit like this\n```\ntype PeerLocalConfig struct {\n\tLocalMSP *MSPManagerConfig `json:\"msp-config\"`\n\tBCCSP    *BCCSPConfig `json:\"bccsp-config\"`\n}\n\n\ntype MSPManagerConfig struct {\n\tName    string `json:\"name\"`\n\tMspList []*MSPConfig `json:\"msps\"`\n}\n\ntype MSPConfig struct {\n\tType            ProviderType `json:\"type\"`\n\tConfig          []byte `json:\"config\"`\n}\n\ntype FabricMSPConfig struct {\n\tName            string `json:\"id\"`\n\tRootCerts       [][]byte `json:\"rootcas\"`\n\tAdmins          [][]byte `json:\"admins\"`\n\tRevocationList  [][]byte `json:\"revoked-ids,omitempty\"`\n\tSigningIdentity *SigningIdentityInfo `json:\"signer,omitempty\"`\n}\n\ntype SigningIdentityInfo struct {\n\tPublicSigner []byte `json:\"pub\"`\n\tPrivateSigner *KeyInfo `json:\"priv\"`\n}\n\ntype KeyInfo struct {\n\tKeyIdentifier string `json:\"key-id\"`\n\tKeyMaterial []byte `json:\"key-mat\"`\n}\n\ntype BCCSPConfig struct {\n\tName string `json:\"name\"`\n\tLocation string `json:\"location\"`\n}\n```",
        "ts": "1481036513.000170"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "(I've removed comments for the sake of brevity, they are of course still in the code)",
        "ts": "1481036533.000171"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "Actually not",
        "ts": "1481036551.000172"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "the signingidentity is part of the MSPConfig",
        "ts": "1481036559.000173"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "actually not",
        "ts": "1481036565.000174"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "it isnot the latest, and FabricMSPConfig does not have any signing identity",
        "ts": "1481036595.000175"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "The `MSPManager` or whatever bit of code that will do the signature validation has what signature for its constructor? Or how do these structures get put into the MSP?",
        "ts": "1481036614.000176"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "<@U0XPR4NP4> <@U1BC5A0F9> please note that this is WIP and I'll add you all as reviewers and we can and will change things; I just went with this schema for now *only* in order to have some code out",
        "ts": "1481036680.000177"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "&gt; The `MSPManager` or whatever bit of code that will do the signature validation has what signature for its constructor? Or how do these structures get put into the MSP?\nnot sure I follow...",
        "ts": "1481036703.000178"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U26T99AQ4> I see a lot of structure definitions.  But for example, say, given a slice of `MSPConfig`, I take it, and invoke `NewMSPManager(configSlice)` and I get back an instance of `MSPManager` which I can use to validate signatures.",
        "edited": {
            "user": "U0XPR4NP4",
            "ts": "1481036855.000000"
        },
        "ts": "1481036784.000179"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "(Obviously this is a hypothetical flow, but I'm looking for what the real one is)",
        "ts": "1481036798.000180"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "(no hurry <@U26T99AQ4> \u2026 don\u2019t want to interrupt the flow\u2026 but when you get to it `RevocationList  [][]byte` in `FabricMSPConfig` \u2026 that\u2019s not a static one time thing is it ?  if CRLs are going to be sent out periodically do we need a separate \u201cupdate\u201d structure for that ?)",
        "edited": {
            "user": "U0ULK2JPP",
            "ts": "1481036879.000000"
        },
        "ts": "1481036855.000181"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "<@U0XPR4NP4> yes, the code comes with some factories for MSP managers",
        "ts": "1481036956.000184"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "there is a singleton for the \"local\" msp, and then a factory to get a manager for a given chain",
        "ts": "1481036979.000185"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "<@U1BC5A0F9> <@U0XPR4NP4> we should work together to define the exact arguments to those factories",
        "ts": "1481037014.000186"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "We should be able to do signature validation without the 'local' msp, no?",
        "ts": "1481037037.000187"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "nope",
        "ts": "1481037076.000188"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "that's tricky.. the local msp acts on static information that never changes (its config comes from a config file after all)",
        "ts": "1481037077.000189"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "so I think the local msp should either never be used to validate signatures, or only be used at chain creation\/join time if needed (but <@U1BC5A0F9> yesterday told me not even this is required)",
        "edited": {
            "user": "U26T99AQ4",
            "ts": "1481037126.000000"
        },
        "ts": "1481037114.000190"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I seem to recall that it was expressed on a call, but the local MSP and 'chain MSP's (for lack of a better term) seem like very different beasts",
        "ts": "1481037189.000192"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "<@U26T99AQ4>, I also need the factories at the orderers :slightly_smiling_face:",
        "ts": "1481037203.000193"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "&gt; I seem to recall that it was expressed on a call, but the local MSP and 'chain MSP's (for lack of a better term) seem like very different beasts\nthe only difference I understand is that the local MSP can dispense signing identities whereas chain MSPs can't and won't",
        "ts": "1481037449.000194"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "My assumption is that we instantiate an MSP manager per chain.  Then, on chain reconfiguration (or genesis) we're going to either feed a set of 'updated MSP definitions' to the manager, or, we simply instantiate a new one by re-invoking the constructor with this set.  Does this sound reasonable? Or am I missing something?",
        "ts": "1481037471.000195"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "but one can very well use the same interfaces and config schema, using `omitempty`",
        "ts": "1481037476.000196"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "&gt; My assumption is that we instantiate an MSP manager per chain.  Then, on chain reconfiguration (or genesis) we're going to either feed a set of 'updated MSP definitions' to the manager, or, we simply instantiate a new one by re-invoking the constructor with this set.  Does this sound reasonable? Or am I missing something?\nIt sounds very reasonable",
        "ts": "1481037495.000197"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "the manager *for a chain* is created once, setup once and refreshed any number of times",
        "edited": {
            "user": "U26T99AQ4",
            "ts": "1481037576.000000"
        },
        "ts": "1481037514.000198"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "<@U0XPR4NP4>: localMSP or signerMSP is indeed only instantiate to offer the peer signing abilities. (we discussed this in the call)",
        "ts": "1481037554.000199"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "MSP description in the chain had more the meaning of a verifierMSP used to verify signatures coming from tx\/proposal creators.",
        "ts": "1481037590.000201"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "But in reality, as <@U26T99AQ4>, and <@U0UGH3X7X> pointed out in the respective changeset one could have a configuration structure that includes all fields",
        "ts": "1481037620.000202"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "tha tis signingMSP = verifierMSPconfig + singing identity",
        "ts": "1481037651.000203"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U26T99AQ4> Okay.  So, for other pieces of config, we already have a `configtx.Manager` which will essentially call `Begin`, then for as many times as there are config items of a given type call `Propose(item) error` and eventually call `Rollback` or `Commit`.  So, I imagine we have a set of `MSPConfig`s, which we pass  through this process to handle the manager updates.",
        "ts": "1481037670.000204"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "and for verifiers have an empty signing identity.",
        "ts": "1481037670.000205"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "&gt; <@U26T99AQ4> Okay.  So, for other pieces of config, we already have a `configtx.Manager` which will essentially call `Begin`, then for as many times as there are config items of a given type call `Propose(item) error` and eventually call `Rollback` or `Commit`.  So, I imagine we have a set of `MSPConfig`s, which we pass  through this process to handle the manager updates.\nThis aspect isn't 100% clear to me yet. I discussed it with <@U1BC5A0F9> the other day and iirc, we could have 2 types of `MSPConfig`s items that you could pass to mspmanager.refresh(): \n - a whole new config that wipes out the old one\n - an item that just adds a cert to a revocation list",
        "ts": "1481037797.000206"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "it may be more complex than this though, and <@U1BC5A0F9> surely knows more",
        "ts": "1481037813.000207"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "actually, i do not think we discussed mspmanager config",
        "ts": "1481037894.000208"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "We discussed individual msp config.",
        "edited": {
            "user": "U1BC5A0F9",
            "ts": "1481037931.000000"
        },
        "ts": "1481037902.000209"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Per the structures, I'm not seeing why we really need an MSP manager config.  I think all I see there is a name? And I'm not sure why it needs one?",
        "ts": "1481037930.000212"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "aha, you only need an msplist indeed.",
        "ts": "1481037953.000214"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "this is  just to identity config info associated to your msp-manager, that could later be extended with a separate admin.",
        "ts": "1481037986.000215"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "But now you are right. We could have only the msplist...",
        "ts": "1481038002.000216"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "But, then for each msp in the list, is the internals of thatMSPthat know how to handle\/manage\/evaluate reconfiguration requests.",
        "ts": "1481038034.000217"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I would like that very much because it would simplify things significantly for the implementation",
        "ts": "1481038042.000218"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "+1",
        "ts": "1481038074.000219"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "so we should have  configurationItems  for msplist,  ordererClientConfig, ordererServerConfig, gossipAnchorList, readers, writers, admins ?",
        "ts": "1481038245.000220"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0UGH3X7X> Possibly? I'm not ready to call it until we actually have concrete implementations for all of it.  For instance, there is config already defined in our static bootstrapper stuff which is not enumerated in 3015.  I think we need to take it one item at a time",
        "ts": "1481038380.000221"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "ok, I'll start with a genesis block that contains just one configurationItem for the msplist and we can go from there",
        "ts": "1481038513.000222"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Well, the MSP list should have one config item per MSP",
        "ts": "1481038534.000223"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "then <@U0ZR63HLK> and <@U26T99AQ4> can connect their code",
        "ts": "1481038541.000224"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "And implicitly, all the MSPs defined would form the list",
        "ts": "1481038544.000225"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "sure ...  so genesis block will have n configurationItems, one per MSPDesc",
        "ts": "1481038597.000226"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Right",
        "ts": "1481038606.000227"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I can quick push a changeset which steals the `MSPDesc` proto message that we can both base our work off of",
        "edited": {
            "user": "U0XPR4NP4",
            "ts": "1481038667.000000"
        },
        "ts": "1481038641.000228",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0UGH3X7X"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "configItem.Value = marshalled MSPDesc,  key=? type=?",
        "edited": {
            "user": "U0UGH3X7X",
            "ts": "1481038674.000000"
        },
        "ts": "1481038652.000229"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "key is a good question, I'd assume something ripped out of the MSPDesc, like the org name?  I'll define a new Type called `MSP` we can use",
        "ts": "1481038710.000232"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "<@U0UGH3X7X> which schema will you use to represent the MSP config?",
        "ts": "1481038755.000233"
    },
    {
        "type": "message",
        "subtype": "file_share",
        "text": "<@U0UGH3X7X|tuand> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/tuand\/F3BAKGJTF\/-.php|Untitled> and commented: <@U26T99AQ4> MSPDesc as defined in 3015",
        "file": {
            "id": "F3BAKGJTF",
            "created": 1481038826,
            "timestamp": 1481038826,
            "name": "-.php",
            "title": "Untitled",
            "mimetype": "text\/plain",
            "filetype": "php",
            "pretty_type": "PHP",
            "user": "U0UGH3X7X",
            "editable": true,
            "size": 999,
            "mode": "snippet",
            "is_external": false,
            "external_type": "",
            "is_public": true,
            "public_url_shared": false,
            "display_as_bot": false,
            "username": "",
            "url_private": "https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3BAKGJTF\/-.php?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "url_private_download": "https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3BAKGJTF\/download\/-.php?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "permalink": "https:\/\/hyperledgerproject.slack.com\/files\/tuand\/F3BAKGJTF\/-.php",
            "permalink_public": "https:\/\/slack-files.com\/T0J024XGA-F3BAKGJTF-0737b46124",
            "edit_link": "https:\/\/hyperledgerproject.slack.com\/files\/tuand\/F3BAKGJTF\/-.php\/edit",
            "preview": "message MSPDesc {\r\n\r\n\r\n    \/\/ MSPType holds the type of the MSP; the default one would\r\n    \/\/ be of type FABRIC implementing an X.509 based provider\r",
            "preview_highlight": "<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>message MSPDesc {<\/pre><\/div>\n<div><pre>&#8203;<\/pre><\/div>\n<div><pre>&#8203;<\/pre><\/div>\n<div><pre>    \/\/ MSPType holds the type of the MSP; the default one would<\/pre><\/div>\n<div><pre>    \/\/ be of type FABRIC implementing an X.509 based provider<\/pre><\/div>\n<\/div>\n<\/div>\n",
            "lines": 25,
            "lines_more": 20,
            "preview_is_truncated": false,
            "channels": [
                "C0Z4NBUN6"
            ],
            "groups": [],
            "ims": [],
            "comments_count": 1,
            "initial_comment": {
                "id": "Fc3AGMVB2L",
                "created": 1481038826,
                "timestamp": 1481038826,
                "user": "U0UGH3X7X",
                "is_intro": true,
                "comment": "<@U26T99AQ4> MSPDesc as defined in 3015",
                "channel": ""
            }
        },
        "user": "U0UGH3X7X",
        "upload": true,
        "display_as_bot": false,
        "username": "<@U0UGH3X7X|tuand>",
        "bot_id": null,
        "ts": "1481038826.000234"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "<@U0XPR4NP4>   key = MSPIdentifier ?  agree with type=MSP",
        "ts": "1481038906.000235"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U26T99AQ4> or <@U1BC5A0F9> can probably speak to this better, but I'd think `MSPIdentifier` might be a little human unfriendly?",
        "ts": "1481038958.000236"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "got it. 2 Qs for <@U0UGH3X7X> :\n - why protobuf and not json?\n - is it okay if the schema undergoes a few minor changes in the change-set I'm about to push? I've had to make a few changes to have a simpler implementation of the managers\/msps (but of course everything can be changed again in the review phase)",
        "ts": "1481038989.000237"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U26T99AQ4> I'm probably to blame for the protobuf push.  Essentially because you can marshal protobuf to\/from JSON if you want, and we already use protobuf for everything else.",
        "ts": "1481039063.000238"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "json should be only for genesis block create,  internal code should standardize on protobuf",
        "ts": "1481039069.000239"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "just let me know if you make a patch",
        "ts": "1481039106.000240"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "but anyway changes that affect the MSPs are always generated by some external entity (e.g. a CA advertising a revoked cert)",
        "ts": "1481039119.000241"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "and so as far as the core\/config code is concerned, you'll have a byte array with a key name",
        "ts": "1481039138.000242"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "how it's marshalled shouldn't really matter",
        "ts": "1481039147.000243"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "or am I missing something?",
        "ts": "1481039163.000244"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "&gt; - is it okay if the schema undergoes a few minor changes in the change-set I'm about to push? I've had to make a few changes to have a simpler implementation of the managers\/msps (but of course everything can be changed again in the review phase)\n\nMaybe you can keep <@U0UGH3X7X> in the loop on this? Assuming things don't change too radically I wouldn't think this should cause big problems though",
        "ts": "1481039310.000245"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "of course, I'll add him as a reviewer",
        "ts": "1481039329.000246"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "I'm running the last few tests and will push asap",
        "ts": "1481039341.000247"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "that's your first mistake alex :wink:",
        "ts": "1481039347.000248"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": ":smile:",
        "ts": "1481039370.000249"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "so.. about json vs protobufs: can we agree that MSP can choose whatever encoding schema\/marshalling it wants for its config? This should be largely transparent as far as the core is concerned - it only affects COP, MSP and presumably the tool that <@U0UGH3X7X> is building",
        "ts": "1481039444.000250"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "the genesis block creation is a manual step , some admin has to create a json file to input to the tool,  it's then easier to map to the protobuf and use that everywhere in our code, no need to reparse",
        "ts": "1481039470.000251"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "wait but you already have a json file; why not take the marshalled json as a string and send it around?",
        "ts": "1481039510.000252"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "if not for the whole genesis block, at least for the msp config",
        "ts": "1481039546.000253"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "again, you should treat it as the opaque byte array it is",
        "ts": "1481039564.000254"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "i can do that ...  so the genesis block will have one configuration item per MSPDesc, value = json of MSPDesc as []bytes, type=MSP, key=?",
        "ts": "1481039755.000255"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U26T99AQ4> I don't understand why we are bifurcating the fabric on JSON\/protobuf",
        "ts": "1481039785.000256"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Why not use protos internally everywhere?",
        "ts": "1481039797.000257"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "aside from it being elegant in some abstract sense, does it really matter how a []byte is marshalled internally?",
        "ts": "1481039864.000258"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "and btw, json was chosen because it's already used by COP",
        "ts": "1481039946.000259"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I would argue that consistency is a good thing, that a developer who approaches a fabric data structure doesn't have to guess at its encoding.  JSON is a good human readable format, which protobuf marshals readily to and from.  And every component must already speak protobuf",
        "ts": "1481039965.000260"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "ok, I'll stick with json for now and will change it later (we can create a JIRA item so that we don't forget)",
        "ts": "1481040080.000261"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "is that acceptable also for <@U0UGH3X7X> ?",
        "ts": "1481040087.000262"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I already see proto definitions for the data structures?",
        "ts": "1481040096.000263"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "I assume the interface to the MSP takes golang structures, not JSON?",
        "ts": "1481040122.000264"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "that change set doesn't contain any running code; the one I'm about to push does.. it took the size and shape of an oil-spill and at this point I want it out there asap so that I don't have to rebase a gazillion times :wink:",
        "ts": "1481040153.000265"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "&gt; I assume the interface to the MSP takes golang structures, not JSON?\ncorrect",
        "ts": "1481040170.000266"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Then this seems pretty easy to me, how the MSP manager gets those structures should be pretty irrelevant from an MSP perspective?   We can bolt on whatever marshaling scheme seems appropriate (which, I'd suggest is protobuf, since all the other structures in the config are protobuf).",
        "ts": "1481040255.000267"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "&gt; so that I don't have to rebase a gazillion times :wink:\n\nUnderstood, I know how that goes...",
        "ts": "1481040273.000268"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "<@U26T99AQ4> <@U1BC5A0F9>   send me a sample json file when you're ready",
        "ts": "1481040300.000269"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "I'll send you the schema and the sample file in pvt",
        "ts": "1481040357.000270"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U26T99AQ4> <@U1BC5A0F9> <@U0ZR63HLK> <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3019\/> Here is a shamelessly lifted minimal MSP definition for <@U0UGH3X7X> and I to work off of until the real one is finalized.",
        "ts": "1481040494.000271"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "that's minimalism actually :slightly_smiling_face:",
        "ts": "1481040561.000272"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "if possible, I'd appreciate it if we could work out of this one for now",
        "ts": "1481040568.000273"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "that would avoid another tiny oil-spill for me :wink:",
        "ts": "1481040578.000274"
    },
    {
        "type": "message",
        "subtype": "file_share",
        "text": "<@U26T99AQ4|aso> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/aso\/F3AJ1NKDX\/mspconfigschema.go|mspconfigschema.go>",
        "file": {
            "id": "F3AJ1NKDX",
            "created": 1481040583,
            "timestamp": 1481040583,
            "name": "mspconfigschema.go",
            "title": "mspconfigschema.go",
            "mimetype": "text\/plain",
            "filetype": "go",
            "pretty_type": "Go",
            "user": "U26T99AQ4",
            "editable": true,
            "size": 4672,
            "mode": "snippet",
            "is_external": false,
            "external_type": "",
            "is_public": true,
            "public_url_shared": false,
            "display_as_bot": false,
            "username": "",
            "url_private": "https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3AJ1NKDX\/mspconfigschema.go?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "url_private_download": "https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3AJ1NKDX\/download\/mspconfigschema.go?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "permalink": "https:\/\/hyperledgerproject.slack.com\/files\/aso\/F3AJ1NKDX\/mspconfigschema.go",
            "permalink_public": "https:\/\/slack-files.com\/T0J024XGA-F3AJ1NKDX-a55621a33c",
            "edit_link": "https:\/\/hyperledgerproject.slack.com\/files\/aso\/F3AJ1NKDX\/mspconfigschema.go\/edit",
            "preview": "package msp\n\n\/*\n Copyright IBM Corp. 2016 All Rights Reserved.\n",
            "preview_highlight": "<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre><span class=\"cm-keyword\">package<\/span> <span class=\"cm-variable\">msp<\/span><\/pre><\/div>\n<div><pre>&#8203;<\/pre><\/div>\n<div><pre><span class=\"cm-comment\">\/*<\/span><\/pre><\/div>\n<div><pre> <span class=\"cm-comment\">Copyright IBM Corp. 2016 All Rights Reserved.<\/span><\/pre><\/div>\n<\/div>\n<\/div>\n",
            "lines": 131,
            "lines_more": 126,
            "preview_is_truncated": true,
            "channels": [
                "C0Z4NBUN6"
            ],
            "groups": [],
            "ims": [],
            "comments_count": 0
        },
        "user": "U26T99AQ4",
        "upload": true,
        "display_as_bot": false,
        "username": "<@U26T99AQ4|aso>",
        "bot_id": null,
        "ts": "1481040583.000275"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "it is neither final nor ideal. It does have a big plus though, which is that it comes with running code :wink:",
        "ts": "1481040614.000276"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "+1",
        "ts": "1481040626.000277"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U26T99AQ4> Works for me, I'll go ahead and update the proto to match, though I'll leave out the signing identity, as this is fixed for genesis\/config material",
        "ts": "1481040661.000278"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "if possible leave it in there and do some magic with omitempty",
        "ts": "1481040679.000279"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "this way we have a single definition",
        "ts": "1481040687.000280"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "for all MSPs",
        "ts": "1481040690.000281"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "the local one has a signing identity, the chain one doesn't (it's empty hence omitted)",
        "ts": "1481040705.000282"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "does that work?",
        "ts": "1481040710.000283"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Okay, I can add it in, it just pulls in yet another struct, was trying to keep it small",
        "ts": "1481040715.000284"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "But that's fine, whatever is the path of least resistance",
        "ts": "1481040738.000285"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "right, we can remove it later thx!",
        "ts": "1481040743.000286"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "and you get some karma points because you saved me from another rebase :stuck_out_tongue:",
        "ts": "1481040753.000287",
        "reactions": [
            {
                "name": "grin",
                "users": [
                    "U0UGH3X7X"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Haha, I'll take them!",
        "ts": "1481040776.000288",
        "reactions": [
            {
                "name": "innocent",
                "users": [
                    "U26T99AQ4"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U26T99AQ4> <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3019\/> protos to match your structs, I don't think there are any glaring omissions (also <@U0UGH3X7X>)",
        "ts": "1481041280.000289"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "super, thanks! yeah, that looks okay",
        "ts": "1481041364.000290"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "even though less minimal :slightly_smiling_face:",
        "ts": "1481041482.000291"
    },
    {
        "type": "message",
        "user": "U0ZR63HLK",
        "text": "the principal of minimality in crypto is actually quite challenging to achieve. In a lot of cases, there are components in a crypto scheme that are there just to be able to carry the proof of security. It is more related to our ignorance",
        "ts": "1481041570.000292"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Understood, I'm sure I'm being a little obnoxious with the \"let's start small\", sorry about that.  I just can't wrap my head around the whole thing at once and if we can split things into smaller more easily digestible (but working) pieces, it makes my head hurt a little less.",
        "ts": "1481041798.000293"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "<@U0XPR4NP4> this is though only for peer config.",
        "ts": "1481041804.000294"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "For orderer setup one would need to pass the orderer chain config. Adding <@U0UGH3X7X>, <@U0KN2SSKE>.",
        "edited": {
            "user": "U1BC5A0F9",
            "ts": "1481041905.000000"
        },
        "ts": "1481041818.000295"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U1BC5A0F9> I'm not sure what you mean? Why is that needed to make the MSP manager work?",
        "ts": "1481041979.000297"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "I'd say let's start with what we have now and get orderer+msp and peer+msp running ?  I can add other config very quickly after that",
        "ts": "1481041984.000298",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U26T99AQ4"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "<@U0UGH3X7X>: +1",
        "ts": "1481042038.000299"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "<@U0XPR4NP4>: Well my understanding was that the orderer boots with being provided with some local information (local MSP + key material, + consensus local info), and with the orderer channel genesis config (that includes verifier MSP configuration, readers and writers of the orderer chain, other orderers identities, etc).",
        "edited": {
            "user": "U1BC5A0F9",
            "ts": "1481042192.000000"
        },
        "ts": "1481042170.000300"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U1BC5A0F9> Understood that this will not be a complete end to end finished configuration.  Just trying to add the MSP piece to the chain config, and we can add the remaining config later.",
        "ts": "1481042261.000302"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "ok, got it",
        "ts": "1481042288.000303"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "So, but this one includes peer local setup only though: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3019\/2\/protos\/common\/msp\/configuration.proto>",
        "ts": "1481042381.000304"
    },
    {
        "type": "message",
        "user": "U1BC5A0F9",
        "text": "correct?",
        "ts": "1481042386.000305"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "This is supposed to include only the structs that <@U26T99AQ4> needs in order to stand up a working MSP manager for the MSP's to be embedded in the chain config",
        "ts": "1481042455.000306"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U26T99AQ4> Maybe I missed it, but do you have any static valid `MSPConfig` that we can incorporate for unit tests?",
        "ts": "1481042868.000307"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "(And, if you could post your gerrit changeset here once pushed, I'd appreciate it)",
        "ts": "1481042908.000308"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "<http:\/\/gerrit.hyperledger.org\/r\/3025>",
        "ts": "1481042944.000309",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0XPR4NP4"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "I've pushed (I wasn't able to verify that all tests work but at least we can start the review process)",
        "ts": "1481042964.000310"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "&gt; do you have any static valid `MSPConfig` that we can incorporate for unit tests?\n\nI do here <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3025\/1\/msp\/peer-config.json>",
        "ts": "1481042995.000311"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "that contains a root CA, a cert for signing and a keypair",
        "ts": "1481043019.000312"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Great, thanks!",
        "ts": "1481043135.000313"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "oh, one thing that is worth pointing out",
        "ts": "1481043157.000314"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "in <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3025\/1\/msp\/mspconfigschema.go>",
        "ts": "1481043173.000315"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "`MSPConfig.Config` is of type `[]byte`",
        "ts": "1481043191.000316"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "this way, different implementation of MSP can use whatever internal format they want",
        "ts": "1481043215.000317"
    },
    {
        "type": "message",
        "user": "U26T99AQ4",
        "text": "so the fabric msp implementation in its setup can do\n\n```\nfunc (msp *bccspmsp) Setup(conf1 *MSPConfig) error {\n\t\/\/ given that it's an msp of type fabric, extract the MSPConfig instance\n\tvar conf FabricMSPConfig\n\terr := json.Unmarshal(conf1.Config, &amp;conf)\n\tif err != nil {\n\t\tmspLogger.Errorf(\"Failed unmarshalling fabric msp config, err %s\", err)\n\t\treturn fmt.Errorf(\"Failed unmarshalling fabric msp config, err %s\", err)\n\t}\n```",
        "ts": "1481043267.000318"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Right",
        "ts": "1481043807.000319"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Makes sense",
        "ts": "1481043814.000320"
    },
    {
        "type": "message",
        "subtype": "file_share",
        "text": "<@U0XPR4NP4|jyellick> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/jyellick\/F3BE7JD0U\/mutlichain_orderer_diagrams.pdf|mutlichain_orderer_diagrams.pdf> and commented: Per request of <@U1AU8DRQR> here is a rough sketch of how the orderer common components for broadcast\/deliver\/multichain work.",
        "file": {
            "id": "F3BE7JD0U",
            "created": 1481052797,
            "timestamp": 1481052797,
            "name": "mutlichain_orderer_diagrams.pdf",
            "title": "mutlichain_orderer_diagrams.pdf",
            "mimetype": "application\/pdf",
            "filetype": "pdf",
            "pretty_type": "PDF",
            "user": "U0XPR4NP4",
            "editable": false,
            "size": 49529,
            "mode": "hosted",
            "is_external": false,
            "external_type": "",
            "is_public": true,
            "public_url_shared": false,
            "display_as_bot": false,
            "username": "",
            "url_private": "https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3BE7JD0U\/mutlichain_orderer_diagrams.pdf?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "url_private_download": "https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3BE7JD0U\/download\/mutlichain_orderer_diagrams.pdf?t=xoxe-18002167554-139099126023-137701436192-e599afc92e",
            "permalink": "https:\/\/hyperledgerproject.slack.com\/files\/jyellick\/F3BE7JD0U\/mutlichain_orderer_diagrams.pdf",
            "permalink_public": "https:\/\/slack-files.com\/T0J024XGA-F3BE7JD0U-9b3efab882",
            "channels": [
                "C0Z4NBUN6"
            ],
            "groups": [],
            "ims": [],
            "comments_count": 1,
            "initial_comment": {
                "id": "Fc3AMGQW57",
                "created": 1481052797,
                "timestamp": 1481052797,
                "user": "U0XPR4NP4",
                "is_intro": true,
                "comment": "Per request of <@U1AU8DRQR> here is a rough sketch of how the orderer common components for broadcast\/deliver\/multichain work.",
                "channel": ""
            },
            "reactions": [
                {
                    "name": "woo",
                    "users": [
                        "U1AU8DRQR",
                        "U0ULK2JPP"
                    ],
                    "count": 2
                }
            ]
        },
        "user": "U0XPR4NP4",
        "upload": true,
        "display_as_bot": false,
        "username": "<@U0XPR4NP4|jyellick>",
        "bot_id": null,
        "ts": "1481052798.000321"
    },
    {
        "type": "message",
        "user": "U1AU8DRQR",
        "text": "<@U0XPR4NP4> thanks :slightly_smiling_face:",
        "ts": "1481058558.000323",
        "reactions": [
            {
                "name": "simple_smile",
                "users": [
                    "U0XPR4NP4"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "thanks <@U0XPR4NP4> \u2026 timely :slightly_smiling_face:",
        "ts": "1481059196.000327"
    },
    {
        "type": "message",
        "user": "U1B2FF8LR",
        "text": "General API question: Will the ordered transactions\/batches be timestamped in v1.0? And is this info for each transaction retrievable by the users? Are there different answers for different consensus algorithms?",
        "ts": "1481061343.000328"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U1B2FF8LR> I think this may be a better question for <@U0PB67X4K> <@U0Y14MWA2> <@U1BC5A0F9> <@U0ZR63HLK> <@U26T99AQ4>, but, we have discussed doing transaction filtering by both time and epoch.  Clients should set a timestamp on all transactions, and, when the orderer creates the block, its signature will also be over a `ChainHeader` which includes a timestamp.  I think it's yet to be decided exactly what guarantees those timestamps have though, if any.",
        "ts": "1481064026.000329"
    },
    {
        "type": "message",
        "user": "U1B2FF8LR",
        "text": "ok, so it sounds like the capability is there but implementation is yet TBD. One of the features in the plans for R3's CORDA, being developed by\/for banking industry, is precise timestamping. I presume they want to be able to query when a given transaction occurred, and be able to tell if it was before or after another transaction. But it is not clear to me what that means to hyperledger\/fabric. Is it the timestamp when it was (a) requested by client or SDK, or (b) client SDK receives event notification, or (c) when LeaderPeer receives it, or (d) when Peers determine it is \"validated\" or committed, or (e) when delivered by orderer service. I guess if we want to support banking industry too, and to write any system\/behavior tests, then we may need to get more detail about this timestamping requirement.",
        "ts": "1481065799.000330"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "<@U0XPR4NP4> any retries at any level in the orderer\u2026 on some error (say in consensus) the block gets dropped...",
        "ts": "1481066391.000331"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0ULK2JPP> is this a question? In general, once a transaction is ack-ed, it should be \"in consensus\", the fault tolerance is then determined by the consensus algorithm ",
        "ts": "1481066959.000332"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "sorry yes, meant to be a question",
        "ts": "1481066982.000333"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "to take an example\u2026 suppose a batch of txs is handed to kafka for ordering and it returns a failure",
        "ts": "1481067032.000334"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "is there a notion of restarting the consenses with that batch or will that batch of txs dropped",
        "ts": "1481067077.000335"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "In the Kafka case, and <@U0XQ35CDD> can correct me if I'm wrong, but we won't ack until the transaction is guaranteed to be ordered ",
        "ts": "1481067172.000336"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "If something like a configuration transaction invalidates that transaction, then it could be dropped ",
        "ts": "1481067269.000337"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "understood.. I kinda missed the point. every client transaction handed to consensus (not a batch)",
        "ts": "1481067446.000338"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "thanks Jason",
        "ts": "1481067453.000339"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "so <@U0XPR4NP4> `but we won't ack until the transaction is guaranteed to be ordered`  - would that translate to `if we ack that the tx is guaranteed to be ordered, it is guaranteed to be in a block` ?",
        "ts": "1481067616.000340"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0ULK2JPP> \n\nShort version: almost always yes.  \n\nLong version: Once a transaction has been ack-ed it will have the opportunity to be included in a block. If it is 'valid' after ordering according to the raw chain ingress rules (not VSCC obviously), namely the signer is still authorized to transact on the chain, then it will be included",
        "edited": {
            "user": "U0XPR4NP4",
            "ts": "1481074934.000000"
        },
        "ts": "1481074873.000341"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "I think that answers my question <@U0XPR4NP4> \u2026 but I it was targetted at the batch coming out of the orderer and not the block finally created\u2026 let me rephrase `if we ack that the tx is guaranteed to be ordered, it is guaranteed to be in the batch delivered by orderer` ?",
        "ts": "1481075026.000343"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "I think what you are say is \u201calways, yes\"",
        "ts": "1481075044.000344"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Not quite, there is prefiltering the orderer does, to make sure only authorized users submit transactions to the raw ledger, which can cause it to drop transactions ",
        "ts": "1481075141.000345"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "ok",
        "ts": "1481075148.000346"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Before consensus, prefiltering is not deterministic ",
        "ts": "1481075161.000347"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "understood",
        "ts": "1481075161.000348"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "basically the ack is \u201csubmitted for ordering\"",
        "ts": "1481075175.000349"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "So, the ack is a best effort pre filtering approval ",
        "ts": "1481075183.000350"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Right. It's been submitted for ordering and it's valid according to the current config ",
        "ts": "1481075219.000351"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "got it",
        "ts": "1481075232.000352"
    },
    {
        "type": "message",
        "user": "U0ULK2JPP",
        "text": "thanks much!",
        "ts": "1481075234.000353"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Happy to help! ",
        "ts": "1481075261.000354"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Not sure I agree with the ACK discussion. (Assuming that by ACK we refer to the SUCCESS `BroadcastResponse` that the ordering service sends back.)",
        "edited": {
            "user": "U0XQ35CDD",
            "ts": "1481080712.000000"
        },
        "ts": "1481079771.000355"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "&gt; In general, once a transaction is ack-ed, it should be \"in consensus\"",
        "ts": "1481079798.000356"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "<https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1481074873000341>",
        "attachments": [
            {
                "from_url": "https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1481074873000341",
                "fallback": "[December 6th, 2016 5:41 PM] jyellick: <@U0ULK2JPP> \n\nShort version: almost always yes.  \n\nLong version: Once a transaction has been ack-ed it will have the opportunity to be included in a block. If it is 'valid' after ordering according to the raw chain ingress rules (not VSCC obviously), namely the signer is still authorized to transact on the chain, then it will be included",
                "ts": "1481074873.000341",
                "author_subname": "jyellick",
                "channel_id": "C0Z4NBUN6",
                "channel_name": "fabric-consensus-dev",
                "is_msg_unfurl": true,
                "text": "<@U0ULK2JPP> \n\nShort version: almost always yes.  \n\nLong version: Once a transaction has been ack-ed it will have the opportunity to be included in a block. If it is 'valid' after ordering according to the raw chain ingress rules (not VSCC obviously), namely the signer is still authorized to transact on the chain, then it will be included",
                "author_name": "Jason Yellick",
                "author_link": "https:\/\/hyperledgerproject.slack.com\/team\/jyellick",
                "author_icon": "https:\/\/secure.gravatar.com\/avatar\/80fccad690b283483c3b5418b8b82b5b.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F272a%2Fimg%2Favatars%2Fava_0026-48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "footer": "Posted in #fabric-consensus-dev"
            }
        ],
        "ts": "1481079813.000357"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "I had raised the following point during the review of the changeset that introduced the common broadcaster: <https:\/\/gerrit.l.org\/r\/#\/c\/2763\/3\/orderer\/common\/broadcast\/broadcast.go@141> ",
        "edited": {
            "user": "U0XQ35CDD",
            "ts": "1481086551.000000"
        },
        "ts": "1481079923.000359"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "We adopted the exitChan modification proposed there, but the problem (as my comment noted) remains, no?",
        "edited": {
            "user": "U0XQ35CDD",
            "ts": "1481080350.000000"
        },
        "ts": "1481080102.000362"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Long story short, we're using a buffered channel as a queue for incoming messages.",
        "ts": "1481080181.000363"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Whenever we can successfully inject an incoming tx to this queue, we send back an ACK.",
        "ts": "1481080182.000364"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "But we may queue up several messages (and send several ACKs) before the first `Enqueue()` call fails. (And the broadcaster then returns, as it should.)",
        "ts": "1481080288.000365"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "So we may ACK and the TX may be dropped and it *won't be* because of a filtering failure, as the discussion seems to suggest.",
        "ts": "1481080481.000367"
    }
]