[
    {
        "type": "message",
        "user": "U0XV1HDL3",
        "text": "Your 1) and 2) are basically two different interfaces to the consensus service. should be hidden behind the same interface, but allow one configuration option for the client to express which \"submission semantics\" it wants. \nMy ideas for names: \nsubmission=fast\/slow  or  weak\/strong  or  optimistic\/guaranteed\nor\ninvocation=       \"\"",
        "ts": "1468222298.001899"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "given that we're talking about exchangable consensus protocols, i think the fabric peer consensus protocol API should be the same",
        "ts": "1468225548.001900"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i.e. ideally not to require a different \"stub\" that connects to consensus in a proprietary way",
        "ts": "1468225572.001901"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "hi",
        "ts": "1468241369.001902"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "hi tuand",
        "ts": "1468241467.001903"
    },
    {
        "type": "message",
        "user": "U0UGH3X7X",
        "text": "ok, so a week's worth of stuff to catch up on :slightly_smiling_face:",
        "ts": "1468241532.001904"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "hehe",
        "ts": "1468241678.001905"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "not much happened outside of consensus",
        "ts": "1468241683.001906"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "so... i need to track the lastExec in the new consensus peer",
        "ts": "1468242441.001907"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i need some better reconnect logic",
        "ts": "1468246572.001908"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "grpc seems to use exponential retries",
        "ts": "1468246602.001909"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "1200 tx\/sec",
        "ts": "1468246976.001910"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "with consensus separated",
        "ts": "1468246981.001911"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "and batchsize=500",
        "ts": "1468246989.001912"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "okay",
        "ts": "1468247358.001913"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "fabric peer now can talk to consensus cloud",
        "ts": "1468247372.001914"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i'd appreciate if you could test it",
        "ts": "1468247387.001915"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "then maybe do some refactoring",
        "ts": "1468247405.001916"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "and then integrate it to master",
        "ts": "1468247412.001917"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "now it slowed down to 880",
        "ts": "1468247616.001918"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i wonder why",
        "ts": "1468247620.001919"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "hmm 30% docker",
        "ts": "1468248032.001920"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "is it still logging like crazy?",
        "ts": "1468248038.001921"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0XR6J961>: I noticed in my perf testing that the throughput slowly dropped over time",
        "ts": "1468248193.001922"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "it was a local interaction with a VM",
        "ts": "1468248208.001923"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i think",
        "ts": "1468248209.001924"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "This was with your shortcircuited chaincode too",
        "ts": "1468248213.001925"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "oh, now with externalization we are no longer closed loop",
        "ts": "1468248222.001926"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "ah, then that must be ledger",
        "ts": "1468248233.001927"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "but apart from the closed loop, it looks good",
        "ts": "1468248246.001928"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "none of the fast path stuff was tested",
        "ts": "1468248268.001929"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "<@U0XR6J961> Reviewing your branch, the thing that worries me is:\n\n```\nfunc (c *Server) SyncToTarget(blockNumber uint64, blockHash []byte, peerIDs []*pb.PeerID) (error, bool) {\n        panic(\"not implemented\")\n}\n\n\/\/\nfunc (c *Server) GetBlockchainInfoBlob() []byte {\n        \/\/ XXX assemble state for consensus service\n        \/\/ XXX this probably should include last block hash, etc.\n        \/\/panic(\"not implemented\")\n        return []byte(\"some internal state\")\n}\n```\n\nObviously this can't be handled until we actually figure out the inputs\/outputs of consensus, but until these get implemented, almost all failure test scenarios will not succeed.",
        "ts": "1468252023.001930"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yes",
        "ts": "1468252042.001931"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "but we don't have tests, so that's no problem :slightly_smiling_face:",
        "ts": "1468252063.001932"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Haha, I suppose that is one fix",
        "ts": "1468252088.001933"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "we need to figure out how we want to store consensus config and apply changes",
        "ts": "1468252167.001934"
    },
    {
        "type": "message",
        "user": "U0XPR4NP4",
        "text": "Without the split, the very natural place is the blockchain, with the split, I'm less convinced.  I also wonder about the growing peers.  I know some discussion had been made about 'longest chain wins' with respect to determining which whitelist to trust, but I don't know if that ever went anywhere.",
        "ts": "1468252331.001935"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yea, policy is a topic for another time",
        "ts": "1468252568.001936"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "right now the consensus peers are part of the persist config data",
        "ts": "1468252585.001937"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "kostas: any questions yet?",
        "ts": "1468254661.001938"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "otherwise i'll check out",
        "ts": "1468254665.001939"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Sorry, didn't realize you were waiting on me and was still working on my pre-prepare branch. Will look at it tonight and post questions. We can resume tomorrow.",
        "ts": "1468254707.001940"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "okay",
        "ts": "1468254870.001941"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "is there something for me to work on tomorrow?",
        "ts": "1468254896.001942"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i mean, what are our concrete goals",
        "ts": "1468254920.001943"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "maybe we can make this all a bit agily",
        "edited": {
            "user": "U0XR6J961",
            "ts": "1468254938.000000"
        },
        "ts": "1468254932.001944"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "because so far we've been doing scrum meetings, but we didn't do the \"these are the things we want to get done, what do you think how long this will take\", etc.",
        "ts": "1468254986.001946"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "<@U0XQ35CDD>: what is that pre-prepare change exactly?",
        "ts": "1468255393.001947"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "modifying `pre_prepare` to take a `request_block` rather than a `request` - this ripples into a bunch of things in pbft-core",
        "ts": "1468255507.001948"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "and this is so that when we merge batch and core, we have transparency on the actual request level and don't have to deal with opaque blocks?",
        "ts": "1468255550.001949"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Correct.",
        "ts": "1468255556.001950"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "okay",
        "ts": "1468255594.001951"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "we need to figure out a way how to reference requests without re-marshalling them just to do a hash over them",
        "ts": "1468255645.001952"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "I saw your comments on the performance hit this results in, yes.",
        "ts": "1468255686.001953"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "oh, if you rebase onto my code, you also can build and run actual networks much more quickly",
        "ts": "1468255689.001954"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Excellent, I shall give it a shot.",
        "ts": "1468255709.001955"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "if everybody is okay, i will rebase my branch onto lastest master",
        "ts": "1468255711.001956"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "we shouldn't do both at the same time",
        "ts": "1468255721.001957"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "or commit trouble",
        "ts": "1468255727.001958"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "let me see how quickly i can do that",
        "ts": "1468255747.001959"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Right, if you rebase onto the master (pulling in the obc-renaming, and the new discovery service), I can rebase onto your code and get all of those changes in.",
        "ts": "1468255804.001960"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Although the discovery service in `fabric` is ultimately irrelevant to your `separate-consensus` work as I understand it.",
        "ts": "1468255842.001961"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "haha discovery service",
        "ts": "1468256338.001962"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "that one didn't last long",
        "ts": "1468256351.001963"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "okay",
        "ts": "1468257173.001964"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "rebased",
        "ts": "1468257175.001965"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i think at some point we may want to squash some of the commits together",
        "ts": "1468257203.001966"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "but let's do that only just before merging into master",
        "ts": "1468257214.001967"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "<@U0XQ35CDD>: ready to go",
        "ts": "1468257264.001968"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Gotcha, thank you. Will rebase on your branch.",
        "ts": "1468257280.001969"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "cool",
        "ts": "1468257292.001970"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i guess then i pin down that branch and start working on a new name?",
        "ts": "1468257324.001971"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "making this our new tentative master",
        "ts": "1468257334.001972"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Works for me.",
        "ts": "1468257343.001973"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "Am I still looking at <https:\/\/github.com\/corecode\/fabric\/commits\/separate-consensus>?",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "corecode\/fabric",
                "title_link": "https:\/\/github.com\/corecode\/fabric\/commits\/separate-consensus",
                "text": "Blockchain fabric code",
                "fallback": "GitHub: corecode\/fabric",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400",
                "from_url": "https:\/\/github.com\/corecode\/fabric\/commits\/separate-consensus",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https:\/\/github.com\/apple-touch-icon.png",
                "id": 1
            }
        ],
        "ts": "1468257390.001974"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i think i'll do some performance tests tomorrow and maybe play with building either a bft-smart or a kafka consensus service",
        "ts": "1468257392.001976"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "yes",
        "ts": "1468257396.001977"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "OK",
        "ts": "1468257401.001978"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "i guess by using bft smart, we could have avoided man months of development work",
        "ts": "1468257694.001979"
    },
    {
        "type": "message",
        "user": "U0XR6J961",
        "text": "oh well",
        "ts": "1468257700.001980"
    },
    {
        "type": "message",
        "user": "U0TFEHX8E",
        "text": "do you plan to move consensus into its own repository?",
        "ts": "1468265891.001981"
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "I think it'd be great if we could do that.",
        "ts": "1468265932.001982",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0XPR4NP4"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "user": "U0XQ35CDD",
        "text": "After receiving a `batchMessage-Request` message <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/consensus\/pbft\/batch.go#L325> shouldn't we be doing a check to make sure that the `ReplicaID` included in the message is the same as that of the receiving stream? (Basically, something like this: <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/consensus\/pbft\/pbft-core.go#L571>)",
        "edited": {
            "user": "U0XQ35CDD",
            "ts": "1468304377.000000"
        },
        "ts": "1468304371.001983"
    }
]