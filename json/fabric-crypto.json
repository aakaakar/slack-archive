[{"user":"U1BC5A0F9","text":"<@U1BC5A0F9|elli> has joined the channel","type":"message","subtype":"channel_join","ts":"1474985855.000002"},{"user":"U1BC5A0F9","purpose":"Cryptographic operations taking place within fabric.","text":"<@U1BC5A0F9|elli> set the channel purpose: Cryptographic operations taking place within fabric.","type":"message","subtype":"channel_purpose","ts":"1474985856.000003"},{"user":"U26T99AQ4","inviter":"U1BC5A0F9","text":"<@U26T99AQ4|aso> has joined the channel","type":"message","subtype":"channel_join","ts":"1474985856.000004"},{"user":"U0ZR63HLK","inviter":"U1BC5A0F9","text":"<@U0ZR63HLK|adc> has joined the channel","type":"message","subtype":"channel_join","ts":"1474985857.000005"},{"user":"U0KN2SSKE","inviter":"U1BC5A0F9","text":"<@U0KN2SSKE|binhn> has joined the channel","type":"message","subtype":"channel_join","ts":"1474985857.000006"},{"user":"U0S5KF44D","inviter":"U1BC5A0F9","text":"<@U0S5KF44D|keithsmith> has joined the channel","type":"message","subtype":"channel_join","ts":"1474985857.000007"},{"user":"U184J2R7S","inviter":"U1BC5A0F9","text":"<@U184J2R7S|weeds> has joined the channel","type":"message","subtype":"channel_join","ts":"1474985857.000008"},{"user":"U1KDHJT6H","inviter":"U1BC5A0F9","text":"<@U1KDHJT6H|claytonsims> has joined the channel","type":"message","subtype":"channel_join","ts":"1474985857.000009"},{"user":"U0ULK2JPP","inviter":"U1BC5A0F9","text":"<@U0ULK2JPP|muralisr> has joined the channel","type":"message","subtype":"channel_join","ts":"1474985857.000010"},{"type":"message","user":"U0ZR63HLK","text":"Hi all","ts":"1474986138.000011"},{"type":"message","user":"U0ZR63HLK","text":":slightly_smiling_face:","ts":"1474986141.000012"},{"user":"U2GFYLYN8","text":"<@U2GFYLYN8|mneug> has joined the channel","type":"message","subtype":"channel_join","ts":"1474994323.000013"},{"type":"message","user":"U1BC5A0F9","text":"Hi","ts":"1475006206.000014"},{"type":"message","user":"U1BC5A0F9","text":"So, today and yesterday, the team worked on the protocol buffers for the new message protocol (needed for fabric-next).","ts":"1475006316.000015"},{"type":"message","user":"U1BC5A0F9","text":"Also worked on documenting the state encryption on current version of fabric.","ts":"1475006350.000016"},{"type":"message","user":"U1BC5A0F9","text":"Finally, we discussed  the bootstrapping problem and came up with a candidate solution for it that we will be sharing with the extended team soon.","ts":"1475006400.000017"},{"user":"U0UKTPMG8","inviter":"U1BC5A0F9","text":"<@U0UKTPMG8|jeffgarratt> has joined the channel","type":"message","subtype":"channel_join","ts":"1475007647.000018"},{"user":"U2GDA64CE","text":"<@U2GDA64CE|camel> has joined the channel","type":"message","subtype":"channel_join","ts":"1475035663.000002"},{"user":"U2GEM7JCT","text":"<@U2GEM7JCT|kur> has joined the channel","type":"message","subtype":"channel_join","ts":"1475053632.000002"},{"type":"message","user":"U0ZR63HLK","text":"Hi All, today I worked with Volodymyr on the CSP interface focusing on key generation and signing.","ts":"1475077126.000003"},{"user":"U0KQ9QKH6","text":"<@U0KQ9QKH6|pmullaney> has joined the channel","type":"message","subtype":"channel_join","ts":"1475172311.000004"},{"type":"message","user":"U0KQ9QKH6","text":"hey not sure if this is the right place to ask but I am trying to get the fabric running in development mode with TLS enabled in core.yaml, and I get the following error when starting a chaincode \"tls: first record does not look like a TLS handshake\"? Anyone have any ideas of what to check?","ts":"1475176022.000005"},{"type":"message","user":"U0KQ9QKH6","text":"nevermind found the problem","ts":"1475182179.000006"},{"user":"U0ZJZBJLF","text":"<@U0ZJZBJLF|yacovm> has joined the channel","type":"message","subtype":"channel_join","ts":"1475227669.000002"},{"user":"U1P52TCE4","text":"<@U1P52TCE4|yoshihara> has joined the channel","type":"message","subtype":"channel_join","ts":"1475325364.000002"},{"type":"message","user":"U1BC5A0F9","text":"Next steps &amp; priorities for cryptology squad: \n1. Transition to the next security architecture\n(a) Security review on the protocol messages for the next consensus architecture FAB 351- all ( <@U26T99AQ4> , <@U0ZR63HLK>, elli) =&gt; Done\n(b) Creation of protobuffs based on the previous bullet point FAB 489 - <@U0ZR63HLK> (with help from <@U26T99AQ4>) =&gt; In progress\n(c) Transition the crypto code to the new architecture - <@U26T99AQ4> =&gt; Todo\n\n2. Modular crypto library, with multi CSP support (FAB-355)\n(a) Definition of the crypto provider interface - <@U0ZR63HLK> , <@U10Q62R8X> , Tamas =&gt; In Progress\n(b) Software provider - <@U10Q62R8X>  =&gt; In Progress\n(c) Refactoring on the hyperledger code to use that library - <@U0ZR63HLK> =&gt; In Progress","edited":{"user":"U1BC5A0F9","ts":"1475482309.000000"},"ts":"1475482255.000003"},{"user":"U10Q62R8X","inviter":"U1BC5A0F9","text":"<@U10Q62R8X|vpaprots> has joined the channel","type":"message","subtype":"channel_join","ts":"1475482264.000004"},{"type":"message","user":"U1BC5A0F9","text":"We are also working with <@U0S5KF44D> on finalizing the membership service API, as well as the high level flow of membership service operations (the ones done through the blockchain).","edited":{"user":"U1BC5A0F9","ts":"1475482459.000000"},"ts":"1475482436.000006"},{"user":"U0XV1HDL3","text":"<@U0XV1HDL3|cca> has joined the channel","type":"message","subtype":"channel_join","ts":"1475486934.000008"},{"type":"message","subtype":"file_share","text":"<@U0ZR63HLK|adc> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/adc\/F2JKXGXEU\/protobufmessagesandflow.pdf|ProtobufMessagesAndFlow.pdf> and commented: Hi All, this file contains the protobuf messages and the relative flow with the security checks to put in place. This a joint effort with <@U1BC5A0F9> and <@U26T99AQ4>.","file":{"id":"F2JKXGXEU","created":1475506254,"timestamp":1475506254,"name":"ProtobufMessagesAndFlow.pdf","title":"ProtobufMessagesAndFlow.pdf","mimetype":"application\/pdf","filetype":"pdf","pretty_type":"PDF","user":"U0ZR63HLK","editable":false,"size":824792,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2JKXGXEU\/protobufmessagesandflow.pdf?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2JKXGXEU\/download\/protobufmessagesandflow.pdf?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/adc\/F2JKXGXEU\/protobufmessagesandflow.pdf","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2JKXGXEU-66a1d1cac6","channels":["C2GE7GXM1"],"groups":[],"ims":[],"comments_count":1,"initial_comment":{"id":"Fc2JJF8RPV","created":1475506254,"timestamp":1475506254,"user":"U0ZR63HLK","is_intro":true,"comment":"Hi All, this file contains the protobuf messages and the relative flow with the security checks to put in place. This a joint effort with <@U1BC5A0F9> and <@U26T99AQ4>.","channel":""},"reactions":[{"name":"+1","users":["U1GN670VD"],"count":1}]},"user":"U0ZR63HLK","upload":true,"display_as_bot":false,"username":"<@U0ZR63HLK|adc>","bot_id":null,"ts":"1475506255.000009"},{"user":"U0XQ35CDD","text":"<@U0XQ35CDD|kostas> has joined the channel","type":"message","subtype":"channel_join","ts":"1475514426.000010"},{"user":"U0YJUECE8","text":"<@U0YJUECE8|silliman> has joined the channel","type":"message","subtype":"channel_join","ts":"1475519868.000011"},{"user":"U0XPR4NP4","text":"<@U0XPR4NP4|jyellick> has joined the channel","type":"message","subtype":"channel_join","ts":"1475523942.000012"},{"type":"message","user":"U0XPR4NP4","text":"Hey <@U1BC5A0F9>, just had a long talk with <@U0S5KF44D> about bootstrapping.  Also talked some with <@U0XQ35CDD> and <@U0XR6J961> and there seems to be considerable resistance to using the transaction format as is for configuration changes as it is complicated to produce and consume.  Maybe this is my poor understanding of the transaction format, so perhaps you can enlighten me.\n\nStill, I would like to see how we can support the use case enumerated in my email a while back.  Namely, I would like to create a binary blob (a configuration) and send it to parties for review and approval (endorsement, but no actual execution or execution results), then collect this into a transaction which can clearly (and efficiently) be identified as a 'configuration transaction'.\n\nI think that if the fabric transaction format can be generalized to support this simply, that would be ideal.  However, it might be simpler just to start from scratch.  I think many of the problems which are being solved for the fabric transaction type can be eliminated for the reconfiguration transaction type because there is no need for unlinkability.  We could also use a globally unique sequence number or some such to prevent replay, as these configuration changes will always allow for a high degree of orchestration.","ts":"1475524584.000013"},{"user":"U0XR6J961","inviter":"U0XPR4NP4","text":"<@U0XR6J961|simon> has joined the channel","type":"message","subtype":"channel_join","ts":"1475524595.000014"},{"user":"U12452RAP","text":"<@U12452RAP|grapebaba> has joined the channel","type":"message","subtype":"channel_join","ts":"1475539355.000015"},{"user":"U1GN670VD","text":"<@U1GN670VD|thiruworkspace> has joined the channel","type":"message","subtype":"channel_join","ts":"1475539490.000016"},{"type":"message","user":"U1BC5A0F9","text":"I see, yes we would need to make transaction structure simpler for these cases.","ts":"1475574102.000017"},{"type":"message","user":"U1BC5A0F9","text":"Wondering if it would make sense that we have a special type of proposal called {orderer-reconfig}, that contains information on the new configuration (or parts of its) of the ordering service. Endorsement for this would be null. So overall, the client\/orderer-service admin, would need to sign a transaction that has one proposalAction, with proposal header (as is now) and with payload this new configuration file. No EndorsedActions henceforth, just the external transaction signature coming from the orderer-service admin (some sort of simplified fabric-client here).","edited":{"user":"U1BC5A0F9","ts":"1475574605.000000"},"ts":"1475574459.000018"},{"type":"message","user":"U1BC5A0F9","text":"The committing peers would need to run some sort of VSCC in this case, that is, make sure that is the defined admin who signed the tx based on the latter configuration, and apply the configuration changes but giving it as input to some sort of  reconfig function.","edited":{"user":"U1BC5A0F9","ts":"1475574833.000000"},"ts":"1475574750.000020"},{"type":"message","user":"U1BC5A0F9","text":"Asking <@U26T99AQ4>, and <@U0ZR63HLK> on this, as we have been discussing a couple of ideas there, also considering re-using our existing chaincode-infrastructure, and endorsement logic. In this case, you would assume  system chaincode proposal that is endorsed with the simulation results (reconfigured orderer-system variables) by the administrator node (priviledged) node. ESCC would be naturally a signature from the latter. And VSCC would be signature checking and direct application of system state updates.","edited":{"user":"U1BC5A0F9","ts":"1475574975.000000"},"ts":"1475574797.000021"},{"type":"message","user":"U0XR6J961","text":"<@U1BC5A0F9> but orderer reconfig needs a (separate) set of signatures to show authorization","ts":"1475579248.000025"},{"type":"message","user":"U1BC5A0F9","text":"correct.","edited":{"user":"U1BC5A0F9","ts":"1475579269.000000"},"ts":"1475579260.000026"},{"type":"message","user":"U1BC5A0F9","text":"meaning that in the case where one implements this reconfig mechanism by reusing our infrastructure\" then configuration would include a CA, potentially and an admin certtificate taht should be providing the endorsement throughout ESCC.","ts":"1475579349.000028"},{"type":"message","user":"U1BC5A0F9","text":"not sure how this is to run. But assuming that ordering service is separate from the rest of the networks. Shouldnt there be some admin of its? Is it all distributed ?","ts":"1475579404.000029"},{"type":"message","user":"U1BC5A0F9","text":"How would i (i = blockchain developer) know who to pay for this service if we assume that this is offered as service.","ts":"1475579432.000030"},{"type":"message","user":"U1BC5A0F9","text":"What would the business model be in this case?","ts":"1475579468.000031"},{"type":"message","user":"U0XR6J961","text":"no idea how the business angle is","ts":"1475579469.000032"},{"type":"message","user":"U0XR6J961","text":"but last time i talked with binh, the reconfiguration design was:","ts":"1475579488.000033"},{"type":"message","user":"U1BC5A0F9","text":"cause this would help much in bootstrapping and designing reconfiguration opearations","ts":"1475579491.000034"},{"type":"message","user":"U0XR6J961","text":"orderer network requires a multisig for reconfiguration","ts":"1475579508.000035"},{"type":"message","user":"U0XR6J961","text":"this is entirely independent of the fabric network","ts":"1475579525.000036"},{"type":"message","user":"U1BC5A0F9","text":"multisig coming from t out of n orderers?","ts":"1475579531.000037"},{"type":"message","user":"U0XR6J961","text":"no, from authorized people","ts":"1475579545.000038"},{"type":"message","user":"U1BC5A0F9","text":"cool","ts":"1475579553.000039"},{"type":"message","user":"U0XR6J961","text":"creation of a signed reconfiguration happens offline","ts":"1475579561.000040"},{"type":"message","user":"U0XR6J961","text":"and the reconfiguration can of course change the multisig required to do the next reconfiguration","ts":"1475579586.000041"},{"type":"message","user":"U1BC5A0F9","text":"from reconfiguration request perspective it may not be different if you have one or more signatures required. if they come from the client side (assuming a n off-badn way of producing it).","ts":"1475579616.000042"},{"type":"message","user":"U1BC5A0F9","text":"Meaning that the system could treat this request in the same way.","ts":"1475579654.000043"},{"type":"message","user":"U0XR6J961","text":"i expect the format to be \"N out of these following certificates need to sign\"","ts":"1475579669.000044"},{"type":"message","user":"U0XR6J961","text":"of course you could automate the reconfiguration by using some sort of reconfiguration endorsement chaincode","ts":"1475579747.000045"},{"type":"message","user":"U0XR6J961","text":"but i'd be very careful about this","ts":"1475579758.000046"},{"type":"message","user":"U0XR6J961","text":"because the security of the chain hinges on the orderer configuration","ts":"1475579772.000047"},{"type":"message","user":"U0XR6J961","text":"if somebody can reconfigure it at will, the whole network can be taken over","ts":"1475579792.000048"},{"type":"message","user":"U1BC5A0F9","text":"well this refers to the case where you trust onen or a few selective endorsers of course","ts":"1475585577.000049"},{"type":"message","user":"U1BC5A0F9","text":"otherwise you would still need t out of n endorsers to endorse this ...","ts":"1475585594.000050"},{"type":"message","user":"U1BC5A0F9","text":"There needs to be \"multisig\" when invoking this system chaincode. Now the question is, who should be executing this invocation tx.","ts":"1475585688.000051"},{"type":"message","user":"U1BC5A0F9","text":"- option 1: selective priviledged endorsers, that provide endorser signatures (known to orderer infrastructure for endorsing system chainocde invocations) and VSCC does what in our chancdes VSCC does: endorser signature check, certificate validation, version checks, and application of state changes.","ts":"1475585768.000052"},{"type":"message","user":"U1BC5A0F9","text":"- option 2: ESCC is not needed, but VSCC does the execution using peers (orderers) current state. Assuming this is a system chaincode, executed after  the tx is totally ordered, there may not be serious problems there(?) Wdyt?","ts":"1475585825.000053"},{"type":"message","user":"U1BC5A0F9","text":"Again, without considering channels.","ts":"1475585832.000054"},{"type":"message","user":"U0XV1HDL3","text":"The answer to the question here depends on how modular one wants to make the \"orderers\" (providing the consensus service but not state). If a 3rd party lib can be plugged in (i believe some folks are looking at Apache Kafka), this must be independent. If considering a self-built consensus service (for reconfig re-using our infrastructure), it *may* use such support; but it would be more modular to construct it first independently, not assuming such explicit interaction with the blockchain peers and requests. I recommend to keep the two separated, keep in mind the possible link, but only link them later.","ts":"1475586169.000055"},{"type":"message","user":"U0XR6J961","text":"<@U1BC5A0F9> I don't understand what you're saying","ts":"1475586347.000056"},{"type":"message","user":"U0XR6J961","text":"i don't think the configuration of the orderer network should be tied to anything in the fabric \"network\"","ts":"1475586378.000057"},{"type":"message","user":"U1BC5A0F9","text":"it should not","ts":"1475586401.000058"},{"type":"message","user":"U1BC5A0F9","text":"they have their own CA\/certificates etc..","ts":"1475586408.000059"},{"type":"message","user":"U0XR6J961","text":"reconfiguration requirements are defined as a property of the orderer config","ts":"1475586413.000060"},{"type":"message","user":"U1BC5A0F9","text":"but to some extend if orderers are removed, e.g., fabric endorsers should know no?","ts":"1475586438.000061"},{"type":"message","user":"U0XR6J961","text":"orderer reconfig is authorized towards the fabric network because the orderers sign the batch which contains the reconfig","ts":"1475586459.000062"},{"type":"message","user":"U1BC5A0F9","text":"so the client-tx","ts":"1475586470.000063"},{"type":"message","user":"U1BC5A0F9","text":"sorry the client-proposal","ts":"1475586483.000064"},{"type":"message","user":"U0XR6J961","text":"no","ts":"1475586485.000065"},{"type":"message","user":"U0XR6J961","text":"proposal is fabric stuff","ts":"1475586494.000066"},{"type":"message","user":"U0XR6J961","text":"orderers do not need to know about proposals","ts":"1475586507.000067"},{"type":"message","user":"U1BC5A0F9","text":"Not sure about this.","edited":{"user":"U1BC5A0F9","ts":"1475586541.000000"},"ts":"1475586520.000068"},{"type":"message","user":"U1BC5A0F9","text":"Meaning again, it does not have to be chaincode proposal like","ts":"1475586602.000070"},{"type":"message","user":"U1BC5A0F9","text":"but it is a form of a proposal. It is some message that upon advertized to the fabric endorser, will cause some internal state to change.","ts":"1475586627.000071"},{"type":"message","user":"U0XR6J961","text":"not only endorser","ts":"1475586669.000072"},{"type":"message","user":"U1BC5A0F9","text":"fabric peer.","ts":"1475586677.000073"},{"type":"message","user":"U0XR6J961","text":"to all consumers of the orderer output","ts":"1475586679.000074"},{"type":"message","user":"U1BC5A0F9","text":"correct.","ts":"1475586688.000075"},{"type":"message","user":"U0XR6J961","text":"so in a way it is a management message originating from the ordering service","edited":{"user":"U0XR6J961","ts":"1475586707.000000"},"ts":"1475586700.000076"},{"type":"message","user":"U1BC5A0F9","text":"But what is not clear to me, is the following. Do orderers already have a protocol in place that would enable them to validate reconfiguration messages among them?","ts":"1475586740.000078"},{"type":"message","user":"U0XR6J961","text":"we don't have code for that yet","ts":"1475586774.000079"},{"type":"message","user":"U0XR6J961","text":"but essentially a reconfiguration request\/message which does not bear the right signatures would be discarded","ts":"1475586795.000080"},{"type":"message","user":"U1BC5A0F9","text":"Right. So, since there are many common points (the way is see it) from security perspective with the proposal messaging, and state updates, etc. why cant we reuse what we have","ts":"1475586820.000081"},{"type":"message","user":"U1BC5A0F9","text":"?","ts":"1475586821.000082"},{"type":"message","user":"U0XR6J961","text":"if it contains the right signatures, it gets ordered and applied after ordering","ts":"1475586827.000083"},{"type":"message","user":"U1BC5A0F9","text":"Correct.","ts":"1475586835.000084"},{"type":"message","user":"U1BC5A0F9","text":"So this is option 2","ts":"1475586846.000085"},{"type":"message","user":"U1BC5A0F9","text":"(from the list above).","ts":"1475586868.000086"},{"type":"message","user":"U0XR6J961","text":"we can reuse what we have if that code is simple and does not introduce extra dependencies","ts":"1475586880.000087"},{"type":"message","user":"U0XR6J961","text":"checking these signatures does not require a CA and tcerts and whatnot","ts":"1475586905.000088"},{"type":"message","user":"U1BC5A0F9","text":"right","ts":"1475587052.000089"},{"type":"message","user":"U1BC5A0F9","text":"But, to a large extend this should be hte case for our transactions.","ts":"1475587102.000090"},{"type":"message","user":"U1BC5A0F9","text":"As membership service moves to a library.","ts":"1475587109.000091"},{"type":"message","user":"U0XQ35CDD","text":"How would that be the case with membership services moving to a library?","attachments":[{"fallback":"[October 4th, 2016 9:18 AM] elli: But, to a large extend this should be hte case for our transactions.","ts":"1475587102.000090","author_subname":"elli","channel_id":"C2GE7GXM1","channel_name":"fabric-crypto","is_msg_unfurl":true,"text":"But, to a large extend this should be hte case for our transactions.","author_name":"Elli","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/elli","author_icon":"https:\/\/secure.gravatar.com\/avatar\/8a94917afbdbd7e1bd944f484dc05cfe.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0022-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1475587102000090","is_share":true,"footer":"Posted in #fabric-crypto"}],"ts":"1475587596.000092"},{"type":"message","user":"U1BC5A0F9","text":"What i mean is that membership service code will become a library, for ppl to use it as they wish.","ts":"1475587707.000093"},{"type":"message","user":"U1BC5A0F9","text":"Many ppl already have the requirement of adding their own certificates etc.","ts":"1475587721.000094"},{"type":"message","user":"U1BC5A0F9","text":"So, we have to face the same problem in transactions.","ts":"1475587729.000095"},{"type":"message","user":"U1BC5A0F9","text":"We need to make the structure generic enough to capture potentially different types of certificates than our","ts":"1475587748.000096"},{"type":"message","user":"U1BC5A0F9","text":"ECerts\/TCerts.","edited":{"user":"U1BC5A0F9","ts":"1475587785.000000"},"ts":"1475587753.000097"},{"type":"message","user":"U1BC5A0F9","text":"transaction\/proposal etc meaning.","ts":"1475587769.000099"},{"type":"message","user":"U1BC5A0F9","text":"So, for me it does exist some ordering service root CA, and some fabric network root CA.","ts":"1475587908.000102"},{"type":"message","user":"U1BC5A0F9","text":"And both networks need to know both of them.","ts":"1475587923.000103"},{"type":"message","user":"U0XPR4NP4","text":"Perhaps there is some deployment scenario I am not thinking of, but I don't anticipate the orderer service needing a CA","ts":"1475587950.000104"},{"type":"message","user":"U1BC5A0F9","text":"(or more than one)","ts":"1475587953.000105"},{"type":"message","user":"U0XV1HDL3","text":"For keeping the orderer service modular, it must not know of transactions, only broadcast requests; there will be a special request that triggers its reconfiguration, just like here : <http:\/\/www.di.fc.ul.pt\/~bessani\/publications\/dsn14-bftsmart.pdf>, page 3. From the orderer service, a CA is not strictly needed, a list of identities can be enough.","ts":"1475587958.000106"},{"type":"message","user":"U1BC5A0F9","text":"CA or certificates of the peers.","ts":"1475587966.000107"},{"type":"message","user":"U0XV1HDL3","text":"certificates = public keys, you mean?","ts":"1475587976.000108"},{"type":"message","user":"U1BC5A0F9","text":"right","edited":{"user":"U1BC5A0F9","ts":"1475587986.000000"},"ts":"1475587981.000109"},{"type":"message","user":"U0XV1HDL3","text":"(they are called ceritificates, but they are not really certificates that need an anchor with a CA cert)","ts":"1475587999.000111"},{"type":"message","user":"U0XV1HDL3","text":"ok","ts":"1475588000.000112"},{"type":"message","user":"U1BC5A0F9","text":"agreed.","ts":"1475588011.000113"},{"type":"message","user":"U1BC5A0F9","text":"<@U0XV1HDL3>, well from what i understood from latter discussions is that the orderers would need to assess client signature on the transactions.","ts":"1475588090.000114","reactions":[{"name":"+1","users":["U1GN670VD"],"count":1}]},{"type":"message","user":"U1BC5A0F9","text":"Also orderers are not to accept messages from anyone, there has to be some authentication, especially when it comes to submitting messages to different channels.","ts":"1475588120.000115"},{"type":"message","user":"U0XV1HDL3","text":"yes, but maybe they can call some component to keep it modular: orderer asks component: is this a valid message to broadcast?","ts":"1475588146.000116"},{"type":"message","user":"U1BC5A0F9","text":"Will though need to check the kafka channels access control there.","ts":"1475588147.000117"},{"type":"message","user":"U1BC5A0F9","text":"Exactly. Which is the part associated to ordering service configuration management.","ts":"1475588179.000118"},{"type":"message","user":"U1BC5A0F9","text":"(in the fabric)","ts":"1475588183.000119"},{"type":"message","user":"U1BC5A0F9","text":"Sorry, the other way round.","ts":"1475588203.000120"},{"type":"message","user":"U1BC5A0F9","text":"Which is the part associated to fabric network authentication mechanisms.","ts":"1475588236.000121"},{"type":"message","user":"U1BC5A0F9","text":"But not clear what is the business model here.","ts":"1475588265.000122"},{"type":"message","user":"U1BC5A0F9","text":":disappointed:","ts":"1475588311.000123"},{"type":"message","user":"U0XV1HDL3","text":"?","ts":"1475588333.000124"},{"type":"message","user":"U1GN670VD","text":"Hi Elli, In this text \"client signature on the trans..\", the client signature would be coming from the client SDK right? additionally, do you except both the cert and the sign digest... or does fabric have a public ledger of participants public keys?","attachments":[{"fallback":"[October 4th, 2016 2:34 PM] elli: <@U0XV1HDL3>, well from what i understood from latter discussions is that the orderers would need to assess client signature on the transactions.","ts":"1475588090.000114","author_subname":"elli","channel_id":"C2GE7GXM1","channel_name":"fabric-crypto","is_msg_unfurl":true,"text":"<@U0XV1HDL3>, well from what i understood from latter discussions is that the orderers would need to assess client signature on the transactions.","author_name":"Elli","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/elli","author_icon":"https:\/\/secure.gravatar.com\/avatar\/8a94917afbdbd7e1bd944f484dc05cfe.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0022-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1475588090000114","is_share":true,"footer":"Posted in #fabric-crypto"}],"ts":"1475589227.000125"},{"type":"message","user":"U1BC5A0F9","text":"Hi, so the \"client signature on the trans..\" refers indeed to the client-sdk produced one, correct.","ts":"1475589343.000127","reactions":[{"name":"+1","users":["U1GN670VD"],"count":1}]},{"type":"message","user":"U1BC5A0F9","text":"The transaction structure, has already a field in its header referring to a \"creator\", that should be matching the signature included in the transaction.","ts":"1475589373.000128"},{"type":"message","user":"U1BC5A0F9","text":"Where by transaction structure, i refer to the one in the .pdf that Angelo posted :slightly_smiling_face:","ts":"1475589398.000129"},{"type":"message","subtype":"file_mention","text":"<@U1BC5A0F9|elli> mentioned a file: <https:\/\/hyperledgerproject.slack.com\/files\/adc\/F2JKXGXEU\/protobufmessagesandflow.pdf|ProtobufMessagesAndFlow.pdf>.","file":{"id":"F2JKXGXEU","created":1475506254,"timestamp":1475506254,"name":"ProtobufMessagesAndFlow.pdf","title":"ProtobufMessagesAndFlow.pdf","mimetype":"application\/pdf","filetype":"pdf","pretty_type":"PDF","user":"U0ZR63HLK","editable":false,"size":824792,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2JKXGXEU\/protobufmessagesandflow.pdf?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2JKXGXEU\/download\/protobufmessagesandflow.pdf?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/adc\/F2JKXGXEU\/protobufmessagesandflow.pdf","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2JKXGXEU-66a1d1cac6","channels":["C2GE7GXM1"],"groups":[],"ims":[],"comments_count":1,"initial_comment":{"id":"Fc2JJF8RPV","created":1475506254,"timestamp":1475506254,"user":"U0ZR63HLK","is_intro":true,"comment":"Hi All, this file contains the protobuf messages and the relative flow with the security checks to put in place. This a joint effort with <@U1BC5A0F9> and <@U26T99AQ4>.","channel":""},"reactions":[{"name":"+1","users":["U1GN670VD"],"count":1}]},"user":"U1BC5A0F9","ts":"1475589424.000131"},{"type":"message","user":"U1BC5A0F9","text":"There is no assumption for the certificates being publicly available somewhere, especially cause that certificate could be anonymous. Enrollment certificates could make sense to be publicly available.","edited":{"user":"U1BC5A0F9","ts":"1475589591.000000"},"ts":"1475589523.000133"},{"type":"message","user":"U1BC5A0F9","text":"What is publicly available and inserted in some form in the blockchain, is the root ca that signs peers\/clients' certificates.","ts":"1475589572.000134"},{"type":"message","user":"U0XPR4NP4","text":"<@U1BC5A0F9> Another case I thought of for supporting a secondary transaction format.  I am thinking of the case where a group of parties wants to put an assertion on the chain, but actually modifying state does not make sense.  For instance, with a side-chain, the participants might want to push a hash onto the main chain, asserting that everyone agrees with the current state of the side-chain.  You could of course implement this as a custom chaincode that creates a random key and assigns the hash to it, but that's a little indirect and almost obfuscated.  It seems like there are other cases where the transaction is just a group attestation (which has no meaning to anyone not involved)","edited":{"user":"U0XPR4NP4","ts":"1475589843.000000"},"ts":"1475589807.000136"},{"type":"message","user":"U1BC5A0F9","text":"Aha, so you are saying that there may be needs, where ResponsePayload does not need to have extensions.","ts":"1475589884.000138"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I would argue that ProposalResponsePayload would be empty in these cases","ts":"1475590041.000139"},{"type":"message","user":"U1BC5A0F9","text":"no epoch","ts":"1475590050.000140"},{"type":"message","user":"U1BC5A0F9","text":"?","ts":"1475590053.000141"},{"type":"message","user":"U0XPR4NP4","text":"Ah, I guess there is an epoch and hash buried in there, so it would just be the extensions","ts":"1475590191.000142"},{"type":"message","user":"U0XPR4NP4","text":"Why is the ProposalHash and Epoch in that submessage instead of in the ProposalResponse?","ts":"1475590215.000143"},{"type":"message","user":"U0XPR4NP4","text":"Oh, I see, because that is what is actually signed","ts":"1475590244.000144"},{"type":"message","user":"U0XPR4NP4","text":"But it's confusing to me then, that `ProposalResponse.Response` is not included in the signature","ts":"1475590280.000145"},{"type":"message","user":"U0XR6J961","text":"can we use ASN1 DER for all messages that are referenced by the root hash?","ts":"1475592948.000146"},{"type":"message","user":"U0XPR4NP4","text":"Root hash? My concern is that these messages must necessarily be allowed to occur later in the chain as well.  If we use ASN1 DER, it seems like we need to have an envelope which types the encoding","ts":"1475593979.000147"},{"user":"U2B3A70TX","text":"<@U2B3A70TX|soldat> has joined the channel","type":"message","subtype":"channel_join","ts":"1475608457.000148"},{"type":"message","user":"U0XQ35CDD","text":"<@U1BC5A0F9> <@U0XV1HDL3>: Kafka does indeed keep it pluggable here -- they just define an `Authorizer` interface. (They also ship with a basic implementation of it that they call `SimpleAclAuthorizer`.)","attachments":[{"fallback":"[October 4th, 2016 9:35 AM] elli: Will though need to check the kafka channels access control there.","ts":"1475588147.000117","author_subname":"elli","channel_id":"C2GE7GXM1","channel_name":"fabric-crypto","is_msg_unfurl":true,"text":"Will though need to check the kafka channels access control there.","author_name":"Elli","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/elli","author_icon":"https:\/\/secure.gravatar.com\/avatar\/8a94917afbdbd7e1bd944f484dc05cfe.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0022-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1475588147000117","is_share":true,"footer":"Posted in #fabric-crypto"}],"edited":{"user":"U0XQ35CDD","ts":"1475626018.000000"},"ts":"1475625590.000149"},{"type":"message","user":"U0XQ35CDD","text":"When the broker starts up, it constructs the Authorizer object and initializes it with a config. The ACLs are posted in the ZooKeeper ensemble. When the first request comes in, the broker checks its auth cache -- it's empty, so it requests it from ZK and caches it for all subsequent requests.","ts":"1475625708.000150"},{"type":"message","user":"U0XQ35CDD","text":"If you want to dive into more detail, KIP-11 makes for a good starting point: <https:\/\/cwiki.apache.org\/confluence\/display\/KAFKA\/KIP-11+-+Authorization+Interface>","ts":"1475625758.000151"},{"type":"message","user":"U0XQ35CDD","text":"And this post provides step-by-step directions for hands-on experimentation: <http:\/\/www.confluent.io\/blog\/apache-kafka-security-authorization-authentication-encryption\/> ","edited":{"user":"U0XQ35CDD","ts":"1475629719.000000"},"ts":"1475625862.000152"},{"type":"message","user":"U1BC5A0F9","text":"Thanks much <@U0XQ35CDD>!","ts":"1475649402.000157"},{"type":"message","user":"U0XQ35CDD","text":"You're welcome","ts":"1475673044.000158"},{"type":"message","user":"U10Q62R8X","text":"Question.. TCert derivation algorithm. And HSMs.. does anyone have experience with Safenet? or Thalos? and their custom apis?","ts":"1475690517.000159"},{"type":"message","user":"U10Q62R8X","text":"I've been trying to see how to support HSMs in the fabric.. thats one piece that is not PKCS11-pluggable.. ideas how you would implement it with your favorite HSMs?","ts":"1475690579.000160"},{"type":"message","user":"U10Q62R8X","text":"<@U0MRY2LKY> ^^^ FYI","ts":"1475690600.000161"},{"user":"U0MRY2LKY","inviter":"U10Q62R8X","text":"<@U0MRY2LKY|troyronda> has joined the channel","type":"message","subtype":"channel_join","ts":"1475690608.000162"},{"type":"message","user":"U0XPR4NP4","text":"<@U1BC5A0F9> Have you given any thought to the other transaction format discussed yesterday?","ts":"1475694380.000163"},{"user":"U0KM61BCP","text":"<@U0KM61BCP|cbf> has joined the channel","type":"message","subtype":"channel_join","ts":"1475694854.000164"},{"type":"message","user":"U0MRY2LKY","text":"<@U10Q62R8X> yes - have the functionality that is outside of the normal PKCS11 to be pluggable for each HSM vendor\u2026 and have as much as possible go to the HSM vendor\u2019s normal PKSCS11 library (e.g., ECerts).","ts":"1475704914.000165"},{"type":"message","user":"U1GN670VD","text":"just to clarify it could be root and other intermediate certs as well right?","attachments":[{"fallback":"[October 4th, 2016 2:59 PM] elli: What is publicly available and inserted in some form in the blockchain, is the root ca that signs peers\/clients' certificates.","ts":"1475589572.000134","author_subname":"elli","channel_id":"C2GE7GXM1","channel_name":"fabric-crypto","is_msg_unfurl":true,"text":"What is publicly available and inserted in some form in the blockchain, is the root ca that signs peers\/clients' certificates.","author_name":"Elli","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/elli","author_icon":"https:\/\/secure.gravatar.com\/avatar\/8a94917afbdbd7e1bd944f484dc05cfe.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0022-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1475589572000134","is_share":true,"footer":"Posted in #fabric-crypto"}],"ts":"1475711313.000166"},{"type":"message","user":"U1GN670VD","text":"<@U1BC5A0F9> additionally, can we also publish the CRL certs in the blockchain?","ts":"1475711663.000169"},{"type":"message","user":"U0ZR63HLK","text":"<@U0XPR4NP4>, regarding your question on why `ProposalResponse.Response` is not included in the signature, the answer is that at the message level we care to put signatures on what will end up in the ledger and ProposalResponse.Response will not go to the ledger. The hidden assumption is that TLS is running and that protests ProposalResponse.Response. But I will give to is a second thought :slightly_smiling_face:","ts":"1475735182.000170"},{"type":"message","user":"U0ZR63HLK","text":"<@U0XPR4NP4>, regarding the other transaction format, I guess you refer to the assertion type. In this case, would ProposalResponsePayload.extension contain the assertion itself? Does the assertion need an endorsement? If a group of endorsers (from a subledger) wants to assert something on the main ledger, probably they don't want to reveal that the assertion is coming from a certain subledger but at the same time there must be a way for the committing peer to validate this assertion, no?","ts":"1475735456.000171"},{"type":"message","user":"U1BC5A0F9","text":"<https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1475735182000170>","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1475735182000170","fallback":"[October 5th, 2016 11:26 PM] adc: <@U0XPR4NP4>, regarding your question on why `ProposalResponse.Response` is not included in the signature, the answer is that at the message level we care to put signatures on what will end up in the ledger and ProposalResponse.Response will not go to the ledger. The hidden assumption is that TLS is running and that protests ProposalResponse.Response. But I will give to is a second thought :slightly_smiling_face:","ts":"1475735182.000170","author_subname":"adc","channel_id":"C2GE7GXM1","channel_name":"fabric-crypto","is_msg_unfurl":true,"text":"<@U0XPR4NP4>, regarding your question on why `ProposalResponse.Response` is not included in the signature, the answer is that at the message level we care to put signatures on what will end up in the ledger and ProposalResponse.Response will not go to the ledger. The hidden assumption is that TLS is running and that protests ProposalResponse.Response. But I will give to is a second thought :slightly_smiling_face:","author_name":"Angelo De Caro","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/adc","author_icon":"https:\/\/avatars.slack-edge.com\/2016-07-21\/61823221170_e0795e87fc9eb0abb221_48.jpg","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-crypto"}],"ts":"1475736980.000172"},{"type":"message","user":"U1BC5A0F9","text":"<@U0ZR63HLK>, <@U0XPR4NP4>: we may want to change name on this field, cause indeed ProposalResponse.Response would make people think this piece as the core part of the response :slightly_smiling_face:","ts":"1475737059.000174"},{"type":"message","user":"U0ZR63HLK","text":"make sense","ts":"1475737084.000175"},{"type":"message","user":"U1BC5A0F9","text":"<@U1GN670VD> : Right. Especially for the peer (endorser) certificates it would make sense to announce the whitelist or the blacklist of certificates through the blockchain. This would prevent committing peers coming to different conclusions w.r.t. a specific endorser certificate (providing a signature in the transaction) is invalid.","ts":"1475737390.000176"},{"type":"message","user":"U1BC5A0F9","text":"For user-certificates, one could follow the same path, though in this case the responsibility of checking the certificate validity of the user may be passed to the endorsers of the chaincode that user tries to invoke, and not checked for validity at the committing peer side. The latter is something that <@U0Y14MWA2>  proposed. That would work as long as we do not have the requirement to support transactions whose execution\/validity takes place at the committing peer side entirely.","edited":{"user":"U1BC5A0F9","ts":"1475737660.000000"},"ts":"1475737645.000177","reactions":[{"name":"+1","users":["U1GN670VD"],"count":1}]},{"user":"U2KJHTPQT","text":"<@U2KJHTPQT|stevenroose> has joined the channel","type":"message","subtype":"channel_join","ts":"1475738895.000179"},{"type":"message","user":"U1BC5A0F9","text":"Just created another channel to discuss these protobufs, called fabric-next-proto.","ts":"1475739567.000180"},{"user":"U0PB67X4K","text":"<@U0PB67X4K|garisingh> has joined the channel","type":"message","subtype":"channel_join","ts":"1475739597.000181"},{"type":"message","user":"U0ZR63HLK","text":"<@U0XQ35CDD>, thanks for the links about kafka authorization. Is it already in the plan to support kafka in the fabric? In order for the consensus to be pluggable we would need a way to generalize access control at the fabric, right?","ts":"1475743405.000182","reactions":[{"name":"+1","users":["U1BC5A0F9"],"count":1}]},{"type":"message","user":"U1GN670VD","text":":+1: .. would this be included within any existing JIRA?","attachments":[{"fallback":"[October 6th, 2016 8:03 AM] elli: <@U1GN670VD> : Right. Especially for the peer (endorser) certificates it would make sense to announce the whitelist or the blacklist of certificates through the blockchain. This would prevent committing peers coming to different conclusions w.r.t. a specific endorser certificate (providing a signature in the transaction) is invalid.","ts":"1475737390.000176","author_subname":"elli","channel_id":"C2GE7GXM1","channel_name":"fabric-crypto","is_msg_unfurl":true,"text":"<@U1GN670VD> : Right. Especially for the peer (endorser) certificates it would make sense to announce the whitelist or the blacklist of certificates through the blockchain. This would prevent committing peers coming to different conclusions w.r.t. a specific endorser certificate (providing a signature in the transaction) is invalid.","author_name":"Elli","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/elli","author_icon":"https:\/\/secure.gravatar.com\/avatar\/8a94917afbdbd7e1bd944f484dc05cfe.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0022-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1475737390000176","is_share":true,"footer":"Posted in #fabric-crypto"}],"edited":{"user":"U1GN670VD","ts":"1475752349.000000"},"ts":"1475752292.000183"},{"type":"message","user":"U1BC5A0F9","text":"Hm, I believe <https:\/\/jira.hyperledger.org\/browse\/FAB-116> should cover this, though it does not clarify a CRL. <@U0S5KF44D> would know.","ts":"1475752875.000185","reactions":[{"name":"+1","users":["U1GN670VD"],"count":1}]},{"type":"message","user":"U0XQ35CDD","text":"<@U0ZR63HLK>: It is not, and I don't think it will be any time soon. The Kafka option is there to (a) test whether we're building the orderer plugins in a modular way, and (b) have a point of reference when it comes to block throughput and latency. <https:\/\/jira.hyperledger.org\/browse\/FAB-32>","ts":"1475759291.000186"},{"type":"message","user":"U0ZR63HLK","text":"got it, thanks. Anyway, we need to design an api that allows to specify the credentials at the consensus client side","ts":"1475759427.000187"},{"type":"message","user":"U0ZR63HLK","text":"And it should be generic enough too.","ts":"1475759441.000188"},{"type":"message","user":"U0ZR63HLK","text":"We might take as point of reference KAFKA for this","ts":"1475759460.000189"},{"type":"message","user":"U0XQ35CDD","text":"Agreed, that was my thinking anyway.","ts":"1475759475.000190"},{"type":"message","user":"U0ZR63HLK","text":"good!","ts":"1475760259.000191"},{"user":"U1QUW6W82","text":"<@U1QUW6W82|michele> has joined the channel","type":"message","subtype":"channel_join","ts":"1475763111.000192"},{"type":"message","user":"U1GN670VD","text":"Yes, i agree. We plan to use the same certificate of the endorsement peer for the signing as well.","attachments":[{"fallback":"[October 6th, 2016 12:11 PM] thiruworkspace: :+1: .. would this be included within any existing JIRA?","ts":"1475752292.000183","author_subname":"thiruworkspace","channel_id":"C2GE7GXM1","channel_name":"fabric-crypto","is_msg_unfurl":true,"text":":+1: .. would this be included within any existing JIRA?","author_name":"Thirugnana Vijayan","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/thiruworkspace","author_icon":"https:\/\/secure.gravatar.com\/avatar\/5a3231a4869c2cfd430a8067e6bf87e7.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0022-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1475752292000183","is_share":true,"footer":"Posted in #fabric-crypto"}],"ts":"1475789737.000193"},{"type":"message","user":"U1GN670VD","text":"<@U1BC5A0F9> can you share the doc or jira for endorsement peers certificate validating interface or method, please?","attachments":[{"fallback":"[October 6th, 2016 12:11 PM] thiruworkspace: :+1: .. would this be included within any existing JIRA?","ts":"1475752292.000183","author_subname":"thiruworkspace","channel_id":"C2GE7GXM1","channel_name":"fabric-crypto","is_msg_unfurl":true,"text":":+1: .. would this be included within any existing JIRA?","author_name":"Thirugnana Vijayan","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/thiruworkspace","author_icon":"https:\/\/secure.gravatar.com\/avatar\/5a3231a4869c2cfd430a8067e6bf87e7.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0022-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1475752292000183","is_share":true,"footer":"Posted in #fabric-crypto"}],"ts":"1475789814.000194"},{"user":"U2GT93M2T","text":"<@U2GT93M2T|zdavatz> has joined the channel","type":"message","subtype":"channel_join","ts":"1475829907.000195"},{"user":"U1CTBUNEN","text":"<@U1CTBUNEN|mart0nix> has joined the channel","type":"message","subtype":"channel_join","ts":"1475847764.000196"},{"type":"message","user":"U1CTBUNEN","text":"hello","ts":"1475847778.000197"},{"type":"message","user":"U1CTBUNEN","text":"sharing some feedback about our business application requirements in terms of auditing","ts":"1475847791.000198"},{"type":"message","user":"U1CTBUNEN","text":"We currently envision the following roles\n\u2022 Lead Auditor\n\u2022 Auditor\n\u2022 Regulator\/Law Enforcement Lead\n\u2022 Regulator\/Law Enforcement Agent\n\u2022 Supply-Chain Member Lead\n\u2022 Supply-Chain Member General Agent\n\u2022 Supply-Chain Member Limited Agent\n\nthe leads will create delegate roles (agents)\nI found that the fabric supports delegate roles which I think it's a great idea\nI wasn't clear if the current delegation feature works on system-level roles (admin, client, auditor) or it could also work on user-defined roles","ts":"1475847812.000199"},{"user":"U1FDTCEUR","text":"<@U1FDTCEUR|tim.s> has joined the channel","type":"message","subtype":"channel_join","ts":"1475851545.000200"},{"type":"message","user":"U1BC5A0F9","text":"Hi, <@U1CTBUNEN>, thanks!","ts":"1476084057.000201"},{"type":"message","user":"U1BC5A0F9","text":"So far the attributes\/roles specified in the fabric TCerts of a user who is in possession of an attribute\/role, are managed\/certified by the membership service.","ts":"1476084121.000202"},{"type":"message","user":"U1BC5A0F9","text":"But it is true that the notion of \"registrar\" exists, where \"registrar\" is an entity that can register other users into the membership service.","ts":"1476084183.000203"},{"type":"message","user":"U1BC5A0F9","text":"<@U1GN670VD> : So for the membership services API, this is to be accommodated via this jira item <https:\/\/jira.hyperledger.org\/browse\/FAB-389>","ts":"1476084419.000204"},{"type":"message","user":"U1BC5A0F9","text":"With the endorsing peers validation APIs and process are related the following jira items: <https:\/\/jira.hyperledger.org\/browse\/FAB-40>,  <https:\/\/jira.hyperledger.org\/browse\/FAB-397>. For validation of their endorsements (signature validation if endorsement is only a signature) the membership services APIs (in FAB-389) should cover this. <@U0XPR4NP4> , <@U0ULK2JPP> to confirm :slightly_smiling_face:","edited":{"user":"U1BC5A0F9","ts":"1476084751.000000"},"ts":"1476084600.000205"},{"type":"message","user":"U1GN670VD","text":"Thanks <@U1BC5A0F9>","ts":"1476115360.000207"},{"type":"message","user":"U184J2R7S","text":"Keith Smith posted high level google document -CFSSL. The only thing we will do uniquely is TCERT generation and we would use CFSSL for ECERT generation.  Elli said they were going to look to see if the API on the same or wrapper they can use.  They need some modularity of crypto and all the fabric can go through that so if some company or 3rd party- they can substitute their implementation - they can substitute the lever itself-- that way they can do it easily and not managing fabric code deeper.  Elli wants to check to see if CFSSL can do that--&gt; this is for version 1.0","ts":"1476116083.000209"},{"type":"message","user":"U184J2R7S","text":"PKCS11 is something that is supported from HSM.","ts":"1476116171.000210"},{"type":"message","user":"U184J2R7S","text":"The question is where does this API sit in terms of CFSSL for HSM support?  WE are not concerned that HSM is not possible with CFSSL- concerned if the interface that CFSSL crypto library is compatible with the Hyperledger crypto interface, and we need to make sure there are no conflicts.","ts":"1476116223.000211"},{"type":"message","user":"U184J2R7S","text":"Keith and Elli said they may take a look tomorrow and post on slack to see what's in the CFSSL code","ts":"1476116323.000212"},{"type":"message","user":"U184J2R7S","text":"Key lifecycle is being worked- generate key, derive key and sign\/verify capabilities methods, and one of the goals is to plug in their own. Angelo has been working on this for bccsp.  Angelo  wants to try to post slides to get feedback as this is recent items he's been working on.","ts":"1476116574.000213"},{"type":"message","user":"U184J2R7S","text":"BCCSP is the blockchain cryptographic service provider that offers the implementation of cryptographic standards and algorithims. This covers key lifecycle, sign\/verify operation, and encrypt\/decrypt operation.  Genkey, derivekey, getkey, importkey, sign, verify, encrypt, decrypt are the different type of BCCSP interfaces he's working.  He tried to submit this in the implementation in his PR today.","ts":"1476116717.000214"},{"type":"message","user":"U184J2R7S","text":"what is the difference between getkey\/importkey relative to SKI?-- SKI is subject key identifier- when you want to address key on HSM, you need to have SKI -unique key in HSM.  For example, Your enrollment key of endorser will come with an SKI- this way it does not leak any information of the key.","ts":"1476116843.000215"},{"type":"message","user":"U184J2R7S","text":"There is typekey interface- key represents a key. it can be a symmetric or assymetric. In case of an asymmetric key, the key can be public or private. in case of private assymetric, the publickey() method allows to retrieve the corresponding public-key.  A key can be referenced via the subject key identifier (getSKI)","ts":"1476116894.000216"},{"type":"message","user":"U184J2R7S","text":"There are 5- fabric crypto provide submissions- starting with 1605 (which is under code review)","ts":"1476117115.000217"},{"type":"message","user":"U184J2R7S","text":"Angelo plans to post a set of carts talking about the BCCSP","ts":"1476117534.000218"},{"type":"message","user":"U0PB67X4K","text":"```\nThe question is where does this API sit in terms of CFSSL for HSM support?  WE are not concerned that HSM is not possible with CFSSL- concerned if the interface that CFSSL crypto library is compatible with the Hyperledger crypto interface, and we need to make sure there are no conflicts.\n```\n\nthis statement confuses me.  CFSSL is simply a mechanism to request signed certificates.  On the client side, it can generate the equivalent of a CSR and on its \"server\" side (also via command line) it can issue signed X509 certificates.  It includes an interface for plugging in PCKS11 libraries.   You can actually check out the code from letsencrypt where they actually provide a concrete implementation of a PKCS11 provider","ts":"1476117583.000219"},{"type":"message","user":"U184J2R7S","text":"One area that help could be used for community how to plug in CSP for China, etc,..","ts":"1476117778.000220"},{"type":"message","user":"U1BC5A0F9","text":"<@U0PB67X4K>: BCCSP (Blockchain crypto service provider) aimed to offer an low-level interface to do key-generation\/sign\/verify signature and encrypt\/decrypt using certain algorithms. Thus the question came up (by <@U0S5KF44D>) if the interface of crypto library used within CFSSL is compatible with the one of BCCSP. That is if we could use BCCSP as a single crypto library \/ dependency in the system.","edited":{"user":"U1BC5A0F9","ts":"1476122365.000000"},"ts":"1476122304.000221"},{"user":"U0RD1ALMV","text":"<@U0RD1ALMV|hart.montgomery> has joined the channel","type":"message","subtype":"channel_join","ts":"1476124486.000223"},{"type":"message","user":"U0PB67X4K","text":"Thanks <@U1BC5A0F9>.  most of cfssl is a wrapper around go crypto anyway.  But I don't see why it would be an issue","ts":"1476125723.000224"},{"type":"message","user":"U1BC5A0F9","text":"Aha, ok. So, we could implement our wrapper around our crypto library?","ts":"1476125762.000225"},{"type":"message","user":"U1BC5A0F9","text":"Just a question of whether we could make cfssl \"refer\" to our crypto lib","ts":"1476125817.000226"},{"type":"message","user":"U0PB67X4K","text":"cfssl is really just a library for certificate authority activities.  So not sure we would even need to go that far?   we should just leverage it to perform PKI CA functions?","ts":"1476127662.000227"},{"type":"message","user":"U0S5KF44D","text":"so are you saying that we should or shouldn\u2019t use cfssl apis to generate an ecert?","ts":"1476127840.000228"},{"type":"message","user":"U0PB67X4K","text":"we should","ts":"1476128405.000229"},{"type":"message","user":"U0S5KF44D","text":"so we would need to somehow plugin the bccsp apis underneath the cfssl api to generate the ecert it seems","ts":"1476128507.000230"},{"type":"message","user":"U0S5KF44D","text":"am I missing something?","ts":"1476128530.000231"},{"type":"message","user":"U0PB67X4K","text":"why underneath?","ts":"1476128934.000232"},{"type":"message","user":"U0PB67X4K","text":"what's so special about an eCert?","ts":"1476128968.000233"},{"type":"message","user":"U0PB67X4K","text":"it's an ECC private key and then request a signed X509 public key","ts":"1476129050.000234"},{"type":"message","user":"U0PB67X4K","text":"on the other hand, you don't have to use cfssl to generate the private key (and thus the public key) at all","edited":{"user":"U0PB67X4K","ts":"1476129335.000000"},"ts":"1476129307.000235"},{"type":"message","user":"U0S5KF44D","text":"I was looking at using the following cfssl api to gen the root cert for example.  If we use this, then the private key is created underneath this api","ts":"1476129524.000237"},{"type":"message","user":"U0S5KF44D","text":"cfssl gencert -initca CSRJSON","ts":"1476129529.000238"},{"type":"message","user":"U0S5KF44D","text":"I\u2019m trying to find which APIs I could call which would allow me to gen my own private key and pass it in","ts":"1476129618.000239"},{"type":"message","user":"U0PB67X4K","text":"ah - that's on the CA side","ts":"1476129742.000240"},{"type":"message","user":"U0PB67X4K","text":"which I would see ZERO use for bccsp","ts":"1476129758.000241"},{"type":"message","user":"U0PB67X4K","text":"I though you were talking about a client who want to get an eCert?","ts":"1476129776.000242"},{"type":"message","user":"U0S5KF44D","text":"no, they were talking about plugging the bccsp apis into membersrvc in v0.6","ts":"1476129819.000243"},{"user":"U2L9F7VL1","text":"<@U2L9F7VL1|adrianhopebailie> has joined the channel","type":"message","subtype":"channel_join","ts":"1476129821.000244"},{"type":"message","user":"U0S5KF44D","text":"so i started wondering how this would work in v1 when using cfssl in a cop server","ts":"1476129852.000245"},{"type":"message","user":"U0PB67X4K","text":"in a cop server I don't think you use bccsp at all","ts":"1476129879.000246"},{"type":"message","user":"U0PB67X4K","text":"well - I'll take that back - it depends on the APIs you present form the server - I see you are still looking at using grpc-based external API for cop server in v1?","ts":"1476129982.000247"},{"type":"message","user":"U0S5KF44D","text":"i take by your asking that you think we should stick with REST?","ts":"1476130042.000248"},{"type":"message","user":"U0S5KF44D","text":"we aren\u2019t far down that path","ts":"1476130052.000249"},{"type":"message","user":"U0PB67X4K","text":"I think REST \/ HTTP would be easier for clients to integrate with - for example a mobile device which wants to enroll.","ts":"1476130098.000250"},{"type":"message","user":"U0PB67X4K","text":"seems like cfssl had a decent set of REST\/HTTP APIs and actually just recently added some type of auth endpoint as well?","ts":"1476130143.000251"},{"type":"message","user":"U0S5KF44D","text":"i haven\u2019t seen the auth endpoint, but i\u2019ll look again \u2026 anyway, I wasn\u2019t sure if mixing REST for cop and GRPC only for peer was preferable, but certainly makes it easier \u2026 though maybe more work for SDKs","ts":"1476130297.000252"},{"type":"message","user":"U0PB67X4K","text":"most other CAs will have HTTP-based endpoints as well - e.g. any SCEP-based CA.  So reality is there will always be a mix of HTTP and GRPC when pulling in different CAs.  I am not opposed to GRPC for COP either.  But if we can leverage as much of CFSSL as possible should save some time.  Of course you could probably look at possibly replacing the CFSSL API server with the GRPC APIs as well.  I briefly checked that our yesterday but not in enough depth to actually see how feasible it would be","ts":"1476130469.000253"},{"type":"message","user":"U0S5KF44D","text":"ok \u2026 we\u2019ll support REST 1st and only add GRPC if\/when needed","ts":"1476130600.000254"},{"type":"message","user":"U0S5KF44D","text":"I just git pulled and don\u2019t see the auth endpoint but will look deeper.  That actually was the other reason I was going for GRPC, because it wasn\u2019t clear how intrusive it would be to add security to the existing endpoints","ts":"1476130694.000255"},{"type":"message","user":"U0PB67X4K","text":"in the docs section of cfssl there was something about authentication","ts":"1476131031.000256"},{"type":"message","user":"U0S5KF44D","text":"yes, see it \u2026 thx","ts":"1476131501.000257"},{"user":"U24M29R4G","text":"<@U24M29R4G|nikileshsa> has joined the channel","type":"message","subtype":"channel_join","ts":"1476132840.000258"},{"user":"U0NCW1DPX","text":"<@U0NCW1DPX|gengjh> has joined the channel","type":"message","subtype":"channel_join","ts":"1476167278.000259"},{"type":"message","user":"U0ZR63HLK","text":"<@U0PB67X4K>, <@U0S5KF44D>, @lli: if I got it correctly, CFSSL exposes an interface called signer.Signer that can be used to plug different signing capabilities. So, if we really want, we can potentially put our BCCSP there.","ts":"1476175293.000260"},{"type":"message","user":"U0ZR63HLK","text":"I'm also trying to understand how HSM is integrated in CFSSL but I'm struggling in setting it up using SoftHSM. Any idea?","ts":"1476175332.000261"},{"type":"message","user":"U0PB67X4K","text":"here's a link to see work that the LetsEncrypt team did - <https:\/\/github.com\/letsencrypt\/pkcs11key>","attachments":[{"service_name":"GitHub","title":"letsencrypt\/pkcs11key","title_link":"https:\/\/github.com\/letsencrypt\/pkcs11key","text":"pkcs11key - An interface to PKCS#11 devices that satisfies the crypto.Signer interface","fallback":"GitHub: letsencrypt\/pkcs11key","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/9289019?v=3&s=400","from_url":"https:\/\/github.com\/letsencrypt\/pkcs11key","thumb_width":256,"thumb_height":256,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1476177080.000262"},{"type":"message","user":"U0ZR63HLK","text":"Yes, yes. So, essentially in CFSSL one creates a new local signer (local.NewSigner) and passes a crypto.Signer. Then, letsencrypt provides the PKCS11-based crypto.Signer","ts":"1476177660.000264"},{"type":"message","user":"U0ZR63HLK","text":"super easy","ts":"1476177665.000265"},{"type":"message","user":"U0ZR63HLK","text":"actually, we have to do the same in fabric","edited":{"user":"U0ZR63HLK","ts":"1476177790.000000"},"ts":"1476177676.000266"},{"type":"message","user":"U0ZR63HLK","text":"we need a BCCSP-based crypto.Signer in order to sign TCert and ECert","ts":"1476177708.000267"},{"type":"message","user":"U0ZR63HLK","text":"so the BCCSP can be integrated in CFSSL easily","edited":{"user":"U0ZR63HLK","ts":"1476177816.000000"},"ts":"1476177736.000268"},{"type":"message","user":"U0ZR63HLK","text":"if needed at all","ts":"1476177740.000269"},{"user":"U2MSDAQG2","text":"<@U2MSDAQG2|hurui777> has joined the channel","type":"message","subtype":"channel_join","ts":"1476186285.000272"},{"user":"U2MCH9EEB","text":"<@U2MCH9EEB|crazybit> has joined the channel","type":"message","subtype":"channel_join","ts":"1476187380.000273"},{"type":"message","subtype":"file_share","text":"<@U0ZR63HLK|adc> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/adc\/F2NCNDPR8\/bccsp.pdf|BCCSP.pdf> and commented: Hi All, this is a deck of slides describing the Blockchain Crypto Service Provider (BCCSP). It is designed to offer the implementation of cryptographic standards and algorithms.","file":{"id":"F2NCNDPR8","created":1476278461,"timestamp":1476278461,"name":"BCCSP.pdf","title":"BCCSP.pdf","mimetype":"application\/pdf","filetype":"pdf","pretty_type":"PDF","user":"U0ZR63HLK","editable":false,"size":533719,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2NCNDPR8\/bccsp.pdf?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2NCNDPR8\/download\/bccsp.pdf?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/adc\/F2NCNDPR8\/bccsp.pdf","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2NCNDPR8-f1fa572847","channels":["C2GE7GXM1"],"groups":[],"ims":[],"comments_count":1,"initial_comment":{"id":"Fc2NCNDVUJ","created":1476278461,"timestamp":1476278461,"user":"U0ZR63HLK","is_intro":true,"comment":"Hi All, this is a deck of slides describing the Blockchain Crypto Service Provider (BCCSP). It is designed to offer the implementation of cryptographic standards and algorithms.","channel":""}},"user":"U0ZR63HLK","upload":true,"display_as_bot":false,"username":"<@U0ZR63HLK|adc>","bot_id":null,"ts":"1476278462.000274"},{"type":"message","user":"U1BC5A0F9","text":"This is also relevant to jira item FAB-354, FAB-355 :slightly_smiling_face:","ts":"1476288087.000275"},{"user":"U2FMXLFUJ","text":"<@U2FMXLFUJ|lakshanap> has joined the channel","type":"message","subtype":"channel_join","ts":"1476293417.000276"},{"user":"U2NNF5FS6","text":"<@U2NNF5FS6|pospi> has joined the channel","type":"message","subtype":"channel_join","ts":"1476325241.000277"},{"type":"message","user":"U2NNF5FS6","text":"Hey all, can anyone point me in the direction of multisig chaincode examples? Or is that more of an auth layer question...","ts":"1476325495.000278"},{"type":"message","user":"U0ZR63HLK","text":"Hi <@U2NNF5FS6>, what do you want to achieve exactly?","ts":"1476344490.000279"},{"type":"message","user":"U2NNF5FS6","text":"we're thinking about resource authorization- say there is an asset stored in an S3 bucket or Dropbox folder that party A owns and wants to provide to party B- so A requests release of the asset and B accepts to recieve the authorization URL. That would be the simplest version but there may be times when multiple entities are signatories to party A","ts":"1476347465.000280"},{"type":"message","user":"U0ZR63HLK","text":"That sounds as and endorsement process. A would send a proposal to transfer the asset and this proposal has to be endorsed by B plus all (or a threshould of) signatories to party A. How does this sound to you?","ts":"1476347771.000281"},{"type":"message","user":"U0PB67X4K","text":"<@U0ZR63HLK> <@U2NNF5FS6> - I think we need to be careful here in terms of \"endorsement\".  <@U2NNF5FS6> - are you looking to do some type of signature workflow?","ts":"1476347863.000282"},{"type":"message","user":"U0PB67X4K","text":"how does B know to accept the authorization URL?","ts":"1476347906.000283"},{"type":"message","user":"U1BC5A0F9","text":"Hi, just posted here alternative ways to generate TCerts that do not require HSM firmware extension, and their trade-offs.","ts":"1476430473.000284"},{"type":"message","user":"U1BC5A0F9","text":"<https:\/\/jira.hyperledger.org\/browse\/FAB-635>","edited":{"user":"U1BC5A0F9","ts":"1476430494.000000"},"ts":"1476430476.000285"},{"type":"message","user":"U0PB67X4K","text":"<@U1BC5A0F9> - I'll assume we should comment in the JIRA?  Probably best so we can see the history?","ts":"1476446345.000287"},{"type":"message","user":"U0KM61BCP","text":"<@U0PB67X4K> +1 to using JIRA to discuss the proposal","ts":"1476448535.000288"},{"type":"message","user":"U0PB67X4K","text":"added my first comment(s) for anyone interested","ts":"1476448972.000289"},{"user":"U2PE37K3J","text":"<@U2PE37K3J|n.ohagan> has joined the channel","type":"message","subtype":"channel_join","ts":"1476453326.000290"},{"type":"message","user":"U2NNF5FS6","text":"<@U0ZR63HLK> <@U0PB67X4K> that sounds pretty much like what I want! Authorization URLs would be sent via application-level services, at this stage probably just hashed verification links sent via email.","ts":"1476667730.000295"},{"user":"U24JMTPRQ","text":"<@U24JMTPRQ|aliblackwell> has joined the channel","type":"message","subtype":"channel_join","ts":"1476698593.000296"},{"type":"message","user":"U184J2R7S","text":"Talking with Keith Smith and Angeloa de Caro today-&gt; One of the questions that came up last week was whether bcssp (crypto service provider for blockchain) would work related to cfssl- there is no problem plugging that in and we have proven that out.   Angelo also has 11 change sets to check in bcssp, but noone has reviewed it yet.  I suggested going to fabric-maintainers and requesting help.","ts":"1476718750.000297"},{"type":"message","user":"U184J2R7S","text":"The HSM work is being put in 0.6.  This week, Angelo will start the implementation on client SDK at committing peers to perform signature and verification of signatures for Version 1.0.","ts":"1476718868.000298"},{"type":"message","user":"U184J2R7S","text":"Elli submitted deck of slides on channel bootstrapping and putting it on Jira-- I asked Angelo to get the right JIRA numbers posted here.","ts":"1476718942.000299"},{"type":"message","user":"U0PB67X4K","text":"I have actually looked at some of the bcssp stuff","ts":"1476722885.000300"},{"type":"message","user":"U0PB67X4K","text":"Here's the problem - I \/ we want to be done with v0.6.  You just saw the struggle we had actually getting that thing out and we are going to have to fix bugs against it.  It frankly seems very risky and not worth our time overall to try to merge this stuff into the v0.6 branch.","edited":{"user":"U0PB67X4K","ts":"1476722994.000000"},"ts":"1476722964.000301"},{"type":"message","user":"U0PB67X4K","text":"folks - no other comments about <https:\/\/jira.hyperledger.org\/browse\/FAB-635>?","ts":"1476725383.000303"},{"user":"U11MANG9G","text":"<@U11MANG9G|jonathanlevi> has joined the channel","type":"message","subtype":"channel_join","ts":"1476726812.000304"},{"user":"U1FBDMBMG","text":"<@U1FBDMBMG|ryokawawork> has joined the channel","type":"message","subtype":"channel_join","ts":"1476754168.000305"},{"type":"message","user":"U1FBDMBMG","text":"Hi, is there any documentation for the specification of encryption of the transactions and the world state (KVS)? I am asking this because it is often required to encrypt databases in the financial industry. And also I am thinking about using the history of the transactions for auditing, where decryption of the transaction payloads is required.","ts":"1476755069.000306"},{"type":"message","user":"U1FBDMBMG","text":"According to the source codes (fabric\/sdk\/node\/src\/hfc.ts, and fabric\/core\/crypto\/validator_state.go), the payload of a invoke transaction is encrypted by a one-time public key, its private key is encrypted by the chain key, and transferred to a peer using toValidator field of a transaction.","ts":"1476755290.000307"},{"type":"message","user":"U1FBDMBMG","text":"A value of the world state is encrypted by State Key, which is derived  from the Chain Key and used fro decryption of return values of query transactions. Keys (of KVS) are not encrypted. The Chain Key is common to all the members and is a symmetric key.","ts":"1476755508.000308"},{"type":"message","user":"U1FBDMBMG","text":"Am I understanding the spec correctly?  I am also reading Protocol Spec, but bit confused. I suppose this document includes future plans, or parts which is not up-to-date...  <http:\/\/hyperledger-fabric.readthedocs.io\/en\/latest\/protocol-spec\/#4-security_1>","ts":"1476755653.000309"},{"type":"message","user":"U1FBDMBMG","text":"I am now using Fabric v0.6.0-preview.","ts":"1476755748.000310"},{"type":"message","user":"U0ZR63HLK","text":"<@U0PB67X4K>, understandable. Luckily that code can be reused in v1 easily","ts":"1476773400.000311"},{"type":"message","user":"U0ZR63HLK","text":"<@U1FBDMBMG>, you are mostly correct. regarding transactions, let me clarify that the chain key is public-key whose associated secret key is distributed to all the validators at enrollment time. For the state, there is a root state key that is specified in the deploy transaction. From this key, the code derives the keys and the IVs. The chain (secret) key is involved in this process only to extract the root state key from the deploy transaction","ts":"1476773771.000313"},{"type":"message","user":"U0ZR63HLK","text":"<@U184J2R7S>, just to clarify, Alessandro will work on the implementation on client SDK at endorsing\/committing peers to perform signature and verification of signatures for Version 1.0. Elli, will submit slides on channel bootstrapping asap. Thanks :slightly_smiling_face:","ts":"1476773902.000314"},{"type":"message","user":"U1FBDMBMG","text":"<@U0ZR63HLK> Thank you! I had misunderstood the chain key. The chain key is not a symmetric key but a public key used by members and the associated private key is used by validators to decode the transaction. And also thanks about explaining the root state key.","ts":"1476775479.000315"},{"type":"message","user":"U0ZR63HLK","text":"sure :slightly_smiling_face:","ts":"1476775497.000316"},{"type":"message","user":"U1CTBUNEN","text":"can this information regarding the various keys and how they are used together become part of a Wiki","ts":"1476777871.000318"},{"type":"message","user":"U0ULK2JPP","text":"<@U0ZR63HLK> when Allessandro works on SDK, it\u2019ll be nice to add the features to CLI  (some minimal form) to make it easy for users to test it just with the peer code","ts":"1476777987.000319"},{"type":"message","user":"U0ULK2JPP","text":"I can help with that","ts":"1476778002.000320"},{"type":"message","user":"U0ULK2JPP","text":"ie,` .\/peer chaincode \u2026. `` form","ts":"1476778029.000321"},{"type":"message","user":"U0ULK2JPP","text":"hopefully it won\u2019t be too much work \u2026 just a practical usability thing","ts":"1476778100.000322"},{"type":"message","user":"U0ZR63HLK","text":"<@U0ULK2JPP>, <@U26T99AQ4> it makes sense to me :slightly_smiling_face:","ts":"1476785283.000323"},{"user":"U2JDRLC9J","text":"<@U2JDRLC9J|jamieobe> has joined the channel","type":"message","subtype":"channel_join","ts":"1476802780.000324"},{"type":"message","user":"U0ZR63HLK","text":"Hi All, today I continued working on the protobuf messages (<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1561\/>) and the BCCSP preparing slides to explain the BCCSP Factory. I will post them asap","ts":"1476803971.000325"},{"type":"message","user":"U0ULK2JPP","text":"<@U0ZR63HLK> i meant to ask\u2026 perhaps we should come up with a cooler name than BCCSP ? At some point the name\u2019s going to matter I\u2019d think ? Just a thought\u2026.","ts":"1476804111.000326"},{"type":"message","user":"U0ULK2JPP","text":"feel free to ignore :slightly_smiling_face:","ts":"1476804145.000327"},{"type":"message","user":"U0ZR63HLK","text":"we love it :disappointed:","ts":"1476804150.000328"},{"type":"message","user":"U0ULK2JPP","text":"ok then","ts":"1476804157.000329"},{"type":"message","user":"U0ULK2JPP","text":":slightly_smiling_face:","ts":"1476804158.000330"},{"type":"message","user":"U0ZR63HLK","text":"but fine, we can, of course, change it","ts":"1476804160.000331"},{"type":"message","user":"U0ZR63HLK","text":"heheheh :slightly_smiling_face:","ts":"1476804162.000332"},{"type":"message","user":"U0ZR63HLK","text":"the idea was to clarify that this CSP was related to the specific needs of the fabric","ts":"1476804193.000333"},{"type":"message","user":"U0ZR63HLK","text":"not something super general able to cover all the possible needs ever","ts":"1476804216.000334"},{"type":"message","user":"U0ULK2JPP","text":"agreed\u2026 (still nice to say  \u201ccell phone\u201d as opposed to \u201ca device for remote wireless communication\u201d) .. just wanted to put that out. Not important right now of course","ts":"1476804375.000335"},{"type":"message","user":"U0ULK2JPP","text":"reiterate that - just wanted to put that thought so you can think about it when you are bored :slightly_smiling_face:","ts":"1476804500.000336"},{"type":"message","user":"U26T99AQ4","text":"Hi all, today I did some preliminary work to take on FAB-580 as soon as we settle on the core of the next architecture","ts":"1476804983.000337"},{"type":"message","user":"U184J2R7S","text":"i thought I would share some information that Elli shared with me that might be helpful","ts":"1476807906.000338"},{"type":"message","user":"U184J2R7S","text":"Work items associated with fabric-CSP (BC-CSP), i.e., FAB-354, FAB-355, FAB-615 has been completed from our side (Angelo) and is now on Gerrit under review. In fact 11 changesets have been submitted there (as listed below):\n<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1605\/1>\n<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1641\/2>\n<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1645\/2>\n<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1647\/2>\n<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1653\/2>\n<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1683\/2>\n<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1689\/2>\n<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1691\/2>\n<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1693\/2>\n<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1695\/2>\n<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1813\/2>","ts":"1476807937.000339"},{"type":"message","user":"U184J2R7S","text":"Work items progressing associated to protocol buffers and associated security checks for next architecture, i.e., FAB-351 (including FAB-489, FAB580-582):  Protocol buffers have long been discussed  on the channels.","ts":"1476808029.000340","reactions":[{"name":"+1","users":["U1BC5A0F9","U10Q62R8X"],"count":2}]},{"type":"message","user":"U184J2R7S","text":"Work items associated to Channel access control management(FAB-633). The team has prepared a first draft of a design for secure  creation and consulting of ACL for channels. We are taking rounds into updating the design, and plan to share it with extended team and community to get input once we get a good draft finished","ts":"1476808046.000341","reactions":[{"name":"+1","users":["U1BC5A0F9"],"count":1}]},{"type":"message","user":"U11MANG9G","text":"<@U184J2R7S> (et al.), thanks for sharing. All,\n1) Feel free to add me as a reviewer when you submit such items.\n2) These are very well structured. Can\u2019t miss that!\n3) Noted that these were (originally) submitted as part of the `v0.6` branch, but at some point before the release, we chose to hold back so that we could get the v0.6.1 release tagged\/published last weekend.\n\nHow do we want to merge these\/what\u2019s the strategy\/schedule? That is, do we want these on a(nother) separate branch? I don\u2019t have a strong opinion either way, just let me know what makes the most sense to everyone\u2026 I believe we are \u2018done\u2019 with the v0.6 branch as of last Sunday - but let me know.","edited":{"user":"U11MANG9G","ts":"1476911331.000000"},"ts":"1476808577.000342","reactions":[{"name":"+1","users":["U10Q62R8X"],"count":1}]},{"type":"message","user":"U11MANG9G","text":"<@U0PB67X4K> ^^^","ts":"1476911343.000346"},{"user":"U0Z6VMEER","text":"<@U0Z6VMEER|beauson45> has joined the channel","type":"message","subtype":"channel_join","ts":"1476911512.000347"},{"user":"U0P1VU0QG","text":"<@U0P1VU0QG|ikruiper> has joined the channel","type":"message","subtype":"channel_join","ts":"1476998306.000348"},{"user":"U1PF7CF5F","text":"<@U1PF7CF5F|t-watana> has joined the channel","type":"message","subtype":"channel_join","ts":"1477009109.000349"},{"type":"message","user":"U184J2R7S","text":"<@U11MANG9G> <@U1BC5A0F9>  Elli, may ask you to follow up with Jonathan for me","ts":"1477013743.000350"},{"type":"message","user":"U11MANG9G","text":"[Sure, I\u2019m available] I think we should keep the `v0.6` branch clear (following the release\/tag)\u2026. so that it can be used for future bug-fixes\/patches.","ts":"1477013812.000351"},{"type":"message","user":"U11MANG9G","text":"We should probably decide\/agree on whether this work should go straight into an intended v1.0 branch, or would we rather create an intermediate one\u2026","edited":{"user":"U11MANG9G","ts":"1477022349.000000"},"ts":"1477013892.000352"},{"type":"message","user":"U11MANG9G","text":"<@U184J2R7S>: I think the simpler, the better. If we don\u2019t need an extra branch, then let\u2019s get these APIs in sooner rather than later.","ts":"1477013934.000353"},{"type":"message","user":"U11MANG9G","text":"<@U1BC5A0F9> Let me know how you want to proceed.","ts":"1477013956.000354"},{"type":"message","user":"U184J2R7S","text":"<@U11MANG9G> I honestly think we need to move to the latest version now.. so people can get to what they really want- multichannel and what community seems to be agreeing to,..","ts":"1477014128.000355"},{"type":"message","user":"U0PB67X4K","text":"we need to be down to 2 branches - v0.6 (no new features) and master which is v1.0.0","ts":"1477041827.000357"},{"type":"message","user":"U0PB67X4K","text":"now we'll need to figure out the best way to get the BCCSP stuff merged into master - we are still waiting on moving convergence into master","ts":"1477041862.000358"},{"type":"message","user":"U0ZR63HLK","text":"Everything under the bccsp package can be merged easily. It has only dependencies onto the primitives package which has not been modified. After that, I can re-apply the refactoring to have all the other components using the BCCSP. How this sounds?","ts":"1477043848.000359"},{"type":"message","user":"U0PB67X4K","text":"this sounds about right.  not exactly sure what you mean by `re-apply the refactoring to have all the other components using the BCCSP`?   My assertion would be that at this point there actually is no crypto in use for the new peer \/ endorser code.  For example, assuming the BCCSP is integrated into the src tree (as we are discussing), next step for example would be to have the peer code (default ESCC and VSCC) leverage BCCSP for signing and verification.","ts":"1477044087.000360"},{"type":"message","user":"U0PB67X4K","text":"same should hold true for the orderer code as well (I would hope).   I think this is what you meant?","ts":"1477044120.000361"},{"type":"message","user":"U0ZR63HLK","text":"That's right, actually. Because the old code can be discarded at this point. Right!","edited":{"user":"U0ZR63HLK","ts":"1477044308.000000"},"ts":"1477044292.000362"},{"type":"message","user":"U0PB67X4K","text":"cool","ts":"1477044460.000364"},{"type":"message","user":"U0PB67X4K","text":"this should make for a very clean way to use the BCCSP package","ts":"1477044499.000365"},{"type":"message","user":"U0PB67X4K","text":"<@U1ZT4H8MC> <@U0UKTPMG8> and I discussed this yesterday in terms of next steps for the endorser code once we finish the merge","ts":"1477044545.000366"},{"type":"message","user":"U11MANG9G","text":"<@U184J2R7S> Yes, this makes sense (to \"jump on\" the latest).\n<@U0PB67X4K>, <@U0ZR63HLK> : OK, then let\u2019s resubmit these against `master`. Sounds good. Probably after the `v0.6` &gt; `master` work is done and possibly the `convergence`\u2026 though after taking a quick look at it, I don\u2019t expect conflicts as the above items are mostly new.","edited":{"user":"U11MANG9G","ts":"1477062814.000000"},"ts":"1477059067.000367"},{"type":"message","user":"U0ZR63HLK","text":"right","ts":"1477059568.000368","reactions":[{"name":"+1","users":["U11MANG9G"],"count":1}]},{"type":"message","user":"U1BC5A0F9","text":"Makes sense.","ts":"1477063644.000370"},{"type":"message","user":"U1BC5A0F9","text":"Though transaction\/proposal processing components on the peer\/client side may make sense to call membership service interface rather than directly crypto CSP calls. Of course the transition to such calls should not be difficult to be done later.","ts":"1477063766.000371"},{"type":"message","user":"U0PB67X4K","text":"<@U1BC5A0F9> - you aren't saying that at runtime the peer would ever need to call out to membership services are you?  For the client - yes - it would call membership services directly","ts":"1477063959.000372"},{"type":"message","user":"U1BC5A0F9","text":"correct. I am not saying that. I am saying that the peer\/client would need to invoke the membership service library function to validate a a certain authenticated messsage (e.g., a message signed with a secret corresponding to a certificate).","edited":{"user":"U1BC5A0F9","ts":"1477064239.000000"},"ts":"1477064033.000373"},{"type":"message","user":"U1BC5A0F9","text":"So, in a way, if we are to make memberhsip service pluggable, we would need to specify APIs for peer\/client to use for message authentication (signature or other means that that membership service has\/adopts) and authenticated message validation (signature verification or other mechanisms that that membership service considers)","ts":"1477064133.000374"},{"type":"message","user":"U11MANG9G","text":"What\u2019s to `validate a signature produced by a certificate` ?","ts":"1477064157.000375"},{"type":"message","user":"U1BC5A0F9","text":"my bad, corrected :slightly_smiling_face:","ts":"1477064244.000377"},{"type":"message","user":"U11MANG9G","text":"Oh, OK. To validate `with a certificate`.","ts":"1477064269.000378"},{"type":"message","user":"U11MANG9G","text":"Sure, yes. Especially as the extensions are not standard.","ts":"1477064287.000379"},{"type":"message","user":"U1BC5A0F9","text":"So membership service A has standard x509 certificates and for authentication uses ECDSA key-pairs.","ts":"1477064294.000380"},{"type":"message","user":"U11MANG9G","text":"(they are standard X509, but require logic)","edited":{"user":"U11MANG9G","ts":"1477064331.000000"},"ts":"1477064309.000381"},{"type":"message","user":"U1BC5A0F9","text":"Membership service B has idemix certificates (not x509 based) and for authentication uses RSA keys and signature of knowledge.","ts":"1477064323.000382"},{"type":"message","user":"U1BC5A0F9","text":"The interface of membership service as used in the core should be done in such a way, that membership service A and B can implement that interface and plugged into the peer\/client code without affecting the transaction processing components of the system.","ts":"1477064396.000384"},{"type":"message","user":"U1BC5A0F9","text":"<@U0PB67X4K> , <@U11MANG9G> does this make sense?","ts":"1477064520.000385"},{"type":"message","user":"U1BC5A0F9","text":"Something we already discussed with <@U0S5KF44D>, <@U0ZR63HLK>, and we actually have some preliminary  form of this (generic) interface.","ts":"1477064564.000386"},{"type":"message","user":"U11MANG9G","text":"Yes, it does. Much better to have the logic encapsulated within Membership Services (that will call the underlying crypto)\u2026 than require the logic in the client, using the (probably too low-level for the client) crypto CSP.","ts":"1477064588.000387"},{"type":"message","user":"U1BC5A0F9","text":"correct!","ts":"1477064602.000388"},{"type":"message","user":"U11MANG9G","text":"It will be a lot easier to validate\/test\/extend and componentize using the external API that will allow us to have the logic in one place (and just share, rather than duplicate).","ts":"1477064657.000389","reactions":[{"name":"+1","users":["U1BC5A0F9"],"count":1}]},{"type":"message","user":"U11MANG9G","text":"[That is, I agree - this makes sense]","ts":"1477064702.000392"},{"type":"message","user":"U11MANG9G","text":"We should probably work out a few sequence\/entity-interaction diagrams at some point, at least at the higher level, to make sure that everyone is on the same page.","ts":"1477064757.000393"},{"type":"message","user":"U11MANG9G","text":"But for now, it makes sense to expose the crypto to only one layer (above it) to consume\u2026 especially while it is \u201cin the making\"","ts":"1477064821.000394"},{"type":"message","user":"U0PB67X4K","text":"ah - I see - you were talking about the \"client\" piece of membership services.  I just want to make sure that at runtime there is no need to call out to membership services server","ts":"1477065031.000395"},{"type":"message","user":"U0PB67X4K","text":":wink:","ts":"1477065032.000396"},{"type":"message","user":"U0PB67X4K","text":"I want to be able to provide my own crypto material if I want to  :wink:","ts":"1477065139.000397"},{"type":"message","user":"U11MANG9G","text":"Yes, these really need to be separate! We don\u2019t want a chrome browser that needs to call the server for `internal` logic implementation.","ts":"1477065144.000398"},{"user":"U2BGFAHC7","text":"<@U2BGFAHC7|donovanhide> has joined the channel","type":"message","subtype":"channel_join","ts":"1477076577.000399"},{"user":"U13TWBRBL","text":"<@U13TWBRBL|jzhang> has joined the channel","type":"message","subtype":"channel_join","ts":"1477079709.000400"},{"type":"message","user":"U0ULK2JPP","text":"<https:\/\/hyperledgerproject.slack.com\/archives\/fabric-dev\/p1477079668002159>","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-dev\/p1477079668002159","fallback":"[October 21st, 2016 12:54 PM] jzhang: or, as per <@U0ULK2JPP> from <#C2NESEYV9|fabric-reconcile> channel, this is now left completely to the client and chaincode? is that just going to be merely TLS or would there still be encryption on the payload itself? if the latter, then I think there should be a standard REST API all endorsers publish to download the certificate for extracting the public key for encryption","ts":"1477079668.002159","author_subname":"jzhang","channel_id":"C0YPYBVJM","channel_name":"fabric-dev","is_msg_unfurl":true,"text":"or, as per <@U0ULK2JPP> from <#C2NESEYV9|fabric-reconcile> channel, this is now left completely to the client and chaincode? is that just going to be merely TLS or would there still be encryption on the payload itself? if the latter, then I think there should be a standard REST API all endorsers publish to download the certificate for extracting the public key for encryption","author_name":"Jim Zhang","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/jzhang","author_icon":"https:\/\/secure.gravatar.com\/avatar\/693baf7118ea52f1ad0aadf6fa97d962.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0010-48.png","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-dev"}],"ts":"1477079738.000401"},{"type":"message","user":"U0ULK2JPP","text":"This is w.r.t encryption\/decryption in app\/SDK. assume this is now handled by the application level, ie app\/SDK &lt;\u2014\u2014&gt; chaincode ?","ts":"1477079827.000403"},{"type":"message","user":"U13TWBRBL","text":"thanks <@U0ULK2JPP>. <@U1BC5A0F9> <@U0ZR63HLK> <@U26T99AQ4> this question came about when I was wondering how the SDK\u2019s endorse API would support confidentiality. would we continue to use \u201cpkChain\u201d returned from ECertCreateResp, or should we expose the payload to give the application developer a chance to encrypt it however they want (using a PKI b\/w app and endorser nodes)","ts":"1477080210.000404"},{"user":"U2QLU433N","text":"<@U2QLU433N|msoumeit> has joined the channel","type":"message","subtype":"channel_join","ts":"1477112992.000405"},{"type":"message","user":"U13TWBRBL","text":"<@U1BC5A0F9> <@U0ZR63HLK> <@U26T99AQ4> have you guys seen my question about re: \u201cpkChain\u201d from enrollment?","ts":"1477317657.000406"},{"type":"message","user":"U1BC5A0F9","text":"Hi; sorry. So, as of now we are focusing on having fabric work without it supporting confidentiality mechanisms on the fabric side.","ts":"1477317759.000407"},{"type":"message","user":"U0ZR63HLK","text":"Hi <@U13TWBRBL>, the latter I would say.","ts":"1477317766.000408"},{"type":"message","user":"U1BC5A0F9","text":"That said, confidentiality mechanisms would be shifted to the application layer, and may make sense to be based on endorser long term encryption keys and proper use of transient-data field of the proposal.","edited":{"user":"U1BC5A0F9","ts":"1477317921.000000"},"ts":"1477317794.000409"},{"type":"message","user":"U1BC5A0F9","text":"Of course we can also have pkChain be distributed by the membership services, but that would need to be on a per-channel basis and not sure for the first release of this code would make sense.","ts":"1477317891.000410"},{"type":"message","user":"U1BC5A0F9","text":"Also one could use externally decided keys... key-management would be (in my view) on the application.","ts":"1477318116.000412"},{"type":"message","user":"U0PB67X4K","text":"<@U1BC5A0F9> <@U13TWBRBL> <@U0S5KF44D>  - IMHO \"fabric-cop\" (at least the server portion) should no longer be handing out encryption keys.  My take is that the crypto libs will need to be able to generate and wrap keys as required and we'll likely need to leverage a distribution mechanism within fabric (similar to some work <@U0ZR63HLK> already did) to \"share\" keys as appropriate","ts":"1477318140.000413"},{"type":"message","user":"U0ZR63HLK","text":"this is definitely the high level direction, I would say","ts":"1477318188.000414"},{"type":"message","user":"U0ZR63HLK","text":"I agree","ts":"1477318219.000415"},{"type":"message","user":"U1BC5A0F9","text":"So, i agree that pkChain should not be generated\/managed\/distributed by the membership service. But do we also want to not have membership service engage to the enrollment certificate including public encryption keys of  peers\/clients? If so, then we would need to assume that there is some offline-interaction among applications, that leverage their signing keys (reflected in their ECerts) to announce public encryption keys of users. Auditability becomes slightly more complex there, but it is simple enough to work.","edited":{"user":"U1BC5A0F9","ts":"1477318585.000000"},"ts":"1477318443.000416"},{"type":"message","user":"U0PB67X4K","text":"<@U1BC5A0F9> - I guess I will put it this way - we need to make sure that there is no dependency on membership services for these things","ts":"1477318586.000420"},{"type":"message","user":"U13TWBRBL","text":"so do i understand this flow correctly like this: app\/sdk encrypts using each endorser certificate \u2014&gt; endorser received and decrypts using its individual private key \u2014&gt; execute \u2014&gt; encrypts result using app\/sdk certificate \u2014&gt; app\/sdk receives and decrypts, package up and encrypts using committer certificate \u2014&gt; send to orderer \u2014&gt; delivers to commiter \u2014&gt; committer decrypts and applies the changes","ts":"1477318608.000421"},{"type":"message","user":"U13TWBRBL","text":"\u2026 as far as where encryption\/decryption happens with what keys, is the above accurate or am I off?","ts":"1477318698.000422"},{"type":"message","user":"U13TWBRBL","text":"that\u2019s assuming we don\u2019t have a \u201cchain-wide\u201d (or \u201cchannel-wide\u201d) key like \u201cpkChain\u201d today any longer","ts":"1477318745.000423"},{"type":"message","user":"U1BC5A0F9","text":"<@U0PB67X4K>, what do you mean by dependency? pkChain, or pkEndorser (public enecyrption key that is generated exactly like the signing key and included currently in enrollment certificate)?","edited":{"user":"U1BC5A0F9","ts":"1477318939.000000"},"ts":"1477318798.000424"},{"type":"message","user":"U1BC5A0F9","text":"Cause, to do any type of key-distribution, there has to be some anker of trust  (e.g., exchanged enrollment certificates that contain signature key-pairs) to have the application do the encrytpion key generation etc.","ts":"1477318923.000425"},{"type":"message","user":"U0PB67X4K","text":"meaning a peer node should never need to call out to membership services at runtime and if I choose to use my own certificate authority I should be able to do that","ts":"1477318952.000427"},{"type":"message","user":"U0PB67X4K","text":"sure - but that can be any trusted root authority that the members of the blockchain choose to support","ts":"1477318979.000428"},{"type":"message","user":"U1BC5A0F9","text":"agreed","ts":"1477318996.000429"},{"type":"message","user":"U1BC5A0F9","text":"there should be no dependency on the specifics of the membership service currently available in fabric, but (at least in my mind) it could have some dependency on the membership service as an entity \/ component of the system (assuming that this component is expressed via the membership service interface).","ts":"1477319097.000430"},{"type":"message","user":"U1BC5A0F9","text":"<@U0PB67X4K>, am I capturing the (non-)dependency requirement correctly?","ts":"1477319136.000431"},{"type":"message","user":"U1BC5A0F9","text":"<@U13TWBRBL>: the specification of a flow provided by a confidentiality library is part of the FAB-830","edited":{"user":"U1BC5A0F9","ts":"1477319321.000000"},"ts":"1477319277.000432"},{"type":"message","user":"U0ZR63HLK","text":"<@U13TWBRBL>, interesting. That's definitely a possible flow. Multiple details are hidden here and there but it looks reasonable as a very high level overview of a candidate message flow","edited":{"user":"U0ZR63HLK","ts":"1477319427.000000"},"ts":"1477319408.000434"},{"type":"message","user":"U1BC5A0F9","text":"But overall, I would see two levels of a confidentiality library to be plugged in: (i)at  the application\/chaincode level where keys would need to be part of the transient data of proposal, that are passed to the chaincode at execution time (the chaincode here is supposed to know\/understand how to use these keys to encrypt its state), (ii) at the ESCC level and assuming extension of the interface of the client to the endorser.","edited":{"user":"U1BC5A0F9","ts":"1477319446.000000"},"ts":"1477319436.000436"},{"type":"message","user":"U1BC5A0F9","text":"Option (ii) is closer to what you describe <@U13TWBRBL>, but option (i) is easier to implement.","ts":"1477319481.000438"},{"type":"message","user":"U13TWBRBL","text":"ok, i\u2019ll take a look at FAB-830","ts":"1477319506.000439"},{"type":"message","user":"U13TWBRBL","text":"are we currently leaning one way or another?","ts":"1477319515.000440"},{"type":"message","user":"U0PB67X4K","text":"I think I'd agree.   If I am a bit more explicit, from the peer perspective, a peer should NEVER have to call out to membership services like it does today (e.g. for the register\/enroll, to pull down public keys, encryption keys, etc).  I would also say should hold true for the ordering service  and I would also say for the client SDKs as well.  Per <@U1BC5A0F9> , one way to do this would be to have an interface and one of the implementations could be to call remotely and one could be to use locally available material.   We'll need to work through this especially as fabric-cop developes","ts":"1477319571.000441"},{"type":"message","user":"U1BC5A0F9","text":"Agreed. Btw, added <https:\/\/jira.hyperledger.org\/browse\/FAB-829> and some tentative description of a membership service interface\/component as discussed with <@U0S5KF44D>, <@U0ZR63HLK>, <@U26T99AQ4> already from June.","ts":"1477319748.000442"},{"type":"message","user":"U0ZR63HLK","text":"having the client SDK not connecting to the fabric-cop for TCerts is challenging at the current stage","ts":"1477319751.000443"},{"type":"message","user":"U0PB67X4K","text":"yes - tcerts I agree with","ts":"1477319807.000444"},{"type":"message","user":"U0PB67X4K","text":"but not everyone needs them","ts":"1477319817.000445"},{"type":"message","user":"U1BC5A0F9","text":"Hm, but also TCerts can be generically defined.","ts":"1477319834.000446"},{"type":"message","user":"U0PB67X4K","text":"true","ts":"1477319838.000447"},{"type":"message","user":"U0PB67X4K","text":"with option 2\/2.1","edited":{"user":"U0PB67X4K","ts":"1477319852.000000"},"ts":"1477319843.000448"},{"type":"message","user":"U0ZR63HLK","text":"they should be generically defined","ts":"1477319864.000450"},{"type":"message","user":"U1BC5A0F9","text":"And thus their form not to depend on the exact implementation of membership service.","ts":"1477319875.000451"},{"type":"message","user":"U0PB67X4K","text":"did we ever decide on that?  seems we are the only people who talk about it","ts":"1477319876.000452"},{"type":"message","user":"U0ZR63HLK","text":"like it is already in 0.5, the crypto package has a CertificateHandler that can handle ECert, TCerts and so on","ts":"1477319903.000453"},{"type":"message","user":"U1BC5A0F9","text":"We have been discussing the interface (as a starting point) defined in <https:\/\/jira.hyperledger.org\/browse\/FAB-829> with <@U0S5KF44D>. I know that Keith had some first version of it at some point, but maybe without considering generic representation of TCerts.","ts":"1477319934.000454"},{"type":"message","user":"U0PB67X4K","text":"so Keith and team have been working to extract the current TCert implemention and make it into a library but have not changed how we generate them at this point","edited":{"user":"U0PB67X4K","ts":"1477320025.000000"},"ts":"1477320012.000455"},{"type":"message","user":"U1BC5A0F9","text":"Ah sorry, you meant the TCert key-generation process.","ts":"1477320034.000457"},{"type":"message","user":"U1BC5A0F9","text":"I thought you referred to have a generic TCert interface enabled. Sorry, it take it back then. True, not sure if we have converged on this and when\/if we should start implementing it.","ts":"1477320094.000458"},{"type":"message","user":"U1BC5A0F9","text":"Related discussion is here <https:\/\/jira.hyperledger.org\/browse\/FAB-635>","ts":"1477320134.000459"},{"type":"message","user":"U0S5KF44D","text":"correct, Ash should push the current impl later today, and the plan is to do version 2 of your doc as a configurable option","ts":"1477323356.000460"},{"type":"message","user":"U184J2R7S","text":"Ad hoc meeting with Keith Smith, Gari Singh, Elli- Fabric 829 , next sprint-- this is an interface tat describes membership services component.  It has to be defined so that if someone has a different version of membership services, they can write connectors so they can leverage everything implemented.  This is an interface into ms into transaction processing and ledger infrastructure. This interface would be used to encourage our bscsp.  An application developer that just uses membership services instance- they don't need to know what interface we should use  .","ts":"1477324075.000461"},{"type":"message","user":"U184J2R7S","text":"On Jira boards-  there are 3 groups for next two weeks 1) implementation of  blockchain crypto service provider and integration to fabric--- one has to be done in golang and nodejs part that gets used by the client. A large part of golang has been implemented and submitted in 11 changes into branch 0.6 but has to be rebased into master.  Items associated with bscsp to server code he tried to build some classes that cfssl can look at bscsp code without problem.","ts":"1477324237.000462"},{"type":"message","user":"U184J2R7S","text":"BSCSP is good for abstracting a single one.  Keith was looking at what Jason Yellick has done in signature validation-- Gari said that looks like it is higher level.","ts":"1477324285.000463"},{"type":"message","user":"U184J2R7S","text":"We need to define who the consumers of that library is done.  You can have simple thing in peer- endorsement chaincode- simple sign code (Murali could take this for endorser).  There also might be a higher level abstraction that reads policy like Jason looks to have implemented, but it would ultimately call the verify function.","ts":"1477324376.000464"},{"type":"message","user":"U184J2R7S","text":"Elli- from the abstraction and using the bccsp- in fab 829, we are working towards implementing nodejs client sdk and need to converge the genericf interace and run it with membership services.  There is dependency on this with the 2nd group of issues highlighted for next spring- validation of transactions on commiting side, validation of security proposal at the endorser side... all of these should be using abstract interface.  We need to specify that interface","ts":"1477324494.000465"},{"type":"message","user":"U184J2R7S","text":"This is for the sdk level as well as the touch point within the peer.","ts":"1477324606.000466"},{"type":"message","user":"U184J2R7S","text":"Example- they use x509 and use extension filled for certs to store additional data .  The extension filled that the current fabric can understand.This transaction cert is acquired using some interaction with client with server side,.. the client will need to create transactions creating keys.  The peer code would have to pass the code at membership services... Let's say someone comes and say I need to use not your fabric defined membership services, but want to use a different Membership services plugin. I do not want to rewrite the transaction processing code- I would need to plugin my code implementing the same interface as fabric code and allow transaction processing to issue signatures on behalf the cert structure that that other instance of membership services-- and peer code validating those sigs .","ts":"1477324869.000467"},{"type":"message","user":"U184J2R7S","text":"It does not separate the cert infrastructure and the way that another membership services are used by transaction processing component.  These have to be separated using an interface and needs to be generic enough.","ts":"1477324948.000468"},{"type":"message","user":"U184J2R7S","text":"Something like here is the cert and verify it--- Fab 829 has some ideas on this.","ts":"1477324972.000469"},{"type":"message","user":"U184J2R7S","text":"Binh- what is fabric client? code of membership service that could be useful for the client.(we need to complete by Wednesday to try to help get first draft of SDK spec for Friday) ...the peer donates the part of the membership service that could be useful for the peer... Binh suggesting a GRPC definition or somekind of document that we can make specification of SDK on that design doc, and we can post the document on googledocs","ts":"1477325115.000470"},{"type":"message","user":"U184J2R7S","text":"Today in Nodejs sdk- there is membersip servcies impl... this interface was not generic enough (from memory)- it did not specify type for certificate and would not be able to parse appropriately and provide ability to say whether generic or not.  Elli said she has to look into detail- felt it did not have attributes included.  Keith did mention there is an interface with Tcerts with attributes.  Keith suggesting her to review to make recommendation on what we need in addition in this area.","ts":"1477325618.000471"},{"type":"message","user":"U184J2R7S","text":"We are trying to do ACL design for events and chaincodes for multichannel (fab 637, 634, and 633)","ts":"1477325757.000472"},{"user":"U0YNFB22X","text":"<@U0YNFB22X|satheesh> has joined the channel","type":"message","subtype":"channel_join","ts":"1477344753.000473"},{"type":"message","user":"U0XPR4NP4","text":"<@U1BC5A0F9> I'd like to talk with you about ACLs and signature formats when it is convenient","ts":"1477406929.000474"},{"type":"message","user":"U1BC5A0F9","text":"Hi, sure","ts":"1477406946.000475"},{"type":"message","user":"U1BC5A0F9","text":"Finishing up with <@U0ZR63HLK>. <@U26T99AQ4> the membership service abstract interface. Then can ping you.","ts":"1477406993.000476"},{"type":"message","user":"U0XPR4NP4","text":"Great, thanks!","ts":"1477406998.000477"},{"type":"message","user":"U0ZR63HLK","text":"<@U0XPR4NP4>, actually, a nice sanity check would be to check that the membership services API fits well with your policy framework","ts":"1477407172.000478"},{"type":"message","user":"U0PB67X4K","text":"do you implement \"verify\"  :wink:","ts":"1477407193.000479"},{"type":"message","user":"U0ZR63HLK","text":"The idea is that once is time to verify signature, the call is redirected to the membership service that is able to handle multiple schemes, potentially","ts":"1477407206.000480"},{"type":"message","user":"U0ZR63HLK","text":"yeah, at the end, it is a verify","ts":"1477407215.000481"},{"type":"message","user":"U0XPR4NP4","text":"All signature verification will require a network call to membership services? This sounds problematic to me","ts":"1477407444.000482"},{"type":"message","user":"U0ZR63HLK","text":"no no, sorry","ts":"1477407523.000483"},{"type":"message","user":"U0ZR63HLK","text":"verify a signature will not require a remote call","ts":"1477407537.000484"},{"type":"message","user":"U0ZR63HLK","text":"but verify a signature is something related to an identity","ts":"1477407553.000485"},{"type":"message","user":"U0ZR63HLK","text":"that's the reason why we associated it to the membership services","ts":"1477407566.000486"},{"type":"message","user":"U0ZR63HLK","text":"there will a Verify method that will do what is necessary to verify a signature, locally in most of the cases","ts":"1477407602.000487"},{"type":"message","user":"U0XPR4NP4","text":"Now I think I am lost again.  If a signature is representative of agreement from X, then it should have a chain of trust which derives from X, why do we need member services to tell us this?","ts":"1477407737.000488"},{"type":"message","user":"U0ZR63HLK","text":"my fault, sorry. Membership services will give us the algorithms to check that chain of trust, for example","ts":"1477407819.000489"},{"type":"message","user":"U0ZR63HLK","text":"why this? Because we might have different ways to enforce different chains of trust depending on the way identities are managed in the network","edited":{"user":"U0ZR63HLK","ts":"1477407897.000000"},"ts":"1477407855.000490"},{"type":"message","user":"U0XPR4NP4","text":"So is the algorithm something that's retrieved once, and then applied many times? I'm trying to think of a signature check which would not be tied to identity","ts":"1477407931.000493"},{"type":"message","user":"U0ZR63HLK","text":"correct","ts":"1477407949.000494"},{"type":"message","user":"U0ZR63HLK","text":"an example being an ECDSA signature that is verified against the verification key in a x509 certificate","ts":"1477407981.000495"},{"type":"message","user":"U0PB67X4K","text":"we need to think about this.  I still want to have ZERO dependency on having to call to a remote server for use of crypto stuff.","ts":"1477408001.000496"},{"type":"message","user":"U0ZR63HLK","text":"no remote calls","ts":"1477408013.000497"},{"type":"message","user":"U0ZR63HLK","text":"just Verify algorithms","ts":"1477408025.000498"},{"type":"message","user":"U0PB67X4K","text":"ok - so we can set the the \"parameters\" (hash, key length, algorithm, etc) directly from within the code which consumes the component?","ts":"1477408070.000499"},{"type":"message","user":"U0ZR63HLK","text":"right","ts":"1477408080.000500"},{"type":"message","user":"U0PB67X4K","text":"cool!!!","ts":"1477408085.000501"},{"type":"message","user":"U0ZR63HLK","text":"a parallel can be drawn with the BCCSP","edited":{"user":"U0ZR63HLK","ts":"1477408173.000000"},"ts":"1477408094.000502"},{"type":"message","user":"U0PB67X4K","text":"just wanted to make sure","ts":"1477408097.000503"},{"type":"message","user":"U0ZR63HLK","text":"we will have something that is higher level than BCCSP that exposes a more generalized way to handle signatures, their verification and generation","edited":{"user":"U0ZR63HLK","ts":"1477408138.000000"},"ts":"1477408129.000504"},{"type":"message","user":"U0PB67X4K","text":"yep - makes sense.   I just wanted to make sure that peers, ordering service, etc did not have to call out to a server to get the crypto policy   (so I assume similar settings to what we have in core.yaml today?)","ts":"1477408220.000507"},{"type":"message","user":"U0ZR63HLK","text":"it can go there but it can also go to the VSCC or ESCC","edited":{"user":"U0ZR63HLK","ts":"1477408274.000000"},"ts":"1477408264.000508"},{"type":"message","user":"U0PB67X4K","text":"sure - I just meant that the peer today gets its config locally.  We are on the same page  :wink:","ts":"1477408328.000510"},{"type":"message","user":"U0ZR63HLK","text":"right :slightly_smiling_face:","ts":"1477408337.000511"},{"type":"message","user":"U0XPR4NP4","text":"How large are these? To me, this sounds like something that should be encoded into the chain config?","ts":"1477408386.000512"},{"type":"message","user":"U0XPR4NP4","text":"(And therefore in reconfiguration, and in genesis)","ts":"1477408398.000513"},{"type":"message","user":"U0XPR4NP4","text":"<@U1BC5A0F9> <@U0ZR63HLK> I'm having trouble mapping my temporary configuration transaction stuff to the 'next' protos that were just merged.  How can we verify that an endorsement is over the same transaction header when the the transaction header is not bytes (and we cannot marshal deterministically)","ts":"1477425155.000514"},{"type":"message","user":"U0ULK2JPP","text":"<@U0XPR4NP4> `when the the transaction header is not bytes` can you expand on that ?","ts":"1477425247.000515"},{"type":"message","user":"U0XPR4NP4","text":"In the `fabric_transaction.proto` the `Transaction` contains repeated `TransactionActions` which contain `TransactionHeader`s","ts":"1477425330.000516"},{"type":"message","user":"U0XPR4NP4","text":"Since the `TransactionHeader` is expressed as a type, and not as bytes, it's not clear how to check any signature or hash against it","ts":"1477425413.000517"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ULK2JPP> ^","ts":"1477425498.000518"},{"type":"message","user":"U0PB67X4K","text":"<@U0XPR4NP4> - are you looking at fabric_next.proto?","ts":"1477425703.000519"},{"type":"message","user":"U0XPR4NP4","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1977\/2\/protos\/next\/fabric_transaction.proto>","ts":"1477425729.000520"},{"type":"message","user":"U0XPR4NP4","text":"This was merged, with my vote, earlier as I wanted to start moving the configuration stuff onto the 'real' transaction format.","ts":"1477425832.000521"},{"type":"message","user":"U0XPR4NP4","text":"My plan was to define a new transaction type in `fabric_transaction_header.proto` called CONFIGURATION, then use a subset of the `ConfigurationEntry` proto from ab.proto as the `Proposal` `Payload`, and then use `Endorsement` over the marshaled `Proposal`, but it seems to me like this gives me two copies of the `TransactionHeader`, which I have to compare field by field to make sure they are the same.  Which seems wrong.","ts":"1477425996.000522"},{"type":"message","user":"U0ULK2JPP","text":"adding <@U26T99AQ4>","ts":"1477426185.000523"},{"type":"message","user":"U0XPR4NP4","text":"Basically, I don't see how you can confirm that the `TransactionAction.header` is the same as the `Proposal.header` without doing a field by field comparison.  The `ProposalResponsePayload.proposalHash` is over the `Proposal.header`, but since we don't have deterministic marshaling, I don't see how that helps.","ts":"1477426435.000524"},{"type":"message","user":"U0ULK2JPP","text":"<@U0XPR4NP4> one of the things we talked about IIRC was that we want a Type in Transaction and the Type in TransactionHeader would have to be that","ts":"1477426442.000525"},{"type":"message","user":"U0ULK2JPP","text":"in other words, you\u2019d need to unpack the header (even if it was bytes) so you can take a look at the Type","ts":"1477426477.000526"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ULK2JPP> Yes, we did discuss this as an option, though technically, it doesn't have to be bytes and a type flag (it could just be bytes), but the type flag would be more flexible.","ts":"1477426507.000527"},{"type":"message","user":"U0PB67X4K","text":"I now recall not being able to follow the whole conversation on this - where can I read about what the heck these fields actually mean?  I'll be honest - the inline descriptions are not very clear.  This looks to be some very ugly messaging","ts":"1477426791.000528"},{"type":"message","user":"U0PB67X4K","text":"and if the transaction action.header is supposed to be the same as the proposal.header why do we have both?","ts":"1477426839.000529"},{"type":"message","user":"U0ULK2JPP","text":"so <@U0PB67X4K> one thing\u2026 the  `fabric\/protos\/next\/*.proto` will replace `fabric\/protos\/fabric_next.proto` \u2026","ts":"1477427037.000530"},{"type":"message","user":"U0PB67X4K","text":"except I don't see any service definition(s) in next\/*\/proto ?  unless I missed it","ts":"1477427069.000531"},{"type":"message","user":"U0ULK2JPP","text":"right. the only service definition is Endorser","ts":"1477427096.000532"},{"type":"message","user":"U26T99AQ4","text":"maybe this helps <https:\/\/hyperledgerproject.slack.com\/files\/adc\/F2JKXGXEU\/protobufmessagesandflow.pdf>","ts":"1477427115.000533"},{"type":"message","subtype":"file_mention","text":"<@U26T99AQ4|aso> mentioned a file: <https:\/\/hyperledgerproject.slack.com\/files\/adc\/F2JKXGXEU\/protobufmessagesandflow.pdf|ProtobufMessagesAndFlow.pdf>.","file":{"id":"F2JKXGXEU","created":1475506254,"timestamp":1475506254,"name":"ProtobufMessagesAndFlow.pdf","title":"ProtobufMessagesAndFlow.pdf","mimetype":"application\/pdf","filetype":"pdf","pretty_type":"PDF","user":"U0ZR63HLK","editable":false,"size":824792,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2JKXGXEU\/protobufmessagesandflow.pdf?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2JKXGXEU\/download\/protobufmessagesandflow.pdf?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/adc\/F2JKXGXEU\/protobufmessagesandflow.pdf","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2JKXGXEU-66a1d1cac6","channels":["C2GE7GXM1"],"groups":[],"ims":[],"comments_count":1,"initial_comment":{"id":"Fc2JJF8RPV","created":1475506254,"timestamp":1475506254,"user":"U0ZR63HLK","is_intro":true,"comment":"Hi All, this file contains the protobuf messages and the relative flow with the security checks to put in place. This a joint effort with <@U1BC5A0F9> and <@U26T99AQ4>.","channel":""},"reactions":[{"name":"+1","users":["U1GN670VD"],"count":1}]},"user":"U26T99AQ4","ts":"1477427115.000534"},{"type":"message","user":"U0ULK2JPP","text":"and so some consolidation needs to happen (was going to work on it)","ts":"1477427120.000535"},{"type":"message","user":"U26T99AQ4","text":"also, with <@U0ULK2JPP> 's help I'm working on the peer code that handles those messages from a security standpoint, I hope I'll be able to make some progress on the code quickly","ts":"1477427166.000536"},{"type":"message","user":"U26T99AQ4","text":"I could write a separate document with a short description of what the fields are and how they are supposed to be used","ts":"1477427198.000537"},{"type":"message","user":"U26T99AQ4","text":"I suggested to binh that we might want modify Next-Consensus-Architecture-Proposal.md to reflect these protobufs and explain what they are supposed to be doing in the grand scheme of things","ts":"1477427265.000538"},{"type":"message","user":"U26T99AQ4","text":"which I'd be also happy to do","ts":"1477427276.000539"},{"type":"message","user":"U0XPR4NP4","text":"Maybe a separate document is unavoidable, but my vote would be to keep the doc in the proto, much easier to reference that way","ts":"1477427450.000540"},{"type":"message","user":"U0ULK2JPP","text":"<@U0XPR4NP4> one thing","edited":{"user":"U0ULK2JPP","ts":"1477427480.000000"},"ts":"1477427467.000541"},{"type":"message","user":"U0ULK2JPP","text":"&gt; I don't see how you can confirm that the `TransactionAction.header` is the same as the `Proposal.header` without doing a field by field comparison.","edited":{"user":"U0ULK2JPP","ts":"1477427600.000000"},"ts":"1477427502.000543"},{"type":"message","user":"U0ULK2JPP","text":"(sorry for bad quotes but you get the idea :slightly_smiling_face: )","ts":"1477427528.000544"},{"type":"message","user":"U0ULK2JPP","text":"where do you see proposal.header ?","ts":"1477427537.000545"},{"type":"message","user":"U0XPR4NP4","text":"FYI <@U0ULK2JPP> you can use a `&gt;` before some text, and it will turn it into a quote, like this:\n\n&gt; where do you see proposal.header ?","ts":"1477427572.000546"},{"type":"message","user":"U0ULK2JPP","text":"ah","ts":"1477427587.000547"},{"type":"message","user":"U0ULK2JPP","text":"thanks","ts":"1477427588.000548"},{"type":"message","user":"U0XPR4NP4","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1977\/2\/protos\/next\/fabric_proposal.proto>","ts":"1477427637.000550"},{"type":"message","user":"U0XPR4NP4","text":"It contains a message named `Proposal` with a `header` field which is a `TransactionHeader`","ts":"1477427652.000551"},{"type":"message","user":"U0ULK2JPP","text":"right","ts":"1477427653.000552"},{"type":"message","user":"U0XPR4NP4","text":"Which is, presumably, the same header in `TransactionActions`?","ts":"1477427686.000553"},{"type":"message","user":"U0ULK2JPP","text":"that was my understanding","ts":"1477427696.000554"},{"type":"message","user":"U0PB67X4K","text":"well if they are the same thing, we should not be duplicating them.  I also think that it's confusing to separate proposal and transaction but yet then include a data structure from one within the other","ts":"1477427710.000555"},{"type":"message","user":"U0XPR4NP4","text":"That seems a little sloppy to me, why are we encoding the same information twice? [edit: oops, Gari beat me to it]","edited":{"user":"U0XPR4NP4","ts":"1477427754.000000"},"ts":"1477427710.000556"},{"type":"message","user":"U0ULK2JPP","text":"Proposal is sent to the endorser, and Transaction is sent to the Orderer\u2026 the same header from Proposal is taken and placed into Transaction  and sent right \u2026 is the header in two places in Transaction ?","ts":"1477427873.000558"},{"type":"message","user":"U0PB67X4K","text":"I don't think the thing in the proposal is the same as in the transaction - just the same data structure","ts":"1477428030.000559"},{"type":"message","user":"U0XPR4NP4","text":"I thought that the `Proposal` could be included, or some limited representation, in the `ProposalResponse`","edited":{"user":"U0XPR4NP4","ts":"1477428077.000000"},"ts":"1477428032.000560"},{"type":"message","user":"U0PB67X4K","text":"but it's unclear - guess I need to look through the PDF above - it seems to have a lot of detail","ts":"1477428088.000566"},{"type":"message","user":"U0ULK2JPP","text":"ok. my head is spinning now :slightly_smiling_face: let me read the protos again \u2026.","ts":"1477428090.000567"},{"type":"message","user":"U26T99AQ4","text":"<@U0PB67X4K> the header in the tx has to be the same as the header in the proposal, or else the checks on slide 23 would fail","ts":"1477428096.000568"},{"type":"message","user":"U26T99AQ4","text":"this is on purpose to enforce a number of security reqs such as accountability","ts":"1477428128.000569"},{"type":"message","user":"U0PB67X4K","text":"well then we have the same header repeated multiple times?   one for each transaction action, plus one for each proposal?","ts":"1477428162.000570"},{"type":"message","user":"U0PB67X4K","text":"alright - let me review again","ts":"1477428199.000571"},{"type":"message","user":"U26T99AQ4","text":"one header per action - a tx might have multiple actions","ts":"1477428213.000572"},{"type":"message","user":"U0XPR4NP4","text":"On slide 23, \"ProposalResponsePayload links to the ProposalHeader and chaincodeProposalPayload through proposalHash\"","ts":"1477428223.000573"},{"type":"message","user":"U26T99AQ4","text":"but a single header per action","ts":"1477428224.000574"},{"type":"message","user":"U0XPR4NP4","text":"Okay, so it sounds like no duplication, but how do we know the hash of the ProposalHeader? Unless we have some custom hashing scheme for it? (As we cannot marshal and hash, because of non-determinism in protobuf)","edited":{"user":"U0XPR4NP4","ts":"1477428297.000000"},"ts":"1477428283.000575"},{"type":"message","user":"U26T99AQ4","text":"right, I think we'll be forced to unmarshal and hash the contatenation of each of the fields - ugly I know, but not unheard of","ts":"1477428393.000577"},{"type":"message","user":"U26T99AQ4","text":"this might actually be problematic if we have a lot of nesting","ts":"1477428438.000578"},{"type":"message","user":"U0XPR4NP4","text":"I think that needs to be very explicit then, exactly how we are supposed to hash a TransactionHeader","ts":"1477428438.000579"},{"type":"message","user":"U26T99AQ4","text":"yeah, definitely","ts":"1477428445.000580"},{"type":"message","user":"U26T99AQ4","text":"do you guys have time to have a chat on the phone tomorrow to hash out these important details?","ts":"1477428479.000581"},{"type":"message","user":"U26T99AQ4","text":"I'd do it now but it's almost 11pm over here and I don't trust myself anymore :slightly_smiling_face:","ts":"1477428513.000582"},{"type":"message","user":"U0PB67X4K","text":"of course","ts":"1477428560.000583"},{"type":"message","user":"U0XPR4NP4","text":"Fair enough, enjoy what's left of your evening.  I'm not certain if a call is necessary, I would think doing this in slack\/JIRA\/googledoc would be better for posterity's sake","edited":{"user":"U0XPR4NP4","ts":"1477428577.000000"},"ts":"1477428562.000584","reactions":[{"name":"+1","users":["U26T99AQ4"],"count":1}]},{"type":"message","user":"U0PB67X4K","text":"I'll read the PDF again for sure","ts":"1477428594.000586"},{"type":"message","user":"U26T99AQ4","text":"I'll get with <@U0ZR63HLK> tomorrow and take a first stab at adding some more comments in the proto files","ts":"1477428664.000587"},{"type":"message","user":"U26T99AQ4","text":"as to the role of the various fields and some description of the flows","ts":"1477428685.000588"},{"type":"message","user":"U0PB67X4K","text":"cool - that way I won't have to roll out the comprehensive PDF every time I forget  :wink:","ts":"1477428709.000589","reactions":[{"name":"joy","users":["U26T99AQ4"],"count":1},{"name":"+1","users":["U0XPR4NP4"],"count":1}]},{"type":"message","user":"U26T99AQ4","text":"point well taken","ts":"1477428731.000590"},{"type":"message","user":"U0ULK2JPP","text":"I was going to move the next\/*proto to fabric\/ and work on the consolidation \u2026. can I a go ahead with that ?","ts":"1477428749.000591"},{"type":"message","user":"U0ULK2JPP","text":"and we do any adjustment after that ?","ts":"1477428761.000592"},{"type":"message","user":"U26T99AQ4","text":"sure thing","ts":"1477428766.000593"},{"type":"message","user":"U26T99AQ4","text":"we can work on our local copies and rebase\/merge later","ts":"1477428783.000594"},{"type":"message","user":"U26T99AQ4","text":"it's just comments anyway","ts":"1477428788.000595"},{"type":"message","user":"U0ULK2JPP","text":"<@U0PB67X4K> <@U0XPR4NP4> your votes ?","ts":"1477428789.000596"},{"type":"message","user":"U0ULK2JPP","text":"well these only comments discussions have been know to take an interesting turn :slightly_smiling_face: but I take your point re rebasing","ts":"1477428827.000597"},{"type":"message","user":"U0PB67X4K","text":"<@U0ULK2JPP>  - does this mean you'll be eliminating the extraneous protos and then modifying the peer code to use these?","ts":"1477428862.000598"},{"type":"message","user":"U0ULK2JPP","text":"yes","ts":"1477428869.000599"},{"type":"message","user":"U0PB67X4K","text":"we'll somehow need to sync with <@U13TWBRBL>  too on the SDK side","ts":"1477428886.000600"},{"type":"message","user":"U0ULK2JPP","text":"good point...","ts":"1477428908.000601"},{"type":"message","user":"U0PB67X4K","text":"(especially for the thing I pinged some of you via DM for next week)","ts":"1477428930.000602"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ULK2JPP> I think you are setting yourself up to do some extra work, if there is any fallout in the form of proto changes from our discussions, but, I do think it could also be a valuable exercise to see where the protos do and don't work for the fabric (just as I've been trying to do with the orderer)","ts":"1477428937.000603","reactions":[{"name":"+1","users":["U0PB67X4K"],"count":1}]},{"type":"message","user":"U0ULK2JPP","text":"<@U0XPR4NP4> that\u2019s exactly what I was hoping to do","ts":"1477428964.000604"},{"type":"message","user":"U0ULK2JPP","text":"only by actually doing it will we really know","ts":"1477428979.000605","reactions":[{"name":"+1","users":["U0XPR4NP4"],"count":1}]},{"type":"message","user":"U0ULK2JPP","text":"and I may find its going to take more work","ts":"1477428994.000606"},{"type":"message","user":"U0ULK2JPP","text":"in which case better start early","ts":"1477429001.000607"},{"type":"message","user":"U0ULK2JPP","text":"how about this","ts":"1477429007.000608"},{"type":"message","user":"U0ULK2JPP","text":"I start on this and at least TRY to get it to a state where I can push so we can review ?","ts":"1477429037.000609"},{"type":"message","user":"U0XPR4NP4","text":"Sounds good to me","ts":"1477429173.000610"},{"type":"message","user":"U0ULK2JPP","text":"ok. will do that","ts":"1477429208.000611"},{"user":"U11RW82PM","text":"<@U11RW82PM|david.acton> has joined the channel","type":"message","subtype":"channel_join","ts":"1477435348.000612"},{"type":"message","user":"U0ZR63HLK","text":"<@U0XPR4NP4>, <@U0ULK2JPP>, <@U0PB67X4K>, <@U26T99AQ4> I did a mistake. If you look at our pdf, Proposal.header was bytes. I changed by mistake to TransactionHeader. This should fix the issue with the checks.","ts":"1477470538.000613"},{"type":"message","user":"U0ZR63HLK","text":"Regarding \" `TransactionAction.header` is the same as the `Proposal.header` \", the committing peer is not supposed to perform this check because it does not have the Proposal","edited":{"user":"U0ZR63HLK","ts":"1477470585.000000"},"ts":"1477470551.000614"},{"type":"message","user":"U11RW82PM","text":"Hey gang.  I want to get TLS working in both my Dev and eventually Prod envs.  For DEV membersrvc, I assume I generate self signed TLS certs.  Does this cert have to be in a particular format?  e.g. ECDSA, RSA etc\u2026?  Would anyone happen to know the correct openssl command to run to get the right format?","ts":"1477470664.000616"},{"type":"message","user":"U0ZR63HLK","text":"<@U0XPR4NP4>, <@U0ULK2JPP>, <@U0PB67X4K>, <@U26T99AQ4>, <@U1BC5A0F9>, <@U0KN2SSKE>, <@U0UKTPMG8>   I found the following issue related to the protobuf serialization. An endorser will sign a ProposalResponsePayload message if it endorsers a received proposal. Now, this can be done in the following way: The endorser construct the ProposalResponsePayload message, marshal it and sign the bytes so obtained. But now there is an issue because each endorser might serialize in different ways and then sign different bytes. At this point, the proposal submitter is not able to put together the endowments and construct a Transaction message.","edited":{"user":"U0ZR63HLK","ts":"1477489749.000000"},"ts":"1477489603.000617"},{"type":"message","user":"U0ZR63HLK","text":"This needs to be addressed.","ts":"1477489613.000618"},{"type":"message","user":"U0ZR63HLK","text":"Just another note, <@U26T99AQ4> just noticed that in fabric_next.proto there is the following paragraph that is actually wrong: Something important to understand about protocol buffers is that while\n\/\/ serialization is deterministic in that it will always produce the same\n\/\/ bytes, deserialization is non-deterministic","ts":"1477489676.000619"},{"type":"message","user":"U0ZR63HLK","text":"right?","ts":"1477489679.000620"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZR63HLK> I'm a little confused by the phrasing, but protobuf serialization is definitely _not_ deterministic.  Two different protobuf implementations (or even the same implementation executing twice) may marshal the same structure to two different sets of bytes.","ts":"1477490068.000624"},{"type":"message","user":"U0XPR4NP4","text":"I think you may have been pointing that out to <@U26T99AQ4> but just wanted to double check","ts":"1477490118.000625"},{"type":"message","user":"U0XR6J961","text":"same bytes will produce same data structure, but not guaranteed the other way","ts":"1477490172.000626"},{"type":"message","user":"U0ZR63HLK","text":"That paragraph was not written by us","edited":{"user":"U0ZR63HLK","ts":"1477490208.000000"},"ts":"1477490193.000627"},{"type":"message","user":"U0ZR63HLK","text":"was already there","ts":"1477490195.000628"},{"type":"message","user":"U26T99AQ4","text":"so without a submitting peer creating a single ProposalResponsePayload for all to endorse, we have a problem....","ts":"1477490213.000630"},{"type":"message","user":"U26T99AQ4","text":"unless we use a custom hashing scheme","ts":"1477490229.000631"},{"type":"message","user":"U0ULK2JPP","text":"to clarify","ts":"1477490232.000632"},{"type":"message","user":"U0ULK2JPP","text":"SDK send to 3 endorsers. 3 endorsers send 3 ProposalResponsePayload back. These could be (should be) identical before marshalling. However the marshalled bytes and the signature they are based on would be different. So We cannot assume we can just send one of the 3 ProposalResponsePayload  in transaction but have to send all 3. Note that \u201csend just 1 ProposalResponsePayload \u201c was an optimization measure\u2026. <@U0ZR63HLK> <@U26T99AQ4> to correct the above as necessary","ts":"1477490445.000633"},{"type":"message","user":"U0ZR63HLK","text":"either we use deterministic marshalling or we need to have everything in the Transaction and then having the committing peer check for consistency","ts":"1477490556.000634"},{"type":"message","user":"U26T99AQ4","text":"or we use a custom hashing scheme","ts":"1477490566.000635"},{"type":"message","user":"U0ZR63HLK","text":"yeah","ts":"1477490573.000636"},{"type":"message","user":"U0ZR63HLK","text":"also the client-sdk has to check for consistency then","ts":"1477490582.000637"},{"type":"message","user":"U26T99AQ4","text":"yup","ts":"1477490588.000638"},{"type":"message","user":"U0ULK2JPP","text":"for now can we  send ProposalResponsePayload  ? ie, trade clarity\/simplicity for optimization\/complexity  ?","ts":"1477490667.000639"},{"type":"message","user":"U0ULK2JPP","text":"(need to get to office\u2026 will be online soon)","ts":"1477490691.000640"},{"type":"message","user":"U0ZR63HLK","text":"a compromise must be reached, that's for sure","ts":"1477490694.000641"},{"type":"message","user":"U0XR6J961","text":"what's the problem?","ts":"1477490847.000642"},{"type":"message","user":"U0ZR63HLK","text":"murali has clarified the point just a few messages earlier","ts":"1477490990.000643"},{"type":"message","user":"U0XPR4NP4","text":"&gt; SDK send to 3 endorsers. 3 endorsers send 3 ProposalResponsePayload back. These could be (should be) identical before marshalling. However the marshalled bytes and the signature they are based on would be different. So We cannot assume we can just send one of the 3 ProposalResponsePayload  in transaction but have to send all 3.","ts":"1477490998.000644"},{"type":"message","user":"U0PB67X4K","text":"there's no guarantee for protobufs but I thought that all Google implementations actually serialize bytes the same way in practice even if not a \"commitment\"","ts":"1477491031.000645"},{"type":"message","user":"U26T99AQ4","text":"without a submitting peer and with non-deterministic marshalling, endorsers will sign the same action (logically) represented as different bytes","ts":"1477491033.000646"},{"type":"message","user":"U0XPR4NP4","text":"<@U0PB67X4K> I have never witnessed protobuf marshal the same structure to two different sets of bytes.  Still, they do explicitly warn that they may not, so for a long term file format, it seems like a bad bet to rely on.","ts":"1477491092.000647"},{"type":"message","user":"U0PB67X4K","text":"agreed","ts":"1477491146.000648"},{"type":"message","user":"U0PB67X4K","text":"I just know that there are Google projects which sign so probably why its the case","ts":"1477491193.000649"},{"type":"message","user":"U0PB67X4K","text":"but they never make guarantees  - must be nice to be Google  :wink:","ts":"1477491237.000650"},{"type":"message","user":"U0XPR4NP4","text":"The problem I am still hoping to resolve from yesterday is that `ProposalResponsePayload` contains a `proposalHash` which is the `\/\/ Hash of the proposal that the endorser acts on`, but the `Proposal` is not available, so I don't understand the claim in the deck that `ProposalResponsePayload links to the ProposalHeader and chaincodeProposalPayload through proposalHash`","edited":{"user":"U0XPR4NP4","ts":"1477491368.000000"},"ts":"1477491260.000651"},{"type":"message","user":"U0XPR4NP4","text":"I still see no way to enforce that the `TransactionHeader` attached to the `TransactionActions` is the same as the one used in the `Proposal`","ts":"1477491297.000652"},{"type":"message","user":"U0PB67X4K","text":"Hmm  - I thought I had that figured out looking at the slides, but let me review again","ts":"1477491590.000655"},{"type":"message","user":"U0ZR63HLK","text":"for type CHAINCODE, proposal hash is H(TransactionHeader || f(ChaincodeProposalInputs)), where is the visibility function","edited":{"user":"U0ZR63HLK","ts":"1477491783.000000"},"ts":"1477491769.000656"},{"type":"message","user":"U0ZR63HLK","text":"TransactionHeader is in the Transaction, therefore the link","ts":"1477491817.000658"},{"type":"message","user":"U0XR6J961","text":"what is the proposalresponsepayload?  will that end up in the chain?","ts":"1477491825.000659"},{"type":"message","user":"U0ZR63HLK","text":"yes","ts":"1477491835.000660"},{"type":"message","user":"U0XR6J961","text":"i still think that whatever is stored in the chain for all eternity should not be protobuf","ts":"1477491855.000661"},{"type":"message","user":"U0XPR4NP4","text":"So then the documentation is not correct, `ProposalResponsePayload.proposalHash\ufeff\u2060\u2060\u2060\u2060` is not the `\ufeff\u2060\u2060\u2060\u2060\/\/ Hash of the proposal that the endorser acts on`?","ts":"1477491880.000662"},{"type":"message","user":"U0ZR63HLK","text":"<@U0XPR4NP4> I agree that some field should be bytes and not the actual message","edited":{"user":"U0ZR63HLK","ts":"1477491975.000000"},"ts":"1477491881.000663"},{"type":"message","user":"U0XR6J961","text":"but a fixed encoding, either some custom bytes encoding (like bitcoin does), or a ASN.1 DER encoding","ts":"1477491894.000664"},{"type":"message","user":"U0ZR63HLK","text":"Right, <@U26T99AQ4> and me are working on the updating the comments","ts":"1477491919.000665"},{"type":"message","user":"U0ZR63HLK","text":"but the deck of slides reports it correctly, I hope :slightly_smiling_face:","edited":{"user":"U0ZR63HLK","ts":"1477491957.000000"},"ts":"1477491928.000666"},{"type":"message","user":"U0XPR4NP4","text":"The deck of slides says that `ProposalResponsePayload.proposalhash` is `\/\/ Hash of the proposal` :simple_smile:","ts":"1477492017.000669"},{"type":"message","user":"U0ZR63HLK","text":"eheheh, on slide 18 there is the clarification","ts":"1477492041.000670"},{"type":"message","user":"U0ZR63HLK","text":"I copied from that slide","ts":"1477492045.000671"},{"type":"message","user":"U0ZR63HLK","text":"I agree the documentation needs to be improved, sorry for that :disappointed:","ts":"1477492078.000672"},{"type":"message","user":"U0ZR63HLK","text":"ah, just a second the slide number might be wrong","ts":"1477492152.000673"},{"type":"message","user":"U0XPR4NP4","text":"Perhaps this is where my confusion is coming from, since I expressly do not want to use a CHAINCODE type transaction, and I am trying to use the generic Proposal structures, but not all of their fields are well defined because they are supposed to be dependent on the new type?","ts":"1477492165.000674"},{"type":"message","user":"U0ZR63HLK","text":"because we are updating also that one","ts":"1477492167.000675"},{"type":"message","user":"U0ZR63HLK","text":"may you give an example?","ts":"1477492208.000676"},{"type":"message","user":"U0XPR4NP4","text":"So, I would like to define a new transaction type, CONFIGURATION","ts":"1477492221.000677"},{"type":"message","user":"U0ZR63HLK","text":"I don't know, are you referring to TransactionHeader's extensions field?","ts":"1477492225.000678"},{"type":"message","user":"U0XPR4NP4","text":"No","ts":"1477492248.000679"},{"type":"message","user":"U0ZR63HLK","text":"okay","ts":"1477492252.000680"},{"type":"message","user":"U0XPR4NP4","text":"So, I defined a new `TransactionHeader.Type` called CONFIGURATION","ts":"1477492264.000681"},{"type":"message","user":"U0ZR63HLK","text":"good","ts":"1477492277.000682"},{"type":"message","user":"U0XPR4NP4","text":"And, in the `Proposal`, I would embed a header with that type set (no extensions)","ts":"1477492309.000683"},{"type":"message","user":"U0XPR4NP4","text":"And for the `ProposalPayload` I would set a marshaled `ConfigurationItem` and would receive a `ProposalResponse` with mostly empty fields, but an endorsement, which I thought was over the proposal, but now sounds like it is over the `TransactionHeader` + something? Then my `ConfigurationPayload` which would go into the `TransactionActions` would consist of the same marshaled `ConfigurationItem` and the repeated set of endorsements.","edited":{"user":"U0XPR4NP4","ts":"1477492593.000000"},"ts":"1477492369.000684"},{"type":"message","user":"U0PB67X4K","text":"so I think the key here <@U0XPR4NP4>  is to see if <@U0ULK2JPP> can get the basic working with the new proto's so we can see this in action","ts":"1477492731.000688"},{"type":"message","user":"U0XPR4NP4","text":"Really, I don't want any of the `ProposalResponse` and associated messages, I just want an endorsement over the header and the `ConfigurationItem` and to end it there.","ts":"1477492744.000689"},{"type":"message","user":"U0ZR63HLK","text":"in your case, the endorsement would be on the TransactionHeader + the ProposalPayload, which is the configuration. You don't need the visibility function","ts":"1477492754.000690"},{"type":"message","user":"U0PB67X4K","text":"there is  type thing maybe we can use?","ts":"1477492759.000691"},{"type":"message","user":"U0ZR63HLK","text":"I think you can have it, let me check a bit more carefully","ts":"1477492814.000692"},{"type":"message","user":"U0XPR4NP4","text":"So what would the contents of `ProposalResponse` be for me? It seems like there are a lot of unnecessary fields there for this case which I  don't know how to populate.","ts":"1477492833.000693"},{"type":"message","user":"U0ZR63HLK","text":"let's start from the Transaction","ts":"1477492853.000694"},{"type":"message","user":"U0ZR63HLK","text":"there, we have to define the TransactionActions.Payload","ts":"1477492881.000695"},{"type":"message","user":"U0XPR4NP4","text":"<@U0PB67X4K> I'm not sure I follow about <@U0ULK2JPP> getting 'the basic working', since this is a different transaction type","ts":"1477492886.000696"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZR63HLK> Okay, `TransactionActions.Payload`, so this must be a set of signatures, and the actual configuration payload","ts":"1477492925.000697"},{"type":"message","user":"U0ZR63HLK","text":"right, very simple","ts":"1477492934.000698"},{"type":"message","user":"U0ZR63HLK","text":"the actual configuration payload is the Proposal.Payload, right?","ts":"1477492950.000699"},{"type":"message","user":"U0XPR4NP4","text":"Right","ts":"1477492957.000700"},{"type":"message","user":"U0PB67X4K","text":"I just meant saying how it all comes together was all.   But I see your point <@U0XPR4NP4> .","ts":"1477492959.000701"},{"type":"message","user":"U0ZR63HLK","text":"the endorsments are on the TransactionHeader + Proposal.Pyaload","ts":"1477492978.000702"},{"type":"message","user":"U0ZR63HLK","text":"and you are done","ts":"1477492980.000703"},{"type":"message","user":"U0ZR63HLK","text":"Am I missing something?","ts":"1477493005.000704"},{"type":"message","user":"U0XPR4NP4","text":"Well, without deterministic marshaling, how do I verify those endorsements? Because the only `TransactionHeader` I have access to is the one from the `TransactionActions` which is not bytes","ts":"1477493035.000705"},{"type":"message","user":"U0ZR63HLK","text":"right","ts":"1477493083.000706"},{"type":"message","user":"U0ZR63HLK","text":"I agree that we have to modify these fields","ts":"1477493092.000707"},{"type":"message","user":"U0ZR63HLK","text":"also in Proposal, the header should be bytes as it was before, my mistake :disappointed:","ts":"1477493109.000708"},{"type":"message","user":"U0XPR4NP4","text":"Okay, that solves that then.  Another question, when I send the `Proposal` to the endorsers (in my world, these will likely be physical people) they do not reply with a `ProposalResponse`, they simply reply with an `Endorsement`?","ts":"1477493158.000709"},{"type":"message","user":"U0ZR63HLK","text":"what's the difference in replying with a ProposalResponse and an Endorsemnt message?","ts":"1477493222.000710"},{"type":"message","user":"U0ZR63HLK","text":"what do you mean by physical people? They will not use some piece of software?","ts":"1477493246.000711"},{"type":"message","user":"U0XPR4NP4","text":"Well, the `Endorsement` structure claims that: \n\n```\n        \/\/ Signature of the payload included in ProposalResponse concatenate with\n        \/\/ the endorser's certificate; ie, sign(ProposalResponse.payload + endorser)\n        bytes signature = 2;\n```\n\nWhich implies that I need to somehow generate all of these structures, none of which have meaningful data","ts":"1477493303.000712"},{"type":"message","user":"U0PB67X4K","text":"<@U0XPR4NP4>  - is an endorser an ordering node in your case?","ts":"1477493310.000713"},{"type":"message","user":"U0XPR4NP4","text":"<@U0PB67X4K> No, I would expect for an endorser to be an 'admin' and not necessarily for the orderers, it could also be a peer admin, anyone who is authorized to modify the configuration initially populated in the genesis block","ts":"1477493363.000714"},{"type":"message","user":"U0XPR4NP4","text":"By physical people, I mean that it will be a human decision, of course it will likely be implemented as 'click this button to agree',  but there will likely not generally be automated review.","ts":"1477493396.000715"},{"type":"message","user":"U0PB67X4K","text":"right","ts":"1477493405.000716"},{"type":"message","user":"U0PB67X4K","text":"(recall how I have mentioned that endorsement cannot replace signature workflow  :wink: ? )","ts":"1477493441.000717"},{"type":"message","user":"U0XPR4NP4","text":"So, to frame this problem more generally, the genesis block will consist of a `Transaction` which consists of repeated `TransactionActions` each of which contains a `ConfigurationItem` the `ConfigurationItem` has a policy attached to it, with who is allowed to modify the item (what endorsements are required), so, anyone who is authorized to submit a configuration transaction can take the previous configuration, modify the bits they are authorized to (with appropriate endorsements) and then submit the configuration tx, and these new configuration will become the new chain configuration (assuming it validates).  This is a special sort of transaction in that only valid ones ever make it onto the raw chain.","ts":"1477493559.000718"},{"type":"message","user":"U0PB67X4K","text":"and there are 2 parts:   submitting this to the ordering service and then the ordering service propagating this to the peers to update their config?","edited":{"user":"U0PB67X4K","ts":"1477493598.000000"},"ts":"1477493577.000719"},{"type":"message","user":"U0XPR4NP4","text":"That's why it's critical that the ordering service be able to evaluate the transaction's validity without any dependence on chaincode, MVCC, etc.","ts":"1477493588.000720"},{"type":"message","user":"U0ZR63HLK","text":"got it","ts":"1477493613.000722"},{"type":"message","user":"U0PB67X4K","text":"BUT it only cares about config transactions, correct?","ts":"1477493637.000723"},{"type":"message","user":"U0XPR4NP4","text":"I would say yes, 3 parts.  Creating and submitting it to order, and then the ordering service concluding whether or not it satisfies the update policies, finally, the peers once they receive the config transaction can also verify that the ordering service is not trying to pull a fast one and change some peer policy it is not authorized to do so, by performing the check as well.","ts":"1477493662.000724"},{"type":"message","user":"U0XPR4NP4","text":"Exactly, the ordering service will only intropsect on CONFIGURATION type transactions","ts":"1477493675.000725"},{"type":"message","user":"U0XPR4NP4","text":"(And it will make sure that such transactions get their own block)","ts":"1477493687.000726"},{"type":"message","user":"U0ZR63HLK","text":"got it","ts":"1477493690.000727"},{"type":"message","user":"U0PB67X4K","text":"(sorry for being dense - just want to make sure we bring it all back together instead of reading history)","ts":"1477493711.000728"},{"type":"message","user":"U0XPR4NP4","text":"Not at all, I've tried to document this some in the multi-channel document, but it should be done more explicitly","ts":"1477493761.000729"},{"type":"message","user":"U0ZR63HLK","text":"still not clear to me, what's the issue in creating the ProposalResponse. The client-sdk, I guess, will be used to send the CONFIGURATION Proposal to the endorsers and put together the endorsements it gets back, no?","edited":{"user":"U0ZR63HLK","ts":"1477493865.000000"},"ts":"1477493844.000730"},{"type":"message","user":"U0ZR63HLK","text":"probably, I'm missing something here :disappointed:","ts":"1477493881.000732"},{"type":"message","user":"U0ZR63HLK","text":"<@U0XPR4NP4>, may you clarify this?","edited":{"user":"U0ZR63HLK","ts":"1477493908.000000"},"ts":"1477493896.000733"},{"type":"message","user":"U0XPR4NP4","text":"Yes, the issue I see with the `ProposalResponse` is that it assumes that the proposal is somehow 'executed' and therefore has a lot of fields that are rather meaningless when it is really a \"sign if you like it, don't if you don't\".  These changes would not be submitted to peer endorsers, rather, I'd expect them to be emailed or whatever and signatures generated\/collected manually by admins.","ts":"1477493983.000735"},{"type":"message","user":"U0PB67X4K","text":"<@U0XPR4NP4> wants to simply things with a COMMON transaction format for config and regular (mvcc, chaincode) transactions and re-use the structures since in the end config and mvcc end up in blocks on the peer side","ts":"1477493985.000736"},{"type":"message","user":"U0PB67X4K","text":"correct?","ts":"1477493996.000737"},{"type":"message","user":"U0PB67X4K","text":"so we could have something different than CHAINCODE as the type of trans","ts":"1477494021.000738"},{"type":"message","user":"U0XPR4NP4","text":"Exactly.  I have custom structures today which work, but they duplicate much of what is in the fabric next structures","ts":"1477494025.000739"},{"type":"message","user":"U0PB67X4K","text":"I think in the end we need to prove that we can support non-chaincode transaction types here","ts":"1477494192.000740"},{"type":"message","user":"U1BC5A0F9","text":"<@U0XPR4NP4>, why would we need an endorsement-based logic for configuration?","edited":{"user":"U1BC5A0F9","ts":"1477494212.000000"},"ts":"1477494196.000741"},{"type":"message","user":"U0XPR4NP4","text":"Everyone bootstraps the network, and agrees that these 6 peer orgs are allowed to transact, and we're using ordering as a service, so the orderer org is not, and if any 4 of the 6 peer orgs vote to change membership, it's allowed.  So, the orderer gets a transaction in which attempts to add a peer org.  How does it verify that there is agreement from 4 of the 6? By checking the endorsements","ts":"1477494303.000743"},{"type":"message","user":"U1BC5A0F9","text":"That is, to my understanding i) reconfiguration messages are deterministically prossessed, ii) do not incur into heavy computation load that would be impossible to handle without parallelization, and iii) to have an endorsement-model we would need to have some prominent\/highly priviledged endorsers that are authorized to endorse system reconfiguration proposals.","ts":"1477494344.000744"},{"type":"message","user":"U1BC5A0F9","text":"What is important for reconfig message authentication is the client that submits it and signsthe associated transaction but there is no need for \"automated endorsement\", no?","ts":"1477494410.000745"},{"type":"message","user":"U0XPR4NP4","text":"i) Yes, absolutely must be determinstic\nii) They can be processed in parallel for the signature checks\niii) Who is given the authority to modify configuration is a policy matter, it could be as open or restrictive as defined, but I would expect only highly privileged users would be able","ts":"1477494425.000746"},{"type":"message","user":"U1BC5A0F9","text":"well, however, endorsement is an automated processs","ts":"1477494452.000747"},{"type":"message","user":"U1BC5A0F9","text":"that is it checks the signature on the proposal and this is what it bases its evaluation on,","ts":"1477494469.000748"},{"type":"message","user":"U1BC5A0F9","text":"client-signature is what is important here, i think!","ts":"1477494478.000749"},{"type":"message","user":"U0XR6J961","text":"i must be missing something important","ts":"1477494494.000750"},{"type":"message","user":"U0XPR4NP4","text":"I'm not sure I agree or maybe I do not follow","ts":"1477494494.000751"},{"type":"message","user":"U0XR6J961","text":"didn't we talk about this long ago?","ts":"1477494501.000752"},{"type":"message","user":"U0XPR4NP4","text":"Different pieces of config are going to be controlled by different groups of entities","ts":"1477494513.000753"},{"type":"message","user":"U1BC5A0F9","text":"<@U0XR6J961>, how long is long? :slightly_smiling_face:","ts":"1477494521.000754"},{"type":"message","user":"U0XR6J961","text":"half year?","ts":"1477494530.000755"},{"type":"message","user":"U0XPR4NP4","text":"A peer admin should not be able to change orderer policy, and vice versa","ts":"1477494533.000756"},{"type":"message","user":"U1BC5A0F9","text":"Hm, i do not recall, could be!","ts":"1477494541.000757"},{"type":"message","user":"U1BC5A0F9","text":"<@U0XPR4NP4>: Correct!","edited":{"user":"U1BC5A0F9","ts":"1477494560.000000"},"ts":"1477494553.000758"},{"type":"message","user":"U0XPR4NP4","text":"So, each piece of config has an associated modification policy","ts":"1477494555.000759"},{"type":"message","user":"U1BC5A0F9","text":"<@U0XPR4NP4>: correct again!","ts":"1477494573.000761"},{"type":"message","user":"U0XPR4NP4","text":"And each piece of config here, we are trying to represent by a `TransactionActions`","ts":"1477494574.000762"},{"type":"message","user":"U0XR6J961","text":"ordering network configuration has some set of conditions (required signatures) which allow changing the configuration","ts":"1477494585.000763"},{"type":"message","user":"U1BC5A0F9","text":"But we agree that at channel\/chain creation a configuration of which client should authorize a certain change has been set.","ts":"1477494596.000764"},{"type":"message","user":"U0XR6J961","text":"oh channel","ts":"1477494616.000765"},{"text":"retracts","type":"message","subtype":"me_message","user":"U0XR6J961","ts":"1477494623.000766"},{"type":"message","user":"U0XPR4NP4","text":"That must be agreed upon at creation time, however, the authorization policy is itself stored as config, and therefore may be changed","ts":"1477494645.000767"},{"type":"message","user":"U1BC5A0F9","text":"correct!","ts":"1477494656.000768"},{"type":"message","user":"U1BC5A0F9","text":"So we have two things:","ts":"1477494665.000769"},{"type":"message","user":"U1BC5A0F9","text":"i) initial configuration (provided at genesis), and ii) configuration update policy (also provided at genesis)","edited":{"user":"U1BC5A0F9","ts":"1477494703.000000"},"ts":"1477494689.000770"},{"type":"message","user":"U0XPR4NP4","text":"Where (ii) is actually part of (i)","ts":"1477494702.000771"},{"type":"message","user":"U1BC5A0F9","text":"can be, sure.","ts":"1477494711.000773"},{"type":"message","user":"U1BC5A0F9","text":"So, (ii) can be \"I need 2\/3 of the authorized entities to agree on a certain configuration change\"","ts":"1477494758.000774"},{"type":"message","user":"U1BC5A0F9","text":"and (i) can be \"Alice, Bob, Charlie, Lucy, Dave\"","ts":"1477494778.000775"},{"type":"message","user":"U1BC5A0F9","text":"Now, what is important is that a re-configuration transaction contains the signature coming from the clients of any three of the five authorized clients.","edited":{"user":"U1BC5A0F9","ts":"1477494863.000000"},"ts":"1477494818.000776"},{"type":"message","user":"U0XR6J961","text":"users?","ts":"1477494837.000777"},{"type":"message","user":"U1BC5A0F9","text":"sorry certificates; will fix","ts":"1477494847.000778"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1477494850.000779"},{"type":"message","user":"U1BC5A0F9","text":"certificates or clients i would say here","ts":"1477494872.000781"},{"type":"message","user":"U0XPR4NP4","text":"We decided for simplicity, that a configuration tx must contain _all_ configuration.  So, remember that this tx contains all the old config, and then whatever modifications those three authorized entities desire.","ts":"1477494900.000782"},{"type":"message","user":"U1BC5A0F9","text":"Hm, not sure what all configuration means here, but then one would need to check that the \"all configuration\" attached to the tx, is the correct one.","ts":"1477494966.000783"},{"type":"message","user":"U0XPR4NP4","text":"I would say that you need to verify the configuration has not changed, or, if it has changed the changed stuff is appropriately endorsed (and not replayed)","ts":"1477495001.000784"},{"type":"message","user":"U0XR6J961","text":"it is signed by a sufficient number of certificates","ts":"1477495004.000785"},{"type":"message","user":"U0XR6J961","text":"therefore it is the right one","ts":"1477495008.000786"},{"type":"message","user":"U1BC5A0F9","text":"assuming that this set of certificates knows in advance the all configuration","ts":"1477495062.000787"},{"type":"message","user":"U1BC5A0F9","text":"So, give me a few lines","ts":"1477495071.000788"},{"type":"message","user":"U1BC5A0F9","text":"to express my thought, cause i see the \"all configuration being included in the transaciton\" more complex","edited":{"user":"U1BC5A0F9","ts":"1477495122.000000"},"ts":"1477495113.000789"},{"type":"message","user":"U1BC5A0F9","text":"Ok, so a configuration transaction can be consisting of the same message as Transaction in protobuf file, where type (part of transaction header) is set to CONFIGURATION (either of fabric\/orderer- i leave this out for now), creator field, in the header includes a banch of certificates, and signature   field contains the signatures associated with these certificates.","edited":{"user":"U1BC5A0F9","ts":"1477495295.000000"},"ts":"1477495270.000791"},{"type":"message","user":"U1BC5A0F9","text":"The payload of the transaction would include all the re-configuration information, say \"authorized entities is now \"Alice, Bob, Charlie, Lucy, Dave, and Frank\"","ts":"1477495341.000793"},{"type":"message","user":"U1BC5A0F9","text":"this transaction is submitted to the system ledger (say this for simplicity) and its picked up by everyone, who then need to evaluate it.","ts":"1477495375.000794"},{"type":"message","user":"U1BC5A0F9","text":"Then is where the execution (small processing of these transactions) can take place, that would have an effect on the local state of each entity that maintains it.","edited":{"user":"U1BC5A0F9","ts":"1477495413.000000"},"ts":"1477495401.000795"},{"type":"message","user":"U1BC5A0F9","text":"Some sort of special VSCC.","ts":"1477495426.000797"},{"type":"message","user":"U1BC5A0F9","text":"Would this be too complicated you think?","ts":"1477495442.000798"},{"type":"message","user":"U0XPR4NP4","text":"First, ignoring all other parts to the scheme, what would prevent requiring that the previous config be repeated? The Transaction supports multiple `TransactionActions`, what is the complaint against requiring the entire config in the transaction?","ts":"1477495509.000799"},{"type":"message","user":"U1BC5A0F9","text":"Well in my mind these certificates i mentioned before not necessarily refer to committing peers, but rather to clients.","ts":"1477495565.000800"},{"type":"message","user":"U1BC5A0F9","text":"It is Alice, who needs to approve through some application interface the creation of this transaction.","ts":"1477495583.000801"},{"type":"message","user":"U0XR6J961","text":"jyellick: why repeat the previous config?","ts":"1477495598.000802"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> It will vastly simplify our life for pruning, and makes it much easier to inspect the chain and from a single point see the configuration, rather than having to play the whole chain to determine it","edited":{"user":"U0XPR4NP4","ts":"1477495660.000000"},"ts":"1477495649.000803"},{"type":"message","user":"U1BC5A0F9","text":"Some sort of simulation result would that be.","ts":"1477495684.000805"},{"type":"message","user":"U0XR6J961","text":"i think pruning is wrong","ts":"1477495701.000806"},{"type":"message","user":"U0XPR4NP4","text":"<@U1BC5A0F9> I'm not sure why committers vs clients matters here.  There is an existing configuration, so grab all of the `TransactionActions` from it.  Pick the ones you wish to modify, and replace them with appropriately endorsed new ones.","ts":"1477495702.000807"},{"type":"message","user":"U0XR6J961","text":"i think all of this is way too complicated and not correctly layered","ts":"1477495735.000808"},{"type":"message","user":"U0PB67X4K","text":"<@U0XR6J961> - for which part - just for this \"config\" part or for transactions \/ proposals in general?","ts":"1477495794.000809"},{"type":"message","user":"U0XR6J961","text":"config, i did not follow the format of the fabric messages, nor do i care for them","ts":"1477495834.000810"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> In order to prevent DOS attacks in the BFT case, the orderer is going to have to have insight into the transaction format to verify signatures.  So I see no way around the orderer knowing about the fabric transaction format.  I don't like it, would love to hear another option.","ts":"1477495838.000811"},{"type":"message","user":"U0XR6J961","text":"i'd say the ordering service defines an outer format which carries signatures","ts":"1477495876.000812"},{"type":"message","user":"U0XR6J961","text":"and the fabric can fill the payload as it wants","ts":"1477495890.000813"},{"type":"message","user":"U0XR6J961","text":"no pruning","ts":"1477495901.000814"},{"type":"message","user":"U0XPR4NP4","text":"I'd say the orderer transaction format needs to have a chain ID, a submitter ID, a payload, a nonce, signatures, basically what is in the base transaction from the fabric","ts":"1477495970.000815"},{"type":"message","user":"U0XPR4NP4","text":"I think it would have made more sense to design a base transaction for the orderer, then build the fabric transaction on top of it","ts":"1477495989.000816"},{"type":"message","user":"U0XPR4NP4","text":"Rather than how we are approaching it now, which is to build the fabric transaction, and try to pick a subset of it for the orderer","ts":"1477496004.000817"},{"type":"message","user":"U0PB67X4K","text":"(that's the conclusion I was coming to as well <@U0XPR4NP4>  - start simple and add rather than start complex)","ts":"1477496016.000818"},{"type":"message","user":"U0PB67X4K","text":"else I think you can basically just share a very simple outer envelope","ts":"1477496039.000819"},{"type":"message","subtype":"file_share","text":"<@U0ZR63HLK|adc> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/adc\/F2UG5PAQ6\/transaction.png|transaction.png> and commented: <@U0XPR4NP4> This is a transaction. Simpler than this?","file":{"id":"F2UG5PAQ6","created":1477496461,"timestamp":1477496461,"name":"transaction.png","title":"transaction.png","mimetype":"image\/png","filetype":"png","pretty_type":"PNG","user":"U0ZR63HLK","editable":false,"size":139777,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2UG5PAQ6\/transaction.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2UG5PAQ6\/download\/transaction.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_64":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2UG5PAQ6-df6d223f46\/transaction_64.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_80":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2UG5PAQ6-df6d223f46\/transaction_80.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2UG5PAQ6-df6d223f46\/transaction_360.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360_w":360,"thumb_360_h":268,"thumb_480":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2UG5PAQ6-df6d223f46\/transaction_480.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_480_w":480,"thumb_480_h":358,"thumb_160":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2UG5PAQ6-df6d223f46\/transaction_160.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2UG5PAQ6-df6d223f46\/transaction_720.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720_w":720,"thumb_720_h":537,"thumb_960":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2UG5PAQ6-df6d223f46\/transaction_960.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_960_w":960,"thumb_960_h":716,"thumb_1024":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2UG5PAQ6-df6d223f46\/transaction_1024.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_1024_w":1024,"thumb_1024_h":764,"image_exif_rotation":1,"original_w":1408,"original_h":1050,"permalink":"https:\/\/hyperledgerproject.slack.com\/files\/adc\/F2UG5PAQ6\/transaction.png","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2UG5PAQ6-35e578b6ac","channels":["C2GE7GXM1"],"groups":[],"ims":[],"comments_count":1,"initial_comment":{"id":"Fc2UG5QA06","created":1477496461,"timestamp":1477496461,"user":"U0ZR63HLK","is_intro":true,"comment":"<@U0XPR4NP4> This is a transaction. Simpler than this?","channel":""}},"user":"U0ZR63HLK","upload":true,"display_as_bot":false,"username":"<@U0ZR63HLK|adc>","bot_id":null,"ts":"1477496465.000820"},{"type":"message","subtype":"file_share","text":"<@U0ZR63HLK|adc> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/adc\/F2UG27ZJQ\/pasted_image_at_2016_10_26_05_41_pm.png|Pasted image at 2016-10-26, 5:41 PM> and commented: This is TransactionHeader","file":{"id":"F2UG27ZJQ","created":1477496526,"timestamp":1477496526,"name":"Pasted image at 2016_10_26 05_41 PM.png","title":"Pasted image at 2016-10-26, 5:41 PM","mimetype":"image\/png","filetype":"png","pretty_type":"PNG","user":"U0ZR63HLK","editable":false,"size":38394,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2UG27ZJQ\/pasted_image_at_2016_10_26_05_41_pm.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2UG27ZJQ\/download\/pasted_image_at_2016_10_26_05_41_pm.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_64":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2UG27ZJQ-2479711bdb\/pasted_image_at_2016_10_26_05_41_pm_64.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_80":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2UG27ZJQ-2479711bdb\/pasted_image_at_2016_10_26_05_41_pm_80.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2UG27ZJQ-2479711bdb\/pasted_image_at_2016_10_26_05_41_pm_360.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360_w":296,"thumb_360_h":360,"thumb_480":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2UG27ZJQ-2479711bdb\/pasted_image_at_2016_10_26_05_41_pm_480.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_480_w":395,"thumb_480_h":480,"thumb_160":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2UG27ZJQ-2479711bdb\/pasted_image_at_2016_10_26_05_41_pm_160.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","image_exif_rotation":1,"original_w":506,"original_h":615,"permalink":"https:\/\/hyperledgerproject.slack.com\/files\/adc\/F2UG27ZJQ\/pasted_image_at_2016_10_26_05_41_pm.png","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2UG27ZJQ-9c4700cea8","channels":["C2GE7GXM1"],"groups":[],"ims":[],"comments_count":1,"initial_comment":{"id":"Fc2UEP3B35","created":1477496526,"timestamp":1477496526,"user":"U0ZR63HLK","is_intro":true,"comment":"This is TransactionHeader","channel":""}},"user":"U0ZR63HLK","upload":true,"display_as_bot":false,"username":"<@U0ZR63HLK|adc>","bot_id":null,"ts":"1477496528.000821"},{"type":"message","user":"U0XR6J961","text":"<@U0ZR63HLK> why are all these fields bytes?","ts":"1477496566.000822"},{"type":"message","user":"U0ZR63HLK","text":"for simplicity :slightly_smiling_face:","ts":"1477496580.000823"},{"type":"message","user":"U0XR6J961","text":"to make it easier to implement bugs?","ts":"1477496598.000824"},{"type":"message","user":"U0ZR63HLK","text":"no, kidding","ts":"1477496600.000825"},{"type":"message","user":"U0ZR63HLK","text":"why not!","ts":"1477496608.000826"},{"type":"message","user":"U0ZR63HLK","text":"for this marshalling issue","ts":"1477496618.000827"},{"type":"message","user":"U0ZR63HLK","text":"if you find bytes that can be removed I would love to remove them","ts":"1477496636.000828"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZR63HLK> This format is still not logically coherent to me","ts":"1477496718.000829"},{"type":"message","user":"U0XPR4NP4","text":"How do we have `n` transaction headers for a single transaction?","ts":"1477496729.000830"},{"type":"message","user":"U0ZR63HLK","text":"a transaction can compose multiple proposal to be committed atomically","ts":"1477496770.000831"},{"type":"message","user":"U0ZR63HLK","text":"all or nothing, no?","ts":"1477496773.000832"},{"type":"message","user":"U0XPR4NP4","text":"Let's forget about fabric and proposals and everything for a bit","ts":"1477496805.000833"},{"type":"message","user":"U0ZR63HLK","text":"yes, please. I'm pretty destroyed!","ts":"1477496818.000834"},{"type":"message","user":"U0ZR63HLK","text":":slightly_smiling_face:","ts":"1477496819.000835"},{"type":"message","user":"U0XPR4NP4","text":"I hand you a signed transaction, and 50 transaction headers","ts":"1477496829.000836"},{"type":"message","user":"U0XPR4NP4","text":"This at a fundamental level makes no sense to me","ts":"1477496845.000837"},{"type":"message","user":"U0XPR4NP4","text":"Really, you are handing me a transaction, and 50 actions, which contain 50 action headers","ts":"1477496869.000838"},{"type":"message","user":"U0XPR4NP4","text":"There's no actual transaction header","ts":"1477496873.000839"},{"type":"message","user":"U0ZR63HLK","text":"why? I might be wrong","edited":{"user":"U0ZR63HLK","ts":"1477496898.000000"},"ts":"1477496881.000840"},{"type":"message","user":"U1BC5A0F9","text":"Hm, but its actually 50 x (transaction header + endorsement of the associated proposal)","edited":{"user":"U1BC5A0F9","ts":"1477496922.000000"},"ts":"1477496902.000842"},{"type":"message","user":"U1BC5A0F9","text":"that means that if i have two single proposals whose results one want to see committed atomically","ts":"1477496942.000845"},{"type":"message","user":"U0XPR4NP4","text":"It's like we are overloading the word transaction.  If the top level thing is a transaction, how does each action have a transaction header? Are they all the same?","ts":"1477496957.000846"},{"type":"message","user":"U1BC5A0F9","text":"then we would need to have them in the same transaction no?","ts":"1477496959.000847"},{"type":"message","user":"U1BC5A0F9","text":"May be , correct","ts":"1477496974.000848"},{"type":"message","user":"U1BC5A0F9","text":"indeed","ts":"1477496978.000849"},{"type":"message","user":"U1BC5A0F9","text":"maybe its a multi-transaction what we have there","ts":"1477496988.000850"},{"type":"message","user":"U0XR6J961","text":"what is a multi-transaction?","ts":"1477496996.000851"},{"type":"message","user":"U1BC5A0F9","text":"for this we can remove this complexity and define transaction to contain only what is included in transactionACtion","ts":"1477497020.000852"},{"type":"message","user":"U0XPR4NP4","text":"I think what I am driving at, is I don't understand how a transaction can have a repeated field which contains the transaction's header(s)","ts":"1477497040.000853"},{"type":"message","user":"U1BC5A0F9","text":"for now it will anyway be one transaction per transaction :slightly_smiling_face:","ts":"1477497052.000854"},{"type":"message","user":"U1BC5A0F9","text":"the field does nto contain only transaction header","ts":"1477497066.000855"},{"type":"message","user":"U1BC5A0F9","text":"but also transaction payload","edited":{"user":"U1BC5A0F9","ts":"1477497078.000000"},"ts":"1477497070.000856"},{"type":"message","user":"U0XPR4NP4","text":"To us, I think a transaction is a header (which prevents replay, and provides identity), a payload, and a signature","ts":"1477497085.000858"},{"type":"message","user":"U0XPR4NP4","text":"If you want a 'multi-transaction', then I would make that payload be a message which contains repeated transactions, or some other format","ts":"1477497123.000859"},{"type":"message","user":"U1BC5A0F9","text":"So if we have transaction include","ts":"1477497156.000860"},{"type":"message","user":"U1BC5A0F9","text":"timestamp, header, paylaod (parts of transactionAction) directly, and a signature without any repetition,would this simplify things in your opinion?","ts":"1477497196.000861"},{"type":"message","user":"U0XR6J961","text":"why is timestamp not part of header?","ts":"1477497221.000862"},{"type":"message","user":"U0XPR4NP4","text":"What is the purpose of the timestamp? I don't hate it, but why is it not in the header?","ts":"1477497222.000863"},{"type":"message","user":"U1BC5A0F9","text":"and version","ts":"1477497223.000864"},{"type":"message","user":"U1BC5A0F9","text":"ah correct, it actually is","ts":"1477497228.000865"},{"type":"message","user":"U1BC5A0F9","text":"and the version is also part of it","ts":"1477497235.000866"},{"type":"message","user":"U1BC5A0F9","text":"so both can be removed","ts":"1477497238.000867"},{"type":"message","user":"U0XR6J961","text":"hey let me propose something completely new:","ts":"1477497243.000868"},{"type":"message","user":"U0XR6J961","text":"don't use protobufs for those, but standard go structs","ts":"1477497254.000869"},{"type":"message","user":"U1BC5A0F9","text":"I guess that deck was a bit old :slightly_smiling_face:","ts":"1477497260.000870"},{"type":"message","user":"U0XR6J961","text":"and use ASN.1 to serialize\/deserialize them","ts":"1477497262.000871"},{"type":"message","user":"U0XR6J961","text":"then you can skip that whole bytes thing","ts":"1477497283.000872"},{"type":"message","user":"U0XR6J961","text":"and directly integrate the arrays of structs","ts":"1477497299.000873"},{"type":"message","user":"U1BC5A0F9","text":"Adding <@U0ZR63HLK>, <@U26T99AQ4> as they are essential for this discussion in general.","ts":"1477497325.000874"},{"type":"message","user":"U0XPR4NP4","text":"Using protobufs for our on disk storage seems to be causing us a lot of problems.  ASN.1 is slower, but a single unmarshal and done would be nice.","ts":"1477497384.000875"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1477497399.000876"},{"type":"message","user":"U0XR6J961","text":"and given that it is a deterministic format you could even implement a faster version","ts":"1477497442.000877","reactions":[{"name":"+1","users":["U1BC5A0F9"],"count":1}]},{"type":"message","user":"U0XR6J961","text":"of course the payload still will need to be an array of bytes to provide layering","ts":"1477497855.000878"},{"type":"message","user":"U1BC5A0F9","text":"Hm ok, to change slightly the discussion, we prepared this <https:\/\/jira.hyperledger.org\/browse\/FAB-829> as proposal for generic membership service interface.","ts":"1477497921.000879"},{"type":"message","user":"U1BC5A0F9","text":"ACtually a membership service provider interface (the client side mostly).","ts":"1477497945.000880"},{"type":"message","user":"U0XPR4NP4","text":"<@U1BC5A0F9> I'm a little confused about what membership services is supposed to do in v1.  My assumption was that it would issue the t-certs\/e-certs for an organization, but that the signature validation etc. must be able to be performed without access to membership services, only to the chain?","ts":"1477498229.000881"},{"type":"message","user":"U1BC5A0F9","text":"Correct. The interface i referred to has to do with the interface that transaction processing part of the client has with the membership service part of the client","ts":"1477498597.000882"},{"type":"message","user":"U1BC5A0F9","text":"It should be transparent to how and when the server is contacted","ts":"1477498651.000883"},{"type":"message","user":"U0S5KF44D","text":"There are 3 touch points for membership services: 1) server 2) client (how the SDK talks to the server) and 3) peer (how the peer processes certs issued by server)","ts":"1477498661.000884"},{"type":"message","user":"U1BC5A0F9","text":"correct","ts":"1477498670.000885"},{"type":"message","user":"U1BC5A0F9","text":"actually the server can be hidden from the client","ts":"1477498699.000886"},{"type":"message","user":"U0S5KF44D","text":"For #3, it has generally been just normal PKIX checking","ts":"1477498706.000887"},{"type":"message","user":"U1BC5A0F9","text":"but ok the interface should be accommodatin auditing requirements on the server side","ts":"1477498725.000888"},{"type":"message","user":"U0S5KF44D","text":"yes, that is true also ... only the client knows how to talk to the server","ts":"1477498728.000889"},{"type":"message","user":"U0S5KF44D","text":"anyway, Elli, you said that we needed to change #3 and perhaps #2 also to be able to plugin Identity Mixer later","ts":"1477498808.000890"},{"type":"message","user":"U0S5KF44D","text":"that is what you are working in in FAB 829, right?","ts":"1477498818.000891"},{"type":"message","user":"U0PB67X4K","text":"<@U0XPR4NP4> - are you adamant about the fact that a \"fabric\" transaction and an \"orderer\" transaction need to share the same format?   I am not so sure I agree that they need to be and\/or should be and the more I think about it, the more I think it will cause more harm than good.   Here's my thoughts \/ understanding:\n\n- I assume that we agree that we determine the identities used for access control for the Broadcast and Deliver services\/APIs via the certificates used to sign the \"messages\" sent to either of those services?  So this means that we need to have the messages sent via Broadcast be signed by the \"client\"\n\n- For messages sent via Broadcast, we would also need to know the channel, payload, cert of sender and signature.   So the \"header, payload, signature\" structure works well here and the ordering service really does not need to know anything about the payload EXCEPT in the case where this is a CONFIG transaction?   I would assert that you could add that as a \"type\" to the header and\/or have a separate service\/API for config.  I also assume that CONFIG messages must be sent to the intended channel for ordering purposes\n\n- For non-CONFIG messages, the orderers make sure the signature is valid on the broadcast message and that the signer is allowed to broadcast to the channel.  So for \"normal\" broadcast messages (e.g. fabric transactions), the orderer views these as opaque and simply orders them and delivers to anyone connected on target channel\n\n- For a CONFIG message (determined by the type in the header or there could actually be a separate service\/API for config), the orderer actually needs to execute some logic to make sure that the config change is valid, the sender is authorized, etc.   The creation of this message would occur outside of the fabric (typically) and any type of signatures which needed to be gathered would be done outside of the fabric and the ordering service.  All of this information would be in the \"payload\" of the broadcast message.   Assuming that the CONFIG change met the rules \/ constraints, there might be certain of these types of message (or maybe all) which would need to be delivered to peers connected to the channel the config is for.   I would actually assert that the ordering service should actually deliver this as a batch of 1 and I think that perhaps you introduce a \"type\" field in the batch\/block header so that when the receiving peer(s) get it, they know that this is a special batch\/block. \n\nI think that if done this way, then the ordering service needs to know nothing about fabric (or any other things which wants to use it) transactions and you have a well-defined way of distributing config to peers using a \"config\" batch\/block","edited":{"user":"U0PB67X4K","ts":"1477499140.000000"},"ts":"1477498840.000893"},{"type":"message","user":"U1BC5A0F9","text":"<@U0S5KF44D> correct.","ts":"1477498896.000896"},{"type":"message","user":"U0PB67X4K","text":"I think we need to stop calling the \"crypto\" layer which components use to do basic crypto \"membership services\"  :wink:","ts":"1477499085.000899"},{"type":"message","user":"U0PB67X4K","text":"\"cop-client\"  or something","ts":"1477499102.000900"},{"type":"message","user":"U0S5KF44D","text":"Gari, do you agree with comments in <https:\/\/jira.hyperledger.org\/browse\/FAB-807> wrt both orderer and peers using common code to parse the 3 types of cert lists?","ts":"1477499157.000902"},{"type":"message","user":"U0PB67X4K","text":"it's confusing given the legacy of the current stuff","ts":"1477499164.000903"},{"type":"message","user":"U0PB67X4K","text":"yeah - we should share crypto stuff wherever possible","ts":"1477499192.000904"},{"type":"message","user":"U0XQ35CDD","text":"&gt; I would actually assert that the ordering service should actually deliver this as a batch of 1 and I think that perhaps you introduce a \"type\" field in the batch\/block header so that when the receiving peer(s) get it, they know that this is a special batch\/block.\nWas this assertion ever contested? This has been the assumption in all the discussions I've taken part in.","ts":"1477499203.000905"},{"type":"message","user":"U0XQ35CDD","text":"(I've only scrolled back to yesterday's discussions so perhaps I've missed something.)","ts":"1477499223.000906"},{"type":"message","user":"U0XR6J961","text":"why batch of 1?","ts":"1477499282.000907"},{"type":"message","user":"U0PB67X4K","text":"<@U0XQ35CDD> - I try to follow all the conversations and write ups, so perhaps there was no disagreement on some of those points but I'll be honest it is not super clear to me (which is likely that I am not involved in every discussion)","ts":"1477499284.000908","reactions":[{"name":"+1","users":["U0XQ35CDD"],"count":1}]},{"type":"message","user":"U0PB67X4K","text":"because I put a \"type\" field in the batch header","ts":"1477499301.000909"},{"type":"message","user":"U0XR6J961","text":"aha","ts":"1477499315.000910"},{"type":"message","user":"U0PB67X4K","text":"could be more as long as they were all config transactions","ts":"1477499317.000911"},{"type":"message","user":"U0PB67X4K","text":"it basically gives the orderer freedom to deal with config as it likes","ts":"1477499341.000912"},{"type":"message","user":"U0XR6J961","text":"why is this part of the batch and not part of the payload format?","ts":"1477499344.000913"},{"type":"message","user":"U0XR6J961","text":"<@U0S5KF44D> what are CRLs used for in the orderer?","ts":"1477499390.000914"},{"type":"message","user":"U0PB67X4K","text":"because then the config and fabric transactions would have to share something in common - which is what I wanted to avoid","edited":{"user":"U0PB67X4K","ts":"1477499499.000000"},"ts":"1477499409.000915"},{"type":"message","user":"U0PB67X4K","text":"and I wanted to ensure that the ordering nodes do not ever have to know anything about a fabric transaction.  The opposite is OK - fabric can know about ordering batch format and config payload \/ format","ts":"1477499471.000916"},{"type":"message","user":"U0S5KF44D","text":"<@U0XR6J961> CRLs would be for revoked peer and end user certs, but wouldn't that still need to flow thru this config update?  I'm assuming you don't need to support revocation of orderer certs","ts":"1477499591.000918"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1477499609.000919"},{"type":"message","user":"U0XR6J961","text":"why is this cert list a special type?  it could be maintained as a part of the ledger, no?","ts":"1477499672.000920"},{"type":"message","user":"U0S5KF44D","text":"Actually, the orderers will need to process CRL also, to make sure they reject traffic from a revoked peer cert","ts":"1477499881.000921"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1477499968.000922"},{"type":"message","user":"U0S5KF44D","text":"It is a \"special type\" only in the sense that it identifies it's use as a list of revoked certs rather than a list of trusted certs","ts":"1477499973.000923"},{"type":"message","user":"U0XPR4NP4","text":"&gt; are you adamant about the fact that a \"fabric\" transaction and an \"orderer\" transaction need to share the same format?  \n\n<@U0PB67X4K>  I would be adamant that the thing the fabric sends to the orderer must be encoded in the same way the thing that contains the config is encoded.  In other words, the ordering service should not have to understand fabric transactions to validate their signature, and then additionally understand ordering transactions and how to validate them.  \n\nWhat you propose, is what I would prefer, an ordering transaction type which is the only thing the orderer accepts.  It can wrap whatever fabric structure is required, and the fabric structure can depend on the orderer constructs, like the header to prevent replay, or not, does not matter to me.\n\nThe sticky points to me, are that the specification says that the client sends a fabric transaction to the orderer (not an orderer transaction), and that the raw ledger work claims to store fabric transactions (again, not orderer transactions).\n\nBecause those two things didn't seem likely to switch off the fabric transaction type to an orderer transaction type, I was attempting to switch the orderer onto the fabric transaction type, even though it seems like a suboptimal solution to me.","edited":{"user":"U0XPR4NP4","ts":"1477502545.000000"},"ts":"1477501995.000924"},{"type":"message","user":"U0KN2SSKE","text":"We need to be careful here not to mix up the transactions.  The intent for CONFIG type tx is for the orderers to act on them without the existence of a chaincode  (remember all tx\u2019s on peers involve some chaincode). Some CONFIG tx may also be \u201cexec\u201d on peers","ts":"1477503141.000928"},{"type":"message","user":"U0XPR4NP4","text":"<@U0KN2SSKE> The question is whether we try to take the proposed fabric transaction format, and add a type for CONFIG transactions, or whether we create a more generic orderer transaction type, and rework the fabric transaction type on top of it.  I think <@U0PB67X4K> and I would propose the latter, while others (I'll let them identify themselves) would opt for the former.","edited":{"user":"U0XPR4NP4","ts":"1477503285.000000"},"ts":"1477503275.000929"},{"user":"U2UMDEBU2","text":"<@U2UMDEBU2|shaileshrl> has joined the channel","type":"message","subtype":"channel_join","ts":"1477513721.000931"},{"user":"U1KFBBWG1","text":"<@U1KFBBWG1|harrisob> has joined the channel","type":"message","subtype":"channel_join","ts":"1477519302.000932"},{"user":"U1KFBBWG1","text":"<@U1KFBBWG1|harrisob> has left the channel","type":"message","subtype":"channel_leave","ts":"1477519641.000933"},{"type":"message","user":"U0MRY2LKY","text":"+1 for the latter - with wrapper and message type (in the fabric spirit of allowing additional plugin functionality on the messages themselves)","ts":"1477520856.000934"},{"type":"message","subtype":"file_share","text":"<@U0ULK2JPP|muralisr> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F2UPNMZD3\/chaincode_transaction.proto|chaincode_transaction.proto> and commented: <@U0ZR63HLK> <@U26T99AQ4>  multiple TransactionAction (although ledger code expects only one currently) as in this field `repeated TransactionAction actions = 3;`   is ok but not  `repeated ChaincodeEndorsedActions action = 2;`  I think ? Can you validate please ?","file":{"id":"F2UPNMZD3","created":1477527411,"timestamp":1477527411,"name":"chaincode_transaction.proto","title":"chaincode_transaction.proto","mimetype":"text\/plain","filetype":"text","pretty_type":"Plain Text","user":"U0ULK2JPP","editable":true,"size":1140,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2UPNMZD3\/chaincode_transaction.proto?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2UPNMZD3\/download\/chaincode_transaction.proto?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F2UPNMZD3\/chaincode_transaction.proto","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2UPNMZD3-054e822b2f","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F2UPNMZD3\/chaincode_transaction.proto\/edit","preview":"\/*\nCopyright IBM Corp. 2016 All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>\/*<\/pre><\/div>\n<div><pre>Copyright IBM Corp. 2016 All Rights Reserved.<\/pre><\/div>\n<div><pre><\/pre><\/div>\n<div><pre>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<\/pre><\/div>\n<div><pre>you may not use this file except in compliance with the License.<\/pre><\/div>\n<\/div>\n<\/div>\n","lines":43,"lines_more":38,"preview_is_truncated":true,"channels":["C2GE7GXM1"],"groups":[],"ims":[],"comments_count":2,"initial_comment":{"id":"Fc2UPGCPRC","created":1477527411,"timestamp":1477527411,"user":"U0ULK2JPP","is_intro":true,"comment":"<@U0ZR63HLK> <@U26T99AQ4>  multiple TransactionAction (although ledger code expects only one currently) as in this field `repeated TransactionAction actions = 3;`   is ok but not  `repeated ChaincodeEndorsedActions action = 2;`  I think ? Can you validate please ?","channel":""}},"user":"U0ULK2JPP","upload":true,"display_as_bot":false,"username":"<@U0ULK2JPP|muralisr>","bot_id":null,"ts":"1477527412.000935"},{"type":"message","subtype":"file_share","text":"<@U0ULK2JPP|muralisr> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F2UPZE64A\/fabric_transaction.proto|fabric_transaction.proto>","file":{"id":"F2UPZE64A","created":1477527413,"timestamp":1477527413,"name":"fabric_transaction.proto","title":"fabric_transaction.proto","mimetype":"text\/plain","filetype":"text","pretty_type":"Plain Text","user":"U0ULK2JPP","editable":true,"size":2563,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2UPZE64A\/fabric_transaction.proto?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2UPZE64A\/download\/fabric_transaction.proto?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F2UPZE64A\/fabric_transaction.proto","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2UPZE64A-11eaa1a4b9","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F2UPZE64A\/fabric_transaction.proto\/edit","preview":"\/*\nCopyright IBM Corp. 2016 All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>\/*<\/pre><\/div>\n<div><pre>Copyright IBM Corp. 2016 All Rights Reserved.<\/pre><\/div>\n<div><pre><\/pre><\/div>\n<div><pre>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<\/pre><\/div>\n<div><pre>you may not use this file except in compliance with the License.<\/pre><\/div>\n<\/div>\n<\/div>\n","lines":78,"lines_more":73,"preview_is_truncated":true,"channels":["C2GE7GXM1"],"groups":[],"ims":[],"comments_count":0},"user":"U0ULK2JPP","upload":true,"display_as_bot":false,"username":"<@U0ULK2JPP|muralisr>","bot_id":null,"ts":"1477527413.000936"},{"type":"message","subtype":"file_comment","text":"<@U0ULK2JPP|muralisr> commented on <@U0ULK2JPP|muralisr>\u2019s file <https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F2UPNMZD3\/chaincode_transaction.proto|chaincode_transaction.proto>: I have attached proto files with the appropriate changes.","file":{"id":"F2UPNMZD3","created":1477527411,"timestamp":1477527411,"name":"chaincode_transaction.proto","title":"chaincode_transaction.proto","mimetype":"text\/plain","filetype":"text","pretty_type":"Plain Text","user":"U0ULK2JPP","editable":true,"size":1140,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2UPNMZD3\/chaincode_transaction.proto?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2UPNMZD3\/download\/chaincode_transaction.proto?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F2UPNMZD3\/chaincode_transaction.proto","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2UPNMZD3-054e822b2f","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F2UPNMZD3\/chaincode_transaction.proto\/edit","preview":"\/*\nCopyright IBM Corp. 2016 All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>\/*<\/pre><\/div>\n<div><pre>Copyright IBM Corp. 2016 All Rights Reserved.<\/pre><\/div>\n<div><pre><\/pre><\/div>\n<div><pre>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<\/pre><\/div>\n<div><pre>you may not use this file except in compliance with the License.<\/pre><\/div>\n<\/div>\n<\/div>\n","lines":43,"lines_more":38,"preview_is_truncated":true,"channels":["C2GE7GXM1"],"groups":[],"ims":[],"comments_count":2,"initial_comment":{"id":"Fc2UPGCPRC","created":1477527411,"timestamp":1477527411,"user":"U0ULK2JPP","is_intro":true,"comment":"<@U0ZR63HLK> <@U26T99AQ4>  multiple TransactionAction (although ledger code expects only one currently) as in this field `repeated TransactionAction actions = 3;`   is ok but not  `repeated ChaincodeEndorsedActions action = 2;`  I think ? Can you validate please ?","channel":""}},"comment":{"id":"Fc2UPUB909","created":1477527471,"timestamp":1477527471,"user":"U0ULK2JPP","is_intro":false,"comment":"I have attached proto files with the appropriate changes.","channel":""},"is_intro":false,"ts":"1477527471.000937"},{"type":"message","user":"U0ULK2JPP","text":"note the plural-&gt;singular changes to some names as well","ts":"1477527627.000938"},{"user":"U2RRHA11T","text":"<@U2RRHA11T|kyrieleison> has joined the channel","type":"message","subtype":"channel_join","ts":"1477554694.000939"},{"type":"message","user":"U0ZR63HLK","text":"<@U0XPR4NP4> what I care about is to design the protocol messages having security in mind :slightly_smiling_face: Then, if you start from CONFIG and generalize or you go the other way around is not so relevant to me. Please, share your design of the fabric messages and we will evaluate the security implications :slightly_smiling_face:","ts":"1477558717.000940"},{"type":"message","user":"U0ZR63HLK","text":"<@U0ULK2JPP> regarding chaincode_transaction.proto, at that point, we can also collapse ChaincodeActionPayload and ChaincodeEndorsedAction  in a single message. It should be fine from a security point of view. <@U26T99AQ4>, @lli comments?","ts":"1477558866.000941"},{"type":"message","user":"U0ZR63HLK","text":"<@U0ULK2JPP> regarding fabric_transaction.proto, <@U0XPR4NP4> was questioning having multiple headers in a single Transaction. Not sure anymore if we have to move to that directions. Let me just note that having a single header per transaction is fine from a security point of view.","ts":"1477559085.000942"},{"user":"U2URZF2AF","text":"<@U2URZF2AF|zxc> has joined the channel","type":"message","subtype":"channel_join","ts":"1477561937.000943"},{"user":"U2J6ZKX19","text":"<@U2J6ZKX19|wanghaibo> has joined the channel","type":"message","subtype":"channel_join","ts":"1477561959.000944"},{"type":"message","user":"U0ULK2JPP","text":"<@U0ZR63HLK>  I take it then you are ok with the changes above. Propose we can do other changes incrementally once the main integ is complete.","ts":"1477570158.000945"},{"type":"message","user":"U0ZR63HLK","text":"yes, actually, <@U26T99AQ4> and me are finalizing a change-set that will introduce a lot of comments to all the messages and some refactoring to simply certain things.","ts":"1477570244.000946"},{"type":"message","user":"U0ZR63HLK","text":"it should be ready in few hours","ts":"1477570258.000947"},{"type":"message","user":"U0ULK2JPP","text":"perfect","ts":"1477570264.000948"},{"type":"message","user":"U0ULK2JPP","text":"thank you <@U0ZR63HLK>","ts":"1477570270.000949"},{"type":"message","user":"U0ZR63HLK","text":"sure :slightly_smiling_face:","ts":"1477570288.000950"},{"type":"message","user":"U0ULK2JPP","text":"let me share what I have","ts":"1477570293.000951"},{"type":"message","user":"U0ZR63HLK","text":"sure, please","ts":"1477570410.000952"},{"type":"message","subtype":"file_share","text":"<@U0ULK2JPP|muralisr> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F2UV1KUHJ\/protos.tar|protos.tar> and commented: (1) moved everthing in next\/ to fabric\/.  (2) took what\u2019s needed in fabric_next.proto and deleted others (3) made the few changes mentioend in those two files","file":{"id":"F2UV1KUHJ","created":1477570946,"timestamp":1477570946,"name":"protos.tar","title":"protos.tar","mimetype":"application\/x-tar","filetype":"tar","pretty_type":"Tarball","user":"U0ULK2JPP","editable":false,"size":51712,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2UV1KUHJ\/protos.tar?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2UV1KUHJ\/download\/protos.tar?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F2UV1KUHJ\/protos.tar","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2UV1KUHJ-e5305ec763","channels":["C2GE7GXM1"],"groups":[],"ims":[],"comments_count":1,"initial_comment":{"id":"Fc2V02CN0P","created":1477570946,"timestamp":1477570946,"user":"U0ULK2JPP","is_intro":true,"comment":"(1) moved everthing in next\/ to fabric\/.  (2) took what\u2019s needed in fabric_next.proto and deleted others (3) made the few changes mentioend in those two files","channel":""}},"user":"U0ULK2JPP","upload":true,"display_as_bot":false,"username":"<@U0ULK2JPP|muralisr>","bot_id":null,"ts":"1477570947.000955"},{"type":"message","user":"U0ULK2JPP","text":"if you can move all the above protos into next\/ and do your changes there , I can simplly move them back into fabric\/ when you are done","ts":"1477571023.000956"},{"type":"message","user":"U0ULK2JPP","text":"what do you think ?","ts":"1477571030.000957"},{"type":"message","user":"U0ZR63HLK","text":"make sense","ts":"1477571064.000958"},{"type":"message","user":"U0ZR63HLK","text":"thanks :slightly_smiling_face:","ts":"1477571097.000959"},{"type":"message","user":"U0ULK2JPP","text":"awesome, thanks again :slightly_smiling_face:","ts":"1477571124.000960"},{"type":"message","user":"U26T99AQ4","text":"<@U0XPR4NP4> <@U0PB67X4K> <@U0ULK2JPP> <@U0KN2SSKE> : Angelo and I have pushed LOTS of comments to the protobufs","ts":"1477578560.000961"},{"type":"message","user":"U26T99AQ4","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2071\/>","ts":"1477578562.000962"},{"type":"message","user":"U26T99AQ4","text":"(and some minor cosmetic changes)","ts":"1477578572.000963"},{"type":"message","user":"U26T99AQ4","text":"pls have a look, looking forward to the discussion","ts":"1477578590.000964"},{"type":"message","user":"U0PB67X4K","text":"cool - thx","ts":"1477578601.000965"},{"type":"message","user":"U26T99AQ4","text":"protos\/next\/fabric.proto is a good place to start - there's an overall description of the whole flow, specific for chaincodes","ts":"1477578770.000966"},{"type":"message","user":"U0ULK2JPP","text":"<@U26T99AQ4> <@U0ZR63HLK> nitpicking\u2026 can we shorten field names please ? its getting quite ugly in code. Also `bytes chaincodeProposalPayloadBytes = 1;` \u2026 don\u2019t need the `Bytes` in the field name","ts":"1477579017.000967"},{"type":"message","user":"U26T99AQ4","text":"agreed","ts":"1477579038.000968"},{"type":"message","user":"U26T99AQ4","text":"will change it","ts":"1477579080.000969"},{"type":"message","user":"U0ULK2JPP","text":"now we are focusing on semantics \u2026after a while names are going to be key ?","ts":"1477579121.000970"},{"type":"message","user":"U0ULK2JPP","text":"(that\u2019s my excuse for the nitpick \u2026 :slightly_smiling_face: )","ts":"1477579141.000971"},{"type":"message","user":"U0ZR63HLK","text":"heheheh :slightly_smiling_face:","ts":"1477579149.000972"},{"type":"message","user":"U0ZR63HLK","text":"apart from this, there is still the marshalling issue. We need to find a compromise for that","ts":"1477579205.000973"},{"type":"message","user":"U26T99AQ4","text":"<@U0XR6J961> suggested that stuff that goes to the ledger should not be marshalled in some non-standard ways and suggested to use ASN.1. Why not...?","ts":"1477579242.000974"},{"type":"message","user":"U26T99AQ4","text":"(or any standard encoding for that matter)","ts":"1477579287.000975"},{"type":"message","user":"U26T99AQ4","text":"if we did that, we would solve the problem...","ts":"1477579301.000976"},{"type":"message","user":"U0ZR63HLK","text":"+1","ts":"1477579317.000977"},{"type":"message","user":"U0ULK2JPP","text":"how about this ? Get this integrated but have helpers in `fabric\/protos\/util`. Integration code such as ledger, chaincode etc will use these helpers.  Once we have this in, we can move to other formats in due time after you have time to reorganize protos. At that point the main changes will be contained to protos and protos\/util","ts":"1477579740.000978","reactions":[{"name":"+1","users":["U26T99AQ4"],"count":1}]},{"type":"message","user":"U0ULK2JPP","text":"I\u2019m hoping to get the integration done by today \u2026 latest by tomorrow","ts":"1477579765.000979"},{"type":"message","user":"U26T99AQ4","text":"sounds like a great way forward","ts":"1477579776.000980"},{"type":"message","user":"U0ZR63HLK","text":"+1","ts":"1477579776.000981"},{"type":"message","user":"U26T99AQ4","text":"so we're basically assuming that the marshalling done by those helpers is deterministic","ts":"1477579829.000982"},{"type":"message","user":"U26T99AQ4","text":"for now we stick with protobufs, but we can change later (with minimal impact) to ASN.1 or others","ts":"1477579851.000983"},{"type":"message","user":"U0ULK2JPP","text":"right. no \u201cmarshal\u201d\/\u201cunmarshall\u201d will be in core code for these new structures \u2026they\u2019ll only be in protos\/util","ts":"1477579935.000984"},{"type":"message","user":"U0ULK2JPP","text":"for example I have this in a util func `func GetPayloads(txActions *protos.TransactionAction) (*protos.ChaincodeActionPayload, *protos.ChaincodeProposalResponsePayload,  error) {`","ts":"1477579986.000985"},{"type":"message","user":"U0ULK2JPP","text":"used by ledger","ts":"1477579990.000986"},{"type":"message","user":"U26T99AQ4","text":"gotcha - instead of doing manual unmarshalling, the peer code will call GetPayloads or similar helpers","ts":"1477580081.000987"},{"type":"message","user":"U26T99AQ4","text":"and we'll need some corresponding AssemblePayloads or something","ts":"1477580106.000988"},{"type":"message","user":"U0ULK2JPP","text":"right","ts":"1477580126.000989"},{"type":"message","user":"U0ULK2JPP","text":"packing and unpacking done in protos\/util","ts":"1477580169.000990"},{"type":"message","user":"U26T99AQ4","text":"yup","ts":"1477580175.000991"},{"type":"message","user":"U0XPR4NP4","text":"<@U26T99AQ4> Please see my replies in <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2071\/>","ts":"1477580540.000992"},{"type":"message","user":"U0ULK2JPP","text":"<@U0XPR4NP4> I answered to the \u201cTransaction2\u201d question\u2026 its just temporary as the \u201cTransaction\u201d from 0.5 is used internally. The old Transaction will be replaced","ts":"1477580919.000993"},{"type":"message","user":"U0ULK2JPP","text":"basically don\u2019t worry about the internal use for a bit and keep the build happy while integrating","ts":"1477580989.000994"},{"type":"message","user":"U0XPR4NP4","text":"Thanks <@U0ULK2JPP> , I guess what confused me is that the previous push did not include the 2, that it was new in this one, just wanted to make sure it was purposeful","ts":"1477581010.000995"},{"type":"message","user":"U0ULK2JPP","text":"agreed and understood\u2026 \u201c2\u201d was a carryover from my changes","ts":"1477581045.000996"},{"type":"message","user":"U26T99AQ4","text":"<@U0XPR4NP4> thx, going through them, will post responses\/changes soon","ts":"1477581908.000997"},{"type":"message","user":"U26T99AQ4","text":"done - pls see my responses and I'll push a new revision soon","ts":"1477582819.000998"},{"type":"message","user":"U0ULK2JPP","text":"<@U0XPR4NP4> ^^^","ts":"1477583147.000999"},{"type":"message","user":"U0XPR4NP4","text":"(Looking)","ts":"1477583188.001000"},{"type":"message","user":"U0XPR4NP4","text":"<@U26T99AQ4> Replied","ts":"1477583248.001001"},{"type":"message","user":"U26T99AQ4","text":"<@U0XPR4NP4> <@U0ULK2JPP> pushed new comments and minor changes","ts":"1477584659.001002","reactions":[{"name":"+1","users":["U0ULK2JPP"],"count":1}]},{"type":"message","user":"U26T99AQ4","text":"<@U0XPR4NP4> I wanted to follow up here on \n&gt; What if we required that every transaction is endorsed by the proposer? This seems like it would solve the problem of 'stolen' proposals. If the network wanted to allow 'proxied' proposal submission (where there is a different transaction submitter than proposal creator) then this could still be supported.","ts":"1477590043.001003"},{"type":"message","user":"U26T99AQ4","text":"I'm not sure I fully understand yet. Here's my doubt: how can we support transactions that can include multiple actions, where each action may result from the proposal of a different client, while still ensuring that only one actor signs the transaction?","ts":"1477590234.001004"},{"type":"message","user":"U0XPR4NP4","text":"But the transaction must be signed by one actor?","ts":"1477590302.001005"},{"type":"message","user":"U26T99AQ4","text":"currently yes, only by one","ts":"1477590312.001006"},{"type":"message","user":"U26T99AQ4","text":"we could have multiple sigs","ts":"1477590317.001007"},{"type":"message","user":"U26T99AQ4","text":"or multisigs","ts":"1477590323.001008"},{"type":"message","user":"U26T99AQ4","text":"but that wasn't discussed so far","ts":"1477590331.001009"},{"type":"message","user":"U0XPR4NP4","text":"Ultimately, it will be a single client who submits the transaction","ts":"1477590346.001010"},{"type":"message","user":"U0XPR4NP4","text":"And I would think there should be a transaction header, which that client must sign over","ts":"1477590357.001011"},{"type":"message","user":"U26T99AQ4","text":"right but we want to retain the consent of the submitting actor in its signature of the tx. If the actions are from somebody else, where is *their* consent recorded?","ts":"1477590397.001012"},{"type":"message","user":"U26T99AQ4","text":"imagine both of us submits a proposal, gets an endorsed action","ts":"1477590437.001013"},{"type":"message","user":"U26T99AQ4","text":"now we want to create a tx with both our actions","ts":"1477590445.001014"},{"type":"message","user":"U26T99AQ4","text":"who signs it?","ts":"1477590448.001015"},{"type":"message","user":"U26T99AQ4","text":"if only one does, the other can always claim it didn't mean to do that - it's my word against yours","ts":"1477590474.001016"},{"type":"message","user":"U26T99AQ4","text":"but the second anyone signs, then they are bound by the signature","ts":"1477590512.001017"},{"type":"message","user":"U26T99AQ4","text":"they can't claim that they didn't mean to","ts":"1477590520.001018"},{"type":"message","user":"U0XPR4NP4","text":"I still maintain, whoever submits it, must sign it, as the submitter","ts":"1477590853.001019"},{"type":"message","user":"U26T99AQ4","text":"I don't disagree with that","ts":"1477590864.001020"},{"type":"message","user":"U0XPR4NP4","text":"And I would say there can only ever be a single submitter","ts":"1477590872.001021"},{"type":"message","user":"U0XPR4NP4","text":"(for a particular tran)","ts":"1477590881.001022"},{"type":"message","user":"U26T99AQ4","text":"in that case, how do you solve our little dispute of a tx signed by you with both our proposal actions?","ts":"1477590910.001023"},{"type":"message","user":"U26T99AQ4","text":"I can claim I didn't give you any authorization - and then in front of the judge they'll say \"no, sorry. Ale is Italian and we don't trust them\" and then I'm screwed :stuck_out_tongue:","ts":"1477590950.001024"},{"type":"message","user":"U0PB67X4K","text":"????","ts":"1477590960.001025"},{"type":"message","user":"U26T99AQ4","text":"<@U0PB67X4K> the disucssion concerns a transaction containing 2 actions stemming from proposals from 2 different clients","ts":"1477591012.001026"},{"type":"message","user":"U26T99AQ4","text":"who signs that transaction?","ts":"1477591017.001027"},{"type":"message","user":"U0PB67X4K","text":"I don't think we were trying to support transactions from multiple submitters (clients) in the same envelope","ts":"1477591026.001028"},{"type":"message","user":"U26T99AQ4","text":"then we're good","ts":"1477591034.001029"},{"type":"message","user":"U26T99AQ4","text":"but I think <@U0XPR4NP4> had reservations about that","ts":"1477591057.001030"},{"type":"message","user":"U26T99AQ4","text":"(if I understood correctly)","ts":"1477591068.001031"},{"type":"message","user":"U0XPR4NP4","text":"It is more that having the creator specified in a repeated header implies to me that it is possible","ts":"1477591161.001032"},{"type":"message","user":"U0XPR4NP4","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2075\/1\/orderer\/atomicbroadcast\/ab.proto> Please look at `SignedData`, `SignableData` and `SignatureHeader` as a proposal for the 'orderer transaction'","ts":"1477591205.001033"},{"type":"message","user":"U0XPR4NP4","text":"(Here, where `Broadcast` accepts a stream of `SignedData`, and a fabric transaction would either build upon or simply be wrapped by the `SignedData`)","ts":"1477591249.001034"},{"type":"message","user":"U26T99AQ4","text":"will have a look","ts":"1477591285.001035"},{"type":"message","user":"U0XPR4NP4","text":"(Please have a look <@U0PB67X4K> <@U0XQ35CDD> <@U0XR6J961> as well)","ts":"1477591351.001036"},{"type":"message","user":"U26T99AQ4","text":"<@U0XPR4NP4> I've added the flow descriptipon for generic transactions to fabric_proposal.proto","ts":"1477594983.001037"},{"type":"message","user":"U0XPR4NP4","text":"Thanks","ts":"1477595005.001038"},{"type":"message","user":"U0XPR4NP4","text":"I'll take a look","ts":"1477595013.001039"},{"type":"message","user":"U0ULK2JPP","text":"<@U0XPR4NP4> can you take a look at <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1973\/> ? looks like you had reviewed it before \u2026 if you are ok with that good to merge so I can rebase and work","ts":"1477595288.001040"},{"type":"message","user":"U0XPR4NP4","text":"Sure","ts":"1477595306.001041"},{"type":"message","user":"U0ULK2JPP","text":"oops","ts":"1477595338.001042"},{"type":"message","user":"U0ULK2JPP","text":"wrong one","ts":"1477595340.001043"},{"type":"message","user":"U0XPR4NP4","text":"I +2-ed because it looked good to me, but it has a merge conflict, so that will go away","ts":"1477595465.001044"},{"type":"message","user":"U0ULK2JPP","text":"no that\u2019s the right one (sorry)","ts":"1477595477.001045"},{"type":"message","user":"U0ULK2JPP","text":"ok","ts":"1477595479.001046"},{"type":"message","user":"U0XQ35CDD","text":"If you wanted to simply pass a tran, the SignatureHeader's type is `UNKNOWN` I guess?","edited":{"user":"U0XQ35CDD","ts":"1477596414.000000"},"ts":"1477596389.001047"},{"type":"message","user":"U0XQ35CDD","text":"And can we clarify what is the difference between `CONFIGURATION_TRANSACTION` and `CONFIGURATION_ITEM`? (I can guess, but I don't want to.)","ts":"1477596502.001049"},{"type":"message","user":"U0XPR4NP4","text":"I was just discussing this with <@U0ULK2JPP> we could add a field of type `FABRIC`","ts":"1477597940.001050"},{"type":"message","user":"U0ULK2JPP","text":"sounds like if we did that then `Transaction2` becomes `Data` for `Type == FABRIC`\u2026 and we don\u2019t need `SignedTransaction`","ts":"1477598377.001051"},{"type":"message","user":"U0ULK2JPP","text":"did  I read that right ?","ts":"1477598386.001052"},{"type":"message","user":"U0ULK2JPP","text":"actually talking with <@U0KN2SSKE> we could consolidate even further like so","ts":"1477601817.001053"},{"type":"message","user":"U0ULK2JPP","text":"```Envelope == SignedData\nPayload == SignableData\nHeader == SignatureHeader\n\nso that \n\nEnvelope { Payload, Signature }\nPayload {Header, Data}\n\nmaps to <@U0XPR4NP4> structures. ie, basically use standard names such as Envelope, Header etc to describe generic objects and then `Data` becomes specialized based on Header```","ts":"1477602007.001054"},{"type":"message","user":"U0XPR4NP4","text":"<@U0PB67X4K> <@U0KN2SSKE> <@U0XQ35CDD> <@U0XR6J961> <@U0ULK2JPP> I think we really need to make a decision as to whether configuration tx is on the fabric transaction type with fabric style endorsements or not.  I've heard very different stories depending on who I ask.\n\nBelow is my understanding:\n\nThere are some who suggest that configuration transaction endorsement should be done by endorsers (even if it requires out of band manual human interaction to approve the endorsement).  This means all orderering entities would need deploy endorsing peers to support reconfiguring the ordering network.  \n\nPros: Reuse of components, reuse of concepts\nCons: Violates layering idea of the orderer network being unaware of the peer, fabric transaction format is complex\n\nThere are some who suggest that configuration transaction endorsement should be done entirely in an out of band procedure using a simpler mechanism than endorsement, with admins doing key signatures manually out of band (because modifying config should always require human approval).\n\nPros: Makes bootstrapping simple, keeps orderer concept relatively isolated from fabric concepts\nCons: Require reinventing mechanisms from the fabric","edited":{"user":"U0XPR4NP4","ts":"1477603217.000000"},"ts":"1477603181.001055"},{"type":"message","user":"U0PB67X4K","text":"I go with the latter - separate from fabric.  ","ts":"1477603277.001058"},{"type":"message","user":"U0PB67X4K","text":"And I think the only reinvention might be policy which we could share","ts":"1477603307.001059"},{"type":"message","user":"U0XQ35CDD","text":"Strong vote for the latter option. ","ts":"1477603368.001060"},{"type":"message","user":"U0KN2SSKE","text":"why would \" fabric transaction format is complex\u201d ?","ts":"1477603408.001062"},{"type":"message","user":"U0KN2SSKE","text":"i am fine with have manual configurations for orderer but if it requires to be in the ledger, it need to be a transaction","ts":"1477603456.001064"},{"type":"message","user":"U0KN2SSKE","text":"which should be interpreted by the peers on both endorsing (if required) and validating","ts":"1477603509.001065"},{"type":"message","user":"U0KN2SSKE","text":"channel creation, for example, can\u2019t and shouldn\u2019t be done manually","ts":"1477603536.001066"},{"type":"message","user":"U0KN2SSKE","text":"the current transaction object is defined to contain a header and a payload.  The payload depends on the type in the header","ts":"1477603603.001067"},{"type":"message","user":"U0KN2SSKE","text":"why would that be complex?","ts":"1477603617.001068"},{"type":"message","user":"U0XPR4NP4","text":"If we are doing automated endorsement over it, then I maintain we _must_ use the Proposal\/ProposalResponse\/etc. which I think, are complex.","ts":"1477603633.001069"},{"type":"message","user":"U0XPR4NP4","text":"There is no technical reason which would prevent us from using this construct, I've been thinking about how we might do this, and I actually think it can be made mildly elegant, but I have not worked all the kinks out.","ts":"1477603682.001070"},{"type":"message","user":"U0KN2SSKE","text":"what CONFIG trans that don\u2019t effect the peers ?  separate those out and handle them on the orderer","ts":"1477603708.001071"},{"type":"message","user":"U0XPR4NP4","text":"But I think the aggregation of the transaction proposal, proposalresponse etc. is undeniably complex","ts":"1477603715.001072"},{"type":"message","user":"U0XPR4NP4","text":"Having different styles of config endorsement seems like a bad road to me.","ts":"1477603762.001073"},{"type":"message","user":"U0KN2SSKE","text":"for those that effect the peer and ledger, we need to follow a clear path otherwise we would only confuse developers","ts":"1477603772.001074"},{"type":"message","user":"U0KN2SSKE","text":"nothing prevent us from defining another type of trans","ts":"1477603839.001075"},{"type":"message","user":"U0KN2SSKE","text":"if a trans (regardless of type) effecting both peer and orderer, it needs to travel the same path, so that all the APIs would work the same way;  some of them (types) might not need endorsements","ts":"1477604019.001076"},{"type":"message","user":"U0XPR4NP4","text":"I'm confused how you could have a reconfiguration transaction without endorsement","ts":"1477604048.001077"},{"type":"message","user":"U0XPR4NP4","text":"(here I use endorsement in a generic non-fabric way)","ts":"1477604062.001078"},{"type":"message","user":"U0KN2SSKE","text":"what are the reconfiguration transactions that we know of today?  after all, endorsement is a process determined by the app, not the fabric","ts":"1477604193.001079"},{"type":"message","user":"U0XPR4NP4","text":"Changing transactor membership, changing orderer membership, changing policy (including modification policies for the membership)","ts":"1477604400.001080"},{"type":"message","user":"U0XPR4NP4","text":"(And possibly other chain configuration data which we haven't realized we need yet)","ts":"1477604535.001081"},{"type":"message","user":"U0XPR4NP4","text":"Changing orderer addresses, orderer characteristics (think pbft f, or K, or L), changing other chain characteristics like block size or batch timeout, changing block validation policies, expiring certs (are a few more that come to mind)","edited":{"user":"U0XPR4NP4","ts":"1477604619.000000"},"ts":"1477604610.001082"},{"type":"message","user":"U0KN2SSKE","text":"do we need to record these changes on the ledger  or some private orderer\u2019s db?","ts":"1477604696.001084"},{"type":"message","user":"U0KN2SSKE","text":"if ledger, which ledger and which peers maintain the ledger?","ts":"1477604727.001085"},{"type":"message","user":"U0XPR4NP4","text":"I would say these are the properties of the 'configuration block'.  A 'configuration block' should contain all the configuration for the chain, so that any peer or orderer, given this block (and told to trust it) could completely participate in validation and reception of the chain going forward.  (For a peer, for application logic, they would likely need past blocks).","ts":"1477604832.001086"},{"type":"message","user":"U0ULK2JPP","text":"<@U0XPR4NP4> if these properties are on the `configuration block` are maintained on the ledger .. seems to logically follow that they are maintained as states on a chaincode  OR are they are maintained outside of the ledger in some trusted manner ?","ts":"1477605051.001087"},{"type":"message","user":"U0XPR4NP4","text":"I'm wary of the term 'the ledger', to me this implies some database or other","ts":"1477605078.001088"},{"type":"message","user":"U0KN2SSKE","text":"chain = channel + ledger  which is created by the application + peers,  so without that, there would be no chain to begin with\nWe could treat this config block as a structure maintained by the orderers some how  and given to the application when the app creates a chain","ts":"1477605103.001089"},{"type":"message","user":"U0XPR4NP4","text":"I would see there being a simple transformative function \"Config\" -&gt; In memory structure.  When a peer starts up, it picks the most recent config block, and uses that for config.","ts":"1477605130.001090"},{"type":"message","user":"U0ULK2JPP","text":"ok","ts":"1477605142.001091"},{"type":"message","user":"U0ULK2JPP","text":"so its not part of the \u201cblock\u201d but modified in some trusted manner","ts":"1477605184.001092"},{"type":"message","user":"U0KN2SSKE","text":"so this has nothing to do with transactions","ts":"1477605198.001093"},{"type":"message","user":"U0KN2SSKE","text":"just some confguration on the orderer","ts":"1477605210.001094"},{"type":"message","user":"U0ULK2JPP","text":"if that\u2019s true then we don\u2019t need a \u201ctransaction\u201d to modify it","ts":"1477605210.001095"},{"type":"message","user":"U0KN2SSKE","text":"an API","ts":"1477605232.001096"},{"type":"message","user":"U0KN2SSKE","text":"how would existing peers learn about the changes on the configuration block?","ts":"1477605292.001097"},{"type":"message","user":"U0XPR4NP4","text":"Whenever the configuration changes, a new configuration block is emitted as the next block in the chain","ts":"1477605311.001098"},{"type":"message","user":"U0XPR4NP4","text":"A configuration block only ever contains exactly one 'configuration transaction'","edited":{"user":"U0XPR4NP4","ts":"1477605347.000000"},"ts":"1477605329.001099"},{"type":"message","user":"U0KN2SSKE","text":"no, you\u2019re mixing the metaphor of transaction with configuration data on orderer","ts":"1477605349.001101"},{"type":"message","user":"U0XPR4NP4","text":"This is chain wide configuration","ts":"1477605362.001102"},{"type":"message","user":"U0KN2SSKE","text":"which chain?","ts":"1477605374.001103"},{"type":"message","user":"U0KN2SSKE","text":"there are multi chains","ts":"1477605380.001104"},{"type":"message","user":"U0XPR4NP4","text":"Each channel has a chain","ts":"1477605385.001105"},{"type":"message","user":"U0XPR4NP4","text":"Every chain has a most recent configuration block","ts":"1477605395.001106"},{"type":"message","user":"U0KN2SSKE","text":"that doesn\u2019t work","ts":"1477605438.001107"},{"type":"message","user":"U0XPR4NP4","text":"Why?","ts":"1477605441.001108"},{"type":"message","user":"U0ULK2JPP","text":"we can say (1) config is on ledger and would need to be managed using a chaincode (config being properties) or (2) config is outside of ledger and does not need fabric\u2019s transaction semantics  (no need to invoke chaincode etc)","ts":"1477605445.001109"},{"type":"message","user":"U0ULK2JPP","text":"what we CANNOT say is config is on ledger but does not need fabrics transaction semantics as there\u2019s no way you can modify the states represented by the configuration outside of the chaincode path\u2026I\u2019m thinking states as properties tat have to be manipulate via RW set","edited":{"user":"U0ULK2JPP","ts":"1477605593.000000"},"ts":"1477605504.001110"},{"type":"message","user":"U0XPR4NP4","text":"(2) is not an option, config must be processed in line with the blocks, otherwise it is extremely hard not to be non-deterministic","ts":"1477605508.001111"},{"type":"message","user":"U0KN2SSKE","text":"t1 broadcasted before config changes; t2 broadcasted after config changes;  t1 and t2 were ordered in the same block; config changes was in another block;  which block get to peer first?","ts":"1477605523.001112"},{"type":"message","user":"U0XPR4NP4","text":"Config is not changed until it makes it into a block.  The transactions are processed against the most recent config change.  If it's in a block before the block this tx is bound for, then you apply that config.  If the tx was processed before that config, then it wouldn't.","ts":"1477605602.001114"},{"type":"message","user":"U0KN2SSKE","text":"if 2 is not an option, then we must use transaction \u2014 it is for auditability and all the api\u2019s to work the same way","ts":"1477605645.001115"},{"type":"message","user":"U0ULK2JPP","text":"oh I see","ts":"1477605677.001116"},{"type":"message","user":"U0XPR4NP4","text":"We can do (1), but per <@U0XQ35CDD> and <@U0PB67X4K> they do not like the idea of it","ts":"1477605678.001117"},{"type":"message","user":"U0ULK2JPP","text":"you are saying you\u2019ll construct a block on the fly and just \u201cplug\u201d it in","ts":"1477605695.001118"},{"type":"message","user":"U0XPR4NP4","text":"(I also believe <@U0MRY2LKY> and <@U0XR6J961> do not like the idea of using the fabric transaction)","ts":"1477605702.001119"},{"type":"message","user":"U0ULK2JPP","text":"gosh","ts":"1477605704.001120"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ULK2JPP> It is not that complicated.  The transaction that comes in contains the config.","ts":"1477605724.001121"},{"type":"message","user":"U0XPR4NP4","text":"There's not transformation, nothing complicated, we just validate it, and if it's good, throw it in a block.  If it's not, we discard it.","ts":"1477605740.001122"},{"type":"message","user":"U0XPR4NP4","text":"As my initial post to this whole discussion, I see pros and cons to reusing the fabric transaction.  I just need a decision as I can't implement both.","ts":"1477605798.001123"},{"type":"message","user":"U0XPR4NP4","text":"(Or rather, it would be a waste to do both)","ts":"1477605807.001124"},{"type":"message","user":"U0ULK2JPP","text":"right","ts":"1477605811.001125"},{"type":"message","user":"U0KN2SSKE","text":"if it\u2019s on ledger, how would we get\/query the content?","ts":"1477605812.001126"},{"type":"message","user":"U0KN2SSKE","text":"how would the ledger know to build the merkle tree","ts":"1477605847.001127"},{"type":"message","user":"U0XPR4NP4","text":"I would imagine a switch that says \"If it's configuration, pass it to this little library, it will either tell you the config was inappropriately updated (in which case, you have a problem and should stop participating in the network) or, it will hand you back a little map of the config values, or some other convenient structure.","ts":"1477605875.001128"},{"type":"message","user":"U0ULK2JPP","text":"so then this is what needs to happen \u2026 ledger peeks into the tran and if a CHAINCODE tran does read\/write consolidation or if its a CONFIG transaction it would just call an API into the peer to set it","ts":"1477605892.001129"},{"type":"message","user":"U0ULK2JPP","text":"?","ts":"1477605894.001130"},{"type":"message","user":"U0XPR4NP4","text":"Right.  When you receive a block from ordering, you already need to inspect it to make sure it's valid.  So, extend that further, if it only has one transaction, check to see if it's a config tran, and if so, try to apply it.","ts":"1477605945.001131"},{"type":"message","user":"U0ULK2JPP","text":"ok","ts":"1477605963.001132"},{"type":"message","user":"U0KN2SSKE","text":"so now on every call, we need to check type","ts":"1477606015.001133"},{"type":"message","user":"U0XQ35CDD","text":"This makes perfect sense to me.","ts":"1477606017.001134"},{"type":"message","user":"U0ULK2JPP","text":"in other words, ledger needs to be aware of CONFIG type and treat it differently","ts":"1477606031.001135"},{"type":"message","user":"U0ULK2JPP","text":"well, we already peek into the tran in the ledger","ts":"1477606053.001136"},{"type":"message","user":"U0KN2SSKE","text":"this wouldbe exception processing;  ugly","ts":"1477606076.001137"},{"type":"message","user":"U0KN2SSKE","text":"bad design","ts":"1477606081.001138"},{"type":"message","user":"U0XPR4NP4","text":"Then why do we support non-chaincode types?","ts":"1477606094.001139"},{"type":"message","user":"U0KN2SSKE","text":"it should behave the same from persistence point of view some that we can protect the other APIs","ts":"1477606165.001140"},{"type":"message","user":"U0ULK2JPP","text":"just for reference","ts":"1477606171.001141"},{"type":"message","subtype":"file_share","text":"<@U0ULK2JPP|muralisr> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F2V94SWKG\/pasted_image_at_2016_10_27_06_09_pm.png|Pasted image at 2016-10-27, 6:09 PM>","file":{"id":"F2V94SWKG","created":1477606174,"timestamp":1477606174,"name":"Pasted image at 2016_10_27 06_09 PM.png","title":"Pasted image at 2016-10-27, 6:09 PM","mimetype":"image\/png","filetype":"png","pretty_type":"PNG","user":"U0ULK2JPP","editable":false,"size":217562,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2V94SWKG\/pasted_image_at_2016_10_27_06_09_pm.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2V94SWKG\/download\/pasted_image_at_2016_10_27_06_09_pm.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_64":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2V94SWKG-4597ed4743\/pasted_image_at_2016_10_27_06_09_pm_64.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_80":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2V94SWKG-4597ed4743\/pasted_image_at_2016_10_27_06_09_pm_80.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2V94SWKG-4597ed4743\/pasted_image_at_2016_10_27_06_09_pm_360.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360_w":360,"thumb_360_h":135,"thumb_480":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2V94SWKG-4597ed4743\/pasted_image_at_2016_10_27_06_09_pm_480.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_480_w":480,"thumb_480_h":180,"thumb_160":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2V94SWKG-4597ed4743\/pasted_image_at_2016_10_27_06_09_pm_160.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2V94SWKG-4597ed4743\/pasted_image_at_2016_10_27_06_09_pm_720.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720_w":720,"thumb_720_h":270,"thumb_960":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2V94SWKG-4597ed4743\/pasted_image_at_2016_10_27_06_09_pm_960.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_960_w":960,"thumb_960_h":359,"thumb_1024":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2V94SWKG-4597ed4743\/pasted_image_at_2016_10_27_06_09_pm_1024.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_1024_w":1024,"thumb_1024_h":383,"image_exif_rotation":1,"original_w":2014,"original_h":754,"permalink":"https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F2V94SWKG\/pasted_image_at_2016_10_27_06_09_pm.png","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2V94SWKG-8b4c9e7d1c","channels":["C2GE7GXM1"],"groups":[],"ims":[],"comments_count":0},"user":"U0ULK2JPP","upload":true,"display_as_bot":false,"username":"<@U0ULK2JPP|muralisr>","bot_id":null,"ts":"1477606178.001142"},{"type":"message","user":"U0ULK2JPP","text":"that\u2019s what we do today to prepare for read\/write","ts":"1477606194.001143"},{"type":"message","user":"U0KN2SSKE","text":"ledger now operates on read-write-set, this config type would not have that but it changed the state","ts":"1477606234.001144"},{"type":"message","user":"U0XPR4NP4","text":"If we ever support another transaction type like, say UTXO, we will have to process the transaction differently.  The config transaction is just a very very simple sort transaction which doesn't require a backing DB to parse.","edited":{"user":"U0XPR4NP4","ts":"1477606365.000000"},"ts":"1477606336.001145"},{"type":"message","user":"U0XQ35CDD","text":"Assuming that this is a bad design, how is it better than violating this nice layer separation between orderers\/endorsers that we currently have?","edited":{"user":"U0XQ35CDD","ts":"1477606349.000000"},"ts":"1477606339.001146"},{"type":"message","user":"U0KN2SSKE","text":"we already violate the layer by sending an unknown block to the ledger maintained by the peers","ts":"1477606407.001150"},{"type":"message","user":"U0XPR4NP4","text":"Peers layer on top of ordering, so it is fine for them to need to know about ordering concepts","ts":"1477606429.001151"},{"type":"message","user":"U0XQ35CDD","text":"I disagree. Consider what the alternative path entails for orderers.","ts":"1477606446.001152"},{"type":"message","user":"U0PB67X4K","text":"my take is very simple - the ordering service should have no awareness of fabric transactions.   Now the peers will need to know how to interpret batches of opaque messages and special config messages.   That's because they use the ordering service.","ts":"1477606474.001153"},{"type":"message","user":"U0PB67X4K","text":"it's as simple as that.   config of the ordering service is not governed by peers","ts":"1477606499.001154"},{"type":"message","user":"U0KN2SSKE","text":"i agreed, but there are config trans that governed by the peers","ts":"1477606538.001155"},{"type":"message","user":"U0KN2SSKE","text":"such as channel","ts":"1477606543.001156"},{"type":"message","user":"U0PB67X4K","text":"for fabric - opaque will be fabric transactions","ts":"1477606543.001157"},{"type":"message","user":"U0PB67X4K","text":"then those can be fabric transactions","ts":"1477606561.001158"},{"type":"message","user":"U0KN2SSKE","text":"rest my case","ts":"1477606594.001159"},{"type":"message","user":"U0PB67X4K","text":"ordering service needs to know nothing about those other than to order them as opaque and deliver to the proper channel like any other mesages","ts":"1477606597.001160"},{"type":"message","user":"U0PB67X4K","text":"hang on","ts":"1477606633.001161"},{"type":"message","user":"U0PB67X4K","text":"someone will need to tell the ordering service to create \/ modify a channel and add\/remove members\/identities.  that is an orderer specific transaction.","ts":"1477606704.001162"},{"type":"message","user":"U0PB67X4K","text":"this whole thing seems messy to me - let me step away for a few and think about this","ts":"1477606737.001163"},{"type":"message","user":"U0ULK2JPP","text":"meanwhile can we merge <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2071> ?","ts":"1477606765.001164"},{"type":"message","user":"U0PB67X4K","text":"creation of a channel and telling peers to join a channel actually are 2 separate things","ts":"1477606769.001165"},{"type":"message","user":"U0ULK2JPP","text":"If we are ok with the changes, I can incorporate them","ts":"1477606779.001166"},{"type":"message","user":"U0PB67X4K","text":"one is an orderer API (create the channel) and agreement to use\/join is a fabric transaction","ts":"1477606809.001167"},{"type":"message","user":"U0KN2SSKE","text":"i don\u2019t agree with the changes in 2071 and voted -1, but others can override as always","ts":"1477606854.001168"},{"type":"message","user":"U0PB67X4K","text":"otherwise we will have made one entangled web of complexity","ts":"1477606857.001169"},{"type":"message","user":"U0XPR4NP4","text":"<@U0PB67X4K> This has always been my viewpoint, that anyone with authority to create a channel on the ordering service can do so, with whatever properties they want.  It is up to the peers to decide whether or not they wish to join that channel.","ts":"1477606867.001170"},{"type":"message","user":"U0XQ35CDD","text":"Telling peers to join a channel is something that happens between the company's app and the company's peers. This has nothing to do with ordering.","edited":{"user":"U0XQ35CDD","ts":"1477606964.000000"},"ts":"1477606876.001171","reactions":[{"name":"+1","users":["U0PB67X4K"],"count":1}]},{"type":"message","user":"U0PB67X4K","text":"<@U0KN2SSKE>  \"but others can override\" is my line  :wink:","edited":{"user":"U0PB67X4K","ts":"1477606918.000000"},"ts":"1477606891.001172"},{"type":"message","user":"U0ULK2JPP","text":"<@U0KN2SSKE>  I don\u2019t see any -1 there","ts":"1477606960.001174"},{"type":"message","user":"U0XPR4NP4","text":"It was prior to thee last push, so went away","ts":"1477606993.001176"},{"type":"message","user":"U0XQ35CDD","text":"<@U0ULK2JPP>: It's there on a previous patchset.","ts":"1477606994.001177"},{"type":"message","user":"U0XQ35CDD","text":"13:36.","ts":"1477606996.001178"},{"type":"message","user":"U0ULK2JPP","text":"ah ok","ts":"1477607019.001179"},{"type":"message","user":"U0ULK2JPP","text":"I just wanted to make progress with the integration\u2026 looks like theres going to be a whole bunch of things to iron out","ts":"1477607072.001180"},{"type":"message","user":"U0ULK2JPP","text":"I can just go with what I have but there are some good things in the patch (such as comments) which will be good to have","ts":"1477607153.001181"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ULK2JPP> I would vote merge, purely because of the doc improvements.  I may not agree entirely with the format, but at least it is more clear now.","ts":"1477607212.001182"},{"type":"message","user":"U0ULK2JPP","text":"right, exactly","ts":"1477607223.001183"},{"type":"message","user":"U0ULK2JPP","text":"also it is closer to the mainline transaction processing even if we have to adjust later for the config processing","ts":"1477607246.001184"},{"type":"message","user":"U0ULK2JPP","text":"is that a true statement ?","ts":"1477607256.001185"},{"type":"message","user":"U0KN2SSKE","text":"i think we need to design the CONFIG trans careful to protect the ledger operations;  could some gather the info so that we can have a call with manish and dave \u2014 at least the ledger can index the config trans, which has the same struct but different payload, so that API such as getTrans(123) still work","ts":"1477607570.001186"},{"type":"message","user":"U0KN2SSKE","text":"i m out of here, will check back later on","ts":"1477607629.001187"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ULK2JPP> I'm not sure that I understand your statement.  I too have to run, but will be back on later","ts":"1477607763.001188"},{"type":"message","user":"U0PB67X4K","text":"well if everyone else is leaving - I'm outta here too!  time to workout methinks","ts":"1477607846.001189"},{"type":"message","user":"U0ULK2JPP","text":"guys","ts":"1477607856.001190"},{"type":"message","user":"U0ULK2JPP","text":"I guess I\u2019ll just have to keep using the old protos","ts":"1477607872.001191"},{"type":"message","user":"U0PB67X4K","text":"build job is stalled","ts":"1477608129.001192"},{"type":"message","user":"U0PB67X4K","text":"I gave it a +2 and ran reverify","ts":"1477608167.001193"},{"type":"message","user":"U0ULK2JPP","text":"<@U0PB67X4K> thanks\u2026 will wait for it to complete and merge","ts":"1477608204.001194"},{"type":"message","user":"U0MRY2LKY","text":"<@U0XPR4NP4>: It would be nice if other types of messages could be sent through consensus (for possible extensibility). I also think this is a possible consideration for versioning. I have typically advocated that many application-level configurations should be endorsed as fabric transactions. ","edited":{"user":"U0MRY2LKY","ts":"1477611248.000000"},"ts":"1477609652.001195"},{"type":"message","user":"U0MRY2LKY","text":"I would also think that several middle-level configurations surface in a similar way ... such as creation of subledgers, peer membership, etc. I would also advocate for those items as being endorsed (regardless of the transaction type) and not use a totally out-of-band mechanism. ","edited":{"user":"U0MRY2LKY","ts":"1477610927.000000"},"ts":"1477609835.001197"},{"type":"message","user":"U0MRY2LKY","text":"Sorry - I was editing :)","ts":"1477610935.001204"},{"type":"message","user":"U0XPR4NP4","text":"<@U0MRY2LKY> Sorry if I put words in your mouth, just thought I'd seen you +1 a comment about building the fabric Tran on an orderer Tran","ts":"1477610937.001205"},{"type":"message","user":"U0MRY2LKY","text":"No worries - I did intend that part :) ","ts":"1477611130.001206"},{"type":"message","user":"U0MRY2LKY","text":"<@U0XPR4NP4>:  Btw - I was reading a gerrit change log where my understanding was that the Metadata field isn't included in the hash structure of a block. Is there an equivalent in batches?","ts":"1477611532.001208"},{"type":"message","user":"U0MRY2LKY","text":"And is the metadata intended to be synched between peers along with the rest of the block data?","ts":"1477613641.001209"},{"type":"message","user":"U0XPR4NP4","text":"Metadata is intended to be synced, and is usually used to contain signatures, for instance if 3 of 4 ordering nodes need to sign, there are four different valid sets of signatures (five if you want to be technical) , which would result in four different hashes if they were included in the block hash. It's okay to sync this unhashed data because the receiver can verify it. ","edited":{"user":"U0XPR4NP4","ts":"1477616399.000000"},"ts":"1477615929.001210"},{"type":"message","user":"U0XPR4NP4","text":"As far as batches vs blocks, they're the same data structure ","ts":"1477616108.001212"},{"type":"message","user":"U0MRY2LKY","text":"Cool.. excellent.","ts":"1477617563.001214"},{"type":"message","user":"U0ULK2JPP","text":"protos integrated with <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2081\/>","ts":"1477631381.001215"},{"type":"message","user":"U26T99AQ4","text":"<@U0ULK2JPP> cool, I'll attempt a rebase of my patch on top of that branch","ts":"1477641289.001216"},{"user":"U2CSGKHRS","text":"<@U2CSGKHRS|teddy> has joined the channel","type":"message","subtype":"channel_join","ts":"1477644927.001217"},{"type":"message","user":"U2CSGKHRS","text":"i want to add eca users like jim dynamically.\ni try to change the source in ecap.go with \npwd, err := ecap.eca.registerUser(id, \"bank_a\", pb.Role(1), nil, ecap.eca.aca, \"\", \"client\")\nit returns a pwd of the id, when i use it for peer network login, i get the error like :\nFailed registering client [testid] with name [testid] [x509: certificate signed by unknown authority]. \nwhat is wrong?","ts":"1477645642.001218"},{"type":"message","user":"U0PB67X4K","text":"<@U2CSGKHRS> - reposting this over in membership services","ts":"1477646384.001219"},{"type":"message","user":"U0PB67X4K","text":"but were already have the ability to add users via the NodeSDK","ts":"1477646400.001220"},{"type":"message","user":"U2CSGKHRS","text":"<@U0PB67X4K>  thank you.\nyes,i see your answer before. but i don't know how to use it i will try it.","ts":"1477647135.001221"},{"type":"message","user":"U0ULK2JPP","text":"<@U26T99AQ4> there was a goimports error with  <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2081\/> (a test file that I missed)\u2026 just submitted the fix","ts":"1477655414.001222"},{"type":"message","user":"U26T99AQ4","text":"oh thx","ts":"1477655438.001223"},{"type":"message","user":"U26T99AQ4","text":"will rebase again","ts":"1477655448.001224"},{"type":"message","user":"U0ULK2JPP","text":"it was a test file in ledger\u2026 you may be fine","ts":"1477655474.001225"},{"type":"message","user":"U26T99AQ4","text":"ah ok","ts":"1477655484.001226"},{"type":"message","user":"U0ULK2JPP","text":"we need to look at the functions in protos\/utils and fix them for rigor","ts":"1477655532.001227"},{"type":"message","user":"U0ULK2JPP","text":"especially around crypto usage","ts":"1477655541.001228"},{"type":"message","user":"U0ULK2JPP","text":"I have completely ignored signature etc","ts":"1477655552.001229"},{"type":"message","user":"U0ULK2JPP","text":"but good news is they are all in one package protos\/utils","ts":"1477655574.001230"},{"type":"message","user":"U0ULK2JPP","text":"and then we need to revisit comments from <@U0KN2SSKE> last time around regarding naming \u2026","ts":"1477655610.001231"},{"type":"message","user":"U0ULK2JPP","text":"<@U0ZR63HLK> <@U26T99AQ4> ^^^","ts":"1477655630.001232"},{"type":"message","user":"U26T99AQ4","text":"I recall a discussion around TransactionHeader -&gt; Header","ts":"1477655682.001233"},{"type":"message","user":"U0ZR63HLK","text":"aha, okay","ts":"1477655682.001234"},{"type":"message","user":"U26T99AQ4","text":"was there anything else?","ts":"1477655686.001235"},{"type":"message","user":"U0ULK2JPP","text":"let me check","ts":"1477656154.001236"},{"type":"message","user":"U0ULK2JPP","text":"<@U26T99AQ4> I think that was it but we probably need to get together and hash 2 things (1)possible  consolidation of structures proposed by <@U0XPR4NP4> in <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1965\/> with all the folks in the discussion (see yesterdays chat around this above) and (2) flows for CONFIG transaction (this likely will have impact on the protos too)","ts":"1477656555.001237"},{"type":"message","user":"U0XR6J961","text":"i feel my remark about not using protobufs for persistent data structures is being ignored","ts":"1477664749.001238"},{"type":"message","user":"U0PB67X4K","text":"<@U0ZR63HLK> - can you rebase <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2029\/> (and perhaps the change sets which come after it)","ts":"1477665009.001239"},{"type":"message","user":"U0ZR63HLK","text":"sure","ts":"1477665033.001240"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> I'm not opposed to switching to another structure, I just have no experience with ASN.1 or how to define it in a schema-like fashion (like protobuf), which is why I submitted my work on top of protobuf as it was the path of least resistance","ts":"1477665118.001241"},{"type":"message","user":"U0XR6J961","text":"you just define a go structure","ts":"1477665134.001242"},{"type":"message","user":"U0XR6J961","text":"and voila, marshal\/unmarshal with ASN.1","ts":"1477665152.001243"},{"type":"message","user":"U0PB67X4K","text":"although we do need to support other languages besides for Go","ts":"1477665198.001244"},{"type":"message","user":"U0XPR4NP4","text":"How about doing something like a SignedMessage, where you have a payload (a structure) and a signature.  How do you know what bytes to check the signature over, do we then need to remarshal?  (So essentially, the path would be.  Unmarshal outer struct, read signature field, re-marshal inner struct, verify? If so, that also doesn't seem extremely elegant)","ts":"1477665288.001245"},{"type":"message","user":"U0XR6J961","text":"the GO ASN.1 parser allows you to have a `DataBytes` field (or similar name)","ts":"1477665407.001246"},{"type":"message","user":"U0XR6J961","text":"where it stuffs in the bytes that filled the structure","ts":"1477665424.001247"},{"type":"message","user":"U0XPR4NP4","text":"Oh, interesting.  Personally, I think ASN.1 sounds like a good idea, but so much of the system is built on protobuf, I'm not sure if its use would be deemed too confusing.","ts":"1477665584.001248"},{"type":"message","user":"U0XR6J961","text":"well now is really the time to decide and do it","ts":"1477665656.001249"},{"type":"message","user":"U0PB67X4K","text":"well it could be interesting to TRY to mix them in - given that almost all of our higher order protobuf messages end up simply carrying bytes in order to address non-deterministic serialization","edited":{"user":"U0PB67X4K","ts":"1477665680.000000"},"ts":"1477665667.001250"},{"type":"message","user":"U0PB67X4K","text":"so perhaps protobuf as part of GRPC is nice for the \"protocol\" messages \/ envelopes and when we end up using \"bytes\" we move to ASN1?","ts":"1477665732.001252"},{"type":"message","user":"U0PB67X4K","text":"potentially means having 2 sets on encoders \/ decoders as part of any library interacting with the GRPC services, but that's not so bad","ts":"1477665780.001253"},{"type":"message","user":"U0XPR4NP4","text":"Looks like there is a js implementation out there, <https:\/\/github.com\/PeculiarVentures\/ASN1.js> the license looks a little goofy because it's nonstandard, but it's the one most links seem to point to","attachments":[{"service_name":"GitHub","title":"PeculiarVentures\/ASN1.js","title_link":"https:\/\/github.com\/PeculiarVentures\/ASN1.js","text":"ASN1.js - ASN1js is a pure JavaScript library implementing a full BER ASN.1 decoder.","fallback":"GitHub: PeculiarVentures\/ASN1.js","thumb_url":"https:\/\/avatars2.githubusercontent.com\/u\/8702988?v=3&s=400","from_url":"https:\/\/github.com\/PeculiarVentures\/ASN1.js","thumb_width":132,"thumb_height":132,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1477665842.001254"},{"type":"message","user":"U0PB67X4K","text":"we are already dealing with ASN1 anyway today in the NodeJS SDK for the crypto stuff","ts":"1477665866.001256"},{"type":"message","user":"U0PB67X4K","text":"(certificates, etc)","ts":"1477665876.001257"},{"type":"message","user":"U0XPR4NP4","text":"Ah okay, I suppose X.509 is all ASN.1","ts":"1477665878.001258"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1477665889.001259"},{"type":"message","user":"U26T99AQ4","text":"fwiw: I completely agree with <@U0XR6J961> : stuff that is persisted should be serialized in standard ways. This way, any other implementation will at least be able to read the ledger","ts":"1477665915.001260"},{"type":"message","user":"U26T99AQ4","text":"also: the crypto world with x509 has embraced ASN.1","ts":"1477665931.001261"},{"type":"message","user":"U0XPR4NP4","text":"<@U26T99AQ4> I'm not sure I entirely agree that protobuf is not 'standard'.  It's well documented and standardized with lots of different language implementations, but I would agree its non-determinstic marshaling nature makes it poorly suited for crypto work","ts":"1477666016.001262"},{"type":"message","user":"U26T99AQ4","text":"good point - being standard is just one piece of the puzzle; deterministic marshalling is another equally important one","ts":"1477666064.001263"},{"type":"message","user":"U26T99AQ4","text":"ASN.1 seems to tick both boxes","ts":"1477666093.001264"},{"type":"message","user":"U26T99AQ4","text":"does anyone know how ASN.1 relates to protobufs when it comes to i) speed of un\/marshalling and ii) marshalling metadata overhead?","ts":"1477666124.001265"},{"type":"message","user":"U0XPR4NP4","text":"I think <@U0XR6J961> did a test, and ASN.1 was noticeably slower.  Whether it's enough that we care, or makes up for the nested unmarshaling of the protos, I'm not sure","ts":"1477666355.001266"},{"type":"message","user":"U0PB67X4K","text":"(funny - was about to basically say the same thing)","ts":"1477666388.001267"},{"type":"message","user":"U0ZR63HLK","text":"is there a clean way to patch the protobuf to have deterministic serialization?","ts":"1477666431.001268"},{"type":"message","user":"U0PB67X4K","text":"of course the nice thing about protobufs is that they do support a nice compatibility layer","ts":"1477666438.001269"},{"type":"message","user":"U0PB67X4K","text":"<@U0ZR63HLK> - the google stuff is deterministic today they just make no guarantee nor require it in their spec","ts":"1477666470.001270"},{"type":"message","user":"U0ULK2JPP","text":"regardless of what we end up using, just want to point out that there\u2019s encapsulation confined to protos\/utils and externals don\u2019t\/shouldn\u2019t deal with structure internals.  as long as we keep it that way it shouln\u2019t be too hard to move to any format","ts":"1477666489.001271"},{"type":"message","user":"U0ULK2JPP","text":"my way of saying we don\u2019t have to change immediately \u2026. and perhaps we could review <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2081\/> with that in mind ?","ts":"1477666562.001272"},{"type":"message","user":"U0ZR63HLK","text":"+1","ts":"1477666597.001273"},{"type":"message","user":"U0XPR4NP4","text":"Re determinism: I _think_ one of the ideas for protobufs is that they want to allow for messages to be built incrementally, rather than a `Marshal` on a completed structure, they want to support adding fields one at a time (in arbitrary order) to do the marshaling incrementally for applications where that makes sense.  Maybe I am making this up, but believe I read this somewhere.","edited":{"user":"U0XPR4NP4","ts":"1477666816.000000"},"ts":"1477666720.001274"},{"type":"message","user":"U0PB67X4K","text":"from some dude on stack overflow:\n```\nIn general, the same data will serialize in exactly the same way.\n\nHowever, this is not guaranteed by the protobuf specifications. For example, the following differences in encoding are allowable and must decode to the same result in all conforming libraries:\n\nEncoding fields in different order than the tag number order.\nEncoding packed fields as unpacked.\nEncoding integers as longer varint byte sequences than needed.\nEncoding same (non-repeated) field multiple times.\nProbably others.\n```","ts":"1477666894.001276"},{"type":"message","user":"U0PB67X4K","text":"`Note that most protobuf implementations (including the official ones) will always write protos in a canonical format as long as there are no unknown fields present.`","ts":"1477666943.001277"},{"type":"message","user":"U26T99AQ4","text":"<@U0PB67X4K> <@U0XPR4NP4> : is the information about \"what marshalling scheme was used for this chain\" even stored somewhere on the chain? should it be?","ts":"1477667461.001278"},{"type":"message","user":"U0XPR4NP4","text":"<@U26T99AQ4> That's a tricky one, since we'd have to define an encoding for how to store the encoding. (To your original question, no, not stored anywhere)","edited":{"user":"U0XPR4NP4","ts":"1477667648.000000"},"ts":"1477667598.001279"},{"type":"message","user":"U26T99AQ4","text":"in some crypto schemes, the encoding of \"what crypto algorithm was used to encrypt me\" was the code of the cipher itself. It's a way, perhaps not the best. I believe it was done in the context of \"crypto that you can decrypt in NN years from now\"","ts":"1477667702.001281"},{"type":"message","user":"U0XPR4NP4","text":"I still feel like you need some foreknowledge.  If it's code, how is it encoded? At some point, you have to pick an initial representation","ts":"1477667826.001282"},{"type":"message","user":"U26T99AQ4","text":"true that","ts":"1477667839.001283"},{"type":"message","user":"U26T99AQ4","text":"so we should just assume that the encoding is known, and fixed forever for the entire chain","ts":"1477667859.001284"},{"type":"message","user":"U0ZR63HLK","text":"yes, the initial representation is what is provided by a Turing machine :slightly_smiling_face:","edited":{"user":"U0ZR63HLK","ts":"1477668035.000000"},"ts":"1477668024.001285","reactions":[{"name":"joy","users":["U26T99AQ4"],"count":1}]},{"type":"message","user":"U0ZR63HLK","text":"also that is problematic, actually :disappointed:","ts":"1477668144.001287"},{"type":"message","user":"U0ZR63HLK","text":"we need a trusted setup assumption then","edited":{"user":"U0ZR63HLK","ts":"1477668216.000000"},"ts":"1477668204.001288"},{"type":"message","user":"U0XPR4NP4","text":"I would think making an assumption that the chain encoding can never change drastically simplifies our life.  I'm probably just ignorant of their existence, but I'm not sure of any other sort of data stream which changes the base encoding midway through.  I would think if we wanted to switch to a new format, you would want to re-encode the whole chain.","ts":"1477668217.001290"},{"type":"message","user":"U0ZR63HLK","text":"+1","ts":"1477668238.001291"},{"type":"message","user":"U0ZR63HLK","text":"in that case, an hard fork is the way to go","edited":{"user":"U0ZR63HLK","ts":"1477668261.000000"},"ts":"1477668248.001292","reactions":[{"name":"+1","users":["U26T99AQ4"],"count":1}]},{"type":"message","user":"U0KN2SSKE","text":"<@U0XR6J961> <@U0XPR4NP4> re ASN.1, I\u2019ve found this interesting thread <https:\/\/groups.google.com\/forum\/#!topic\/protobuf\/eNAZlnPKVW4>\n&gt; Protobuf to be a simpler, cleaner, smaller, faster, more robust and easier-to-understand than ASN.1\n&gt; memory allocations, thus both speeding performance and decreasing the memory footprint of our product by 50-70%","ts":"1477680100.001294"},{"type":"message","user":"U0XPR4NP4","text":"<@U0PB67X4K> <@U0KN2SSKE> <@U0ZR63HLK> <@U26T99AQ4> <@U1BC5A0F9> <@U0XQ35CDD> Per the discussion from earlier, the orderer is going to define a base transaction proto which the fabric can extend.  For the base transaction\/message\/something type, we need:\n\n1. A message which contains a signature and a thing that signature is over.  In the fabric protos, this is a `SignedTransaction`\n2. A message which represents the 'thing' that the signature is over, this should include a payload and a header, this is similar to, but slightly different from `Transaction`\/`TransactionAction` because it assumes and requires a single header, which is at the top level and not nested more deeply.\n3. A message which is the header to prevent replay attacks and provide the identity for the signing cert.\n\nWe need to pick a name for these things\n\n1. <@U0ULK2JPP> proposes the name `Envelope`, the changeset I had pushed called this `SignedData`, I'd also suggest `SignedMessage`\n2. <@U0ULK2JPP> proposes the name `Payload`, the changeset I had pushed called this `SignableData`, I'd also suggest `SignableMessage` or `Message`\n3. <@U0ULK2JPP> proposes the name `Header`, the changeset I pushed called this `SignatureHeader`, I'd also suggest `MessageHeader`\n\nPersonally, I'm fine with <@U0ULK2JPP>'s proposed names, the names already in the changeset, or moving to the alternate `Message` based ones, or even some other names.  But, I wanted to try to get the names right so that I can minimize the amount of rebasing required.  Opinions?","ts":"1477685481.001295"},{"type":"message","user":"U0KN2SSKE","text":"Message would collide with another general message struct that peer has.  I am fine with murali's","ts":"1477689225.001296"},{"type":"message","user":"U26T99AQ4","text":"<@U0XPR4NP4> sorry I couldn't join the rest of the discussion yesterday. Let me see if I understand correctly. How far would this mod of fabric.proto go towards accommodating your requirements?\n```\nmessage SignedTransaction {\n\tbytes transactionBytes = 1;\n\tbytes signature = 2;\n}\n\nmessage Transaction2 {\n\tenum Type {\n\t    UNDEFINED = 0;\n\t    CONFIG = 1;\n\t    CHAINCODE = 2;\n\t}\n\t\/\/ controls how this transaction has been assembled. If it's CHAINCODE\n\t\/\/ it has been assembled via the proposal\/response\/endorsement flow\n\tType type = 1;\n\tint32 version = 2;\n\tgoogle.protobuf.Timestamp timestamp = 3;\n\n\t\/\/ payload is:\n\t\/\/  - an array of TransactionAction if type == CHAINCODE\n\t\/\/  - anything you want it to be if type == CONFIG\n\tbytes payload = 3;\n}\n```","edited":{"user":"U26T99AQ4","ts":"1477728438.000000"},"ts":"1477726920.001297"},{"type":"message","user":"U26T99AQ4","text":"you'll notice that there are now two type fields:\n1) in `Transaction2` in the code box up there \n2) in `Header` (`protos\/fabric_transaction_header.proto`)\n\nIf the type field of `Transaction2` is `CHAINCODE`, it means that the message is to be interpreted as one that has followed the proposal\/response\/endorsement flow, and hence will have a `TransactionAction` with endorsements etc. If that type is different, it signifies that a different flow was followed (which is presumably what you wanted for the config work). \n\nThe second type field in `Header` controls what specific \"thing\" has been endorsed via the proposal\/response\/endorsement flow.\n\nYour thoughts?","edited":{"user":"U26T99AQ4","ts":"1477728333.000000"},"ts":"1477728249.001299"},{"type":"message","user":"U2MCH9EEB","text":"refer to the SignedTranasaction  data structure ,looks it only supports single signature","ts":"1477731129.001304"},{"type":"message","user":"U2MCH9EEB","text":"will consider to support multiple signs?","ts":"1477731162.001305"},{"type":"message","user":"U26T99AQ4","text":"the \"normal\" proposal\/response\/endorsement flow does support multiple signature to the extent that multiple endorsements may be present in the tx payload. In that case though, the tx is still only signed by a single entity, which is the one that requested the action in the first place by issuing (and signing) the proposal message. What it means for a transaction to be signed by multiple entities is not yet clear (at least to me), nor is the use-case that needs it","ts":"1477737732.001306"},{"type":"message","user":"U26T99AQ4","text":"<@U2MCH9EEB> ^^","ts":"1477737741.001307"},{"type":"message","user":"U0XPR4NP4","text":"<@U26T99AQ4> Honestly, extending the transaction as you described makes things harder for me to wrap my head around, and makes the format more complicated which is I think, the wrong direction. I think it makes more sense to start from the simple envelope message described above. Although I think it would cause some duplication, you could embed the entire fabric transaction in its payload if you wanted. But from a base transaction point of view, a payload, a header, and a signature over the two seems standard, intuitive, and easy to extend. ","ts":"1477752838.001308"},{"type":"message","user":"U0PB67X4K","text":"<@U0XPR4NP4> - forgetting about the actual format for a moment, can we discuss the the flow of \"messages\" in and out of the ordering service for a minute  (probably a rehash but I think I am missing something).\n\nHere's what I mean:\n\n1) In simplest terms, the ordering service implements two \"APIs\" -   broadcast and deliver - which are implemented as GRPC services\n\n2) broadcast \/ delivery are partitioned into \"channels\" - i.e a broadcast client (\"producer\") specifies a channel, the ordering service orders (and batches) broadcast messages by channel and then delivers them to deliver clients (\"consumers\") who have asked for messages on that channel\n\n3) the ordering service supports setting access control lists on \"channels\" for both \"broadcast\" and \"delivery\"\n\n4) the ordering service will \"enforce\" access control by extracting the certificate used to sign a broadcast message and\/or deliver request\n\nHopefully at a high level the above is (mostly) correct\n\nSo:\n\n1) A broadcast client (\"producer\") needs to \"sign\" the message it sends to the ordering service.  The ordering service can verify the signature and use the signing certificate to check that the sender was allowed to broadcast to the specified channel.  The \"producer\" would need to provide the channel, a payload, signature and its public certificate.   Ideally the ordering service does not care at all about what's in the payload.    \n\nLet's say the ordering service is set to use a batch size of 50 for a given channel.   So after it receives 50 verified\/authorized broadcast messages, it will create a batch of those and \"deliver\" to authorized \"consumers\".   \n\nQUESTION:   what is actually in the batch?  assuming the simple \"channel, payload, signature&lt;payload&gt;,signer-certificate\" content, is it batching the whole thing or is it actually simply creating batches of the \"payload\" ?","edited":{"user":"U0PB67X4K","ts":"1477763289.000000"},"ts":"1477763201.001309"},{"type":"message","user":"U0PB67X4K","text":"(notice at this point I don't care what's actually in the &lt;payload&gt;)","ts":"1477763379.001311"},{"type":"message","user":"U0XPR4NP4","text":"&gt; what is actually in the batch? \n\nMy inclination is to include exactly the messages that came in into the batch, not just the payloads ","ts":"1477764295.001312"},{"type":"message","user":"U0PB67X4K","text":"got it","ts":"1477765158.001313"},{"type":"message","user":"U0PB67X4K","text":"I am good","ts":"1477765160.001314"},{"type":"message","user":"U0PB67X4K","text":"your partner in crime set me straight  :wink:","ts":"1477765348.001315","reactions":[{"name":"+1","users":["U0XPR4NP4"],"count":1}]},{"type":"message","user":"U0ULK2JPP","text":"created <https:\/\/jira.hyperledger.org\/browse\/FAB-913> for addressing remaining changes to protos","ts":"1477930269.001316"},{"type":"message","user":"U0ULK2JPP","text":"please do edit\/correct","ts":"1477930311.001317"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ULK2JPP> <@U26T99AQ4> <@U0ZR63HLK> <@U0KN2SSKE> As requested, here is the ordering service converted to the simpler proto, with the top level message in its own proto file and the names per Murali <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2075\/>","ts":"1477932372.001318"},{"type":"message","user":"U0ZR63HLK","text":"great, thanks","ts":"1477932417.001319"},{"type":"message","user":"U0XQ35CDD","text":"<@U0XPR4NP4> Should I pull this one for my work, or should I hold off a bit more? (Looks like a good RC?)","ts":"1477932721.001320"},{"type":"message","user":"U0ULK2JPP","text":"so <@U0XQ35CDD> \u2026 was going to ask <@U0XPR4NP4> we\u2019d need to consolidate with fabric\/protos\/ right ?","ts":"1477932750.001321"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XQ35CDD> I'd recommend pulling this and working on top of it, I don't anticipate the format changing after the consensus achieved Friday","ts":"1477932839.001322"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ULK2JPP> Yes, I'd love to see the fabric protos consolidate on top of this new message, for <@U0XQ35CDD> this shouldn't matter (since he is not working with those messages), but I do think consolidating the fabric messages sooner rather than later will make for much less rebasing","ts":"1477932911.001323"},{"type":"message","user":"U0XQ35CDD","text":"Right, I'm focusing strictly on the orderer side of things <@U0ULK2JPP>,  so I'm good. Thanks <@U0XPR4NP4>, will do.","ts":"1477932968.001324"},{"type":"message","user":"U0XR6J961","text":"so we're still keeping our options open for protobufs vs asn.1?","ts":"1477933523.001325"},{"type":"message","user":"U0XR6J961","text":"or do we have a definite format?","ts":"1477933531.001326"},{"type":"message","user":"U0XPR4NP4","text":"Per <@U0KN2SSKE> making the switch, even if it slows us down by a week, is too expensive for now.  The best we can do is try to write things to minimize the headache of switching later if we decide to.","ts":"1477933633.001327"},{"type":"message","user":"U0XR6J961","text":"what does it mean, for now","ts":"1477933698.001328"},{"type":"message","user":"U0XR6J961","text":"before MVP?","ts":"1477933703.001329"},{"type":"message","user":"U0XR6J961","text":"i.e. 1.0?","ts":"1477933714.001330"},{"type":"message","user":"U0XR6J961","text":"i've been running into inconveniences with that whole bytes thing","ts":"1477933781.001331"},{"type":"message","user":"U0XR6J961","text":"because i keep having to unmarshal the bytes when i want to access a field","ts":"1477933800.001332"},{"type":"message","user":"U0XPR4NP4","text":"Per <@U0ULK2JPP> we can write simple wrappers to largely avoid this, and facilitate the switch to another encoding down the line","ts":"1477933878.001333"},{"type":"message","user":"U0XPR4NP4","text":"As far as time frames go, I'm not 100% certain, I assume it is a 'until we have time or cause to revisit it'","ts":"1477933961.001334"},{"type":"message","user":"U0XR6J961","text":"lol","ts":"1477934037.001335"},{"type":"message","user":"U0XR6J961","text":"just no decisions","ts":"1477934047.001336"},{"type":"message","user":"U0ULK2JPP","text":"<@U0XR6J961> currently there are wrappers in fabric\/protos\/utils which ledger, endorser, peer etc access. As long as we are careful not to let marshal\/unmarshal bleed outside, we can revisit this. There are cons too\u2026 performance from what I understand.","edited":{"user":"U0ULK2JPP","ts":"1477934236.000000"},"ts":"1477934220.001337"},{"type":"message","user":"U0ULK2JPP","text":"so though decisions :slightly_smiling_face: at least some preparation","ts":"1477934266.001339"},{"type":"message","user":"U0XR6J961","text":"just make a decision","ts":"1477934275.001340"},{"type":"message","user":"U0XR6J961","text":"not a non-decision decision","ts":"1477934286.001341"},{"type":"message","user":"U2L9F7VL1","text":"late to the party here but fwiw we decided to go with the newer (and nicer in our opinion) OER encoding and ASN.1 for the Interledger project. ASN.1 gives you unambiguous data structures with deterministic encoded content and OER encoding is more flexible and generally simpler and nicer to use than PER and more compact than BER. It\u2019s worth noting though that you can affect your encoding or decoding performance by simply designing the messages differently. Choosing an specific encoding format doesn\u2019t magically make streaming encoders\/decoders faster :slightly_smiling_face:","ts":"1477947358.001342","reactions":[{"name":"ok_hand","users":["U0XQ35CDD"],"count":1}]},{"type":"message","user":"U2L9F7VL1","text":"<http:\/\/www.oss.com\/asn1\/resources\/books-whitepapers-pubs\/Overview%20of%20OER.pdf>","ts":"1477947360.001343"},{"type":"message","user":"U0PB67X4K","text":"^^^ interesting (especially the OER)","ts":"1477947411.001344"},{"type":"message","user":"U2L9F7VL1","text":"bad news is you may have to write some of the encoding\/decoding stuff yourself","ts":"1477947445.001345"},{"type":"message","user":"U2L9F7VL1","text":"good news is that a lot has been done by the interledger contributors already :slightly_smiling_face:","ts":"1477947471.001346"},{"type":"message","user":"U2L9F7VL1","text":"<https:\/\/github.com\/interledgerjs\/oer-utils>","attachments":[{"service_name":"GitHub","title":"interledgerjs\/oer-utils","title_link":"https:\/\/github.com\/interledgerjs\/oer-utils","text":"oer-utils - Tools for OER parsing and serialization","fallback":"GitHub: interledgerjs\/oer-utils","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/22465593?v=3&s=400","from_url":"https:\/\/github.com\/interledgerjs\/oer-utils","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1477947511.001347"},{"type":"message","user":"U2L9F7VL1","text":"Last comment on the encoding subject is that we are also looking at CBOR which is getting a lot of traction lately and is being used in a number of projects at IETF","ts":"1477947797.001349"},{"type":"message","user":"U0ZR63HLK","text":"<@U0XPR4NP4> So, if I got correctly atomicbroadcast.Payload looks like the protos.TransactionAction","ts":"1477995304.001350"},{"type":"message","user":"U0ZR63HLK","text":"now I understand your proposal of starting from the configuration and then generalize.","ts":"1477995341.001351"},{"type":"message","user":"U0ZR63HLK","text":"Again, if I get it correctly, you wanted to have atomicbroadcast.Payload as the most basic transaction unit","ts":"1477995373.001352"},{"type":"message","user":"U0ZR63HLK","text":"and then potentially compose this to have more complex transactions, right?","ts":"1477995393.001353"},{"type":"message","user":"U26T99AQ4","text":"A potenital approach that <@U0ULK2JPP>, <@U0XPR4NP4> and I discussed was to converge on\n```\nEnvelope\n|\\_ Signature \n \\_ Payload\n    |\\_ TransactionHeader (MESSAGE = 0; CONFIGURATION_TRANSACTION = 1; CONFIGURATION_ITEM = 2; ENDORSER_TRANSACTION = 3;)\n     \\_ Transaction\n         \\_ TransactionAction (1...n)\n            |\\_ ActionHeader\n             \\_ ChaincodeActionPayload\n```","edited":{"user":"U26T99AQ4","ts":"1477997378.000000"},"ts":"1477997087.001354"},{"type":"message","user":"U26T99AQ4","text":"for the normal proposal\/endorsement flow","ts":"1477997117.001355"},{"type":"message","user":"U26T99AQ4","text":"and\n```\nEnvelope\n|\\_ Signature \n \\_ Payload\n    |\\_ TransactionHeader (MESSAGE = 0; CONFIGURATION_TRANSACTION = 1; CONFIGURATION_ITEM = 2; ENDORSER_TRANSACTION = 3;)\n     \\_ Configuration\n```\nfor configuration messages","edited":{"user":"U26T99AQ4","ts":"1477997384.000000"},"ts":"1477997174.001356"},{"type":"message","user":"U26T99AQ4","text":"`TransactionHeader` might look like\n```\nmessage TransactionHeader {\n\tint32 version = 1;\n\tType type = 2;\n\tbytes creator = 3;\n\tbytes chainID = 4;\n}\n```","edited":{"user":"U26T99AQ4","ts":"1477997264.000000"},"ts":"1477997208.001357"},{"type":"message","user":"U26T99AQ4","text":"which is fine as far as the endorsement flow is concerned because it factors all fields that have to be common to all actions in a transaction","ts":"1477997254.001358"},{"type":"message","user":"U0ZR63HLK","text":"which header will you use then in the Proposal?","ts":"1478003537.001362"},{"type":"message","user":"U26T99AQ4","text":"One possible way would be\n```\nSignedProposal\n|\\_ Signature                                    (signature on the Proposal message by the creator specified in the header)\n \\_ Proposal\n    |\\_ ProposalHeader                           (the header for this proposal containing both TransactionHeader and ActionHeader)\n    |\\_ ChaincodeProposalPayload                 (the payload for this proposal)\n     \\_ ChaincodeAction                          (the actions for this proposal - optional for a proposal)\n```\nwhere\n```\nmessage ProposalHeader {\n   bytes txHeaderBytes = 1;\n   bytes actHeaderBytes = 2;\n}\n```","edited":{"user":"U26T99AQ4","ts":"1478003696.000000"},"ts":"1478003624.001363"},{"type":"message","user":"U26T99AQ4","text":"and\n```\nmessage TransactionHeader {\n\tint32 version = 1;\n\tType type = 2;\n\tbytes creator = 3;\n\tbytes chainID = 4;\n}\n\nmessage ActionHeader {\n\tint32 version = 1;\n\tgoogle.protobuf.Timestamp timestamp = 2;\n\tType type = 3;\n\tbytes nonce = 4;\n\tbytes extensions = 5;\n}\n```","ts":"1478003654.001364"},{"type":"message","user":"U0ZR63HLK","text":"+1","ts":"1478005385.001366"},{"type":"message","user":"U0XPR4NP4","text":"Sounds like everyone's on board with this new scheme then?","ts":"1478006025.001367"},{"type":"message","user":"U0ZR63HLK","text":"yeah yeah :slightly_smiling_face:","ts":"1478006070.001368"},{"type":"message","user":"U26T99AQ4","text":"+1","ts":"1478006113.001369"},{"type":"message","user":"U26T99AQ4","text":"has <@U0KN2SSKE> weighed in?","ts":"1478006135.001370"},{"type":"message","user":"U26T99AQ4","text":"and I guess <@U0PB67X4K> is okay with it too?","ts":"1478006171.001371"},{"type":"message","user":"U0ULK2JPP","text":"+0.5 \u2026 only because I think we\u2019ll know more only when we try this. But definitely close IMO","ts":"1478006419.001372"},{"type":"message","user":"U0ZR63HLK","text":"btw, <@U26T99AQ4>, may you clarify this: TransactionHeader (MESSAGE = 0; CONFIGURATION_TRANSACTION = 1; CONFIGURATION_ITEM = 2; ENDORSER_TRANSACTION = 3; )","ts":"1478010079.001373","reactions":[{"name":"+1","users":["U1BC5A0F9"],"count":1}]},{"type":"message","user":"U0ZR63HLK","text":"what's the difference between CONFIGURATION_TX and CONFIGURATION_ITEM, for example?","ts":"1478010101.001374"},{"type":"message","user":"U26T99AQ4","text":"that's meant to be the enumeration of types","ts":"1478010152.001375"},{"type":"message","user":"U26T99AQ4","text":"chaincodes will have type equal to ENDORSER_TRANSACTION","ts":"1478010167.001376"},{"type":"message","user":"U26T99AQ4","text":"whereas config will have one of CONFIGURATION_TRANSACTION, CONFIGURATION_ITEM and possibly more","ts":"1478010181.001377"},{"type":"message","user":"U1BC5A0F9","text":"and what is the diff between configuration-transaction, and configuration-item?","ts":"1478010224.001378"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZR63HLK> I had a comment on the changeset about documenting this further.  `CONFIGURATION_TRANSACTION` is intended to be made up of `CONFIGURATION_ITEM`s.  I did not document extensively for the moment, because the usage\/implementation of this was not in the changeset","ts":"1478010225.001379"},{"type":"message","user":"U0XPR4NP4","text":"The idea being that each configuration item will need to be a set of signed data, and the whole configuration transaction is made up of many of these","ts":"1478010278.001380"},{"type":"message","user":"U26T99AQ4","text":"<@U0XPR4NP4> so you just need one type and not two then? if so, sorry about the confusion","ts":"1478010307.001381"},{"type":"message","user":"U1BC5A0F9","text":"so, this would be a way to atomically commit a bunch of config changes that may need endorsement from different or same entities?","edited":{"user":"U1BC5A0F9","ts":"1478010382.000000"},"ts":"1478010345.001382"},{"type":"message","user":"U0XPR4NP4","text":"<@U1BC5A0F9> Yes\n<@U26T99AQ4> a `CONFIGURATION_TRANSACTION` would have a payload data of a repeated number of `Envelopes` which would all be of type `CONFIGURATION_ITEM` which would have a payload data of the actual config object","ts":"1478010390.001384"},{"type":"message","user":"U0ZR63HLK","text":"got it, okay!","ts":"1478010391.001385"},{"type":"message","user":"U0ZR63HLK","text":"aha, nested payloads?","ts":"1478010406.001386"},{"type":"message","user":"U0XPR4NP4","text":"Right","ts":"1478010439.001387"},{"type":"message","user":"U1BC5A0F9","text":"So would the configuration item play a role similar to \"action field\" in transaction related to chaincodes?","ts":"1478010453.001388"},{"type":"message","user":"U0ZR63HLK","text":"isn't it a lot of unmashalling work?","ts":"1478010472.001389"},{"type":"message","user":"U0XQ35CDD","text":"Where do I see the latest Block definition?","ts":"1478010561.001390"},{"type":"message","user":"U0XPR4NP4","text":"<@U1BC5A0F9> Somewhat, though all it needs is endorsements\n<@U0ZR63HLK> Possibly, though I'm not sure of a way to do it less so.  But reconfiguration should be relatively infrequent, it does not need to be an especially high speed path.","ts":"1478010566.001391"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XQ35CDD> In `ab.proto` in the code you pulled with the new tran format","ts":"1478010588.001392"},{"type":"message","subtype":"file_share","text":"<@U0XQ35CDD|kostas> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/kostas\/F2WTQ68JE\/screen_shot_2016-11-01_at_10.30.31.png|Screen Shot 2016-11-01 at 10.30.31> and commented: It was hidden here.","file":{"id":"F2WTQ68JE","created":1478010653,"timestamp":1478010653,"name":"Screen Shot 2016-11-01 at 10.30.31.png","title":"Screen Shot 2016-11-01 at 10.30.31","mimetype":"image\/png","filetype":"png","pretty_type":"PNG","user":"U0XQ35CDD","editable":false,"size":56285,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2WTQ68JE\/screen_shot_2016-11-01_at_10.30.31.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2WTQ68JE\/download\/screen_shot_2016-11-01_at_10.30.31.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_64":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2WTQ68JE-256ad4f95a\/screen_shot_2016-11-01_at_10.30.31_64.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_80":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2WTQ68JE-256ad4f95a\/screen_shot_2016-11-01_at_10.30.31_80.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2WTQ68JE-256ad4f95a\/screen_shot_2016-11-01_at_10.30.31_360.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360_w":360,"thumb_360_h":136,"thumb_480":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2WTQ68JE-256ad4f95a\/screen_shot_2016-11-01_at_10.30.31_480.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_480_w":480,"thumb_480_h":181,"thumb_160":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2WTQ68JE-256ad4f95a\/screen_shot_2016-11-01_at_10.30.31_160.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2WTQ68JE-256ad4f95a\/screen_shot_2016-11-01_at_10.30.31_720.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720_w":720,"thumb_720_h":272,"thumb_960":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2WTQ68JE-256ad4f95a\/screen_shot_2016-11-01_at_10.30.31_960.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_960_w":960,"thumb_960_h":363,"image_exif_rotation":1,"original_w":984,"original_h":372,"permalink":"https:\/\/hyperledgerproject.slack.com\/files\/kostas\/F2WTQ68JE\/screen_shot_2016-11-01_at_10.30.31.png","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2WTQ68JE-55b73d8b95","channels":["C2GE7GXM1"],"groups":[],"ims":[],"comments_count":1,"initial_comment":{"id":"Fc2WT2LYHJ","created":1478010653,"timestamp":1478010653,"user":"U0XQ35CDD","is_intro":true,"comment":"It was hidden here.","channel":""}},"user":"U0XQ35CDD","upload":true,"display_as_bot":false,"username":"<@U0XQ35CDD|kostas>","bot_id":null,"ts":"1478010656.001393"},{"type":"message","user":"U26T99AQ4","text":"<@U0XPR4NP4> will you have nonces inside your `Configuration` message somewhere to protect against replays?","ts":"1478010676.001394"},{"type":"message","user":"U0XPR4NP4","text":"<@U26T99AQ4> Yes, I intend to use sequence numbers","ts":"1478010706.001395"},{"type":"message","user":"U0XPR4NP4","text":"Would like to discuss the replay potentials here more generally too for the top level message and how we detect it inexpensively","ts":"1478010780.001396"},{"type":"message","user":"U1BC5A0F9","text":"<@U26T99AQ4>, <@U0XPR4NP4>: so instead of having the transaction header content as part of the action header (included in each transaction action) you made transaction header sort of common header shifted higher up. Am I correct to say this?","ts":"1478010784.001397"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I would say so","ts":"1478010804.001398"},{"type":"message","user":"U0XPR4NP4","text":"I think we will likely need a timestamp or nonce or some other thing at the top level for replay","ts":"1478010826.001399"},{"type":"message","user":"U26T99AQ4","text":"that's tricky for chaincodes","ts":"1478010841.001400"},{"type":"message","user":"U26T99AQ4","text":"each action must have a common \"top-level\" header","ts":"1478010856.001401"},{"type":"message","user":"U26T99AQ4","text":"if there's a nonce in there, it must be repeated","ts":"1478010867.001402"},{"type":"message","user":"U26T99AQ4","text":"which is no big deal from a security perspective because the internal header will guarantee freshness","ts":"1478010883.001403"},{"type":"message","user":"U0ZR63HLK","text":"mhhh","ts":"1478010885.001404"},{"type":"message","user":"U1BC5A0F9","text":"but it can be chosen by the \"submitting peer\"","ts":"1478010893.001405"},{"type":"message","user":"U1BC5A0F9","text":"or the first peer that is asked","ts":"1478010899.001406"},{"type":"message","user":"U26T99AQ4","text":"the client can choose that for that matter","ts":"1478010911.001407"},{"type":"message","user":"U1BC5A0F9","text":"and adopted by the rest, no?","ts":"1478010912.001408"},{"type":"message","user":"U1BC5A0F9","text":"that too","ts":"1478010919.001409"},{"type":"message","user":"U26T99AQ4","text":"<@U0ZR63HLK> why\n&gt; mhhh\ndid you have some concerns?","ts":"1478010989.001410"},{"type":"message","user":"U2L9F7VL1","text":"<@U0XPR4NP4> are you available to chat sometime about FAB-704? I watched the video and think we may be trying to solve a similar problem and could collaborate.","ts":"1478011059.001411"},{"type":"message","user":"U2L9F7VL1","text":"really depends on the scope you\u2019re working within","ts":"1478011097.001412"},{"type":"message","user":"U0XPR4NP4","text":"<@U2L9F7VL1> Absolutely, am on a call right now, and have another 12-1 ET, but am free otherwise","ts":"1478011115.001413"},{"type":"message","user":"U2L9F7VL1","text":"<@U0XPR4NP4> cool, will take this to PM to setup a good time","ts":"1478011152.001414"},{"type":"message","user":"U1BC5A0F9","text":"Btw, <@U0XPR4NP4>, <@U26T99AQ4>, is there a reason why you need to specify a configuration item structure so clearly in the protobuf instead of, e.g., having it contain a jason format representation of config changes?","edited":{"user":"U1BC5A0F9","ts":"1478011303.000000"},"ts":"1478011288.001415"},{"type":"message","user":"U0XPR4NP4","text":"<@U1BC5A0F9> I'm not sure what you mean.  The configuration structure was made to withstand replay and validate against signature policies, and is otherwise essentially key\/value pairs where the key is a string, and the value is arbitrary bytes.","ts":"1478011529.001417"},{"type":"message","user":"U0XR6J961","text":"so values are opaque?","ts":"1478011623.001418"},{"type":"message","user":"U0XR6J961","text":"and untyped?","ts":"1478011628.001419"},{"type":"message","user":"U0XPR4NP4","text":"For now, yes.","ts":"1478011656.001420"},{"type":"message","user":"U0XPR4NP4","text":"They do have a type","ts":"1478011662.001421"},{"type":"message","user":"U0XPR4NP4","text":"But only a high level service type, like \"This is fabric config\" or \"This is kafka config\"","ts":"1478011678.001422"},{"type":"message","user":"U0XPR4NP4","text":"But the mapping of keys to underlying data types is not defined by the proto","ts":"1478011702.001423"},{"type":"message","user":"U0XPR4NP4","text":"For `Policy` type config, the structure is well defined in the proto","ts":"1478011736.001424"},{"type":"message","user":"U0XPR4NP4","text":"Nothing prevents us from more formally defining the config structures for other types, but it is generic for now.","ts":"1478011757.001425"},{"type":"message","user":"U1BC5A0F9","text":"Well replay has to do with the inclusion of a nonce, that to my understanding you discussed that is included in the tx header somewhere no?","edited":{"user":"U1BC5A0F9","ts":"1478011891.000000"},"ts":"1478011831.001426"},{"type":"message","user":"U0XQ35CDD","text":"There is a nonce in the payload's header (in the envelope).","ts":"1478011903.001428"},{"type":"message","user":"U26T99AQ4","text":"although replay attacks can occur at multiple levels. I could replay an entire tx, or only a `Configuration` message, or some signed message inside of it - we need to make sure that nothing can be replayed","ts":"1478011933.001429"},{"type":"message","user":"U1BC5A0F9","text":"But I am asking about the specific way you use to represent candidate configuration changes inside configurationitem.","ts":"1478011937.001430"},{"type":"message","user":"U0XPR4NP4","text":"Protecting the config from replay is relatively easy, by requiring that a sequence number is incremented, and rejecting old sequence numbers.  I'm more interested in preventing replay in a performant way for more generic transactions.  Because we have unlinkability between messages, it seems hard to do efficiently.","ts":"1478011961.001431"},{"type":"message","user":"U1BC5A0F9","text":"Well if the client wants to replay a transation, nothing can prevent him.","ts":"1478011970.001432"},{"type":"message","user":"U1BC5A0F9","text":"And since the client\/creator is the one signing the tx i think we are safe on this aspect no?","ts":"1478011989.001433"},{"type":"message","user":"U26T99AQ4","text":"I don't think there is a client in the case of config transaction","ts":"1478012019.001434"},{"type":"message","user":"U1BC5A0F9","text":"There has to be. The one triggering the config change.","ts":"1478012038.001435"},{"type":"message","user":"U0XPR4NP4","text":"<@U26T99AQ4> There is, there must be.  Someone must inject the new config into the system and sign this message","ts":"1478012042.001436"},{"type":"message","user":"U1BC5A0F9","text":"Unless you refer this is part of config item.","ts":"1478012059.001437"},{"type":"message","user":"U1BC5A0F9","text":"The signature that is, and creator.","ts":"1478012069.001438"},{"type":"message","user":"U26T99AQ4","text":"<@U0XPR4NP4> right, although I guess it wouldn't be a normal client of the system but more like an admin - but I get your point, there is a creator always","ts":"1478012123.001439"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I would expect often this would be some admin running a CLI tool, though in the channel creation case, it may be more automated","ts":"1478012159.001440","reactions":[{"name":"+1","users":["U26T99AQ4"],"count":1}]},{"type":"message","user":"U1BC5A0F9","text":"For replay attack, one would need to use epochs in transactions, as discussed in the past with Chet and <@U0ZR63HLK>, and <@U26T99AQ4>. Replays of transactions strictly speaking would not cause a huge issue due to version dependencies.","ts":"1478012262.001441"},{"type":"message","user":"U0XPR4NP4","text":"It is more of a DoS concern for me","ts":"1478012286.001442"},{"type":"message","user":"U1BC5A0F9","text":"For DoS, you may have epoch numbers in transactions (chosen again by the submitting peer) included in tx header and only allow tx-es with the appropriate epoch number...","ts":"1478012345.001443"},{"type":"message","user":"U0XPR4NP4","text":"How do you know the appropriate epoch number?","ts":"1478012359.001444"},{"type":"message","user":"U0XPR4NP4","text":"(Especially if it is chosen by the peer)","ts":"1478012376.001445"},{"type":"message","user":"U1BC5A0F9","text":"But anyway, my question was referring to the config item structure :slightly_smiling_face:","ts":"1478012380.001446"},{"type":"message","user":"U1BC5A0F9","text":"<@U0Y14MWA2> mentioned that there will be some clock","edited":{"user":"U1BC5A0F9","ts":"1478012679.000000"},"ts":"1478012411.001447"},{"type":"message","user":"U0XQ35CDD","text":"There is a buffer for the epoch numbers,. As long as it's not older than, say, X epochs it can be processed.","ts":"1478012460.001448"},{"type":"message","user":"U26T99AQ4","text":"why not block height?","ts":"1478012466.001449"},{"type":"message","user":"U1BC5A0F9","text":"in the ordering service. Is this still the possibility? If so epochs can be changing per specific clock cycles of that clock, or can be set er channel per number of blockk, etc.","ts":"1478012468.001450"},{"type":"message","user":"U0XPR4NP4","text":"<@U26T99AQ4> I like that, makes much more sense to me","ts":"1478012481.001451"},{"type":"message","user":"U0XQ35CDD","text":"<@U26T99AQ4> Block height was the more natural fit to me.","ts":"1478012485.001452"},{"type":"message","user":"U0XPR4NP4","text":"With the config item structure, we have a sequence number associated with each configuration. which must be incremented by exactly one to be valid.  This prevents replay","ts":"1478012498.001453"},{"type":"message","user":"U1BC5A0F9","text":"right, e.g., epoch number can be set to increase per X blocks.","ts":"1478012499.001454"},{"type":"message","user":"U0XQ35CDD","text":"I just went with Elli's term.","ts":"1478012505.001455"},{"type":"message","user":"U26T99AQ4","text":"got it","ts":"1478012516.001456"},{"type":"message","user":"U0XQ35CDD","text":"&gt; The configuration manager will verify that all configuration changes satisfy system policy, that all configuration changes have a LastModified field equal to Sequence, that no configuration has been deleted without corresponding authorization, that the configuration is well formed, and that some configuration item corresponds to the new ConfigurationEnvelope sequence number.","ts":"1478012578.001457"},{"type":"message","user":"U0XQ35CDD","text":"If all configuration changes have a LastModified field equal to Sequence, why is the last check in that quote needed?","ts":"1478012602.001458"},{"type":"message","user":"U0XR6J961","text":"why a seqno?","ts":"1478012890.001460"},{"type":"message","user":"U0XR6J961","text":"why not a \"lastconfig\" hash pointer?","ts":"1478012899.001461"},{"type":"message","user":"U0XPR4NP4","text":"&gt; If all configuration changes have a LastModified field equal to Sequence, why is the last check in that quote needed?\n\nIn case the configuration tx doesn't actually contain any changes","ts":"1478012970.001462"},{"type":"message","user":"U0XR6J961","text":"how will a new config be authorized?  i really hope it will require an admin sign the new config transaction on an airgapped machine","ts":"1478012981.001463"},{"type":"message","user":"U0XPR4NP4","text":"&gt; why not a \"lastconfig\" hash pointer?\n\nI considered this, sequence number seemed smaller and easier without any obvious disadvantages","ts":"1478013040.001464"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1478013049.001465"},{"type":"message","user":"U0XQ35CDD","text":"Why don't you just write that \"all configuration items have a LastModified field equal to Sequence\" and be done with it?","ts":"1478013052.001466"},{"type":"message","user":"U1BC5A0F9","text":"So you would not have the need of paralellizing config changes?","ts":"1478013079.001467"},{"type":"message","user":"U0XPR4NP4","text":"&gt; how will a new config be authorized?  \n\nEach config entry has a modification policy tied to it dictating which signatures are required to modify it\n\n&gt;i really hope it will require an admin sign the new config transaction on an airgapped machine\n\nThat seems like a good idea to me, and generally I would expect to require signatures from multiple admins.","ts":"1478013124.001468"},{"type":"message","user":"U0XPR4NP4","text":"&gt; Why don't you just write that \"all configuration items have a LastModified field equal to Sequence\" and be done with it?\n\nThe idea is that in general, sets of users will only be authorized to modify a subset of the configuration, it is to support changing only pieces of the configuration.  The set of peer admins is authorized to change the set of peer orgs, they are not authorized to modify the orderer config, so they cannot change the sequence number of the orderer config and still have the signatures be valid.","ts":"1478013227.001469"},{"type":"message","user":"U0XQ35CDD","text":"Oh, this goes back to the fact that a ConfigurationEnvelope cannot just say \"I want to modify this and that\" and call it a day, it needs to carry Entries for all the configuration keys that apply, regardless of whether it modifies them or not.","ts":"1478013348.001470"},{"type":"message","user":"U0XPR4NP4","text":"&gt; So you would not have the need of paralellizing config changes?\n\nI've been thinking a lot about this.  We could make the sequence number local to each config item, which would allow for total parallelization, but, this invites someone splitting up a transaction which was meant to be committed atomically and picking pieces of it.","ts":"1478013366.001471"},{"type":"message","user":"U0XQ35CDD","text":"_All_ configuration for a chain.","ts":"1478013369.001472"},{"type":"message","user":"U0XPR4NP4","text":"&gt; Oh, this goes back to the fact that a ConfigurationEnvelope cannot just say \"I want to modify this and that\" and call it a day, it needs to carry Entries for all the configuration keys that apply, regardless of whether it modifies them or not.\n\nI've also been thinking maybe we should allow submission of type `CONFIGURATION_ITEM` which would then generate the new `CONFIGURATION_TRANSACTION` based on the current state, but am not sold that this is a good idea yet.","ts":"1478013433.001473"},{"type":"message","user":"U0XQ35CDD","text":"The signatures in the `ConfigurationEntry` are of type `Envelope`. I assume that the `Data` field of the `Payload` in that `Envelope` is set to the `Configuration` of the `ConfigurationEntry` in question?","edited":{"user":"U0XQ35CDD","ts":"1478013874.000000"},"ts":"1478013869.001474"},{"type":"message","user":"U0XPR4NP4","text":"The data of the payload should be the hash of the configuration (so as not to repeat the configuration over and over again)","ts":"1478013929.001476"},{"type":"message","user":"U0XPR4NP4","text":"Properly documenting this is on my TODO list, and was planned for when I reworked the configuration to sit on top of the new Envelope type","ts":"1478013999.001477"},{"type":"message","user":"U0XQ35CDD","text":"That makes sense.","ts":"1478014001.001478"},{"type":"message","user":"U0XQ35CDD","text":"That's also badly needed. I'm going through the changeset, and I'm not sure if all of this is properly documented elsewhere, dead obvious, or about to be documented.","ts":"1478014041.001479"},{"type":"message","user":"U0XPR4NP4","text":"So the changeset you are reviewing is meant to be about the new base `Envelope` and friends format","ts":"1478014082.001480"},{"type":"message","user":"U0XPR4NP4","text":"The configuration stuff was always a somewhat temporary data structure, designed to allow the proving out of the concept and the writing of code.  It wasn't clear whether it would be rewritten on top of the fabric transaction, or some other thing at the time.  Now that we know what 'the other thing' is, it can be formalized","ts":"1478014128.001481"},{"type":"message","user":"U0XQ35CDD","text":"The changeset that I'm going through is a chance for me to catch up on all the latest message-related developments honestly. I've stopped commenting there so as not to pollute it with out-of-scope comments.","ts":"1478014150.001482"},{"type":"message","user":"U0XPR4NP4","text":"Since the form was going to change, extensive documentation didn't seem worthwhile at the time, but obviously this needs to be well documented going forward.","ts":"1478014174.001483"},{"type":"message","user":"U0XPR4NP4","text":"So what is your opinion on the parallelization of configuration updates?  Should there be a global sequence number, ala the `ConfigurationEnvelope` or should we simply require that the `Configuration` `lastModified` be incremented sequentially","edited":{"user":"U0XPR4NP4","ts":"1478014354.000000"},"ts":"1478014224.001484"},{"type":"message","user":"U0XPR4NP4","text":"Another option I considered, was to make submitted `CONFIGURATION_TRANSACTION` act as an overlay.  Basically, require sequential modification of each config item, and if a config change has 'version dependencies' include those dependent `CONFIGURATION_ITEM`s in the `CONFIGURATION_TRANSACTION`.  The transaction is processed by the orderer into the fully populated transaction only if all of the dependencies match.  But this is definitely more complex.","ts":"1478014785.001486"},{"type":"message","user":"U0XQ35CDD","text":"I haven't thought much about it, but I am probably against parallelization, mainly because (I think?) it allows mixing and matching of items that were not meant to be grouped togethere.","edited":{"user":"U0XQ35CDD","ts":"1478014839.000000"},"ts":"1478014824.001487"},{"type":"message","user":"U0XR6J961","text":"what does that mean","ts":"1478014859.001489"},{"type":"message","user":"U0XR6J961","text":"parallelisation","ts":"1478014863.001490"},{"type":"message","user":"U0XQ35CDD","text":"It also seems like an issue we shouldn't be concerned about. How often do we expect these to happen?","ts":"1478014863.001491"},{"type":"message","user":"U0XQ35CDD","text":"Why parallelize them?","edited":{"user":"U0XQ35CDD","ts":"1478014876.000000"},"ts":"1478014867.001492"},{"type":"message","user":"U0XQ35CDD","text":"Yeah, exactly.","ts":"1478014871.001493"},{"type":"message","user":"U0XPR4NP4","text":"Parallelization meaning, should we allow two configuration updates to be created in parallel, but not together, and have them each be able to be submitted and processed.  Or, should the first one in 'win' and the second one be reconstructed.","ts":"1478015006.001495"},{"type":"message","user":"U0XPR4NP4","text":"In general, I would expect that reconfiguration should be infrequent and require significant human intervention.","ts":"1478015036.001496"},{"type":"message","user":"U0XQ35CDD","text":"&gt; Parallelization meaning, should we allow two configuration updates to be created in parallel, but not together, and have them each be able to be submitted and processed.  Or, should the first one in 'win' and the second one be reconstructed.","ts":"1478015100.001497"},{"type":"message","user":"U0XQ35CDD","text":"This doesn't make sense to me.","ts":"1478015104.001498"},{"type":"message","user":"U0XQ35CDD","text":"Example?","ts":"1478015106.001499"},{"type":"message","user":"U0XPR4NP4","text":"Sure","ts":"1478015124.001500"},{"type":"message","user":"U0XQ35CDD","text":"I thought by parallelization you referred to individual configuration items.","ts":"1478015134.001501"},{"type":"message","user":"U0XPR4NP4","text":"I do","edited":{"user":"U0XPR4NP4","ts":"1478015150.000000"},"ts":"1478015144.001502"},{"type":"message","user":"U0XQ35CDD","text":"But now you're talking about configuration transactions where the first one wins? This is why this doesn't make sense to me.","ts":"1478015204.001504"},{"type":"message","user":"U0XR6J961","text":"ah all of this is about channels?","ts":"1478015228.001505"},{"type":"message","user":"U0XR6J961","text":"because orderer config really shouldn't change often","ts":"1478015244.001506"},{"type":"message","user":"U0XQ35CDD","text":"All types of configs.","ts":"1478015294.001507"},{"type":"message","user":"U0XR6J961","text":"are we overengineering?","ts":"1478015327.001508"},{"type":"message","user":"U0XQ35CDD","text":"Always.","ts":"1478015331.001509"},{"type":"message","user":"U0XR6J961","text":"sure seems like it","ts":"1478015333.001510"},{"type":"message","user":"U0XPR4NP4","text":"The current configuration looks like this:\n\n```\nSeqNo: 7, [ A: {LastModified: 5, Val: foo} B: {LastModified: 7, Val: bar}]\n```\n\nThe entities in control of A and in control of B both want to update the values. Today, the flow goes as:\n\nA entities create: \n\n```\nSeqNo: 8, [ A: {LastModified: 8, Val: foo2} B: {LastModified: 7, Val: bar}]\n```\n\nB entities create:\n\n```\nSeqNo: 8, [ A: {LastModified: 5, Val: foo} B: {LastModified: 8, Val: bar2}]\n```\n\nThen, whoever submits first would be adopted, and the second would fail because it would be attempting to backlevel the other's config.  However, consider instead doing away with the top level SeqNo, then you could have\n\n\n```\n [ A: {LastModified: 5, Val: foo} B: {LastModified: 7, Val: bar}]\n```\n\nThe entities in control of A and in control of B both want to update the values. The new flow would go as:\n\nA entities create: \n\n```\nItem{ A: {LastModified: 6, Val: foo2} }\n```\n\nB entities create:\n\n```\nItem{ B: {LastModified: 8, Val: bar2}}\n```\n\nAnd when submitted, they both would apply cleanly.","edited":{"user":"U0XPR4NP4","ts":"1478015475.000000"},"ts":"1478015431.001511"},{"type":"message","user":"U0XQ35CDD","text":"I get it now. Good idea, but would be low on my priority list, as I don't expect this to be a significant problem where collisions happen.","ts":"1478015573.001513"},{"type":"message","user":"U0XPR4NP4","text":"The thing that got me thinking about collisions was the DoS possibility, where some group starts constantly changing the config to prevent another group from being able to modify their own config.","edited":{"user":"U0XPR4NP4","ts":"1478015724.000000"},"ts":"1478015694.001514"},{"type":"message","user":"U0XQ35CDD","text":"But on the background, isn't this CONFIG_ITEM translated to a CONFIG_TX that reads the current state?","ts":"1478015695.001515"},{"type":"message","user":"U0XPR4NP4","text":"Correct.","ts":"1478015705.001516"},{"type":"message","user":"U0XR6J961","text":"this is a permissioned network, no?","ts":"1478015788.001518"},{"type":"message","user":"U0XPR4NP4","text":"The reality is, that this sort of attack seems unlikely, since it would be attributable, and usually requires signatures from multiple parties.  Still, if someone misconfigured their system to allow a single signer to modify something, then it would be annoying to fix.","ts":"1478015798.001519"},{"type":"message","user":"U0XPR4NP4","text":"Probably not a problem worth worrying too much about.","ts":"1478015815.001520"},{"type":"message","user":"U0XR6J961","text":"not at all about","ts":"1478015821.001521"},{"type":"message","user":"U0XR6J961","text":"again, airgapped machines with certificates, etc.","ts":"1478015859.001522"},{"type":"message","user":"U0XPR4NP4","text":"Yes, at the end of the day if the admins go and lose their keys, then there is no limit to the bad things that an attacker can do to the network.","ts":"1478015919.001523"},{"type":"message","user":"U0XPR4NP4","text":"<@U1BC5A0F9> <@U26T99AQ4> <@U0ZR63HLK> Then for the new transaction format, should we add an epoch into the top level header and leverage exactly that for replay prevention? Do we also need a nonce to prevent some sort of signature attacks, or is that only for replay?","ts":"1478016396.001524"},{"type":"message","user":"U0ZR63HLK","text":"a nonce might be used also at signing time by certain schemes with the guarantee that it is unique","ts":"1478016478.001525"},{"type":"message","user":"U0XPR4NP4","text":"I obviously defer on these crypto related decision, just trying to nail down everything that needs to be in this outer header.  Per the changeset, there is the timestamp and nonce, it sounds then like this should be an epoch and nonce?","ts":"1478016574.001526"},{"type":"message","user":"U0XPR4NP4","text":"(Or, do we want to leave the timestamp for some reason?)","ts":"1478016629.001527"},{"type":"message","user":"U0ZR63HLK","text":"I'm fine with epoch and nonce. timestamp is not reliable","ts":"1478016709.001528"},{"type":"message","user":"U1BC5A0F9","text":"+1","ts":"1478016718.001529"},{"type":"message","user":"U0XQ35CDD","text":"Remember that Marko wanted a timestamp for the \"raw ledger\" batches, and had suggested a mechanism with skews, etc.","ts":"1478016720.001530"},{"type":"message","user":"U0XPR4NP4","text":"And just to be clear, the nonce would not need to be verified against some 'set of used nonces' to validate the signature, instead it would be the client's job to guarantee the uniqueness or lose security.  Instead, the only replay detection the orderer would need to perform is to validate the epoch which would be based on the block height","ts":"1478016736.001531"},{"type":"message","user":"U1BC5A0F9","text":"<@U0XQ35CDD> this was i think the clock that i referred to before i think :slightly_smiling_face:","ts":"1478016743.001532"},{"type":"message","user":"U0ZR63HLK","text":"ah, okay","ts":"1478016753.001533"},{"type":"message","user":"U0XQ35CDD","text":"<@U1BC5A0F9> Yes.","ts":"1478016759.001534"},{"type":"message","user":"U0ZR63HLK","text":"and what's the purpose for having that in the raw ledger?","ts":"1478016768.001535"},{"type":"message","user":"U0ZR63HLK","text":"<@U0XPR4NP4> sounds good so far","ts":"1478016807.001536"},{"type":"message","user":"U0XPR4NP4","text":"Great, thanks <@U0ZR63HLK>","ts":"1478016906.001537"},{"type":"message","user":"U0XQ35CDD","text":"What's not clear to me yet is this:","ts":"1478028015.001540"},{"type":"message","user":"U0XQ35CDD","text":"How do we go from a `CONFIG_TRANSACTION` that specifies the creation of a new channel to a genesis block for that channel?","ts":"1478028079.001541"},{"type":"message","user":"U0XQ35CDD","text":"And I mean from a low-level, code perspective.","ts":"1478028096.001542"},{"type":"message","user":"U0XQ35CDD","text":"Do we leverage the `bootstrap` package that's out there? Because if that's the case, the `bootstrap.Helper` interface will need to be extended with one more method that allows us to load config data into the helper.","ts":"1478028157.001543"},{"type":"message","user":"U0XQ35CDD","text":"If the `bootstrap` package is not used, I want to know what we have in mind.","ts":"1478028186.001544"},{"type":"message","user":"U0XQ35CDD","text":"This affects the way I'm rewriting the Kafka orderer for multiple channels, since I'm touching on that path.","ts":"1478028250.001545"},{"type":"message","user":"U0XPR4NP4","text":"I've actually wanted to discuss this with you, as I had a conversation with <@U1BC5A0F9> around this and she brought up an interesting point about channel creation being potentially non-deterministic which makes everything a little trickier.","ts":"1478028465.001546"},{"type":"message","user":"U0XQ35CDD","text":"Cool, shoot.","ts":"1478028508.001547"},{"type":"message","user":"U0XPR4NP4","text":"So, consider for a moment, that a channel creation request is received (as a configuration transaction).  My original thought had been \"have the orderers implicitly form a channel and consense about the genesis block for this channel\".  This was to prevent two different people from trying to create the same channel at once with different genesis material.","ts":"1478028632.001548"},{"type":"message","user":"U0XQ35CDD","text":"If you don't mind, can we make things explicit?","ts":"1478028680.001549"},{"type":"message","user":"U0XPR4NP4","text":"Sure","ts":"1478028684.001550"},{"type":"message","user":"U0XQ35CDD","text":"I want us to expand on the \"have the orders implicitly form a channel\" clause.","ts":"1478028694.001551"},{"type":"message","user":"U0XQ35CDD","text":"Which brings me back to this question I guess: <https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1478028015001540>","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1478028015001540","fallback":"[November 1st, 2016 12:20 PM] kostas: What's not clear to me yet is this:","ts":"1478028015.001540","author_subname":"kostas","channel_id":"C2GE7GXM1","channel_name":"fabric-crypto","is_msg_unfurl":true,"text":"What's not clear to me yet is this:","author_name":"Kostas Christidis","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/kostas","author_icon":"https:\/\/avatars.slack-edge.com\/2016-04-05\/31983107923_80db5353e9278df980c7_48.png","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-crypto"}],"ts":"1478028714.001552"},{"type":"message","user":"U0XQ35CDD","text":"How do you get to a genesis block?","ts":"1478028730.001554"},{"type":"message","user":"U0XQ35CDD","text":"`bootstrap` to the rescue, or something else? And if it's something else, what?","ts":"1478028744.001555"},{"type":"message","user":"U0XPR4NP4","text":"I was trying to side-step that for the moment, because the punchline about the non-determinism at the end I think informs the decision here.  I'm not really sure what \n&gt; `bootstrap` to the rescue\nmeans, but the format is not that complicated, it can be generated either by paring down the system chain config, or building it manually.","edited":{"user":"U0XPR4NP4","ts":"1478029090.000000"},"ts":"1478029078.001556"},{"type":"message","user":"U0XQ35CDD","text":"`bootstrap` to the rescue is a reference to the expanded form of this statement, 10 lines up: <https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1478028157001543>","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1478028157001543","fallback":"[November 1st, 2016 12:22 PM] kostas: Do we leverage the `bootstrap` package that's out there? Because if that's the case, the `bootstrap.Helper` interface will need to be extended with one more method that allows us to load config data into the helper.","ts":"1478028157.001543","author_subname":"kostas","channel_id":"C2GE7GXM1","channel_name":"fabric-crypto","is_msg_unfurl":true,"text":"Do we leverage the `bootstrap` package that's out there? Because if that's the case, the `bootstrap.Helper` interface will need to be extended with one more method that allows us to load config data into the helper.","author_name":"Kostas Christidis","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/kostas","author_icon":"https:\/\/avatars.slack-edge.com\/2016-04-05\/31983107923_80db5353e9278df980c7_48.png","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-crypto"}],"ts":"1478029159.001558"},{"type":"message","user":"U0XQ35CDD","text":"I want to narrow down the interfaces, and figure out whether a new package\/abstraction is needed.","ts":"1478029206.001560"},{"type":"message","user":"U0XQ35CDD","text":"For instance:","ts":"1478029217.001561"},{"type":"message","user":"U0XQ35CDD","text":"&gt; it can be generated either by paring down the system chain config, or building it manually.","ts":"1478029231.001562"},{"type":"message","user":"U0XQ35CDD","text":"I'm looking for a decomposition of that statement. What does build it manually mean?","ts":"1478029265.001563"},{"type":"message","user":"U0XPR4NP4","text":"Ah, okay, sorry, I didn't realize by \"the `bootstrap` package\" you meant the little shim I had added to allow the genesis block to be specified at runtime.  I think no, I would not expect for this package to be re-used for creating a genesis block, it was more meant as a way to statically specify one for testing, or to load a real one from a file.","edited":{"user":"U0XPR4NP4","ts":"1478029395.000000"},"ts":"1478029311.001564"},{"type":"message","user":"U0XQ35CDD","text":"Great, so the `bootstrap` package is out of this conversation.","ts":"1478029341.001565","reactions":[{"name":"+1","users":["U0XPR4NP4"],"count":1}]},{"type":"message","user":"U0XQ35CDD","text":"So, I've got a `CONFIG_TRANSACTION`. And let's assume it passes all the validation\/policy checks.","ts":"1478029382.001566"},{"type":"message","user":"U0XQ35CDD","text":"What's next? Think lifecycle of this message.","ts":"1478029397.001568"},{"type":"message","user":"U0XPR4NP4","text":"Okay, so, going by the flows I've seen.  Given this TX, the App sends it via a broadcast to ordering.","ts":"1478029440.001569"},{"type":"message","user":"U0XPR4NP4","text":"The orderer recognizes this as a configuration for a channel it hasn't seen, so, assuming that it is well formed, appropriately signed, etc.  It creates a new channel with the parameters specified by the TX.","ts":"1478029478.001570"},{"type":"message","user":"U0XQ35CDD","text":"And then it needs to post the genesis block (via broadcast) to that channel.","ts":"1478029524.001571"},{"type":"message","user":"U0XPR4NP4","text":"The app on the other side is polling on `Deliver` waiting for the channel to exist.  Once it does, it gets back a genesis block with the config tx it submitted, and it can give this block to the peers to subscribe to the channel.","ts":"1478029526.001572"},{"type":"message","user":"U0XQ35CDD","text":"But you're glossing over my question :simple_smile:","ts":"1478029551.001573"},{"type":"message","user":"U0XPR4NP4","text":"&gt; And then it needs to post the genesis block (via broadcast) to that channel.\n\nYes, sorry to omit this","ts":"1478029559.001574"},{"type":"message","user":"U0XQ35CDD","text":"How do we actually get that genesis block is my question. Everything else, I'm totally fine with.","ts":"1478029588.001575"},{"type":"message","user":"U0XPR4NP4","text":"Well, in the simplest route, the orderer which receives the transaction simply creates a new block by setting the payload to the config tx, setting the hashes appropriately, setting the block number to 0, and that's it?","edited":{"user":"U0XPR4NP4","ts":"1478029675.000000"},"ts":"1478029652.001576"},{"type":"message","user":"U0XPR4NP4","text":"I guess I'm not sure why the 'creating the block' is hard, we have to do this for a normal reconfiguration tx, not just channel creation","ts":"1478029721.001579"},{"type":"message","user":"U0XQ35CDD","text":"I didn't say anything about it being hard. This is my only goal here: <https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1478029206001560>","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1478029206001560","fallback":"[November 1st, 2016 12:40 PM] kostas: I want to narrow down the interfaces, and figure out whether a new package\/abstraction is needed.","ts":"1478029206.001560","author_subname":"kostas","channel_id":"C2GE7GXM1","channel_name":"fabric-crypto","is_msg_unfurl":true,"text":"I want to narrow down the interfaces, and figure out whether a new package\/abstraction is needed.","author_name":"Kostas Christidis","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/kostas","author_icon":"https:\/\/avatars.slack-edge.com\/2016-04-05\/31983107923_80db5353e9278df980c7_48.png","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-crypto"}],"ts":"1478029754.001580"},{"type":"message","user":"U0XPR4NP4","text":"I understand the goal, but there are larger unresolved holes that need to be resolved first.","ts":"1478029802.001582"},{"type":"message","user":"U0XQ35CDD","text":"Related to that path?","ts":"1478029835.001583"},{"type":"message","user":"U0XPR4NP4","text":"Yes.","ts":"1478029901.001584"},{"type":"message","user":"U0XPR4NP4","text":"For instance, does the genesis block of the channel redefine all of the same parameters as the 'system chain'?","ts":"1478029932.001585"},{"type":"message","user":"U0XQ35CDD","text":"You'll need to expand on \"all of the same parameters as the 'system chain'.\"","ts":"1478029985.001586"},{"type":"message","user":"U0XPR4NP4","text":"For instance, in the PBFT case, does the channel define `f` `K` `L` etc.","ts":"1478030027.001587"},{"type":"message","user":"U0KN2SSKE","text":"just jumping in here - and sure lacking context -  i think for simplicity (now) we should assume channel is independent so each should have its own complete config block","edited":{"user":"U0KN2SSKE","ts":"1478030086.000000"},"ts":"1478030059.001588"},{"type":"message","user":"U0XQ35CDD","text":"You cannot make the right call with what you have right now, can you? For instance, the support of multiple channels in PBFT is still fuzzy. So complete config blocks is the right way to go. Depending on what the system runs on (e.g. PBFT), the orderer logic should figure out whether you're trying to overlap a config key (e.g. `f`) that you shouldn't, and reject it.","ts":"1478030245.001590"},{"type":"message","user":"U0XQ35CDD","text":"Complete config blocks seems like the safer choice.","edited":{"user":"U0XQ35CDD","ts":"1478030444.000000"},"ts":"1478030287.001591"},{"type":"message","user":"U0KN2SSKE","text":"we could allow some common config to effect all channels by specifying a nil channel \u2014 for example, removing a CA member","ts":"1478030558.001593"},{"type":"message","user":"U0XPR4NP4","text":"I generally agree that complete config blocks is a safer choice, but, then I see there being essentially two options:\n\n1.  The client is responsible for filling out all of the fields of the transaction, likely by taking the system chain config, removing the signatures, and modifying the chainID on all of the configuration items.  Then, the orderer ensures that things match, and then processes the transaction normally.  The advantage to this is that it makes the order's life very easy, but obviously pushes complexity to the client.  It also loses some flexibility which I'll mention in a moment.\n2. The client is responsible for filling out all of the fields which it is entitled to modify, leaving the rest for the ordering service to populate.  The ordering service then completes the configuration with the parameters it is authorized to do, and creates the final configuration transaction.  The downside to this is some limited additional complexity at the orderer, but it does allow for neat things, like given a set of 100 different pbft nodes, at channel creation time, the ordering service could pick 4 of them for the channel.","ts":"1478030583.001594"},{"type":"message","user":"U0XQ35CDD","text":"Waiting to hear the flexibility lost with approach number 1.","ts":"1478030678.001595"},{"type":"message","user":"U0XPR4NP4","text":"The last sentence of number 2.  If the orderer wants to specify a different configuration for that chain, configuration which the client cannot know in advance","ts":"1478030709.001596"},{"type":"message","user":"U0XQ35CDD","text":"But that is not even a requirement (that I know of), and for all we know, this may be a feature that nobody is after.","ts":"1478030888.001597"},{"type":"message","user":"U0XQ35CDD","text":"So we're adding complexity to a core component for something that is of questionable value.","ts":"1478030894.001598"},{"type":"message","user":"U0XQ35CDD","text":"I am against this. (And approach number 2 as a result.)","edited":{"user":"U0XQ35CDD","ts":"1478031047.000000"},"ts":"1478030918.001599"},{"type":"message","user":"U0XPR4NP4","text":"That's fine.  I think 1 is probably the correct direction, but I think these things need to be nailed down first.","ts":"1478030990.001600"},{"type":"message","user":"U0KN2SSKE","text":"i think we should separate config\u2019s into 2 buckets:  1) client can specify\/modify 2) managed by the ordering service","ts":"1478031065.001602"},{"type":"message","user":"U0XPR4NP4","text":"IE option 2, I think?","ts":"1478031110.001603"},{"type":"message","user":"U0XQ35CDD","text":"I don't see why this is option 2?","ts":"1478031158.001604"},{"type":"message","user":"U0XQ35CDD","text":"Option 1 along with logic on the orderer that rejects the config if tries to modify a key managed by the ordering service would work, no?","ts":"1478031191.001605"},{"type":"message","user":"U0XQ35CDD","text":"Basically: <https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1478030245001590>","edited":{"user":"U0XQ35CDD","ts":"1478031202.000000"},"ts":"1478031196.001606"},{"type":"message","user":"U0KN2SSKE","text":"right, client would never know about those config\u2019s ,  so i think like the list of orderers should not be allowed to change by the client","ts":"1478031268.001609"},{"type":"message","user":"U0XPR4NP4","text":"But then the thing you advocating for <@U0KN2SSKE> would be that the peer does _not_ specify the complete config tx, that the orderer supplements it somehow?","ts":"1478031306.001610"},{"type":"message","user":"U0XQ35CDD","text":"Why would the client *not* know about these configs? They're in the system chain genesis block that it can access.","edited":{"user":"U0XQ35CDD","ts":"1478031387.000000"},"ts":"1478031377.001611"},{"type":"message","user":"U0KN2SSKE","text":"right, the rest is considered fixed, supplied by the orderer to fill in the config block","ts":"1478031389.001613"},{"type":"message","user":"U0KN2SSKE","text":"we don\u2019t document them \u2014 as you said, if modified, orderer would reject","ts":"1478031474.001614"},{"type":"message","user":"U0XPR4NP4","text":"Okay, so then the client _does_ specify the entire config, but it does not understand the orderer config, simply copies it verbatim.  Which would be (1) which I support.","edited":{"user":"U0XPR4NP4","ts":"1478031537.000000"},"ts":"1478031525.001615"},{"type":"message","user":"U0XQ35CDD","text":"(I honestly think that Binh _just_ made the case for option 2.)","ts":"1478031586.001617"},{"type":"message","user":"U0XQ35CDD","text":"To me the simplest way of going at is the orderer saying: \"Give me _everything_ I need to know about the new channel. (Internally, if this config is to overwrite a key which for, whatever reason, we keep locked, the config is rejected with the appropriate error message.)\" Maybe I'm biased, but this feels easier and a better design than saying \"Give me something, and I'll fill in the rest with what applies currently.\"","edited":{"user":"U0XQ35CDD","ts":"1478031977.000000"},"ts":"1478031883.001618"},{"type":"message","user":"U0XPR4NP4","text":"I agree, additionally, this also easily keeps the original attribution for the channel creation, because as soon as we modify the config tx, the signature over it in the submission is invalidated.","ts":"1478031999.001620"},{"type":"message","user":"U0KN2SSKE","text":"if we envision the client gets the config block and modifies it, i am ok with that, but they still need to read the doc to figure out which values can be modified","ts":"1478032089.001621"},{"type":"message","user":"U0XQ35CDD","text":"(I guess the key word there being \"easily\" right? Because for that specific concern, I would assume that the signature of the `ConfigurationEntry` that calls for the channel creation remains, and can be linked to the creator.)","ts":"1478032121.001622"},{"type":"message","user":"U0XQ35CDD","text":"<@U0KN2SSKE> But that is always going to be the case.","ts":"1478032144.001623"},{"type":"message","user":"U0XPR4NP4","text":"The configuration items are all typed","ts":"1478032144.001624"},{"type":"message","user":"U0XPR4NP4","text":"Which should make it fairly obvious, \"Do not modify the ones typed orderer\"","ts":"1478032172.001625"},{"type":"message","user":"U0KN2SSKE","text":"&gt; But that is always going to be the case.\n:slightly_smiling_face:","ts":"1478032212.001626"},{"type":"message","user":"U0KN2SSKE","text":"why wouldn\u2019t we just have a json object, which we define the structure, and the client gets it, modifies it, and submits it back as a payload of the config transaction, the client signs the payload","ts":"1478032356.001627"},{"type":"message","user":"U0XPR4NP4","text":"I think that's more or less the plan, just proto instead of json","ts":"1478032415.001628"},{"type":"message","user":"U0XPR4NP4","text":"Could be rendered as JSON I suppose, but I'm not sure what the purpose would be, it's all machine manipulated?","ts":"1478032449.001629"},{"type":"message","user":"U0KN2SSKE","text":"json option on the GET would be nice for debug and inspection","ts":"1478032519.001630"},{"type":"message","user":"U0XPR4NP4","text":"The bootstrapping tool will need to support pretty printing of the genesis block for analysis, maybe even to HTML or some such","ts":"1478032579.001631"},{"type":"message","user":"U0KN2SSKE","text":"ok, so are we set on proto?","ts":"1478032691.001632"},{"type":"message","user":"U0XPR4NP4","text":"I would say yes.  Unless we wanted to switch all of our persistent data to another encoding like ANS.1 or something, but I thought that was ruled 'too expensive' for the time being","ts":"1478032765.001633"},{"type":"message","user":"U0XPR4NP4","text":"I would not support a move to JSON, that seems like a step back to me","ts":"1478032782.001634"},{"type":"message","user":"U0XQ35CDD","text":"(Keep that asterisk on the need for a timestamp, I've emailed Marko.)","ts":"1478032787.001635"},{"type":"message","user":"U0KN2SSKE","text":"i say to move on with CR and change re timestamp if needed later since we need this to hammer out other stuff this week","ts":"1478032936.001636"},{"type":"message","user":"U0ULK2JPP","text":"<@U0XPR4NP4> I would rephrase\u2026 we need time to evaluate ASN.1 or no but (1) moving towards a good base set and (2) keeping serialization encapsulated would give us most flexibility","ts":"1478032940.001637"},{"type":"message","user":"U0ULK2JPP","text":"(so not ruled out becaue of expense\u2026 although performance is clearly the big unknown tipping point here)","ts":"1478032979.001638"},{"type":"message","user":"U0ULK2JPP","text":"fair ?","ts":"1478032983.001639"},{"type":"message","user":"U0XPR4NP4","text":"By expense, I meant from a development time perspective, not a performance one","ts":"1478033000.001640"},{"type":"message","user":"U0XPR4NP4","text":"(So, yes, I think I agree)","ts":"1478033030.001641"},{"type":"message","user":"U0ULK2JPP","text":"ah ok","ts":"1478033060.001642"},{"type":"message","user":"U0ULK2JPP","text":"right","ts":"1478033061.001643"},{"type":"message","user":"U0ULK2JPP","text":"also we do need to do the consolidation <@U26T99AQ4> and <@U0XPR4NP4> were working on ?","ts":"1478033094.001644"},{"type":"message","user":"U0ULK2JPP","text":"if you like we can do it in two steps (1) pull what you have in ab.proto and (2) consolidate fabric and ab","ts":"1478033266.001645"},{"type":"message","user":"U0ULK2JPP","text":"I can take a stab at the consolidation based on","ts":"1478033344.001646"},{"type":"message","subtype":"file_share","text":"<@U0ULK2JPP|muralisr> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F2X4RV0DR\/pasted_image_at_2016_11_01_04_49_pm.png|Pasted image at 2016-11-01, 4:49 PM>","file":{"id":"F2X4RV0DR","created":1478033348,"timestamp":1478033348,"name":"Pasted image at 2016_11_01 04_49 PM.png","title":"Pasted image at 2016-11-01, 4:49 PM","mimetype":"image\/png","filetype":"png","pretty_type":"PNG","user":"U0ULK2JPP","editable":false,"size":185208,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2X4RV0DR\/pasted_image_at_2016_11_01_04_49_pm.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2X4RV0DR\/download\/pasted_image_at_2016_11_01_04_49_pm.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_64":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2X4RV0DR-cb2445d4c5\/pasted_image_at_2016_11_01_04_49_pm_64.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_80":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2X4RV0DR-cb2445d4c5\/pasted_image_at_2016_11_01_04_49_pm_80.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2X4RV0DR-cb2445d4c5\/pasted_image_at_2016_11_01_04_49_pm_360.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360_w":360,"thumb_360_h":237,"thumb_480":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2X4RV0DR-cb2445d4c5\/pasted_image_at_2016_11_01_04_49_pm_480.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_480_w":480,"thumb_480_h":316,"thumb_160":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2X4RV0DR-cb2445d4c5\/pasted_image_at_2016_11_01_04_49_pm_160.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2X4RV0DR-cb2445d4c5\/pasted_image_at_2016_11_01_04_49_pm_720.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720_w":720,"thumb_720_h":473,"thumb_960":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2X4RV0DR-cb2445d4c5\/pasted_image_at_2016_11_01_04_49_pm_960.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_960_w":960,"thumb_960_h":631,"thumb_1024":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2X4RV0DR-cb2445d4c5\/pasted_image_at_2016_11_01_04_49_pm_1024.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_1024_w":1024,"thumb_1024_h":673,"image_exif_rotation":1,"original_w":1938,"original_h":1274,"permalink":"https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F2X4RV0DR\/pasted_image_at_2016_11_01_04_49_pm.png","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2X4RV0DR-2fa79638b5","channels":["C2GE7GXM1"],"groups":[],"ims":[],"comments_count":0},"user":"U0ULK2JPP","upload":true,"display_as_bot":false,"username":"<@U0ULK2JPP|muralisr>","bot_id":null,"ts":"1478033351.001647"},{"type":"message","user":"U0ULK2JPP","text":"is that better approach ?","ts":"1478033366.001648"},{"type":"message","user":"U0XPR4NP4","text":"So I think some of the fields need to additionally be in the outer header, like the nonce (to allow signing over this), and possibly a date (we're waiting on info on this) and will likely need to add an epoch as well","ts":"1478033434.001649"},{"type":"message","user":"U0ULK2JPP","text":"ok","ts":"1478033449.001650"},{"type":"message","user":"U0ZR63HLK","text":"so, let's start the discussion on the replay attack protection then. I had a quick discussion with <@U26T99AQ4> and we agreed that TransactionHeader needs to have a nonce and an epoch at least","ts":"1478083579.001651"},{"type":"message","user":"U0ZR63HLK","text":"Also ActionHeader needs to have those fields","ts":"1478083592.001652"},{"type":"message","user":"U0ZR63HLK","text":"The point is then to understand who fills this fields, when and how :slightly_smiling_face:","ts":"1478083618.001653"},{"type":"message","user":"U0PB67X4K","text":"<@U0ZR63HLK> - which piece of the system is \"checking for\" \/ \"protecting against\" replay attacks?","ts":"1478087627.001654"},{"type":"message","user":"U0ZR63HLK","text":"<@U0PB67X4K> we will actually prepare a document to explain all these details so we can easily reason about it.","ts":"1478088615.001655","reactions":[{"name":"+1","users":["U0PB67X4K"],"count":1}]},{"type":"message","user":"U0PB67X4K","text":"excellent  :wink:","ts":"1478088869.001656"},{"type":"message","user":"U0XQ35CDD","text":"Back to the protos discussion for a sec. Isn't every block in the chain supposed to carry marshaled `Envelope`s?","ts":"1478093744.001657"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XQ35CDD> Correct, the block data is a repeated section of marshaled `Envelope`s","ts":"1478094520.001658"},{"type":"message","user":"U0XQ35CDD","text":"I thought so. I remember noting it down when reading the protos yesterday, but couldn't find it in the revised text. (Or maybe I missed it.)","ts":"1478094590.001659"},{"type":"message","user":"U0PB67X4K","text":"that was my understanding as well","ts":"1478094591.001660"},{"type":"message","user":"U0XQ35CDD","text":"If that's the case though, why is the genesis block provided by the static bootstrapper a marshaled `ConfigurationEnvelope`? <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2153\/1\/orderer\/common\/bootstrap\/static\/static.go>","ts":"1478094665.001661"},{"type":"message","user":"U0XPR4NP4","text":"That's my mistake, something I forgot to clean up after the new transaction format","ts":"1478094879.001662"},{"type":"message","user":"U0XQ35CDD","text":"No problem. I have a changeset ready that addresses this, just wanted to check that my understanding was correct.","edited":{"user":"U0XQ35CDD","ts":"1478095133.000000"},"ts":"1478095109.001663"},{"type":"message","user":"U0XQ35CDD","text":"I've also added tests to that package. (<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2177\/> + <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2179\/>)","edited":{"user":"U0XQ35CDD","ts":"1478095598.000000"},"ts":"1478095115.001664","reactions":[{"name":"+1","users":["U0XPR4NP4"],"count":1}]},{"type":"message","user":"U0PB67X4K","text":"<@U0XQ35CDD> ^^^ unfortunately they need to be rebased methinks","ts":"1478097938.001669"},{"type":"message","user":"U0XQ35CDD","text":"It seems like the culprit is the CI failing on an earlier changeset (<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2075\/5>) that I've stacked these changes against.","edited":{"user":"U0XQ35CDD","ts":"1478098044.000000"},"ts":"1478098022.001670"},{"type":"message","user":"U0XQ35CDD","text":"(Thanks for the heads up though.)","ts":"1478098056.001672"},{"type":"message","user":"U0ULK2JPP","text":"<@U0XPR4NP4> we do need to consolidate orderer\u2019s Block with fabric\u2019s Block2 (ie, we\u2019ll have only 1 block correct ?)","ts":"1478104630.001673"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ULK2JPP> Yes, I think that is the next step","ts":"1478104729.001674"},{"type":"message","user":"U0XPR4NP4","text":"I'm not sure if want to wait on the fabric transaction definition or not","ts":"1478104758.001675"},{"type":"message","user":"U0XPR4NP4","text":"We can hack the orderer code to allow non-`Envelope` transactions through for the moment, though I'd prefer not to","ts":"1478104809.001676"},{"type":"message","user":"U0XPR4NP4","text":"The `Block` and `Envelope` definitions should be stable now, so I'd rather put the workarounds at the other (like embedding the old tran until it is consolidated)","ts":"1478104838.001677"},{"type":"message","user":"U0ULK2JPP","text":"<@U0XPR4NP4> reason I asked about Block consolidation was to allow other work (such as gossip) which is dependednt on Block structures \u2026( <@U1HFNJB50> )","ts":"1478105357.001678"},{"user":"U1HFNJB50","inviter":"U0ULK2JPP","text":"<@U1HFNJB50|c0rwin> has joined the channel","type":"message","subtype":"channel_join","ts":"1478105364.001679"},{"type":"message","user":"U0ULK2JPP","text":"`I'm not sure if want to wait on the fabric transaction definition or not` \u2026 if they are independent, I vote we do the block consolidation first. In addition to unblocking, we will do incremental work ?","ts":"1478106078.001680"},{"type":"message","user":"U0XPR4NP4","text":"Sounds good to me then","ts":"1478106138.001681"},{"type":"message","user":"U0XPR4NP4","text":"From an orderer perspective, we will expect `Envelope` transactions in `Broadcast`, and encode them into the new type `Block` for `Deliver`","ts":"1478106167.001682"},{"type":"message","user":"U0ULK2JPP","text":"inviting <@U0Z541B3P> <@U1KFCPFQA>","ts":"1478106777.001683"},{"user":"U1KFCPFQA","text":"<@U1KFCPFQA|dave.enyeart> has joined the channel","type":"message","subtype":"channel_join","ts":"1478106782.001684"},{"user":"U0Z541B3P","inviter":"U0ULK2JPP","text":"<@U0Z541B3P|manish-sethi> has joined the channel","type":"message","subtype":"channel_join","ts":"1478106783.001685"},{"type":"message","user":"U0ULK2JPP","text":"<@U0Z541B3P> <@U1KFCPFQA> Block from ab.proto is in \u2026 what do you think of consolidating replacing Block2 with ab.Block ?","ts":"1478106832.001686"},{"type":"message","user":"U0XPR4NP4","text":"I was also considering consolidating the protos, doing something like putting the `Block` and `Envelope` definitions into `protos\/common` the `Broadcast`\/`Deliver` pieces into `protos\/orderer` and then the fabric transaction and friends into `protos\/peer`","ts":"1478106939.001687"},{"type":"message","user":"U0ULK2JPP","text":"sounds good to me\u2026.","ts":"1478107058.001688"},{"type":"message","user":"U1HFNJB50","text":"just to make sure, the consolidation of block structure will include changes in the ledger API\u2019s right?","ts":"1478107114.001689"},{"type":"message","user":"U0ULK2JPP","text":"I don\u2019t know how much work conversion from Block2 to Block entails to ledger \u2026 <@U0Z541B3P> <@U1KFCPFQA> ?","ts":"1478107134.001690"},{"type":"message","user":"U0ULK2JPP","text":"^^^ same as <@U1HFNJB50>  question","ts":"1478107159.001691"},{"type":"message","user":"U0Z541B3P","text":"Let me have a look and think over","ts":"1478107165.001692"},{"type":"message","user":"U1KFCPFQA","text":"Manish, I assume this would impact your serialized block as well","ts":"1478107208.001693"},{"type":"message","user":"U1HFNJB50","text":"also I\u2019m looking at current definitions of ledger API inside `ledger_interface.go` and struggling to understand how it expected to work, having Block2?","ts":"1478107234.001694"},{"type":"message","user":"U0Z541B3P","text":"Yes, that we would need to change","ts":"1478107243.001695"},{"type":"message","user":"U1HFNJB50","text":"I mean Block2 doesn\u2019t provides information about block sequence number","ts":"1478107252.001696"},{"type":"message","user":"U1HFNJB50","text":"while ledger api has a functionality of retrieving the block by it\u2019s sequence number","ts":"1478107274.001697"},{"type":"message","user":"U0Z541B3P","text":"<@U1HFNJB50> - at ledger level, it is assumed that the blocks arrive in sequence and hence while writing Block2, we had kept the fields to minimum","ts":"1478107338.001698"},{"type":"message","user":"U1HFNJB50","text":"I assumed something like that","ts":"1478107375.001699"},{"type":"message","user":"U1HFNJB50","text":"but still, I guess that path to write block should look like `RemoveInvalidTransactionsAndPrepare(block)` \u2014&gt; `Commit()` \u2014&gt; `GetBlockByNumber(seqNum)`","ts":"1478107442.001700"},{"type":"message","user":"U1HFNJB50","text":"how this expected to work in case of failure in `Commit`?","ts":"1478107463.001701"},{"type":"message","user":"U0Z541B3P","text":"Next block cannot be committed before a successful commit of previous block in any case - irrespective of whether the block contains seqNum or not","ts":"1478107581.001702"},{"type":"message","user":"U0Z541B3P","text":"Because, validation of next block depends on a successful commit of previous blocks","ts":"1478107609.001703"},{"type":"message","user":"U1HFNJB50","text":"ok","ts":"1478107708.001704"},{"type":"message","user":"U1HFNJB50","text":"I got it","ts":"1478107710.001705"},{"type":"message","user":"U1HFNJB50","text":"so that means ledgers has to have counters synced w\/ orderers?","ts":"1478107768.001706"},{"type":"message","user":"U0Z541B3P","text":"Only thing I am saying is that from ledger's perspective, we do not mind if sequence number is present in the block (and can think of using it for certain optimizations in retrieval but can live without it as well (as long as it is guaranteed to be delivered in sequence)","ts":"1478107797.001707"},{"type":"message","user":"U0Z541B3P","text":"Ledger always keep track total number of blocks committed so yes, when comes back after a crash it expects blocks from there on...","ts":"1478107876.001708"},{"type":"message","user":"U1HFNJB50","text":"so how do you make sure that block to be committed is from the next sequence number?","ts":"1478107902.001709"},{"type":"message","user":"U1HFNJB50","text":"`RemoveInvalidTransactionsAndPrepare(block)` \u2014&gt; `Commit()`","ts":"1478107930.001710"},{"type":"message","user":"U0Z541B3P","text":"You mean to say that ledger can receive blocks out of order?","ts":"1478107948.001711"},{"type":"message","user":"U1HFNJB50","text":"is there something inside ledger to prevent it?","ts":"1478107971.001712"},{"type":"message","user":"U0Z541B3P","text":"If our assumption is wrong then we would have to build it by bufferring etc... As of now, it assumes that an upper layer is doing this","ts":"1478108027.001713"},{"type":"message","user":"U0Z541B3P","text":"is this assumption wrong?","ts":"1478108057.001714"},{"type":"message","user":"U1HFNJB50","text":"not sure whenever it\u2019s wrong, but it\u2019s optimistic IMO","ts":"1478108105.001715"},{"type":"message","user":"U0Z541B3P","text":"somewhere some layer has to do ordering and not sure if this should be performed at multiple layers...","ts":"1478108180.001716"},{"type":"message","user":"U0XPR4NP4","text":"I thought the gossip layer was the one who buffered and ordered for the ledger?","ts":"1478108210.001717"},{"type":"message","user":"U0XPR4NP4","text":"(Unless the peer is pulling from the ordering service, in which case, things arrive ordered)","ts":"1478108224.001718"},{"type":"message","user":"U0Z541B3P","text":"That's what my assumption was too...","ts":"1478108225.001719"},{"type":"message","user":"U0XPR4NP4","text":"In my talks with <@U0ZJZBJLF> that has been my impression.  We have discussed how to do this properly","ts":"1478108241.001720"},{"type":"message","user":"U1HFNJB50","text":"right gossip makes sure that blocks are re-ordered according to the sequence numbers","ts":"1478108252.001721"},{"type":"message","user":"U0Z541B3P","text":"At best, in ledger - we can check that if seqNum is unexpected - raise a panic but certainly don't want to repeat what is being done by  gossip","ts":"1478108287.001722"},{"type":"message","user":"U1KFCPFQA","text":"I would agree with that approach Manish","ts":"1478108304.001723"},{"type":"message","user":"U1KFCPFQA","text":"specifically, we are talking about the new Block header \u2018Number\u2019 right","ts":"1478108333.001724"},{"type":"message","user":"U0Z541B3P","text":"Also, I am not sure whether it is meaningful have a `DataHash` inside the block?","edited":{"user":"U0Z541B3P","ts":"1478108421.000000"},"ts":"1478108364.001725"},{"type":"message","user":"U1HFNJB50","text":"well, if new ab.Block is going to replace Block2 and ledger API eventually got refactored I won\u2019t have any concerns","ts":"1478108382.001726"},{"type":"message","user":"U1KFCPFQA","text":"i believe that is the request that Manish is currently sizing","ts":"1478108416.001728"},{"type":"message","user":"U0XPR4NP4","text":"&gt; Also, I am not sure whether it is meaningfull have a \ufeff\u2060\u2060\u2060\u2060DataHash\ufeff\u2060\u2060\u2060\u2060 inside the block?\n\nI don't understand?","ts":"1478108428.001730"},{"type":"message","user":"U1HFNJB50","text":"I think the answer to this is yes","ts":"1478108482.001731"},{"type":"message","user":"U0Z541B3P","text":"I mean the data and data hash both with in the same block what significance the datahash carries?","ts":"1478108486.001732"},{"type":"message","user":"U0XPR4NP4","text":"The hash chain is among the headers","ts":"1478108505.001733"},{"type":"message","user":"U0XPR4NP4","text":"And a header can be used to validate the data section","ts":"1478108516.001734"},{"type":"message","user":"U1HFNJB50","text":"ok, I\u2019m looking on it from the ledger replication perspective, new node is joining and has to get all missing blocks to it\u2019s local ledger","ts":"1478108543.001735"},{"type":"message","user":"U1KFCPFQA","text":"and i thought another benefit was that the data can eventually be purged while leaving the headers and hashes intact, right?","ts":"1478108562.001736"},{"type":"message","user":"U0XPR4NP4","text":"Exactly.  You can for instance, present a header and signatures, without the actual block contents, and show that \"Yes, this is a part of the chain\"","ts":"1478108589.001737"},{"type":"message","user":"U1HFNJB50","text":"yeap","edited":{"user":"U1HFNJB50","ts":"1478108608.000000"},"ts":"1478108603.001738"},{"type":"message","user":"U0XPR4NP4","text":"I think this will be especially useful for things like Gossip where you want to send something which is provably chained, but not the whole block","ts":"1478108610.001740"},{"type":"message","user":"U1HFNJB50","text":"right, was going to type the exactly same argument :slightly_smiling_face: thanks <@U0XPR4NP4>","edited":{"user":"U1HFNJB50","ts":"1478108679.000000"},"ts":"1478108669.001741"},{"type":"message","user":"U0XPR4NP4","text":"While I have everyone here, something <@U0ZJZBJLF> requested, which I'm somewhat inclined to add, is to include the index of the last configuration transaction for a chain in the block header.  Because, given a block header, and a set of signatures, you need a third piece of information \"Which signatures are required\", which is embedded in the configuration transaction.  What does everyone think?","ts":"1478108757.001743"},{"type":"message","user":"U0ZJZBJLF","text":"\"provably chained\" - can be proved with the chain?","ts":"1478108759.001744"},{"type":"message","user":"U0ZJZBJLF","text":"like merkel tree, etc?","ts":"1478108780.001745"},{"type":"message","user":"U0ZJZBJLF","text":"I think that's a great idea Jason!","ts":"1478108810.001746"},{"type":"message","user":"U0ZJZBJLF","text":"more information cannot hurt :wink:","ts":"1478108818.001747"},{"type":"message","user":"U0XPR4NP4","text":"By \"provably chained\" I mean that the headers have the collection of signatures against them which \"Proves\" them.  I use this in the same sense of the hash-puzzle proof of Bitcoin.  Where the puzzle solution \"Proves\" that the header is valid","ts":"1478108831.001748"},{"type":"message","user":"U0ZJZBJLF","text":"You'll need 2 fields though, right? 1 for orderer configuration and 1 for channel membership conf","edited":{"user":"U0ZJZBJLF","ts":"1478108939.000000"},"ts":"1478108893.001749"},{"type":"message","user":"U0ZJZBJLF","text":"since I think they are different types of transactions","ts":"1478108911.001750"},{"type":"message","user":"U0XPR4NP4","text":"~Hmmm, I guess I haven't not heard about the 'validator configuration transactions', can you expand?~","edited":{"user":"U0XPR4NP4","ts":"1478108970.000000"},"ts":"1478108939.001751"},{"type":"message","user":"U0ZJZBJLF","text":"the orderer change","ts":"1478108949.001753"},{"type":"message","user":"U0XPR4NP4","text":"Ah, your edit clarified things","ts":"1478108963.001754"},{"type":"message","user":"U0XPR4NP4","text":"So no, all configuration goes into the same configuration block, both channel membership, and orderer configuration","ts":"1478108991.001756"},{"type":"message","user":"U0Z541B3P","text":"My point was why can't that be simply a single hash (previous hash + this blocks hash) and let the signing happen over that...","ts":"1478109003.001757"},{"type":"message","user":"U0XPR4NP4","text":"Because then you need the whole block to validate the hash","ts":"1478109026.001758"},{"type":"message","user":"U0XPR4NP4","text":"Whereas with the two, you only need the block headers to do so","ts":"1478109034.001759"},{"type":"message","user":"U0Z541B3P","text":"Do we need to explicitly store both previous blockhash and datahash","ts":"1478109037.001760"},{"type":"message","user":"U0Z541B3P","text":"yes, for full validation, you anyways need to verify datahash against the data...","ts":"1478109099.001761"},{"type":"message","user":"U0Z541B3P","text":"I am not sure if I am missing something here...","ts":"1478109115.001762"},{"type":"message","user":"U0ZJZBJLF","text":"wait, <@U0XPR4NP4>  isn't that a problem then? it's dangerous","ts":"1478109178.001763"},{"type":"message","user":"U0XPR4NP4","text":"For full validation yes, but there are plenty of scenarios where you don't want to validate all of the data, maybe you only want to validate say, configuration.","ts":"1478109200.001764"},{"type":"message","user":"U0ZJZBJLF","text":"no, wait, forget that.","ts":"1478109209.001765"},{"type":"message","user":"U0ZJZBJLF","text":"I'm not thinking clearly anymore at this point of the day, it's not dangerous","ts":"1478109226.001766"},{"type":"message","user":"U0XPR4NP4","text":"So, in the configuration scenario, I want to look at the blockchain, and be able to verify that the configuration in block 10 million is valid.  I don't care if the data contents of block 9,999,999 is corrupt, so I don't want to have to hash it and check it, I just care that there's a valid header chain to block 10 million","edited":{"user":"U0XPR4NP4","ts":"1478109480.000000"},"ts":"1478109300.001767"},{"type":"message","user":"U0XPR4NP4","text":"Or, maybe I don't want to keep a fully copy of the chain, because it's too big, but I also want to make sure that my copy of the chain isn't messed with.  I can just retain only the headers, which form a hash chain, so it is safely tamper proof.  Then, when I want to actually inspect a block, I go ask someone for it,and verify it against the small header chain I keep locally.","ts":"1478109383.001768"},{"type":"message","user":"U0XPR4NP4","text":"Basically, by splitting the block into header and data, it allows you to safely prune data out of your chain, without breaking the chain integrity.","ts":"1478109447.001769"},{"type":"message","user":"U0Z541B3P","text":"OK, sure. Makes sense to me. So, PreviousHash is the hash of the 'header' of the previous block?","ts":"1478109604.001771"},{"type":"message","user":"U0XPR4NP4","text":"Exactly","ts":"1478109610.001772"},{"type":"message","user":"U0Z541B3P","text":"That means that I would require two hash computations per block?","ts":"1478109680.001773"},{"type":"message","user":"U0XPR4NP4","text":"Well, from a ledger perspective, that depends.  Does the ledger actually ensure there is a hash chain?","ts":"1478109707.001774"},{"type":"message","user":"U0ZJZBJLF","text":"so when you get a block `i` you verify `header(i)` against body of the block `i` and also against the hash of the header of `i-1` then commit it?","ts":"1478109717.001775"},{"type":"message","user":"U0XPR4NP4","text":"I sort of assumed that the ledger is handed a block which is known to be valid.  And it just applied the block contents.  You could obviously check the hashes and so forth, but I had assumed this was handled further up.","ts":"1478109756.001776"},{"type":"message","user":"U0ZJZBJLF","text":"and where is the signature in all that? in some wrapper that wraps the block?","ts":"1478109802.001777"},{"type":"message","user":"U0Z541B3P","text":"OK, I did not assume so... if someone is doing is up, I can skip this...","ts":"1478109805.001778"},{"type":"message","user":"U0ZJZBJLF","text":"or in the header also?","ts":"1478109807.001779"},{"type":"message","user":"U0XPR4NP4","text":"I'm also unsure, do we still have the notion of the 'validated ledger'? I wasn't sure if that made it into v1","ts":"1478109812.001780"},{"type":"message","user":"U0Z541B3P","text":"yes, we have a 'validated ledger'.. unless, it's changed :slightly_smiling_face:","ts":"1478109843.001781"},{"type":"message","user":"U0ZJZBJLF","text":"from what I understand, validating blocks will be locally in the ledger, so in v1.0 there won't be validation like they want with gossip, etc.","ts":"1478109851.001782"},{"type":"message","user":"U0XPR4NP4","text":"So in that case, you're generating a new block from the raw block and committing it?","ts":"1478109862.001783"},{"type":"message","user":"U0Z541B3P","text":"yes","ts":"1478109875.001784"},{"type":"message","user":"U0XPR4NP4","text":"When a block arrives, either via gossip, or via the ordering service.  The first step is going to be to make sure that the block is well formed, that the signatures over the header are correct, and that the header's hashes match (both data and previous).","ts":"1478109911.001785"},{"type":"message","user":"U0XPR4NP4","text":"Or, this is my assumption, at least.","ts":"1478109919.001786"},{"type":"message","user":"U0XPR4NP4","text":"If this layer does not do this, then the signature validation is a little weird to me.  Because we verify a signature, but not that the hash it's signed over is valid?","ts":"1478109987.001787"},{"type":"message","user":"U0ZJZBJLF","text":"wait, how is it possible that the sig is valid but the hash isn't?","ts":"1478110021.001788"},{"type":"message","user":"U0Z541B3P","text":"I am assuming that someone doing it on top... is gossip doing this?","ts":"1478110023.001789"},{"type":"message","user":"U0ZJZBJLF","text":"why would we validate with the hash","ts":"1478110036.001790"},{"type":"message","user":"U0ZJZBJLF","text":"?","ts":"1478110038.001791"},{"type":"message","user":"U0Z541B3P","text":"because, signature are for hash and data is separate...","ts":"1478110058.001792"},{"type":"message","user":"U1HFNJB50","text":"I though committer is expected to do it","ts":"1478110068.001793"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZJZBJLF> I mean, the signature is over the hash of the header.  But if the header does not correspond to the block contents, then the signature is 'valid' but it's not valid over 'this block'","ts":"1478110072.001794"},{"type":"message","user":"U0ZJZBJLF","text":"but, if the block is properly signed then it means a write-quorum of orderers made that block","ts":"1478110078.001795"},{"type":"message","user":"U0ZJZBJLF","text":"oh I thought the sig is on the whole block","ts":"1478110094.001796"},{"type":"message","user":"U0ZJZBJLF","text":"wait, I now I'm confused","ts":"1478110109.001797"},{"type":"message","user":"U0XPR4NP4","text":"Ah, no, signature is over the header.  Has to be, otherwise you lose the prunability","ts":"1478110110.001798"},{"type":"message","user":"U0Z541B3P","text":"signature are always on hash...","ts":"1478110112.001799"},{"type":"message","user":"U0ZJZBJLF","text":"a block has a deader and a body, right?","ts":"1478110116.001800"},{"type":"message","user":"U0XPR4NP4","text":"Right, hash of the header","ts":"1478110119.001801"},{"type":"message","user":"U0ZJZBJLF","text":"I'm a gossip component","ts":"1478110131.001802"},{"type":"message","user":"U0ZJZBJLF","text":"I get a block","ts":"1478110134.001803"},{"type":"message","user":"U0ZJZBJLF","text":"I look at the header and at the body","ts":"1478110139.001804"},{"type":"message","user":"U0ZJZBJLF","text":"the header is signed, everything is A-OK","ts":"1478110147.001805"},{"type":"message","user":"U0XPR4NP4","text":"No","ts":"1478110152.001806"},{"type":"message","user":"U0ZJZBJLF","text":"wait, I'm going somewhere","ts":"1478110158.001807"},{"type":"message","user":"U0XPR4NP4","text":"Okay, I say, 'not good enough', but go on","ts":"1478110166.001808"},{"type":"message","user":"U0ZJZBJLF","text":"how do I validate the body assuming the header is properly signed?","ts":"1478110171.001809"},{"type":"message","user":"U0XPR4NP4","text":"You look at the `DataHash` field, and you compute the hash of the `BlockData` and make sure they match","ts":"1478110188.001810"},{"type":"message","user":"U0XPR4NP4","text":"Otherwise, I could just take a valid header, and send you garbage block contents","ts":"1478110199.001811"},{"type":"message","user":"U0ZJZBJLF","text":"oh so I need to hash the body, see that the header's body-hash is equal and then verify the sig?","ts":"1478110224.001812"},{"type":"message","user":"U0XPR4NP4","text":"Exactly.","ts":"1478110244.001813"},{"type":"message","user":"U0ZJZBJLF","text":"that has nothing to do with looking at the previous hash though","ts":"1478110256.001814"},{"type":"message","user":"U0XPR4NP4","text":"To me, the hash of the body matching the hash encoded in the header is part of the block being 'well formed'","ts":"1478110260.001815"},{"type":"message","user":"U0ZJZBJLF","text":"I expect the ledger to do that","ts":"1478110264.001816"},{"type":"message","user":"U0Z541B3P","text":"you also need to look at the previous block hash separately","ts":"1478110271.001817"},{"type":"message","user":"U0ZJZBJLF","text":"why do *i* need to do that though?","ts":"1478110282.001818"},{"type":"message","user":"U0XPR4NP4","text":"If you have a valid block, and the previous block hash does not match, then we have a serious problem.  A sort of \"Panic and call the admins\" sort of problem","ts":"1478110302.001819"},{"type":"message","user":"U1HFNJB50","text":"<@U0ZJZBJLF>: I think this should capability of committer rather than ledger","ts":"1478110306.001820"},{"type":"message","user":"U0ZJZBJLF","text":"I'm asking, how is it possible that a block passed verification and *doesn't* match the prev hash?","ts":"1478110307.001821"},{"type":"message","user":"U0XPR4NP4","text":"That would only happen if the system is broken","ts":"1478110319.001822"},{"type":"message","user":"U0ZJZBJLF","text":"yeah so don't you agree (Jason) that this is a very rare case, and therefore- the gossip layer should not do the book keeping of the prev hash","ts":"1478110348.001823"},{"type":"message","user":"U0XQ35CDD","text":"What is exactly the use of this?","attachments":[{"fallback":"[November 2nd, 2016 1:45 PM] jyellick: While I have everyone here, something <@U0ZJZBJLF> requested, which I'm somewhat inclined to add, is to include the index of the last configuration transaction for a chain in the block header.  Because, given a block header, and a set of signatures, you need a third piece of information \"Which signatures are required\", which is embedded in the configuration transaction.  What does everyone think?","ts":"1478108757.001743","author_subname":"jyellick","channel_id":"C2GE7GXM1","channel_name":"fabric-crypto","is_msg_unfurl":true,"text":"While I have everyone here, something <@U0ZJZBJLF> requested, which I'm somewhat inclined to add, is to include the index of the last configuration transaction for a chain in the block header.  Because, given a block header, and a set of signatures, you need a third piece of information \"Which signatures are required\", which is embedded in the configuration transaction.  What does everyone think?","author_name":"Jason Yellick","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/jyellick","author_icon":"https:\/\/secure.gravatar.com\/avatar\/80fccad690b283483c3b5418b8b82b5b.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F272a%2Fimg%2Favatars%2Fava_0026-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1478108757001743","is_share":true,"footer":"Posted in #fabric-crypto"}],"ts":"1478110352.001824"},{"type":"message","user":"U0ZJZBJLF","text":"kostas- I can use that information to know when it's safe to relay a block","ts":"1478110373.001825"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZJZBJLF> I'm fine with the committing layer doing the previous block hash check, but not the data hash one","edited":{"user":"U0XPR4NP4","ts":"1478110392.000000"},"ts":"1478110379.001826"},{"type":"message","user":"U0ZJZBJLF","text":"oh I don't mind that we do the hashing, I think that it's supposed to be in our layer","ts":"1478110401.001828"},{"type":"message","user":"U0XQ35CDD","text":"<@U0ZJZBJLF>: You cannot.","ts":"1478110403.001829"},{"type":"message","user":"U0ZJZBJLF","text":"but we need an API change for that hash thing :slightly_smiling_face:","ts":"1478110411.001830"},{"type":"message","user":"U0ZJZBJLF","text":"kostas- can you elaborate?","ts":"1478110422.001831"},{"type":"message","user":"U0XQ35CDD","text":"Sure.","ts":"1478110513.001832"},{"type":"message","user":"U0XQ35CDD","text":"As I had noted in that phone call a couple of weeks ago. I am a Byzantine orderer, sending out block 120 that says \"by the way the last configuration transaction for this chain is at block 100\". (Block 100 is a config transaction that includes me as an orderer.) Meanwhile, at block 110, a new config was posted and the orderer network kicked me out, or whatever.","ts":"1478110620.001833"},{"type":"message","user":"U0XQ35CDD","text":"So I'm pointing you to stale information and make you believe that you're good to relay the block.","ts":"1478110638.001834"},{"type":"message","user":"U0ZJZBJLF","text":"wait wait wait","ts":"1478110645.001835"},{"type":"message","user":"U0ZJZBJLF","text":"I first validate the block","ts":"1478110652.001836"},{"type":"message","user":"U0ZJZBJLF","text":"how can you make that data block be signed?","ts":"1478110668.001837"},{"type":"message","user":"U0ZJZBJLF","text":"i validate it with the latest conf I have","ts":"1478110683.001838"},{"type":"message","user":"U0XQ35CDD","text":"If you validate that block, and by validate you mean that you have all of the chain before it, why do you need that extra bit of info to begin with?","ts":"1478110708.001839"},{"type":"message","user":"U0ZJZBJLF","text":"no","ts":"1478110736.001840"},{"type":"message","user":"U0ZJZBJLF","text":"that's not what I mean","ts":"1478110743.001841"},{"type":"message","user":"U0ZJZBJLF","text":"I mean- when I get a block that claims the last config to be block `100`, all orderers needed to sign that block","ts":"1478110812.001842"},{"type":"message","user":"U0ZJZBJLF","text":"so how do you make it happen?","ts":"1478110825.001843"},{"type":"message","user":"U0XQ35CDD","text":"Block 100 is signed by all orderers, or block 122 that you just received?","ts":"1478110844.001844"},{"type":"message","user":"U0ZJZBJLF","text":"122","ts":"1478110851.001845"},{"type":"message","user":"U0XQ35CDD","text":"Did I miss the memo about the blocks having to be signed by all orderers?","ts":"1478110884.001846"},{"type":"message","user":"U0XQ35CDD","text":"Unless we talk f+1, etc.","ts":"1478110898.001847"},{"type":"message","user":"U0ZJZBJLF","text":"yeah, not all","ts":"1478110902.001848"},{"type":"message","user":"U0ZJZBJLF","text":"f+1","ts":"1478110906.001849"},{"type":"message","user":"U0XQ35CDD","text":"So it can certainly happen.","ts":"1478110918.001850"},{"type":"message","user":"U0ZJZBJLF","text":"you're talking about a configuration increase now?","ts":"1478110919.001851"},{"type":"message","user":"U0ZJZBJLF","text":"so f+1 is less than f'+1?","ts":"1478110931.001852"},{"type":"message","user":"U0ULK2JPP","text":"so \u2026.apologize for jumping in\u2026 this started with discussion on consolidating ab.Block2 with fabric.Block","ts":"1478110939.001853"},{"type":"message","user":"U0XQ35CDD","text":"Because a part of those those orderers were kicked out between block 100 and 110.","ts":"1478110940.001854"},{"type":"message","user":"U0ZJZBJLF","text":"if orderers were kicked out that's the happy path","ts":"1478110964.001855"},{"type":"message","user":"U0ZJZBJLF","text":"you won't have enough signatures because you can't gather f+1, because you didn't increase N","edited":{"user":"U0ZJZBJLF","ts":"1478111074.000000"},"ts":"1478110971.001856"},{"type":"message","user":"U0ZJZBJLF","text":"am i right?","ts":"1478110976.001857"},{"type":"message","user":"U0ULK2JPP","text":"<@U0Z541B3P> <@U1KFCPFQA> <@U1HFNJB50> <@U0XPR4NP4> \u2026 what happened to that discussion ?","ts":"1478110978.001858"},{"type":"message","user":"U0XQ35CDD","text":"<@U0ULK2JPP> I can defer the conversation for later, but I'm responding to this call in here 20m ago: <https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1478108757001743>","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1478108757001743","fallback":"[November 2nd, 2016 10:45 AM] jyellick: While I have everyone here, something <@U0ZJZBJLF> requested, which I'm somewhat inclined to add, is to include the index of the last configuration transaction for a chain in the block header.  Because, given a block header, and a set of signatures, you need a third piece of information \"Which signatures are required\", which is embedded in the configuration transaction.  What does everyone think?","ts":"1478108757.001743","author_subname":"jyellick","channel_id":"C2GE7GXM1","channel_name":"fabric-crypto","is_msg_unfurl":true,"text":"While I have everyone here, something <@U0ZJZBJLF> requested, which I'm somewhat inclined to add, is to include the index of the last configuration transaction for a chain in the block header.  Because, given a block header, and a set of signatures, you need a third piece of information \"Which signatures are required\", which is embedded in the configuration transaction.  What does everyone think?","author_name":"Jason Yellick","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/jyellick","author_icon":"https:\/\/secure.gravatar.com\/avatar\/80fccad690b283483c3b5418b8b82b5b.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F272a%2Fimg%2Favatars%2Fava_0026-48.png","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-crypto"}],"ts":"1478111000.001859"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ULK2JPP> I think it's known that my vote is 'do it', with respect to <@U1KFCPFQA> and <@U0Z541B3P> I don't recall any real endorsement or objection","ts":"1478111060.001861"},{"type":"message","user":"U0Z541B3P","text":"<@U0XPR4NP4> - again one doubt on the block header. Let me know what am I missing if I say the following for your scenario of selective chain verification (without full data validation).\nLet's have a single field in the header called blockhash (which is computed as 'previous blockhash + blockdata'). For selective verification, why can't one take the field value itself for granted when it can take it's hash for granted?","ts":"1478111083.001863"},{"type":"message","user":"U0XPR4NP4","text":"<@U0Z541B3P> I give you a series of 3 headers and 3 signature sets, for blocks 1, 2, 3. And no block contents.  How do I validate that no one has modified the header of block 2, without retrieving any block contents?","ts":"1478111199.001864"},{"type":"message","user":"U0XQ35CDD","text":"(<@U0ZJZBJLF>: Say you need 4 signatures. You understand that these 4 signatures can be valid based on block 100, but invalid based on block 110 right? So if these 4 signatures are referenced in block 122 and they're saying \"you can totally trust us because they last config block is 100\" you're setting yourself up for failure.)","ts":"1478111250.001865"},{"type":"message","user":"U0XQ35CDD","text":"(Let's take this to gossip-dev.)","ts":"1478111282.001866"},{"type":"message","user":"U0ZJZBJLF","text":"sure","ts":"1478111287.001867"},{"type":"message","user":"U0Z541B3P","text":"But for validating the header you need the content anyway... no?","ts":"1478111311.001868"},{"type":"message","user":"U0XPR4NP4","text":"Why?","ts":"1478111369.001869"},{"type":"message","user":"U0XPR4NP4","text":"I can give you a sequence of headers, and you can validate that they hash chain together, and have the appropriate signatures?","ts":"1478111391.001870"},{"type":"message","user":"U0XPR4NP4","text":"So if someone were to modify block 2's header, the hash chain would break","ts":"1478111405.001871"},{"type":"message","user":"U0Z541B3P","text":"What am I missing here is that... we are trusting the signatures. What is wrong if those signatures sign the header with just one field in it and we simply trust that as well...","ts":"1478111615.001872"},{"type":"message","user":"U0XPR4NP4","text":"Two-fold","ts":"1478111660.001873"},{"type":"message","user":"U0XPR4NP4","text":"One, checking signatures is much slower.  Two, you can actually safely prune signatures as well, so long as your most recent block has signatures, there's no need to retain any of the past ones.","ts":"1478111692.001874"},{"type":"message","user":"U1HFNJB50","text":"<@U0ULK2JPP>: I have clarified for me  assumptions made for ledger API and given that ab.Block has been merged the only missing part if refactoring of ledger API to incorporate nee Block","ts":"1478111725.001875"},{"type":"message","user":"U1HFNJB50","text":"i believe I can make further progress  now","ts":"1478111789.001876"},{"type":"message","user":"U0Z541B3P","text":"May be I am missing something very basic... but not able to get why two fields can be trusted and one cannot ...","ts":"1478111870.001877"},{"type":"message","user":"U0XPR4NP4","text":"Given block headers 1, 2, 3, and signatures over block 3.  How can I detect a modification to block header 1 or 2 (without their corresponding data) if the hash includes that data?","ts":"1478111948.001878"},{"type":"message","user":"U0Z541B3P","text":"my only point is that you are trusting on datahash... cannot we just trust on 'data+previoushash'","ts":"1478112017.001879"},{"type":"message","user":"U0Z541B3P","text":"for full validation anyways data is needed","ts":"1478112031.001880"},{"type":"message","user":"U0XR6J961","text":"answer: it's how bitcoin does it","ts":"1478112107.001881"},{"type":"message","user":"U0Z541B3P","text":"I am fine..If that's the reasoning... was just trying to understand the logic.","ts":"1478112178.001882"},{"type":"message","user":"U0XPR4NP4","text":"Bitcoin does it that way, which I think is worth emulating if only for the familiarity.  And I still maintain there are concrete advantages for having the hash chain over the headers, like signature pruning, and hash verification being faster than signature verification.","ts":"1478112281.001883"},{"type":"message","user":"U0ULK2JPP","text":"does it sound reasonable <@U0XPR4NP4> <@U0Z541B3P> to incorporate the new Block into ledger ( <@U1HFNJB50> is unblocked from implementation but dependent on the consolidation on testing)","ts":"1478113214.001884"},{"type":"message","user":"U0Z541B3P","text":"yes <@U0ULK2JPP>. We will have to make changes in the ledger code... will discuss in the ledger scrum tomorrow","ts":"1478113317.001885"},{"type":"message","user":"U0ULK2JPP","text":"perfect","ts":"1478113326.001886"},{"type":"message","user":"U0XPR4NP4","text":"Sounds good to me","ts":"1478113336.001887"},{"type":"message","user":"U1KFCPFQA","text":"manish, i think you can prioritize the block structure work","ts":"1478113346.001888"},{"type":"message","user":"U1KFCPFQA","text":"the other items you are working on can get pushed back, better to consolidate the blocks sooner than later","ts":"1478113374.001889","reactions":[{"name":"+1","users":["U0ULK2JPP","U1HFNJB50"],"count":2}]},{"type":"message","user":"U0Z541B3P","text":"yes... Let's discuss tomorrow in detail...","ts":"1478113417.001890"},{"type":"message","user":"U1KFCPFQA","text":"sure thing, just wanted to give you the green light to work on it tomorrow before scrum","ts":"1478113438.001891"},{"type":"message","user":"U1KFCPFQA","text":"my last question on this topic - is PreviousHash a hash of the previous header itself?  or a hash of the previous header\u2019s DataHash?","ts":"1478113486.001892"},{"type":"message","user":"U0Z541B3P","text":"hash of the previous header","ts":"1478113525.001893"},{"type":"message","user":"U1KFCPFQA","text":"ok, which includes DataHash","ts":"1478113540.001894"},{"type":"message","user":"U0Z541B3P","text":"otherwise, you would miss the blocks below the previous block","edited":{"user":"U0Z541B3P","ts":"1478113560.000000"},"ts":"1478113542.001895"},{"user":"U2Y2V95D2","text":"<@U2Y2V95D2|alanlee> has joined the channel","type":"message","subtype":"channel_join","ts":"1478142438.001897"},{"type":"message","user":"U1BC5A0F9","text":"Hi all, please find here <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2243\/> a proposal for identity provider interface. Any feedback would be welcome!","ts":"1478265471.001898"},{"type":"message","user":"U0PB67X4K","text":"<@U1BC5A0F9> - be careful what you ask for!   :wink:","ts":"1478266340.001899"},{"type":"message","user":"U1BC5A0F9","text":"Should i have just remained silent? :zipper_mouth_face: :smiley:","ts":"1478266375.001900"},{"type":"message","user":"U0PB67X4K","text":"hehe","ts":"1478266387.001901"},{"type":"message","user":"U0XR6J961","text":"i can't help anymore - this system has exceeded my complexity threshold","ts":"1478267355.001902"},{"type":"message","user":"U0ZR63HLK","text":"<@U0XR6J961> do you think the Identity Provider is too complex?","ts":"1478271758.001903"},{"type":"message","user":"U0XR6J961","text":"no, i think fabric is too complex","ts":"1478271807.001904"},{"type":"message","user":"U0XR6J961","text":"and not properly layered","ts":"1478271813.001905"},{"type":"message","user":"U0XR6J961","text":"and overengineered","ts":"1478271816.001906"},{"type":"message","user":"U0XR6J961","text":"i.e. it's an \"enterprise\" product","ts":"1478271844.001907"},{"type":"message","user":"U0PB67X4K","text":"<@U0ZR63HLK> - I'm working on my comments for the IDP","ts":"1478271924.001908"},{"type":"message","user":"U0ZR63HLK","text":"thanks a lot :slightly_smiling_face:","ts":"1478271960.001909"},{"type":"message","user":"U0ZR63HLK","text":"<@U0XR6J961>, do you have specific comments regarding the security part of the fabric? I would be interested on hearing that :slightly_smiling_face:","ts":"1478272010.001910"},{"type":"message","user":"U0XR6J961","text":"no i don't, because fabric exceeds my complexity threshold","ts":"1478272110.001911"},{"type":"message","user":"U0ZR63HLK","text":"come on, to improve we need your comments","ts":"1478272132.001912"},{"type":"message","user":"U0ZR63HLK","text":"do you have specific points in mind?","ts":"1478272154.001913"},{"type":"message","user":"U0XR6J961","text":"and that whole channel+reconfig for new channels thing is just so stupid","ts":"1478272155.001914"},{"type":"message","user":"U0ZR63HLK","text":"which aspect, the combination of channels and PBFT?","ts":"1478272191.001915"},{"type":"message","user":"U0XR6J961","text":"no, the fact that there are channels","ts":"1478272225.001916"},{"type":"message","user":"U0ZR63HLK","text":"as a solution to address confidentiality or what?","ts":"1478272246.001917"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1478272332.001918"},{"type":"message","user":"U0XR6J961","text":"and at all","ts":"1478272338.001919"},{"type":"message","user":"U0PB67X4K","text":"so what's your alternative suggestion?","ts":"1478272354.001920"},{"type":"message","user":"U0XR6J961","text":"the whole point of a blockchain is a shared data base","ts":"1478272357.001921"},{"type":"message","user":"U0XR6J961","text":"run separate chains instead of channels","ts":"1478272370.001922"},{"type":"message","user":"U0XR6J961","text":"if you really need it","ts":"1478272374.001923"},{"type":"message","user":"U0ZR63HLK","text":"that can be already done, no? But if you have a use-case that requires sharing the ordering service with v1 you will be able to have it, no?","edited":{"user":"U0ZR63HLK","ts":"1478272536.000000"},"ts":"1478272438.001924"},{"type":"message","user":"U0PB67X4K","text":"<@U0XR6J961> - I guess somewhere along the way you missed the fact that in the end what people want is not actually the traditional definition of a blockchain.","ts":"1478272468.001925"},{"type":"message","user":"U0XR6J961","text":"faster horse carriages, etc.","ts":"1478272525.001926"},{"type":"message","user":"U0PB67X4K","text":"now perhaps the alternative would be to create multiple \"consensus\" groups within the peer to peer communication - that was an alternative","ts":"1478272532.001927"},{"type":"message","user":"U0PB67X4K","text":"modify endorsement to actually be consensus among small groups","ts":"1478272547.001929"},{"type":"message","user":"U0XR6J961","text":"right now it sounds like a pub sub service","ts":"1478272569.001930"},{"type":"message","user":"U0XR6J961","text":"a trusted pub sub service","ts":"1478272625.001931"},{"user":"U0N4P17ND","text":"<@U0N4P17ND|oiakovlev> has joined the channel","type":"message","subtype":"channel_join","ts":"1478275547.001932"},{"type":"message","user":"U0N4P17ND","text":"QQ: in v1 we'll have plug-able certificate authority but if Customer needs some custom encryption mechanism will it be possible or not really? This is the question from the bank and it occurs that central authority might not be ok, with SHA3, for example but provides something different...","ts":"1478275569.001933"},{"type":"message","user":"U0ZR63HLK","text":"Hi <@U0N4P17ND>, that is definitively a goal  that we are pursuing. That's the reason why the BCCSP has been introduced","ts":"1478276537.001934"},{"type":"message","user":"U0N4P17ND","text":"<@U0ZR63HLK> so just to make clear - is it on roadmap for v1 for next year?","ts":"1478277272.001935"},{"type":"message","user":"U0ZR63HLK","text":"<@U0PB67X4K> can tell you more on this :slightly_smiling_face:","ts":"1478277301.001936"},{"type":"message","user":"U0XPR4NP4","text":"Dumb question, what does BCCSP stand for?","ts":"1478280310.001937"},{"type":"message","user":"U0XPR4NP4","text":"Blockchain Crypto Service Provider?","ts":"1478280344.001938"},{"type":"message","user":"U0ZR63HLK","text":"yes :slightly_smiling_face:","ts":"1478280624.001939"},{"type":"message","user":"U0XPR4NP4","text":"Great, whenever I see \"CC\" in an acronym it makes me think 'chaincode' ala VSCC ESCC etc., wanted to make sure","ts":"1478280655.001940"},{"type":"message","user":"U0PB67X4K","text":"<@U0ZR63HLK> - can you amend this change set (even though we already merged it  - sloppiness on our part) - <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2107\/3>   -  it's missing license headers","ts":"1478351086.001941"},{"type":"message","user":"U0ZR63HLK","text":"Hi <@U0PB67X4K>, sure. Sorry, it's my fault. I always forget to check the license :(","ts":"1478351154.001942"},{"type":"message","user":"U0PB67X4K","text":"we missed it as well","ts":"1478351173.001943"},{"type":"message","user":"U0PB67X4K","text":"we should add a check in CI  :wink:   -  let me get on that","ts":"1478351200.001944"},{"type":"message","user":"U0PB67X4K","text":"we don't want <@U0KM61BCP> to be angry  :wink:","ts":"1478351572.001945"},{"type":"message","user":"U0KM61BCP","text":"can't get angry... on vacation:-)","ts":"1478351617.001946"},{"type":"message","user":"U0KM61BCP","text":"adding a check would be good idea","ts":"1478351633.001947"},{"type":"message","user":"U0ZR63HLK","text":"<@U0PB67X4K> <@U0KM61BCP> I have submitted a new change-set to update the license headers: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2277>","ts":"1478504006.001948"},{"type":"message","user":"U0ZR63HLK","text":"I wasn't able to amend the original change-set because it is closed.","ts":"1478504019.001949"},{"type":"message","user":"U0PB67X4K","text":"thanks <@U0ZR63HLK> - just saw it","ts":"1478512933.001950"},{"type":"message","user":"U0PB67X4K","text":"<@U0ZR63HLK> - in my process of removing membersrvc from fabric master repo, I also removed most of the code in core\/crypto as well (it was just too intertwined to try to modify).   Check out <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2273>","ts":"1478514943.001951"},{"type":"message","user":"U0PB67X4K","text":"I tried to leave placeholders in parts of the code which used to call the various crypto clients so that we can integrate the new crypto \/ idp code","ts":"1478514988.001952"},{"type":"message","user":"U0ZR63HLK","text":"Hi <@U0PB67X4K>, why are removing the code before having the idp working? Just to understand","ts":"1478527089.001953"},{"type":"message","user":"U0ZR63HLK","text":"I would have thought to have first the idp working and then the unnecessary crypto part removed.","ts":"1478528696.001954"},{"type":"message","user":"U0ZR63HLK","text":"Of course, I agree that ad then v1 will not have those files anyway","ts":"1478528714.001955"},{"type":"message","user":"U0PB67X4K","text":"I think it's easier this way","edited":{"user":"U0PB67X4K","ts":"1478529148.000000"},"ts":"1478529107.001956"},{"type":"message","user":"U0PB67X4K","text":"I left the plug points - you'll see a bunch of TODO comments","ts":"1478529119.001957"},{"type":"message","user":"U0PB67X4K","text":"plus I could not easily remove membersrvc without removing the crypto stuff","ts":"1478529133.001958"},{"type":"message","user":"U0PB67X4K","text":"this way we can add things one at a time -  load identity for the peer, use identity to sign, etc","ts":"1478529182.001960"},{"type":"message","user":"U0PB67X4K","text":"I believe that's the way to go having followed the opposite approach of incrementally replacing in other areas and I don't think it works well","ts":"1478529213.001961"},{"type":"message","user":"U0ZR63HLK","text":"okay, got it. Thanks :slightly_smiling_face:","ts":"1478531318.001962"},{"type":"message","user":"U0ZR63HLK","text":"I gave my +1. I cannot give +2","ts":"1478531361.001963"},{"type":"message","user":"U0ZR63HLK","text":":slightly_smiling_face:","ts":"1478531364.001964"},{"type":"message","user":"U0ULK2JPP","text":"btw, I know you are busy with BCCSP\u2026 so that\u2019s why thought it was great when Gari volunteered\u2026 hope you were ok with that ...","ts":"1478532196.001965"},{"type":"message","user":"U0ZR63HLK","text":"sure, thanks :slightly_smiling_face:","ts":"1478532881.001966"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ULK2JPP> or anyone else, would appreciate some additional review so that we can get this in before it needs to be rebased again <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2075\/>","ts":"1478537890.001967"},{"type":"message","user":"U0XPR4NP4","text":"(Also <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2153\/> )","ts":"1478537908.001968"},{"type":"message","user":"U0PB67X4K","text":"I changed my +1's to +2's so just need some other review(s)","ts":"1478540041.001969"},{"type":"message","user":"U0PB67X4K","text":"<@U0ZR63HLK> - for PKCS11 \/ HSM, is the plan to test against SoftHSM by default?","ts":"1478545912.001970"},{"type":"message","user":"U0PB67X4K","text":"just wondering if we need to start thinking about how to add it into our CI, etc","ts":"1478545927.001971"},{"type":"message","user":"U0ZR63HLK","text":"Actually, I have been talking about this with Tamas. I would love to have it in. I will have probably more info already tomorrow. I will tell you asap","ts":"1478547883.001972"},{"type":"message","user":"U0PB67X4K","text":"no worries - you know I get random thoughts so just decided I'll ping'em as they come up","edited":{"user":"U0PB67X4K","ts":"1478547977.000000"},"ts":"1478547960.001973"},{"type":"message","user":"U0PB67X4K","text":"<@U0ZR63HLK> <@U1BC5A0F9>  - been looking at <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2243\/2\/idp\/idp.go> and all of the comments as well","ts":"1478607619.001975"},{"type":"message","user":"U0PB67X4K","text":"here's my take - I think we are trying to bite off too much here on the first go around","ts":"1478607644.001976"},{"type":"message","user":"U0PB67X4K","text":"I think we need to start simple and then back into \/ expand out to more functionality","ts":"1478607671.001977"},{"type":"message","user":"U0PB67X4K","text":"basically, from a fabric and orderer perspective, what we need to start with are the Identity and SigningIdentity interfaces and concrete implementation of PeerIdentity and OrdererIdentity  (the peer one might be tricky in that a concrete PeerIdentity may not always be a SigningIdentity)","ts":"1478607825.001978"},{"type":"message","user":"U1BC5A0F9","text":"Hm So why would peer identity and orderer identity would be different you think?","ts":"1478607961.001979"},{"type":"message","user":"U1BC5A0F9","text":"I mean generically defined one can have a different provider for each of them true","ts":"1478607981.001980"},{"type":"message","user":"U0PB67X4K","text":"I think we have a use case we can try here:\n\n1) fabric-cop can generate \"enrollment\" credentials\n2) we can create a PeerIdentity from those credentials (would be a file-based provider later on)\n3) we can leverage that identity to sign endorsements\n\nthe other side:\n\n4) on the verifying of endorsements, we need to create a PeerIdentity from the public cert used to sign (in steps 1-3 above)\n5) we use that identity to verify the endorsement signature","ts":"1478607989.001981"},{"type":"message","user":"U0PB67X4K","text":"well not sure if they would ever have different fields","ts":"1478608009.001982"},{"type":"message","user":"U1BC5A0F9","text":"aha","ts":"1478608024.001983"},{"type":"message","user":"U0PB67X4K","text":"but we could go with FabricIdentity or something as well","ts":"1478608026.001984"},{"type":"message","user":"U1BC5A0F9","text":"but in the test file i think at least for verification we follow the same steps","ts":"1478608040.001985"},{"type":"message","user":"U1BC5A0F9","text":"here","ts":"1478608045.001986"},{"type":"message","user":"U0ZR63HLK","text":"the use case makes sense to me and I think we would have started anyway from that","ts":"1478608050.001987"},{"type":"message","user":"U0PB67X4K","text":"yeah - of course - you can't really start anywhere else  :wink:","ts":"1478608076.001988"},{"type":"message","user":"U0ZR63HLK","text":"indeed :slightly_smiling_face:","ts":"1478608081.001989"},{"type":"message","user":"U0PB67X4K","text":"but don't steal my thunder!   hehe","ts":"1478608096.001990"},{"type":"message","user":"U1BC5A0F9","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2243\/2\/idp\/idp-tests.go>","ts":"1478608103.001991"},{"type":"message","user":"U0ZR63HLK","text":":stuck_out_tongue:","ts":"1478608105.001992"},{"type":"message","user":"U1BC5A0F9","text":":smile:","edited":{"user":"U1BC5A0F9","ts":"1478608109.000000"},"ts":"1478608106.001993"},{"type":"message","user":"U1BC5A0F9","text":"never!","ts":"1478608114.001995"},{"type":"message","user":"U0ZR63HLK","text":"yes, we added the tests there exactly to show also a flow","ts":"1478608132.001996"},{"type":"message","user":"U0ZR63HLK","text":"I agree, anyway. It is better to start from the simple scenarios","ts":"1478608159.001997"},{"type":"message","user":"U1BC5A0F9","text":"So the flow is simple on the peer side doing verification","ts":"1478608162.001998"},{"type":"message","user":"U0PB67X4K","text":"this way we can get some basics committed and argue about the more \"complex\" interfaces as we go","ts":"1478608194.001999"},{"type":"message","user":"U0PB67X4K","text":"clearly Identity and SigningIdentity are straight forward","ts":"1478608211.002000"},{"type":"message","user":"U1BC5A0F9","text":"correct","ts":"1478608244.002001"},{"type":"message","user":"U0PB67X4K","text":"else I fear we won't be able to hook into the ESCC and VSCC flows early enough to see if we are right or wrong","ts":"1478608247.002002"},{"type":"message","user":"U0PB67X4K","text":"just my 2 cents","ts":"1478608258.002003"},{"type":"message","user":"U1BC5A0F9","text":"more complex, and attribute based functionalities are anyway to be used as of now only byu the application","ts":"1478608266.002004"},{"type":"message","user":"U1BC5A0F9","text":"and not the peer\/validator","ts":"1478608270.002005"},{"type":"message","user":"U0PB67X4K","text":"right","ts":"1478608278.002006"},{"type":"message","user":"U1BC5A0F9","text":"we will start from the identity interfaces that are the basic ones, and then we see from there what we need more int erms of attributes","ts":"1478608293.002007"},{"type":"message","user":"U0PB67X4K","text":"sounds good","ts":"1478608308.002008"},{"type":"message","user":"U0PB67X4K","text":"and I'll keep pushing your change sets as they come in","ts":"1478608323.002009"},{"type":"message","user":"U0PB67X4K","text":"trying too keep this stuff moving","ts":"1478608328.002010"},{"type":"message","user":"U0PB67X4K","text":"off to cause trouble elsewhere!  ttyl","ts":"1478608387.002011"},{"type":"message","user":"U1BC5A0F9","text":":grinning:","ts":"1478608404.002012"},{"type":"message","user":"U1BC5A0F9","text":"Good luck!","ts":"1478608409.002013"},{"type":"message","user":"U0ZR63HLK","text":"heheheh","ts":"1478608696.002014"},{"user":"U1M9R3C8Z","text":"<@U1M9R3C8Z|rascal> has joined the channel","type":"message","subtype":"channel_join","ts":"1478609978.002015"},{"type":"message","user":"U184J2R7S","text":"quick meeting- Keith: you as the node sdk- you have to plug in multiple identity providers. So somewhere there is an API to be able to talk to that.  -Jim:  But an MSP for SDK, does not mean registration and enroll.  Sometimes enroll is provided by ecerts are put in place where i can get access It will be useful iff we can separate the core API- identity based on certificates as required for signing purposes or even for encryption versus the registration and enroll.   -- Elli stated- we should have api deefined for the peer and one for the application. Then one app might use membership services a or b- we can start implementing api for the peer and the minimum one. And then we can add later the api for applications to use.","ts":"1478618426.002016"},{"type":"message","user":"U184J2R7S","text":"Keith: this means we go back what we had last week -pulling out MSP peer API, and we had a client API.  At least they are separate.  If we don't keep client in fabric, we're not sure where we put it.  Gari: you can put it in COP, but put in separate file.  It's likely going to change anyway","ts":"1478618488.002017"},{"type":"message","user":"U184J2R7S","text":"Gari: Here is a customer example- there is a Java SDK requirement.  In their case, they don't plan to use COP (many people want to use their own).  We just have to have a format- so we start out with these APIs... and we can then parse that information.  Identity has the ability to parse the certificate.  Then, from SDK perspective- it becomes a nice interface.  So if someone wants to register- they can call API and it gets loaded from the store they are using.  BTW, this is how we can do unit testing.","ts":"1478618589.002018"},{"type":"message","user":"U0ZJZBJLF","text":"Hey, I have a couple of questions unclear to me and if someone could explain to me that'd help:\n1) In fabric v1 (next architecture) - how can a peer from org A verify an SSL certificate of a peer of org B, when they have different CAs? \n2) in SSL from what I know- when you connect to a remote server, the certificate of the server needs to sign on the DNS name or ip address, because you don't know the certificate of the remote server before you connect to it, so if the certificate does not sign the hostname\\ip, you won't be able to connect, right?\n3) If the above (2) is true, then how will that work in fabric v1 ? the PKI infrastructure would hand out certificates with ip\/hostnames signed ?\n4) if the above (3) is true, then how will fabric work in a cloud environment where the ip address is something dynamic and random? Does the PKI layer know how to deal with it? It sounds to be pretty complex because you need to keep track of changing data.","ts":"1478618640.002019"},{"type":"message","user":"U184J2R7S","text":"Keith: the signing identity-we need the implementation for signing identity and identity.  What we agreed is that Elli and team would do that for ECerts.  For timeline- how long is that going to take to do.  Elli- there is a lot of code already ready for ecert signing functionality.  And she will have to think through that with Angelo.  They thought if the Ali\/Angelo, they could get this within the week, they could offer the signing\/verification.","ts":"1478618770.002020"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZJZBJLF> I was planning to ask the same thing here to <@U1BC5A0F9> <@U0ZR63HLK> <@U26T99AQ4>","ts":"1478618788.002021"},{"type":"message","user":"U184J2R7S","text":"Gari: the main thing is hooking up between identity and the BCCSP too.  Elli said that is the largest extent we have and is pretty close. Gari: We have to load up multiple root certificate authorities.","ts":"1478618898.002022"},{"type":"message","user":"U184J2R7S","text":"Jim: isn't that supposed to go through BCCSP interface instead of specifically knowing how you sign?  Gari: yes- we should hook those together","ts":"1478618922.002023"},{"type":"message","user":"U184J2R7S","text":"Angelo checked in the signer and it's been merged in","ts":"1478618929.002024"},{"type":"message","user":"U184J2R7S","text":"Gari: this gets us to an end to end path and a little refactoring after that... this should be the goal.","ts":"1478618960.002025"},{"type":"message","user":"U0XPR4NP4","text":"My impressions have been that:\n\n1. The peer org CAs are encoded in the configuration, so anyone can verify that a certificate chain presented by the peer chains to a trusted CA.\n2.\/3.\/4. I do not think we can do certificate validation by DNS\/common name.  Here we use certs for identity not location.  So, a CA signing a cert chain implies that the peer is authorized to transact under the authority of that CA.  Unlike with something like https on the web, where you care not simply that a CA has signed, but that the CA intended to sign for that URL.  For chaincode, I know there are attributes which are set on the certificate, so that not all certificates which chain to a CA have the same authority, but from an orderer\/gossip perspective, I expect this to be coarse enough that presenting a valid cert chain to a CA implies authority to transact on the network.","edited":{"user":"U0XPR4NP4","ts":"1478619514.000000"},"ts":"1478618983.002026"},{"type":"message","user":"U184J2R7S","text":"Jim: once we have identity and signing identity- we should be able to do almost everything.  It will poll the dependent classes.","ts":"1478618990.002027"},{"type":"message","user":"U184J2R7S","text":"in the other classes- what is a member?  Gari suggesting to remove that or-- should called memberservice- it's really the API side of all the registration.  The rest are really entity definitions, where member is a noun and interface to call a service.","ts":"1478619039.002028"},{"type":"message","user":"U184J2R7S","text":"Gari: I would strip down to bare minimum that we can.","ts":"1478619052.002029"},{"type":"message","user":"U184J2R7S","text":"Jim: I am struggling with member- member respresents and enroll entity with identity provider. Enroll means you have a signed certificate,.. isn't that what identity class represents?  why do we still need member?","ts":"1478619096.002031"},{"type":"message","user":"U184J2R7S","text":"Keith: the original idp.go that he sent had different names and it did not have member.  I was just trying to make progress at this point.  I was trying to simplify in the one Keith sent-- Elli plans to look at it.","ts":"1478619150.002032"},{"type":"message","user":"U184J2R7S","text":"Elli: for identity and signing identity- sounds like we are converging.","ts":"1478619186.002033"},{"type":"message","user":"U184J2R7S","text":"Elli: there is some design work on access control for the channels.  This is an item we are collaborating with consensus and endorser team.  The high level flow is included in document in pdf. - fab 633","ts":"1478619277.002034"},{"type":"message","user":"U184J2R7S","text":"from high level design- wrote a document that we are going to reach out to the community- where we are adding interfaces related to that story.. and next sprint we will implement in the next sprint","ts":"1478619324.002039"},{"type":"message","user":"U184J2R7S","text":"There is design interface of application level and invocation access management.  These are things that we are going to do in future sprints.","ts":"1478619351.002040"},{"type":"message","user":"U0PB67X4K","text":"<@U0ZJZBJLF> :\n\n\n1) In fabric v1 (next architecture) - how can a peer from org A verify an SSL certificate of a peer of org B, when they have different CAs? \n\nPart of the material that we need to distribute to all peers that are part of the network will be the set of root certificates used by each participant.  We'll need to decide if we need to separate the truststore for signing\/verification from the truststore used for TLS communication but basically this material needs to be collected from every network participant prior to them joining and then distributed via the appropriate config transaction(s) (which may be scoped to channels possibly).  But the bottom line is that the trust stores need to be distributed\n\n\n2) in SSL from what I know- when you connect to a remote server, the certificate of the server needs to sign on the DNS name or ip address, because you don't know the certificate of the remote server before you connect to it, so if the certificate does not sign the hostname\\ip, you won't be able to connect, right?\n\nThe CN or the SAN in the TLS certificate must match the hostname that will be used to access the endpoint.  This is a must in terms of the TLS certificates that the various components need to use.  The trust will be established via the truststore mentioned in 1) above\n\n3) If the above (2) is true, then how will that work in fabric v1 ? the PKI infrastructure would hand out certificates with ip\/hostnames signed ?\n\nSee above\n\n4) if the above (3) is true, then how will fabric work in a cloud environment where the ip address is something dynamic and random? Does the PKI layer know how to deal with it? It sounds to be pretty complex because you need to keep track of changing data.\n\nIf you are not going to have a static IP, then you must use a FQDN instead.   This is exactly what we do in BMX today","ts":"1478619677.002042"},{"type":"message","user":"U26T99AQ4","text":"<@U0ZJZBJLF> <@U0XPR4NP4> \n&gt; 1. The peer org CAs are encoded in the configuration, so anyone can verify that a certificate chain presented by the peer chains to a trusted CA.\n\nI expect the same too, the (self-signed) certificates of all CAs should be available to everyone. Adding or revoking them should be a job of the configuration system.\n\n&gt; 2.\/3.\/4. I do not think we can do certificate validation by DNS\/common name.  Here we use certs for identity not location.  So, a CA signing a cert chain implies that the peer is authorized to transact under the authority of that CA.  Unlike with something like https on the web, where you care not simply that a CA has signed, but that the CA intended to sign for that URL.  For chaincode, I know there are attributes which are set on the certificate, so that not all certificates which chain to a CA have the same authority, but from an orderer\/gossip perspective, I expect this to be course enough that presenting a valid cert chain to a CA implies authority to transact on the network.\n\nI agree - a node looks up another peer\/node they want to talk to (somehow) or they reach out to us, at which point in the course of the TLS exchange we'll mutually authenticate based on our TLS certs. At the end of the TLS handshake, we'll know that the node at the other end of the wire possesses legitimately that certificate. At this point we need to inspect it, see who signed it (do we trust them) and what they signed (attributes) and make a determination whether we wanna talk to them.","ts":"1478619694.002043"},{"type":"message","user":"U0XPR4NP4","text":"So when someone presents their 'identity', this will be a full certificate chain, down to the CA root?","ts":"1478619801.002044"},{"type":"message","user":"U26T99AQ4","text":"It should be, yes. The same happens on the web - websites usually present their chain, which is rooted with something your browser has (the set of CAs it trusts)","ts":"1478619881.002045"},{"type":"message","user":"U26T99AQ4","text":"you'll notice that presenting the root is redundant","ts":"1478619909.002046"},{"type":"message","user":"U26T99AQ4","text":"since you've got to have a copy of it yourself","ts":"1478619917.002047"},{"type":"message","user":"U0ZJZBJLF","text":"wait wait wait, isn't that a chicken and egg problem?","ts":"1478619957.002048"},{"type":"message","user":"U0ZJZBJLF","text":"5) how can I connect to an orderer (part of the fabric) if I get its certificate from the... well, ledger?\n6) you're telling me there will be some system-crypto-channel in which orderers would publish certificates?\n7) In fabric there will *most likely* be peers that won't be connected to the orderer directly, but will get information indirectly via other peers. They will have a bootstrapping problem, because they won't be able to connect to any peer.","ts":"1478620102.002049"},{"type":"message","user":"U26T99AQ4","text":"there has got to be some root of trust hardcoded somewhere (genesis block)","ts":"1478620132.002050"},{"type":"message","user":"U26T99AQ4","text":"much like when you install your browser, it comes with its set of CAs","ts":"1478620146.002051"},{"type":"message","user":"U0ZJZBJLF","text":"I thought that a genesis block is now per channel","ts":"1478620162.002052"},{"type":"message","user":"U0XPR4NP4","text":"Yes, there is","ts":"1478620429.002053"},{"type":"message","user":"U0XPR4NP4","text":"In order to join a channel, you must have a copy of the genesis block (or some later config block)","ts":"1478620442.002054"},{"type":"message","user":"U0XPR4NP4","text":"So you have all the CA certs.","ts":"1478620446.002055"},{"type":"message","user":"U0ZJZBJLF","text":"ok let me make it more specific, <@U26T99AQ4>  - My gossip code needs a way of verifying a signature of a remote peer, having the signature, the plaintext (obviously) and the peer's (the signer's) PKI-ID. \nDo we still have this functionality in v1.0? (please say yes)","ts":"1478620476.002056"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZJZBJLF> I'm still confused why you are using PKI-ID when you have access to the full cert (chain)","ts":"1478620504.002057"},{"type":"message","user":"U26T99AQ4","text":"is this in the scope of TLS?","ts":"1478620521.002058"},{"type":"message","user":"U0ZJZBJLF","text":"no","ts":"1478620526.002059"},{"type":"message","user":"U0ZJZBJLF","text":"Jason- well, as I said on gerrit- when I designed everything, I was told I'll be able to use the PKI-ID, and that was what the code in 0.5 was doing, and no one told me along the way anything different","ts":"1478620580.002060"},{"type":"message","user":"U26T99AQ4","text":"so you have a message of sorts, a signature over it, and a cert","ts":"1478620608.002061"},{"type":"message","user":"U0ZJZBJLF","text":"no no, it's more simpler than that- imagine I know of a peer and it's PKI-ID and I already authenticated it","ts":"1478620633.002062"},{"type":"message","user":"U26T99AQ4","text":"and you want to\n1) verify that signature\n2) get some assurance about the signing cert - who are they? who signed their cert?","ts":"1478620634.002063"},{"type":"message","user":"U0ZJZBJLF","text":"yes!","ts":"1478620639.002064"},{"type":"message","user":"U0ZJZBJLF","text":"exactly - 1+2","ts":"1478620643.002065"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZJZBJLF> But could you not compute a PKI-ID from the cert if need be?","ts":"1478620661.002066"},{"type":"message","user":"U0ZJZBJLF","text":"I could if I had the function that computes it (I have no idea the hash algorithm)","ts":"1478620686.002067"},{"type":"message","user":"U0ZJZBJLF","text":"everything I'm talking about here is merged long ago,btw:\n<https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/gossip\/api\/api.go#L59>","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/gossip\/api\/api.go","text":"Read-only mirror of <https:\/\/gerrit.hyperledger.org\/r\/#\/admin\/projects\/fabric>","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/gossip\/api\/api.go","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"edited":{"user":"U0ZJZBJLF","ts":"1478620737.000000"},"ts":"1478620721.002068"},{"type":"message","user":"U26T99AQ4","text":"I think the primitives to sign\/verify will be there","ts":"1478620765.002071"},{"type":"message","user":"U0ZJZBJLF","text":"I expect the following abilities when the gossip is initialized: \n```\n\tSign(msg []byte) ([]byte, error)\nVerify(vkID, signature, message []byte) error\n```","edited":{"user":"U0ZJZBJLF","ts":"1478620785.000000"},"ts":"1478620771.002072"},{"type":"message","user":"U26T99AQ4","text":"they might look different from what they used to","ts":"1478620791.002074"},{"type":"message","user":"U0XPR4NP4","text":"I guess my concern, is that we had the (IMHO terrible) dependence on a network call in order to authenticate peers in 0.5.  And we should not be trying to emulate this as a pattern.","ts":"1478620806.002075"},{"type":"message","user":"U0XPR4NP4","text":"Especially if we have all of the certificate material present.","ts":"1478620821.002076"},{"type":"message","user":"U0PB67X4K","text":"<@U0XPR4NP4>  - we are getting rid of that bootstrap for enrollment","ts":"1478620830.002077"},{"type":"message","user":"U0XPR4NP4","text":"Right, I thought that was out.","ts":"1478620839.002078"},{"type":"message","user":"U0PB67X4K","text":"<@U0ZJZBJLF>  - at the end of the day, when a network starts you must have some bootstrap material which is distributed \/ resides outside the ledger","ts":"1478620868.002079"},{"type":"message","user":"U0ZJZBJLF","text":"Wait so a quick recap- The fabric is running for 1 month, and I'm a new peer. the first thing I ever do is grab a genesis crypto block and commit it and connect with it to the orderer?","ts":"1478620900.002080"},{"type":"message","user":"U0PB67X4K","text":"the first thing is that the existing folks need to allow you to join  :wink:","ts":"1478620935.002081"},{"type":"message","user":"U0XPR4NP4","text":"Right, the 'channel join' operation takes as a parameter a genesis block (or in the future, a configuration block)","ts":"1478620963.002082"},{"type":"message","user":"U0ZJZBJLF","text":"why is this context-based on a channel? I'm talking about just the first connection to an orderer","ts":"1478620996.002083"},{"type":"message","user":"U0XPR4NP4","text":"Logically, connecting to the 'system chain' and a channel are equivalent to me.","ts":"1478621034.002084"},{"type":"message","user":"U0XPR4NP4","text":"But to bootstrap a peer, you also provide it with a genesis block","ts":"1478621044.002085"},{"type":"message","user":"U0ZJZBJLF","text":"so there will be an \"infrastructure channel\" then?","edited":{"user":"U0ZJZBJLF","ts":"1478621062.000000"},"ts":"1478621053.002086"},{"type":"message","user":"U0XPR4NP4","text":"In order to first start up a peer period, the agreed upon boostrapping mechanism was to provide it with the genesis block of the 'system chain'","ts":"1478621103.002088"},{"type":"message","user":"U0XPR4NP4","text":"However, I really see no strong reason you could not bootstrap a peer to a particular channel instead of to the 'system chain'","ts":"1478621126.002089"},{"type":"message","user":"U0XPR4NP4","text":"Every genesis block need to contain a full config (complete with CA certs et al)","ts":"1478621149.002090"},{"type":"message","user":"U0ZJZBJLF","text":"then you'll need to insert the certs into the genesis block of the channel","ts":"1478621152.002091"},{"type":"message","user":"U0ZJZBJLF","text":"oh ok","ts":"1478621158.002092"},{"type":"message","user":"U0ZJZBJLF","text":"<@U26T99AQ4>  is there a way of looking up the certificate by the PKI-ID?","ts":"1478621371.002093"},{"type":"message","user":"U0ZJZBJLF","text":"I understand that the certificates would be saved in the ledger, is it possible to also save their PKI-id and be able to perform a search for that?","ts":"1478621461.002094"},{"type":"message","user":"U0ZJZBJLF","text":"otherwise, you won't be able to perform: verify(pkiID, sig, plaintext)","ts":"1478621480.002095"},{"type":"message","user":"U26T99AQ4","text":"All the info is there - certs have a subject (who) and an issuer (who signed it), so I guess it's a matter of exposing APIs to lookup a cert by subject","ts":"1478621523.002096"},{"type":"message","user":"U26T99AQ4","text":"I don't think these APIs are there","ts":"1478621531.002097"},{"type":"message","user":"U26T99AQ4","text":"so you get a cert, you see its issuer and then you lookup in your trust bag if you have a cert whose subject is your issuer","ts":"1478621610.002098"},{"type":"message","user":"U0ZJZBJLF","text":"but how am I going to verify someone's message by knowing only his PKI-ID and not the full cert then?","ts":"1478621615.002099"},{"type":"message","user":"U26T99AQ4","text":"so you are saying that you don't even have a certificate, only an ID (like a plain string)?","ts":"1478621671.002100"},{"type":"message","user":"U0ZJZBJLF","text":"yes, just that the id is the hash on the cert","ts":"1478621696.002101"},{"type":"message","user":"U0ZJZBJLF","text":"that's how all the 6000+ lines of gossip code works, and I built it under the assumption that I would be able to perform `verify(PKIid, sig, text)` just like it is done in 0.5, , and as was told to me.... <@U0ZR63HLK>","edited":{"user":"U0ZJZBJLF","ts":"1478621811.000000"},"ts":"1478621770.002102"},{"type":"message","user":"U26T99AQ4","text":"I'll reach out to you in pvt and we can try to sort it out","ts":"1478621927.002105"},{"user":"U2Q0HP4HY","text":"<@U2Q0HP4HY|rickr> has joined the channel","type":"message","subtype":"channel_join","ts":"1478622565.002106"},{"type":"message","user":"U0ZJZBJLF","text":"ok so we talked on the phone and we came to a conclusion that:\n1) Gossip *has* to have a way of mapping a PKI-ID of a peer to its certificate\n2) The Ledger guys that are responsible for writing the certificate crypto data into the chain need to be aware of it, and need to implement a way for the crypto layer to create a mapping between PKI-ID (essentially it's a hash of the cert) to the cert itself.\n<@U1BC5A0F9>  , <@U0ZR63HLK>  , <@U26T99AQ4>  , \n<@U0PB67X4K>  and <@U0KN2SSKE>  , I'll create a JIRA item in a few min, but who should I tag here to explain the need? (who is it going to be from the ledger guys? Maybe <@U0ULK2JPP> ?)","ts":"1478623591.002107"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZJZBJLF> For my edification, why does gossip need PKI-ID instead of the cert itself? And is there an instance where a peer has a reference to a PKI-id but does not already have the corresponding cert locally?","ts":"1478623733.002108"},{"type":"message","user":"U0ZJZBJLF","text":"I use the PKI-ID to identify a peer","ts":"1478623752.002109"},{"type":"message","user":"U0ZJZBJLF","text":"I send this information every few seconds (configurable)","edited":{"user":"U0ZJZBJLF","ts":"1478623881.000000"},"ts":"1478623791.002110"},{"type":"message","user":"U0ZJZBJLF","text":"I don't want to send every few seconds a few KBs","ts":"1478623807.002111"},{"type":"message","user":"U0ZJZBJLF","text":"so I need a deterministic way of converting a cert ---&gt; to a []byte without collisions, so in 0.5 it was implemented as a simple hash.","ts":"1478623856.002112"},{"type":"message","user":"U0ZJZBJLF","text":"```\nAnd is there an instance where a peer has a reference to a PKI-id but does not already have the corresponding cert locally?\n```\n yeah, he won't be able to communicate with the peer until it has. I don't see it as a big problem","edited":{"user":"U0ZJZBJLF","ts":"1478623928.000000"},"ts":"1478623912.002114"},{"type":"message","user":"U0PB67X4K","text":"<@U0ZJZBJLF>  - write up the requirement and tag me and murali for now","edited":{"user":"U0PB67X4K","ts":"1478623965.000000"},"ts":"1478623917.002115"},{"type":"message","user":"U0PB67X4K","text":"BUT","ts":"1478623920.002116"},{"type":"message","user":"U0PB67X4K","text":"there's more to this than PKI-ID","ts":"1478623928.002117"},{"type":"message","user":"U0ZJZBJLF","text":"I'll write a JIRA item, is that ok?","ts":"1478623938.002119"},{"type":"message","user":"U0PB67X4K","text":"yep","ts":"1478623941.002120"},{"type":"message","user":"U0ZJZBJLF","text":"what is there more except that?","ts":"1478623948.002121"},{"type":"message","user":"U0PB67X4K","text":"The way you are currently using PKI-ID assumes that every peer already has and\/or has access to every other peer's certificate (at least the certificate they use to sign messages).   This works in v0.5\/v0.6 because the peer actually calls out to membersrvcs (as I recall) to download the public certificate(s) for other remote peers.  This IS NOT going to be possible in v1","ts":"1478624115.002123"},{"type":"message","user":"U0ZJZBJLF","text":"so what? eventually it will have access to that, because it'll get the ledger","ts":"1478624145.002124"},{"type":"message","user":"U0ZJZBJLF","text":"it'll simply re-connect","ts":"1478624157.002125"},{"type":"message","user":"U0PB67X4K","text":"well I don't actually think that we are going to put every peer certificate in the ledger.  we were going to start with putting the root certificates for every participant into the ledger not the individual peer certificates","ts":"1478624212.002126"},{"type":"message","user":"U0PB67X4K","text":"My point is that there's more to this story","ts":"1478624220.002127"},{"type":"message","user":"U0PB67X4K","text":"this is just one piece","ts":"1478624228.002128"},{"type":"message","user":"U0PB67X4K","text":"this also means that when people sign messages, they need to include the public key in the message itself","ts":"1478624256.002129"},{"type":"message","user":"U0ZJZBJLF","text":"hmm, and how is the authentication going to work then?","ts":"1478624259.002130"},{"type":"message","user":"U0XPR4NP4","text":"Right, the peer can absolutely maintain a cache of peer certs it knows about, when it connects via TLS it will get the certs.  And I think, for gossip, this is okay.","ts":"1478624265.002131","reactions":[{"name":"+1","users":["U0ZJZBJLF"],"count":1}]},{"type":"message","user":"U0XPR4NP4","text":"The chain has all the _CA_ certs, and the TLS cert will chain to the CA for auth","ts":"1478624277.002132"},{"type":"message","user":"U0PB67X4K","text":"we don't do mutual TLS","ts":"1478624296.002133"},{"type":"message","user":"U0PB67X4K","text":"and the TLS cert is not the same as the signing cert","ts":"1478624307.002134"},{"type":"message","user":"U0ZJZBJLF","text":"aha!","ts":"1478624316.002135"},{"type":"message","user":"U0XPR4NP4","text":"Peer&lt;-&gt;Peer does not do mutual TLS? Why not?","ts":"1478624318.002136"},{"type":"message","user":"U0PB67X4K","text":"and we track identity based on signing cert","ts":"1478624319.002137"},{"type":"message","user":"U0PB67X4K","text":"WELL - we can move to that model","ts":"1478624330.002138"},{"type":"message","user":"U0ZJZBJLF","text":"so, if the TLS certs are different, is the TLS cert self-signed?","ts":"1478624332.002139"},{"type":"message","user":"U0PB67X4K","text":"we don't do it today","ts":"1478624334.002140"},{"type":"message","user":"U0PB67X4K","text":"No","ts":"1478624341.002141"},{"type":"message","user":"U0ZJZBJLF","text":"so?","ts":"1478624345.002142"},{"type":"message","user":"U0PB67X4K","text":"If we do mutual TLS and in gossip you choose to use the client certificate as the PKI-ID, that may be OK","ts":"1478624398.002143"},{"type":"message","user":"U0ZJZBJLF","text":"wait so just to understand what jyellic said- when I'm a peer I present to a fellow peer a certificate that has a chain of signatures all the way up to some CA which the fellow peer can verify, right?","ts":"1478624427.002144"},{"type":"message","user":"U0XPR4NP4","text":"My assumption had been that this 'presented cert' was the TLS cert.  But it sounds like there is maybe some other mechanism here?","ts":"1478624458.002145"},{"type":"message","user":"U0ZJZBJLF","text":"Gari- in gossip, the TLS configuration is pluggable, so I just put whatever I get, unless I don't get anything at all- and then I generate a self-signed certificate myself and use that in SSL","ts":"1478624473.002146"},{"type":"message","user":"U0PB67X4K","text":"THIS IS MY POINT - that's what I mean by there's more to this than the PKI-ID thing","ts":"1478624490.002147"},{"type":"message","user":"U0ZJZBJLF","text":"then I verify the remote peer using the PKI-ID","ts":"1478624491.002148"},{"type":"message","user":"U0PB67X4K","text":"where'd you get it from in the first place?","ts":"1478624513.002149"},{"type":"message","user":"U0ZJZBJLF","text":"you're asking jason?","ts":"1478624528.002150"},{"type":"message","user":"U0PB67X4K","text":"no - you","ts":"1478624533.002151"},{"type":"message","user":"U0ZJZBJLF","text":"where did I get what","ts":"1478624539.002152"},{"type":"message","user":"U0PB67X4K","text":"Let's start with a simple case of 2 peers","ts":"1478624549.002153"},{"type":"message","user":"U0ZJZBJLF","text":"it's the only case actually","ts":"1478624556.002154"},{"type":"message","user":"U0PB67X4K","text":"Let's assume mutual TLS (e.g. client certificates)","ts":"1478624592.002155"},{"type":"message","user":"U0ZJZBJLF","text":"mutual TLS with signed certs?","ts":"1478624616.002156"},{"type":"message","user":"U0PB67X4K","text":"let's start with signed certs","ts":"1478624664.002157"},{"type":"message","user":"U0ZJZBJLF","text":"ok","ts":"1478624672.002158"},{"type":"message","user":"U0ZJZBJLF","text":"so lets say `p0` connects to `p1` and presents him with a signed challenge signed by him, and the PKI-ID (for identity)","ts":"1478624724.002159"},{"type":"message","user":"U0PB67X4K","text":"what is the signed challenge?  not TLS but application level?","ts":"1478624749.002160"},{"type":"message","user":"U0ZJZBJLF","text":"yep","ts":"1478624753.002161"},{"type":"message","user":"U0ZJZBJLF","text":"didn't you say they are different certs? the TLS and the peer cert?","ts":"1478624785.002162"},{"type":"message","user":"U0PB67X4K","text":"(they could be different or they could be the same)","ts":"1478624828.002163"},{"type":"message","user":"U0PB67X4K","text":"but let's continue","ts":"1478624845.002164"},{"type":"message","user":"U0ZJZBJLF","text":"yeah but of course you understand, I already implemented everything so I assumed the \"worse\"","ts":"1478624852.002165"},{"type":"message","user":"U0PB67X4K","text":"so now `p1` has some bytes which were signed by `p0` and also has `pkiID` from `p0` (which is theoretically the hash of the certificate `p0` used to sign the bytes?)","ts":"1478624968.002166"},{"type":"message","user":"U0ZJZBJLF","text":"yes","ts":"1478624989.002167"},{"type":"message","user":"U0ZJZBJLF","text":"and vice-versa regarding the challenge but it's not important","ts":"1478625003.002168"},{"type":"message","user":"U0ZJZBJLF","text":"he now looks into the ledger and asks it- \"dear ledger, give me the cert of pkiID\"","ts":"1478625047.002169"},{"type":"message","user":"U0PB67X4K","text":"so `p1` cannot verify the signed bytes without being in possession of the public key  of the keypair  `p0` used to sign them","ts":"1478625052.002170"},{"type":"message","user":"U0ZJZBJLF","text":"yes","ts":"1478625061.002171"},{"type":"message","user":"U0ZJZBJLF","text":"correct","ts":"1478625063.002172"},{"type":"message","user":"U0ZJZBJLF","text":"but this isn't too hard to fix- because `p0` can send it in this 1-time-only message also the certificate of itself, and have it hash it and compare to the PKIid)","ts":"1478625110.002173","reactions":[{"name":"+1","users":["U0PB67X4K"],"count":1}]},{"type":"message","user":"U0PB67X4K","text":"you got it","ts":"1478625126.002174"},{"type":"message","user":"U0ZJZBJLF","text":"and like <@U0XPR4NP4>  said- it can cache it","ts":"1478625127.002175"},{"type":"message","user":"U0PB67X4K","text":"and that's what I was getting at","ts":"1478625133.002176"},{"type":"message","user":"U0ZJZBJLF","text":"oh, I thought you meant- there is something more *except that*","ts":"1478625144.002177"},{"type":"message","user":"U0PB67X4K","text":"now what we would distribute would be the root certificates for all the participants","ts":"1478625191.002178"},{"type":"message","user":"U0PB67X4K","text":"of course, one could distribute the public keys of everyone instead as well","ts":"1478625233.002179"},{"type":"message","user":"U0ZJZBJLF","text":"so maybe I can skip the JIRA item then and simply assert that in the gossip's constuctor, the full cert is going to be needed to be passed, and I'll add a method `cert2PKI-ID` or something like that that is supposed to be supplied by the crypto guys","edited":{"user":"U0ZJZBJLF","ts":"1478625265.000000"},"ts":"1478625252.002180","reactions":[{"name":"+1","users":["U0PB67X4K","U0XPR4NP4"],"count":2}]},{"type":"message","user":"U0PB67X4K","text":"but wanted to make sure we can support a model which only requires distribution of root certificates","ts":"1478625252.002181"},{"type":"message","user":"U0PB67X4K","text":"but would be good to document this in the overall design","ts":"1478625278.002183"},{"type":"message","user":"U0PB67X4K","text":"BTW - (and I like this fact) - use of gossip implies that TLS is always used, correct?","ts":"1478625306.002184"},{"type":"message","user":"U0ZJZBJLF","text":"no","ts":"1478625312.002185"},{"type":"message","user":"U0PB67X4K","text":"oh - sorry - we sign the bytes","ts":"1478625323.002186"},{"type":"message","user":"U0ZJZBJLF","text":"it is \"adaptive\" but it has to be symmetrical","edited":{"user":"U0ZJZBJLF","ts":"1478625349.000000"},"ts":"1478625324.002187"},{"type":"message","user":"U0ZJZBJLF","text":"\"if I use TLS you should use too\"","edited":{"user":"U0ZJZBJLF","ts":"1478625607.000000"},"ts":"1478625329.002188"},{"type":"message","user":"U0PB67X4K","text":"personally I think we should only enable gossip over TLS  - that way we'll solve the usability \/ censurability \/ configurability right from the beginning.","ts":"1478625383.002190"},{"type":"message","user":"U0ZJZBJLF","text":"if you initialize gossip with your own SSL options (serverOptions and DialOptions I think) I use them as they are, otherwise- I generate self-signed SSL certs and use them","ts":"1478625396.002191"},{"type":"message","user":"U0PB67X4K","text":"today - it's a pain in the butt to get TLS working because it was treated as a second class citizen","ts":"1478625411.002192"},{"type":"message","user":"U0ZJZBJLF","text":"yeah","ts":"1478625439.002193"},{"type":"message","user":"U0ZJZBJLF","text":"so to sum things up- <@U0ZR63HLK>  and <@U1BC5A0F9>  and <@U26T99AQ4>  and everyone I tagged above, the bottom line is that we'll simply pass the certificate in the authentication handshake of the gossip, but the security guys would need to implement a method that converts a cert to a PKI-ID in a deterministic way.  (did I get that right <@U0PB67X4K>  ? )\nMaybe do []byte(PKI_ALGORITHM) concatenated with the public key hash?","edited":{"user":"U0ZJZBJLF","ts":"1478625551.000000"},"ts":"1478625537.002194"},{"type":"message","user":"U0PB67X4K","text":"you got it","ts":"1478625610.002197","reactions":[{"name":"+1","users":["U0ZJZBJLF"],"count":1}]},{"type":"message","user":"U0ZJZBJLF","text":"<@U1BC5A0F9>  I hope you don't mind I assigned it to you, because I have no idea of what to put in other fields in the jira item (such as epic, etc.)\n<https:\/\/jira.hyperledger.org\/browse\/FAB-1034>","ts":"1478625946.002198"},{"type":"message","user":"U1BC5A0F9","text":"Hi <@U0ZJZBJLF>, sure. Will discuss with the team and re-assign it if necessary but keep you posted.","ts":"1478627005.002199","reactions":[{"name":"+1","users":["U0ZJZBJLF"],"count":1}]},{"type":"message","user":"U0ZJZBJLF","text":"Wait a second <@U0PB67X4K> , if I cache internally the peer's certificate and it is not saved in the ledger- how does the COP infrastructure revoke a peer's certificate then?","ts":"1478642224.002200"},{"type":"message","user":"U0XPR4NP4","text":"To my knowledge, CRLs are put into the configuration block.  In general, CRLs are short and not updated frequently.","ts":"1478642347.002201"},{"type":"message","user":"U0PB67X4K","text":"right - given that you will take the PKI-ID and make sure it matches the hash of the \"cached\" certificate at the same time you could extract the serial number and check it against the CRL stored on the ledger","ts":"1478642474.002202"},{"type":"message","user":"U0PB67X4K","text":"or we could have that in the method `validatePKID` or `isValidPKIID` or something","ts":"1478642580.002203"},{"type":"message","user":"U0PB67X4K","text":"it not only checks that the hash matches but also that the cert is not revoked","edited":{"user":"U0PB67X4K","ts":"1478642609.000000"},"ts":"1478642597.002204"},{"type":"message","user":"U0ZJZBJLF","text":"got it, thanks (Jason&amp;Gari) but also what needs to be done is something that \"listens\" to that chain and updates the gossip component, because the connection to the peer might be open and we would want to close it. I already have a method in the comm layer that black-lists a remote peer by PKI-Id, it can be used.","ts":"1478643095.002206"},{"type":"message","user":"U0PB67X4K","text":"cool","ts":"1478643138.002207"},{"type":"message","user":"U0PB67X4K","text":"I think we'll have the \"means\" to do what we need","ts":"1478643152.002208"},{"type":"message","user":"U0ZJZBJLF","text":"v1 is going to be a monster (complexity-wise)","edited":{"user":"U0ZJZBJLF","ts":"1478643209.000000"},"ts":"1478643190.002209"},{"user":"U1TA5FDU7","text":"<@U1TA5FDU7|warm3snow> has joined the channel","type":"message","subtype":"channel_join","ts":"1478680543.002211"},{"type":"message","user":"U0ZJZBJLF","text":"Anyone home?","ts":"1478694196.002212"},{"type":"message","user":"U0ZJZBJLF","text":"I've a question related to multi-channels. \nWhen an application (via node SDK) makes a peer join a channel, how does it identify itself to the peer? How does the peer recognize the \"joinChannel\" gRPC call is authentic?","edited":{"user":"U0ZJZBJLF","ts":"1478694399.000000"},"ts":"1478694258.002213"},{"type":"message","user":"U0PB67X4K","text":"the same way that it would make sure that the endorsement call is authentic - it checks the signature on the \"message\" - and of course the certificate used to sign the \"message\" must be trusted by the peers","ts":"1478695268.002216"},{"type":"message","user":"U0PB67X4K","text":"Maybe I am missing something in the question?","ts":"1478695280.002217"},{"type":"message","user":"U0PB67X4K","text":"the bottom line is that the entire system is basically based on extracting \"identity\" from the certificates used to sign \"messages \/ transactions\".  And you can either explicitly trust the certificate or the issuer (root authority) of the certificate.  (on top of this, you can also start to use attributes \"embedded\" in the certificates as well, but the carrier is a certificate)","ts":"1478695599.002218"},{"type":"message","user":"U0ZJZBJLF","text":"The cert is included in the joinChannel message?","ts":"1478695744.002219"},{"type":"message","user":"U0ZJZBJLF","text":"you're not missing anything in the question, I'm simply wondering whether a peer `p0` can relay that message to another peer `p1` and if `p1` can validate that message, that's all.","ts":"1478695801.002220"},{"type":"message","user":"U0PB67X4K","text":"I don't see why not - given we are checking the signature of the original submitter and the signature would cover the contents to make sure that have not been changed","ts":"1478695935.002221"},{"type":"message","user":"U0ZJZBJLF","text":"ok thanks, just making sure,","ts":"1478696035.002222"},{"type":"message","user":"U1BC5A0F9","text":"Hi, <@U0XPR4NP4>, <@U26T99AQ4>, <@U0KN2SSKE>, <@U0ULK2JPP>; so were wondering on the config message payload structure. Would these have a json form?","edited":{"user":"U1BC5A0F9","ts":"1478711647.000000"},"ts":"1478711636.002223"},{"type":"message","user":"U1BC5A0F9","text":"The reason i am asking is the following: the MSPs would need to understand that message (payload) to evaluate it with the rules associated to that MSP (if e.g., proper signatures have been provided)","ts":"1478711703.002225"},{"type":"message","user":"U0ULK2JPP","text":"just curious <@U1BC5A0F9> is this wrt <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2243\/>","ts":"1478711712.002226"},{"type":"message","user":"U1BC5A0F9","text":"And though json seems to be the simples one","ts":"1478711715.002227"},{"type":"message","user":"U0ULK2JPP","text":"ah never mind :slightly_smiling_face:","ts":"1478711715.002228"},{"type":"message","user":"U1BC5A0F9","text":"yes","ts":"1478711718.002229"},{"type":"message","user":"U1BC5A0F9","text":"<@U0ULK2JPP> indeed","ts":"1478711731.002230"},{"type":"message","user":"U1BC5A0F9","text":"(the changeset that i am working on)","ts":"1478711736.002231"},{"type":"message","user":"U0ULK2JPP","text":"I was thinking we could find one more use for <@U0XPR4NP4> policy framework\u2026 is that where you were going with this ?","ts":"1478711775.002232"},{"type":"message","user":"U1BC5A0F9","text":"Had a discussion eearlier with <@U26T99AQ4> on the way an MSP should be updating its state, as well as with <@U0S5KF44D> earlier.","ts":"1478711777.002233"},{"type":"message","user":"U0ULK2JPP","text":"ok","ts":"1478711819.002234"},{"type":"message","user":"U1BC5A0F9","text":"And what do you mean by policy framework?","ts":"1478711821.002235"},{"type":"message","user":"U1BC5A0F9","text":"In my mind certain config tx-s would refer to membership service provider reconfiguration.","ts":"1478711857.002236"},{"type":"message","user":"U1BC5A0F9","text":"Each MSP may have its own rules or policy w.r.t. how the reconfiguration takes place. E.g., MSP 1 may require that CA1 signs configuration changes of MSP1, while MSP2 would require that CA2 signs configuration changes to MSP2.","ts":"1478711924.002237"},{"type":"message","user":"U1BC5A0F9","text":"As configuration changes go through the blockchain and included in special transactions, i am wondering if json would still make sense to be used as an argument passed to the","ts":"1478711968.002238"},{"type":"message","user":"U1BC5A0F9","text":"MSP reconfigure function... or rather send to it the entire tx...","ts":"1478711994.002239"},{"type":"message","user":"U0ULK2JPP","text":"ok <@U1BC5A0F9> . My question on policy framework is relevant but might be a distraction for your discussion (here\u2019s a change set <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1957>  though)","ts":"1478712167.002240"},{"type":"message","user":"U0PB67X4K","text":"we are once again on the verge of making this TOO complex without even getting the piece parts working yet  :wink:","ts":"1478712251.002241"},{"type":"message","user":"U0ULK2JPP","text":"if that\u2019s directed towards my comment <@U0PB67X4K> , I agree :slightly_smiling_face: \u2026 my only intent was I saw policy defined and wanted to call out there could be scope for code reusus","ts":"1478712390.002242"},{"type":"message","user":"U0PB67X4K","text":"not just you","ts":"1478712557.002243"},{"type":"message","user":"U0PB67X4K","text":"yes - agreed on that piece","ts":"1478712579.002244"},{"type":"message","user":"U1BC5A0F9","text":"hm.. ok, i just put jsn now on the interface, and revise that later if needed :smile:","ts":"1478712703.002245"},{"type":"message","user":"U1BC5A0F9","text":"(moving on to a simpler note)","ts":"1478712718.002246"},{"type":"message","user":"U26T99AQ4","text":"One way or another, it would be *great* to have a tentative IDP interface merged soon so that on the peer side we can get a sense of what the full endorsement flow looks like","ts":"1478712765.002247"},{"type":"message","user":"U26T99AQ4","text":"and I think <@U1BC5A0F9> has one ready, where the format of the configuration is json, right?","ts":"1478712820.002248"},{"type":"message","user":"U1BC5A0F9","text":"sort of :slightly_smiling_face:","ts":"1478712831.002249"},{"type":"message","user":"U1BC5A0F9","text":"I have the setup method taking a input json formed string, and a sample of that string","edited":{"user":"U1BC5A0F9","ts":"1478712868.000000"},"ts":"1478712847.002250"},{"type":"message","user":"U1BC5A0F9","text":"hence i was wondering if it would make sense to use the same thing for reconfiguration related messages.","ts":"1478712886.002252"},{"type":"message","user":"U26T99AQ4","text":"<@U1BC5A0F9> got it","ts":"1478712900.002253"},{"type":"message","user":"U26T99AQ4","text":"thx","ts":"1478712902.002254"},{"type":"message","user":"U1BC5A0F9","text":"And extending my thought, i was more generally asking\/wondering, why cant a reconfiguration messages simply be defined as payload (in json format) that has added a signature on top?","ts":"1478713022.002255"},{"type":"message","user":"U1BC5A0F9","text":"Or is this the way we do it already?","ts":"1478713032.002256"},{"type":"message","user":"U0XPR4NP4","text":"<@U1BC5A0F9> There is an encoding for policy defined you can see in the protos.  As far as specific encodings for certs and such, I was going to leave this to the crypto team","ts":"1478713704.002257"},{"type":"message","user":"U0XPR4NP4","text":"The configuration messages are defined via protobuf (I don't see why this is inferior to JSON, as you can convert it to\/from JSON if you want)","ts":"1478713753.002258"},{"type":"message","user":"U0XPR4NP4","text":"And the payload is essentially key value pairs, where the encoding of the value is simply bytes, likely a marshaled message of whatever form is desired.","ts":"1478713784.002259"},{"type":"message","user":"U0XPR4NP4","text":"Have you seen the configuration section in the \"Next Hyperledger-Fabric Architecture Protocol messages\" doc?","ts":"1478713848.002260"},{"type":"message","user":"U1BC5A0F9","text":"But wouldn't things be easier if we specified in the configuration the component of the system this configuration refers to and some payload that this component is able to understand?","ts":"1478713854.002261"},{"type":"message","user":"U0XPR4NP4","text":"There is a type attached to the configuration item, which indicates the encoding","ts":"1478713881.002262"},{"type":"message","user":"U0XPR4NP4","text":"(Though what that encoding is is TBD)","ts":"1478713893.002263"},{"type":"message","user":"U0XPR4NP4","text":"For the policy type, the encoding is a marshaled `Policy` message","ts":"1478713910.002264"},{"type":"message","user":"U0XPR4NP4","text":"For the orderer\/peer\/chain types, the encoding is not yet defined","ts":"1478713924.002265"},{"type":"message","user":"U1BC5A0F9","text":"I have not see i think the configuration part","ts":"1478713928.002266"},{"type":"message","user":"U0XPR4NP4","text":"<https:\/\/docs.google.com\/document\/d\/1qD2zOTxmPoss3Xop_pDdkSXHozIR4N27NEsymosW4Gk\/>","ts":"1478713954.002267"},{"user":"U13Q594J2","text":"<@U13Q594J2|ratnakar> has joined the channel","type":"message","subtype":"channel_join","ts":"1478741275.002269"},{"type":"message","user":"U1BC5A0F9","text":"<@U0XPR4NP4> so i took a look at the configuration section (thanks for sending this along!) and i made some comments therein :slightly_smiling_face:","ts":"1478763522.002270"},{"type":"message","user":"U0ZJZBJLF","text":"<@U26T99AQ4>  I answered the JIRA item","ts":"1478776969.002273"},{"type":"message","user":"U1BC5A0F9","text":"Hi guys another interface available for Peer MSP (manager) here <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2385\/>","ts":"1478781797.002274"},{"type":"message","user":"U1BC5A0F9","text":"Just FYI :slightly_smiling_face:","ts":"1478781804.002275"},{"type":"message","user":"U0ZJZBJLF","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2325\/>","ts":"1478782495.002276"},{"type":"message","user":"U0ZJZBJLF","text":"So, I posted the change set above because I need the capabilities of the `SecurityAdvisor` in the `gossip\/api\/channel.go` in the change set to be able to support multi-channels","ts":"1478783639.002277"},{"type":"message","user":"U0ZR63HLK","text":"<@U0ZJZBJLF> which jura item, this one <https:\/\/jira.hyperledger.org\/browse\/FAB-1047> ?","ts":"1478785916.002278"},{"type":"message","user":"U0ZJZBJLF","text":"<https:\/\/jira.hyperledger.org\/browse\/FAB-1018>","ts":"1478786021.002284"},{"type":"message","user":"U0ZJZBJLF","text":"oh I actually wrote the item inside the commit, how rare of me","ts":"1478786053.002287"},{"type":"message","user":"U0ZR63HLK","text":"it is just that I don't see any comment on there","edited":{"user":"U0ZR63HLK","ts":"1478786280.000000"},"ts":"1478786242.002291"},{"type":"message","user":"U0ZJZBJLF","text":"where?","ts":"1478786351.002294"},{"type":"message","subtype":"file_share","text":"<@U11MANG9G|jonathanlevi> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/jonathanlevi\/F30S3MFHR\/fab-1018.png|FAB-1018> and commented: <@U0ZR63HLK>: You aren\u2019t the only one...","file":{"id":"F30S3MFHR","created":1478786354,"timestamp":1478786354,"name":"FAB-1018.png","title":"FAB-1018","mimetype":"image\/png","filetype":"png","pretty_type":"PNG","user":"U11MANG9G","editable":false,"size":386813,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F30S3MFHR\/fab-1018.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F30S3MFHR\/download\/fab-1018.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_64":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F30S3MFHR-205a6109b0\/fab-1018_64.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_80":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F30S3MFHR-205a6109b0\/fab-1018_80.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F30S3MFHR-205a6109b0\/fab-1018_360.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360_w":360,"thumb_360_h":172,"thumb_480":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F30S3MFHR-205a6109b0\/fab-1018_480.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_480_w":480,"thumb_480_h":229,"thumb_160":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F30S3MFHR-205a6109b0\/fab-1018_160.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F30S3MFHR-205a6109b0\/fab-1018_720.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720_w":720,"thumb_720_h":343,"thumb_960":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F30S3MFHR-205a6109b0\/fab-1018_960.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_960_w":960,"thumb_960_h":457,"thumb_1024":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F30S3MFHR-205a6109b0\/fab-1018_1024.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_1024_w":1024,"thumb_1024_h":488,"image_exif_rotation":1,"original_w":2976,"original_h":1418,"permalink":"https:\/\/hyperledgerproject.slack.com\/files\/jonathanlevi\/F30S3MFHR\/fab-1018.png","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F30S3MFHR-2f964fc099","channels":["C2GE7GXM1"],"groups":[],"ims":[],"comments_count":1,"initial_comment":{"id":"Fc3088NHG9","created":1478786354,"timestamp":1478786354,"user":"U11MANG9G","is_intro":true,"comment":"<@U0ZR63HLK>: You aren\u2019t the only one...","channel":""}},"user":"U11MANG9G","upload":true,"display_as_bot":false,"username":"<@U11MANG9G|jonathanlevi>","bot_id":null,"ts":"1478786358.002295"},{"type":"message","subtype":"file_share","text":"<@U11MANG9G|jonathanlevi> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/jonathanlevi\/F310YGK0U\/fab-1047.png|FAB-1047>","file":{"id":"F310YGK0U","created":1478786425,"timestamp":1478786425,"name":"FAB-1047.png","title":"FAB-1047","mimetype":"image\/png","filetype":"png","pretty_type":"PNG","user":"U11MANG9G","editable":false,"size":425576,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F310YGK0U\/fab-1047.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F310YGK0U\/download\/fab-1047.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_64":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F310YGK0U-4b7af2f94c\/fab-1047_64.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_80":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F310YGK0U-4b7af2f94c\/fab-1047_80.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F310YGK0U-4b7af2f94c\/fab-1047_360.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360_w":360,"thumb_360_h":186,"thumb_480":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F310YGK0U-4b7af2f94c\/fab-1047_480.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_480_w":480,"thumb_480_h":248,"thumb_160":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F310YGK0U-4b7af2f94c\/fab-1047_160.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F310YGK0U-4b7af2f94c\/fab-1047_720.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720_w":720,"thumb_720_h":373,"thumb_960":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F310YGK0U-4b7af2f94c\/fab-1047_960.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_960_w":960,"thumb_960_h":497,"thumb_1024":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F310YGK0U-4b7af2f94c\/fab-1047_1024.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_1024_w":1024,"thumb_1024_h":530,"image_exif_rotation":1,"original_w":2994,"original_h":1550,"permalink":"https:\/\/hyperledgerproject.slack.com\/files\/jonathanlevi\/F310YGK0U\/fab-1047.png","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F310YGK0U-09c602f5f3","channels":["C2GE7GXM1"],"groups":[],"ims":[],"comments_count":0},"user":"U11MANG9G","upload":true,"display_as_bot":false,"username":"<@U11MANG9G|jonathanlevi>","bot_id":null,"ts":"1478786429.002296"},{"type":"message","user":"U11MANG9G","text":"Actually, I am not too sure which JIRA item we are talking about (neither has comments, I believe). Maybe it\u2019s a different # ?","ts":"1478786470.002297"},{"type":"message","user":"U0ZJZBJLF","text":"No, I meant- I referenced the JIRA in the gerrit item","ts":"1478786521.002298"},{"type":"message","user":"U0ZJZBJLF","text":"that's what I was told to do...","ts":"1478786530.002299"},{"type":"message","user":"U11MANG9G","text":"Oh, you meant in the COMMIT message (not the comment). Sorry, I got it now.","ts":"1478786657.002300"},{"type":"message","user":"U11MANG9G","text":"I misread it, and went too, to check out the JIRA comments. Sorry :wink:","ts":"1478786694.002301"},{"type":"message","user":"U11MANG9G","text":"It\u2019s good practice to have the JIRA item referred to in a patchset commit message. We are working to make it easier (so that the JIRA item has a reference to gerrit, so that developers will receive more unified notifications\u2026 btw.)","ts":"1478786783.002302"},{"type":"message","user":"U0ZJZBJLF","text":"well, I was told to do the opposite- reference the JIRA item in gerrit","ts":"1478786875.002303"},{"type":"message","user":"U0ZJZBJLF","text":"I was doing the opposite before :open_mouth:","ts":"1478786882.002304"},{"type":"message","user":"U0XPR4NP4","text":"<@U1BC5A0F9> Responded to you, and updated the document to reflect some changes made per some feedback from <@U0KN2SSKE>","ts":"1478787208.002305"},{"type":"message","user":"U11MANG9G","text":"<@U0ZJZBJLF>: we can do both (until we get the JIRA &lt;-&gt; gerrit better integrated). Hope we don\u2019t drive people nuts :wink: It makes the reviewing and auditing of changes much easier.","edited":{"user":"U11MANG9G","ts":"1478787407.000000"},"ts":"1478787393.002306"},{"type":"message","user":"U0ZJZBJLF","text":"I was told if I put \"FAB-XXX\" in the commit message, some magical miracle would happen and the JIRA item would recognize the git commit. It worked one time, but usually doesn't","ts":"1478787560.002308"},{"type":"message","user":"U11MANG9G","text":"Yes, there was a plug-in that we were looking into. The \u201cdream\u201d is to have something along the lines of:","ts":"1478788025.002309"},{"type":"message","subtype":"file_share","text":"<@U11MANG9G|jonathanlevi> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/jonathanlevi\/F308N4MS5\/jiragerritreviews.png|JIRA\u2019s Gerrit Reviews Tab>","file":{"id":"F308N4MS5","created":1478788043,"timestamp":1478788043,"name":"JIRAGerritReviews.png","title":"JIRA\u2019s Gerrit Reviews Tab","mimetype":"image\/png","filetype":"png","pretty_type":"PNG","user":"U11MANG9G","editable":false,"size":49706,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F308N4MS5\/jiragerritreviews.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F308N4MS5\/download\/jiragerritreviews.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_64":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F308N4MS5-8e8a671493\/jiragerritreviews_64.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_80":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F308N4MS5-8e8a671493\/jiragerritreviews_80.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F308N4MS5-8e8a671493\/jiragerritreviews_360.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360_w":360,"thumb_360_h":98,"thumb_480":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F308N4MS5-8e8a671493\/jiragerritreviews_480.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_480_w":480,"thumb_480_h":130,"thumb_160":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F308N4MS5-8e8a671493\/jiragerritreviews_160.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","image_exif_rotation":1,"original_w":622,"original_h":169,"permalink":"https:\/\/hyperledgerproject.slack.com\/files\/jonathanlevi\/F308N4MS5\/jiragerritreviews.png","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F308N4MS5-37910cc2b3","channels":["C2GE7GXM1"],"groups":[],"ims":[],"comments_count":0},"user":"U11MANG9G","upload":true,"display_as_bot":false,"username":"<@U11MANG9G|jonathanlevi>","bot_id":null,"ts":"1478788045.002310"},{"type":"message","user":"U11MANG9G","text":"But no, we are not there yet. I can\/will follow up on this.","ts":"1478788094.002311"},{"user":"U2Z3FNF2N","text":"<@U2Z3FNF2N|jinyu> has joined the channel","type":"message","subtype":"channel_join","ts":"1478851173.002312"},{"user":"U1PTA31D2","text":"<@U1PTA31D2|naruhito.t> has joined the channel","type":"message","subtype":"channel_join","ts":"1478868224.002315"},{"type":"message","user":"U1KFCPFQA","text":"Hi, I\u2019ve heard talk of securing peer APIs with access control lists maintained in system chaincode.  Where could I find details of that design?  For example how to lockdown who can call getBlockByNumber() once we expose that to SDK via gRPC?   And if they can call it, can they see all the embedded transaction data including the ReadWriteSets?","ts":"1478878550.002316"},{"user":"U1EF2CN9M","text":"<@U1EF2CN9M|akind> has joined the channel","type":"message","subtype":"channel_join","ts":"1478938114.002317"},{"user":"U1D89DP47","text":"<@U1D89DP47|subzer0> has joined the channel","type":"message","subtype":"channel_join","ts":"1478981809.002318"},{"user":"U2A5NPBQ9","text":"<@U2A5NPBQ9|kent_landholm> has joined the channel","type":"message","subtype":"channel_join","ts":"1479002894.002319"},{"type":"message","user":"U2Y2V95D2","text":"Dear, we tried car-lease-demo example from IBM. It seems the ACCESS RIGHTS is on Function-Code-Level instead of Data-Level, right? How do we do ACCESS RIGHTS on different Data access? Thank you. (For example, data record 1 can be read by user A only. data record 2 can be read by user B only etc.) Thank you.","ts":"1479121565.002322"},{"type":"message","user":"U0XR6J961","text":"what do you want to achieve?","ts":"1479128776.002323"},{"type":"message","user":"U2Y2V95D2","text":"I want to make different data private to some groups of people","ts":"1479136093.002324"},{"type":"message","user":"U0XR6J961","text":"but you know that all VPs see all data","ts":"1479138248.002325"},{"type":"message","user":"U0ZR63HLK","text":"<@U2Y2V95D2>, that can be implemented iin the same way it is implemented for function access control","ts":"1479141727.002326"},{"type":"message","user":"U0ZR63HLK","text":"you might want to apply this access control check during a query","ts":"1479141748.002327"},{"type":"message","user":"U0ZR63HLK","text":"if an entity is query a certain data field, the chaincode will enforce access control","ts":"1479141779.002328"},{"type":"message","user":"U0ZJZBJLF","text":"Hi.\n<https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/gossip\/api\/channel.go>\nIn order to support multi-channels, the gossip component needs 2 methods from the MSP (or should I say, the guys that implement the MSP?)\n```\n\t\/\/ IsInMyOrg returns whether the given peer's certificate represents\n\t\/\/ a peer in the invoker's organization\n\tIsInMyOrg(PeerCert) bool\n\n\t\/\/ Verify verifies a JoinChannelMessage, returns nil on success,\n\t\/\/ and an error on failure\nVerify(JoinChannelMessage) error\n```\nIs that possible to implement?","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/gossip\/api\/channel.go","text":"Read-only mirror of <https:\/\/gerrit.hyperledger.org\/r\/#\/admin\/projects\/fabric>","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/gossip\/api\/channel.go","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"edited":{"user":"U0ZJZBJLF","ts":"1479146918.000000"},"ts":"1479146843.002329"},{"type":"message","user":"U0ZJZBJLF","text":"The JoinChannel message, if it's not clear- is the genesis configuration block sent from the SDK to the peers when a channel is either created or modified","ts":"1479146892.002331"},{"user":"U2X9KDDL7","text":"<@U2X9KDDL7|vdods> has joined the channel","type":"message","subtype":"channel_join","ts":"1479156547.002333"},{"type":"message","user":"U2X9KDDL7","text":"Hi all, I'm wondering if there has been any thought put into (or perhaps an existing solution, be it external or part of Hyperledger) massive key management?  By that I mean managing many keys per user, say on the order of 1 million keys.","ts":"1479157763.002334"},{"type":"message","user":"U2X9KDDL7","text":"One of the motivations here being limiting the damage done in the case of a compromised key by limiting the number of transactions a key can be used for, thereby necessitating management of many keys (for one user).","ts":"1479157839.002335"},{"type":"message","user":"U2Y2V95D2","text":"Thanks <@U0ZR63HLK> and <@U0XR6J961> .","ts":"1479177627.002336"},{"user":"U1HBFGDPV","text":"<@U1HBFGDPV|silentspark> has joined the channel","type":"message","subtype":"channel_join","ts":"1479187381.002337"},{"type":"message","user":"U1BC5A0F9","text":"<@U0ZJZBJLF>, so for the former i think a form of truststore is needed indeed. <@U26T99AQ4> already allured to that in the endorser changeset that he submitted.  For the latter, can u give us more details? We were thinking of adding a function to certify a signature coming from the \"authorities\" governing  that msp (that is the privileged entities within that msp ) that is defined in some pf the policies the msp has been configured with. If this is the case, i think your verify could be implemented using that..","ts":"1479208669.002338"},{"type":"message","user":"U0ZJZBJLF","text":"<@U1BC5A0F9> , The former what? Method? `IsInMyOrg`?","edited":{"user":"U0ZJZBJLF","ts":"1479209000.000000"},"ts":"1479208870.002339"},{"type":"message","user":"U0ZJZBJLF","text":"About `Verify(JoinChannelMessage) error` - this is the to verify the message that the application sends to the peers of a channel in order to make them join a channel, or to update them about a channel's membership","ts":"1479209073.002342"},{"type":"message","user":"U0ZJZBJLF","text":"The message is signed by the app, so I obviously need a way to verify that message","ts":"1479209092.002343"},{"type":"message","user":"U0ZR63HLK","text":"Not sure if the MSP needs to know what is a join channel message. Some other component can extract the relevant information to verify the signature and ask the MSP to perform the actual verification. The same think is happening in other places","ts":"1479209511.002344"},{"type":"message","user":"U0ZR63HLK","text":"No?","ts":"1479209520.002345"},{"type":"message","user":"U0ZJZBJLF","text":"but see that the `JoinChannelMessage ` is an `interface{}` Meaning- if you guys know the concrete type of the message that is passed from the app, you can simply write code that takes that `interface{}`, cast it to a concrete type that you know and then make the check.","ts":"1479209860.002346"},{"type":"message","user":"U0ZJZBJLF","text":"I'm not saying you need to write special code at this moment, all I'm saying- you need to be able to provide the knowledge we (gossip guys) need, and the code details is something we can work on.","ts":"1479209916.002347"},{"type":"message","user":"U0ZR63HLK","text":"Got it","ts":"1479209994.002348"},{"type":"message","user":"U0ZJZBJLF","text":"I myself have no idea what the type of the object passed to me from the app, but I need to write the code that handles it as fast as possible for next week, that's why I layered it this way","ts":"1479210021.002349"},{"type":"message","user":"U0ZR63HLK","text":"Makes sense to me. From my side i expect a module that unpack the join channel message and then asks the MSP about the validity of the signature under a specific policy and give back to you a yes or no","ts":"1479210412.002350"},{"type":"message","user":"U2Y2V95D2","text":"Question: We would like to do encryption for the data in the chaincode. But we cannot load the private key \/ public key that we generate. Is there any way to do this? Thank you.","ts":"1479225211.002351"},{"type":"message","user":"U2Y2V95D2","text":"We try to read the local file (Private key) but it seems the local file private key cannot be accessed in the chaincode...","ts":"1479225270.002352"},{"type":"message","user":"U2Y2V95D2","text":"For example, I want to save a variable X=\"This is a boy\" into the blockchain. And I want to encrypt it with my public key. But I cannot access my public key in the local file.","ts":"1479225628.002353"},{"type":"message","user":"U0XR6J961","text":"who is supposed to encrypt it?","ts":"1479290315.002354"},{"type":"message","user":"U0XR6J961","text":"the chaincode?","ts":"1479290317.002355"},{"type":"message","user":"U0XR6J961","text":"or the app using the chaincode","ts":"1479290326.002356"},{"type":"message","user":"U0XR6J961","text":"<@U2Y2V95D2> ^","ts":"1479290333.002357"},{"type":"message","user":"U2Y2V95D2","text":"I think the chaincode will not encrypt in this level at the moment(Am I correct?). I am thinking of the app level encryption.  Actually, I am open if we can implement either one.","ts":"1479297765.002358"},{"type":"message","user":"U0XR6J961","text":"so if you encrypt in the app","ts":"1479297840.002359"},{"type":"message","user":"U0XR6J961","text":"then you're all good","ts":"1479297845.002360"},{"type":"message","user":"U2Y2V95D2","text":"(My objective is to encrypt the data such that only a particular user can view the data.).","ts":"1479297856.002361"},{"type":"message","user":"U2Y2V95D2","text":"How can I do this? because it seems like I cannot access the private key \/ public key I generated","ts":"1479297892.002362"},{"type":"message","user":"U0XR6J961","text":"what do you mean","ts":"1479297909.002363"},{"type":"message","user":"U0XR6J961","text":"the app can do whatever it wants","ts":"1479297914.002364"},{"type":"message","user":"U0XR6J961","text":"i have the feeling you want to do something in the chaincode, but you're not explicitly saying that","ts":"1479297939.002365"},{"type":"message","user":"U2Y2V95D2","text":"I generate the private key \/ public key outside the docker container","ts":"1479297940.002366"},{"type":"message","user":"U2Y2V95D2","text":"For example, Mr. A send a data(\"XYZ\") to Mr. B.","ts":"1479297981.002367"},{"type":"message","user":"U2Y2V95D2","text":"I want only Mr. B to read it. And I don't want Mr. C or Mr. D . to read it. So, I try to encrypt the data by using Mr. B's Key.","ts":"1479298014.002368"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1479298020.002369"},{"type":"message","user":"U2Y2V95D2","text":"I intend to import the key that I generate outside the docker container.","ts":"1479298056.002370"},{"type":"message","user":"U2Y2V95D2","text":"(the public key\/private key might come from some other authority people)","ts":"1479298085.002371"},{"type":"message","user":"U2Y2V95D2","text":"But I don't know if we can import these key to do the work...","ts":"1479298094.002372"},{"type":"message","user":"U0XR6J961","text":"what is running inside the docker container?","ts":"1479298097.002373"},{"type":"message","user":"U2Y2V95D2","text":"the chaincode.... we write a invoke so that we can put data into the blockchain","ts":"1479298137.002374"},{"type":"message","user":"U0XR6J961","text":"why does the chaincode need the keys?","ts":"1479298145.002375"},{"type":"message","user":"U2Y2V95D2","text":"we want to encrypt\/decrypt the data according to some logic before it is committed to the blockchain","ts":"1479298165.002376"},{"type":"message","user":"U0XR6J961","text":"so not only B is allowed to see","ts":"1479298181.002377"},{"type":"message","user":"U0XR6J961","text":"but also the chaincode","ts":"1479298187.002378"},{"type":"message","user":"U2Y2V95D2","text":"we only want B to see it. Am I wrong in my concept?","ts":"1479298212.002379"},{"type":"message","user":"U0XR6J961","text":"yes of course you are","ts":"1479298227.002380"},{"type":"message","user":"U2Y2V95D2","text":"the data is supposed to be input via \"invoke\"","ts":"1479298235.002381"},{"type":"message","user":"U0XR6J961","text":"you just said you want the chaincode to decrypt it","ts":"1479298237.002382"},{"type":"message","user":"U2Y2V95D2","text":"as parameters","ts":"1479298239.002383"},{"type":"message","user":"U0XR6J961","text":"so it is not only B, but also the chaincode","ts":"1479298250.002384"},{"type":"message","user":"U2Y2V95D2","text":"we intend to \"invoke\" a function in the chaincode.....with parameters as the confidential data \"XYZ\"....","ts":"1479298295.002385"},{"type":"message","user":"U2Y2V95D2","text":"the function will then encrypt the data and put it to the blockchain....","ts":"1479298316.002386"},{"type":"message","user":"U0XR6J961","text":"ah!","ts":"1479298323.002387"},{"type":"message","user":"U0XR6J961","text":"so you want to pass the plain text to the chaincode","ts":"1479298334.002388"},{"type":"message","user":"U0XR6J961","text":"and the chaincode then is supposed to encrypt it and put it on the blockchain","ts":"1479298344.002389"},{"type":"message","user":"U2Y2V95D2","text":"And only Mr.B (authenticated B) can trigger the correct query to decrypt and read the data from the blockchain","ts":"1479298351.002390"},{"type":"message","user":"U2Y2V95D2","text":"yes","ts":"1479298355.002391"},{"type":"message","user":"U0XR6J961","text":"yea i think for that you need to use membership services","ts":"1479298369.002392"},{"type":"message","user":"U0XR6J961","text":"basically use the encryption (confidentiality) implemented in fabric","ts":"1479298389.002393"},{"type":"message","user":"U2Y2V95D2","text":"Do you mean I can use ECert to do this? I try to get the ECert. But I cannot get the private and public key back.","ts":"1479298463.002394"},{"type":"message","user":"U0XR6J961","text":"why do you want the keys?","ts":"1479298488.002395"},{"type":"message","user":"U2Y2V95D2","text":"I want to use the Mr.B key to encrypt the message so that only Mr.B can decrypt it and read it.","ts":"1479298530.002396"},{"type":"message","user":"U0XR6J961","text":"you don't need that","ts":"1479299751.002397"},{"type":"message","user":"U0XR6J961","text":"the fabric does that for you","ts":"1479299754.002398"},{"type":"message","user":"U0XR6J961","text":"you can identify that B sends a query","ts":"1479299764.002399"},{"type":"message","user":"U0XR6J961","text":"and in that case you allow access and send the reply","ts":"1479299776.002400"},{"type":"message","user":"U2Y2V95D2","text":"But how can I put a data to blockchain that specify only \"B\" can query?","ts":"1479300212.002401"},{"type":"message","user":"U2Y2V95D2","text":"For example, Mr. A will try to put the data and specify only Mr.B can query. Anyway to specify this?","ts":"1479300294.002402"},{"type":"message","user":"U0XR6J961","text":"well, just pass that information as part of the invoke","ts":"1479301505.002403"},{"type":"message","user":"U0XR6J961","text":"and store this fact in the state","ts":"1479301513.002404"},{"type":"message","user":"U2Y2V95D2","text":"Right! we can pass \"public key\" by parameters. But how about \"private key\"? I shouldn't pass the private key as parameter right, it will be exposed in blockchain data.","ts":"1479302136.002405"},{"type":"message","user":"U0XR6J961","text":"no, just pass the identity","ts":"1479302157.002406"},{"type":"message","user":"U0XR6J961","text":"and let fabric do the encryption","ts":"1479302172.002407"},{"type":"message","user":"U2Y2V95D2","text":"Thanks Simon. Let me try further","ts":"1479314742.002408"},{"user":"U307KJEDU","text":"<@U307KJEDU|webkruncher> has joined the channel","type":"message","subtype":"channel_join","ts":"1479483766.002409"},{"type":"message","user":"U307KJEDU","text":"Hello,\n\nI'm trying to get a fabric running with my own certs generated using openssl.  I have two machines running\none named LedgerX, the other named LedgerY.   When LedgerY tries to connect to LedgerY, LedgerY\n\ntransport: x509: certificate is valid for LedgerXuser, not LedgerYuser; Reconnecting to ...\n\n\nThe CNs are LedgerX and LedgerY, and the serverhostoverrides are set to be the same on each machine.\n\nCan someone help me out?\n\nThanks,\n-Jmt","ts":"1479483771.002410"},{"user":"U1FMASJFL","text":"<@U1FMASJFL|nvlasov> has joined the channel","type":"message","subtype":"channel_join","ts":"1479520806.002412"},{"type":"message","user":"U0ZJZBJLF","text":"Hey, anyone here for a *really* *really* quick (yet urgent) question?","edited":{"user":"U0ZJZBJLF","ts":"1479827846.000000"},"ts":"1479827836.002413"},{"type":"message","user":"U0ZJZBJLF","text":"<@U26T99AQ4> , <@U0ZR63HLK> <@U1BC5A0F9>  ?","ts":"1479827926.002415"},{"type":"message","user":"U0ZR63HLK","text":"go ahead","ts":"1479827995.002416"},{"type":"message","user":"U0ZJZBJLF","text":"thanks","ts":"1479828055.002417"},{"type":"message","user":"U0ZJZBJLF","text":"it's about multi-channel support","ts":"1479828065.002418"},{"type":"message","user":"U0ZJZBJLF","text":"let's say I have a certificate of a peer","ts":"1479828077.002419"},{"type":"message","user":"U0ZJZBJLF","text":"can I know from that certificate, the certificate of the CA of that org?","ts":"1479828091.002420"},{"type":"message","user":"U0ZJZBJLF","text":"or if I can ask in a different way- what can I extract from the peer's certificate about the org's CA?","ts":"1479828121.002421"},{"type":"message","user":"U0ZJZBJLF","text":"The reason I'm asking is of course- I need to do filtering and to only send messages of a certain kind to peers that are in the organizations of the channel","ts":"1479828155.002422"},{"type":"message","user":"U0ZJZBJLF","text":"(end of question:writing_hand: )","ts":"1479828742.002423"},{"type":"message","user":"U0XQ35CDD","text":"Isn't it a cert chain that you have?","ts":"1479829048.002424"},{"type":"message","user":"U1BC5A0F9","text":"How would you define a filtering?","ts":"1479829055.002425"},{"type":"message","user":"U1BC5A0F9","text":"meaning filtering among certificates you already have?","ts":"1479829065.002426"},{"type":"message","user":"U0ZJZBJLF","text":"No, I mean- let's say I'm a peer `p` in org A and I know that this message I have in my hands can only be sent to orgs A, B and C","edited":{"user":"U0ZJZBJLF","ts":"1479829134.000000"},"ts":"1479829106.002427"},{"type":"message","user":"U1BC5A0F9","text":"right but atthe moment you do not know an implemented broadcast mechanism","ts":"1479829128.002428"},{"type":"message","user":"U0ZJZBJLF","text":"\"an implemented broadcast mechanism\" - what's that?","ts":"1479829150.002430"},{"type":"message","user":"U0ZJZBJLF","text":"oh","ts":"1479829158.002431"},{"type":"message","user":"U0ZJZBJLF","text":"it has nothing to do with that","ts":"1479829161.002432"},{"type":"message","user":"U0ZJZBJLF","text":"the orderer type is irrelevant","ts":"1479829169.002433"},{"type":"message","user":"U1BC5A0F9","text":"given an identity you can derive from there i) the mspid of the MSP that identity claim to belong to, and(ii) validity of that identity within that MSP","ts":"1479829172.002434"},{"type":"message","user":"U1BC5A0F9","text":"Meaning that unless you have some sort of contact point for what you call organization A, assuming that thisis represented by an MSP","ts":"1479829214.002435"},{"type":"message","user":"U1BC5A0F9","text":"you will not  be able to send a message to all members of A","ts":"1479829226.002436"},{"type":"message","user":"U1BC5A0F9","text":"unless you have their contact information + certificate","ts":"1479829236.002437"},{"type":"message","user":"U0ZJZBJLF","text":"Why not?","ts":"1479829239.002438"},{"type":"message","user":"U1BC5A0F9","text":"certificate = identity","ts":"1479829243.002439"},{"type":"message","user":"U0ZJZBJLF","text":"let me rephrase maybe that'll make things more clear:","ts":"1479829253.002440"},{"type":"message","user":"U0ZJZBJLF","text":"I'm a peer `p`  in org A and I have a message `m` that I know I can only send to orgs A, B,C, meaning- to *any* peer in orgs A, B and C.\nnow comes peer `q`, can  I determine whether `q` is in orgs A, B or C? or not?","edited":{"user":"U0ZJZBJLF","ts":"1479829345.000000"},"ts":"1479829295.002441"},{"type":"message","user":"U1BC5A0F9","text":"ah fine","ts":"1479829344.002445"},{"type":"message","user":"U1BC5A0F9","text":"this would be possible using the orgA MSP","ts":"1479829366.002447"},{"type":"message","user":"U1BC5A0F9","text":"that is in that chain's description","ts":"1479829379.002448"},{"type":"message","user":"U0ZJZBJLF","text":"orgA's MSP is \"identical\"\\equivalent to all peers in org A or something?","edited":{"user":"U0ZJZBJLF","ts":"1479829408.000000"},"ts":"1479829395.002449"},{"type":"message","user":"U1BC5A0F9","text":"so in each chain we would have a description of the MSPs there in. Ideally there is one MSP per organization","ts":"1479829406.002450"},{"type":"message","user":"U1BC5A0F9","text":"MSP = membership service provider","ts":"1479829427.002452"},{"type":"message","user":"U1BC5A0F9","text":"in its simpler form consists of a CA","ts":"1479829434.002453"},{"type":"message","user":"U0ZJZBJLF","text":"yeah I know the acronym but it's also a library name","ts":"1479829443.002454"},{"type":"message","user":"U1BC5A0F9","text":"root CA, and certificates of members of that MSP are signed with that root CA's signing key","ts":"1479829452.002455"},{"type":"message","user":"U1BC5A0F9","text":"at the chain creation ntime, the MSPManager that is fed the genesis block would instantiate the MSPs described in the genesis block","ts":"1479829480.002456"},{"type":"message","user":"U0ZJZBJLF","text":"when you say instantiate the MSPs you mean, instantiate the MSPs of each peer in the channel, right?","ts":"1479829515.002457"},{"type":"message","user":"U1BC5A0F9","text":"at the chain creation, MSP defintiion is accompanied by the id of that MSP, so that identities can reference it and be parsed\/evaluated with that MSP","ts":"1479829515.002458"},{"type":"message","user":"U1BC5A0F9","text":"so the peer gets the genesis block","ts":"1479829537.002459"},{"type":"message","user":"U1BC5A0F9","text":"reads the MSPs included there and asks the chain's MSPManager to create one or more MSP objects as described in the genesis block.","ts":"1479829569.002460"},{"type":"message","user":"U1BC5A0F9","text":"Using that , the peer can check if a given certificate\/identity is a valid identity within the presmise of an MSP","ts":"1479829592.002461"},{"type":"message","user":"U1BC5A0F9","text":"so if you have multiple organizations in side the same MSP then you can use the OU inside the certificate for finer grained determination of the org a cert  belongs to","ts":"1479829638.002462"},{"type":"message","user":"U0ZJZBJLF","text":"OU is equivalent to an organization I presume?","ts":"1479829702.002463"},{"type":"message","user":"U1BC5A0F9","text":"organization unit","ts":"1479829819.002464"},{"type":"message","user":"U1BC5A0F9","text":"could be yes","ts":"1479829828.002465"},{"type":"message","user":"U0ZJZBJLF","text":"and if I may be more precise and get to the bottom line- can the MSP (as a component of a peer) give me the following ability:\n`OrgByPeerIdentity(PeerIdentityType) OrgIdentityType`","ts":"1479829871.002466"},{"type":"message","user":"U0ZJZBJLF","text":"Meaning- if I have a peer's certificate (what you guys call an identity) - can I derive from it the OU or anything that determines its organization, even if the peer is *from a different org*?","ts":"1479829928.002467"},{"type":"message","user":"U0PB67X4K","text":"<@U0ZJZBJLF> - we most definitely need to have that capability","ts":"1479830902.002468"},{"type":"message","user":"U0ZJZBJLF","text":"yeah I'm just making a double check for: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2705\/>","ts":"1479830937.002469"},{"type":"message","user":"U0ZJZBJLF","text":"I'm continuing multi-channel support in gossip this week and I suddenly remembered I haven't changed the already committed API to that phone call we had","ts":"1479830972.002470"},{"type":"message","user":"U0ZJZBJLF","text":"so I want to make sure this is OK, and then I'll rebase the branch to this branch","ts":"1479830987.002471"},{"type":"message","user":"U0ZJZBJLF","text":"(I'll end up again with a chain of commits, like I always do lately :slightly_smiling_face: )","ts":"1479831002.002472"},{"type":"message","user":"U0ZJZBJLF","text":"So I wanted to ensure *they*'re OK with it","ts":"1479831038.002473"},{"type":"message","user":"U0ZR63HLK","text":"mhh, we don't have right now this concept of organization. An MSP instance can represent an organization as Elli was saying. Not sure if this is enough to cover all the cases. Otherwise we have to pretend that MSPs based on different technologies have to support this concept, this might be fine.","ts":"1479832299.002474"},{"type":"message","user":"U0PB67X4K","text":"<@U0ZR63HLK> - now that we have a basic end to end path working, we need to step back and quickly revisit the whole MSP implementation.  This is unfortunate but not unexpected.","ts":"1479832994.002475"},{"type":"message","user":"U0PB67X4K","text":"but for sure we need a way to extract \"organization\" from identities \/ certificates","ts":"1479833038.002476"},{"type":"message","user":"U0PB67X4K","text":"gossip, vscc and orderer (for config) all need this","ts":"1479833090.002477"},{"type":"message","user":"U0ZR63HLK","text":"<@U0PB67X4K>, by organization, do you mean MSP_ID?","ts":"1479833310.002478"},{"type":"message","user":"U0ZJZBJLF","text":"wait wait <@U0ZR63HLK>  this doesn't make sense that you don't have an org-equivalent entity. \nHow do you do filtering of which peers are allowed to call `Deliver` on a specific channel? From Elli's google doc I inferred that the ordering service consults the MSP to decide that, and that MSP decides on the org to which the peer belongs to","ts":"1479833410.002479"},{"type":"message","user":"U0ZR63HLK","text":"I mean, we don't have an org concept exposed by the MSP, the only think close to it can be the MSP_ID","ts":"1479833491.002480"},{"type":"message","user":"U0ZR63HLK","text":"for instance, if you look at this file configuration file: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2677\/1\/config-files\/peer-init-config.json>","ts":"1479833541.002481"},{"type":"message","user":"U0ZR63HLK","text":"there is a _comment_cert-validation-policy section","ts":"1479833557.002482"},{"type":"message","user":"U0ZR63HLK","text":"that says what it means for an identity to belong to a specific MSP","ts":"1479833579.002483"},{"type":"message","user":"U0ZR63HLK","text":"I might be wrong, let's have also Elli validating this","edited":{"user":"U0ZR63HLK","ts":"1479833615.000000"},"ts":"1479833600.002484"},{"type":"message","user":"U0ZJZBJLF","text":"You mean the principals?","ts":"1479833768.002486"},{"type":"message","user":"U1BC5A0F9","text":"Ok but certificates\/identities contain both information","ts":"1479834892.002487"},{"type":"message","user":"U1BC5A0F9","text":"the organization (as standard x509 certificates) and the MSPID of the MSP they refer to","ts":"1479834910.002488"},{"type":"message","user":"U0ZJZBJLF","text":"I've lost the context you're replying to, Elli","ts":"1479834933.002489"},{"type":"message","user":"U1BC5A0F9","text":"Ok, an MSP aims to represent some group of certificates. Ideally this should be connected to one or more organizations.","ts":"1479834960.002490"},{"type":"message","user":"U1BC5A0F9","text":"This would be reflected to the root certificates included in that MSP validation path. To get the specific organization an identity belongs to, the identity is already equipped with a function to return that identity's organization within that MSP.","ts":"1479835025.002491"},{"type":"message","user":"U0ZR63HLK","text":"What's the name of the function?","ts":"1479835057.002492"},{"type":"message","user":"U1BC5A0F9","text":"getParticipant() I believ","ts":"1479835071.002493"},{"type":"message","user":"U1BC5A0F9","text":"e","ts":"1479835071.002494"},{"type":"message","user":"U1BC5A0F9","text":"or getParticipantID()","ts":"1479835081.002495"},{"type":"message","user":"U1BC5A0F9","text":"but from a security perspective it is important","ts":"1479835106.002496"},{"type":"message","user":"U1BC5A0F9","text":"that it is always considered within the msp this identity belongs to","ts":"1479835116.002497"},{"type":"message","user":"U0ZR63HLK","text":"And what's the output of that function?","ts":"1479835135.002498"},{"type":"message","user":"U1BC5A0F9","text":"otherwise malicious MSPs can issue certificates on organizations they do not own\/control.","ts":"1479835137.002499"},{"type":"message","user":"U1BC5A0F9","text":"identity.getParticipantID()","ts":"1479835150.002500"},{"type":"message","user":"U1BC5A0F9","text":"no input","ts":"1479835152.002501"},{"type":"message","user":"U1BC5A0F9","text":"identity represents the certificate","ts":"1479835164.002502"},{"type":"message","user":"U0ZR63HLK","text":"I mean, for the x509 based implementation of the MSP, what's the output of that function?","ts":"1479835205.002503"},{"type":"message","user":"U1BC5A0F9","text":"th ou of that identity","ts":"1479835213.002504"},{"type":"message","user":"U1BC5A0F9","text":"certificate","ts":"1479835218.002505"},{"type":"message","user":"U0ZR63HLK","text":"Okay, I was mislead by the name. Got it! ","ts":"1479835289.002506"},{"type":"message","user":"U1BC5A0F9","text":"yeah, well we need to finalize the terminology","ts":"1479835399.002507"},{"type":"message","user":"U0ZR63HLK","text":"Okay, so we can say that what <@U0ZJZBJLF>  requires is offered by the MSP","ts":"1479835474.002508","reactions":[{"name":"+1","users":["U0ZJZBJLF"],"count":1}]},{"type":"message","user":"U1BC5A0F9","text":"cause participant somehow at some point meant to represent an organization which was supposed to be represented by an MSP","ts":"1479835516.002509"},{"type":"message","user":"U1BC5A0F9","text":"correct","ts":"1479835517.002510"},{"type":"message","user":"U0ZJZBJLF","text":"So, the method `OrgByPeerIdentity(PeerIdentityType) OrgIdentityType`\nIn: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2705\/4\/gossip\/api\/channel.go> \nIs something that each peer can have and invoke on an identity of any other peer, right? <@U0ZR63HLK> , <@U1BC5A0F9>  ?","edited":{"user":"U0ZJZBJLF","ts":"1479835687.000000"},"ts":"1479835664.002511"},{"type":"message","user":"U0ZR63HLK","text":"The answer should be yes at this point :) ","edited":{"user":"U0ZR63HLK","ts":"1479836459.000000"},"ts":"1479836032.002513"},{"type":"message","user":"U0ZJZBJLF","text":"\"at this point\" is what I fear the most in this project, but that's much better than nothing. \nThanks :slightly_smiling_face:","ts":"1479836078.002514"},{"type":"message","user":"U0ZR63HLK","text":"Right :)","ts":"1479836117.002515"},{"type":"message","user":"U1BC5A0F9","text":":slightly_smiling_face:","ts":"1479839399.002518"},{"type":"message","user":"U0ZR63HLK","text":"<@U1BC5A0F9>, <@U0ZJZBJLF>: just to better clarify. ParticipantID is supposed to return the x509 Subject's Organization field or OrganizationalUnit field?","ts":"1479889768.002519"},{"type":"message","user":"U2KJHTPQT","text":"A thought I had this morning","ts":"1479895017.002520"},{"type":"message","user":"U2KJHTPQT","text":"How easy is it to do SPV proving on Fabric?","ts":"1479895031.002521"},{"type":"message","user":"U2KJHTPQT","text":"I'm thinking for IoT purposes","ts":"1479895042.002522"},{"type":"message","user":"U2KJHTPQT","text":"A tiny device that only has a very limited amount of memory should be able to get reliable information from a chaincode contract with only a few seed nodes known","ts":"1479895127.002523"},{"type":"message","user":"U0PB67X4K","text":"<@U0ZR63HLK> - good question above.   Here's my take on what we \"allow\" in terms of being able to identity unique members\/participants\/organizations (m\/p\/o) (using every term I know people currently use - we need to quickly hone in on one):\n\n1) Unique certificate issuing authority  - can either be a unique root or intermediate CA (e.g. each m\/p\/o uses it's own CA)\n2) CAs are shared between m\/p\/o's .  In this case, unique identification would be the combination of the certificate issuing authority (root\/intermediate CA) and a \"unique\" field(s) in the Subject DN (need to think about how we allow this to be specified).  Maybe it has to be a unique base DN","edited":{"user":"U0PB67X4K","ts":"1479900273.000000"},"ts":"1479900194.002524"},{"type":"message","user":"U1BC5A0F9","text":"Is it reasonable to assume that the certificate will include inside (Some prefix of its OU field) the MSPID\/Organization name?","ts":"1479904531.002526"},{"type":"message","user":"U1BC5A0F9","text":"Assuming MSPID is \"assigned\" by an MSP (application) at chain genesis time, followed by the MSP config info, we could \"recommend\" that MSPID is some organization name that appears in the OU field of all identities for which MSPManager.isValid(MSPID, identity) returns true.","edited":{"user":"U1BC5A0F9","ts":"1479904798.000000"},"ts":"1479904649.002527"},{"type":"message","user":"U1BC5A0F9","text":"We had a short discussion over this with <@U0ZR63HLK>, and <@U26T99AQ4> this morning.","ts":"1479904683.002528"},{"type":"message","user":"U0PB67X4K","text":"It is indeed safe to assume that we can extract the org \/ distinct name from the subject DN.   The question is how \"prescriptive\" are we in terms of the form of the subject DN?","ts":"1479905670.002531"},{"type":"message","user":"U1BC5A0F9","text":"<@U0PB67X4K> so all subjects will have the same DN, and no other entities outside that MSP can have the same DN?","edited":{"user":"U1BC5A0F9","ts":"1479907014.000000"},"ts":"1479906975.002532"},{"type":"message","user":"U1BC5A0F9","text":"So to absolutely define the OU a subject belongs to, we wouldneed to specify, the chainid, the mspid (which will be equal to the subjects' DN), and OU of the subject where necessary.","ts":"1479907116.002534"},{"type":"message","user":"U1BC5A0F9","text":"To absolutely define the DN of the subject we would need to specify the chain and MSPID the identity (Subject) is valid within (given that MSPID would take its name from its subjects DN).","edited":{"user":"U1BC5A0F9","ts":"1479907201.000000"},"ts":"1479907167.002535"},{"type":"message","user":"U1BC5A0F9","text":"Am i correct?","ts":"1479907171.002536"},{"type":"message","user":"U0PB67X4K","text":"Let's assume that we have a single CA and it issues certificates for all the peers for all of \/ each of the members","ts":"1479907606.002538"},{"type":"message","user":"U0ZJZBJLF","text":"```\nSo to absolutely define the OU a subject belongs to, we wouldneed to specify, the chainid, the mspid (which will be equal to the subjects' DN), and OU of the subject where necessary.\n```\nWhy the chainID?","ts":"1479907608.002539"},{"type":"message","user":"U0PB67X4K","text":"So - you might have DNs that looks like:\n```\nCN=peer1, OU=org1, O=IBM, C=US\nCN=peer2, OU=org1, O=IBM, C=US\n\nCN=peer1, OU=org2, O=IBM, C=US\n.\n.\n.\nCN=peer2, OU=orgX, O=IBM, C=US\n\n```","edited":{"user":"U0PB67X4K","ts":"1479907801.000000"},"ts":"1479907762.002540"},{"type":"message","user":"U0PB67X4K","text":"in this case, the \"baseDN\" is always the same :  `O=IBM, C=US` and `OU` is distinct","ts":"1479907837.002542"},{"type":"message","user":"U0PB67X4K","text":"so you'd have 2 options:\n\n1) when you register the participant\/member\/org, you provide the root ca plus an explicit baseDN (the part that would come after the common name (CN)) for example:\n```\norg1, rootcert,basedn=\"OU=org1, O=IBM, C=US\"\norg2, rootcert,basedn=\"OU=org2, O=IBM, C=US\"\n```","edited":{"user":"U0PB67X4K","ts":"1479908026.000000"},"ts":"1479908018.002543"},{"type":"message","user":"U0PB67X4K","text":"this option is nice because it allows you to use different suffixes for the DN\n\nor\n\n2) you could try to be fancy and just try to extract the `OU` part out","ts":"1479908102.002545"},{"type":"message","user":"U0PB67X4K","text":"I prefer option 1 - where basic the CN=enrollID and you require that if you use the same CA you must explicitly list the entire DN suffix \/ base DN","ts":"1479908169.002546"},{"type":"message","user":"U26T99AQ4","text":"So, `Subject.OU` is what we'll use to identify the MSP ID for a cert - correct?","edited":{"user":"U26T99AQ4","ts":"1479909286.000000"},"ts":"1479909262.002547"},{"type":"message","user":"U0PB67X4K","text":"so honestly this whole MSP thing confuses me but just wanted to see what would happen with an implementation","ts":"1479911562.002549"},{"type":"message","user":"U0PB67X4K","text":"putting that aside, let me try this another way:\n\nI'll start with the VSCC case because I think it is easiest to show what is needed \/ capture what we could\/should do","ts":"1479911627.002550"},{"type":"message","user":"U0PB67X4K","text":"(brb - don't let the suspense kill you  :wink: )","ts":"1479911651.002551","reactions":[{"name":"joy","users":["U0XQ35CDD"],"count":1}]},{"type":"message","user":"U1BC5A0F9","text":":smile:","ts":"1479912667.002552"},{"type":"message","user":"U0PB67X4K","text":"So I'm in VSCC and my goal is to make sure that the transaction conforms to an endorsement policy which says that we need endorsement for 2 out of the 3 \"participants\/organizations\/members (p\/o\/m)\" that are part of the chain\/channel.   Of course our endorsement checking is based on digital signatures.   So for each EndorsementResponse in the transaction, we need to verify the signature and extract the  p\/o\/m.   I'll assume X509 method for now (since honestly I don't know how to do this for IdentityMixer).  So I need the signature and the bytes of the X509 certificate to:\n\n1) validate that this identity comes from a trusted source:\n\nSo I extract the X509 certificates bytes and in order to \"validate\" it I make sure that is was issued by a trusted authority (in this case a certificate authority which is trusted) \n\n2) obtain the p\/o\/m \n\nFor step 1) above, we have already figured out the \"trusted authority\" so now we need to determine if this authority is responsible for multiple p\/o\/m's.  If responsible for multiple, what can we use from the signing certificate to uniquely identity it's p\/o\/m ?  Clearly we can't use the CN since we assume that a p\/o\/m can have multiple peers and it would make sense for the CN to be the enrolled peer \"name\".   So now we basically have the remainder of the DN to work with.   We could require that you must specify the entire remainder of the DN to identify the p\/o\/m (easy) or we could require that you have an OU as the start of the remainder of the DN and use that (still easy) or we could allow you to have a variable field in the remainder of the DN and use an expression to extract it (hardest)\n\n\n3) verify the signature  (of course if X509\/PKIX you could really combine 1 and 3   but we'll keep them separate for supporting other mechanisms such as identity mixer)\n\nStandard verify used here based on the type of signature and the algorithm specified as part of the fabric","ts":"1479913023.002553"},{"type":"message","user":"U0PB67X4K","text":"So what does this mean coming from the other end - i.e. when you configure a new p\/o\/m to be part of a chain\/channel?    If each p\/o\/m uses their own certificate authority, then all you need is the their CA cert (and it's full chain if it's an intermediate authority).   If multiple p\/o\/m's share the same certificate authority, you need to specify the CA cert (and its chain) as well as either the full DN suffix (the part after the CN) or the OU (assuming we force that convention)","ts":"1479913227.002554"},{"type":"message","user":"U0PB67X4K","text":"So from any X509 public cert used for signing, you should be able to extract the issuer, find that in the list of trusted root authorities and if it has no \"DNs\" under it, just consider it the p\/o\/m else match both the issuer and the OU \/ DN suffix","ts":"1479913338.002555"},{"type":"message","user":"U0PB67X4K","text":"So I would have though that we would have different provider types like \"X509\", \"IdentityMixer\", etc which we could use when initially \"registering \/ creating \/ configuring\" trusted authorities and that each CA\/optional list of DNs would be used to instantiate instances of that type","ts":"1479913452.002556"},{"type":"message","user":"U0PB67X4K","text":"seems like we have a lot more complexity right now","ts":"1479913533.002557"},{"type":"message","user":"U0PB67X4K","text":"(sorry for the long winded writeup)","ts":"1479913646.002558"},{"type":"message","user":"U0ZR63HLK","text":"so, let me make sure I understood. An MSP  should be instantiated by specifying a type, a set of trusted root certificates (CAs) and for each CA a list of DNs. Now a policy to say that an identity belong to a certain MSP might say something like: the identity must be valid against the trusted root certificates and it has to be in the list of DNs. Am I correct?","ts":"1479914785.002559"},{"type":"message","user":"U0PB67X4K","text":"pretty close - devil in the details - but yes.  And sometimes if there are no DNs, it's just the root certificate that identifies the p\/o\/m  (my new term)","ts":"1479914867.002560"},{"type":"message","user":"U1BC5A0F9","text":"Hm, but ok. Lets take the example of a chain where org1 org2 and org3 participate.","ts":"1479919373.002561"},{"type":"message","user":"U1BC5A0F9","text":"their applications talk to each other and each of these orgs provide their msp info","ts":"1479919394.002562"},{"type":"message","user":"U1BC5A0F9","text":"so org1 uses ca1 as rootca","ts":"1479919406.002563"},{"type":"message","user":"U1BC5A0F9","text":"org2 uses ca2 as rootca","ts":"1479919413.002564"},{"type":"message","user":"U1BC5A0F9","text":"and org3 uses ca3 as rootca","ts":"1479919420.002565"},{"type":"message","user":"U1BC5A0F9","text":"btw, org1, org2, and org3 can be used to identify these msp-is in the chain genesis block","ts":"1479919445.002566"},{"type":"message","user":"U1BC5A0F9","text":"So in this case steps 1 and 3 are already supported by the MSP interfaces. For (2) one could easily add to the MSPManager a call returning the OU\/CN of an id that is redirected to the associated MSP that would include some struct {mspid = {org1, org2, org3}, <http:\/\/subject.CN|subject.CN>, subject.OU}","edited":{"user":"U1BC5A0F9","ts":"1479919670.000000"},"ts":"1479919620.002567"},{"type":"message","user":"U1BC5A0F9","text":"would this suffice?","ts":"1479919680.002569"},{"type":"message","user":"U1BC5A0F9","text":"Othwerwise access policies if defined in terms of CAs may need to be updated each time an MSP updates its rootca","ts":"1479919771.002570"},{"type":"message","user":"U0ZR63HLK","text":"<@U1BC5A0F9>, this also makes sense to me. <@U0PB67X4K>, is Elli closer to what you meant?","ts":"1479921642.002571"},{"type":"message","user":"U0ULK2JPP","text":"<@U0ZR63HLK> <@U1BC5A0F9> <@U0PB67X4K> caveat emptor - I\u2019m worse than a new born babe in these matters\u2026. let me ask one thing please","ts":"1479921752.002572"},{"type":"message","user":"U0ULK2JPP","text":":slightly_smiling_face:","ts":"1479921755.002573"},{"type":"message","user":"U0ZR63HLK","text":"yes, please :slightly_smiling_face:","ts":"1479921777.002574"},{"type":"message","user":"U0ULK2JPP","text":"(1) asks is this ID valid ? \u2026 and (3) asks can you verify this signature .  correct ?","ts":"1479921860.002575"},{"type":"message","user":"U0ULK2JPP","text":"I\u2019ll wait ...","ts":"1479921934.002576"},{"type":"message","user":"U0PB67X4K","text":"<@U0ZR63HLK> - conceptually <@U1BC5A0F9> is pretty close.  Perhaps my concern\/confusion\/issue stems from the terminology.  ","ts":"1479922010.002577"},{"type":"message","user":"U0ZR63HLK","text":"if we can use as guideline what Elli said that would be helpful","ts":"1479922060.002578"},{"type":"message","user":"U0ZR63HLK","text":"<@U0ULK2JPP>, I would say yes.","ts":"1479922069.002579"},{"type":"message","user":"U0ULK2JPP","text":"where I was going with this was\u2026 (2) seems to say something different \u2026. is it (a) give me the  p\/o\/m so I (say VSCC) can do further verifications OR (b) can you MSP verify id based on the p\/o\/m ? the later implies there\u2019s a policy associated with the MSP","edited":{"user":"U0ULK2JPP","ts":"1479922245.000000"},"ts":"1479922137.002580"},{"type":"message","user":"U0ULK2JPP","text":"(now I\u2019ll shut up :-))","ts":"1479922158.002581"},{"type":"message","user":"U0PB67X4K","text":"I don't equate member with MSP or at least I don't like doing it that way.  We are overall missing the concept of what I called p\/o\/m and I would look at  its \"membership\" info as being an attribute of it.  Let me look at the interfaces again but it just seems confusing to me","ts":"1479922221.002582"},{"type":"message","user":"U0PB67X4K","text":"<@U0ULK2JPP>:   2) comes into play so that you can determine the number of unique p\/o\/m's from which you have signatures.  This is required because we will allow  multiple peers per p\/o\/m and don't want to count 2 endorsements from the same p\/o\/m.\nIt may be that vscc would not normally need to see this directly depending on how policy enforcement is executed but I could see cases where custom vscc would need to have access to the p\/o\/m's which endorsed a transaction ","ts":"1479923455.002584"},{"type":"message","user":"U0ULK2JPP","text":"I think I\u2019m getting it <@U0PB67X4K> \u2026","ts":"1479924089.002585"},{"type":"message","user":"U0ULK2JPP","text":"lets take 2 propositions","ts":"1479924099.002586"},{"type":"message","user":"U0ULK2JPP","text":"1) 2 out of 3","ts":"1479924110.002587"},{"type":"message","user":"U0ULK2JPP","text":"2) (POM-1 || POM-2) &amp;&amp; POM-3","ts":"1479924134.002588"},{"type":"message","user":"U0ULK2JPP","text":"the second one is easy \u2026 we can easily ask MSP directly `msp.IsPOM(pom)` and evaluate the expression in VSCC","edited":{"user":"U0ULK2JPP","ts":"1479924640.000000"},"ts":"1479924188.002589"},{"type":"message","user":"U0ULK2JPP","text":"the first one illustrates the problem outlineted \u2026. its better stated as (1) 2 unique out of 3","ts":"1479924269.002591"},{"type":"message","user":"U0ULK2JPP","text":"for (1) then VSCC has to _retrieve_ POM from MSP and then do the checks itself \u2026 so what would `msp.GetPOM(cert)` look like ? Hence the discussion on CN, DN, OU etc\u2026. sounded like we need to standardize on some convention to represent POMs for our purpose ?","edited":{"user":"U0ULK2JPP","ts":"1479924542.000000"},"ts":"1479924404.002592"},{"type":"message","user":"U0PB67X4K","text":"Correct and correct ","ts":"1479924654.002595"},{"type":"message","user":"U0ULK2JPP","text":"(whew)","ts":"1479924666.002596"},{"type":"message","user":"U0ZJZBJLF","text":"1) Has it been already decided whether peers use SSL certificates signed by COP, or self-signed? \n2) If they are signed by COP, are they *the same* certificates that are used to verify application-layer signatures by the `msp` layer inside the peer?","ts":"1479932896.002597"},{"type":"message","user":"U0PB67X4K","text":"Hi <@U0ZJZBJLF> - \n\n1) I think the real question here is what we support in terms of *trust* with respect to TLS certificates, meaning the most scalable method is to trust at a CA level, but of course we could explicitly trust individual certificates as well.  But we can't support a peer generating a self-signed certificate on the fly without it sharing that certificate with the rest of the network prior to trying to communicate\n\n\n2) While the same certificate CAN be used for both TLS and signing, not sure whether or not we should require this to be the case.","ts":"1479984712.002598"},{"type":"message","user":"U0ZJZBJLF","text":"1) why? What if the peer first connects via ssl and then authenticates using the cop-signed credentials? \n2) ok. I think we should go to the most flexible approach because flexibility is more adaptive","edited":{"user":"U0ZJZBJLF","ts":"1479985515.000000"},"ts":"1479984952.002599"},{"type":"message","user":"U0PB67X4K","text":"Let's say that peer1 tries to connect to peer2 via TLS.  peer1 initiates the TLS connection and as part of the TLS handshake peer2 will send out its public TLS certificate.  By default (which is actually secure), peer1 will check the following things:\n\n1) hostname verification -peer1 checks to see whether or not the certificate from peer2 matches the hostname\/IP which peer1 used to connect to peer2  (basically either the common name or one of the subject alternative names (SANs) need to match)\n\n2) PKIX checking - peer1 checks to see whether or not it trusts the issuer of the certificate (which means that if it has no knowledge of the certificate itself or the root chain for the certificate it will never establish the TLS connection)\n\nYou can override these parameters, but then TLS is essentially useless from a \"trust\" perspective and could only be used to secure the transport communication","ts":"1479986903.002601"},{"type":"message","user":"U0ZJZBJLF","text":"That's all i'm saying. Maybe you can use tls just for that and authenticate the session in the gRPC handling method","ts":"1479989335.002602"},{"type":"message","user":"U0ZJZBJLF","text":"Or use a signed by cop certificate which will be different than the msp one","ts":"1479989376.002603"},{"type":"message","user":"U0ZJZBJLF","text":"(the one you use to sign messages manually)","ts":"1479989392.002604"},{"type":"message","user":"U0ZJZBJLF","text":"But my question is- have these things been decided and coded? <@U0PB67X4K> ?","ts":"1479989430.002605"},{"user":"U2URL5G8P","text":"<@U2URL5G8P|satyam_agl> has joined the channel","type":"message","subtype":"channel_join","ts":"1479995251.002606"},{"type":"message","user":"U1TA5FDU7","text":"Hi, guys. How the Tcert is used in the fabric network?  I mean what field is necessary in the Tcert (x.509). From the whitepaper on <http:\/\/github.com|github.com>, I found the content of Tcert includes: [ TcertId,  AES_Encrypt(pre_k, EnrollmentID), AES_Encrypt(TcertOwner_EncryptKey, TcertIndex),  Sign_Verification_PublicKey, Key_Agreement_PublicKey, Validity_period) .etc.  Here I want to know how to put these things into the Tcert.","ts":"1480152894.002607"},{"type":"message","user":"U1TA5FDU7","text":"<@U0PB67X4K> <@U0ZJZBJLF> <@U0ULK2JPP>","ts":"1480153021.002608"},{"type":"message","user":"U1TA5FDU7","text":"The same meaning is that how do you guys use the Tcert. Just to verify the user's signature and check if the transaction is modified?  I know users are anonymous in the fabric network, but what's the purpose of attributes in tcertRequest.json.","ts":"1480153518.002609"},{"type":"message","user":"U1TA5FDU7","text":"And if it is a must, how can i put all the attributes stuff into the X509 certificates.","ts":"1480153583.002610"},{"type":"message","user":"U0PB67X4K","text":"<@U1TA5FDU7>  - the idea of Tcerts is to provide a mechanism for transactions to be \"un-linkable\" from the ledger perspective unless an authority provides the \"key\" to \"re-link\" the identities.  The primary crypto is how TCert \"private keys\" are derived from the public enrollment key for an identity (the pre_k and tcert index stuff).   \n\nAs you gathered, the only \"identities\" in the system are provided via the public key which is used to sign transactions (and endorsements in v1.0).  The default mechanism is X509 \/ PKIX so one includes the X509 public key along with the signature.\n\nWhile \"un-linkable\" identities solve one problem, they also create a challenge:  if identity comes from the signing certificates and you never use the same signing certificate twice (as that would defeat un-linkability), how can you make any type of access control decision based on these identities?\n\nIn order to solve that problem, we came up with the idea of *optionally* including encrypted attributes as part of TCerts.   In the X509 case, we simply use standard X509 extension attributes as the \"carrier\" mechanism\n\nSo when a batch of TCerts is created, you can specify which attributes to include (assuming they have been associated with the enrollment ID).  In the end, these attributes are included to the certificate signing request for the TCert public key(s) included in the batch","ts":"1480172685.002611"},{"type":"message","user":"U1TA5FDU7","text":"Thank you so so much, <@U0PB67X4K>.","ts":"1480211324.002612"},{"user":"U2UKSBLG5","text":"<@U2UKSBLG5|jjmiranda> has joined the channel","type":"message","subtype":"channel_join","ts":"1480292525.002613"},{"type":"message","user":"U0ZJZBJLF","text":"<@U0ZR63HLK>  writing this here so that <@U26T99AQ4>  and <@U1BC5A0F9>  could see and comment:\nso if I add to the `MessageCryptoService` in `gossip\/api\/crypto.go` something like: \n`ValidateIdentity(peerIdentity PeerIdentityType) error` that'd suffice, right?","edited":{"user":"U0ZJZBJLF","ts":"1480350339.000000"},"ts":"1480350328.002614"},{"type":"message","user":"U0ZR63HLK","text":"The method signature makes sense, we will then see if something needs to be modified when we will go to the implementation","ts":"1480350380.002616"},{"type":"message","user":"U0ZJZBJLF","text":"but you are implementing the interface this week, right?  if so- can we agree on adding that exact string in the meantime?","ts":"1480350414.002617"},{"type":"message","user":"U0ZJZBJLF","text":"because I can also make use of that","ts":"1480350419.002618"},{"type":"message","user":"U0ZR63HLK","text":"you mean that method?","ts":"1480350438.002619"},{"type":"message","user":"U0ZJZBJLF","text":"yeah","ts":"1480350441.002620"},{"type":"message","user":"U0ZR63HLK","text":"Yes, I will be working on that","ts":"1480350446.002621"},{"type":"message","user":"U0ZR63HLK","text":"you can already add it to one of your change-set","ts":"1480350457.002622"},{"type":"message","user":"U0ZR63HLK","text":"and start using it","ts":"1480350465.002623"},{"type":"message","user":"U0ZR63HLK","text":"at some point, we will provide our implementation of that interface","edited":{"user":"U0ZR63HLK","ts":"1480350490.000000"},"ts":"1480350474.002624"},{"type":"message","user":"U184J2R7S","text":"We are working on trying to get JIRA updated with this:","ts":"1480351063.002626"},{"type":"message","user":"U184J2R7S","text":"This document contains work-items originally assigned to Crypto squad some of which were refined after our face-to-face:\n\n1. MSP\/chain configuration  documentation. In RTP we had long discussions on what information needs to be passed to fabric MSPManager and\/or to the default MSP (X509 based and\/or COP-based). Configuration relates to parameters associated to the crypto material used by each MSP, but also policies that need to be respected to validate certificates\/members or to reconfigure an MSP. We reached to certain conclusions that are to be documented with a changeset (partially done here: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2677\/>), and by updating its description here <https:\/\/docs.google.com\/document\/d\/1_vf5X5WPpECr0PsHM1XfPHB0gmoPJX9j_iGJ5_0mlmI\/edit)> Elli\n\n2. Integration of MSP logic \/ flow to orderers. Ordering service nodes need to  sign certain proto messages as well as reconfiguration transactions (e.g., genesis blocks). Currently this is done by them directly calling the corresponding crypto library. Here one would need to integrate the MSPManager and related interfaces to do signature generation and verification. Angelo\n\n3. PeerMSP implementation. Here we need to implement the default MSP in golang, that is used by the peer, to parse tcerts\/ecerts and confirm signatures generated with these tcerts\/ecerts. This is already work that Ale has started within item (5). Ale\n\n4. Integration of MSP Manager \/ MSP interfaces to the policy framework used for endorsement policies, certificate validation, etc. The policy framework mentioned above leverages an abstractly defined signing and signature verification interface that currently does nothing. We would need to implement that interface using  MSPManager\/default MSP. In addition, we may want to extend the MSP interface with the notion of \nMSP membership\", e.g., a function that leverages certificate validation mechanisms to decide whether the certificate owner is a member of an MSP or not. This would work as a building block to support \"identity group definitions\" that could be leveraged inside policies. Ale\n    \n5. Continue and finalize security work needed on the endorser and committing peer side. VSCC parts that relate to policy evaluation would need to leverage interfaces defined in (3). This item also includes the bootstrapping of the security components of the system using a configuration file, and the components associated to channel security configuration when a channel genesis request is provided to the peer.  Finally this also includes the creation of a a separate MSPManager per channel that is instantiated using the channel genesis block information. Ale\n<https:\/\/jira.hyperledger.org\/secure\/RapidBoard.jspa?rapidView=65&amp;view=planning&amp;selectedIssue=FAB-581>\n<https:\/\/jira.hyperledger.org\/secure\/RapidBoard.jspa?rapidView=65&amp;view=planning&amp;selectedIssue=FAB-580>\n<https:\/\/jira.hyperledger.org\/secure\/RapidBoard.jspa?rapidView=65&amp;view=planning&amp;selectedIssue=FAB-399>\n<https:\/\/jira.hyperledger.org\/secure\/RapidBoard.jspa?rapidView=65&amp;view=planning&amp;selectedIssue=FAB-824>\n\n6. Integrate MSP logic for the needs of the gossip network. Gossip squad has defined an interface to obtain a peer signature\/verify a signature. We would need to implement this using MSP Manager\/interfaces. This item requires collaboration with the consensus squad. Angelo\n\n7. BCCSP support with keystore. We need to provide to BCCSP a pluggable keystore interface, where keys are stored. Angelo","ts":"1480351087.002627"},{"type":"message","user":"U184J2R7S","text":"8. Application libraries design &amp; implementation:\n        - build a simple and attribute-based invocation access library; at a first stage this would be the definition of an MSP for the application purposes that leverages MSP capabilities to show attribute ownership\/verify attribute ownership proof. Elli\n        - build a simple (even as a small bc-csp extension of) encryption\/decryption library as discussed with Binh. Design all. Implementation: Angelo\n\n9. Security configuration schemas for peer initialization and chain setup. Elli.\n\n    - content for it in changeset <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2677\/>","ts":"1480351117.002628"},{"type":"message","user":"U184J2R7S","text":"Here is discussion from the above copy\/paste of information Elli shared---&gt; Gari is wondering how we make this more consumable.  BCCSP seems clear,.. the overall design seems overly- complex though.  COP in itself is x509 and straight forward.   He suggested an incremental approach.    Maybe I need an x509 certificate and we are going to do something based on organization-- all access control is done at org layer,.. map org to it's root.  But what is MFP provider per organization isn't very clear in the specification.","ts":"1480351526.002629"},{"type":"message","user":"U184J2R7S","text":"I want a create a chain- We decided to support  multiple peers, we are not going to do at an individual peer level.  We are going to do something at an organization level.  I need to have one methodology- x509 based entities.  In simplest terms,.. bank a, b, and c-- they need to provide root authorities they are going to use to issue their certificates.  And then, there is a policy around how people are allowed to change the configuration and that has to be verified.  I don't think you want a policy to change their own MSP- it should be a blockchain wide decision.","ts":"1480351621.002630"},{"type":"message","user":"U184J2R7S","text":"We seem to be managing individual certificate authorities- but do we really want to support that?","ts":"1480351638.002631"},{"type":"message","user":"U184J2R7S","text":"Elli thought maybe we need a hardcoded policy for admin access.  She feels you do need to have that some entity needs to have some representation for an administrator.  You may have root certificate authority and another \"bank\" to be added.  What happens if two entities bank b and c use the same root certificate authority.   Gari-&gt;  Then, we need to come up a model... go get an intermediate authority to issue, but then we would differentiate with distinguished name.  But there is a lot of options here with a lot of complexity that is going to get very confusing. Elli-&gt; We could actually remove some of the extra parameters, but what part do we want static and what do we want configurable?  Configuration does increase the complexity...which can become a problem.","ts":"1480351895.002632"},{"type":"message","user":"U184J2R7S","text":"Elli agreed with Gari and wondered if we stand back and refactor design after discussion.  Gari is wondering do we start with simplest case and building up perhaps...","ts":"1480352027.002633"},{"type":"message","user":"U184J2R7S","text":"Maybe what we do in the specification we write it as what problem we try to solve and go step by step on how you solve it.","ts":"1480352112.002634"},{"type":"message","user":"U184J2R7S","text":"Question got asked-&gt; how is the peer expected to learn the Genesis block? Jeff Garrat is concerned about bootstrapping and they are trying to work that out.  On peer side- the genesis block is only there when peer joining channel.  SDK would pass the peer (whichever peer they want on channel) it would send a transaction to system through configuration system chaincode and pass along the genesis block. that CRCC would try to understand and manipulate and start the gossip layer to contact what we call the anchor peers and start up the chain that way.  Of course, eventually they would commit that block into the chain's ledger.  Every ledger would start with genesis block that contains that information.  And that configuration block will be modified at any time.  That CRCC would get the modified information and would go through the same steps.  The first draft of this is out there, but it's not complete yet.  The change set is out there","ts":"1480352503.002635"},{"type":"message","user":"U184J2R7S","text":"Assuming we have one MSP manager per chain- who is going to provide the MSP Manager with the root CA for that channel.  Is it always going to come from CRCC?  Or some stores on the peers filesystem?  The MSP Manager is instantiated by some function of the peer or from CRCC.  The part not included is not there yet.  For every chain, there has to be an MSP Manager and a few other things and gossip group as part of that. --- whoever instruments will hand to MSP manager and will hand two things 1) stuff from genesis block 2) the local signing key pair and certificate pair for signing that change.  Yes, that is correct assumption.  The local stuff we get from YAML file currently.  Any combination of peer and CRCC will pass that into the MSP manager per chain.","ts":"1480352638.002636"},{"type":"message","user":"U1BC5A0F9","text":"Hi, you may find here an updated version of the config files for the peer and chain init here:","ts":"1480429804.002637"},{"type":"message","user":"U1BC5A0F9","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2677\/>","ts":"1480429828.002638"},{"type":"message","user":"U1BC5A0F9","text":"Also a diagram depicting the peer init config schema is attached here:","ts":"1480429849.002639"},{"type":"message","subtype":"file_share","text":"<@U1BC5A0F9|elli> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/elli\/F38U4H6CF\/msp-config-diagram.ppt|MSP-config-diagram.ppt>","file":{"id":"F38U4H6CF","created":1480429855,"timestamp":1480429855,"name":"MSP-config-diagram.ppt","title":"MSP-config-diagram.ppt","mimetype":"application\/vnd.ms-powerpoint","filetype":"ppt","pretty_type":"PowerPoint Presentation","user":"U1BC5A0F9","editable":false,"size":138240,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F38U4H6CF\/msp-config-diagram.ppt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F38U4H6CF\/download\/msp-config-diagram.ppt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/elli\/F38U4H6CF\/msp-config-diagram.ppt","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F38U4H6CF-61525c5581","channels":["C2GE7GXM1"],"groups":[],"ims":[],"comments_count":0},"user":"U1BC5A0F9","upload":true,"display_as_bot":false,"username":"<@U1BC5A0F9|elli>","bot_id":null,"ts":"1480429856.002640"},{"type":"message","user":"U1BC5A0F9","text":"<@U0UGH3X7X> , <@U0XPR4NP4> you asked the mapping between this config and the configuration protos","edited":{"user":"U1BC5A0F9","ts":"1480431255.000000"},"ts":"1480431154.002641"},{"type":"message","user":"U1BC5A0F9","text":"IMHO since we now have no configurable policiess on the MSP side, we can represent each MSP's configuration as a single configuration item, whose modification policy would point to that MSP's admin","ts":"1480431230.002642"},{"type":"message","user":"U1BC5A0F9","text":"For chain readers\/writers\/deployers we would need the approval of chain admins","edited":{"user":"U1BC5A0F9","ts":"1480431325.000000"},"ts":"1480431319.002644"},{"type":"message","user":"U0XPR4NP4","text":"I haven't had a chance to review your changes since my comment, but, there was lots of other information in there, like ordering client byzantine assumptions etc.","ts":"1480431337.002646"},{"type":"message","user":"U1BC5A0F9","text":"right","ts":"1480431348.002647"},{"type":"message","user":"U1BC5A0F9","text":"this was based on the discussion we had","ts":"1480431352.002648"},{"type":"message","user":"U1BC5A0F9","text":"it can be that ordering service client component is already another config item with that ordering service admin implementing the modification policy for that item","edited":{"user":"U1BC5A0F9","ts":"1480431418.000000"},"ts":"1480431402.002649"},{"type":"message","user":"U1BC5A0F9","text":"overall chain config includes:","ts":"1480431439.002651"},{"type":"message","user":"U1BC5A0F9","text":"- list of msps: this is one config item per msp, with  modification policy that msp's admin","ts":"1480431463.002652"},{"type":"message","user":"U1BC5A0F9","text":"- ordering service client config including the orderers certs, f, and one or more admin certificates: modification policy for that would be the hardcoded one provided by the admin certs","ts":"1480431520.002653"},{"type":"message","user":"U1BC5A0F9","text":"- chain permissions, for which modification policy is the hardcoded chain admin","ts":"1480431551.002654"},{"type":"message","user":"U1BC5A0F9","text":"- and chain admin a list of certificates again that need to cosign things.","ts":"1480431567.002655"},{"type":"message","user":"U1BC5A0F9","text":"Does it make sense?","ts":"1480431614.002656"},{"type":"message","user":"U0XPR4NP4","text":"Loosely yes, but it is the details that I'm wondering about.  Concretely, what are the configuration items, their types, keys, values (with encoding), and modification policies (by name).","edited":{"user":"U0XPR4NP4","ts":"1480431747.000000"},"ts":"1480431737.002657"},{"type":"message","user":"U0XPR4NP4","text":"Basically what we started doing on the board in RTP the day your flight left","ts":"1480431763.002659"},{"type":"message","user":"U1BC5A0F9","text":"right so, to me there are no longer policies that need to appear in the chain sort of, cause \"policies\" are fixed (at least for the MSP) and hence relate to a list of certificates.","ts":"1480431903.002660"},{"type":"message","user":"U1BC5A0F9","text":"So as soon as we have the list of root certificate for an MSP, we use that one to validate certificates.","ts":"1480431952.002661"},{"type":"message","user":"U1BC5A0F9","text":"MSP admin is also a dedicated certificate that cn be the same as the root CA","ts":"1480431965.002662"},{"user":"U37F5PG64","text":"<@U37F5PG64|anton> has joined the channel","type":"message","subtype":"channel_join","ts":"1480432454.002663"},{"type":"message","user":"U1BC5A0F9","text":"Ok, so how about say we have single item per MSP configuration, with key MSP.msipd, and value string (that would contain that json version of PublicMSP struct).","ts":"1480432598.002664"},{"type":"message","user":"U0ZR63HLK","text":"+1","ts":"1480432653.002665"},{"type":"message","user":"U1BC5A0F9","text":"Also a writeup on the MSPs and ACLs is here: <https:\/\/docs.google.com\/document\/d\/1Qg7ZEccOIsrShSHSNl4kBHOFvLYRhQ3903srJ6c_AZE\/edit?usp=sharing>","edited":{"user":"U1BC5A0F9","ts":"1480439863.000000"},"ts":"1480439847.002666"},{"type":"message","user":"U0ZJZBJLF","text":"<@U1BC5A0F9> , <@U0ZR63HLK>  I coded what we talked about yesterday about the TLS bindings. I added you as reviewers <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2841\/>","ts":"1480441560.002668"},{"type":"message","user":"U0ZR63HLK","text":"Cool. I will have a look at it","ts":"1480441626.002669"},{"type":"message","user":"U1BC5A0F9","text":"thanks, may you also add <@U26T99AQ4> please :slightly_smiling_face:","ts":"1480441785.002670"},{"type":"message","user":"U0ZJZBJLF","text":"to the reviewers? I did...","ts":"1480441983.002671"},{"type":"message","user":"U1BC5A0F9","text":"merci!","ts":"1480442342.002675"},{"user":"U31M2620Z","text":"<@U31M2620Z|fan.torchz> has joined the channel","type":"message","subtype":"channel_join","ts":"1480442413.002676"},{"type":"message","user":"U11MANG9G","text":"<@U0ZJZBJLF>: no \u201c_\u201d (underscores) in file names please! :wink:","ts":"1480442495.002677"},{"type":"message","user":"U0ZJZBJLF","text":"huh? you mean comm and gossip impl? well, you're right. I'll change that, but that doesn't have anything to do with this commit.","edited":{"user":"U0ZJZBJLF","ts":"1480442616.000000"},"ts":"1480442523.002678"},{"type":"message","user":"U11MANG9G","text":"Yes, the comm_impl and the gossip_impl. Sure, I know it was there before - thanks for changing it!","ts":"1480442700.002680"},{"user":"U38H8MS11","text":"<@U38H8MS11|lovesh> has joined the channel","type":"message","subtype":"channel_join","ts":"1480488380.002681"},{"type":"message","user":"U307KJEDU","text":"Is there a way to start a validating peer without using docker?","ts":"1480538733.002682"},{"type":"message","user":"U0ZR63HLK","text":"in 0.6, you can run a peer in debug mode without using docker","ts":"1480607831.002683"},{"type":"message","user":"U0PB67X4K","text":"<@U307KJEDU> - you can always build binaries","ts":"1480607874.002684"},{"user":"U12AHQ3NK","text":"<@U12AHQ3NK|nits7sid> has joined the channel","type":"message","subtype":"channel_join","ts":"1480607880.002685"},{"type":"message","user":"U0PB67X4K","text":"I believe `make peer` will do this for you","ts":"1480607884.002686"},{"type":"message","user":"U0PB67X4K","text":"BUT - if you want to try to get a network up and running, Docker \/ Docker compose is the easiest route","ts":"1480607909.002687"},{"type":"message","user":"U0XPR4NP4","text":"<@U26T99AQ4> <@U0ZR63HLK> What was the motivation for picking a `[]byte` for the `chainID` as opposed to a `string`?  In one of <@U0ULK2JPP>'s recent changesets, he was referencing chainID by string and then converting it to a byte at the end.  The string value has some advantages like being able to be used as a key in a map.  <@U0KN2SSKE> had suggested  changing the data structure, what do you think?","ts":"1480622066.002688"},{"type":"message","user":"U0PB67X4K","text":"it its a string it should be a string  :wink:","ts":"1480622519.002689"},{"type":"message","user":"U0XPR4NP4","text":"I think the idea was that it was a hash of some things, which, obviously can be represented as a hex string or something, but, it will be more compact in a byte representation.  Enough more compact that we care?  I doubt it, but maybe there are some other encoding problems with a string representation? I wouldn't think so, but since <@U26T99AQ4> and <@U0ZR63HLK> picked bytes, I thought I'd make sure there wasn't some reason I'm blind to","ts":"1480623374.002690"},{"type":"message","user":"U0ZR63HLK","text":"Hi All, if I remember well in 0.6 the ChaincodeID is bytes because we wanted to encrypted it. We opted for the same in v1 having that in mind. Actually, string shouldn\u2019t be a big problem, we can always encode in base64 a ciphertext and put in a string.","ts":"1480623532.002691"},{"type":"message","user":"U0ULK2JPP","text":"<@U0ZR63HLK> chainID is different from ChaincodeID \u2026 and ChaincodeID was bytes only because it was a composite struct {path, name}","ts":"1480623932.002692"},{"type":"message","user":"U0ZR63HLK","text":"oh then that was good for us already :slightly_smiling_face:","ts":"1480624011.002693"},{"type":"message","user":"U0ZR63HLK","text":"anyway, it is fine to me to move it to string","ts":"1480624161.002694","reactions":[{"name":"+1","users":["U0ULK2JPP","U1TA5FDU7"],"count":2}]},{"type":"message","user":"U0ULK2JPP","text":"now that Block2 change has been done, I\u2019ll take care of the remaining easy proto changes today (did I jinx it already  :slightly_smiling_face: )","ts":"1480626566.002695"},{"type":"message","user":"U26T99AQ4","text":"as a matter of fact, there's a bunch of fields which are `[]byte` because of the reason Angelo mentioned. This should be revisited","ts":"1480670377.002696"},{"type":"message","user":"U26T99AQ4","text":"<@U0XPR4NP4> <@U0ULK2JPP> <@U0ZR63HLK> can we quickly go through the protobufs and decide what has to stay a byte array and what can become an actual type?","ts":"1480670436.002697"},{"type":"message","user":"U26T99AQ4","text":"examples:\n - Proposal.Header\n - ProposalResponse.Payload","ts":"1480670730.002698"},{"type":"message","user":"U26T99AQ4","text":"(there are probably others)","ts":"1480670752.002699"},{"type":"message","user":"U0ZR63HLK","text":"I guess, those need to stay bytes for the marshaling issue, no?","ts":"1480673503.002700"},{"type":"message","user":"U0ULK2JPP","text":"<@U26T99AQ4>, <@U0ZR63HLK> \u2026 just saw this.","ts":"1480679892.002701"},{"type":"message","user":"U0ULK2JPP","text":"I thought ChainID was the only one left <@U26T99AQ4> .. can you given an example (or list) of others that may need to be changed ?","ts":"1480679931.002702"},{"type":"message","user":"U0ULK2JPP","text":"btw opened <https:\/\/jira.hyperledger.org\/browse\/FAB-1252> for chainID fix and will work on it","ts":"1480681661.002703"},{"type":"message","user":"U0ZR63HLK","text":"Thanks Murali","ts":"1480682245.002704"},{"type":"message","user":"U307KJEDU","text":"<@U0ZR63HLK> <@U0PB67X4K> - thanks...  I'm trying to get two computers networked so I can add chaincode on one, and query from the other.  I see that it's easy to do with two different nodes on the same computer, but I haven't been able to get to machines networked right, with or without docker.  Do I need tls enabled?","ts":"1480689756.002705"},{"type":"message","user":"U0ZR63HLK","text":"if it is just for testing, you don't need to activate TLS","ts":"1480691980.002706"},{"type":"message","user":"U307KJEDU","text":"I'm using CORE_PEER_DISCOVERY_ROOTNODE to specify the other computer in my docker-compose.yml - is this the right way to do it?","ts":"1480692364.002707"},{"type":"message","user":"U0PB67X4K","text":"it would need to be the \"public\" IP \/ hostname of the remote computer (not the compose service name)","ts":"1480692463.002708"},{"type":"message","user":"U307KJEDU","text":"What port should I use?","ts":"1480692481.002709"},{"type":"message","user":"U0PB67X4K","text":"you also need to make sure that you are exposing the ports","ts":"1480692483.002710"},{"type":"message","user":"U307KJEDU","text":"The ports are exposed through the Vagrantfile, right?","ts":"1480692589.002711"},{"type":"message","user":"U307KJEDU","text":"I made sure the firewall is off, but I get errors... vp4_1 | 15:51:28.158 [peer] chatWithPeer -&gt; ERRO 056 Ending Chat with peer address 10.101.3.140:7053 due to error: Error creating handler during handleChat initiation: Error creating PeerHandler: Error creating new Peer Handler, error returned sending DISC_HELLO: Error Sending message through ChatStream: rpc error: code = 13 desc = transport is closing","ts":"1480694042.002712"},{"type":"message","user":"U307KJEDU","text":"I've also tested to make sure that machine 2 can serve a simple python script on ports 7051&amp;3, and is accessible by machine 1","ts":"1480694537.002713"},{"type":"message","user":"U0PB67X4K","text":"so are you running Vagrant on two machines?","ts":"1480695628.002714"},{"type":"message","user":"U0PB67X4K","text":"I'd advise not using Vagrant and just running Docker directly on both of the host machines","ts":"1480695652.002715"},{"type":"message","user":"U307KJEDU","text":"k - sounds like this has nothing to do with tls - I'll keep my posts in 'fabric' - thanks for the help","ts":"1480695968.002716"},{"type":"message","user":"U11MANG9G","text":"<@U307KJEDU> (Jack), yes, <#C0Y4PEU22|fabric> and\/or <#C0YPYBVJM|fabric-dev> will do.","ts":"1480697854.002717"},{"type":"message","user":"U11MANG9G","text":"We have merged some stuff this morning to `master`, focusing much more on docker, also for build\/development.","ts":"1480697925.002718"},{"user":"U28AF10A3","text":"<@U28AF10A3|imas> has joined the channel","type":"message","subtype":"channel_join","ts":"1480882201.000002"},{"user":"U2LHA3Q7K","text":"<@U2LHA3Q7K|vinayak> has joined the channel","type":"message","subtype":"channel_join","ts":"1480933455.000003"},{"type":"message","user":"U0ZR63HLK","text":"<@U0PB67X4K> <@U13TWBRBL> <@U0KN2SSKE> <@U0ULK2JPP> <@U0S5KF44D> <@U1BC5A0F9> <@U26T99AQ4> <@U11MANG9G> Hi All, I have submitted this change-set <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2983\/> to address ECDSA signature malleability","ts":"1480956020.000004"},{"type":"message","user":"U0ZR63HLK","text":"somthing that also bitcoin had to address in the past <https:\/\/github.com\/bitcoin\/bips\/blob\/master\/bip-0062.mediawiki>","attachments":[{"service_name":"GitHub","title":"bitcoin\/bips","title_link":"https:\/\/github.com\/bitcoin\/bips\/blob\/master\/bip-0062.mediawiki","text":"bips - Bitcoin Improvement Proposals","fallback":"GitHub: bitcoin\/bips","thumb_url":"https:\/\/avatars2.githubusercontent.com\/u\/528860?v=3&s=400","from_url":"https:\/\/github.com\/bitcoin\/bips\/blob\/master\/bip-0062.mediawiki","thumb_width":128,"thumb_height":128,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1480956043.000005"},{"type":"message","user":"U0ZR63HLK","text":"I would like to ask to have a look at it, especially everyone who is working on client-sdks.","ts":"1480956072.000007"},{"type":"message","user":"U0ZR63HLK","text":"The change-set that I have submit enforces the same validity rules that bitcoin is enforcing on ecdsa signatures","ts":"1480956099.000008"},{"type":"message","user":"U0ZR63HLK","text":"it means that the client-sdks have to generate signatures in accordance in order to avoid rejection from the fabric","ts":"1480956121.000009"},{"user":"U1XL70KHB","text":"<@U1XL70KHB|gemsiva> has joined the channel","type":"message","subtype":"channel_join","ts":"1480971990.000010"},{"user":"U327VGGF9","text":"<@U327VGGF9|yuwei> has joined the channel","type":"message","subtype":"channel_join","ts":"1480994541.000011"},{"user":"U2Y3JHRP1","text":"<@U2Y3JHRP1|daniellee> has joined the channel","type":"message","subtype":"channel_join","ts":"1481011549.000012"},{"user":"U2T7Z63NY","text":"<@U2T7Z63NY|synblockchainteam> has joined the channel","type":"message","subtype":"channel_join","ts":"1481037004.000013"},{"type":"message","user":"U2T7Z63NY","text":"I would like to ask following query regarding Hyperledger v0.6 :\n\nWhile executing Invoke() method of sample application \"authorizable_counter\"  with rest call, we encounter \"Failed retrieving extension\".\n\nOn digging the code, we noticed that \"1.2.3.4.5.6.9\" Object Identifier is missing in certificate extension during x509.GetCriticalExtension() API execution. ( Any clue? )\n\nDid someone face similar issue?\nThanks.","ts":"1481037139.000014"},{"type":"message","user":"U0ZR63HLK","text":"Hi <@U2T7Z63NY>, the issue is that using REST you cannot specify which attributes to included in TCert","ts":"1481040916.000015"},{"type":"message","user":"U0ZR63HLK","text":"you should use the client-sdk for that","ts":"1481040930.000016"},{"type":"message","user":"U2X9KDDL7","text":"<@U2T7Z63NY> I had that issue, and I believe it was because I had to enable the ACA (attribute certificate authority)","ts":"1481096231.000017"},{"type":"message","user":"U2X9KDDL7","text":"I set MEMBERSRVC_CA_ACA_ENABLED=true on my membersrvc process, but I also set aca: enabled: true in my custom membersrvc.yaml.  I remember having trouble if I didn't set the env var MEMBERSRVC_CA_ACA_ENABLED, and I haven't put the time in to resolve it.  Ideally no env var would be necessary, it would just get the configuration from my membersrvc.yaml.","ts":"1481096371.000018"},{"type":"message","user":"U2T7Z63NY","text":"We are passing following payload while calling \"invoke\" method with REST call....\n\n\t\t{\n\t\t  \"jsonrpc\": \"2.0\",\n\t\t  \"method\": \"invoke\",\n\t\t  \"params\": {\n\t\t      \"type\": 1,\n\t\t      \"chaincodeID\":{\n\t\t          \"name\":\"au\"\n\t\t      },\n\t\t      \"ctorMsg\": {\n\t\t         \"function\":\"increment\",\n\t\t         \"args\":[]\n\t\t      },\n\t\t      \"secureContext\": \"diego\"\n\t\t  },\n\t\t  \"id\": 4\n\t\t}\n\nPlease let us know if its correct?\n\nThanks","attachments":[{"fallback":"[December 6th, 2016 9:45 PM] adc: you should use the client-sdk for that","ts":"1481040930.000016","author_subname":"adc","channel_id":"C2GE7GXM1","channel_name":"fabric-crypto","is_msg_unfurl":true,"text":"you should use the client-sdk for that","author_name":"Angelo De Caro","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/adc","author_icon":"https:\/\/avatars.slack-edge.com\/2016-07-21\/61823221170_e0795e87fc9eb0abb221_48.jpg","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1481040930000016","is_share":true,"footer":"Posted in #fabric-crypto"}],"ts":"1481097850.000019"},{"type":"message","user":"U2X9KDDL7","text":"looks good to me -- I'm comparing against \"Invoke Request with security enabled:\" under <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/protocol-spec.md#6213-chaincode-api>","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/protocol-spec.md#6213-chaincode-api","text":"Read-only mirror of <https:\/\/gerrit.hyperledger.org\/r\/#\/admin\/projects\/fabric>","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/protocol-spec.md#6213-chaincode-api","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1481099654.000020"},{"type":"message","user":"U2X9KDDL7","text":"I never got around to using the REST API with security enabled though, so I have no direct experience","ts":"1481099675.000022"},{"type":"message","user":"U2X9KDDL7","text":"<@U2T7Z63NY> What sort of application are you driving chaincode from?","ts":"1481099712.000023"},{"type":"message","user":"U2T7Z63NY","text":"Thanks for your reply. \nWe are using postman as REST client.","attachments":[{"fallback":"[December 7th, 2016 2:04 PM] vdods: I never got around to using the REST API with security enabled though, so I have no direct experience","ts":"1481099675.000022","author_subname":"vdods","channel_id":"C2GE7GXM1","channel_name":"fabric-crypto","is_msg_unfurl":true,"text":"I never got around to using the REST API with security enabled though, so I have no direct experience","author_name":"Victor Dods","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/vdods","author_icon":"https:\/\/secure.gravatar.com\/avatar\/f01b1034401a358d6f6cb2bc2fca26db.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0008-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1481099675000022","is_share":true,"footer":"Posted in #fabric-crypto"}],"edited":{"user":"U2T7Z63NY","ts":"1481100861.000000"},"ts":"1481100801.000024"},{"type":"message","user":"U2T7Z63NY","text":"<@U2X9KDDL7>, We have already set enabled = true attribute inside membersrvc.yaml under security ACA section.","ts":"1481101493.000026"},{"type":"message","user":"U2X9KDDL7","text":"Make sure to try setting MEMBERSRVC_CA_ACA_ENABLED=true as well -- I remember it not working unless I had the env var set","ts":"1481102269.000027"},{"type":"message","user":"U2T7Z63NY","text":"Thanks, i will try this now.","ts":"1481102701.000028"},{"type":"message","user":"U2T7Z63NY","text":"We tried this also with during setting up validating peer as below ...\nMEMBERSRVC_CA_ACA_ENABLED=true peer node start --peer-chaincodedev\n\nUnfortunately, it didn't work again.\nThanks.","ts":"1481103318.000029"},{"type":"message","user":"U2X9KDDL7","text":"Ah, no that has to be done on membersrvc","ts":"1481103339.000030"},{"type":"message","user":"U2T7Z63NY","text":"Earlier we tried that in membersrvc.yaml file under the aca: section...\n\n          # Enabling\/disabling Attribute Certificate Authority, if ACA is enabled attributes will be added into the TCert.\n          enabled: true","ts":"1481103421.000031"},{"type":"message","user":"U2T7Z63NY","text":"By getting the same result, it seems, both do the same thing.","ts":"1481103473.000032"},{"type":"message","user":"U2X9KDDL7","text":"Hmm.. sorry, I did encounter that problem but perhaps I'm misremembering what caused it","ts":"1481103565.000033"},{"type":"message","user":"U2X9KDDL7","text":"Can you verify that in your membersrvc logs (where, you have MEMBERSRVC_CA_LOGGING_ACA=info), you see \"[aca] Start -&gt; INFO 002 Staring ACA services...\" .. I just want to be sure","ts":"1481103644.000034"},{"type":"message","user":"U2T7Z63NY","text":"Please let us know the location of MEMBERSRVC_CA_LOGGING_ACA=info","ts":"1481104359.000035"},{"type":"message","user":"U2X9KDDL7","text":"all env vars that start with MEMBERSRVC_CA are for membersrvc","ts":"1481104520.000036"},{"type":"message","user":"U2X9KDDL7","text":"similarly, all CORE_PEER env vars are for the peer","ts":"1481104529.000037"},{"type":"message","user":"U2T7Z63NY","text":"We are using membersrvc.yaml that is bundeled with Hyperledger v 0.6, in which there is no such variable MEMBERSRVC_CA_LOGGING_ACA abailable. \n\nWhereas while we googled, we could found the same variable in the \"<https:\/\/raw.githubusercontent.com\/IBM-Blockchain\/fabric-images\/master\/docker-compose\/base\/membersrvc.yaml>\"\n\nCan we include all the desired variables from this yaml into ours. ?","edited":{"user":"U2T7Z63NY","ts":"1481104720.000000"},"ts":"1481104700.000038"},{"type":"message","user":"U2X9KDDL7","text":"There are two ways to specify configuration values -- they're both via this library \"viper\".  One is via the command line, e.g. MEMBERSRVC_CA_ACA_ENABLED.  This turns into the viper key \"membersrvc.ca.aca.enabled\", so for example, you could search for aca.enabled and find ```\tsrv := grpc.NewServer(opts...)\n\n\tif viper.GetBool(\"aca.enabled\") {\n\t\tlogger.Debug(\"ACA was enabled [aca.enabled == true]\")\n\t\taca.Start(srv)\n\t}\n```","ts":"1481104888.000040"},{"type":"message","user":"U2X9KDDL7","text":"that's in server.go","ts":"1481104896.000041"},{"type":"message","user":"U2X9KDDL7","text":"The yaml files specify configuration values via the viper names, i.e. lower-case, where the periods delimit elements of the hierarchy of config vars","ts":"1481104948.000042"},{"type":"message","user":"U2X9KDDL7","text":"so it's really just two ways to specify config values.. you might use env vars in a docker-compose.yml file","ts":"1481104974.000043"},{"type":"message","user":"U2T7Z63NY","text":"Yes, its found in the \"<http:\/\/github.com|github.com>\\hyperledger\\fabric\\membersrvc\\server.go\" file. which is set as true...\n\n\tsrv := grpc.NewServer(opts...)\n\n\tif viper.GetBool(\"aca.enabled\") {\n\t\tlogger.Debug(\"ACA was enabled [aca.enabled == true]\")\n\t\taca.Start(srv)\n\t}\n\teca.Start(srv)\n\ttca.Start(srv)\n\ttlsca.Start(srv)","ts":"1481105745.000044"},{"type":"message","user":"U2X9KDDL7","text":"I mean -- do you see `[aca] Start -&gt; INFO 003 Staring ACA services...` in your membersrvc log?","ts":"1481106173.000045"},{"type":"message","user":"U2T7Z63NY","text":"Is this message in the validation peer terminal's log? if so, we are unable to see that message.\n\nHowever, we could find this log \"10:35:12.516 [logging] LoggingInit -&gt; DEBU 001 Setting default logging level to DEBUG for command 'aca'\" while we execute membersrvc command in the fabric folder","edited":{"user":"U2T7Z63NY","ts":"1481107047.000000"},"ts":"1481106805.000046"},{"user":"U3BL88B18","text":"<@U3BL88B18|thomas_g> has joined the channel","type":"message","subtype":"channel_join","ts":"1481107033.000049"},{"type":"message","user":"U2T7Z63NY","text":"in the validating terminal's logs, we could notice following logs :\n\n10:39:40.479 [nodeCmd] serve -&gt; INFO 002 Running in chaincode development mode\n10:39:40.479 [nodeCmd] serve -&gt; INFO 003 Set consensus to NOOPS and user starts chaincode\n10:39:40.479 [nodeCmd] serve -&gt; INFO 004 Disable loading validity system chaincode\n\nAny clue?","ts":"1481107390.000051"},{"type":"message","user":"U2X9KDDL7","text":"@symblockchainteam No, the log message I'm referring to should be from membersrvc","ts":"1481136677.000052"},{"user":"U0UGH3X7X","text":"<@U0UGH3X7X|tuand> has joined the channel","type":"message","subtype":"channel_join","ts":"1481140481.000053"},{"type":"message","user":"U0UGH3X7X","text":"I'm trying to enable TLS between an orderer and a Kafka broker ...  This requires me to populate a tls.Config struct with the orderer's certificate and CA certificate ( as golang Certificates <https:\/\/godoc.org\/crypto\/tls#Certificate> )","attachments":[{"title":"Package tls","title_link":"https:\/\/godoc.org\/crypto\/tls#Certificate","text":"Package tls partially implements TLS 1.2, as specified in RFC 5246.","fallback":"Package tls","from_url":"https:\/\/godoc.org\/crypto\/tls#Certificate","service_icon":"https:\/\/godoc.org\/favicon.ico","service_name":"godoc.org","id":1}],"ts":"1481140793.000054"},{"type":"message","user":"U0UGH3X7X","text":"i think I should be able to get the certs from the orderer's FabricMSP ?  is there an API I can use ?","ts":"1481140854.000056"},{"type":"message","user":"U0ZR63HLK","text":"Hi Tuan, right now, we don't have in place already TLS certificates to use. <@U0PB67X4K> <@U0S5KF44D>, how are we proceeding here?","ts":"1481181960.000057"},{"type":"message","user":"U0ZJZBJLF","text":"Are the orderer shim and the kafka nodes running on different hosts? (I'm asking- what is the preferable design, not if they *technically* can do that)","edited":{"user":"U0ZJZBJLF","ts":"1481188512.000000"},"ts":"1481188491.000058"},{"type":"message","user":"U2T7Z63NY","text":"<@U2X9KDDL7>, Following is the log of membersrvc...\n\nvagrant@hyperledger-devenv:v0.0.11-ee5b85c:\/opt\/gopath\/src\/github.com\/hyperledger\/fabric$ membersrvc\n\n09:12:45.554 [server] main -&gt; INFO 001 CA Server (0.6.2-preview-snapshot-ee5b85c)\n09:12:45.738 [aca] Start -&gt; INFO 002 Staring ACA services...\n09:12:45.739 [aca] startACAP -&gt; INFO 003 ACA PUBLIC gRPC API server started\n09:12:45.739 [aca] Start -&gt; INFO 004 ACA services started\n09:12:45.739 [eca] Start -&gt; INFO 005 Starting ECA...\n09:12:45.740 [eca] startECAP -&gt; INFO 006 ECA PUBLIC gRPC API server started\n09:12:45.740 [eca] startECAA -&gt; INFO 007 ECA ADMIN gRPC API server started\n09:12:45.741 [eca] Start -&gt; INFO 008 ECA started.\n09:12:45.741 [tca] Start -&gt; INFO 009 Staring TCA services...\n09:12:45.742 [tca] startTCAP -&gt; INFO 00a TCA PUBLIC gRPC API server started\n09:12:45.743 [tca] startTCAA -&gt; INFO 00b TCA ADMIN gRPC API server started\n09:12:45.743 [tca] Start -&gt; INFO 00c TCA started.\n09:12:45.744 [tlsca] Start -&gt; INFO 00d TLSCA started.\n.\n.\n.","ts":"1481189494.000060"},{"type":"message","user":"U2T7Z63NY","text":"[aca] specific logs are present here...\n\n[aca] Start -&gt; INFO 002 Staring ACA services...\n.\n.\n[aca] Start -&gt; INFO 004 ACA services started","ts":"1481189593.000061"},{"type":"message","user":"U2T7Z63NY","text":"Hi,\n\nCan anyone tell me the use of \"TCertAttributesHeaders = asn1.ObjectIdentifier{1, 2, 3, 4, 5, 6, 9}\" in the \"<http:\/\/github.com|github.com>\\hyperledger\\fabric\\core\\crypto\\attributes\\attributes.go\" file.\n\nThanks","ts":"1481201844.000062"},{"type":"message","user":"U0ZR63HLK","text":"Hi <@U2T7Z63NY>, that was used to identify the x509 extensions containing attributes","ts":"1481203288.000063"},{"type":"message","user":"U0ZR63HLK","text":"It clearly needs a better version number, <@U0S5KF44D> <@U221LL03Z> do you have more info on the status of that field?","ts":"1481203348.000064"},{"user":"U221LL03Z","inviter":"U0ZR63HLK","text":"<@U221LL03Z|ashutoshkumar> has joined the channel","type":"message","subtype":"channel_join","ts":"1481203360.000065"},{"type":"message","user":"U0UGH3X7X","text":"<@U0XQ35CDD>  ? <https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1481188491000058>","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1481188491000058","fallback":"[December 8th, 2016 1:14 AM] yacovm: Are the orderer shim and the kafka nodes running on different hosts? (I'm asking- what is the preferable design, not if they *technically* can do that)","ts":"1481188491.000058","author_subname":"yacovm","channel_id":"C2GE7GXM1","channel_name":"fabric-crypto","is_msg_unfurl":true,"text":"Are the orderer shim and the kafka nodes running on different hosts? (I'm asking- what is the preferable design, not if they *technically* can do that)","author_name":"Yacov Manevich","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/yacovm","author_icon":"https:\/\/avatars.slack-edge.com\/2016-09-30\/85916865123_74ecb5d18535acea44aa_48.png","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-crypto"}],"ts":"1481205286.000066"},{"type":"message","user":"U0XQ35CDD","text":"<@U0ZJZBJLF>: Yes. (Thanks for the heads up <@U0UGH3X7X>.)","ts":"1481205388.000068"},{"type":"message","user":"U2T7Z63NY","text":"<@U0ZR63HLK>\nThanks for your reply.\n\nI encountered an error \"Failed retrieve extension\" in primitives.GetCriticalExtension() api, while testing \"invoke\" method of \"authorizable_counter\" sample application of fabric v0.6","ts":"1481206217.000069"},{"type":"message","user":"U0ZJZBJLF","text":"<@U0XQ35CDD>  - why?","ts":"1481206436.000070"},{"type":"message","user":"U0XQ35CDD","text":"Because I may want 100 shims and 10 brokers.  There is not a one-to-one mapping necessarily. ","ts":"1481206487.000071","reactions":[{"name":"white_check_mark","users":["U0ZJZBJLF"],"count":1}]},{"type":"message","user":"U0UGH3X7X","text":"<@U0ZR63HLK>,  should `SigningIdentityInfo.Public_Signer` be the cert I use for TLS ?  would need an MSP call to get that info.","ts":"1481206526.000072"},{"type":"message","user":"U0ZR63HLK","text":"actually, that's the enrollment certificate. I think we should use different certificates and keys for that. <@U26T99AQ4> <@U1BC5A0F9> <@U0S5KF44D>  <@U0PB67X4K> what's your take on this?","edited":{"user":"U0ZR63HLK","ts":"1481207822.000000"},"ts":"1481207730.000073"},{"type":"message","user":"U1BC5A0F9","text":"Aren't TLS certificates self signed currently?","edited":{"user":"U1BC5A0F9","ts":"1481208026.000000"},"ts":"1481208020.000076"},{"type":"message","user":"U0ZR63HLK","text":"that is what <@U0ZJZBJLF> is doing but I think <@U0PB67X4K> is putting in place another tls infrastructure, not sure","ts":"1481208444.000078"},{"type":"message","user":"U0ZJZBJLF","text":"huh? what?","ts":"1481208590.000079"},{"type":"message","user":"U0UGH3X7X","text":"<@U1BC5A0F9>, <@U0ZR63HLK>  also, kafka has its own infrastructure for TLS  ... we are using the sarama package in the orderer to act as the Kafka client","ts":"1481208594.000080"},{"type":"message","user":"U0ZJZBJLF","text":"no I'm not","ts":"1481208597.000081"},{"type":"message","user":"U0ZJZBJLF","text":"tuand- where does sarama obtain the TLS certificates from?","ts":"1481208633.000082"},{"type":"message","user":"U0ZJZBJLF","text":"does it even do mutual TLS?","edited":{"user":"U0ZJZBJLF","ts":"1481208695.000000"},"ts":"1481208677.000083"},{"type":"message","user":"U0UGH3X7X","text":"so on the orderer side, we need to give sarama  a cert+CA cert for its configuration","ts":"1481208691.000084"},{"type":"message","user":"U0UGH3X7X","text":"sarama does do mutual auth","ts":"1481208719.000086"},{"type":"message","user":"U0ZJZBJLF","text":"And how does Kafka verify the client certs of sarama? is it also configured there in files or something?","ts":"1481208758.000087"},{"type":"message","user":"U0UGH3X7X","text":"yes, the kafka broker side is configured via properties files <https:\/\/jira.hyperledger.org\/browse\/FAB-701>","ts":"1481208804.000088","reactions":[{"name":"+1","users":["U0ZJZBJLF"],"count":1}]},{"type":"message","user":"U0ZJZBJLF","text":"in another context- <@U0ZR63HLK>  we only use self signed SSL certificates for unit tests. When the gossip runs inside the peer, a different constructor is used, and the gRPC service instance is passed from the peer to the gossip constructor.  Also, the Dialoptions are passed,  and a client TLS option can be included in that.","ts":"1481208940.000089"},{"type":"message","user":"U0ZR63HLK","text":"<@U0ZJZBJLF>, got it. <@U0UGH3X7X> So, for kakfa we need a proper TLS infrastructure. I guess, the administrator of the kafka network is in charge of put in place such a network and release appropriate TLS certficates for the client (in our case the orderers), no?","ts":"1481209803.000090"},{"type":"message","user":"U0UGH3X7X","text":"we only want orderers from known orgs to connect to kafka  ...  so we need to give the kafka admin our org CA certs","ts":"1481210432.000091"},{"type":"message","user":"U0UGH3X7X","text":"Kafka admin will in turn give us the CA cert for the Kafka brokers","edited":{"user":"U0UGH3X7X","ts":"1481210527.000000"},"ts":"1481210469.000092"},{"type":"message","user":"U0ZR63HLK","text":"but the orderers then need a TLS certificate signed by an authority that the kafka netwrok trusts","ts":"1481210598.000094"},{"type":"message","user":"U0ZR63HLK","text":"no?","ts":"1481210606.000095"},{"type":"message","user":"U0UGH3X7X","text":"right ...  we would put our org CA certs into Kafka's truststore  ...   when an orderer connect , it uses a certificate signed by one of our CAs  so Kafka will accept the connection","ts":"1481210766.000096"},{"type":"message","user":"U0XQ35CDD","text":"(Not following this discussion closely, but I just want to put it out there: <@U0UGH3X7X> let's make sure that whatever flow we adopt also works for this case: org A owns brokers 0-2, org B owns brokers 3-6, etc. This may or may not be completely orthogonal to the discussion.)","ts":"1481210949.000097"},{"type":"message","user":"U0UGH3X7X","text":"right,  kafka admin(s)  might give us multiple CA certs which orderer would need to slurp in via a configurationItem","ts":"1481211080.000098"},{"type":"message","user":"U0ZR63HLK","text":"mhh, not clear, Tuan, you first said that fabric will put CA certs in kafka and then you said the opposite confirming what Kostas was saying, no? Am I missing something?","ts":"1481211871.000099"},{"type":"message","user":"U0UGH3X7X","text":"the orderers need to have the Kafka brokers CA certs and Kafka needs to have the orderers' CA certs   ...   now, you can have multiple orgs owning kafka brokers or you can have a totally separate group owning kafka brokers   ... we're ok as long as each side of the connection has the other side's CA certs so they can check incoming connection requests","ts":"1481212380.000100"},{"type":"message","user":"U0ZR63HLK","text":"ah okay, this I parse. I agree.","ts":"1481212602.000101"},{"type":"message","user":"U0ZR63HLK","text":"now, who is gonna generate TLS certificates?","ts":"1481212621.000102"},{"type":"message","user":"U0ZR63HLK","text":"I think it is not recommended to use the enrollment certificate for that","ts":"1481212640.000103"},{"type":"message","user":"U0UGH3X7X","text":"it took me days to figure out what kafka wanted ! :weary:","ts":"1481212676.000104"},{"type":"message","user":"U0ZR63HLK","text":"heheh :slightly_smiling_face:","ts":"1481212693.000105"},{"type":"message","user":"U0UGH3X7X","text":"let me parse a bit further :wink:   so exchanging CA certs between Orderers and Kafka should not be problem because we have them and we will exchange out of band","ts":"1481212812.000106"},{"type":"message","user":"U0ZR63HLK","text":"right","ts":"1481212827.000107"},{"type":"message","user":"U0UGH3X7X","text":"orderer needs a signed certficate specifically for TLS  and we need to see which component should generate","ts":"1481212862.000108"},{"type":"message","user":"U0ZR63HLK","text":"correct","ts":"1481212905.000109"},{"type":"message","user":"U0ZR63HLK","text":"I think <@U0PB67X4K> is working on something to address this","ts":"1481212936.000110"},{"type":"message","user":"U0ZR63HLK","text":"not sure, I might be wrong","ts":"1481212946.000111"},{"type":"message","user":"U0UGH3X7X","text":"can I just use golang crypto and info from MSP to generate this cert ?   All i need is a cert signed by my CA and I already have my CA cert","ts":"1481213075.000112"},{"type":"message","user":"U0ZR63HLK","text":"unfortunately, the MSP does not give you that","ts":"1481213099.000113"},{"type":"message","user":"U0ZR63HLK","text":"it cannot generate certificates","ts":"1481213106.000114"},{"type":"message","user":"U0ZR63HLK","text":"you need COP, probably","ts":"1481213111.000115"},{"type":"message","user":"U0UGH3X7X","text":"aha, another entry in the orderer genesis block I guess","ts":"1481213183.000116"},{"type":"message","user":"U0UGH3X7X","text":"still need to have someone generate before bootstrap then","ts":"1481213263.000117"},{"type":"message","user":"U0PB67X4K","text":"<@U0UGH3X7X> - I am working on a GRPC server implementation which will need to deal with similar issue(s).  So hopefully we can leverage some of that work.  I'll try to post a WIP change set so we can see what pieces to factor out into a common piece","ts":"1481213801.000118","reactions":[{"name":"+1","users":["U0UGH3X7X","U0ZR63HLK"],"count":2}]},{"type":"message","user":"U2X9KDDL7","text":"Hi all, what are the configuration vars relevant to choosing if ECerts or TCerts will be used in transactions?  The docs mention that two schemes can be used -- look for \"depending on whether the transaction is anonymous\" under <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/protocol-spec.md#433-replay-attack-resistance>","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/protocol-spec.md#433-replay-attack-resistance","text":"Read-only mirror of <https:\/\/gerrit.hyperledger.org\/r\/#\/admin\/projects\/fabric>","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/protocol-spec.md#433-replay-attack-resistance","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1481223782.000119"},{"type":"message","user":"U2X9KDDL7","text":"I'm finding it difficult to write code using TCerts only (though I believe what I'm doing should eventually be possible this way), and would prefer to start with using fixed ECerts, so that I can work directly with users' identities via ECerts.","ts":"1481224320.000121"},{"type":"message","user":"U2X9KDDL7","text":"From looking through the code, in particular, usages of GetEnrollmentCertificateHandler, it looks like perhaps only fabric\/core\/crypto\/crypto_test.go uses it, and it's a feature only provided to applications that deploy\/invoke\/query chaincode via the golang modules in fabric\/core ?  Is this correct?  I don't see any indication of this ECert\/TCert choice in HFC.","ts":"1481226167.000122"},{"user":"U3BQF48RE","text":"<@U3BQF48RE|oliverledger> has joined the channel","type":"message","subtype":"channel_join","ts":"1481231715.000123"},{"type":"message","user":"U0KN2SSKE","text":"<@U0UGH3X7X> <@U0PB67X4K> <@U0ZR63HLK> <@U0S5KF44D> wouldn\u2019t our COP provide TLS-CA like v0.6 that we can get a TLS cert from it?  I have heard Keith mentioned we might be able to use ecert for TLS but I am not sure progress on that","ts":"1481240479.000124"},{"type":"message","user":"U0PB67X4K","text":"It's actually just writing some common code to load the raw certificates into the proper Go types that we are talking about here.   Basically taking raw pem encoded certs and loafingvthem into the proper Go crypto objects ","edited":{"user":"U0PB67X4K","ts":"1481241654.000000"},"ts":"1481241640.000125"},{"type":"message","user":"U0S5KF44D","text":"Yes, will work and if someone wants a separate TLS cert for some reason, you could enroll twice ... once for TLS and once for ECert","edited":{"user":"U0S5KF44D","ts":"1481293028.000000"},"ts":"1481241818.000127"},{"type":"message","user":"U2X9KDDL7","text":"Can someone give me a sanity check?  I'm running a peer with privacy enabled (which means that it uses TCerts that aren't linkable to the user identities, if I understand that correctly), and submitting transactions with confidentiality enabled (which means that the ledger state is encrypted).  I run through a sequence of transactions, write to a particular key in my ledger state, shut all the services down, then run through the sequence again, checking that the state I set in the previous run is still there.  The call to stub.GetState fails with \"Decryption failed\".  However, if I run this whole scenario twice with transaction confidentiality disabled, it works fine.  Is there some step I'm missing, or maybe I'm making a bad assumption (such as \"enabling transaction confidentiality has no impact on the chaincode itself, confidentiality can just be enabled\")?","ts":"1481246058.000128"},{"type":"message","user":"U0PB67X4K","text":"<@U2X9KDDL7> - how are you submitting transactions?  Via the REST API or via the SDK?    \n\nFYI - the \"privacy\" setting in core.yaml is actually for encryption","ts":"1481283564.000129"},{"type":"message","user":"U0UGH3X7X","text":"<@U0PB67X4K>   re: <https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1481241640000125>","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1481241640000125","fallback":"[December 8th, 2016 4:00 PM] garisingh: It's actually just writing some common code to load the raw certificates into the proper Go types that we are talking about here.   Basically taking raw pem encoded certs and loafingvthem into the proper Go crypto objects ","ts":"1481241640.000125","author_subname":"garisingh","channel_id":"C2GE7GXM1","channel_name":"fabric-crypto","is_msg_unfurl":true,"text":"It's actually just writing some common code to load the raw certificates into the proper Go types that we are talking about here.   Basically taking raw pem encoded certs and loafingvthem into the proper Go crypto objects ","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/garisingh","author_icon":"https:\/\/avatars.slack-edge.com\/2016-09-10\/78323915894_521dc680194c08b166e0_48.jpg","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-crypto"}],"ts":"1481292626.000130"},{"type":"message","user":"U0UGH3X7X","text":"you mean something like this article ? <https:\/\/ericchiang.github.io\/tls\/go\/https\/2015\/06\/21\/go-tls.html>","edited":{"user":"U0UGH3X7X","ts":"1481292683.000000"},"ts":"1481292640.000132"},{"type":"message","user":"U0UGH3X7X","text":"I'll catch keith in a bit and see what cop can give me","ts":"1481292724.000134"},{"type":"message","user":"U0PB67X4K","text":"so in this case you are looking for the shim to use mutual TLS with the Kafka broker(s)?  mutual meaning use client certificates?","ts":"1481292834.000135"},{"type":"message","user":"U0UGH3X7X","text":"right","ts":"1481292884.000136"},{"type":"message","user":"U0XPR4NP4","text":"<@U0PB67X4K> <@U1BC5A0F9> <@U0ZR63HLK> <@U26T99AQ4> <@U0KN2SSKE> <@U0XV1HDL3> <@U0Y14MWA2> <@U0Z541B3P> <@U1KFCPFQA> <@U0XQ35CDD> It occurred to me that we never came to a conclusion on how to do the block hashing, and we are still using the non-deterministic standard proto marshaling for this.  I opened an issue here  <https:\/\/jira.hyperledger.org\/browse\/FAB-1334> for this just to track it, but this seems more crypto than consensus related, so posting it here for discussion.","edited":{"user":"U0XPR4NP4","ts":"1481306396.000000"},"ts":"1481306063.000138"},{"user":"U0Y14MWA2","inviter":"U0XPR4NP4","text":"<@U0Y14MWA2|vukolic> has joined the channel","type":"message","subtype":"channel_join","ts":"1481306073.000139"},{"type":"message","user":"U0XPR4NP4","text":"To summarize my understanding of the existing discussion, <@U0XV1HDL3> and <@U0Y14MWA2> favored a Merkle tree based approach (to allow transaction pruning, to mirror the bitcoin model, and possibly for performance when buliding a batch of transactions over time), while <@U0Z541B3P> and <@U1KFCPFQA> were more inclined to use a simple straight hash across a custom marshaling scheme (because hashing setup is a significant cost, and at the ledger side where blocks are fixed, a Merkle tree is clearly going to be a performance cost).\n\nI think for the block header we can probably agree that we concatenate the individual block header contents marshaled individually to bytes, then hash over this concatenation, or does someone else have a different proposal?","edited":{"user":"U0XPR4NP4","ts":"1481306526.000000"},"ts":"1481306358.000141"},{"type":"message","user":"U0Y14MWA2","text":"I am not against a single hash","ts":"1481306787.000145"},{"type":"message","user":"U0Y14MWA2","text":"As far as i recall merkle trees were mentioned in the context of data structures alternative to hash chain","ts":"1481306855.000146"},{"type":"message","user":"U0Y14MWA2","text":"Not really wirhin a single block","ts":"1481306864.000147"},{"type":"message","user":"U0Y14MWA2","text":"That said hashes of individual tx may already be there","ts":"1481307093.000148"},{"type":"message","user":"U0Y14MWA2","text":"Signed be the client","ts":"1481307103.000149"},{"type":"message","user":"U0Y14MWA2","text":"By","ts":"1481307106.000150"},{"type":"message","user":"U0Y14MWA2","text":"I am not sure how is this implemented but <@U0ZR63HLK> would know","ts":"1481307136.000151"},{"type":"message","user":"U0Y14MWA2","text":"Which may mean we may want to compute root hash over concatenation of individual hashes that are already there","ts":"1481307333.000152"},{"type":"message","user":"U0Y14MWA2","text":"Am i answering the right question ? :)","ts":"1481307350.000153"},{"type":"message","user":"U0XPR4NP4","text":"I think so.  At its most basic level, the question is \"How do we compute the hash of a block header?\" and \"How do we compute the hash of the block data (where this hash gets embedded in the block header)?\".\n\nThe hash of the block data can most obviously be computed as the hash of the concatenation block data contents.  It could also be computed as a Merkle tree of some specified width.  Or, it could be some other scheme like the concatenation of the hashes of the individual transaction (though I imagine that at this point, the Merkle tree would be the better option).","ts":"1481307616.000154"},{"type":"message","user":"U0XPR4NP4","text":"Eventually, I think it might be a good idea to make the block data hashing scheme a parameter to the chain configuration, but, I think we can start simple by picking one.","ts":"1481307697.000155"},{"type":"message","user":"U0Y14MWA2","text":"one hash of concatenation of all individual hashes (+block metadata seqence number, previous hash) seems fine to me","ts":"1481307833.000156"},{"type":"message","user":"U0Y14MWA2","text":"we do want to be able to identify indivdual tx in a batch easily - e.g., for censorship control","ts":"1481307867.000157"},{"type":"message","user":"U0Y14MWA2","text":"alternative for me is a shallow 2-level merkle tree (non-binary) over concatenation of indivudal tx hashes","ts":"1481307931.000158"},{"type":"message","user":"U0XPR4NP4","text":"In the block structure, there is a block header, which contains the block number, the hash of the data, and the hash of the previous block header.  This gives us the chaining, and hashing over that concatenation seems easy.","ts":"1481307940.000159"},{"type":"message","user":"U0Y14MWA2","text":"with another level combining that hash previous block hash and seqno","ts":"1481307944.000160"},{"type":"message","user":"U0XPR4NP4","text":"So the hash chain is over the headers, where the header includes a hash over the data.","ts":"1481307961.000161"},{"type":"message","user":"U0Y14MWA2","text":"yes that's the same thing as in my \"2nd option\"","ts":"1481307979.000162"},{"type":"message","user":"U0Y14MWA2","text":"that is still a merkle tree in a sense :slightly_smiling_face:","ts":"1481307994.000163"},{"type":"message","user":"U0Y14MWA2","text":"albeit a shallow one","ts":"1481307999.000164"},{"type":"message","user":"U0Y14MWA2","text":"binary hash tree seems entirely unecessary","ts":"1481308039.000165"},{"type":"message","user":"U0XPR4NP4","text":"I guess that was intended to be more a statement of \"This is how things work\", we are chaining the headers, where the headers contain a hash of the data.  And the question is how do we hash the data.'","ts":"1481308505.000166"},{"type":"message","user":"U221LL03Z","text":"<@U0PB67X4K> : The code to get Cert object from raw byte is checked-in in fabric-cop\/lib\/crypto\/cryptoutil.go. The function name is GetCertificate. It takes PEM and DER encoding.","ts":"1481308777.000167"},{"type":"message","user":"U2X9KDDL7","text":"<@U0PB67X4K> I'm submitting transactions via the Node SDK HFC.  In particular, what I find avoids the \"Decryption failed\" problem is having peer privacy enabled, and submitting transactions with confidentiality disabled.","ts":"1481314867.000168"},{"type":"message","user":"U2X9KDDL7","text":"<@U0PB67X4K>  I'm a bit confused by what you're saying about privacy -- the protocol spec doc <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/protocol-spec.md#13-terminology> says that privacy is about non-linkability of transactions (which I think means using one TCert, not containing user identity, per transaction -- correct me if I'm wrong), and confidentiality is about controlling who can see which transactions (which I think necessitates encryption of ledger state -- correct me if I'm wrong)","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/protocol-spec.md#13-terminology","text":"Read-only mirror of <https:\/\/gerrit.hyperledger.org\/r\/#\/admin\/projects\/fabric>","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/protocol-spec.md#13-terminology","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"edited":{"user":"U2X9KDDL7","ts":"1481314969.000000"},"ts":"1481314898.000169"},{"type":"message","user":"U0PB67X4K","text":"<@U2X9KDDL7> - all I am saying is that the core.yaml security.privacy is about encryption:\n\n```\n# To enable privacy of transactions (requires security to be enabled). This\n    # encrypts the transaction content during transit and at rest. The state\n    # data is also encrypted\n    privacy: false\n```","ts":"1481315144.000172"},{"type":"message","user":"U2X9KDDL7","text":"Ah ok.. so if privacy is disabled, TCerts are not used to encrypt the transactions?  And privacy has nothing to do with encrypting the ledger state, presumably?","ts":"1481315262.000173"},{"type":"message","user":"U0PB67X4K","text":"TCerts don't really have anything to do with encryption - they are used for signing transactions","ts":"1481315384.000174"},{"type":"message","user":"U2X9KDDL7","text":"Noted.  If transaction confidentiality is enabled, then what elements (e.g. transaction, transaction response, query, ledger state, etc) are encrypted, and with what keys?","ts":"1481315570.000175"},{"type":"message","user":"U2X9KDDL7","text":"My goal is to be able to have transactions, responses, and the ledger state be encrypted such that only the users I specify can decrypt the contents.  I'm thinking I'm missing some additional responsibility on the chaincode side for when this encryption is done (via enabling confidentiality?).","ts":"1481315970.000176"},{"type":"message","user":"U0PB67X4K","text":"<@U2X9KDDL7> - unless I missed a major change in functionality, with the 0.6 release, all validating peers have access to all data and the built-in encryption \/ decryption is \"global\" to the chain itself  (although their are some things which are encrypted using ephemeral keys as part of transporting the transaction from the client to the peer itself)","ts":"1481317232.000177"},{"type":"message","user":"U2X9KDDL7","text":"Interesting.. what key(s) are used to encrypt the ledger state in v0.6?  The validating peers' keys?","ts":"1481318034.000178"},{"type":"message","user":"U0XV1HDL3","text":"Yes, this is the Merkle tree I meant.\n1) Make the hashing format configurable\n2) Merkle trees must be \"wide\" , not binary, otherwise they bring no gain. The cited scheme is a Merkle tree of the data and a good first implementation of the hashing format.","attachments":[{"fallback":"[December 9th, 2016 7:26 PM] vukolic: yes that's the same thing as in my \"2nd option\"","ts":"1481307979.000162","author_subname":"vukolic","channel_id":"C2GE7GXM1","channel_name":"fabric-crypto","is_msg_unfurl":true,"text":"yes that's the same thing as in my \"2nd option\"","author_name":"Marko Vukolic","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/vukolic","author_icon":"https:\/\/secure.gravatar.com\/avatar\/a52edd136bbd07ca069b9393ac60f675.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0006-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1481307979000162","is_share":true,"footer":"Posted in #fabric-crypto"}],"edited":{"user":"U0XV1HDL3","ts":"1481368894.000000"},"ts":"1481368809.000179"},{"type":"message","user":"U221LL03Z","text":"TCerts can carry encrypted attributes.","ts":"1481477101.000181"},{"type":"message","user":"U221LL03Z","text":"<@U0KN2SSKE>  , why would you want CoP to generate TLS cert ? From cryptographic perpsective , any cert , ECERT or TCERT can be used for TLS encryption. Usually , ppl use either self signed tls cert for dev purposes and enterprise TLS cert in prod(which I think customers will already possess). TLS Cert and ECert are differentiated from context in which they are being used and management aspect. I do not think , returning 2 certs : ECERT and TCert as part of enrollment process is good option.","edited":{"user":"U221LL03Z","ts":"1481477627.000000"},"ts":"1481477533.000182"},{"type":"message","user":"U0PB67X4K","text":"<@U0ZR63HLK> - can you look at my comment here:   <https:\/\/jira.hyperledger.org\/browse\/FAB-1276>","ts":"1481480490.000184"},{"type":"message","user":"U0PB67X4K","text":"would be helpful to add some additional details \/ explanation so that the SDK developers will better understand the required changes","ts":"1481480518.000185"},{"type":"message","user":"U2X9KDDL7","text":"Hi all, I noticed that a user's enrollment ID is encrypted as one of the TCert extensions, and it looks like if one can get PreK0, then one can decrypt the enrollment ID.  Is that correct, and how does one obtain PreK0?  (From an ECert, a TCert, or where?)  Also, is there any more detailed documentation on the pre-key tree as mentioned in the document on Attributes?  Thanks","ts":"1481521601.000186"},{"type":"message","user":"U1BC5A0F9","text":"<@U2X9KDDL7> this indeed the case.","ts":"1481547663.000187"},{"type":"message","user":"U1BC5A0F9","text":"Enrollment identity is encrypted with some key that can be given to auditors, for the latter to obtain a proof of the owner of an (otherwise anonymous) certificate.","ts":"1481547703.000188"},{"type":"message","user":"U1BC5A0F9","text":"Adding <@U221LL03Z>  here, who is currently working on this.","ts":"1481547735.000189"},{"type":"message","user":"U0UGH3X7X","text":"<@U221LL03Z>  re: <https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1481477533000182>  , I'm establishing TLS between an orderer  and a Kafka broker so for the orderer, I'll need a cert signed by that orderer's organization.  Can I use the ecert for that purpose ? earlier in the thread, <@U0ZR63HLK> had mentioned not using an identity cert for other purposes","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1481477101000181","fallback":"[December 11th, 2016 9:25 AM] ashutoshkumar: TCerts can carry encrypted attributes.","ts":"1481477101.000181","author_subname":"ashutoshkumar","channel_id":"C2GE7GXM1","channel_name":"fabric-crypto","is_msg_unfurl":true,"text":"TCerts can carry encrypted attributes.","author_name":"Ashutosh Kumar","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/ashutoshkumar","author_icon":"https:\/\/secure.gravatar.com\/avatar\/216a004f9bfab8ccf302ac52ac0096f8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0005-48.png","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-crypto"}],"edited":{"user":"U0UGH3X7X","ts":"1481550891.000000"},"ts":"1481550863.000190"},{"type":"message","user":"U221LL03Z","text":"<@U2X9KDDL7> : Pre Key is per affiliation\/group  basis. TCert in v1.0 will be a library where , you need to pass on required parameters and it'll provide you with batch of TCerts. If TCerts are going to be issued by CoP server(new incarnation of membership service) , TCert genertation gets userid from request , obtain group\/affiliation that user belongs to and then get PreKey for that group\/affiliation.","ts":"1481551571.000193"},{"type":"message","user":"U221LL03Z","text":"When Group\/affiliation is being created for the first time , a random number string is generated , which acts as PreKey and it is stored in DB.","ts":"1481551661.000194"},{"type":"message","user":"U221LL03Z","text":"The key trees can be established based on the requirements.","ts":"1481551731.000195"},{"type":"message","user":"U221LL03Z","text":"Getting decryption key is reverse of generating encryption key. So the party performing decryption , has to know how the encryption key is derived.","ts":"1481551897.000196"},{"type":"message","user":"U0UGH3X7X","text":"<@U221LL03Z> , to expand on our hallway talk ... the scenario is :  Peer &lt;--&gt; orderer &lt;--&gt; kafka","ts":"1481552892.000197"},{"type":"message","user":"U0UGH3X7X","text":"peer and orderer both have MSP so transactions sent between orderer\/peer are signed and verified by msp.","ts":"1481552948.000198"},{"type":"message","user":"U0UGH3X7X","text":"for the orderer\/kafka connection ,  kafka has its own TLS configuration and orderer is acting as a client.  The kafka admin is responsible for the certs that the brokers use.  The orderers will most likely belong to other organizations and have different admins than Kafka.  So, an orderer will need a cert for this TLS connection with kafka.","ts":"1481553278.000199"},{"type":"message","user":"U0UGH3X7X","text":"At this point, I'm trying to see how this orderer cert should be created ?  Would COP create just like it's doing now for ecerts ? should the orderer admin create separately via something like openssl ?","ts":"1481553371.000200"},{"type":"message","user":"U0S5KF44D","text":"<@U0UGH3X7X> Where does kafka get it's certificate?  Are you enabling mutual TLS, i.e. does kafka have to authenticate the orderer also?","ts":"1481553590.000201"},{"type":"message","user":"U0S5KF44D","text":"Is the kafka cert self-signed or not?","ts":"1481553663.000202"},{"type":"message","user":"U0UGH3X7X","text":"Kafka admin is responsible for creating the certs for the kafka brokers ... kafka can be provided by one or more of the orgs that participate in fabric or it can be provided by a totally separate org ... in production, both orderers and kafka brokers would use signed certs","ts":"1481553910.000203"},{"type":"message","user":"U0S5KF44D","text":"Easier if you call to discuss","ts":"1481554020.000204"},{"type":"message","user":"U0UGH3X7X","text":"start a scrum in a few minutes ... will call after that","ts":"1481554060.000205"},{"type":"message","user":"U0S5KF44D","text":"ok","ts":"1481554066.000206"},{"type":"message","user":"U11MANG9G","text":"Yes, of course.","attachments":[{"fallback":"[December 12th, 2016 6:45 AM] tuand: Kafka admin is responsible for creating the certs for the kafka brokers ... kafka can be provided by one or more of the orgs that participate in fabric or it can be provided by a totally separate org ... in production, both orderers and kafka brokers would use signed certs","ts":"1481553910.000203","author_subname":"tuand","channel_id":"C2GE7GXM1","channel_name":"fabric-crypto","is_msg_unfurl":true,"text":"Kafka admin is responsible for creating the certs for the kafka brokers ... kafka can be provided by one or more of the orgs that participate in fabric or it can be provided by a totally separate org ... in production, both orderers and kafka brokers would use signed certs","author_name":"Tuan Dang","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/tuand","author_icon":"https:\/\/avatars.slack-edge.com\/2016-05-01\/39256398483_5bf896c70623b7526e05_48.jpg","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1481553910000203","is_share":true,"footer":"Posted in #fabric-crypto"}],"ts":"1481558584.000207"},{"type":"message","user":"U11MANG9G","text":"<@U0UGH3X7X>: We should definitely should support a case where an `admin` provides \u201chis own\u201d certificate that can be signed by an external entity.","ts":"1481558645.000208"},{"type":"message","user":"U11MANG9G","text":"<@U221LL03Z>: What <@U0UGH3X7X> describes above is a different use-case, that is separate than the TCertBatchRequest (as it is in `membersrvc` or the `cop`)","ts":"1481558701.000209"},{"type":"message","user":"U11MANG9G","text":"<@U0UGH3X7X>: the question is whether the support of these certs is just at \u201cbootstrapping\u201d, or do you want\/need some onboarding method\/steps.","ts":"1481558766.000210"},{"type":"message","user":"U0UGH3X7X","text":"hi <@U11MANG9G>  ...  these certs would be provided to an orderer at bootstrap .","ts":"1481559014.000211"},{"type":"message","user":"U11MANG9G","text":"Yup, in that case, that should not be impossible.","ts":"1481559035.000212"},{"type":"message","user":"U11MANG9G","text":"Sounds plausible\/reasonable to me.","ts":"1481559043.000213"},{"type":"message","user":"U11MANG9G","text":"And later on\u2026 the \u201cnetwork\u201d chooses whether these are considered as `trusted`, right?","ts":"1481559075.000214"},{"type":"message","user":"U221LL03Z","text":"<@U11MANG9G>  : There is no TCert involved here.","ts":"1481559108.000215"},{"type":"message","user":"U11MANG9G","text":"Yes, exactly.","ts":"1481559117.000216"},{"type":"message","user":"U11MANG9G","text":"<@U221LL03Z> That\u2019s what I meant here:","attachments":[{"fallback":"[December 12th, 2016 8:05 AM] jonathanlevi: <@U221LL03Z>: What <@U0UGH3X7X> describes above is a different use-case, that is separate than the TCertBatchRequest (as it is in `membersrvc` or the `cop`)","ts":"1481558701.000209","author_subname":"jonathanlevi","channel_id":"C2GE7GXM1","channel_name":"fabric-crypto","is_msg_unfurl":true,"text":"<@U221LL03Z>: What <@U0UGH3X7X> describes above is a different use-case, that is separate than the TCertBatchRequest (as it is in `membersrvc` or the `cop`)","author_name":"Jonathan Levi","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/jonathanlevi","author_icon":"https:\/\/avatars.slack-edge.com\/2016-09-06\/76710770455_2316fc867e622c8f0008_48.jpg","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1481558701000209","is_share":true,"footer":"Posted in #fabric-crypto"}],"ts":"1481559144.000217"},{"type":"message","user":"U11MANG9G","text":"These are different `certs`.","ts":"1481559158.000218"},{"type":"message","user":"U221LL03Z","text":"yup. I agree with that.","ts":"1481559171.000219"},{"type":"message","user":"U221LL03Z","text":"and I do not want TCert\/ECert to be used as TLS cert.","ts":"1481559198.000220"},{"type":"message","user":"U0UGH3X7X","text":"my thought is that orderers  and kafka already have each other's CA certs in their respective truststores","ts":"1481559206.000221"},{"type":"message","user":"U221LL03Z","text":"I assume so.","ts":"1481559228.000222"},{"type":"message","user":"U221LL03Z","text":"<@U0UGH3X7X>  : As per our hallway talk , the trust store creation should fall in management aspect of configuration , which happens out of band.","ts":"1481559303.000223"},{"type":"message","user":"U0UGH3X7X","text":"right ,  my original question was given that an orderer needs to establish a mutual TLS auth connection between itself and kafka,  could\/should  COP or MSP provide a TLS cert for the orderer to use","ts":"1481559688.000224"},{"type":"message","user":"U0UGH3X7X","text":"I think the two of us are leaning towards this being an admin task outside of COP and fabric","ts":"1481559724.000225"},{"type":"message","user":"U11MANG9G","text":"Yes, it has to be separate <@U0UGH3X7X>.","ts":"1481559742.000226"},{"type":"message","user":"U11MANG9G","text":"There are a few good reasons for it.","ts":"1481559758.000227"},{"type":"message","user":"U11MANG9G","text":"Say we extend the cop to also sign CSR for TLS...","ts":"1481559780.000228"},{"type":"message","user":"U11MANG9G","text":"Business-wise, now the cop will have the responsibility which can be translated to liability with relation to the link between the identity and one\u2019s public key.","ts":"1481559833.000229"},{"type":"message","user":"U11MANG9G","text":"While it may look \u2018friendly\u2019 if we simply \u201csign on someone\u2019s behalf\u201d...","ts":"1481559860.000230"},{"type":"message","user":"U11MANG9G","text":"\u2026 now you will need to have the public key of such \u201csigning entity\u201d as part of your trusted zone\/model.","ts":"1481559891.000231"},{"type":"message","user":"U11MANG9G","text":"If you see what I mean?","ts":"1481559901.000232"},{"type":"message","user":"U11MANG9G","text":"---","ts":"1481559903.000233"},{"type":"message","user":"U11MANG9G","text":"At this stage it may be easier (for all of us) to say something along the lines of: \u201cHey, if you have a certificate that was signed (say) by VeriSign\u2026)\u2026 you can use it\", and then it is subject to decision making steps taken as part of the TLS handshake\u2026 that decides whether such a signed cert is acceptable.","ts":"1481560018.000234"},{"type":"message","user":"U11MANG9G","text":"---","ts":"1481560026.000235"},{"type":"message","user":"U11MANG9G","text":"This separation actually makes it stronger, as it allows the (seamless) support by design, of many certificates issuers\/providers.","ts":"1481560083.000236"},{"type":"message","user":"U11MANG9G","text":"So the out-of-bound establishment\/bootstrapping, at this point, is much preferable.","ts":"1481560120.000237"},{"type":"message","user":"U11MANG9G","text":"---","ts":"1481560132.000238"},{"type":"message","user":"U11MANG9G","text":"If I haven\u2019t convinced, I can describe a few other use-cases where the other approach can limit us, going forward.","ts":"1481560166.000239"},{"type":"message","user":"U11MANG9G","text":"<@U0UGH3X7X>, <@U221LL03Z>: ^^^ (are these\/is this aligned with your hallway\/corridor discussion, more or less?)","ts":"1481560226.000242"},{"type":"message","user":"U221LL03Z","text":"The Entity that cop manages is end user's identity and the entity that is managed by PKI of TLS is domain. I do not think , these two can be linked together.","ts":"1481560399.000243"},{"type":"message","user":"U221LL03Z","text":"I agree with the statement : This separation actually makes it stronger, as it allows the (seamless) support by design, of many certificates issuers\/providers.\n11:28\nSo the out-of-bound establishment\/bootstrapping, at this point, is much preferable.","ts":"1481560472.000244"},{"type":"message","user":"U11MANG9G","text":"<@U221LL03Z>: Yes, great\/sure thing. <@U0UGH3X7X>: The short (\u201clong\u201d) answer is that \u201cyes, the admin bootstrap part should remain out of bound\u201d. `But it\u2019s not because we are lazy! It is actually better.` :wink:","ts":"1481560717.000245"},{"type":"message","user":"U0UGH3X7X","text":"sorry,  got caught up in another call ...  <@U11MANG9G>  <@U221LL03Z>   I agree with you two , ... configuration of orderer and kafka brokers would just be instructions saying \"use these certs\" ... how those certs are created if up to the admin, not required as part of cop\/fabric","ts":"1481561083.000246"},{"type":"message","user":"U0UGH3X7X","text":"<@U0S5KF44D> ^^^ ?","ts":"1481561096.000247"},{"type":"message","user":"U0UGH3X7X","text":"another question is how to handle in HSM given that the private key is now in hardware","ts":"1481561147.000248"},{"type":"message","user":"U11MANG9G","text":"___\nSorry I\u2019m pushing for these - but it\u2019s better to have these discussions \u201cin public\u201d or at least to summarize and list out assumptions, so that we don\u2019t \u201cwake up\u201d a week before locking a release and realize that there was an important user-story that we have completely missed.\n___","ts":"1481561269.000249"},{"type":"message","user":"U11MANG9G","text":"HSM: What exactly is the use-case?","ts":"1481561282.000250"},{"type":"message","user":"U11MANG9G","text":"We can still get the associated \u201cpublic\u201d key endorsed by an \u201cauthority\u201d you trust. If you see what I mean?","ts":"1481561318.000251"},{"type":"message","user":"U11MANG9G","text":"But maybe I am not aware of the entire flow (mind you that I\u2019m jumping in and out of some of these discussions)...","ts":"1481561386.000252"},{"type":"message","user":"U0UGH3X7X","text":"if I'm using mutual TLS auth between orderer and kafka,   does orderer need to have cert or cert+private key ?","ts":"1481561399.000253"},{"type":"message","user":"U11MANG9G","text":"Cert + private key","ts":"1481561438.000254"},{"type":"message","user":"U11MANG9G","text":"When I establish an authenticated TLS connection with you, I verify that you really do have the associated private key.","ts":"1481561470.000255"},{"type":"message","user":"U11MANG9G","text":"So a cert would not suffice.","ts":"1481561488.000256"},{"type":"message","user":"U0UGH3X7X","text":"when I configure the orderer,  I give it the location of the cert and private key files","ts":"1481561529.000257"},{"type":"message","user":"U0UGH3X7X","text":"for HSM , I think the private key is on some hardware card  ... how do I tell the orderer where to get the private key ?","ts":"1481561609.000258"},{"type":"message","user":"U11MANG9G","text":"I haven\u2019t worked with\/on the HSM module yet. Vlad has, right?","ts":"1481561687.000259"},{"type":"message","user":"U11MANG9G","text":"I can take a look and review things, if you guys like.","ts":"1481561715.000260"},{"type":"message","user":"U11MANG9G","text":"For TLS, you must be able to sign (with the private key) over some value that I provide to you.","ts":"1481561744.000261"},{"type":"message","user":"U0UGH3X7X","text":"<@U11MANG9G>  I owe you a beer :slightly_smiling_face:","ts":"1481561758.000262"},{"type":"message","user":"U11MANG9G","text":"That\u2019s part of the protocol, so however it is configured, even if you \u201ctrust\u201d the signer of the certificate\u2026.","ts":"1481561790.000263"},{"type":"message","user":"U11MANG9G","text":"\u2026 the party \u201cpresenting\u201d you with that cert, has to also prove the ownership (access) to the private key.","ts":"1481561816.000264"},{"type":"message","user":"U11MANG9G","text":"\u2014\n<@U0UGH3X7X>: Sure! Beer is always welcome!\n__","ts":"1481561832.000265"},{"type":"message","user":"U11MANG9G","text":"Just for intuition, while we are at it\u2026 the \u201ccerts\u201d are considered public information.","ts":"1481561864.000266"},{"type":"message","user":"U11MANG9G","text":"So think about you copying amazon\u2019s pubic certificate.","ts":"1481561890.000267"},{"type":"message","user":"U11MANG9G","text":"And now you pretend to be \"<http:\/\/amazon.com|amazon.com>\"","ts":"1481561904.000268"},{"type":"message","user":"U11MANG9G","text":"-&gt; TLS breaks if you don\u2019t have amazon\u2019s private key.","ts":"1481561932.000269"},{"type":"message","user":"U11MANG9G","text":"-&gt; which renders \u201cstealing\u201d amazon\u2019s public certificate useless (for you).","ts":"1481561952.000270"},{"type":"message","user":"U11MANG9G","text":"It\u2019s the (access to the) private key that matters.","ts":"1481561981.000271"},{"type":"message","user":"U11MANG9G","text":"___\nDid I help or confuse? :wink:","ts":"1481562002.000272"},{"type":"message","user":"U0UGH3X7X","text":"and to keep in mind  ... we can only configure orderer and kafka , i.e.  tell both that \"these are the certs and keys to use\"  ...  both sides use packages to implement TLS so we have no control over that","ts":"1481562004.000273"},{"type":"message","user":"U11MANG9G","text":"Yes, that\u2019s normal. Sure.","ts":"1481562042.000274"},{"type":"message","user":"U11MANG9G","text":"We \"set them up\u201d with credentials.","ts":"1481562057.000275"},{"type":"message","user":"U11MANG9G","text":"I can take a look at the HSM interactions, etc. Whenever. Just let me know.","ts":"1481562108.000276"},{"type":"message","user":"U0UGH3X7X","text":"ok, let me get the \"normal\" TLS mutual auth going ...  I'll come back to HSM later","ts":"1481562699.000277","reactions":[{"name":"+1","users":["U11MANG9G"],"count":1}]},{"type":"message","user":"U2X9KDDL7","text":"<@U1BC5A0F9> <@U221LL03Z> Thanks for the reply -- I have another, more concrete, question: in v0.6, is it possible to get the enrollment ID from the current transaction's TCert in chaincode (say for access control purposes), and if so, how?","ts":"1481564500.000278"},{"type":"message","user":"U2X9KDDL7","text":"Basically I want to know\/verify the identity of the caller, and I've had trouble getting the form of identity verification in asset_management.go to work -- it seems strange to use a TCert to identify each user, since for example if you were to shut the services down, start them back up, the new TCert the client would retrieve would be different and therefore useless in determining the ID of users in chaincode.","ts":"1481564586.000279"},{"type":"message","user":"U221LL03Z","text":"enrollmentid will always be the same for all tcerts corresponding to EcERT.","ts":"1481564677.000280"},{"type":"message","user":"U221LL03Z","text":"There is 1:1 mapping between EnrollmentId and ECert.","ts":"1481564719.000281"},{"type":"message","user":"U221LL03Z","text":"even if you get new batch of TCerts , your enrollment id will be the same.","ts":"1481564755.000282"},{"type":"message","user":"U2X9KDDL7","text":"<@U221LL03Z> That makes sense.  Though is there a way to get the necessary pre-key for decryption in chaincode?","ts":"1481564789.000283"},{"type":"message","user":"U2X9KDDL7","text":"It seems like use of the pre-key would be something done not in chaincode but in the client app -- perhaps passing the pre-key into the transaction would be insecure","ts":"1481564957.000284"},{"type":"message","user":"U0PB67X4K","text":"<@U2X9KDDL7> - I'm pretty sure we never finished up all the work to make all of this possible end to end.  We had the concept of passing along encrypted attributes (not just the enrollID) within tcerts and a mechanism for sharing the decryption key for those attributes with the validating nodes (using ecies to encrypt the attribute encryption key as well as a function to actually check to see if the encrypted attribute matches a specific value without actually decrypting it)","ts":"1481565510.000285"},{"type":"message","user":"U0PB67X4K","text":"It's been a while and I don't think we ever enabled all of that functionality end to end in v0.6","ts":"1481565536.000286"},{"type":"message","user":"U0PB67X4K","text":"you can definitely pass and extract attributes in the clear though via tcerts","ts":"1481565562.000287"},{"type":"message","user":"U2X9KDDL7","text":"<@U0PB67X4K> Ah ok -- thanks for the clarification.  Would you say the identity verification done in the asset_management.go example is correct\/reasonable? (the function is `isCaller`, which verifies a signature put in the transaction metadata against a previously stored TCert for the user)","ts":"1481565780.000288"},{"type":"message","user":"U2X9KDDL7","text":"(this is in v0.6)","ts":"1481565825.000289"},{"type":"message","user":"U0PB67X4K","text":"that's one way to do it and you may also want to take a look at <https:\/\/github.com\/hyperledger\/fabric\/blob\/v0.6\/examples\/chaincode\/go\/asset_management_with_roles\/asset_management_with_roles.go>","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/blob\/v0.6\/examples\/chaincode\/go\/asset_management_with_roles\/asset_management_with_roles.go","text":"Read-only mirror of <https:\/\/gerrit.hyperledger.org\/r\/#\/admin\/projects\/fabric>","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/blob\/v0.6\/examples\/chaincode\/go\/asset_management_with_roles\/asset_management_with_roles.go","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1481566061.000290"},{"type":"message","user":"U0PB67X4K","text":"which shows how to use attributes with tcerts as well","ts":"1481566077.000292"},{"type":"message","user":"U0PB67X4K","text":"the part I am not sure about was encrypted attributes - I'd have to look back but I'm pretty sure we didn't get that working end to end via any of the SDKs, etc","ts":"1481566129.000293"},{"type":"message","user":"U2X9KDDL7","text":"Thanks!","ts":"1481566483.000294"},{"type":"message","user":"U2X9KDDL7","text":"I have been looking at all those examples, it's just taking a while to internalize them all :slightly_smiling_face:","ts":"1481566526.000295"},{"type":"message","user":"U2X9KDDL7","text":"Would it be silly to just add the enrollment ID as its own additional attribute?  Redundant, yes, but the mechanism for retrieving it is right there in ChaincodeStubInterface","ts":"1481566747.000296"},{"type":"message","user":"U2X9KDDL7","text":"I guess my question is more like is that still secure?","ts":"1481566808.000297"},{"type":"message","user":"U13TWBRBL","text":"<@U1BC5A0F9> <@U0ZR63HLK> <@U26T99AQ4> if I understand it correctly, with the MSP design, peers and SDKs can mix and match signature algos within the same network and even the same chain? such that if peerA and peerB are in chainX, peerA can use ecdsa and peerB can use rsa, provided that they and the application\/SDK each have the MSP implementations for the signature algos?","ts":"1481567269.000298"},{"type":"message","user":"U13TWBRBL","text":"(and the underlying BCCSP implementations)","ts":"1481567296.000299"},{"type":"message","user":"U221LL03Z","text":"<@U0PB67X4K> : looking at TCert code , I do not see any reason why encryption\/decryption won't work. I see the flaw that symmetric key encryption is being used , client has to be aware of Key derivation mechanism which is not dynamic and key transport.","ts":"1481568639.000300"},{"type":"message","user":"U221LL03Z","text":"<@U13TWBRBL> : My understanding is crypto will be configured with one BCCSP config which is static.","ts":"1481568908.000301"},{"type":"message","user":"U13TWBRBL","text":"<@U221LL03Z> what prevents a SigningIdentity implementation tied to a specific MSP ID to use one signature algo, while another impl tied to another MSP ID use another signature algo? where is the BCCSP config statically set?","ts":"1481569127.000302"},{"type":"message","user":"U221LL03Z","text":"<@U13TWBRBL> : that makes sense. Maybe we should wait for reply from Elli and team.","edited":{"user":"U221LL03Z","ts":"1481569397.000000"},"ts":"1481569251.000303"},{"type":"message","user":"U2Q0HP4HY","text":"<@U0PB67X4K> <@U26T99AQ4>  Hi can I bring up why we decided  bundle the crytpo certificate and mspid into an ASN1 byte stream for the creator ?  Why not create a mspid as a string in protobuf along with the creator byte string of the PEM cert ? \nMany SDKs in the future will have this hurdle of finding a ASN1 library to meet this need.  This seems now he only place where this will be needed.","edited":{"user":"U2Q0HP4HY","ts":"1481569334.000000"},"ts":"1481569294.000304"},{"type":"message","user":"U13TWBRBL","text":"<@U0PB67X4K> <@U26T99AQ4> I agree with <@U2Q0HP4HY> that it\u2019s unnecessary to use ASN1 object in this case. ASN1 may have better cross-system support than protobuf (like supporting embedded systems) but since this is then wrapped inside a protobuf message anyway, there\u2019s really no benefit...","ts":"1481569510.000307"},{"type":"message","user":"U0PB67X4K","text":"<@U13TWBRBL>  - I don't disagree.  If we're worried about marshaling, then I had previous suggested just using pure bytes with the first 1 or 2 bytes being used to represent the type and the remaining bytes would be the cert bytes","ts":"1481569648.000308"},{"type":"message","user":"U0PB67X4K","text":"(I'll be offline for a bit heading to the airport)","ts":"1481569688.000309"},{"type":"message","user":"U2Q0HP4HY","text":"<@U0PB67X4K> That sounds good if various part of the backend Fabric need this encoded in ASN1 .. but if that's not the case why not just keep it seperated","ts":"1481569790.000310"},{"type":"message","user":"U13TWBRBL","text":"<@U0PB67X4K> wouldn\u2019t your suggestion be equivalent (and easier to implement) if that proceeding 1 or 2 bytes are a separate protobuf field?","edited":{"user":"U13TWBRBL","ts":"1481569835.000000"},"ts":"1481569799.000311"},{"type":"message","user":"U1BC5A0F9","text":"<@U13TWBRBL>: <@U221LL03Z> : so the bccsp indeed used to have a static configuration and hence an instance of bccsp would support either rsa or ecdsa certain lengths etc","ts":"1481572513.000313"},{"type":"message","user":"U1BC5A0F9","text":"However <@U0ZR63HLK> modified that and enabled calls of bccsp to specify as well crypto algos or hashes to be used within overwriting any default specs.  ","ts":"1481572590.000314"},{"type":"message","user":"U1BC5A0F9","text":"For a standard x509 msp implementation ignoring for a moment the tcert peculiar extensions a verifier would need to check the type of keys as described in the certificate to trigger the related signature verification algo within bccsp. ","ts":"1481572707.000315"},{"type":"message","user":"U1BC5A0F9","text":"But one could indeed have one msp provider enforcing that certain keys are used throughout their infrastructure.","ts":"1481572757.000316"},{"type":"message","user":"U0PB67X4K","text":"<@U13TWBRBL>:  serialization of protobufs is non deterministic and I believe the signature is over the creator. Of course we serialize other protos in any case  but was just trying to avoid that issue here since this is such a simple structure ","ts":"1481572893.000317"},{"type":"message","user":"U1BC5A0F9","text":"I think there was also an additional argument that crypto items that are to be included in the blockchain eventually could make sense to be represented with asn.1 standard format.","ts":"1481573260.000318"},{"type":"message","user":"U221LL03Z","text":"<@U1BC5A0F9> : So that I understand , you mean to say that crypto object , not being in , say , Golang format , you want to have it in ASN.1 so that other implementation , say Java , can consume it. Did I stated it right ?","ts":"1481575065.000319"},{"type":"message","user":"U2Q0HP4HY","text":"<@U1BC5A0F9> Could that be engineered  such that it's done on Fabric side without putting the burden on the SDKs requiring it ?","ts":"1481578134.000320"},{"type":"message","user":"U1BC5A0F9","text":"<@U221LL03Z>: So ASN.1 was used to represent cryptographic material that is to persist, i.e., be included in the chain, as it is the standard encoding for such data.","edited":{"user":"U1BC5A0F9","ts":"1481615865.000000"},"ts":"1481614684.000321"},{"type":"message","user":"U1BC5A0F9","text":"<@U2Q0HP4HY> : So, certificates represent transaction\/proposal creators and endorsers. Proposal creator certificates are hashed and included in what is signed by endorsers that results in the blockchain. On one hand, as <@U0PB67X4K> mentioned it is important that this hash is generated deterministically such that all endorsers sign the same thing, which is not possible if the creator is serialized using protobufs. On the other hand, as this creator certificate is included in a signature changing its representation before to it being included to the Blockchain \/ ledger would not  work as the creator and endorser signature verification would fail...","ts":"1481616706.000323"},{"type":"message","user":"U0ZJZBJLF","text":"Hi <@U0ZR63HLK>","ts":"1481626803.000324"},{"type":"message","user":"U0ZJZBJLF","text":"Can I have a follow-up question ?","ts":"1481626812.000325"},{"type":"message","user":"U0ZJZBJLF","text":"So, the peer boots up and has no knowledge of organizational CAs apart from itself, right? \nthen it gets a JoinChannel message, how can he verify that message?","ts":"1481626896.000326"},{"type":"message","user":"U0ZJZBJLF","text":"I guess it *has to* verify that JoinChannel message since it is injected with root CA certs right?","ts":"1481626939.000327"},{"type":"message","user":"U0ZJZBJLF","text":"Also another question- The source of the problem is that the peer doesn't have the list of org CA certs at startup, and it expects to obtain the org CAs from the ledger's (meaning- from each channel it participates in).\nCan you please point me to a document where this is outlined?","ts":"1481627804.000328"},{"type":"message","user":"U0ZJZBJLF","text":"And- does the peer have *at least* the root CA of its own org at boot time?","edited":{"user":"U0ZJZBJLF","ts":"1481627995.000000"},"ts":"1481627986.000329"},{"type":"message","user":"U0PB67X4K","text":"<@U0ZJZBJLF> - the peer itself will have it full \"identity\" available at boot time - which would include its private\/public key pair as well as the root CA for its own org.  Of course its possible that the peer would have a different cert for signing and for TLS - although we can either recommend and\/or mandate that it uses the same cert.  The trick of course is that this is only applicable in the case of X509 and of course we'd have to ensure that the TLS cert actually had the correct CN and\/or SANs for hostname verification.   \n\nFrom a TLS perspective, I'm still currently working on a GRPC server and client which can dynamically load up trusted roots at runtime","ts":"1481629663.000331"},{"type":"message","user":"U0ZJZBJLF","text":"Gari- actually that was a follow-up question for something else :slightly_smiling_face:","ts":"1481629708.000332"},{"type":"message","user":"U0ZJZBJLF","text":"But since you're here I'll ask you too","ts":"1481629743.000333"},{"type":"message","user":"U0ZJZBJLF","text":"So, I'm a peer `p` in org `A`. How do I obtain a certificate for root CA of org `B`?","ts":"1481629771.000334"},{"type":"message","user":"U0PB67X4K","text":"it should be in the latest config block for any channel\/chain of which org `B` is a member","ts":"1481629853.000335"},{"type":"message","user":"U0PB67X4K","text":"so for example, in the GRPC client I'm working on, you can dynamically add trusted root certificates to its trust store","ts":"1481629892.000336"},{"type":"message","user":"U0ZJZBJLF","text":"So if I'm `p` and I'm in org `A` but I'm not in *any channel with *  peer `q` in org `B` how can I verify messages signed by `q`?","edited":{"user":"U0ZJZBJLF","ts":"1481629951.000000"},"ts":"1481629917.000337"},{"type":"message","user":"U0PB67X4K","text":"you would get this from the various config blocks at startup and as they are updated (hopefully this works  )","ts":"1481629926.000338"},{"type":"message","user":"U0PB67X4K","text":"If two peers from different orgs don't share any mutual channels, is there a reason they would communicate in the first place?","ts":"1481629989.000341"},{"type":"message","user":"U0ZJZBJLF","text":"well, this somehow creates a disjoint-ness in the membership views of gossip","ts":"1481630034.000342"},{"type":"message","user":"U0ZJZBJLF","text":"that means that for the case of peers in different orgs but that have common channels, only they can \"see\" other peers from different orgs","ts":"1481630090.000343"},{"type":"message","user":"U0PB67X4K","text":"Ah - yes - basically you end up building up a per channel\/chain membership view.   \n\nI guess the issue is whether or not we should build up a \"global\" view of all peers where they only exchange \"hello\" type messages ?   (of course they can only exchange blocks scoped at the chain\/channel level)","ts":"1481630253.000344"},{"type":"message","user":"U0PB67X4K","text":"in that case, we'd need to have some option of knowing all orgs which are part of a network outside of channel\/chains","ts":"1481630329.000345"},{"type":"message","user":"U0ZJZBJLF","text":"well, we need to adjust to this new learned information because right now, when a peer gets an AliveMessage it simply blindly forwards it to a random subset of peers it considers alive","ts":"1481630344.000346"},{"type":"message","user":"U0ZJZBJLF","text":"right now, there is a good proability this received AliveMessage will be discarded because it'll simply be received by a peer that has no way of validating it","ts":"1481630374.000347"},{"type":"message","user":"U0ZJZBJLF","text":"```\nin that case, we'd need to have some option of knowing all orgs which are part of a network outside of channel\/chains\n```\nI thought at bootstrap time we get a list of root org CA certs or somehow the MSP takes care of that","ts":"1481630416.000348"},{"type":"message","user":"U0PB67X4K","text":"all of that info comes from the config blocks which are scoped by channel\/chain","ts":"1481630486.000349"},{"type":"message","user":"U0PB67X4K","text":"but you might want to check with Binh - he's currently working on the CSCC stuff which as far as I know is the only way to get the root CAs for the various orgs","ts":"1481630578.000350"},{"type":"message","user":"U0ZJZBJLF","text":"Bottom line- right now we have a problem. \n<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2353\/>\n<@U0ZR63HLK> tries to implement this interface which currently the gossip code assumes the MSP gives it.","edited":{"user":"U0ZJZBJLF","ts":"1481630691.000000"},"ts":"1481630681.000351"},{"type":"message","user":"U0ZJZBJLF","text":"I guess the straight forward way of doing it in light of the recent information is that he'll simply return an error if the root CA of that per-channel-MSP isn't found or something?","ts":"1481630757.000353"},{"type":"message","user":"U0PB67X4K","text":"well what would actually happen if a peer got an AliveMessage from a peer it did not \"trust\"?","ts":"1481630761.000354"},{"type":"message","user":"U0ZJZBJLF","text":"it discards it","ts":"1481630767.000355"},{"type":"message","user":"U0ZJZBJLF","text":"and doesn't forward it","ts":"1481630783.000356"},{"type":"message","user":"U0ZJZBJLF","text":"and logs a warning message :disappointed:","ts":"1481630789.000357"},{"type":"message","user":"U0ZJZBJLF","text":"I mean, in theory, right? because that is in <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2681\/> which depends on <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3023\/> and already has merge conflict with c0rwin's code so I'll need to re-push it,  yet again","ts":"1481630891.000358"},{"type":"message","user":"U0PB67X4K","text":"so gossip need to have two \"views\" of the various MSPs:\n\n1) At the raw transport level (e.g. for AliveMessages) it needs to be able to access all of the root CAs across all of the channels to which a peer belongs\n\n2) For disseminating blocks, it needs to be able to have a view scoped by chain\/channel","ts":"1481630912.000359"},{"type":"message","user":"U0PB67X4K","text":"frankly, the peer needs to build up these structures","ts":"1481630955.000360"},{"type":"message","user":"U0PB67X4K","text":"I've been concerned that we did not start with this - e.g. here's the various structures the peer will have (who cares how they get populated) in simple terms","ts":"1481631007.000361"},{"type":"message","user":"U0ZJZBJLF","text":"for (1)- I don't know, it's as we want it to be. If we want peers of different orgs that have no intersection in channels not to communicate with each other, so be it.\nfor (2) - I of course take care of not disseminating blocks to peers of different channels.","ts":"1481631009.000362"},{"type":"message","user":"U0PB67X4K","text":"but for (1), I assume AliveMessage is not scoped to a channel - so you'd need to full list of trusted CAs that the peer knows about","ts":"1481631126.000363"},{"type":"message","user":"U0ZJZBJLF","text":"yeah but I assume that MSP can do that for me, no?","ts":"1481631148.000364"},{"type":"message","user":"U0ZJZBJLF","text":"somehow aggregate all certificates among all channel-MSPs","ts":"1481631165.000365"},{"type":"message","user":"U0PB67X4K","text":"agreed - gossip layer should not need to worry about that","ts":"1481631184.000366"},{"type":"message","user":"U0ZJZBJLF","text":"BTW regarding scoping - we have something much more generic. Each message sent in gossip declares its scope (any subgroup of: {channel, organization}, meaning 4 possibilities) and we \"route\" it to peers according to \"policies\"","ts":"1481631244.000367"},{"type":"message","user":"U0ZJZBJLF","text":"So, <@U0ZR63HLK>  - I think you can simply do the straight forward thing","ts":"1481631407.000368"},{"type":"message","user":"U0ZR63HLK","text":"<@U0ZJZBJLF> Is MessageCryptoService able to tell apart (1) from (2)?","ts":"1481631424.000369"},{"type":"message","user":"U0ZJZBJLF","text":"and <@U0PB67X4K>  yesterday you said that protobuf serialization isn't deterministic, can you please elaborate on this?","ts":"1481631431.000370"},{"type":"message","user":"U0ZJZBJLF","text":"<@U0ZR63HLK>  What do you mean?","ts":"1481631457.000371"},{"type":"message","user":"U0ZR63HLK","text":"(1) requires a lookup on all the MSPs, (2) requires a lookup to a specific MSP","ts":"1481631503.000372"},{"type":"message","user":"U0PB67X4K","text":"well <@U0XPR4NP4> knows more than me, but as generally speaking the protobuf spec makes no guarantees about serialization (e.g. in terms of order of fields, etc)","ts":"1481631517.000373"},{"type":"message","user":"U0ZJZBJLF","text":"But if I have a message definition\nmessage X {\nA a = 1;\nB b = 2;\n... \n}\nIf it is the same order across different implementations, it should be deterministic right?","ts":"1481631574.000374"},{"type":"message","user":"U0PB67X4K","text":"especially across languages.  in practice it turns out that all protobuf libraries implemented by Google actually have the same serialization but it's just not a guarantee","ts":"1481631583.000375"},{"type":"message","user":"U0PB67X4K","text":"<http:\/\/stackoverflow.com\/questions\/31208725\/is-protocol-buffer-serialization-output-fully-deterministic>","attachments":[{"title":"Is protocol buffer serialization output fully deterministic?","title_link":"http:\/\/stackoverflow.com\/questions\/31208725\/is-protocol-buffer-serialization-output-fully-deterministic","text":"Given a protocol buffers schema and some data, is the protocol buffers serialization deterministic across libraries and languages?Basically, am I guaranteed that the same data will always seriali...","fallback":"Is protocol buffer serialization output fully deterministic?","thumb_url":"https:\/\/cdn.sstatic.net\/Sites\/stackoverflow\/img\/apple-touch-icon@2.png?v=73d79a89bded","from_url":"http:\/\/stackoverflow.com\/questions\/31208725\/is-protocol-buffer-serialization-output-fully-deterministic","thumb_width":316,"thumb_height":316,"service_icon":"https:\/\/cdn.sstatic.net\/Sites\/stackoverflow\/img\/favicon.ico?v=4f32ecc8f43d","service_name":"stackoverflow.com","id":1}],"ts":"1481631644.000376"},{"type":"message","user":"U0ZJZBJLF","text":"<@U0ZR63HLK>  - Yeah I know but you don't need to think of that in terms of \"goals\" of (1) and (2),  we just need the interface implemented. We take care of the rest","ts":"1481631648.000378"},{"type":"message","user":"U0PB67X4K","text":"<@U0ZR63HLK> - I think you need a to be able to scope to \"chain\" for (2) and \"all chains\" for (1)","ts":"1481631683.000379"},{"type":"message","user":"U0PB67X4K","text":"but basically yes","ts":"1481631690.000380"},{"type":"message","user":"U0PB67X4K","text":"MSP for a chain or all MSPs for all chains to which a peer belongs","ts":"1481631708.000381"},{"type":"message","user":"U0ZR63HLK","text":"with the current interface, there is no way to scope but <@U0ZJZBJLF> says that it can take care of this scoping","ts":"1481631739.000382"},{"type":"message","user":"U0ZR63HLK","text":"I'm missing something here","ts":"1481631744.000383"},{"type":"message","user":"U0ZR63HLK","text":"If I need to verify a signature, I need to know against which PK","ts":"1481631763.000384"},{"type":"message","user":"U0ZJZBJLF","text":"ok wait let's go over the methods 1 by 1","ts":"1481631776.000385"},{"type":"message","user":"U0ZJZBJLF","text":"<https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/gossip\/api\/crypto.go#L27-L41>","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/gossip\/api\/crypto.go#L27-L41","text":"Read-only mirror of <https:\/\/gerrit.hyperledger.org\/r\/#\/admin\/projects\/fabric>","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/gossip\/api\/crypto.go#L27-L41","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1481631781.000386"},{"type":"message","user":"U0ZR63HLK","text":"yes","ts":"1481631790.000388"},{"type":"message","user":"U0ZR63HLK","text":"Sign is obvious","ts":"1481631801.000389"},{"type":"message","user":"U0ZJZBJLF","text":"`GetPKIidOfCert(peerIdentity PeerIdentityType) common.PKIidType` is simply grabbing the public key and hashing it, right?","ts":"1481631813.000390"},{"type":"message","user":"U0ZR63HLK","text":"It will generate a signature using the local signing identity which we assume to be unique","ts":"1481631821.000391"},{"type":"message","user":"U0ZR63HLK","text":"something like that, right","ts":"1481631831.000392"},{"type":"message","user":"U0ZJZBJLF","text":"`VerifyBlock(signedBlock SignedBlock) error` We said can be implemented using something like Verify but that is more conext-aware, right?","ts":"1481631857.000393"},{"type":"message","user":"U0ZJZBJLF","text":"`Sign(msg []byte) ([]byte, error)` is obvious? why? which MSP do you use for sign?","ts":"1481631889.000394"},{"type":"message","user":"U0ZR63HLK","text":"right, not sure yet how that should work actually. Maybe <@U0XPR4NP4> <@U0XQ35CDD> can help here","ts":"1481631895.000395"},{"type":"message","user":"U0ZR63HLK","text":"each peer has only one signing identity,","ts":"1481631912.000396"},{"type":"message","user":"U0ZJZBJLF","text":"what about `Verify(peerIdentity PeerIdentityType, signature, message []byte) error` ?","ts":"1481631959.000397"},{"type":"message","user":"U0ZR63HLK","text":"how to handle (2) there?","ts":"1481631992.000398"},{"type":"message","user":"U0ZR63HLK","text":"the process is something like this","ts":"1481632001.000399"},{"type":"message","user":"U0ZR63HLK","text":"peerIdentity is the serialized version of an identity","ts":"1481632015.000400"},{"type":"message","user":"U0ZR63HLK","text":"so first, I need to deserialize it","ts":"1481632023.000401"},{"type":"message","user":"U0ZR63HLK","text":"so question is: who can do that? which MSPManager?","ts":"1481632037.000402"},{"type":"message","user":"U0ZR63HLK","text":"we know that each channel has an MSPManager","ts":"1481632050.000403"},{"type":"message","user":"U0ZJZBJLF","text":"you only have MSP per channel?","ts":"1481632058.000404"},{"type":"message","user":"U0ZR63HLK","text":"I can scan all the MSPManagers and see who can do that","ts":"1481632061.000405"},{"type":"message","user":"U0ZR63HLK","text":"that was a semplification","ts":"1481632071.000406"},{"type":"message","user":"U0ZJZBJLF","text":"Well, why not create a mapping in the \"MSP manager\":","ts":"1481632085.000407"},{"type":"message","user":"U0ZR63HLK","text":"anyway, the scan achieves (1)","ts":"1481632091.000408"},{"type":"message","user":"U0ZR63HLK","text":"but two?","ts":"1481632092.000409"},{"type":"message","user":"U0ZJZBJLF","text":"OrgId --&gt; [] MSP","ts":"1481632097.000410"},{"type":"message","user":"U0ZJZBJLF","text":"let's call it `m`. now, you take the certificate\/identity and use the MSP in `m[peerIdentity][0]`","ts":"1481632139.000411"},{"type":"message","user":"U0ZJZBJLF","text":"because, the org participates in all the channels associated with the MSPs","ts":"1481632158.000412"},{"type":"message","user":"U0ZJZBJLF","text":"and *any* MSP of these channels can verify that identity","ts":"1481632169.000413"},{"type":"message","user":"U0ZJZBJLF","text":"if the mapping isn't found, you return error","ts":"1481632176.000414"},{"type":"message","user":"U0ZR63HLK","text":"no, it does not work like that","ts":"1481632182.000415"},{"type":"message","user":"U0ZJZBJLF","text":"was trying my best","ts":"1481632191.000416"},{"type":"message","user":"U0ZR63HLK","text":"an MSP can verify certain signatures, not everything","ts":"1481632195.000417"},{"type":"message","user":"U0ZR63HLK","text":"anyway, apart from that. At which point you want to enforce that a certain message is checked against a \" channel\" ?","ts":"1481632246.000418"},{"type":"message","user":"U0ZR63HLK","text":"meaning against the MSPManager of that channel?","ts":"1481632256.000419"},{"type":"message","user":"U0ZJZBJLF","text":"No, a message isn't checked against a channel","ts":"1481632278.000420"},{"type":"message","user":"U0ZJZBJLF","text":"we just need to know if a certain peer is in a certain org, that's it","ts":"1481632301.000421"},{"type":"message","user":"U0ZJZBJLF","text":"wait, that's out of context","ts":"1481632319.000422"},{"type":"message","user":"U0ZJZBJLF","text":"back to the interface- where is the problem?","ts":"1481632357.000423"},{"type":"message","user":"U0ZR63HLK","text":"I'm lost :disappointed:","ts":"1481632358.000424"},{"type":"message","user":"U0ZJZBJLF","text":"hangout?","ts":"1481632364.000425"},{"type":"message","user":"U0ZR63HLK","text":"yes, please","ts":"1481632368.000426"},{"type":"message","user":"U0ZJZBJLF","text":"let's re-use that last one","ts":"1481632395.000427"},{"text":"<@U0ZR63HLK|adc> has started a Google+ Hangout for this channel. <https:\/\/hangouts.google.com\/hangouts\/_\/7nz3vrknvvcsnoa5gxv5q4b4hue|Join Hangout>.","username":"hangouts","bot_id":"B0UKUAJ0Y","type":"message","subtype":"bot_message","ts":"1481632401.000428"},{"type":"message","user":"U0ZJZBJLF","text":"oh nvm","ts":"1481632407.000429"},{"type":"message","user":"U0ZJZBJLF","text":"OK so we decided that I'll list how gossip routes messages and <@U0ZR63HLK>  and other people can respond and point out holes in the concept, or say it's OK:","ts":"1481633992.000430"},{"type":"message","user":"U0ZR63HLK","text":"<@U0ZJZBJLF>, thanks","ts":"1481634391.000431"},{"type":"message","user":"U0ZJZBJLF","text":"Let's say I'm a peer `p` and I know I'm a part of channels `A`, `B`, `C` and I get a message `m` from some peer `q`.\nThat message can be signed, or not signed. \nIf it's signed, I verify it against the certificate of the peer that signed it. If the signature is invalid, I throw it away. \nNow, I (`p`) might want to send `m` to other peers, but I might also create `m` or a similar message for `m` myself.\nIf it should be signed, I sign it with my own private key and if I relay it, I don't touch the message structure. \n\nEach message has the following fields: <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/gossip\/proto\/message.proto#L29-L42> \nThe Tag specifies what peers that message can be routed to: {only to the channel and to organization, only to organization but to all channels in the org, to all orgs but in the same channel, and to all peers regardless of channels and orgs}\nThe channel specifies the channel, or it might be nil.\nnow, when a `p` selects to which peers to send `m` to it looks at the Tag, at the Channel and then selects peers according to it. \n`p` can query the MSP and obtain the following information:\n- Assuming it has the identity\/certificate of `q` it can obtain the org ID of `q` by invoking `OrgByPeerIdentity(PeerIdentityType) OrgIdentityType` from <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3179\/9\/gossip\/api\/channel.go>\n- Assuming it is in channel `C` it knows all organizations that belong to that channel from the `JoinChannel` message and\/or from the ledger's configuration blocks. \n- So, for each peer `q` that `p` knows about, it knows if that peer is in an organization that belongs to the channel, or not.\nBut how does `p` know that `q` is really a part of a channel? well - Each peer in a channel, disseminates *to all peers of the organizations of the channel* a message saying \"hey, I'm in this channel!\" and when `p` receives such a message from `q` and `q` is indeed in the org that's in the channel `C`, it believes `q` to be in the channel and it can select `q` to send the message to.","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/gossip\/proto\/message.proto#L29-L42","text":"Read-only mirror of <https:\/\/gerrit.hyperledger.org\/r\/#\/admin\/projects\/fabric>","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/gossip\/proto\/message.proto#L29-L42","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"edited":{"user":"U0ZJZBJLF","ts":"1481635085.000000"},"ts":"1481634752.000432"},{"type":"message","user":"U0ZR63HLK","text":"<@U0ZJZBJLF>, when p receives a message, is he supposed to route it only to the peer belonging to channel specified in the message?","ts":"1481635463.000436"},{"type":"message","user":"U0ULK2JPP","text":"```But how does `p` know that `q` is really a part of a channel? well - Each peer in a channel, disseminates *to all peers of the organizations of the channel* a message saying \"hey, I'm in this channel!\" and when `p` receives such a message from `q` and `q` is indeed in the org that's in the channel `C`, it believes `q` to be in the channel and it can select `q` to send the message to.```","edited":{"user":"U0ULK2JPP","ts":"1481635512.000000"},"ts":"1481635478.000437"},{"type":"message","user":"U0ULK2JPP","text":"&gt;`q` is indeed in the org that's in the channel `C`  \u2026. <@U0ZJZBJLF> how does `p` verify that ? It goes and asks the orderer ?","ts":"1481635528.000440"},{"type":"message","user":"U1HFNJB50","text":"why to ask orderer?","ts":"1481635573.000441"},{"type":"message","user":"U1BC5A0F9","text":"I would say it only needs to check that q's identity (certificate) is valid under any of the MSPs that are listed within channel C","ts":"1481635646.000442"},{"type":"message","user":"U0ULK2JPP","text":"not saying it should <@U1HFNJB50> \u2026 just trying to (remember) understand how `p` knows `q` is in the channel","ts":"1481635684.000443"},{"type":"message","user":"U0ZJZBJLF","text":"<@U0ZR63HLK> : ``` when p receives a message, is he supposed to route it only to the peer belonging to channel specified in the message? ```\nYeah, as long as the tag specifies that","edited":{"user":"U0ZJZBJLF","ts":"1481635700.000000"},"ts":"1481635685.000444"},{"type":"message","user":"U1BC5A0F9","text":"so it also depends on how you define \"a peer  is a member of channel C\". Is it the case that a peer is a member of a channel C if according to the ACLs of that channel the peer is allowed to read that channel's chain?","ts":"1481635692.000445"},{"type":"message","user":"U0ZR63HLK","text":"<@U0ZJZBJLF>, so we can assume that this message should come from a peer that belong to same channel, correct?","ts":"1481635732.000447"},{"type":"message","user":"U1HFNJB50","text":"<@U0ULK2JPP> well, orderer doesn\u2019t have such information","ts":"1481635746.000448"},{"type":"message","user":"U1HFNJB50","text":"maximum it will be able to provide you w\/ configuration block which has list of orgs","ts":"1481635775.000449"},{"type":"message","user":"U0ZJZBJLF","text":"``` I would say it only needs to check that q's identity (certificate) is valid under any of the MSPs that are listed within channel C ``` Yeah, we call the method provided by you guys for that. it receives a peer identity and returns error","ts":"1481635809.000450"},{"type":"message","user":"U1HFNJB50","text":"I think we said that genesis (configuration block) is the evidence of the peer being part of the channel as far as I remember that correctly","ts":"1481635815.000451"},{"type":"message","user":"U0ZJZBJLF","text":"``` so it also depends on how you define \"a peer  is a member of channel C\". Is it the case that a peer is a member of a channel C if according to the ACLs of that channel the peer is allowed to read that channel's chain? ```\n<@U1BC5A0F9> : In gossip, a peer is considered a member of channel C if it belongs to an org that is part of C, *and* publishes itself to the channel that it is in the channel","edited":{"user":"U0ZJZBJLF","ts":"1481635878.000000"},"ts":"1481635861.000452"},{"type":"message","user":"U1BC5A0F9","text":"ok, read access would do then in this case :slightly_smiling_face:","ts":"1481635902.000454"},{"type":"message","user":"U0ZJZBJLF","text":"I don't understand what you mean","ts":"1481635951.000455"},{"type":"message","user":"U0ZJZBJLF","text":"If the peer is a part of the organization, it can simply connect to the orderer and ask for a block for the channel right?","ts":"1481636006.000456"},{"type":"message","user":"U0ZR63HLK","text":"<@U0ZJZBJLF>, than the Sign methods need to be enhanced to passed the channel name","ts":"1481636027.000457"},{"type":"message","user":"U0ZJZBJLF","text":"no","ts":"1481636080.000458"},{"type":"message","user":"U0ZJZBJLF","text":"why?","ts":"1481636082.000459"},{"type":"message","user":"U0ZR63HLK","text":"but you agreed with what Elli just said","ts":"1481636113.000460"},{"type":"message","user":"U0ZJZBJLF","text":"I didn't understand what she said... so how can I agree?","ts":"1481636124.000461"},{"type":"message","user":"U0ZR63HLK","text":"Elli said: I would say it only needs to check that q's identity (certificate) is valid under any of the MSPs that are listed within channel C","ts":"1481636134.000462"},{"type":"message","user":"U0ZR63HLK","text":"and you said: Yeah, we call the method provided by you guys for that. it receives a peer identity and returns error","ts":"1481636147.000463"},{"type":"message","user":"U0ZJZBJLF","text":"oh I thought you referred to \"ok, read access would do then in this case\"","ts":"1481636153.000464"},{"type":"message","user":"U0ZR63HLK","text":"sorry, the conversation was deviated","edited":{"user":"U0ZR63HLK","ts":"1481636187.000000"},"ts":"1481636170.000465"},{"type":"message","user":"U0ZJZBJLF","text":"well, it checks that `q`'s identity is valid but... what does it have to do with routing?","ts":"1481636234.000467"},{"type":"message","user":"U0ZR63HLK","text":"if you enhance Sign with the channel name then I'm done","ts":"1481636235.000468"},{"type":"message","user":"U0ZJZBJLF","text":"that's exactly what I don't want to do","ts":"1481636246.000469"},{"type":"message","user":"U0ZR63HLK","text":"I know :disappointed:","ts":"1481636252.000470"},{"type":"message","user":"U0ZJZBJLF","text":":slightly_smiling_face:","ts":"1481636257.000471"},{"type":"message","user":"U0ZR63HLK","text":"hehehe","ts":"1481636261.000472"},{"type":"message","user":"U0ZJZBJLF","text":"But you understand why","ts":"1481636266.000473"},{"type":"message","user":"U0ZR63HLK","text":"let's find a solution then","ts":"1481636271.000474"},{"type":"message","user":"U0ZJZBJLF","text":"I still don't see the problem Angelo but can you at least agree that the flow that I described, is OK security-wise?","ts":"1481636294.000475"},{"type":"message","user":"U0ZR63HLK","text":"my issue is the following: I don't like a situation where a message is for channel A but is validated by the MSP of channel B","ts":"1481636297.000476","reactions":[{"name":"+1","users":["U1BC5A0F9"],"count":1}]},{"type":"message","user":"U0ZR63HLK","text":"that case looks meaningless to me","ts":"1481636305.000477"},{"type":"message","user":"U0ZJZBJLF","text":"why is that a problem? if peer `q` created the message and it's both in A and B?","ts":"1481636398.000478"},{"type":"message","user":"U0ZR63HLK","text":"but it might be that the message is not valid for channel A","edited":{"user":"U0ZR63HLK","ts":"1481636453.000000"},"ts":"1481636433.000479"},{"type":"message","user":"U0ZR63HLK","text":"do you see that we need an explicit enforcement here?","edited":{"user":"U0ZR63HLK","ts":"1481636460.000000"},"ts":"1481636444.000480"},{"type":"message","user":"U0ZR63HLK","text":"I might be wrong","ts":"1481636465.000483"},{"type":"message","user":"U0ZR63HLK","text":"I need to clarify this","ts":"1481636469.000484"},{"type":"message","user":"U0ZJZBJLF","text":"You mean that a peer *not in A* signe a message `m` and sent it to a peer `q` and said \"hey, this message is for channel A\"?","ts":"1481636489.000485"},{"type":"message","user":"U0ZR63HLK","text":"yeah, then an honest peer in A would accept it even though it should reject","ts":"1481636529.000486"},{"type":"message","user":"U11MANG9G","text":"Wait. That\u2019s very dangerous.","ts":"1481636542.000487"},{"type":"message","user":"U0ZR63HLK","text":"that's the reason I want to clarify, I might be wrong","ts":"1481636562.000488"},{"type":"message","user":"U0ZJZBJLF","text":"aha, but that's not really a problem in practice","ts":"1481636564.000489"},{"type":"message","user":"U0ZR63HLK","text":"please help me in the understanding","ts":"1481636568.000490"},{"type":"message","user":"U0ZJZBJLF","text":"But before that- look here: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2353\/>\nYou and Elli +1 this didn't you? :slightly_smiling_face:","ts":"1481636584.000491"},{"type":"message","user":"U0ZJZBJLF","text":"But maybe there was some kind of mis-understanding","ts":"1481636597.000492"},{"type":"message","user":"U11MANG9G","text":"OMG. Yacov is trying to distract me :wink:","ts":"1481636606.000493"},{"type":"message","user":"U0ZJZBJLF","text":"huh? no I'm not","ts":"1481636617.000494"},{"type":"message","user":"U0ZJZBJLF","text":"let's continue with the flow","ts":"1481636625.000495"},{"type":"message","user":"U11MANG9G","text":"Let me break down the question: How does adding a channel (name, or so) help us with the trust model.","ts":"1481636630.000496"},{"type":"message","user":"U11MANG9G","text":"[Yes, please, I\u2019ll do some code reviewing later]","ts":"1481636643.000497"},{"type":"message","user":"U0ZJZBJLF","text":"wait wait Jonathan this isn't about adding a channel","ts":"1481636647.000498"},{"type":"message","user":"U0ZJZBJLF","text":"No, that is not for reviewing!","ts":"1481636659.000499"},{"type":"message","user":"U11MANG9G","text":"","attachments":[{"fallback":"[December 13th, 2016 5:37 AM] adc: if you enhance Sign with the channel name then I'm done","ts":"1481636235.000468","author_subname":"adc","channel_id":"C2GE7GXM1","channel_name":"fabric-crypto","is_msg_unfurl":true,"text":"if you enhance Sign with the channel name then I'm done","author_name":"Angelo De Caro","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/adc","author_icon":"https:\/\/avatars.slack-edge.com\/2016-07-21\/61823221170_e0795e87fc9eb0abb221_48.jpg","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1481636235000468","is_share":true,"footer":"Posted in #fabric-crypto"}],"ts":"1481636664.000500"},{"type":"message","user":"U0ZJZBJLF","text":"I mean something entirely else","ts":"1481636667.000501"},{"type":"message","user":"U11MANG9G","text":"Go on, please.","ts":"1481636687.000502"},{"type":"message","user":"U0ZR63HLK","text":"oh yeah, I meant something else","ts":"1481636690.000503"},{"type":"message","user":"U0ZR63HLK","text":":slightly_smiling_face:","ts":"1481636694.000504"},{"type":"message","user":"U0ZJZBJLF","text":"I meant to say that this contract\/API between the MSP layer and gossip was decided long ago and changing it now is a problem","ts":"1481636695.000505"},{"type":"message","user":"U0ZJZBJLF","text":"but just for the sake of the discussion let me explain why we have no problem","ts":"1481636717.000506"},{"type":"message","user":"U0ZR63HLK","text":"great","ts":"1481636723.000507"},{"type":"message","user":"U0ZR63HLK","text":":slightly_smiling_face:","ts":"1481636724.000508"},{"type":"message","user":"U11MANG9G","text":"The `no problem` part sounds very good. But go on please.","ts":"1481636746.000509"},{"type":"message","user":"U0ZJZBJLF","text":"Currently in gossip we have 2 types of messages that are channel-scoped","ts":"1481636751.000510"},{"type":"message","user":"U0ZJZBJLF","text":"1) Block message\n2) StateInfo message- a peer says to other peers: \"I'm in channel `C` and my ledger height is `N` and signs this message","ts":"1481636782.000511"},{"type":"message","user":"U0ZJZBJLF","text":"1) Can be verified and cannot be forged, right?","ts":"1481636806.000512"},{"type":"message","user":"U0ZJZBJLF","text":"the only \"problem\" here is data leakage","ts":"1481636821.000513"},{"type":"message","user":"U0ZR63HLK","text":"the block should be verified against a specific channel anyway, right?","ts":"1481636843.000514"},{"type":"message","user":"U0ZJZBJLF","text":"yes!","ts":"1481636847.000515"},{"type":"message","user":"U0ZJZBJLF","text":"and it is!","ts":"1481636849.000516"},{"type":"message","user":"U11MANG9G","text":"Sure, go on.","ts":"1481636854.000517"},{"type":"message","user":"U11MANG9G","text":"2)...","ts":"1481636861.000518"},{"type":"message","user":"U1BC5A0F9","text":"ok, so block messages, what do they include? Is it a block delivery request?","ts":"1481636865.000519"},{"type":"message","user":"U0ZJZBJLF","text":"wait I'm not done with (1)!","ts":"1481636868.000520"},{"type":"message","user":"U0ZJZBJLF","text":"<@U1BC5A0F9>  no no, that's the block itself actually","ts":"1481636885.000521"},{"type":"message","user":"U26T99AQ4","text":"<@U13TWBRBL> <@U2Q0HP4HY> <@U1KFBBWG1> I can easily change the marshalling of an identity from ASN.1 to protobuf - is that acceptable? If so I'll have a patch up shortly","ts":"1481636926.000522"},{"type":"message","user":"U0ZJZBJLF","text":"So in (1) we still have the following problem: peer `p` is byzantine and is part of channel `C` and sends to `q` a block and `q` isn't in channel `C`","ts":"1481636974.000523"},{"type":"message","user":"U11MANG9G","text":"[@aso: hold on pls. We have another thread going on here. I\u2019m trying not to interrupt Yacov]","ts":"1481637027.000524"},{"type":"message","user":"U0ZR63HLK","text":"the honest q should reject, right?","edited":{"user":"U0ZR63HLK","ts":"1481637035.000000"},"ts":"1481637029.000525"},{"type":"message","user":"U0ZJZBJLF","text":"and it does","ts":"1481637035.000527"},{"type":"message","user":"U1BC5A0F9","text":"well a byzantine p can do anything","ts":"1481637044.000528"},{"type":"message","user":"U0ZJZBJLF","text":"in the code I do something like: \"hmm? I don't know this channel! logger.Warning(...\"","ts":"1481637055.000529"},{"type":"message","user":"U11MANG9G","text":"[@yacov, Yes, I saw it.]","ts":"1481637069.000530"},{"type":"message","user":"U0ZJZBJLF","text":"<@U1BC5A0F9>  exactly! it can upload the block to twitter","ts":"1481637069.000531"},{"type":"message","user":"U1BC5A0F9","text":"but the breach would be from p not from q; but nevertheless q should reject if it refers to channels it does nto handle","edited":{"user":"U1BC5A0F9","ts":"1481637081.000000"},"ts":"1481637071.000532"},{"type":"message","user":"U0ZR63HLK","text":"right","ts":"1481637085.000534"},{"type":"message","user":"U0ZJZBJLF","text":"yeah well we get it for free from the logic of the per-channel handling","ts":"1481637101.000535"},{"type":"message","user":"U0ZJZBJLF","text":"```\n\tif msg.IsChannelRestricted() {\n\t\tgc := g.chanState.getGossipChannelByChainID(msg.Channel)\n\t\tif gc == nil {\n\t\t\tg.logger.Warning(\"No such channel\", msg.Channel, \"discarding message\", msg)\n\t\t}\n\t\tgc.handleMessage(msg)\n\t\treturn\n\t}\n```","ts":"1481637128.000537"},{"type":"message","user":"U0ZJZBJLF","text":"<@U1BC5A0F9>  can you elaborate?","ts":"1481637150.000538"},{"type":"message","user":"U0ZJZBJLF","text":"oh yeah","ts":"1481637165.000540"},{"type":"message","user":"U0ZJZBJLF","text":"I need a return there","ts":"1481637167.000541"},{"type":"message","user":"U0ZJZBJLF","text":"I'm currently refactoring it","ts":"1481637180.000542"},{"type":"message","user":"U0ZR63HLK","text":"heheh, nice, we found a bug live :slightly_smiling_face:","ts":"1481637194.000543"},{"type":"message","user":"U0ZR63HLK","text":"I love review processing","ts":"1481637202.000544"},{"type":"message","user":"U0ZJZBJLF","text":"that's because this commit is based on a commit that is based on another commit and so on and they are all not merged","ts":"1481637225.000546"},{"type":"message","user":"U0ZR63HLK","text":":disappointed:","ts":"1481637231.000547"},{"type":"message","user":"U0ZJZBJLF","text":"so I had so many conflicts because I rebased the commits underneath","ts":"1481637240.000548"},{"type":"message","user":"U1BC5A0F9","text":":smile:","ts":"1481637241.000549"},{"type":"message","user":"U0ZJZBJLF","text":"literally the entire file was red","ts":"1481637249.000550"},{"type":"message","user":"U0ZR63HLK","text":"let's continue","ts":"1481637256.000551"},{"type":"message","user":"U1BC5A0F9","text":"is there anything further you would like me to elaborate?","ts":"1481637269.000552"},{"type":"message","user":"U0ZJZBJLF","text":"\"but the breach would be from p not from q\"","ts":"1481637367.000561"},{"type":"message","user":"U0ZR63HLK","text":"we need to continue, Let's say that q has the channel. Then q has to enforse the signature against that channel's MSP, no?","ts":"1481637529.000562"},{"type":"message","user":"U1BC5A0F9","text":"ah right meaning that if p sends a block to q corresponding to  a channel q does not have access to, it is a violation of the access policy of the channel, but it is because of byzantine p","ts":"1481637542.000563"},{"type":"message","user":"U1BC5A0F9","text":"and such breaches as you said before we cannot avoid.","ts":"1481637563.000564"},{"type":"message","user":"U1BC5A0F9","text":"Let's continue, not crucial at this point :slightly_smiling_face:","ts":"1481637577.000565"},{"type":"message","user":"U0ZR63HLK","text":"right","ts":"1481637591.000566"},{"type":"message","user":"U11MANG9G","text":"I\u2019m still waiting for (2)","ts":"1481637603.000567"},{"type":"message","user":"U0ZR63HLK","text":"but we have to ensure that the honest q will reject","ts":"1481637603.000568"},{"type":"message","user":"U0ZJZBJLF","text":"yeah so like I said","ts":"1481637616.000569"},{"type":"message","user":"U0ZJZBJLF","text":"currently it checks if it's in the channel or not","ts":"1481637624.000570"},{"type":"message","user":"U0ZJZBJLF","text":"without the `return` it just dies with a NPE panic :wink:","edited":{"user":"U0ZJZBJLF","ts":"1481637654.000000"},"ts":"1481637643.000571"},{"type":"message","user":"U0ZJZBJLF","text":"So are we OK with (1)?","ts":"1481637675.000573"},{"type":"message","user":"U0ZR63HLK","text":"no","ts":"1481637683.000574"},{"type":"message","user":"U0ZJZBJLF","text":"why?","ts":"1481637687.000575"},{"type":"message","user":"U0ZR63HLK","text":"the signature should be validated against the MSP of that specific channel if q belongs to it","edited":{"user":"U0ZR63HLK","ts":"1481637721.000000"},"ts":"1481637711.000576"},{"type":"message","user":"U1BC5A0F9","text":"Wait, q is the recipient correct?","ts":"1481637725.000578"},{"type":"message","user":"U0ZR63HLK","text":"yes","ts":"1481637738.000579"},{"type":"message","user":"U0ZJZBJLF","text":"but <@U0ZR63HLK>  that's not true","ts":"1481637760.000580"},{"type":"message","user":"U1BC5A0F9","text":"so that call would return false if the peer is not part of the channel g.chanState.getGossipChannelByChainID(msg.Channel)","ts":"1481637761.000581"},{"type":"message","user":"U0ZJZBJLF","text":"the validation of a block message isn't like that","ts":"1481637769.000582"},{"type":"message","user":"U0ZJZBJLF","text":"it doesn't go though that, it goes through the VerifyBlock","ts":"1481637778.000583"},{"type":"message","user":"U1BC5A0F9","text":"that would do validation of blocks based on orderer signatures","ts":"1481637792.000584"},{"type":"message","user":"U0ZR63HLK","text":"correct","ts":"1481637794.000585"},{"type":"message","user":"U0ZJZBJLF","text":"yeah","ts":"1481637798.000586"},{"type":"message","user":"U0ZJZBJLF","text":"exactly","ts":"1481637800.000587"},{"type":"message","user":"U0ZR63HLK","text":"by it is by channel","ts":"1481637803.000588"},{"type":"message","user":"U0ZR63HLK","text":"all the channels have the same orderers","ts":"1481637815.000589"},{"type":"message","user":"U1BC5A0F9","text":"orderers are the same for all channels i guess..","ts":"1481637816.000590"},{"type":"message","user":"U0ZR63HLK","text":"right","ts":"1481637817.000591"},{"type":"message","user":"U0ZR63HLK","text":"okay","ts":"1481637818.000592"},{"type":"message","user":"U0ZR63HLK","text":"1 is fine :slightly_smiling_face:","ts":"1481637825.000593"},{"type":"message","user":"U0ZR63HLK","text":"thanks","ts":"1481637827.000594"},{"type":"message","user":"U0ZJZBJLF","text":"ok <@U11MANG9G>  (2)","ts":"1481637835.000595"},{"type":"message","user":"U0ZJZBJLF","text":"**drum rolls*","ts":"1481637842.000596"},{"type":"message","user":"U11MANG9G","text":"Alright, (2) it is! Thanks.","ts":"1481637842.000597"},{"type":"message","user":"U0ZR63HLK","text":"heheheheh","ts":"1481637851.000598"},{"type":"message","user":"U11MANG9G","text":":woo:","ts":"1481637852.000599"},{"type":"message","user":"U1BC5A0F9","text":":smile:","ts":"1481637857.000600"},{"type":"message","user":"U0ZJZBJLF","text":"So a StateInfo Message is just a peer saying that he is in a channel","ts":"1481637909.000601"},{"type":"message","user":"U0ZJZBJLF","text":"and it has the following fields:","ts":"1481637917.000602"},{"type":"message","user":"U0ZJZBJLF","text":"<https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/gossip\/proto\/message.proto#L85-L90>","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/gossip\/proto\/message.proto#L85-L90","text":"Read-only mirror of <https:\/\/gerrit.hyperledger.org\/r\/#\/admin\/projects\/fabric>","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/gossip\/proto\/message.proto#L85-L90","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1481637937.000603"},{"type":"message","user":"U0ZJZBJLF","text":"But actually it's encapsulated with a GossipMessage, that's where the Channel and Tag are, understood so far?","ts":"1481637999.000605"},{"type":"message","user":"U1BC5A0F9","text":"That would be  'bytes metadata' ?","edited":{"user":"U1BC5A0F9","ts":"1481638019.000000"},"ts":"1481638011.000606"},{"type":"message","user":"U0ZR63HLK","text":"(btw, line 54 should be GossipHello hello = 8; and not 87 as it is now)","ts":"1481638023.000608"},{"type":"message","user":"U0ZJZBJLF","text":"what would be?","ts":"1481638028.000609"},{"type":"message","user":"U0ZR63HLK","text":"yes, got it so far","ts":"1481638044.000610"},{"type":"message","user":"U0ZJZBJLF","text":"<@U0ZR63HLK>  yeah I already put that change in a PR","ts":"1481638046.000611"},{"type":"message","user":"U0ZR63HLK","text":"great","ts":"1481638061.000612"},{"type":"message","user":"U1BC5A0F9","text":"the list of channels a peer is in","ts":"1481638067.000613"},{"type":"message","user":"U0ZJZBJLF","text":"no","ts":"1481638075.000614"},{"type":"message","user":"U0ZJZBJLF","text":"metadata is actually a serialization of something that contains the peer ledger's height","ts":"1481638097.000615"},{"type":"message","user":"U1BC5A0F9","text":"ah ok ok","ts":"1481638107.000616"},{"type":"message","user":"U1BC5A0F9","text":"StateInfo is included in a gossip message that includes the channel id this state info corresponds to; did i get that correctly?","edited":{"user":"U1BC5A0F9","ts":"1481638140.000000"},"ts":"1481638129.000617"},{"type":"message","user":"U0ZJZBJLF","text":"the channel's ID is in the GossipMessage, and the StateInfo is actually a `oneof` field in the gossipMessage","ts":"1481638158.000619","reactions":[{"name":"white_check_mark","users":["U1BC5A0F9"],"count":1}]},{"type":"message","user":"U0ZJZBJLF","text":"So as I said earlier- the StateInfo is signed by each peer and is disseminated to all orgs of a channel","ts":"1481638238.000620"},{"type":"message","user":"U1BC5A0F9","text":"So, there q checks if the received message corresponds to a channel it follows, and ignores the message if it refers to a channel it does not concern it.","ts":"1481638247.000621"},{"type":"message","user":"U1BC5A0F9","text":"Is it the StateINfo that is signed, or the gossip message that is ssigned?","ts":"1481638277.000622"},{"type":"message","user":"U0ZJZBJLF","text":"No","ts":"1481638290.000624"},{"type":"message","user":"U0ZJZBJLF","text":"That's not how it goes <@U1BC5A0F9>","ts":"1481638297.000626"},{"type":"message","user":"U0ZJZBJLF","text":"The StateInfo is disseminated to all peers in the organizations that are in the channel","ts":"1481638325.000628"},{"type":"message","user":"U1BC5A0F9","text":"But there is a privacy breach there no?","ts":"1481638340.000629"},{"type":"message","user":"U1BC5A0F9","text":"ah ok","ts":"1481638348.000630"},{"type":"message","user":"U0ZJZBJLF","text":"You mean- if I'm a peer `p` and I now know of the ChainID of a channel I'm not part of","ts":"1481638359.000631"},{"type":"message","user":"U1BC5A0F9","text":"it is announced within the peers belonging to the same organization.","ts":"1481638366.000632"},{"type":"message","user":"U0ZJZBJLF","text":"Yeah but as I said- now if I'm a peer `p` I can now know all channels of my organization","ts":"1481638390.000633"},{"type":"message","user":"U1BC5A0F9","text":"sorry, say Channel ID instead of Chain ID","ts":"1481638401.000634"},{"type":"message","user":"U1BC5A0F9","text":"ok","ts":"1481638411.000635"},{"type":"message","user":"U0ZJZBJLF","text":"why?","ts":"1481638416.000636"},{"type":"message","user":"U1BC5A0F9","text":"fine, you say q receive this stateInfo from p; what comes next?","ts":"1481638454.000637"},{"type":"message","user":"U0ZJZBJLF","text":"next it may or may not disseminate this further","ts":"1481638468.000638"},{"type":"message","user":"U0ZJZBJLF","text":"to peers in the channel","ts":"1481638473.000639"},{"type":"message","user":"U0ZJZBJLF","text":"BTW to your earlier question- the inner struct is signed","ts":"1481638485.000640"},{"type":"message","user":"U0ZJZBJLF","text":"not the entire GossipMessage","ts":"1481638489.000641"},{"type":"message","user":"U0ZJZBJLF","text":"let me just check that","ts":"1481638502.000642"},{"type":"message","user":"U0ZR63HLK","text":"really???","ts":"1481638510.000643"},{"type":"message","user":"U0ZJZBJLF","text":"yeah","ts":"1481638528.000644"},{"type":"message","user":"U0ZJZBJLF","text":"hmm yep","ts":"1481638549.000645"},{"type":"message","user":"U0ZR63HLK","text":"why not the entire message?","ts":"1481638565.000646"},{"type":"message","user":"U0ZJZBJLF","text":"no reason actually.","ts":"1481638606.000647"},{"type":"message","user":"U0ZJZBJLF","text":"I'll brb","ts":"1481638615.000648"},{"type":"message","user":"U0ZJZBJLF","text":"But in the meantime","ts":"1481638618.000649"},{"type":"message","user":"U0ZJZBJLF","text":"why is it dangerous?","ts":"1481638622.000650"},{"type":"message","user":"U0ZR63HLK","text":"I will have to check","ts":"1481638702.000651"},{"type":"message","user":"U0ZR63HLK","text":"let's progress on (2), please","ts":"1481638707.000652"},{"type":"message","user":"U1BC5A0F9","text":"Hm a first thought is that one would be able to replay it using another channel id to the front... Not sure this is bad, but the more malleable we allow the information on a single message to be usually the more power we give to a potential attacker to chcange things...","ts":"1481638713.000653"},{"type":"message","user":"U1BC5A0F9","text":"But not a clear attack from my side. Need to understand better the goal of this message, whether it can be replayed, and if this would cause problems...","ts":"1481638743.000654"},{"type":"message","user":"U0ZR63HLK","text":"<@U0ZJZBJLF>, what happened?","ts":"1481639101.000655"},{"type":"message","user":"U1HFNJB50","text":"he is in meeting","ts":"1481639137.000656"},{"type":"message","user":"U1BC5A0F9","text":":slightly_smiling_face:","ts":"1481639228.000657"},{"type":"message","user":"U0ZR63HLK","text":"okay :slightly_smiling_face:","ts":"1481639235.000658"},{"user":"U3DB4L15G","text":"<@U3DB4L15G|svergara> has joined the channel","type":"message","subtype":"channel_join","ts":"1481639876.000659"},{"type":"message","user":"U0ZJZBJLF","text":"back","ts":"1481639927.000660"},{"type":"message","user":"U0ZJZBJLF","text":"Well that's the thing","ts":"1481639974.000661"},{"type":"message","user":"U0ZJZBJLF","text":"If you have a GossipMessage `M` and inside a message `m` that is signed, what can you really do? you can only change the tag and the channel, that's it","ts":"1481640015.000662"},{"type":"message","user":"U0ZJZBJLF","text":"what does it give you?","ts":"1481640024.000663"},{"type":"message","user":"U0ZJZBJLF","text":"But I agree with the general approach and will strongly consider signing over the entire GossipMessage, <@U1HFNJB50>  what do you think?","ts":"1481640067.000664"},{"type":"message","user":"U1HFNJB50","text":"I think that signature on `m` is enough, but yeah I agree that we might consider to sign over all GossipMessage","ts":"1481640251.000665"},{"type":"message","user":"U0ZJZBJLF","text":"<@U0ZR63HLK>  <@U1BC5A0F9>  you want to continue?","ts":"1481640387.000666"},{"type":"message","user":"U1BC5A0F9","text":"sure","ts":"1481640398.000667"},{"type":"message","user":"U0ZJZBJLF","text":"So the problem was:  a peer `p`  *not in A* signed a message `m` and sent it to a peer `q` and said \"hey, this message is for channel A\", right?","edited":{"user":"U0ZJZBJLF","ts":"1481640479.000000"},"ts":"1481640468.000668"},{"type":"message","user":"U0ZJZBJLF","text":"And you don't want to iterate over all MSP instances and find the right one","ts":"1481640496.000670"},{"type":"message","user":"U1BC5A0F9","text":"Ok, so at first stage, q cannot tell if p is a member of that channel if q is not part of the channel","ts":"1481640523.000671"},{"type":"message","user":"U0ZJZBJLF","text":"it can","ts":"1481640542.000672"},{"type":"message","user":"U1BC5A0F9","text":"how?","ts":"1481640549.000673"},{"type":"message","user":"U0ZJZBJLF","text":"I outlined it in the long message above: \n<https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1481634752000432>","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1481634752000432","fallback":"[December 13th, 2016 5:12 AM] yacovm: Let's say I'm a peer `p` and I know I'm a part of channels `A`, `B`, `C` and I get a message `m` from some peer `q`.\nThat message can be signed, or not signed. \nIf it's signed, I verify it against the certificate of the peer that signed it. If the signature is invalid, I throw it away. \nNow, I (`p`) might want to send `m` to other peers, but I might also create `m` or a similar message for `m` myself.\nIf it should be signed, I sign it with my own private key and if I relay it, I don't touch the message structure. \n\nEach message has the following fields: <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/gossip\/proto\/message.proto#L29-L42> \nThe Tag specifies what peers that message can be routed to: {only to the channel and to organization, only to organization but to all channels in the org, to all orgs but in the same channel, and to all peers regardless of channels and orgs}\nThe channel specifies the channel, or it might be nil.\nnow, when a `p` selects to which peers to send `m` to it looks at the Tag, at the Channel and then selects peers according to it. \n`p` can query the MSP and obtain the following information:\n- Assuming it has the identity\/certificate of `q` it can obtain the org ID of `q` by invoking `OrgByPeerIdentity(PeerIdentityType) OrgIdentityType` from <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3179\/9\/gossip\/api\/channel.go>\n- Assuming it is in channel `C` it knows all organizations that belong to that channel from the `JoinChannel` message and\/or from the ledger's configuration blocks. \n- So, for each peer `q` that `p` knows about, it knows if that peer is in an organization that belongs to the channel, or not.\nBut how does `p` know that `q` is really a part of a channel? well - Each peer in a channel, disseminates *to all peers of the organizations of the channel* a message saying \"hey, I'm in this channel!\" and when `p` receives such a message from `q` and `q` is indeed in the org that's in the channel `C`, it believes `q` to be in the channel and it can select `q` to send the message to.","ts":"1481634752.000432","author_subname":"yacovm","channel_id":"C2GE7GXM1","channel_name":"fabric-crypto","is_msg_unfurl":true,"text":"Let's say I'm a peer `p` and I know I'm a part of channels `A`, `B`, `C` and I get a message `m` from some peer `q`.\nThat message can be signed, or not signed. \nIf it's signed, I verify it against the certificate of the peer that signed it. If the signature is invalid, I throw it away. \nNow, I (`p`) might want to send `m` to other peers, but I might also create `m` or a similar message for `m` myself.\nIf it should be signed, I sign it with my own private key and if I relay it, I don't touch the message structure. \n\nEach message has the following fields: <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/gossip\/proto\/message.proto#L29-L42> \nThe Tag specifies what peers that message can be routed to: {only to the channel and to organization, only to organization but to all channels in the org, to all orgs but in the same channel, and to all peers regardless of channels and orgs}\nThe channel specifies the channel, or it might be nil.\nnow, when a `p` selects to which peers to send `m` to it looks at the Tag, at the Channel and then selects peers according to it. \n`p` can query the MSP and obtain the following information:\n- Assuming it has the identity\/certificate of `q` it can obtain the org ID of `q` by invoking `OrgByPeerIdentity(PeerIdentityType) OrgIdentityType` from <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3179\/9\/gossip\/api\/channel.go>\n- Assuming it is in channel `C` it knows all organizations that belong to that channel from the `JoinChannel` message and\/or from the ledger's configuration blocks. \n- So, for each peer `q` that `p` knows about, it knows if that peer is in an organization that belongs to the channel, or not.\nBut how does `p` know that `q` is really a part of a channel? well - Each peer in a channel, disseminates *to all peers of the organizations of the channel* a message saying \"hey, I'm in this channel!\" and when `p` receives such a message from `q` and `q` is indeed in the org that's in the channel `C`, it believes `q` to be in the channel and it can select `q` to send the message to.","author_name":"Yacov Manevich","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/yacovm","author_icon":"https:\/\/avatars.slack-edge.com\/2016-09-30\/85916865123_74ecb5d18535acea44aa_48.png","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-crypto"}],"ts":"1481640581.000674"},{"type":"message","user":"U0ZJZBJLF","text":"If you don't understand something just say I'll try to explain again","ts":"1481640616.000676"},{"type":"message","user":"U1BC5A0F9","text":"&gt; If it's signed, I verify it against the certificate of the peer that signed it. If the signature is invalid, I throw it away.","ts":"1481640634.000677"},{"type":"message","user":"U1BC5A0F9","text":"So for you to verify the signature, you need to be equipped with the related MSP that would parse the certificate and know what signature verification algo to use.","ts":"1481640664.000678"},{"type":"message","user":"U1BC5A0F9","text":"Plus you would still need to check against a list of CAs that you coonsider trusted, and that may change depending on the channel you are referring to.","ts":"1481640689.000679"},{"type":"message","user":"U0ZJZBJLF","text":"How do you quote? with &gt; ?","ts":"1481640712.000680"},{"type":"message","user":"U1BC5A0F9","text":"right","ts":"1481640725.000681"},{"type":"message","user":"U1BC5A0F9","text":"with \"&gt;\"","ts":"1481640729.000682"},{"type":"message","user":"U0ZJZBJLF","text":"So what's the problem with iterating over all MSPs?","ts":"1481640764.000683"},{"type":"message","user":"U0ZJZBJLF","text":"wait","ts":"1481640792.000684"},{"type":"message","user":"U0ZR63HLK","text":"that's not an issue.","ts":"1481640802.000685"},{"type":"message","user":"U0ZJZBJLF","text":"&gt; and that may change depending on the channel you are referring to.\nWhy?","ts":"1481640803.000686"},{"type":"message","user":"U0ZR63HLK","text":"I'm just saying that if p gets a message for a certain channel","edited":{"user":"U0ZR63HLK","ts":"1481640903.000000"},"ts":"1481640816.000687"},{"type":"message","user":"U0ZR63HLK","text":"p should verify it against the MSP of that channel","edited":{"user":"U0ZR63HLK","ts":"1481640909.000000"},"ts":"1481640823.000688","reactions":[{"name":"+1","users":["U1BC5A0F9"],"count":1}]},{"type":"message","user":"U0ZR63HLK","text":"that's it","ts":"1481640825.000689"},{"type":"message","user":"U0ZJZBJLF","text":"but don't you agree that if that message is signed by `q` then you could in theory validate it against *multiple* MSPs - if all of these MSPs belong to channels that have the root CA of that cert?","edited":{"user":"U0ZJZBJLF","ts":"1481640905.000000"},"ts":"1481640872.000690"},{"type":"message","user":"U0ZR63HLK","text":"we have to think in terms of channels and their MSPs","ts":"1481640934.000694"},{"type":"message","user":"U0ZR63HLK","text":"only that counts","ts":"1481640941.000695"},{"type":"message","user":"U1BC5A0F9","text":"So, take the following example","ts":"1481640970.000696"},{"type":"message","user":"U1BC5A0F9","text":"peer A and peer B are part of channel 1, and not part of channel 2","ts":"1481640997.000697"},{"type":"message","user":"U0ZJZBJLF","text":"ok","ts":"1481641010.000698"},{"type":"message","user":"U1BC5A0F9","text":"however peer A is malicious \/ byzantine and constructs a signed stateInfo aiming for channel 2 that it sends to peer B","ts":"1481641021.000699"},{"type":"message","user":"U1BC5A0F9","text":"So peer B who has not the info of whether peer A is member of the channel 2 (cause it does not have the MSPs desc of that channel) cannot assess if peer A is indeed a member of that channel..","ts":"1481641061.000700"},{"type":"message","user":"U1BC5A0F9","text":"Now you mentioned before that if peer A and B are part of the same organization then B may be implicitly know if the organizaiton both peers participates in that channel and have the local MSP of peer B assess validity of peer A's certificate.","edited":{"user":"U1BC5A0F9","ts":"1481641154.000000"},"ts":"1481641118.000701"},{"type":"message","user":"U1BC5A0F9","text":"But even if so, the latter would be a hack...","ts":"1481641167.000703"},{"type":"message","user":"U0ZJZBJLF","text":"the former you mean?","ts":"1481641178.000704"},{"type":"message","user":"U0ZJZBJLF","text":"oh, the resolving","ts":"1481641200.000705"},{"type":"message","user":"U1BC5A0F9","text":"I would say that messages should be followed with some channel id-s and maybe you have wildcards for you to include essentially more than on echannel","ts":"1481641206.000706"},{"type":"message","user":"U1BC5A0F9","text":"the resolving part yes","ts":"1481641214.000707"},{"type":"message","user":"U0ZJZBJLF","text":"wait, trying to understand the attack","ts":"1481641232.000708"},{"type":"message","user":"U0ZJZBJLF","text":"I don't get it","ts":"1481641250.000709"},{"type":"message","user":"U1BC5A0F9","text":"there is no attack, some limitation rather of validating a message","ts":"1481641260.000710"},{"type":"message","user":"U0ZJZBJLF","text":"you're basically saying- peer B tells peer A \"Hey I'm in channel 2\" although he's not?","ts":"1481641270.000711"},{"type":"message","user":"U1BC5A0F9","text":"so if you have signatures of messages this is for some one to be able to validate it","ts":"1481641277.000712"},{"type":"message","user":"U0ZJZBJLF","text":"what's the point?","ts":"1481641279.000713"},{"type":"message","user":"U1BC5A0F9","text":"if one cannot validate it, the message should be discarded no?","ts":"1481641290.000714"},{"type":"message","user":"U0ZJZBJLF","text":"yeah, but the whole point of the discussion here is that adc wants to extend the Sign method with a channel","ts":"1481641317.000715"},{"type":"message","user":"U1BC5A0F9","text":"unless it aims for you to relay the message","ts":"1481641325.000716"},{"type":"message","user":"U0ZJZBJLF","text":"and I have messages that do not have any channel in them","ts":"1481641328.000717"},{"type":"message","user":"U1BC5A0F9","text":"for others to assess the signature","ts":"1481641330.000718"},{"type":"message","user":"U0ZR63HLK","text":"I can also check against all the channels but then what it means to have a message for channel A that is validated by the MSP of channel B","ts":"1481641405.000719"},{"type":"message","user":"U0ZR63HLK","text":"this is the question","ts":"1481641409.000720"},{"type":"message","user":"U0ZJZBJLF","text":"yes","ts":"1481641443.000721"},{"type":"message","user":"U0ZJZBJLF","text":"but that's what I'm saying","ts":"1481641446.000722"},{"type":"message","user":"U0ZJZBJLF","text":"there is *no way* you can validate a message from channel B","ts":"1481641468.000723"},{"type":"message","user":"U0ZJZBJLF","text":"and you should not have been able to","ts":"1481641476.000724"},{"type":"message","user":"U0ZR63HLK","text":"but the channel field is there to tell the code that, no?","ts":"1481641502.000725"},{"type":"message","user":"U0ZJZBJLF","text":"the channel field is only for channel-restricted messages","ts":"1481641517.000726"},{"type":"message","user":"U0ZJZBJLF","text":"what do I do with messages that have no channel? like AliveMessages, and certificates?","edited":{"user":"U0ZJZBJLF","ts":"1481641546.000000"},"ts":"1481641528.000727"},{"type":"message","user":"U0ZR63HLK","text":"ah, good point","ts":"1481641546.000729"},{"type":"message","user":"U0ZJZBJLF","text":"....","ts":"1481641552.000730"},{"type":"message","user":"U0ZR63HLK","text":"so, we agree that for channel-restricted messages we have to enforce the check I'm saying","ts":"1481641572.000731"},{"type":"message","user":"U0ZJZBJLF","text":"no","ts":"1481641576.000732"},{"type":"message","user":"U0ZJZBJLF","text":"we don't","ts":"1481641578.000733"},{"type":"message","user":"U0ZR63HLK","text":"let's analyze now the case of an AliveMessage","ts":"1481641582.000734"},{"type":"message","user":"U0ZJZBJLF","text":"no","ts":"1481641585.000735"},{"type":"message","user":"U0ZR63HLK","text":"why not?","ts":"1481641585.000736"},{"type":"message","user":"U0ZR63HLK","text":":disappointed:","ts":"1481641591.000737"},{"type":"message","user":"U0ZJZBJLF","text":"because of the following:","ts":"1481641608.000738"},{"type":"message","user":"U0ZJZBJLF","text":"MSP instances simply resemble \"domains\" of CAs. \nIn MSP1 you can have CA1, CA2, CA3\nand in MSP2 you can maybe have CA3, CA4, right?\nNow you get a message `m`.\nHow is it possible that you can verify this message using MSP_i despite the fact that the *correct* CA for that message isn't in MSP_i ?","ts":"1481641694.000739"},{"type":"message","user":"U0ZR63HLK","text":"for channel-restricted messages, they carry a single channel, no?","ts":"1481641745.000740"},{"type":"message","user":"U0ZR63HLK","text":"if true, than it makes sense to check against that specific channel","ts":"1481641765.000741"},{"type":"message","user":"U0ZR63HLK","text":"if this is not the case","ts":"1481641769.000742"},{"type":"message","user":"U0ZR63HLK","text":"then we have to understand what to do","ts":"1481641777.000743"},{"type":"message","user":"U1BC5A0F9","text":"it has to be avalid cert w.r.t. the MSPs listed in the read-set of the channel the message refers to.","ts":"1481641879.000744"},{"type":"message","user":"U1BC5A0F9","text":"any would do; but there is a possibility of adding this mspid to the certificate itself","edited":{"user":"U1BC5A0F9","ts":"1481641903.000000"},"ts":"1481641889.000745"},{"type":"message","user":"U1BC5A0F9","text":"a discussion we had with <@U26T99AQ4> a few weeks ago..","ts":"1481641918.000747"},{"type":"message","user":"U0ZJZBJLF","text":"<@U1BC5A0F9> , the deal here is simple- <@U0ZR63HLK>  claims that there is a danger in which you might have a false-positive verification","edited":{"user":"U0ZJZBJLF","ts":"1481642363.000000"},"ts":"1481642095.000748"},{"type":"message","user":"U0ZJZBJLF","text":"Do you agree that if you *can't have* a false-positive verification then we're \"safe\"?","ts":"1481642110.000749"},{"type":"message","user":"U0ZJZBJLF","text":"and you guys can simply iterate over all MSPs?","ts":"1481642118.000750"},{"type":"message","user":"U0ZR63HLK","text":"why the false-positive are not possible?","ts":"1481642188.000751"},{"type":"message","user":"U0ZJZBJLF","text":"wait, before that- do you agree that if it's not possible, we're ok?","ts":"1481642313.000752"},{"type":"message","user":"U0ZR63HLK","text":"yes, but I want a formal proof for that","ts":"1481642491.000754"},{"type":"message","user":"U0ZJZBJLF","text":"in latex?","ts":"1481642534.000755"},{"type":"message","user":"U0ZR63HLK","text":"yes, please. hehehehe :slightly_smiling_face:","ts":"1481642540.000756"},{"type":"message","user":"U0ZR63HLK","text":"please, go ahead","ts":"1481642550.000757"},{"type":"message","user":"U1BC5A0F9","text":":smile:","ts":"1481642553.000758"},{"type":"message","user":"U1BC5A0F9","text":"So, thinking of the alternatives","ts":"1481642634.000759"},{"type":"message","user":"U0ZJZBJLF","text":"ok I'll go ahead","ts":"1481642643.000760"},{"type":"message","user":"U1BC5A0F9","text":"how easy it is to add a channel id in the gossip messages?","ts":"1481642647.000761"},{"type":"message","user":"U1BC5A0F9","text":"easy\/difficutl","ts":"1481642657.000762"},{"type":"message","user":"U0ZJZBJLF","text":"we already have channel ids...","ts":"1481642659.000763"},{"type":"message","user":"U0ZJZBJLF","text":"that's not the point","ts":"1481642665.000764"},{"type":"message","user":"U0ZJZBJLF","text":"the point is that Angelo wants to add a channel param both to Sign and to Verify","ts":"1481642679.000765"},{"type":"message","user":"U1BC5A0F9","text":"ah the sign message","ts":"1481642683.000766"},{"type":"message","user":"U0ZJZBJLF","text":"and this doesn't make sense","ts":"1481642686.000767"},{"type":"message","user":"U1BC5A0F9","text":"sorry, yes; so sign and verify would still need to leverage some MSP implementation to do the signature verification","ts":"1481642745.000768"},{"type":"message","user":"U0ZR63HLK","text":"I don't want to add to Sign","ts":"1481642781.000769"},{"type":"message","user":"U1BC5A0F9","text":"cause this e.g., includes verification of the signer identity","ts":"1481642785.000770"},{"type":"message","user":"U1BC5A0F9","text":"that is channel specific ... i am a bit confused i have to say .. :disappointed:","ts":"1481642817.000771"},{"type":"message","user":"U1BC5A0F9","text":"where do you authenticat ethe signer?","ts":"1481642831.000772"},{"type":"message","user":"U0ZR63HLK","text":"shall we have an hangout, please","ts":"1481642855.000773"},{"type":"message","user":"U0ZR63HLK","text":"we have to come to a decision","ts":"1481642859.000774"},{"type":"message","user":"U1BC5A0F9","text":"you receive a message that has a creator of a message, a signature and the message","ts":"1481642862.000775"},{"type":"message","user":"U1BC5A0F9","text":"sure","ts":"1481642874.000776"},{"type":"message","user":"U0ZJZBJLF","text":"sure","ts":"1481642900.000777"},{"text":"<@U0ZR63HLK|adc> has started a Google+ Hangout for this channel. <https:\/\/hangouts.google.com\/hangouts\/_\/wvunwgaufbhavickn47ih6voume|Join Hangout>.","username":"hangouts","bot_id":"B0UKUAJ0Y","type":"message","subtype":"bot_message","ts":"1481642917.000778"},{"type":"message","user":"U0ZJZBJLF","text":"so, if `p` is in org `A` and `q` is in org  `B` and they're both in channel `1` and `q` is also in channel `2`","edited":{"user":"U0ZJZBJLF","ts":"1481645758.000000"},"ts":"1481645750.000779"},{"type":"message","user":"U0ZJZBJLF","text":"and then `p` is malicious and it sends a message signed by itself to `q` with the channel `2`","ts":"1481645803.000781"},{"type":"message","user":"U0ZJZBJLF","text":"if I invoke your cool per-channel method: `Verify(msg, sig, cert, channel_2)` it'll return an error, right? <@U0ZR63HLK> , <@U1BC5A0F9>","edited":{"user":"U0ZJZBJLF","ts":"1481645862.000000"},"ts":"1481645837.000782"},{"type":"message","user":"U1BC5A0F9","text":"correct","ts":"1481645869.000784"},{"type":"message","user":"U0ZJZBJLF","text":"Could you please open a JIRA issue for that? :slightly_smiling_face:","ts":"1481645901.000785"},{"type":"message","user":"U0ZJZBJLF","text":"to document, and stuff","ts":"1481645907.000786"},{"type":"message","user":"U0ZJZBJLF","text":"so other people could also read","ts":"1481645928.000787"},{"type":"message","user":"U0ZJZBJLF","text":"and say if they're for or against","ts":"1481645935.000788"},{"type":"message","user":"U0ZJZBJLF","text":"and don't forget that writing on slack is like writing on sand","ts":"1481645946.000789"},{"type":"message","user":"U0ZR63HLK","text":"cool per-channel method?? hehehehehhe","ts":"1481646171.000790"},{"type":"message","user":"U0ZJZBJLF","text":"So can you?","ts":"1481646235.000791"},{"type":"message","user":"U1BC5A0F9","text":"sure","ts":"1481646242.000792"},{"type":"message","user":"U0ZJZBJLF","text":"thanks","ts":"1481646246.000793"},{"type":"message","user":"U0ZJZBJLF","text":"So, I  don't want to open this discussion again, but just for the sake of readers\/ <@U11MANG9G>  - about (2) (`StateInfo` message) - that's a message that a peer tells other peers about its existence in a channel. \nSo basically, the only thing you can do, is lie and tell other peers in different channels that you're in a certain channel, but only 1 of the conditions hold:\n- You're in an org that's in that channel and then it's \"safe\" to tell other peers about that because you could have went to the ordering service yourself and asked for blocks.\n- You're not in an org that's in that channel, and in that case- no peer of the channel would speak to you in that \"channel context\" because I have gossip-side filtering of that","ts":"1481646764.000794"},{"type":"message","user":"U11MANG9G","text":"Thank you <@U0ZJZBJLF>. BTW: I have no problem opening that discussion, or another. I think it\u2019s good to talk about these actually, rather than making assumptions that later on might prove wrong, or out of sync with others.","ts":"1481646939.000795"},{"type":"message","user":"U11MANG9G","text":"I think you are asking good questions, and it helps to frame many of these threads...","ts":"1481646993.000796","reactions":[{"name":"+1","users":["U1BC5A0F9"],"count":1}]},{"type":"message","user":"U2Q0HP4HY","text":"Is it feasible in the same chain that different peers could be signing and hashing with different algorithms and strengths and SDKs need to support that ?  I don't think from what I've seen a single Peer would expect proposals that support multiple algorithms and hashing","edited":{"user":"U2Q0HP4HY","ts":"1481679468.000000"},"ts":"1481679049.000797"},{"type":"message","user":"U0ULK2JPP","text":"<@U0ZR63HLK> not sure if you are the right person to ask\u2026 I see fabric\/accesscontrol . Couple of things (1)some  files in there (I saw api.go) do not have standard license header and (2) my vote would be for `fabric\/acl` instead of `fabric\/accesscontrol` :slightly_smiling_face:","edited":{"user":"U0ULK2JPP","ts":"1481680498.000000"},"ts":"1481679977.000799"},{"type":"message","user":"U0ULK2JPP","text":"also I see import statements such as `\"<http:\/\/github.com\/hyperledger\/fabric\/core\/crypto\/attributes|github.com\/hyperledger\/fabric\/core\/crypto\/attributes>\u201d` \u2026 is this cross import into `core\/crypto` ok ? or is this WIP ?","ts":"1481680249.000802"},{"type":"message","user":"U0KN2SSKE","text":"shouldn\u2019t core\/crypto be gone by now?","ts":"1481691771.000804"},{"type":"message","user":"U0ZR63HLK","text":"<@U0ULK2JPP> that package is a working in progress. I will submit a change-set to add the header and rename the package. Actually, that stuff is for chaincode, should it go under fabric\/chaincode or something like this?","ts":"1481700570.000805"},{"type":"message","user":"U0ZR63HLK","text":"<@U0KN2SSKE> core\/crypto contains the bccsp, do you want to move it to fabric\/ or fabric\/core?","edited":{"user":"U0ZR63HLK","ts":"1481724510.000000"},"ts":"1481700597.000806"},{"type":"message","user":"U0ULK2JPP","text":"<@U0ZR63HLK> thanks","ts":"1481720764.000807"},{"type":"message","user":"U0ULK2JPP","text":"will look in a bit","ts":"1481720773.000808"},{"type":"message","user":"U0KN2SSKE","text":"We know that we bootstrap orderers with info about admins, who can create chains, but we currently don\u2019t have that info on the peer bootstrap. The configuration block (genesis) comes in a bit too late.  We need to verify the signature of the sender of \u201cJoinChain\u201d, but that info is in the transaction buried in the genesis block.  We could either crack open the block and verify the signature using the info on the config tx, or we bootstrap the peer with the same info as we bootstrap the orderer.  Thoughts?  <@U1BC5A0F9> <@U0ZR63HLK> <@U0XPR4NP4> <@U0PB67X4K>","ts":"1481758694.000810"},{"type":"message","user":"U0XPR4NP4","text":"<@U0KN2SSKE> It seems like we must have a concept of peer admin.  I discussed this with <@U26T99AQ4> and since it makes sense that a peer can be started with no chains, it also makes sense that the peer must be able to authenticate its administrator from this state.  So I would argue that the peer does not need to do any signature checking on the genesis block in `JoinChan`, instead, the peer needs to authenticate that the `JoinChain` request is from his administrator.","ts":"1481758968.000811"},{"type":"message","user":"U0XPR4NP4","text":"You can imagine for instance an organization that has 10 peers and 100 chains, say with each peer participating in 20 chains (so each chain has 2 peers attached).  It would be absolutely unacceptable if another organization could instruct my peers to join chains of their choosing just by sending them the genesis block.  Just because the org agreed to participate in a chain, does not mean it agreed for all its peers to participate in it.","ts":"1481759097.000812"},{"type":"message","user":"U0XPR4NP4","text":"(And of course it is the administrator's responsibility to make sure that the signatures etc. is correct in the genesis block)","ts":"1481759198.000813"},{"type":"message","user":"U0KN2SSKE","text":"That makes sense, but I wonder if too restrictive.  Chain is application level that application should be able to create a chain as needed based on business context. Requiring an admin role would restrict that API call to a very small set.","ts":"1481759301.000814"},{"type":"message","user":"U0XPR4NP4","text":"A random and not fully thought through idea: What if each peer org started a chain of which they were the only member, and used this chain to bootstrap all their peers? This chain would maintain the admin concepts and orchestrate peer chain membership.  The peer org could roll this themselves using their own local ordering for more complete security, or could simply rely on it from the standard ordering service.","ts":"1481759724.000815"},{"type":"message","user":"U0PB67X4K","text":"I agree with <@U0XPR4NP4>  and had assume that this was going to be the case","ts":"1481789986.000816"},{"type":"message","user":"U0PB67X4K","text":"We need to have the concept of a peer admin in any case","ts":"1481790009.000817"},{"type":"message","user":"U0PB67X4K","text":"but to start with, let's just get JoinChannel API working on the peer  :wink:","ts":"1481790069.000818"},{"type":"message","user":"U0ZJZBJLF","text":"I don't understand something. I understood from Jason that in the future, you could have different orderers for different channels.\nThe JoinChannel message is signed by the ordering service, right? But how could you support then the verification of the message if the local MSP couldn't verify the message because it doesn't have the certificates (i.e: it's a new ordering service and a new channel), and the channel MSP is not yet initialized?","edited":{"user":"U0ZJZBJLF","ts":"1481791082.000000"},"ts":"1481791050.000819"},{"type":"message","user":"U0PB67X4K","text":"<@U0ZJZBJLF>  - as I understand it (or perhaps as I think it should be):\n\n1) JoinChannel is an API exposed by peers and the \"owner\/admin\" of the peer must explicitly call this API in order for their peer to join a channel   (we'll of course need some type of access control here and that was my admin comment above)\n\n2) One of the input parameters for JoinChannel API is the \"genesis block \/ latest config block\".  This of course is actually signed by the ordering service (I supposed technically one of the ordering nodes)\n\n3) Within that genesis \/ config block is all the information needed to technically verify \/ validate it as well as the information on how to connect as well as all the members\n\n4) So technically the public certificate of the orderer node which signed the config block is actually within the config block which means technically the peer would have all the info needed to validate \/ verify the config block\n\nBut this is all technical in nature - meaning it's not like it actually checks to make sure that the orderer was the orderer I expected, etc.    \n\nThe expectation is that the admin of the peer would actually inspect the config block before calling the JoinChannel API (we actually plan to provide a tool for this as well).\n\nNow of course you could say have an optional API (or an optional parameter for this API) where you could specify the public keys that you expect to be in the config (which you'd have to obtain out of band the same way you got the genesis block in the first place)","edited":{"user":"U0PB67X4K","ts":"1481794378.000000"},"ts":"1481794236.000821"},{"type":"message","user":"U0ZJZBJLF","text":"But, how can a peer verify the certificate of the ordering service that signed the config block?","ts":"1481795194.000823"},{"type":"message","user":"U0ZJZBJLF","text":"it just \"believes\" it, and doesn't verify it, no?","ts":"1481795598.000824"},{"type":"message","user":"U0PB67X4K","text":"well either you would have to go obtain the certificate(s) from the ordering service, load them into your peer and then call JoinChannel OR you inspect the block, make sure the certificates which are in the block are the ones you expect (which would be the same thing basically as obtaining them out of band) and then call JoinChannel.","ts":"1481796144.000825"},{"type":"message","user":"U0PB67X4K","text":"not sure what you mean by \"verify\"?","ts":"1481796165.000826"},{"type":"message","user":"U0ZJZBJLF","text":"verify- how do I trust the certificate of the ordering service?","ts":"1481796183.000827"},{"type":"message","user":"U0ZJZBJLF","text":"it needs to be signed by a CA, etc etc","ts":"1481796191.000828"},{"type":"message","user":"U0PB67X4K","text":"so all of that information is actually in the config block which you can inspect before calling JoinChannel.","ts":"1481796236.000829"},{"type":"message","user":"U0ZJZBJLF","text":"aha, got it.  thanks.","ts":"1481796246.000830"},{"type":"message","user":"U0PB67X4K","text":"it's an odd chicken and egg problem","ts":"1481796266.000831"},{"type":"message","user":"U0ZJZBJLF","text":"we actually have an even more serious problem , will update a JIRA issue soon and will tag you and binh","ts":"1481796282.000832"},{"type":"message","user":"U0PB67X4K","text":"I think I'll go on vacation now  :wink:","ts":"1481796302.000833"},{"type":"message","user":"U0PB67X4K","text":"just kidding - will look out for it","ts":"1481796311.000834"},{"type":"message","user":"U0ZJZBJLF","text":"<https:\/\/jira.hyperledger.org\/browse\/FAB-1394> <@U0PB67X4K>","edited":{"user":"U0ZJZBJLF","ts":"1481801893.000000"},"ts":"1481798495.000835"},{"type":"message","user":"U1BC5A0F9","text":"<@U0PB67X4K> , <@U0XPR4NP4>: by validation of the genesis config block, do you mean that the membership service related configuration correctness is checked by the peer admin correct? That is, a peer admin is able to check that the chain configuration (read policies, write policies) is as agreed with the rest of admin apps(?)","edited":{"user":"U1BC5A0F9","ts":"1481806514.000000"},"ts":"1481806506.000837"},{"type":"message","user":"U1BC5A0F9","text":"Also <@U0PB67X4K>, <@U0XPR4NP4>, <@U0KN2SSKE> we were discussing internally the reconfiguration of MSP components, and it seems to us that allowing for external configuration of reconfig policies, would kind of contradict the modularity of these components.","ts":"1481806589.000839"},{"type":"message","user":"U1BC5A0F9","text":"Plus it adds complexity at config time.","ts":"1481806645.000840"},{"type":"message","user":"U1BC5A0F9","text":"We discussed this with <@U26T99AQ4>, <@U0ZR63HLK> and we think we have a proposal for this without modifying the existing code a lot.","ts":"1481806734.000841"},{"type":"message","user":"U1BC5A0F9","text":"But, in the long term we may want to consider having a reconfig policy defined as an interface for modular components to be able to define their own policies without being forced to use the policy framework of fabric. No matter how i like it personally, it may be not covering needs of external components: since we dont know yet what policies may be in place for reconfiguration, it may be too bold to ask them all to leverage a single policy framework, no? Asking opinion from <@U0KN2SSKE>, <@U0XPR4NP4> here.","ts":"1481806911.000842"},{"type":"message","user":"U0ULK2JPP","text":"<@U1BC5A0F9> <@U0KN2SSKE> <@U0PB67X4K> <@U0XPR4NP4> just to restate the original problem <@U0KN2SSKE> started with  -   join command ACL  (\u201ccan this guy issue Join\u201d) cannot use MSP tied to a chain (there\u2019s no chain). One way to solve the problem is to specify (admin?) identity at the time of *peer* bootstrap mechanism so only those guys can issue join. After the chain is created of course the GB for that chain will control the ACLs for that chain \u2026 from <@U0PB67X4K> above `The expectation is that the admin of the peer would actually inspect the config block before calling the JoinChannel API (we actually plan to provide a tool for this as well).`...","ts":"1481811383.000843"},{"type":"message","user":"U0ULK2JPP","text":"^^^ assumes the recent comments have genesis int that question <@U0KN2SSKE> started with :slightly_smiling_face:","ts":"1481811452.000844"},{"type":"message","user":"U0KN2SSKE","text":"We are going with bootstrap config to tell peer its admins, and only these can do admin stuff on that peer.  The specification of admins is the same as that of orderer.  Each peer may have different admins \u2014 just want to get this working for now.  Rooms for improvements are in our future :slightly_smiling_face:","ts":"1481813047.000845"},{"type":"message","user":"U13TWBRBL","text":"<@U0ZR63HLK> i have a question on the implementation of software-manager bccsp in core\/crypto\/bccsp\/sw\/impl.go: for importKey, the code supports public key imports from x.509 PEM encoded, and PKIX DER encoded. I\u2019m writing the equivalent of this in node.js SDK and was wondering if it\u2019s going to be a reasonable limitation if we only support PEM encoding x.509 certs, and add others later post v1.0?","ts":"1481813499.000846"},{"type":"message","user":"U0ZR63HLK","text":"<@U13TWBRBL>, it is definitely fine","ts":"1481813550.000847","reactions":[{"name":"ok_hand","users":["U13TWBRBL"],"count":1}]},{"type":"message","user":"U1BC5A0F9","text":"<@U0KN2SSKE>, <@U0ULK2JPP> it is fine if the peer's admin is listed at peer setup time. It can also be the peer's local msp admin. adding <@U26T99AQ4>  in the discussion","ts":"1481813698.000848"},{"type":"message","user":"U26T99AQ4","text":"I think anything works as long as the peer can use the local MSP to authenticate the proposal containing the arguments to CSCC to join a chain","ts":"1481814130.000849"},{"type":"message","user":"U0ZR63HLK","text":"<@U13TWBRBL> may you have a look at this change-set for SKI generation? <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3323\/>","ts":"1481816119.000850"},{"type":"message","user":"U0ZR63HLK","text":"I have finalized how this has to be generated to be aligned with the PKCS11\/HSM world","ts":"1481816147.000851"},{"type":"message","user":"U0ZR63HLK","text":"<@U13TWBRBL>, may you have a look at this change-set: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2983\/>","ts":"1481817985.000852"},{"type":"message","user":"U0ZR63HLK","text":"It is related to ECDSA malleability.","ts":"1481817998.000853"},{"type":"message","user":"U0ZR63HLK","text":"the sdk should generate ECDSA signatures of specific form in such a way to avoid malleability attacks","ts":"1481818027.000854"},{"type":"message","user":"U13TWBRBL","text":"<@U0ZR63HLK> yeah thanks for letting me know these changesets, i\u2019ll make sure to use them as reference for the SDK side of the implementation","ts":"1481818099.000855"},{"type":"message","user":"U0ZR63HLK","text":"in particular, if you modify the sdk to have this special ECDSA signature, the fabric will not be affected and then when my change-set will be merged, everything will continue to work :slightly_smiling_face:","ts":"1481818162.000856"},{"user":"U3EHYEF89","text":"<@U3EHYEF89|d.baranov> has joined the channel","type":"message","subtype":"channel_join","ts":"1481818341.000857"},{"type":"message","user":"U13TWBRBL","text":"<@U0ZR63HLK> another question i had regarding your bccsp impl.go was that it seems to always assumes DER encoding for private keys, are you planning to support PEM encoded private keys as well?","ts":"1481823515.000858"},{"type":"message","user":"U221LL03Z","text":"@DER to PEM encoding is simple. PEM puts some block around DER.","ts":"1481835328.000859"},{"type":"message","user":"U221LL03Z","text":"or vice versa , you can get PEM to DER.","ts":"1481835368.000860"},{"type":"message","user":"U221LL03Z","text":"PEM is simply messaging structure.","ts":"1481835391.000861"},{"type":"message","user":"U0PB67X4K","text":"<@U13TWBRBL>  - just for reference, PEM is just base64 encoded DER with the BEGIN\/END lines and specified number of characters per line  :wink:","ts":"1481879948.000862"},{"type":"message","user":"U0XPR4NP4","text":"<@U26T99AQ4> <@U0ZR63HLK> <@U1BC5A0F9> You are added as reviewers on <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3355\/> but I'd call special attention to:\n\n<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3355\/2\/common\/policies\/policy.go> Interfaces defined on lines 28 and 44\n<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3355\/2\/orderer\/multichain\/manager.go> line 176\n\nIf the MSP manager provides an implementation of those interfaces on lines 28 and 44, it should be as simple as instantiating one online 176 and things should (hopefully) just work","ts":"1481897258.000863"},{"type":"message","user":"U26T99AQ4","text":"Thanks, <@U0XPR4NP4>, will have a look soon","ts":"1481897467.000864"},{"type":"message","user":"U13TWBRBL","text":"<@U221LL03Z> <@U0PB67X4K> that\u2019s right, was just wondering if the code currently written in bccsp\/sw\/impl.go, which always assumes DER encoding, would work with a PEM byte array without the caller having to convert PEM to DER (stripping out the BEGIN\/END etc.) first","ts":"1481899673.000865"},{"user":"U3F8W9K4Y","text":"<@U3F8W9K4Y|ganeshbagalur> has joined the channel","type":"message","subtype":"channel_join","ts":"1481923567.000866"},{"user":"U2WL051HN","text":"<@U2WL051HN|haifeng> has joined the channel","type":"message","subtype":"channel_join","ts":"1481986213.000867"},{"user":"U2CBG8V9U","text":"<@U2CBG8V9U|humblealex> has joined the channel","type":"message","subtype":"channel_join","ts":"1482197784.000868"},{"user":"U2UU1LKTR","text":"<@U2UU1LKTR|jonathan.tan> has joined the channel","type":"message","subtype":"channel_join","ts":"1482230975.000869"},{"user":"U35FGUMN0","text":"<@U35FGUMN0|walker> has joined the channel","type":"message","subtype":"channel_join","ts":"1482246566.000870"},{"user":"U2E87MX1A","text":"<@U2E87MX1A|jokepk> has joined the channel","type":"message","subtype":"channel_join","ts":"1482251608.000871"},{"type":"message","user":"U2E87MX1A","text":"Hello, just a fast question. Is any cryptography implemented yet on hyperledger fabric?","ts":"1482251694.000872"},{"type":"message","user":"U184J2R7S","text":"depends on the version 0.6 does have in there,. 1.0 is still being developed.  Most of the cryptographers are on vacation up until early January.","ts":"1482254379.000873"},{"type":"message","user":"U11MANG9G","text":"<@U2E87MX1A> anything specific you wanted to check\/ask? There is a lot of crypto implemented in all versions (0.5, 0.6, and in a more modular form in 1.0)...","ts":"1482275565.000874"},{"type":"message","user":"U11MANG9G","text":"We sign transactions, we encrypt, we verify... ","ts":"1482275600.000875"},{"type":"message","user":"U11MANG9G","text":"But we also now provide a set of APIs that also allow more selection in requests (e.g. selecting signature scheme, key derivation, size\/length, and also work to provide one with the ability to \"roll your own\" implementation - in v1.0 (which is indeed under development in the 'master' branch)","ts":"1482275767.000876"},{"user":"U2P0N5J5A","text":"<@U2P0N5J5A|sergefdrv> has joined the channel","type":"message","subtype":"channel_join","ts":"1482313208.000877"},{"user":"U3DHKV84C","text":"<@U3DHKV84C|yuryandreev> has joined the channel","type":"message","subtype":"channel_join","ts":"1482327906.000878"},{"user":"U1V6SJ1FF","text":"<@U1V6SJ1FF|dgorman> has joined the channel","type":"message","subtype":"channel_join","ts":"1482399460.000879"},{"type":"message","user":"U2E87MX1A","text":"<@U11MANG9G> Okay. Well, I will tell you about a part of my use case and you tell me if hyperledger provides tools to do it. I need a smart contract which data is encrypted on the blockchain and only accessible by 2 involved accounts. The hard part is that I can't store public\/private keys to encrypt data on the blockchain (cause they would be publically accessible) so I want to know if membersrvc or something like that can generate and keep safe those keys for me, and maybe only serve them to those 2 peers that can access the contract. I also have another question but isnt really related to this channel: can a go smart contract deploy another smart contract (like solidity does) ? Thanks in advance.","ts":"1482405940.000880"},{"type":"message","user":"U1TA5FDU7","text":"<@U2E87MX1A>  why you want to store your private key on the chain?  In your case, when you deploy your contract, you can specify the 2 participants' certificates in the metadata. And you design your chaincode,  only if you two provide correct signature, you can continue to perform the contract or access the data.  For 2, i cannot understand you clearly. Are you saying one contract invokes another contract? if so, it's yes.","ts":"1482456420.000881"},{"type":"message","user":"U11MANG9G","text":"Hi again <@U2E87MX1A>, so let\u2019s focus on (hyperledger, of course) fabric. So a few things:\n\nIn addition to attempting to answering your questions, may repeat\/cover also some of what <@U1TA5FDU7> has above and I will also try to give you more info about fabric, while we are at it:\n\n1. Do you need the smart contract (fabric has \u201cchaincode\u201ds that are executed within containers) to encrypt  some payload? Where are these private keys coming from?\n\n2. Membership Services (fabric v0.5, 0.6) has changed considerably and some of its logic (and more) lives in fabric-cop in v1.0. The private\/public key pairs (and signed certificates that we remember (&amp; cache) are used mostly for AUTH\/N, AUTH\/Z). So you can think about the having the public keys somewhere, for (a weak) identity.\n\n3. The Go \u201csmart contracts\u201d (aka \u201cchaincode\u201d) can invoke another (say again, Go) function that was deployed. It does not work the same way as Ethereum, for example, works - where the contracts have addresses that are reference-able. Here names (strings) are used, and indeed it is the same notion (in that case),","ts":"1482460470.000884"},{"type":"message","user":"U2E87MX1A","text":"Okay, thanks for your answer. The most important part is that indeed, I need the chaincode to encrypt some payload. I would like it to use, for example, the callers public key, so only he could decrypt it using its own private key. In fact I need the chaincode to encrypt data somehow but not with keys stored on the blockchain because then anyone could look at the raw blockchain and decrypt that data.","ts":"1482485644.000885"},{"type":"message","user":"U2E87MX1A","text":"As far as I know <@U1TA5FDU7> even though I include those certificates in the metadata, if I write on the chain, the written data is not encrypted, so with a raw look at the blockchain anyone could read it.","ts":"1482485876.000886"},{"type":"message","user":"U1TA5FDU7","text":"<@U2E87MX1A> how can they read the written data? if they don't show the signature, they don't have the privilege to access your data, even the encrypted data. These Access and Control should be coded in your Query function.  Your meaning is that everyone can access your written data, and you want to encrypt it so they cannot read it. And your problem is how to distribute your private key which is used to encrypt the data to your partner.  As I know, chaincode cannot solve this. I think this problem can be solved in a higher level. It's a key distribution problem.","ts":"1482487723.000887"},{"type":"message","user":"U2E87MX1A","text":"<@U1TA5FDU7> What i mean is, data is stored on the chain, so any user with access to a node can take a look at the block transactions and see what is stored if it is not encrypted. And what I want to know is if chaincode can access callers private and public keys so I can use them to encrypt and decrypt data.","ts":"1482490693.000888"},{"user":"U3EF4NL01","text":"<@U3EF4NL01|111ibm111> has joined the channel","type":"message","subtype":"channel_join","ts":"1482496483.000889"},{"type":"message","user":"U3EF4NL01","text":"When confidentiality is turned on, the payload of block is encrypted.\nHow can I decrypt this payload in the block?\nWhich API can i invoke?","ts":"1482496762.000890"},{"type":"message","user":"U0ULK2JPP","text":"<https:\/\/hyperledgerproject.slack.com\/archives\/general\/p1482856278002242>","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/general\/p1482856278002242","fallback":"[December 27th, 2016 8:31 AM] muralisr: <@U149660UA> to state it simply a wide variety of possibilities (but what you ask would be possible). Details on how this can be managed depends upon the application (client side and chaincode).  fabric-crypto would be the channel for details (although I expect it\u2019ll be quiet for a few more days)","ts":"1482856278.002242","author_subname":"muralisr","channel_id":"C0J02NU1E","channel_name":"general","is_msg_unfurl":true,"text":"<@U149660UA> to state it simply a wide variety of possibilities (but what you ask would be possible). Details on how this can be managed depends upon the application (client side and chaincode).  fabric-crypto would be the channel for details (although I expect it\u2019ll be quiet for a few more days)","author_name":"Srinivasan Muralidharan","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/muralisr","author_icon":"https:\/\/secure.gravatar.com\/avatar\/f2f14ee3d0f083c9afce9767faf6322d.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0000-48.png","mrkdwn_in":["text"],"id":1,"footer":"Posted in #general"}],"ts":"1482856313.000893"},{"type":"message","user":"U0ULK2JPP","text":"<@U149660UA>","ts":"1482856319.000895"},{"user":"U149660UA","inviter":"U0ULK2JPP","text":"<@U149660UA|suranap> has joined the channel","type":"message","subtype":"channel_join","ts":"1482856323.000896"},{"type":"message","user":"U0ULK2JPP","text":"<@U11MANG9G> was around a bit back\u2026 he might have some thoughts ^^^","ts":"1482856386.000897"},{"type":"message","user":"U11MANG9G","text":"Hi <@U149660UA> (Pinku)","ts":"1482856868.000898"},{"type":"message","user":"U11MANG9G","text":"[thanks Murali}","ts":"1482856908.000899"},{"type":"message","user":"U11MANG9G","text":"\"Must every trucker run their own peer, or can a single peer handle many truckers \ufeff\u2060\u2060as if\ufeff\u2060\u2060 they were independent peers?\"","ts":"1482856913.000900"},{"type":"message","user":"U11MANG9G","text":"It really depends on how you choose to implement this. To simplify, each \u201cparty\u201d or \u201ccounterparty\u201d has an EnrollmentID","ts":"1482856952.000901"},{"type":"message","user":"U11MANG9G","text":"\"Or is it all mixed in under the supplier\u2019s credentials?\u201d\nNope, it\u2019s not mixed.","ts":"1482856988.000902"},{"type":"message","user":"U11MANG9G","text":"\"Can a Fabric Peer host many Personas?\u201d\nHopefully I\u2019m not oversimplifying it - but you can have multiple EnrollmentIDs (e.g. by registering with different IDs).\nI, Jonathan, for example have more than one email, but I\u2019m the same guy. I can email you (Pinku) from both accounts and you may or may not know that these accounts are linked.","ts":"1482857131.000903"},{"type":"message","user":"U11MANG9G","text":"Again, subject to implementation details.","ts":"1482857145.000904"},{"type":"message","user":"U149660UA","text":"<@U11MANG9G>, <@U0ULK2JPP>: I\u2019ll dig around in the documentation to learn how to implement something like that. Thanks for the help!","ts":"1482866060.000905"},{"type":"message","user":"U11MANG9G","text":"<@U149660UA>: with pleasure. Hope this helped. Let us know.","ts":"1482866104.000906"},{"user":"U1SHFS1Q9","text":"<@U1SHFS1Q9|umasuthan> has joined the channel","type":"message","subtype":"channel_join","ts":"1482897977.000907"},{"type":"message","user":"U3EF4NL01","text":"When confidentiality is turned on, the payload of every block is encrypted, because some transactions are not suitable for everyone to access.\nHow can I decrypt this payload in the block? Which API can i invoke?","ts":"1482899448.000908","reactions":[{"name":"+1","users":["U2E87MX1A"],"count":1}]},{"type":"message","user":"U2E87MX1A","text":"Confidentiality encryptation is done client side? I mean, if I use node-sdk, for example, is it nodejs encrypting the data before sending it to the chain?","ts":"1482923837.000909"},{"type":"message","user":"U3EF4NL01","text":"<@U2E87MX1A>  confidentiality is turned on:     confidentialityLevel = pb.ConfidentialityLevel_CONFIDENTIAL","ts":"1482937020.000910"},{"type":"message","user":"U2T7Z63NY","text":"<@U0PB67X4K> : Hi, Please let us know how to decrypt payload data when security is enabled?","ts":"1483011002.000911"},{"type":"message","user":"U3EF4NL01","text":"Because some transactions are not suitable for everyone to access.","ts":"1483249262.000912"},{"user":"U39S0S55F","text":"<@U39S0S55F|wangjie> has joined the channel","type":"message","subtype":"channel_join","ts":"1483413908.000913"},{"type":"message","user":"U39S0S55F","text":"hello everyone , what is the meaning of the epoch ? It is the block or the time? and how  to control replay attacks?","ts":"1483413994.000914"},{"type":"message","user":"U31M2620Z","text":"hi, I found the crypto in fabric is always using same hashAlgorithm for Digest, HMAC and ECDSA, which means we have one primitive security level used by all different Symmetric and Asymmetric primitives, which is definitely a bad practice in cryptography.","ts":"1483492682.000915"},{"type":"message","user":"U31M2620Z","text":"for example the sdk spec decide to use secp256r1\/secp384r1 which by specification, should use SHA2-256 and SHA2-384, We shouldn't randomly choose a SHA3-256 for secp384r1  in this case. Same thing apply to HMAC-SHA3, which is actually a common misusing wrap when SHA3(Keccak) can be used directly for MAC without implement HMAC.","ts":"1483492982.000916"},{"type":"message","user":"U31M2620Z","text":"This also introduce troubles when we don't have such \"customizable(unstandardized)\" ECDSA implementations in other platforms like python and nodejs.","ts":"1483493247.000917"},{"type":"message","user":"U221LL03Z","text":"In Fabric 1.0 , we are taking care of these scenario by virtue of implementing BCCSP.","ts":"1483497024.000918"},{"type":"message","user":"U31M2620Z","text":"<@U221LL03Z>  thanks for pointing out, but AFAIK, CryptoSigner is still accepting a flexible digest as input, which means signing function doesn't enforce an entropy required from secp256r1 for example","ts":"1483499229.000919"},{"type":"message","user":"U31M2620Z","text":"My concern about this flexibility is it may introduce complexity and potential flaw while implementing.","ts":"1483499380.000920"},{"type":"message","user":"U31M2620Z","text":"Hope we can make it more clear in spec, that which kind of ciphersuites are valid.","ts":"1483499507.000921"},{"type":"message","user":"U31M2620Z","text":"like in fabric-cop, it showing a better model, having such suites defined: prime256v1 as `ecdsa-with-SHA256`, secp384r1 as `ecdsa-with-SHA384` and secp521r1 as `ecdsa-with-SHA512`","ts":"1483499831.000922"},{"type":"message","user":"U221LL03Z","text":"yeah. Cipher suites represent capability that we offer and we need to make sure , it is contextual. So , the clearer boundaries are , the better off we are.","ts":"1483500079.000923"},{"type":"message","user":"U31M2620Z","text":"agree","ts":"1483500181.000924"},{"type":"message","user":"U31M2620Z","text":"a quick question, are we still going to keep SHA2 family as specified in RFC5480 for ecdsa in cop?","ts":"1483500585.000925"},{"user":"U3HN4GFA9","text":"<@U3HN4GFA9|tzipih> has joined the channel","type":"message","subtype":"channel_join","ts":"1483503786.000926"},{"type":"message","user":"U221LL03Z","text":"AFAIK , we are keeping SHA2 family in Fabric 1.0.","ts":"1483534611.000927"},{"type":"message","user":"U31M2620Z","text":"thanks!","ts":"1483542546.000928"},{"type":"message","user":"U1V6SJ1FF","text":"Hi - Just looking through HFC 0.6.4 and I see that for confidentiality the message is encrypted with the chain public key, and then the chaincodeID, payload and metadata fields are encrypted with the public TKey. What\u2019s the difference between the message being encrypted with the chain public key and the payload (encrypted with public TKey)? I assumed the message would include the payload?","ts":"1483549616.000929"},{"type":"message","user":"U0PB67X4K","text":"<@U1V6SJ1FF> - it's a little tricky, but I'll try to explain:\n\n1) As you may know elliptic curve cryptography does not have a native encryption function\n\n2) So we use a hybrid encryption scheme called ECIES (in simplest terms, given KeyPairA and KeyPairB, you can derive the same encryption key from PrivateKeyA\/PublicKeyB and PublicKeyA\/PrivateKeyB  \n\n3)  So the SDK basically does this twice but in one case (txKey) the validators don't actually have either the public or private key for txKey so we use the chainKey to encrypt that and send it over  -   <https:\/\/github.com\/hyperledger\/fabric\/blob\/v0.6\/sdk\/node\/src\/hfc.ts#L1548>  adds it to an ASN structure and <https:\/\/github.com\/hyperledger\/fabric\/blob\/v0.6\/sdk\/node\/src\/hfc.ts#L1548> uses the chainKey for ECIES encryption (the SDK has the public chainKey)\n\n4) The SDK then uses the public key of txKey to again use ECIES to encrypt the various parts of the transaction message","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/blob\/v0.6\/sdk\/node\/src\/hfc.ts#L1548","text":"Read-only mirror of <https:\/\/gerrit.hyperledger.org\/r\/#\/admin\/projects\/fabric>","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/blob\/v0.6\/sdk\/node\/src\/hfc.ts#L1548","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"edited":{"user":"U0PB67X4K","ts":"1483557235.000000"},"ts":"1483557193.000930"},{"type":"message","user":"U0PB67X4K","text":"(that's the simplest version I can come up with)","ts":"1483557252.000933"},{"type":"message","user":"U0PB67X4K","text":"even more simply put we use the chainKey to encrypt the per transaction key used to encrypt the rest of the transaction data","ts":"1483557751.000934"},{"type":"message","user":"U12AHQ3NK","text":"<@U0PB67X4K>  if a client wants to decrypt the payload than he will have to store\/save tx private key for each transactions right ? I guess even peers do not keep track of the private key","edited":{"user":"U12AHQ3NK","ts":"1483593284.000000"},"ts":"1483593157.000935"},{"type":"message","user":"U1V6SJ1FF","text":"Many thanks <@U0PB67X4K>.\n\nIs it both the tx public and private keys that are sent to the peer (and encrypted with the chain public key)?\n\nWhen ECIES does the encryption, does it encrypt with both the *txPrivateKey* and the *chainPublicKey* on the client side, which allows the validator to decrypt using the *chainPrivateKey* and the *txPublicKey* (which has been sent encrypted as well)? \n\nOr does the client more simply encrypt with the *txPrivateKey* and send the *txPublicKey* to the peer for decryption?\n\nOne more question. If Company A is trading with Company B, and Company A adds a transaction to the blockchain. For Company B to see that, I\u2019m guessing Company A would need to send the transaction keys out-of-band to Company B? Depending on the previous answer this might need to be just the txPublicKey or both?","ts":"1483622803.000938"},{"type":"message","user":"U0PB67X4K","text":"Just the private key of txKey is sent  (there is also another ephemeral public key which is sent as well - on the client side it uses the public key of txKey plus the private key of the ephemeral key for its side of the ECIES encryption).   Then it sends over the txKey private key over in encrypted form (using an ephemeral private key and the chainPublicKey)\n\nRegarding the Company A \/ Company B question(s), all of the validating nodes have access to the \"stateKey\" which is used to actually encrypt the values in the state database (the key is generated, stored and encrypted  as part of the \"deploy\" transaction - so you can have different state encryption keys per chaincode but all validating nodes extract and decrypt the state encryption key from the actual deploy transaction).  I'd have to double check which key(s) are used to encrypt the \"blocks\" but I believe that's the same as well\n\n(as an aside, I am not sure I would wast much time digging into all of this given we don't do these things in V1)","ts":"1483634865.000939"},{"type":"message","user":"U0PB67X4K","text":"<@U0ZR63HLK> ^^^^   did I get this basically correct?","ts":"1483634878.000940"},{"type":"message","user":"U1V6SJ1FF","text":"Thanks <@U0PB67X4K>. Do you know if this level of message encryption changes in V1 are documented yet? I\u2019ve checked the SDK design doc and it refers to the signing keys, tCerts etc, but not encryption keys yet. Many thanks :slightly_smiling_face:","ts":"1483694646.000941"},{"type":"message","user":"U0PB67X4K","text":"that's because we don't have encryption built in to fabric V1 at this point.  as you know V1 has channels to make sure that only nodes which need \/ are allowed to get the data actually get the data (as opposed to V0.6 where all validators saw everything)\n\nwe have some ideas on how we *might* do things at the application level, but we have to get everything else working for now","ts":"1483702228.000942"},{"type":"message","user":"U0ZR63HLK","text":"<@U0PB67X4K> <@U1V6SJ1FF> that's correct","ts":"1483707223.000943"},{"type":"message","user":"U11MANG9G","text":"","attachments":[{"fallback":"[January 6th, 2017 12:47 PM] jonathanlevi: For those interested, the Hyperledger talk today at the Real World Crypto 2017 is just about to begin:\n<http:\/\/www.totalwebcasting.com\/view\/?func=VOFF&amp;id=columbia&amp;date=2017-01-04&amp;seq=1>","ts":"1483735667.002793","author_subname":"jonathanlevi","channel_id":"C0J02NU1E","channel_name":"general","is_msg_unfurl":true,"text":"For those interested, the Hyperledger talk today at the Real World Crypto 2017 is just about to begin:\n<http:\/\/www.totalwebcasting.com\/view\/?func=VOFF&amp;id=columbia&amp;date=2017-01-04&amp;seq=1>","author_name":"Jonathan Levi","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/jonathanlevi","author_icon":"https:\/\/avatars.slack-edge.com\/2016-09-06\/76710770455_2316fc867e622c8f0008_48.jpg","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/general\/p1483735667002793","is_share":true,"footer":"Posted in #general"}],"ts":"1483735730.000944"},{"type":"message","user":"U221LL03Z","text":"Thanks <@U11MANG9G> . Awesome. Saw Elli's and Co's name there. I missed that. Do you know , if we can get recording ?","ts":"1483738826.000945"},{"type":"message","user":"U1V6SJ1FF","text":"Many thanks <@U0PB67X4K> <@U0ZR63HLK> :slightly_smiling_face:","ts":"1483955819.000946"},{"type":"message","user":"U11MANG9G","text":"Hi Ash, I wish. It was only streamed \"live\"... but I believe you can ask Zurich also for the slide deck, or so.","ts":"1483970720.000947"},{"type":"message","user":"U221LL03Z","text":"Will do. Thanks.","ts":"1483971359.000948"},{"user":"U3MB5BH42","text":"<@U3MB5BH42|fbenhamo> has joined the channel","type":"message","subtype":"channel_join","ts":"1483974140.000949"},{"user":"U296A0JFN","text":"<@U296A0JFN|donna-dillenberger> has joined the channel","type":"message","subtype":"channel_join","ts":"1484164649.000950"},{"type":"message","user":"U0ZJZBJLF","text":"Who publishes CRLs \/ revokes root CAs and how is it done?","edited":{"user":"U0ZJZBJLF","ts":"1484238245.000000"},"ts":"1484238234.000951"},{"type":"message","user":"U11MANG9G","text":"Where, in general?","ts":"1484239270.000953"},{"type":"message","user":"U11MANG9G","text":"Or in COP ?","ts":"1484239279.000954"},{"type":"message","user":"U11MANG9G","text":"Also, CRLs for revoking E\/TCerts or CA certs\u2026?","ts":"1484239322.000955"},{"type":"message","user":"U0S5KF44D","text":"I had originally intended to have an option in COP to do it so that it would not have to be implemented multiple times in apps ... when COP is being used, that is","ts":"1484239616.000956"},{"type":"message","user":"U0S5KF44D","text":"CRLs for revoking all of the above ... E\/T\/CA certs","ts":"1484239668.000957"},{"type":"message","user":"U0ZJZBJLF","text":"How does that get to the ledger?","ts":"1484239753.000958"},{"type":"message","user":"U0ZJZBJLF","text":"Or doesnt it?","ts":"1484239760.000959"},{"type":"message","user":"U0S5KF44D","text":"Yes, that is what I'm talking about.   The COP server already supports revocation.  What it doesn't currently support is pushing to the ledger","ts":"1484239823.000960"},{"type":"message","user":"U0S5KF44D","text":"So if you revoke an ECert, the COP server will prevent future requests for TCerts","ts":"1484239865.000961"},{"type":"message","user":"U0S5KF44D","text":"The COP server would have the private key to sign the request to the ledger to make the config change, so it seemed to make sense to have that as a default policy to allow the owner of a root of trust to revoke any cert that has been issued by that CA (i.e. COP server)","ts":"1484239979.000962"},{"type":"message","user":"U0S5KF44D","text":"Obviously other options, but this seems like one","ts":"1484240060.000963"},{"type":"message","user":"U0ZJZBJLF","text":"So it contacts the orderer?","ts":"1484240061.000964"},{"type":"message","user":"U0S5KF44D","text":"yes","ts":"1484240068.000965"},{"type":"message","user":"U0S5KF44D","text":"Assuming the policy is a single signature by the root of trust","ts":"1484240122.000966"},{"type":"message","user":"U0ZJZBJLF","text":"And revokes per chain? In all chains?","ts":"1484240348.000967"},{"type":"message","user":"U0ZJZBJLF","text":"Is this implemwnted?","ts":"1484240354.000968"},{"type":"message","user":"U0ZJZBJLF","text":"And who triggers cop?","ts":"1484240388.000969"},{"type":"message","user":"U0S5KF44D","text":"Yes, one orderer update per channel that the COP server is a member of.","ts":"1484240488.000970"},{"type":"message","user":"U0S5KF44D","text":"It is not implemented","ts":"1484240494.000971"},{"type":"message","user":"U0S5KF44D","text":"An administrator calls \"cop client revoke\" to the cop server","ts":"1484240510.000972"},{"type":"message","user":"U0S5KF44D","text":"cop client --&gt; cop server --&gt; multiple calls to orderer","ts":"1484240534.000973"},{"type":"message","user":"U0ZJZBJLF","text":"Hmmm so the cop is per org or something right?","ts":"1484240546.000974"},{"type":"message","user":"U0S5KF44D","text":"yes","ts":"1484240560.000975"},{"type":"message","user":"U0ZJZBJLF","text":"Got it. Thanks for the answers!","ts":"1484240580.000976"},{"type":"message","user":"U0S5KF44D","text":"yw","ts":"1484240585.000977"},{"type":"message","user":"U2E87MX1A","text":"Hello guys, Im wondering if anyone knows if it is possible to get caller's user id from transaction from within the called chaincode function and how to do it?","ts":"1484643482.000978"},{"user":"U2D62LCQJ","text":"<@U2D62LCQJ|dsanchezseco> has joined the channel","type":"message","subtype":"channel_join","ts":"1484644200.000979"},{"user":"U3MBTR5KK","text":"<@U3MBTR5KK|tsluthra> has joined the channel","type":"message","subtype":"channel_join","ts":"1484668633.000980"},{"type":"message","user":"U0XPR4NP4","text":"<@U26T99AQ4> <@U0ZR63HLK> <@U1BC5A0F9> Are any of you around?","ts":"1484677448.000981"},{"type":"message","user":"U0XPR4NP4","text":"I am defining a `HashingAlgorithm` configuration parameter for the genesis block, and was wondering what reasonable parameters would be?  The most simple would obviously be a `name` which could be `sha3_shake256` or whatnot, but I didn't know if there was a more standard way of representing this, maybe something like: `family=sha3` `algorithm=shake` `width=256`","ts":"1484677618.000982"},{"type":"message","user":"U0XPR4NP4","text":"(or perhaps a `string name = 1; bytes parameters = 2;` would be more flexible?)","ts":"1484678058.000983"},{"type":"message","user":"U1BC5A0F9","text":"I would follow the JCA example and add it as a string :slightly_smiling_face:","ts":"1484678140.000984","reactions":[{"name":"+1","users":["U0PB67X4K"],"count":1}]},{"type":"message","user":"U0XPR4NP4","text":"<@U1BC5A0F9> Thanks! That sounds like a great idea to me.  I see a whole bunch of names.... but nothing jumps out to me as sha3shake256","ts":"1484678357.000985"},{"type":"message","user":"U1BC5A0F9","text":"<https:\/\/docs.oracle.com\/javase\/7\/docs\/api\/java\/security\/MessageDigest.html>","ts":"1484678366.000986"},{"type":"message","user":"U0XPR4NP4","text":"I'm looking <https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/guides\/security\/StandardNames.html>\n\nIs there a beter reference?","ts":"1484678368.000987"},{"type":"message","user":"U1BC5A0F9","text":"ah so  i would say that we either specify a type to include the hash functions we would support at the fabric, and add this as a field in the proto message, but no need to separate the hash function name from its length (e.g., SHA256)","edited":{"user":"U1BC5A0F9","ts":"1484678591.000000"},"ts":"1484678494.000988"},{"type":"message","user":"U1BC5A0F9","text":"or we can represent it as a string inside the genesis block and depending on the version we make the decision later if is among the ones we support","ts":"1484678542.000989"},{"type":"message","user":"U1BC5A0F9","text":"were you closer to the first path?","ts":"1484678556.000990"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I think so","ts":"1484678696.000992"},{"type":"message","user":"U1BC5A0F9","text":"<@U0XPR4NP4> the link you sent, only contains SHA-1, SHA-256, SHA-384, and SHA-512","ts":"1484678702.000993"},{"type":"message","user":"U0XPR4NP4","text":"Right, I'm trying to find the JCA name for sha3 shake256 with 512 bytes of output","ts":"1484678725.000994"},{"type":"message","user":"U0XPR4NP4","text":"(ie, what `util.ComputeCryptoHash` produces)","ts":"1484678734.000995"},{"type":"message","user":"U0PB67X4K","text":"don't use SHA3","ts":"1484678742.000996"},{"type":"message","user":"U0PB67X4K","text":":wink:","ts":"1484678751.000997"},{"type":"message","user":"U0XPR4NP4","text":"I think configurable is good... we are already using sha-3 (shake256 with 512 bits of output) for our hashes, that seemed easiest.","ts":"1484678803.000998"},{"type":"message","user":"U0PB67X4K","text":"I was joking  of course","ts":"1484678822.000999"},{"type":"message","user":"U0XPR4NP4","text":"Oh, and here I thought I'd heard people actually complaining about sha-3 being too slow...","ts":"1484678837.001000"},{"type":"message","user":"U1BC5A0F9","text":":slightly_smiling_face:","ts":"1484678874.001001"},{"type":"message","user":"U0PB67X4K","text":"well I'd default to SHA2-256 or SHA2-384 (but that's just me)","ts":"1484678875.001002"},{"type":"message","user":"U1BC5A0F9","text":"right, i would vote for the same","ts":"1484678898.001003"},{"type":"message","user":"U0XPR4NP4","text":"I'd think switching hasing algorithms shouldn't be too painful.... we just need  a way to specify it.  The JCA ID sounds like a good plan to me, just can't find a list that includes the sha-3 shake256 in it","ts":"1484678935.001004"},{"type":"message","user":"U1BC5A0F9","text":"sha3 is relatively (to the others) new, and people complain about it not having been tested enough, or that it is not supported by their systems.","edited":{"user":"U1BC5A0F9","ts":"1484679072.000000"},"ts":"1484678953.001005"},{"type":"message","user":"U0PB67X4K","text":"the SHA3 names analogous to above:\n\nSHA3-224, SHA3-256, SHA3-384, SHA3-512\nSHAKE128, SHAKE256","ts":"1484678956.001006"},{"type":"message","user":"U0PB67X4K","text":"(well that's how NIST lists them)","ts":"1484678978.001007"},{"type":"message","user":"U0XPR4NP4","text":"Perfect, so, to start since it's what's working, we'll just use a string, and require it to be `SHAKE256` and later, we'll add support for the other ones, possibly changing the default","ts":"1484679059.001008","reactions":[{"name":"+1","users":["U1BC5A0F9"],"count":1}]},{"type":"message","user":"U0PB67X4K","text":"glad to be of service sir  :wink:","ts":"1484679123.001010"},{"type":"message","user":"U0XPR4NP4","text":"Thanks much!","ts":"1484679147.001011"},{"type":"message","user":"U0XPR4NP4","text":"<@U0PB67X4K> You still around?","ts":"1484682475.001012"},{"type":"message","user":"U0XPR4NP4","text":"Posting it here in case anyone else would like to chime in, but the second piece of chain configuration I was about to add is regarding the `BlockDataHashingStructure`.  In particular, this could like be a flat concatenation, or a Merkle tree.  In the case of a Merkle tree, it needs a width (how many nodes per level in the tree).  Most likely for efficiency reasons, this will not be binary.\n\nSo, I was looking at how to encode this, we could:\n1. Use the proto oneof structure, explicitly enumerating which hashing schemes are supported (at the cost of third parties not being able to easily extend this field)\n2. Use a \"string name\" and \"bytes parameters\" structure, so that more arbitrary structures could be supported (at the cost of the opacity of the parameters requiring yet another unmarshaling of binary data)\n3. Only support the type of Merkle, where in order to replicate flat hashing, we would simply set the width of the Merkle tree to be equal to the maximum number of messages.","edited":{"user":"U0XPR4NP4","ts":"1484683227.000000"},"ts":"1484683049.001013"},{"type":"message","user":"U0PB67X4K","text":"I am","ts":"1484683163.001014"},{"type":"message","user":"U0PB67X4K","text":"<@U0XPR4NP4> - definitely agree that we should not have multiple \"types\" - I like point 3 above for just that reason. \n\nIn that same vein, is there really a reason to allow different hashing schemes?   (I understand having something for future proofing \/ future pluggability, but is there some specific reason you can think of to have multiple options on day 1?)","edited":{"user":"U0PB67X4K","ts":"1484683498.000000"},"ts":"1484683425.001016"},{"type":"message","user":"U0PB67X4K","text":"2) makes sense to me for extensibility","edited":{"user":"U0PB67X4K","ts":"1484683457.000000"},"ts":"1484683447.001017"},{"type":"message","user":"U0XPR4NP4","text":"I mostly wanted us to be able to flip between tunable Merkle and flat, since there seemed to be some dissent about which was better.  And, figured \"if we allow two, do we really want to allow only two\"?","edited":{"user":"U0XPR4NP4","ts":"1484683526.000000"},"ts":"1484683512.001020"},{"type":"message","user":"U0PB67X4K","text":"ah - ok - so the scheme is merkle or flat - not the actual hashing algorithm","edited":{"user":"U0PB67X4K","ts":"1484683574.000000"},"ts":"1484683563.001022"},{"type":"message","user":"U0PB67X4K","text":"makes sense to me - and I am fine if \"flat\" = Merkel with max num messages","edited":{"user":"U0PB67X4K","ts":"1484683612.000000"},"ts":"1484683604.001024"},{"type":"message","user":"U0XPR4NP4","text":"Well, I broke it into two pieces.  HashingAlgorithm, which today we only support shake256, and then scheme which I called BlockDataHashingStructure","ts":"1484683609.001025"},{"type":"message","user":"U0PB67X4K","text":"got it","ts":"1484683620.001027"},{"type":"message","user":"U0XPR4NP4","text":"Perfect, so, Merkle only, and set the width to batch size or MAX_UINT32 if you want flat","ts":"1484683645.001028","reactions":[{"name":"+1","users":["U0PB67X4K"],"count":1}]},{"type":"message","user":"U0XPR4NP4","text":"Thanks again <@U0PB67X4K> !","ts":"1484683669.001029"},{"type":"message","user":"U0PB67X4K","text":"seems to be the most expedient way to go","ts":"1484683683.001030"},{"type":"message","user":"U0XPR4NP4","text":"Was my favorite option as well","ts":"1484683701.001031"},{"user":"U1PSHT5C4","text":"<@U1PSHT5C4|daisaku> has joined the channel","type":"message","subtype":"channel_join","ts":"1484695660.001032"},{"user":"U1WL0FZ35","text":"<@U1WL0FZ35|brianeno> has joined the channel","type":"message","subtype":"channel_join","ts":"1484700553.001033"},{"type":"message","user":"U2T7Z63NY","text":"Decrypting payload - Please let us know how to decrypt payload data using certificate (Ecert\/TCert). Can anyone answer this?","ts":"1484713577.001034"},{"user":"U1SLE9PJN","text":"<@U1SLE9PJN|mohan> has joined the channel","type":"message","subtype":"channel_join","ts":"1484739686.001035"},{"user":"U0W7D64LC","text":"<@U0W7D64LC|markparz> has joined the channel","type":"message","subtype":"channel_join","ts":"1484755309.001036"},{"user":"U10LM0FFZ","text":"<@U10LM0FFZ|nickgaski> has joined the channel","type":"message","subtype":"channel_join","ts":"1484764294.001037"},{"user":"U3U0MV3PZ","text":"<@U3U0MV3PZ|kzhang> has joined the channel","type":"message","subtype":"channel_join","ts":"1484836283.001038"},{"type":"message","user":"U0XPR4NP4","text":"Tagged many as reviewers, but this may be of general interest to the channel.\n\n<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/4599\/>\n\nThe above CR defines a deterministic marshaling scheme for block headers.","ts":"1484895224.001039"},{"type":"message","user":"U2Y2V95D2","text":"Hi, we traced the source code in v0.6. It seems that there is no checking to prevent malicious node to join the peer network(to trigger INVOKE and QUERY) as long as the malicious node get the shared chain key from other nodes. Is it true? Thank you.","ts":"1484915782.001040"},{"type":"message","user":"U0PB67X4K","text":"<@U2Y2V95D2>  - if they have not obtained their enrollment material (ECert) from membership services they will not be able to invoke or query the network.  this of course assumes that you enable security","ts":"1484915972.001041"},{"type":"message","user":"U0PB67X4K","text":"all invoke and query requests must be signed by a valid certificate issued by membership services","ts":"1484916004.001042"},{"type":"message","user":"U0PB67X4K","text":"but if you are saying that they \"steal\" someone else's enrollment private\/public key pair then yes - they can join","edited":{"user":"U0PB67X4K","ts":"1484916098.000000"},"ts":"1484916086.001043"},{"type":"message","user":"U2Y2V95D2","text":"But another node does not Check the Ecert, right?","ts":"1484916127.001045"},{"type":"message","user":"U2Y2V95D2","text":"I mean Node B won't check the Ecert from Node A..... They only check the ECert's CA validity..?","ts":"1484916179.001046"},{"type":"message","user":"U2Y2V95D2","text":"Thus, if Node A (malicious) generated its own Ecert.....Node B will not know ?....","ts":"1484916227.001047"},{"type":"message","user":"U0PB67X4K","text":"well in v0.6, when Node A tries to communicate with Node B (with security enabled), Node B will actually check with membership services to see if membership services issued the certificate and actually downloads the public X509 cert for Node A   (at least as I recall)","edited":{"user":"U0PB67X4K","ts":"1484916372.000000"},"ts":"1484916358.001048"},{"type":"message","user":"U0PB67X4K","text":"so Node A would need to compromise membership services for what you mention to work","ts":"1484916393.001050"},{"type":"message","user":"U0PB67X4K","text":"<@U0ZR63HLK> <@U11MANG9G>  ^^^^","ts":"1484916714.001051"},{"type":"message","user":"U2Y2V95D2","text":"Thanks <@U0PB67X4K> . I am actually with below 2 situations in v0.6. (Moment 1) For Peer-to-Peer Connection, we have enabled TLS (with a bit code changed). When Peer A connect to Peer B (Root Validator), Peer A will check Peer B(Root Node) TLS cert. (Not sure if Peer B(Root) has checked the Peer A TLS).     (Moment 2) When node A is \"INVOKE\" and send to node B(Root), T-cert(from membershipservice) at Node A will be used to sign the transaction.       ...... can you remind me which step will we use ECert ?(Thank you). ....and ..... it seems Node A can be malicious if this is true.... Thank you.","ts":"1484917095.001052"},{"type":"message","user":"U0PB67X4K","text":"If you are using REST to perform an INVOKE against Peer A, in this case Peer A is actually acting as more of a \"virtual client \/ wallet\" as well as a validating node (assuming it's a validator and not an NVP).  Recall that with security enabled, before you can INVOKE chaincode via REST you must login.  When you login via REST what happens is that Peer A enrolls with membership services on your behalf.  When you later pass the enrollID in the SecureContext field of the REST request, Peer A uses the enrollment certificate to call membership services and receive TCerts on behalf of the client","ts":"1484917574.001053"},{"type":"message","user":"U2Y2V95D2","text":"In this case, suppose Peer A is compromised, and Peer A generates fake TCert and send to Peer B(Root Node). Peer B will verify TCert come from real membership service, right ?  (Let me try to trace then ....) Thank you.","ts":"1484919834.001054"},{"type":"message","user":"U11MANG9G","text":"Good morning. I don\u2019t understand this part *Peer A generates fake TCert*","ts":"1484919917.001055"},{"type":"message","user":"U11MANG9G","text":"(not to be picky, just making sure that we are on the same page\/scenario):","ts":"1484919955.001056"},{"type":"message","user":"U11MANG9G","text":"So PeerA requests (say a batch of) TCerts\u2026 when we \u201cknow\u201d that he\/she might have been compromised or a bad actor?","ts":"1484920000.001057"},{"type":"message","user":"U11MANG9G","text":"[because it\u2019s the MS that actually issues them TCerts, right?]","ts":"1484920038.001058"},{"type":"message","user":"U2Y2V95D2","text":"Good morning Johnathan.  For example, I set up two clusters: first clusters are truely used by banks (with memebership service A). second cluster with membership service).  ...... If I copied the TCert generated in the second cluster node rocksdb to  NODE A in first cluster ....    (it means NODE A is compromised) .... will other node in the first cluster notice this ?.....","ts":"1484920092.001059"},{"type":"message","user":"U2Y2V95D2","text":"Actually, I want to see if NODE A is compromised... and use \"some ways\" to generate T-certs, can it trick other nodes ...","ts":"1484920136.001060"},{"type":"message","user":"U2Y2V95D2","text":"(Note: second cluster use another membership service B)","ts":"1484920169.001061"},{"type":"message","user":"U11MANG9G","text":"OK, we should split this to two cases. Sorry :wink:","ts":"1484920169.001062"},{"type":"message","user":"U11MANG9G","text":"Yes, got you.","ts":"1484920175.001063"},{"type":"message","user":"U11MANG9G","text":"1. A \u201ccompromised\/rogue\u201d Membership Service server, say MS_B","ts":"1484920200.001064"},{"type":"message","user":"U11MANG9G","text":"2. A \u201ccompromised\/rogue\u201d player working with an \u201chonest\u201d Membership Service server","ts":"1484920235.001065"},{"type":"message","user":"U11MANG9G","text":"The main thing here is about the trust-model, right? That is, on basis did \u201ccluster A\u201d nodes, that work with MS_A, based their trust on (T)Certs signed\/issued by the MS of \u201ccluster B\u201d, our lovely MS_B.","ts":"1484920363.001066"},{"type":"message","user":"U2Y2V95D2","text":"yes.","ts":"1484920433.001067"},{"type":"message","user":"U11MANG9G","text":"OK, thanks for confirming.","ts":"1484920449.001068"},{"type":"message","user":"U11MANG9G","text":"So now, when you are asking *will other node in the first cluster notice this ?*","ts":"1484920462.001069"},{"type":"message","user":"U2Y2V95D2","text":"yes. (to identify malicious node in the cluster)","ts":"1484920484.001070"},{"type":"message","user":"U11MANG9G","text":"In the first place, we do verify signatures and their validity.","ts":"1484920488.001071"},{"type":"message","user":"U11MANG9G","text":"Wait, here\u2019s the catch.","ts":"1484920495.001072"},{"type":"message","user":"U11MANG9G","text":"The dry-cold-boring-has-no-feelings kinda of MS_A, does not really know what is \u201ccompromised\u201d...","ts":"1484920533.001073"},{"type":"message","user":"U11MANG9G","text":"It either \u201caccepts\u201d (or say, verifies successfully) a given signature, or not (that is \u201crejects\u201d, or fails to verify it)","ts":"1484920574.001074"},{"type":"message","user":"U11MANG9G","text":"In a way, Fabric and MS in particular, provide you with the \u201cframework\u201d for issuing certs\/validating signatures, etc.","ts":"1484920621.001075"},{"type":"message","user":"U11MANG9G","text":"Now, it is possible to set up a \u201cpolicy\u201d as to what a server should (and of course *should not*) trust.","ts":"1484920659.001076"},{"type":"message","user":"U11MANG9G","text":"If you agree with me so far\u2026.","ts":"1484920675.001077"},{"type":"message","user":"U11MANG9G","text":"Then we get back to this point:","attachments":[{"fallback":"[January 20th, 2017 5:52 AM] jonathanlevi: The main thing here is about the trust-model, right? That is, on basis did \u201ccluster A\u201d nodes, that work with MS_A, based their trust on (T)Certs signed\/issued by the MS of \u201ccluster B\u201d, our lovely MS_B.","ts":"1484920363.001066","author_subname":"jonathanlevi","channel_id":"C2GE7GXM1","channel_name":"fabric-crypto","is_msg_unfurl":true,"text":"The main thing here is about the trust-model, right? That is, on basis did \u201ccluster A\u201d nodes, that work with MS_A, based their trust on (T)Certs signed\/issued by the MS of \u201ccluster B\u201d, our lovely MS_B.","author_name":"Jonathan Levi","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/jonathanlevi","author_icon":"https:\/\/avatars.slack-edge.com\/2016-09-06\/76710770455_2316fc867e622c8f0008_48.jpg","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1484920363001066","is_share":true,"footer":"Posted in #fabric-crypto"}],"ts":"1484920692.001078"},{"type":"message","user":"U2Y2V95D2","text":"yes.... sorry, i don' understand \"set up a \u201cpolicy\u201d as to what a server should (and of course *should not*) trust.\"","ts":"1484920713.001079"},{"type":"message","user":"U2Y2V95D2","text":"and agree all the rest...","ts":"1484920731.001080"},{"type":"message","user":"U11MANG9G","text":"Oh, good you stopped me. Thanks.","ts":"1484920740.001081"},{"type":"message","user":"U11MANG9G","text":"When you have only one MS, and everybody just trusts that one\u2026 it is simple but there is less flexibility.","ts":"1484920770.001082"},{"type":"message","user":"U2Y2V95D2","text":"yep","ts":"1484920789.001083"},{"type":"message","user":"U11MANG9G","text":"That is, if we \u201cinvalidate\u201d \/ not trust any certs from that MS, we won\u2019t be able to trust anything\u2026 issued by that MS from a certain point in time, or otherwise.","edited":{"user":"U11MANG9G","ts":"1484920815.000000"},"ts":"1484920796.001084"},{"type":"message","user":"U11MANG9G","text":"When you work with more than one, there is some from of a PKI \u201chierarchy\u201d, so that anyone validating a cert, kinda \u201ctrusts\u201d signatures that are\/were issued by \u2018both\u2019 MS_A and MS_B.","ts":"1484920882.001086"},{"type":"message","user":"U11MANG9G","text":"Otherwise, you can\u2019t inter-operate. You would trust only MS_A from the get-go. Yes?","ts":"1484920906.001087"},{"type":"message","user":"U11MANG9G","text":"Now, if you never trusted MS_B\u2026..","ts":"1484920923.001088"},{"type":"message","user":"U2Y2V95D2","text":"yes..... so MS_A and MS_B have to co-operate somehow to make it happen ...","ts":"1484920987.001089"},{"type":"message","user":"U11MANG9G","text":"Right","ts":"1484920991.001090"},{"type":"message","user":"U11MANG9G","text":"Thank you. So now when you \u201csee\u201d a certificate, you validate it against the Public key of the MS_*.","ts":"1484921024.001091"},{"type":"message","user":"U2Y2V95D2","text":"yes","ts":"1484921039.001092"},{"type":"message","user":"U11MANG9G","text":"So MS_A and MS_B will issue diffferent certificates and you can check\/validate\/verify it.","ts":"1484921047.001093"},{"type":"message","user":"U11MANG9G","text":"The question in your case I believe is what to \u201crevoke\"","ts":"1484921137.001094"},{"type":"message","user":"U11MANG9G","text":"Do we \u201crevoke\u201d all of MS_B or is it just one node.","ts":"1484921161.001095"},{"type":"message","user":"U11MANG9G","text":"When it\u2019s one node, I simply revoke its ECert\u2026 and BOOM, he\/she is out.","ts":"1484921210.001096"},{"type":"message","user":"U11MANG9G","text":"(You need the ECert to obtain subsequent TCerts)","ts":"1484921231.001097"},{"type":"message","user":"U11MANG9G","text":"But if it\u2019s the entire MS_B\u2026 then we need to inform MS_A about it.","ts":"1484921262.001098"},{"type":"message","user":"U2Y2V95D2","text":"but Node will get a batch of 200 Tcert from membership service at once  ...","ts":"1484921264.001099"},{"type":"message","user":"U11MANG9G","text":"(It\u2019s customizable, but yes). I have 1..200 TCerts.","ts":"1484921289.001100"},{"type":"message","user":"U2Y2V95D2","text":"so, we need to invalidate those Tcerts in Node A","ts":"1484921290.001101"},{"type":"message","user":"U2Y2V95D2","text":"when ECert is out","ts":"1484921306.001102"},{"type":"message","user":"U11MANG9G","text":"Yes, I invalidate everything.","ts":"1484921315.001103"},{"type":"message","user":"U2Y2V95D2","text":"... and NODE B (in cluster 1) can verify it by checking the TCert ?","ts":"1484921340.001104"},{"type":"message","user":"U2Y2V95D2","text":"in the transaction ( INVOKE at node A)","ts":"1484921380.001105"},{"type":"message","user":"U11MANG9G","text":"OK, that\u2019s the \u201cpolicy\u201d bit from above. The way I implemented something similar on top of Fabric\/MS\u2026 we always check that no certificate has been revoked.","ts":"1484921418.001106"},{"type":"message","user":"U11MANG9G","text":"It comes with a price (longer set-up, can be slow for more high-frequency usages)\u2026 but sometimes (probably like in your case), you need it.","ts":"1484921467.001107"},{"type":"message","user":"U11MANG9G","text":"We revoke everything right away, keep the log of \u201cwhy\u201d and actually provide it to the \u201cmanager\u201d as something to consider with \u201cnew enrollment requests\"","ts":"1484921540.001108"},{"type":"message","user":"U2Y2V95D2","text":"so the \"policy\" means \"NODE B will verify\" is optional\/configurable ?","ts":"1484921563.001109"},{"type":"message","user":"U11MANG9G","text":"I know that there are many that use Fabric\/MS v0.6 without these checks, and it\u2019s indeed quicker.","ts":"1484921577.001110"},{"type":"message","user":"U11MANG9G","text":"Yes, it\u2019s like in your web-browser, in a way.","ts":"1484921603.001111"},{"type":"message","user":"U2Y2V95D2","text":"i see...  And in our case, we need it... because we worry that nodes got compromised ....","ts":"1484921639.001112"},{"type":"message","user":"U11MANG9G","text":"Obviously I don\u2019t have all the info, but for financial applications - I would go slow and steady.","ts":"1484921672.001113"},{"type":"message","user":"U11MANG9G","text":"Don\u2019t trust TCerts \u201cblindly\u201d. I agree.","ts":"1484921695.001114"},{"type":"message","user":"U2Y2V95D2","text":"...but how to make it work if we really need it ? .... to check the TCert at Node B?","ts":"1484921698.001115"},{"type":"message","user":"U11MANG9G","text":"So to summarize:","ts":"1484921701.001116"},{"type":"message","user":"U11MANG9G","text":"1. Each issued certificate has that \u201csignature\u201d that \u201ctells you\u201d who is the issuer","ts":"1484921734.001117"},{"type":"message","user":"U11MANG9G","text":"2. You can have your own logic on a receipt of such a cert at the \u201cmembership services layer\", and make decisions whether you\u2019d trust that.","edited":{"user":"U11MANG9G","ts":"1484925618.000000"},"ts":"1484921782.001118"},{"type":"message","user":"U11MANG9G","text":"3. You can invalidate certs and keys of a node and even a full MS \u201ccluster\"","ts":"1484921804.001119"},{"type":"message","user":"U11MANG9G","text":"4. There is \u201clogic\u201d that many add to the \u201capplication layer\u201d when it comes to \u201ctrust\u201d (what to trust, how much, for how long, etc.)","ts":"1484921863.001120"},{"type":"message","user":"U2Y2V95D2","text":"Thanks <@U11MANG9G> . I intend to make it work. What is the good way to verify TCert at Node B? Real-time connecting to MS and checking revoke status ? ...  (Sorry for bother you and garisingh for so long...you both are smart and knowledgeable...)","ts":"1484922059.001121"},{"type":"message","user":"U11MANG9G","text":"Nah, Gari is smart. I\u2019m knowledgeable. I can point you to some code sections.","ts":"1484922178.001122"},{"type":"message","user":"U11MANG9G","text":":slightly_smiling_face:","ts":"1484922239.001123"},{"type":"message","user":"U2Y2V95D2","text":"Smart and knowledgeable. Good match. we can fight crime ...:grinning:","ts":"1484922245.001124"},{"type":"message","user":"U0ZJZBJLF","text":"Jonathan even has his own bat signal","ts":"1484922262.001125","reactions":[{"name":"eyes","users":["U11MANG9G"],"count":1}]},{"type":"message","user":"U0ZJZBJLF","text":"Its well known","ts":"1484922273.001126"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZR63HLK> <@U1BC5A0F9> <@U26T99AQ4> <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/4599\/> wanted your input on this, thanks to <@U0ZR63HLK> for the existing comment, though maybe slack would be faster than gerrit to reach consensus though","ts":"1484924805.001127"},{"type":"message","user":"U0YJUECE8","text":"<@U11MANG9G> if you are not smart then I hope to be as dumb as you when I grow up  :slightly_smiling_face:","ts":"1484924896.001128","reactions":[{"name":"innocent","users":["U11MANG9G"],"count":1}]},{"type":"message","user":"U1BC5A0F9","text":"So the dataHash is shake256 on protobuf marshalled bytes correct?","ts":"1484925380.001129"},{"type":"message","user":"U11MANG9G","text":"DataHash in BlockHeader?","ts":"1484925467.001130"},{"type":"message","user":"U0ZR63HLK","text":"<@U0XPR4NP4>, thanks. I read your comment, I'm fine with ti. Then I would ensure that there is a version somewhere that can be used to bind the way   the blockheader is converted to bytes","ts":"1484925543.001131"},{"type":"message","user":"U0ZR63HLK","text":"because the way you marshal, you are implicitly assuming that the hash function has always 256 bits of about","ts":"1484925576.001132"},{"type":"message","user":"U0ZR63HLK","text":"but this might change in the future","ts":"1484925585.001133"},{"type":"message","user":"U0XPR4NP4","text":"<@U1BC5A0F9> So, the hashing algorithm gets defined in the genesis block, for now, the only supported one is shake256","ts":"1484925588.001134"},{"type":"message","user":"U0ZR63HLK","text":"right, right","ts":"1484925598.001135"},{"type":"message","user":"U0ZR63HLK","text":"actually, I found out that yesterday","ts":"1484925606.001136"},{"type":"message","user":"U0ZR63HLK","text":"and I found it pretty neat","ts":"1484925611.001137"},{"type":"message","user":"U0ZR63HLK","text":"the only thing to change is that the hash should be computed by the BCCSP","ts":"1484925624.001139"},{"type":"message","user":"U0XPR4NP4","text":"The `DataHash` will actually be computed via Merkle tree of configured width, and for flat hashing, we can just make the width `MAX_UINT32`","ts":"1484925628.001140"},{"type":"message","user":"U0ZR63HLK","text":"but that I can change easly","ts":"1484925631.001141"},{"type":"message","user":"U0XPR4NP4","text":"Perfect.","ts":"1484925642.001142"},{"type":"message","user":"U0ZR63HLK","text":"so, If one customize the hash function to be SHA2-384","ts":"1484925660.001143"},{"type":"message","user":"U1BC5A0F9","text":"<@U11MANG9G> I refer to this description: This changeset chooses the following simple scheme:\n   Concatenate the following:\n      8 bytes BigEndian encoded Number\n      PreviousHash\n      DataHash","ts":"1484925674.001144"},{"type":"message","user":"U1BC5A0F9","text":"I am guessing that DataHash is the Merkle root of the transaction tree","ts":"1484925699.001145"},{"type":"message","user":"U0XPR4NP4","text":"It is","ts":"1484925704.001146"},{"type":"message","user":"U1BC5A0F9","text":"in that block","ts":"1484925705.001147"},{"type":"message","user":"U1BC5A0F9","text":"but transactions are protobuf marshalled no?","ts":"1484925719.001148"},{"type":"message","user":"U0XPR4NP4","text":"Will have another CR to address DataHash","ts":"1484925724.001149"},{"type":"message","user":"U0XPR4NP4","text":"Ah, but the transctions are _stored_ marshaled","ts":"1484925730.001150"},{"type":"message","user":"U0XPR4NP4","text":"So they are already bytes, no need to worry about re-marshaling them.","ts":"1484925744.001151"},{"type":"message","user":"U1BC5A0F9","text":"right right","ts":"1484925786.001152"},{"type":"message","user":"U11MANG9G","text":"<@U1BC5A0F9> thanks for the context.","ts":"1484925791.001153"},{"type":"message","user":"U0XPR4NP4","text":"So, <@U0ZR63HLK> I'm quite happy _not_ to use the concatenation scheme, if ASN.1 is normal, we should do normal","ts":"1484925814.001154"},{"type":"message","user":"U0XPR4NP4","text":"We were simply using protbuf before, which is certainly wrong","ts":"1484925828.001155","reactions":[{"name":"+1","users":["U1BC5A0F9"],"count":1}]},{"type":"message","user":"U1BC5A0F9","text":"Right so no window for non-determinism there, you are saying cause it is the same tx bytes that everyone receive","ts":"1484925842.001156"},{"type":"message","user":"U0ZR63HLK","text":"yes, please. By default, ASN.1 guarantees the minimum representation","ts":"1484925843.001157"},{"type":"message","user":"U0XPR4NP4","text":"And my crypto-naive mind thought concatenation was easy","ts":"1484925844.001158"},{"type":"message","user":"U0ZR63HLK","text":"and we will be generic enough","ts":"1484925857.001159"},{"type":"message","user":"U0XPR4NP4","text":"Great, I will fix that up then","ts":"1484925864.001160"},{"type":"message","user":"U0ZR63HLK","text":"perfect :slightly_smiling_face:","ts":"1484925870.001161"},{"type":"message","user":"U0PB67X4K","text":"and you can nicely serialize Go structs to ASN1 encoding","edited":{"user":"U0PB67X4K","ts":"1484925947.000000"},"ts":"1484925935.001162"},{"type":"message","user":"U0ZR63HLK","text":"yeah :slightly_smiling_face:","ts":"1484925945.001163"},{"type":"message","user":"U1BC5A0F9","text":"But we should use ASN.1 for all the fields no? meaning also for the DataHash bytes.","ts":"1484925965.001165"},{"type":"message","user":"U0XPR4NP4","text":"Well, the `DataHash` we said is going to be computed via a configurable width Merkle tree","edited":{"user":"U0XPR4NP4","ts":"1484925995.000000"},"ts":"1484925987.001166"},{"type":"message","user":"U0XPR4NP4","text":"And since `BlockData` is nothing but repeated byte arrays, it seems like there's no need for any ASN.1 representation?","ts":"1484926023.001168"},{"type":"message","user":"U221LL03Z","text":"ASN1 seems the right way to go.","ts":"1484926128.001169"},{"type":"message","user":"U221LL03Z","text":"go ASN lib is pretty cool.","ts":"1484926145.001170"},{"type":"message","user":"U1BC5A0F9","text":"<@U0XPR4NP4>, right right. My bad :slightly_smiling_face:","ts":"1484926178.001171"},{"type":"message","user":"U0XPR4NP4","text":"Perfect, thanks, you had me doubting myself","ts":"1484926203.001172"},{"type":"message","user":"U0XPR4NP4","text":"So, my naive attempt to use `encoding\/asn1` over the block header gives me: `asn1: structure error: unknown Go type: uint64` is there a standard way of handling uint64's in asn1?","ts":"1484927513.001173"},{"type":"message","user":"U0XPR4NP4","text":"(<@U1BC5A0F9> <@U26T99AQ4> <@U0ZR63HLK> <@U0PB67X4K> <@U221LL03Z> ^)","ts":"1484927772.001174"},{"type":"message","user":"U0ZR63HLK","text":"<https:\/\/jannewmarch.gitbooks.io\/network-programming-with-go-golang-\/content\/dataserialisation\/asn1.html>","ts":"1484927886.001175"},{"type":"message","user":"U0ZR63HLK","text":"Go places real restrictions on ASN.1. For example, ASN.1 allows integers of any size, while the Go implementation will only allow upto signed 64-bit integers. On the other hand, Go distinguishes between signed and unsigned types, while ASN.1 doesn't. So for example, transmitting a value of uint64 may fail if it is too large for int64.","ts":"1484927895.001176"},{"type":"message","user":"U0ZR63HLK","text":"it is a mess :slightly_smiling_face:","edited":{"user":"U0ZR63HLK","ts":"1484927961.000000"},"ts":"1484927950.001177"},{"type":"message","user":"U0XPR4NP4","text":"Not a great pitch for asn1 but, I suppose we will have to leave a chain running for quite a while before we exhaust the 63 bits","ts":"1484929438.001179"},{"type":"message","user":"U0XPR4NP4","text":"So the suggested solution would be to declare some shadow structure, where block number is an int64, and marshal that?","ts":"1484929533.001180"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZR63HLK> ^","ts":"1484929552.001181"},{"type":"message","user":"U0ZR63HLK","text":"right, but then we have to check that the int64 is non-negative","ts":"1484929624.001182"},{"type":"message","user":"U0ZR63HLK","text":"just to be sure that nothing strange happens","ts":"1484929683.001183"},{"type":"message","user":"U0XPR4NP4","text":"Right, will test for that and panic","ts":"1484929737.001184"},{"type":"message","user":"U0PB67X4K","text":"don't panic <@U0XPR4NP4> - all will be ok  :wink:","ts":"1484929758.001185","reactions":[{"name":"pray","users":["U11MANG9G"],"count":1}]},{"type":"message","user":"U0PB67X4K","text":"haha","ts":"1484929759.001186"},{"type":"message","user":"U0XPR4NP4","text":"Got it!\n\n```\n        asn1Header := asn1Header{\n                PreviousHash: b.PreviousHash,\n                DataHash:     b.DataHash,\n        }\n        if b.Number &gt; uint64(math.MaxInt64) {\n                return []byte(\"@garisingh says don't panic!\")\n        } else {\n                asn1Header.Number = int64(b.Number)\n        }\n        result, err := asn1.Marshal(asn1Header)\n        if err != nil {\n               return []byte(\"Just ask <@U0PB67X4K>!\")\n        }\n        return result\n```","ts":"1484930110.001187"},{"type":"message","user":"U0XPR4NP4","text":"(<@U26T99AQ4> <@U0ZR63HLK> <@U1BC5A0F9> <@U0PB67X4K> pushed an update to the CR if you care to review)","ts":"1484930518.001188"},{"type":"message","user":"U0PB67X4K","text":"hehe","ts":"1484930950.001189"},{"type":"message","user":"U1BC5A0F9","text":"(\"@garisingh says don't panic!\") :smile:","ts":"1484931197.001190"},{"type":"message","user":"U0UGH3X7X","text":"hi gang,  just to confirm ... _SerializedIdentity.IdBytes_ contains the PEM encoded X509 certificate ?   that's what it says in <https:\/\/gerrit.hyperledger.org\/r\/gitweb?p=fabric.git;a=blob;f=msp\/identities.go;h=cf8ecf317311947a571a918976028bf2010e7153;hb=HEAD#l117>  but I'm paranoid","ts":"1484941718.001191"},{"type":"message","user":"U1BC5A0F9","text":"hi <@U0UGH3X7X>! this is correct, that is for the x.509  msp.","ts":"1484944267.001192","reactions":[{"name":"+1","users":["U0UGH3X7X"],"count":1}]},{"type":"message","user":"U0UGH3X7X","text":"in the same vein, what is the signature algorithm ? I saw a list in the golang `crypto` package but the names don't match what's in <http:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/guides\/security\/StandardNames.html#Signature>   and I need to use that list on the java SDK side","ts":"1484946443.001193"},{"type":"message","user":"U1BC5A0F9","text":"Signature algorithm can be RSA or ECDSA","ts":"1484948938.001194"},{"type":"message","user":"U1BC5A0F9","text":"depending on the CA's key type","ts":"1484949045.001195"},{"type":"message","user":"U0UGH3X7X","text":"<@U1BC5A0F9>, aren't you on a plane :wink: ?   are we using a default currently , maybe SHA256withECDSA ?","ts":"1484949125.001196"},{"type":"message","user":"U0UGH3X7X","text":"on the java sdk side, for verification, I need to create a Signature object with method getInstance(sig algorithm) ... trying to figure out where I can get the algorithm name","ts":"1484949257.001197"},{"type":"message","user":"U0PB67X4K","text":"SHA256withECDSA should work","ts":"1484949579.001198"},{"type":"message","user":"U0PB67X4K","text":"<@U0UGH3X7X> - I guess you are on the SDK team now?","ts":"1484949602.001199"},{"type":"message","user":"U0UGH3X7X","text":"<@U0PB67X4K>  yes,  sharon asked me to help out","ts":"1484949698.001200"},{"type":"message","user":"U0PB67X4K","text":"I knew that - but was not sure that others did  :wink:","ts":"1484949752.001201"},{"type":"message","user":"U0UGH3X7X","text":"the fewer people know,  the less work I get :grin:    anyways i'll plug in sha256withedsa and see what happens","ts":"1484949851.001202"},{"user":"U3UPDJXV2","text":"<@U3UPDJXV2|miketwenty1> has joined the channel","type":"message","subtype":"channel_join","ts":"1485039465.001203"},{"type":"message","user":"U3UPDJXV2","text":"hello","ts":"1485039469.001204"},{"type":"message","user":"U3UPDJXV2","text":"I was hoping to ask some questions about the fabric blockchain is using nonces","edited":{"user":"U3UPDJXV2","ts":"1485039581.000000"},"ts":"1485039508.001205"},{"user":"U3NKHU4F7","text":"<@U3NKHU4F7|alacambra> has joined the channel","type":"message","subtype":"channel_join","ts":"1485071604.001207"},{"user":"U3VDLN47L","text":"<@U3VDLN47L|chen.nie> has joined the channel","type":"message","subtype":"channel_join","ts":"1485218254.001208"},{"type":"message","user":"U2UU1LKTR","text":"Hi everyone , does anyone know where can I find information about encrypting and decrypting transactions\/payload? I tried setting to confidential:true and transactions are now encrypted but how do I decrypt the transaction information like payload ?","ts":"1485269646.001209"},{"user":"U1TARSPGT","text":"<@U1TARSPGT|andyb> has joined the channel","type":"message","subtype":"channel_join","ts":"1485273363.001210"},{"user":"U2JK6JCTZ","text":"<@U2JK6JCTZ|alankhlim> has joined the channel","type":"message","subtype":"channel_join","ts":"1485349828.001211"},{"type":"message","user":"U0XPR4NP4","text":"<@U13TWBRBL> <@U2Q0HP4HY> <@U0ZR63HLK> Since <#C0YPYBVJM|fabric-dev> seems a little busy, can we move the ASN.1 discussion here? \n\n&gt; I'm still trying to understand why the SDK ever needs to compute this hash","ts":"1485358583.001212"},{"type":"message","user":"U0ZR63HLK","text":"sure,","ts":"1485359925.001213"},{"type":"message","user":"U0ZR63HLK","text":"<@U0XPR4NP4>, may you join the discussion here","ts":"1485359938.001214"},{"type":"message","user":"U0XPR4NP4","text":"Yep, I'm here","ts":"1485360008.001215"},{"type":"message","user":"U0ZR63HLK","text":"so, I don't want to stress on using ASN.1","ts":"1485360189.001216"},{"type":"message","user":"U2Q0HP4HY","text":"The block header has the headerNumber","ts":"1485360194.001217"},{"type":"message","user":"U0ZR63HLK","text":"it is used for cryptographic objects","ts":"1485360201.001218"},{"type":"message","user":"U0ZR63HLK","text":"but it might be avoided in certain case","ts":"1485360209.001219"},{"type":"message","user":"U0XPR4NP4","text":"Ah, it is still encoded as protobuf, but when we compute the hash, we marshal it to ASN.1","ts":"1485360216.001220"},{"type":"message","user":"U0ZR63HLK","text":"expecially if there is a signature that authenticate everything","ts":"1485360222.001221"},{"type":"message","user":"U0XPR4NP4","text":"<@U2Q0HP4HY> You do not need to understand ASN.1 to simply read the block header","ts":"1485360229.001222"},{"type":"message","user":"U0XPR4NP4","text":"We are only encoding to ASN.1 when computing the hash","ts":"1485360236.001223"},{"type":"message","user":"U2Q0HP4HY","text":"I'm seeing a need for that some time in the future","ts":"1485360269.001224"},{"type":"message","user":"U0XPR4NP4","text":"What is the need?","ts":"1485360287.001225"},{"type":"message","user":"U2Q0HP4HY","text":"in case of an eventHub looking at blocks on a fail over we don't want to process the same block again","ts":"1485360350.001226"},{"type":"message","user":"U0XPR4NP4","text":"<@U2Q0HP4HY> I do not follow.  With only protobuf, and no ASN.1, you can read the block number from the block header.","ts":"1485360379.001227"},{"type":"message","user":"U2Q0HP4HY","text":"y","ts":"1485360433.001228"},{"type":"message","user":"U2Q0HP4HY","text":"we can unmarshal it  as regular protobuf","ts":"1485360449.001229"},{"type":"message","user":"U0XPR4NP4","text":"Yes, the block structure is protobuf","ts":"1485360495.001230"},{"type":"message","user":"U2Q0HP4HY","text":"if it's encoded it in ASN.1 then we need libaries to handle that .   That would would mean the same for any other toolkit \/languse","ts":"1485360497.001231"},{"type":"message","user":"U0XPR4NP4","text":"It is not encoded in ASN.1","ts":"1485360502.001232"},{"type":"message","user":"U2Q0HP4HY","text":"ok maybe I missed that","ts":"1485360513.001233"},{"type":"message","user":"U0XPR4NP4","text":"When we compute the _hash_ of the block header, to get the bytes to compute the hash over, we temporarily encode the header via ASN.1 to bytes deterministically.  We then compute the hash over these temporary bytes, and store the hash normally in the proto structures.","edited":{"user":"U0XPR4NP4","ts":"1485360583.000000"},"ts":"1485360565.001234"},{"type":"message","user":"U2Q0HP4HY","text":"ok so when it comes to the toolkit doing the verification so we can trust it .. does it not need to do the same ?","ts":"1485360617.001236"},{"type":"message","user":"U0XPR4NP4","text":"It depends on how you are establishing trust.  My understanding, was that the toolkit does not retain the entire blockchain, but simply queries against a peer to get ledger state.  Is that correct?","ts":"1485360669.001237"},{"type":"message","user":"U2Q0HP4HY","text":"From the eventHub  we get block events .   One block at a time .","ts":"1485360770.001238"},{"type":"message","user":"U0XPR4NP4","text":"And how do you ensure that the eventHub is sending you real blocks?","ts":"1485361503.001239"},{"type":"message","user":"U0XPR4NP4","text":"<@U2Q0HP4HY> This is my ignorance, but I'm not sure where the difference is between the peer and the SDK.  If the SDK needs the full blockchain, and needs to validate the full blockchain, then it seems to me like it is acting exactly as a peer.  So it seems like that cannot be the case to me. If you are querying the blocks from the peers, and trusting the peer to reply with the correct block requested, then I do not what computing the block header hash could be useful for.","ts":"1485361762.001240"},{"type":"message","user":"U2Q0HP4HY","text":"<@U0XPR4NP4>  Probably my ignorance.  As of the moment I only think we need verify each block we get from the event hub","ts":"1485361876.001241"},{"type":"message","user":"U0XPR4NP4","text":"What does it mean to verify a block from the SDK perspective?","ts":"1485361969.001242"},{"type":"message","user":"U2Q0HP4HY","text":"<@U0KQ9QKH6> To verify each block we get from the eventhub stream what signature  and across which bytes will we need to verify against ?","ts":"1485362134.001243"},{"type":"message","user":"U13TWBRBL","text":"<@U2Q0HP4HY> <@U0XPR4NP4> <@U0KQ9QKH6> i don\u2019t know if the SDK needs to do any verification of blocks","ts":"1485362586.001244"},{"type":"message","user":"U13TWBRBL","text":"it needs to be hooked up to a trusted event source (a trusted peer) in the first place","edited":{"user":"U13TWBRBL","ts":"1485362624.000000"},"ts":"1485362608.001245","reactions":[{"name":"+1","users":["U0XPR4NP4","U0KQ9QKH6"],"count":2}]},{"type":"message","user":"U0XPR4NP4","text":"If the SDK trusts its peer, then I don't foresee any reason why the SDK needs to recompute the block header hash","ts":"1485362643.001247"},{"type":"message","user":"U0XPR4NP4","text":"(And therefore, no ASN.1 is needed at the SDK side)","ts":"1485362652.001248"},{"type":"message","user":"U13TWBRBL","text":"if that assumption is not true, then many things start falling apart","ts":"1485362657.001249"},{"type":"message","user":"U2Q0HP4HY","text":"<@U13TWBRBL> Then why the need for verification anywhere else ?","ts":"1485362689.001250"},{"user":"U1GRJD9NC","text":"<@U1GRJD9NC|yuki.k> has joined the channel","type":"message","subtype":"channel_join","ts":"1485362922.001251"},{"type":"message","user":"U13TWBRBL","text":"<@U2Q0HP4HY> the only other place that SDK is doing verification is when it receives proposal responses from endorsers, and that check is needed because endorsers from other orgs are not to be trusted","edited":{"user":"U13TWBRBL","ts":"1485364137.000000"},"ts":"1485364106.001252","reactions":[{"name":"+1::skin-tone-2","users":["U2Q0HP4HY"],"count":1}]},{"type":"message","user":"U13TWBRBL","text":"i should say \u201c\u2026 that SDK needs to do verification ....\u201d (because node.js hasn\u2019t done that yet and as far as i know neither does Java SDK) :wink:","ts":"1485364212.001254"},{"user":"U0YP7KFGQ","text":"<@U0YP7KFGQ|gennady.laventman> has joined the channel","type":"message","subtype":"channel_join","ts":"1485364216.001255"},{"type":"message","user":"U3DHKV84C","text":"Hey guys, I want to change keys and certificate in fabric\/msp\/sampleconfig\/.\n\nSomebody generate private key (elliptical curve) for CA and different Intermediate key for peers using openssl\n\nfabric\/msp\/sampleconfig\/admincerts\/admincert.pem\nfabric\/msp\/sampleconfig\/cacerts\/cacert.pem\nfabric\/msp\/sampleconfig\/keystore\/key.pem\nfabric\/msp\/sampleconfig\/signcerts\/peer.pem","edited":{"user":"U3DHKV84C","ts":"1485365167.000000"},"ts":"1485364950.001256"},{"type":"message","user":"U221LL03Z","text":"did not get your q .","ts":"1485365139.001257"},{"type":"message","user":"U3DHKV84C","text":"I want start network with different keys for each peer","ts":"1485365196.001259"},{"type":"message","user":"U3DHKV84C","text":"now, cop isn\u2019t work with peer and peer have local msp, right?","edited":{"user":"U3DHKV84C","ts":"1485365256.000000"},"ts":"1485365244.001260"},{"user":"U1P1ZV6RF","text":"<@U1P1ZV6RF|matanyahu> has joined the channel","type":"message","subtype":"channel_join","ts":"1485371737.001262"},{"user":"U3LU3AQM8","text":"<@U3LU3AQM8|sukrit> has joined the channel","type":"message","subtype":"channel_join","ts":"1485380010.001263"},{"type":"message","user":"U13TWBRBL","text":"so continuing the discussion on <#C1K16MW77|fabric-pr-review> re: importing private keys.","ts":"1485380430.001264"},{"type":"message","user":"U10Q62R8X","text":"<@U221LL03Z> <@U13TWBRBL> current BCCSP only needs the SKI","ts":"1485380439.001265"},{"type":"message","user":"U13TWBRBL","text":"<@U10Q62R8X> says:\n\n- get private key pem file, parse\n   - if a SKI PEM header, great, how we should do it\n   - else try to import key into currernt\/default csp","ts":"1485380444.001266"},{"type":"message","user":"U10Q62R8X","text":"no need for a path","ts":"1485380474.001267"},{"type":"message","user":"U13TWBRBL","text":"but that requires the bccsp impl of getKey(ski) to know how to work with an arbitrary external key store","ts":"1485380474.001268"},{"type":"message","user":"U10Q62R8X","text":"right","ts":"1485380488.001269"},{"type":"message","user":"U13TWBRBL","text":"which I don\u2019t know how that\u2019s possible unless it\u2019s pkcs11","ts":"1485380492.001270"},{"type":"message","user":"U10Q62R8X","text":"that is part of bccsp initialization","ts":"1485380495.001271"},{"type":"message","user":"U13TWBRBL","text":"but there\u2019s no equivalent spec for software based key stores right?","ts":"1485380505.001272"},{"type":"message","user":"U221LL03Z","text":"it is file based AFAIK for SW based system.","ts":"1485380511.001273"},{"type":"message","user":"U10Q62R8X","text":"the sw bccsp initialization takes a directory location for keystore","ts":"1485380515.001274"},{"type":"message","user":"U10Q62R8X","text":"but that happens only at initialization","ts":"1485380531.001275"},{"type":"message","user":"U221LL03Z","text":"so , if you have .p12 or java keystore ,it is not going to work.","ts":"1485380541.001276"},{"type":"message","user":"U13TWBRBL","text":"it does but how to actually do the look up with the keystore given the ski, that\u2019s all implementation-specific","ts":"1485380549.001277"},{"type":"message","user":"U13TWBRBL","text":"so in the end a bccsp impl can only work with one specific keystore","ts":"1485380563.001278"},{"type":"message","user":"U10Q62R8X","text":"well.. that would mean another bccsp perhaps if you want a java keystore..","ts":"1485380565.001279"},{"type":"message","user":"U13TWBRBL","text":"in other words, the private key must exist in the bccsp\u2019s own key store","ts":"1485380578.001280"},{"type":"message","user":"U221LL03Z","text":"yes.","ts":"1485380588.001281"},{"type":"message","user":"U10Q62R8X","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/4397\/8>","ts":"1485380597.001282"},{"type":"message","user":"U10Q62R8X","text":"have a look at the testdata directory","ts":"1485380609.001283"},{"type":"message","user":"U10Q62R8X","text":"I've created a sw keystore and imported it so that the test cases had something static to run against","ts":"1485380640.001284"},{"type":"message","user":"U10Q62R8X","text":"the sw keystore (<@U0ZR63HLK> 's invention) stores keys by ks\/&lt;ski&gt;_&lt;type&gt;","ts":"1485380679.001285"},{"type":"message","user":"U10Q62R8X","text":"given an `ski []byte` it will do a directory lookup for `ks\/&lt;ski&gt;_*`","edited":{"user":"U10Q62R8X","ts":"1485380729.000000"},"ts":"1485380722.001286"},{"type":"message","user":"U13TWBRBL","text":"suppose i have java-based tool that does the CA enrollment for my app, so the private key is stored in a `keystore` file in my jvm folder","ts":"1485380747.001288"},{"type":"message","user":"U13TWBRBL","text":"how am i to find those keys from node.js SDK?","ts":"1485380767.001289"},{"type":"message","user":"U10Q62R8X","text":"!","ts":"1485380784.001290"},{"type":"message","user":"U10Q62R8X","text":"now its getting interesting! :smile:","ts":"1485380790.001291"},{"type":"message","user":"U13TWBRBL","text":"i would have to code up an \u201cadapter\u201d of some sort that understands jvm keystores","ts":"1485380796.001292"},{"type":"message","user":"U13TWBRBL","text":"and this goes on for every different kinds of keystores","ts":"1485380812.001293"},{"type":"message","user":"U221LL03Z","text":"from Node , you cannot read java key store.","ts":"1485380826.001294"},{"type":"message","user":"U13TWBRBL","text":"so what i\u2019m saying is instead this could be done using the procedure i was describing earlier, as a one-time import","ts":"1485380836.001295"},{"type":"message","user":"U221LL03Z","text":"you need to convert java key store to p12 and then read from node.","ts":"1485380851.001296"},{"type":"message","user":"U13TWBRBL","text":"<@U221LL03Z> exactly what i\u2019m saying (well i suppose you could have node call java to read, etc.) but the point is you\u2019d have to write code to do that, vs. doing a manual \u201cexport -&gt; import\u201d procedure that\u2019s a one-time deal","ts":"1485380915.001297"},{"type":"message","user":"U221LL03Z","text":"Jim , you are out of luck with using existing key store in bccSP for SW based system.","ts":"1485380946.001298"},{"type":"message","user":"U221LL03Z","text":"that might improve in future.","ts":"1485380969.001299"},{"type":"message","user":"U10Q62R8X","text":"A bit confused about the situation.. java tool that handles enrollment?","ts":"1485380980.001300"},{"type":"message","user":"U13TWBRBL","text":"could any other kind of tool that enrolls with a CA that\u2019s not fabric-ca","ts":"1485381008.001301"},{"type":"message","user":"U10Q62R8X","text":"cant we have a golang tool? :smile:","ts":"1485381010.001302"},{"type":"message","user":"U10Q62R8X","text":"that uses BCCSP? :smile:","ts":"1485381021.001303"},{"type":"message","user":"U13TWBRBL","text":"just using java as an example to illustrate the point","ts":"1485381022.001304"},{"type":"message","user":"U221LL03Z","text":"but it has to be done natively in SDK , I guess.","edited":{"user":"U221LL03Z","ts":"1485381062.000000"},"ts":"1485381050.001305"},{"type":"message","user":"U10Q62R8X","text":"I was talking to Jeff earlier, he was showing me the boostrap feature he is working on.. got me thinking how it would integrate with BCCSP. Its CLEARLY a problem :disappointed:","ts":"1485381148.001307"},{"type":"message","user":"U0ZR63HLK","text":"why?","ts":"1485381181.001308"},{"type":"message","user":"U10Q62R8X","text":"well.. he creates pem files with private keys","ts":"1485381192.001309"},{"type":"message","user":"U0ZR63HLK","text":"using openssl?","ts":"1485381197.001310"},{"type":"message","user":"U10Q62R8X","text":"python I think","ts":"1485381204.001311"},{"type":"message","user":"U10Q62R8X","text":"perhaps that calls openssl?","ts":"1485381211.001312"},{"type":"message","user":"U0ZR63HLK","text":"might be","ts":"1485381215.001313"},{"type":"message","user":"U13TWBRBL","text":"<@U10Q62R8X> before moving on to another topic, can you first give +1 to <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/4787\/>?","ts":"1485381219.001314"},{"type":"message","user":"U0ZR63HLK","text":"what's wrong with that?","ts":"1485381227.001315"},{"type":"message","user":"U13TWBRBL","text":"sounds like you are agreeing with the code itself","ts":"1485381235.001316"},{"type":"message","user":"U10Q62R8X","text":"yep","ts":"1485381240.001317"},{"type":"message","user":"U13TWBRBL","text":"(but how to use it is still up for debate)","ts":"1485381244.001318"},{"type":"message","user":"U10Q62R8X","text":"(<@U13TWBRBL> done)","ts":"1485381335.001319"},{"type":"message","user":"U13TWBRBL","text":"(thanks!)","ts":"1485381337.001320"},{"type":"message","user":"U10Q62R8X","text":"<@U0ZR63HLK> secrets in pem files only work with SW bccsp. Well, technically I got it to work with PKCS11 BCCSP, but @tvi tells me key import is disabled for FIPS lvl&gt;3","ts":"1485381425.001321"},{"type":"message","user":"U10Q62R8X","text":"a 'fairly transparent' interface is to use the same option that specifies the key-pem for actually reading in a SKI, which is then used to load from default bccsp keystore","edited":{"user":"U10Q62R8X","ts":"1485381534.000000"},"ts":"1485381514.001322"},{"type":"message","user":"U0ZR63HLK","text":"ah but then I would say that for behave tests, the best you can hope is to use SoftHSM no?","ts":"1485381661.001324"},{"type":"message","user":"U0ZR63HLK","text":"actually, we should move the fabric to digest SKIs directly","ts":"1485381675.001325","reactions":[{"name":"+1","users":["U10Q62R8X"],"count":1}]},{"type":"message","user":"U0ZR63HLK","text":"without having to do key import, no?","ts":"1485381686.001326"},{"type":"message","user":"U10Q62R8X","text":"yep","ts":"1485381700.001327"},{"type":"message","user":"U10Q62R8X","text":"wont happen immediatelly","ts":"1485381706.001328"},{"type":"message","user":"U10Q62R8X","text":"so import it is for now","ts":"1485381711.001329"},{"type":"message","user":"U10Q62R8X","text":"but we need to move that way","ts":"1485381720.001330"},{"type":"message","user":"U10Q62R8X","text":"(I would certainly want to be able to run behave with actual crypto card)","ts":"1485381741.001331"},{"type":"message","user":"U10Q62R8X","text":"<@U13TWBRBL> <https:\/\/developers.yubico.com\/yubico-piv-tool\/YKCS11_release_notes.html>","ts":"1485381899.001332"},{"type":"message","user":"U10Q62R8X","text":"since some people might run nodejs on their own machines..","ts":"1485381924.001333"},{"type":"message","user":"U10Q62R8X","text":"using yubico for them to store their certs.. through Gong's pkcs11 implementation.. that would be very neat.","ts":"1485381957.001334"},{"type":"message","user":"U10Q62R8X","text":"we are probably nearly there too","ts":"1485381967.001335"},{"type":"message","user":"U10Q62R8X","text":"(not sure if you've heard of yubico before..)","ts":"1485381985.001336"},{"type":"message","user":"U10Q62R8X","text":"I have one that I use for my password manager and email..","ts":"1485382015.001337"},{"type":"message","user":"U13TWBRBL","text":"<@U10Q62R8X> so i think you and <@U0ZR63HLK> are essentially proposing to have bccsp be based on pkcs11 so it\u2019ll have a standard protocol with private key management via SKI, and thus can delegate the storage to different keystore impls (software or hsm), do i understand it right?","edited":{"user":"U13TWBRBL","ts":"1485382349.000000"},"ts":"1485382320.001338"},{"type":"message","user":"U10Q62R8X","text":"right on \"private key management via SKI, and thus can delegate the storage to different keystore impls\", but disagree with \"bccsp be based on pkcs11\"","ts":"1485382398.001340"},{"type":"message","user":"U13TWBRBL","text":"not completely","ts":"1485382409.001341"},{"type":"message","user":"U13TWBRBL","text":"just for the key storage part","ts":"1485382421.001342"},{"type":"message","user":"U10Q62R8X","text":"well.. current SW bccsp has two keystore already.. FileBasedKeystore and a DummyKeyStore.. we could probably add a few more","ts":"1485382476.001343"},{"type":"message","user":"U10Q62R8X","text":"as part of SW bccsp configuration, one can specify which keystore to use, so we could acomodate JKS and P12 perhaps? the point is, apart from SKI, the 'developer' should not care about how the key is stored","ts":"1485382571.001344"},{"type":"message","user":"U10Q62R8X","text":"the FileBasedKeystore actually stores things are pem files (back to where we started? :smile: )","ts":"1485382608.001345"},{"type":"message","user":"U221LL03Z","text":"you can store PEM files as concatented form. But that requires BCCSP to change.","ts":"1485383107.001346"},{"type":"message","user":"U0ZR63HLK","text":"actually, if you want to change the way crypto objects are stored, you just need to provide a new implementation of the KeyStore interface","edited":{"user":"U0ZR63HLK","ts":"1485383549.000000"},"ts":"1485383532.001347"},{"type":"message","user":"U0ZR63HLK","text":"that's it","ts":"1485383534.001348"},{"type":"message","user":"U10Q62R8X","text":"<https:\/\/github.com\/pavel-v-chernykh\/keystore-go> :wink:","attachments":[{"service_name":"GitHub","title":"pavel-v-chernykh\/keystore-go","title_link":"https:\/\/github.com\/pavel-v-chernykh\/keystore-go","text":"keystore-go - A Go (golang) implementation of Java KeyStore encoder\/decoder","fallback":"GitHub: pavel-v-chernykh\/keystore-go","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/526266?v=3&s=400","from_url":"https:\/\/github.com\/pavel-v-chernykh\/keystore-go","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1485386242.001350"},{"type":"message","user":"U2UU1LKTR","text":"Hi <@U0PB67X4K> <@U184J2R7S> <@U13TWBRBL> , do you know who I can get advice\/assistance about the encryption\/decryption of the block\/transaction information (chaincode id, payload, etc. ) ?","attachments":[{"fallback":"[January 24th, 2017 10:54 PM] jonathan.tan: Hi everyone , does anyone know where can I find information about encrypting and decrypting transactions\/payload? I tried setting to confidential:true and transactions are now encrypted but how do I decrypt the transaction information like payload ?","ts":"1485269646.001209","author_subname":"jonathan.tan","channel_id":"C2GE7GXM1","channel_name":"fabric-crypto","is_msg_unfurl":true,"text":"Hi everyone , does anyone know where can I find information about encrypting and decrypting transactions\/payload? I tried setting to confidential:true and transactions are now encrypted but how do I decrypt the transaction information like payload ?","author_name":"Jonathan Tan","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/jonathan.tan","author_icon":"https:\/\/secure.gravatar.com\/avatar\/a1174343fd5aa071737d6ea9383fea56.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0022-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-crypto\/p1485269646001209","is_share":true,"footer":"Posted in #fabric-crypto"}],"ts":"1485399528.001352"},{"type":"message","user":"U13TWBRBL","text":"<@U2UU1LKTR> i see that you are in Singapore, you can contact the solution team in IBM China Research Lab, i\u2019ll send you a few contact names via DM","ts":"1485400648.001353"},{"type":"message","user":"U2UU1LKTR","text":"thanks <@U13TWBRBL>","ts":"1485400675.001354"},{"type":"message","user":"U0N4P17ND","text":"Hi, all. Maybe a bit silly question but: how consensus work when confidentiality is enabled? \nAs if it is set I guess that other peers will receive encrypted transaction payload, right? If they don't have appropriate keys they will not be able to decrypt them and execute the transaction? Or do I mess up the things peers will always have needed keys to decrypt\/encrypt and only enrolled user will miss them (which I guess is not the case as peer also has enrolled user, so has only some subset of certificates, right?)?\nMy question is based on v06 but I guess it would be similar for v1 if we are talking in context of single channel?","edited":{"user":"U0N4P17ND","ts":"1485423778.000000"},"ts":"1485423280.001355"},{"type":"message","user":"U1BC5A0F9","text":"When confidentiality is on transactions are encrypted on the sdk side using a chain-specific public (encryption) key. The corresponding decryption key in V0.6 is given to all validators that can decrypt transactions and execute them accordingly.","ts":"1485432241.001358"},{"type":"message","user":"U1BC5A0F9","text":"It is only the payload of trnasactions that is encrypted, so all the rest of information, i..e, signing certificate, nonce, are in the clear.","thread_ts":"1485432286.001359","reply_count":1,"replies":[{"user":"U2UU1LKTR","ts":"1485485960.001392"}],"ts":"1485432286.001359"},{"type":"message","user":"U1BC5A0F9","text":"In v1 there is no fabric encryption capabilities yet.","ts":"1485432304.001360"},{"type":"message","user":"U0N4P17ND","text":"thanks <@U1BC5A0F9> just to double check my understanding - so let's say I invoke transaction: \"transfer A 1 to B\" which will be stored in encrypted way in ledger but during execution time all peers see raw data, right?","ts":"1485432817.001361"},{"type":"message","user":"U1BC5A0F9","text":"correct","ts":"1485432835.001362"},{"type":"message","user":"U0N4P17ND","text":"if so, is not there an option for some sort of \"man in the middle attack\" so if I listen to VM bytecode execution on the peer - I technically can grab all raw data?","ts":"1485432867.001363"},{"type":"message","user":"U0N4P17ND","text":"so the data stored to the ledger is encrypted - this is fine but there still seems to be a gap when some sensistive data can be read or do I misunderstood it?","ts":"1485432915.001364"},{"type":"message","user":"U0PB67X4K","text":"not sure why it's a gap?   of course you need to protect your own peer if you don't want people interfering with its internal operations","ts":"1485442066.001365"},{"type":"message","user":"U0N4P17ND","text":"my own peer - yes but let's say the idea is that if I have 3 banks (A, B and C)  and I want that they see only transactions  addressed to each other. This is possible to manage using enrolled users, right? so data in ledger is encrypted and only users with correct attributes can encrypt it, right? So as soon as transaction is stored to the ledger, if I have correct permissions I can decrypt it, otherwise - no. \nBut during execution each peer see raw content, so technically bank C can monitor transactions between A and B is not it an issue? Or do I get things wrong?","ts":"1485445002.001366"},{"type":"message","user":"U0N4P17ND","text":"This question is about v06 and I realize that in v1 there will be channels, which should some sort of address this issue but even having channels question seems to be still valid.","ts":"1485445252.001367"},{"type":"message","user":"U0N4P17ND","text":"Any thoughts on this? Is my understanding correct or do I miss something?","ts":"1485454087.001368"},{"type":"message","user":"U1BC5A0F9","text":"So in v0.6 we have validators doing the ordering of transactions and afterwards the execution \/ commitment of transaction results. If banks A, B, C have no validators and have only clients in that blockchain network, then a technique similar to what you way can be leveraged, i.e., have client of Bank A encrypt its transaction, send it to the validators for execution and give bank B the keys to decrypt the transaction payload\/and chaincode state if they are given the ledger.","ts":"1485454766.001369"},{"type":"message","user":"U1BC5A0F9","text":"However execution of chaincode that takes place within a peer and if its infrastructure is properly secured no leakage should come from there.","ts":"1485454834.001370"},{"type":"message","user":"U0N4P17ND","text":"Thanks. So to summarize this: \n1. If A, B and C all are validators - they will see raw data anyway, right?\n2. I understand that if peer is protected it will work - but the idea here, that A and B want to hide their transactions from C and C has also validating peer, so this means that technically C can read the data during transaction execution, right? And confusing thing here is that owning membership service I can grant correct users to A, B and C so as a client they will have limited access to sensitive data but owning a peer they actually have full access... right?\n\nFor me logical might be following behavior: if peer can't decrypt the data for some reason it would say - I can't validate, I would not take part in consensus and as the data is not mine I don't care - I'll accept data from other peers... \n\nAlso what I actually want is some sort of subledgers\/chains which we'll have in v1, right?","edited":{"user":"U0N4P17ND","ts":"1485455266.000000"},"ts":"1485455207.001371"},{"type":"message","user":"U1BC5A0F9","text":"In v0.6 we do not support confidentiality of contracts against validators. If A, or B, or C have validating peers, they will see the plaintext of all transactions advertised in the chain.","ts":"1485455661.001373"},{"type":"message","user":"U1BC5A0F9","text":"In v1.0 we move to an architecture that would allow for finer-grained of encryption-based confidentiality. However, this is not yet supported.","ts":"1485455699.001374"},{"type":"message","user":"U1BC5A0F9","text":"In v1.0 pairwise business logic can be supported at the level of two-party participant channel.","ts":"1485455761.001375"},{"type":"message","user":"U1BC5A0F9","text":"That is A, and B can have their own channel, and B, and C can have their own channel. All of them so far however need to trust orderers to see their transactions.","ts":"1485455797.001376"},{"type":"message","user":"U0YJUECE8","text":"<@U1BC5A0F9> My understanding is that orderers are agnostic to the contents of the transaction, they are just ordering the transactions they receive..... so in normal operations would an orderer be seeing encrypted transaction contents?  Of course I may be completely misunderstanding things!","ts":"1485457797.001377"},{"type":"message","user":"U1BC5A0F9","text":"If the content is encrypted, no they would not be able to.","ts":"1485457880.001378"},{"type":"message","user":"U1BC5A0F9","text":"But in v1.0 as of now we do not offer encryption-based confidentiality.","ts":"1485457894.001379"},{"type":"message","user":"U1BC5A0F9","text":"Hence you can protect your data of collaboration with organization X if yyou and X have a channel restricted only within the two of you. Because transactions in that channel are ordered through the orderers, the orderers would see the content of your transactions but not endorsers, e.g., belonging to other organizations outside your restricted channel.","ts":"1485457971.001380"},{"type":"message","user":"U0YJUECE8","text":"<@U1BC5A0F9> thanks!  so to make sure i've understood.... an orderer will serve multiple organizations, beyond the subset that are in your restricted chain...   so if you have orgs A B C X Y Z in your network,  even if X Y have their own \"private\" channel,   the orderers service A B C X Y Z?","ts":"1485458293.001381"},{"type":"message","user":"U1BC5A0F9","text":"correct, and by \"service offered by orderers\" I mean \"order transactions on behalf of different channels owned by a combination\/any subset of A B C X Y Z\".","edited":{"user":"U1BC5A0F9","ts":"1485458416.000000"},"ts":"1485458404.001382"},{"type":"message","user":"U0YJUECE8","text":"<@U1BC5A0F9> Say in my example with 6 orgs,  and suppose each org stood up their own orderer service.   Do these orderers \"talk amongst themselves\" before settling on a batch to send back to the committers?  I suppose they'd have to.","ts":"1485458657.001384"},{"type":"message","user":"U1BC5A0F9","text":"correct","ts":"1485458825.001385"},{"type":"message","user":"U1BC5A0F9","text":"the set of orderers need to jointly agree on the order of all transactions advertised in each channel","ts":"1485458864.001386"},{"type":"message","user":"U1BC5A0F9","text":"so they see all the transactions","ts":"1485458877.001387"},{"type":"message","user":"U0YJUECE8","text":"<@U1BC5A0F9>  got it!  Thank you very much.","ts":"1485458949.001388"},{"type":"message","user":"U1BC5A0F9","text":"<@U0YJUECE8> sure!","ts":"1485458967.001389"},{"type":"message","user":"U0N4P17ND","text":"thanks <@U1BC5A0F9> !","ts":"1485463247.001390"},{"user":"U0YK3KKCY","text":"<@U0YK3KKCY|harrijk> has joined the channel","type":"message","subtype":"channel_join","ts":"1485464281.001391"},{"type":"message","user":"U2UU1LKTR","text":"Hi <@U1BC5A0F9> how can we decrypt the payload? We also observed the chaincode id is also encrypted","thread_ts":"1485432286.001359","parent_user_id":"U1BC5A0F9","ts":"1485485960.001392"},{"type":"message","user":"U0ZJZBJLF","text":"<@U3X6RA34J>","ts":"1485493081.001394"},{"user":"U3X6RA34J","inviter":"U0ZJZBJLF","text":"<@U3X6RA34J|archivebot> has joined the channel","type":"message","subtype":"channel_join","ts":"1485493087.001395"},{"user":"U1NGC2X9D","text":"<@U1NGC2X9D|dinesh_rivankar> has joined the channel","type":"message","subtype":"channel_join","ts":"1485493125.001396"},{"type":"message","user":"U1NGC2X9D","text":"What is the maximum lifetime for the certificates in ver 0.6 ?","ts":"1485493187.001397"},{"type":"message","user":"U0PB67X4K","text":"<@U1NGC2X9D>  - I think there's a hard-coded value of 90 days","ts":"1485520221.001398"},{"user":"U2ZRLGJFQ","text":"<@U2ZRLGJFQ|stefan.momma> has joined the channel","type":"message","subtype":"channel_join","ts":"1485524833.001399"},{"type":"message","user":"U184J2R7S","text":"@oiakolev I think it's worth mentioning that at the hackfest with Hyperledger next week in San Fransisco, we are bringing docker images for version 1.0 on fabric that will allow you to start playing with multichannel.. and yes, we absolutely have multichannel (believe Elli answered this) given requirement from community.","ts":"1485599462.001400"},{"type":"message","user":"U0N4P17ND","text":"thanks!","ts":"1485703439.001401"},{"user":"U3V4G8HUZ","text":"<@U3V4G8HUZ|sagmeister> has joined the channel","type":"message","subtype":"channel_join","ts":"1485787860.001402"},{"type":"message","user":"U3DHKV84C","text":"What is Attribute Certificate Authority in v 1.0?\n<https:\/\/github.com\/hyperledger-archives\/fabric\/wiki\/Attribute-Certificate-Authority>\n<https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/tech\/attributes.md>","attachments":[{"service_name":"GitHub","title":"hyperledger-archives\/fabric","title_link":"https:\/\/github.com\/hyperledger-archives\/fabric\/wiki\/Attribute-Certificate-Authority","text":"THIS IS A READ-ONLY historic repository. Current development is at <https:\/\/gerrit.hyperledger.org\/r\/#\/admin\/projects\/fabric> . pull requests not accepted","fallback":"GitHub: hyperledger-archives\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/20729145?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger-archives\/fabric\/wiki\/Attribute-Certificate-Authority","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1},{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/tech\/attributes.md","text":"Read-only mirror of <https:\/\/gerrit.hyperledger.org\/r\/#\/admin\/projects\/fabric>","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/tech\/attributes.md","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":2}],"edited":{"user":"U3DHKV84C","ts":"1485860139.000000"},"ts":"1485860114.001403"},{"type":"message","user":"U221LL03Z","text":"we do not have concept of Attribute Certificate Authority in V1.0.","ts":"1485869216.001406"},{"type":"message","user":"U221LL03Z","text":"During TCert generation , user specifies which attributes it wants to include in TCert , query is being done on Database and attribute value is being populated","ts":"1485869304.001407"},{"type":"message","user":"U221LL03Z","text":"We do not have validity period for attributes whereas user can setup validity period of TCerts.","ts":"1485869362.001408"},{"type":"message","user":"U184J2R7S","text":"hi everybody, in case you have not heard, linux foundation is moving us off of Slack and onto Rocket.Chat, everybody in Slack can log in to the new chat server using your existing linux foundation ID, please visit <http:\/\/chat.hyperledger.org\/> to login to the new chat server","ts":"1486078888.001409"},{"type":"message","user":"U221LL03Z","text":"<@U184J2R7S> : Are they going to transfer all channels and chat history to Rocket.chat ? I logged in there and found no chat history.","ts":"1486081542.001410"},{"type":"message","user":"U184J2R7S","text":"<@U221LL03Z> <@U0W7D64LC> Mark- can you create the channels we talked about-- I don't think they are going to copy our chat history over.","ts":"1486132853.001411"},{"type":"message","user":"U221LL03Z","text":"oh shoot.","ts":"1486132880.001412"},{"type":"message","user":"U11MANG9G","text":"Ash, it will be OK :smile:\nWe should move new\/our discussions to <https:\/\/chat.hyperledger.org>","ts":"1486146999.001413"},{"type":"message","user":"U2L9F7VL1","text":"Currently says new user registrations are disabled","ts":"1486366178.001414"},{"type":"message","user":"U0N4P17ND","text":"you can login with you linuxfoundation id - there is no need in new user registration","ts":"1486379844.001415"},{"user":"U0UHG4VP1","text":"<@U0UHG4VP1|ry> has joined the channel","type":"message","subtype":"channel_join","ts":"1486497994.001416"},{"user":"U0UHG4VP1","members":["U0KM61BCP","U0KN2SSKE","U0KQ9QKH6","U0MRY2LKY","U0N4P17ND","U0NCW1DPX","U0P1VU0QG","U0PB67X4K","U0RD1ALMV","U0S5KF44D","U0UGH3X7X","U0UHG4VP1","U0UKTPMG8","U0ULK2JPP","U0W7D64LC","U0XPR4NP4","U0XQ35CDD","U0XR6J961","U0XV1HDL3","U0Y14MWA2","U0YJUECE8","U0YK3KKCY","U0YNFB22X","U0YP7KFGQ","U0Z541B3P","U0Z6VMEER","U0ZJZBJLF","U0ZR63HLK","U10LM0FFZ","U10Q62R8X","U11MANG9G","U11RW82PM","U12452RAP","U12AHQ3NK","U13Q594J2","U13TWBRBL","U149660UA","U184J2R7S","U1BC5A0F9","U1CTBUNEN","U1D89DP47","U1EF2CN9M","U1FBDMBMG","U1FDTCEUR","U1FMASJFL","U1GN670VD","U1GRJD9NC","U1HBFGDPV","U1HFNJB50","U1KDHJT6H","U1KFCPFQA","U1M9R3C8Z","U1NGC2X9D","U1P1ZV6RF","U1P52TCE4","U1PF7CF5F","U1PSHT5C4","U1PTA31D2","U1QUW6W82","U1SHFS1Q9","U1SLE9PJN","U1TA5FDU7","U1TARSPGT","U1V6SJ1FF","U1WL0FZ35","U1XL70KHB","U221LL03Z","U24JMTPRQ","U24M29R4G","U26T99AQ4","U28AF10A3","U296A0JFN","U2A5NPBQ9","U2B3A70TX","U2BGFAHC7","U2CBG8V9U","U2CSGKHRS","U2D62LCQJ","U2E87MX1A","U2FMXLFUJ","U2GDA64CE","U2GEM7JCT","U2GFYLYN8","U2GT93M2T","U2J6ZKX19","U2JDRLC9J","U2JK6JCTZ","U2KJHTPQT","U2L9F7VL1","U2LHA3Q7K","U2MCH9EEB","U2MSDAQG2","U2NNF5FS6","U2P0N5J5A","U2PE37K3J","U2Q0HP4HY","U2QLU433N","U2RRHA11T","U2T7Z63NY","U2UKSBLG5","U2UMDEBU2","U2URL5G8P","U2URZF2AF","U2UU1LKTR","U2WL051HN","U2X9KDDL7","U2Y2V95D2","U2Y3JHRP1","U2Z3FNF2N","U2ZRLGJFQ","U307KJEDU","U31M2620Z","U327VGGF9","U35FGUMN0","U37F5PG64","U38H8MS11","U39S0S55F","U3BL88B18","U3BQF48RE","U3DB4L15G","U3DHKV84C","U3EF4NL01","U3EHYEF89","U3F8W9K4Y","U3HN4GFA9","U3LU3AQM8","U3MB5BH42","U3MBTR5KK","U3NKHU4F7","U3U0MV3PZ","U3UPDJXV2","U3V4G8HUZ","U3VDLN47L","U3X6RA34J"],"text":"<@U0UHG4VP1|ry> archived the channel (w\/ 134 members)","type":"message","subtype":"channel_archive","ts":"1486498001.001417"}]