[{"user":"U0XR6J961","type":"message","subtype":"channel_join","text":"<@U0XR6J961|simon> has joined the channel","ts":"1460122895.000002"},{"user":"U0XPR4NP4","inviter":"U0XR6J961","type":"message","subtype":"channel_join","text":"<@U0XPR4NP4|jyellick> has joined the channel","ts":"1460122896.000003"},{"user":"U0UGH3X7X","inviter":"U0XR6J961","type":"message","subtype":"channel_join","text":"<@U0UGH3X7X|tuand> has joined the channel","ts":"1460122896.000004"},{"user":"U0XQ35CDD","inviter":"U0XR6J961","type":"message","subtype":"channel_join","text":"<@U0XQ35CDD|kostas> has joined the channel","ts":"1460122896.000005"},{"user":"U0Y14MWA2","inviter":"U0XR6J961","type":"message","subtype":"channel_join","text":"<@U0Y14MWA2|vukolic> has joined the channel","ts":"1460122896.000006"},{"user":"U0XV1HDL3","inviter":"U0XR6J961","type":"message","subtype":"channel_join","text":"<@U0XV1HDL3|cca> has joined the channel","ts":"1460122896.000007"},{"type":"message","user":"U0XR6J961","text":"<#C0XR102AJ> seems to be popular with a lot of people, so i think having an explicit fabric dev channel is better","ts":"1460122939.000008"},{"type":"message","user":"U0XR6J961","text":"I'm working on #1000 - but i'm not quite sure which data needs to be persisted","ts":"1460123013.000009"},{"type":"message","user":"U0XR6J961","text":"the checkpoints for sure, but what about P and Q sets?","ts":"1460123037.000010"},{"type":"message","user":"U0XR6J961","text":"if I persist the P and Q sets, then i need to persist the requests as well","ts":"1460123063.000011"},{"type":"message","user":"U0XR6J961","text":"but I think ultimately we need to define in #351 which kind of crash fault tolerance we want","ts":"1460123147.000012"},{"type":"message","user":"U0XR6J961","text":"<!channel> it would be great if we could discuss and define what kind of crashes we want to be able to tolerate in what way?","ts":"1460123205.000013"},{"type":"message","user":"U0XR6J961","text":"for example - if &gt;f replicas crash around the same time (and there are f more byzantine replicas), how should the network deal with this?","ts":"1460123355.000014"},{"type":"message","user":"U0XR6J961","text":"i guess worst case the primary cannot get requests from proposed P and Q sets, and on view change, these proposed requests disappear?","ts":"1460123424.000015"},{"type":"message","user":"U0XR6J961","text":"in that case we only need to persist checkpoints","ts":"1460123440.000016"},{"type":"message","user":"U0XR6J961","text":"and possibly the last executed seqno","ts":"1460123472.000017"},{"type":"message","user":"U0XR6J961","text":"thinking a bit more about it, I don't think we can ever tolerate more than f crashes","ts":"1460125025.000018"},{"type":"message","user":"U0XR6J961","text":"without giving up correctness guarantees","ts":"1460125044.000019"},{"type":"message","user":"U0XR6J961","text":"or persisting all in-memory state, such as outstanding requests","ts":"1460125072.000020"},{"type":"message","user":"U0XR6J961","text":"i think realistically we need to get away from the plain PBFT, and adapt ours to blockchain","ts":"1460125153.000021"},{"type":"message","user":"U0XR6J961","text":"i.e. treat every block on the chain as a checkpoint, and have a way to retrieve committed requests back from the blockchain","ts":"1460125213.000022"},{"type":"message","user":"U0XR6J961","text":"then we still need to persist the Pset, but that's more managable","ts":"1460125239.000023"},{"type":"message","user":"U0XR6J961","text":"however, getting committed requests from the blockchain means that my complaints\/dedup work won't work, because there requests are ephemeral, and only transactions are committed, not requests (which carry a timestamp and signature)","ts":"1460125296.000024"},{"type":"message","user":"U0XR6J961","text":"it is increasingly apparent to me that we cannot develop a silo solution, but we need to use a more holistic design","ts":"1460125357.000025"},{"user":"U0Z541B3P","type":"message","subtype":"channel_join","text":"<@U0Z541B3P|manish-sethi> has joined the channel","ts":"1460128073.000026"},{"user":"U0Y6AUDST","type":"message","subtype":"channel_join","text":"<@U0Y6AUDST|rgupta1> has joined the channel","ts":"1460128332.000027"},{"user":"U0Z68F4HE","type":"message","subtype":"channel_join","text":"<@U0Z68F4HE|toddsjsimmer> has joined the channel","ts":"1460134626.000028"},{"user":"U0MM86C84","type":"message","subtype":"channel_join","text":"<@U0MM86C84|novusopt> has joined the channel","ts":"1460135168.000029"},{"user":"U0Z6EEJ69","type":"message","subtype":"channel_join","text":"<@U0Z6EEJ69|keoja> has joined the channel","ts":"1460135352.000030"},{"user":"U0MTAMEN4","type":"message","subtype":"channel_join","text":"<@U0MTAMEN4|noam> has joined the channel","ts":"1460283572.000031"},{"user":"U0YTUU2T0","type":"message","subtype":"channel_join","text":"<@U0YTUU2T0|paulojrmoreira> has joined the channel","ts":"1460325206.000032"},{"user":"U0P75RFT4","type":"message","subtype":"channel_join","text":"<@U0P75RFT4|tim.blankers> has joined the channel","ts":"1460358749.000033"},{"user":"U0ZKU4YHX","type":"message","subtype":"channel_join","text":"<@U0ZKU4YHX|richernandez2> has joined the channel","ts":"1460383998.000034"},{"type":"message","user":"U0XR6J961","text":"so first I thought I'd persist all messages - but then garbage collecting them becomes difficult","ts":"1460385677.000035"},{"type":"message","user":"U0XR6J961","text":"now i'm back to persisting `pset, qset, reqStore, certStore, checkpointStore, lastExec`","ts":"1460385779.000036"},{"type":"message","user":"U0XR6J961","text":"i wonder what i really need to persist there","ts":"1460385824.000037"},{"type":"message","user":"U0XR6J961","text":"maybe i don't need the certstore - that would make things easier","ts":"1460385881.000038"},{"type":"message","user":"U0XR6J961","text":"<@U0XPR4NP4>: what do you think?","ts":"1460385888.000039"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: I would need to do an audit, but that seems like the minimal set of what would be required.  I assume the crash-recovery scenario is essentially to conduct a view change, so that everyone has a consistent view of the execution, which would trigger state transfer (as the viewchange already does today)","ts":"1460386063.000040"},{"type":"message","user":"U0XPR4NP4","text":"What is the strategy for persisting? Would this go into the system state per the pending system chaincode mechanism?","ts":"1460386098.000041"},{"type":"message","user":"U0XR6J961","text":"right, if fewer than F out of N replicas are byzantine or crashed, then everything proceeds as normal","ts":"1460386122.000042"},{"type":"message","user":"U0XR6J961","text":"if more than F are crashed, then it should look like they just were disconnected from the network","ts":"1460386153.000043"},{"type":"message","user":"U0XPR4NP4","text":"I'm not sure I understand that second sentence, could you elaborate?","ts":"1460386266.000044"},{"type":"message","user":"U0XR6J961","text":"i don't know whether in all cases there would be a view change","ts":"1460386311.000045"},{"type":"message","user":"U0XR6J961","text":"why can't i find details on this in the pbft paper?","ts":"1460386358.000046"},{"type":"message","user":"U0XPR4NP4","text":"Yes, it does seem like a significant oversight if it is not in there","ts":"1460386554.000047"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: Why did you say that garbage collection became difficult? I would have thought you could have simply put all messages into a log, then garbage collected all messages with sequence number &lt; X after a stable checkpoint of sequence number X?","ts":"1460386686.000048"},{"type":"message","user":"U0XR6J961","text":"not all messages contain sequence numbers","ts":"1460386717.000049"},{"type":"message","user":"U0XPR4NP4","text":"Ah, for requests and potentially Sieve messages?","ts":"1460386778.000050"},{"type":"message","user":"U0XR6J961","text":"for example","ts":"1460386792.000051"},{"type":"message","user":"U0XR6J961","text":"also replaying the messages is a bit of a pain, I think","ts":"1460386822.000052"},{"type":"message","user":"U0XPR4NP4","text":"I guess I would have thought replaying messages would be very simple.  Isn't this also the standard crash fault recovery mechanism for most systems?","ts":"1460386871.000053"},{"type":"message","user":"U0XPR4NP4","text":"(Filesystem journals, db logs, etc.)","ts":"1460386888.000054"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1460386900.000055"},{"type":"message","user":"U0XR6J961","text":"we'll have to change the code that applies messages","ts":"1460386908.000056"},{"type":"message","user":"U0XR6J961","text":"and remove the conditionals that reject messages","ts":"1460386926.000057"},{"user":"U0XRC0KLH","type":"message","subtype":"channel_join","text":"<@U0XRC0KLH|chetsky> has joined the channel","ts":"1460393901.000058"},{"user":"U0ZMB7ZEJ","type":"message","subtype":"channel_join","text":"<@U0ZMB7ZEJ|jatinderbali> has joined the channel","ts":"1460394726.000059"},{"type":"message","user":"U0XR6J961","text":"<@U0XPR4NP4>: would you make restarting replicas require a view change to join completely?","ts":"1460395188.000060"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: That's a good question, I would say in the case where more than f replicas have gone offline, that it would be a reasonable thing to require.","ts":"1460395584.000061"},{"type":"message","user":"U0XR6J961","text":"sorry, these questions are all over the place","ts":"1460395615.000062"},{"type":"message","user":"U0XPR4NP4","text":"Although replaying the journal\/log might get things into a consistent enough state to continue, if the primary has missed some of the network chatter, then a view change will need to happen anyway.","ts":"1460395626.000063"},{"type":"message","user":"U0XR6J961","text":"how does the executor queueing execs influence persistence?  we need to atomically track \"lastExec\"","ts":"1460395659.000064"},{"type":"message","user":"U0XPR4NP4","text":"So, I think the executor definitely needs a journal, which should be pretty easy to implement, as it is literally a linear stream of monotonically increasing sequence numbered reqeusts.","ts":"1460395803.000065"},{"type":"message","user":"U0XPR4NP4","text":"I'm not sure about the atomicity, where we're trying to treat the executor as a remote component (as it eventually will be)","ts":"1460395849.000066"},{"type":"message","user":"U0XR6J961","text":"it has to be atomic","ts":"1460395863.000067"},{"type":"message","user":"U0XR6J961","text":"because otherwise, how would pbft ever know which request to execute","ts":"1460395893.000068"},{"type":"message","user":"U0XR6J961","text":"when we come back up, our notion of lastExec needs to match the system state","ts":"1460395906.000069"},{"type":"message","user":"U0XPR4NP4","text":"Aha, so this is the code that I've stubbed out but is presently unimplemented","ts":"1460395928.000070"},{"type":"message","user":"U0XPR4NP4","text":"The executor needs to inform the orderer of the execution state on connection","ts":"1460395945.000071"},{"type":"message","user":"U0XR6J961","text":"now you could say \"just roll back to the last checkpoint\", which can be a locally correct decision","ts":"1460395947.000072"},{"type":"message","user":"U0XR6J961","text":"but overall, that way the network could lose already executed requests","edited":{"user":"U0XR6J961","ts":"1460395982.000000"},"ts":"1460395975.000073"},{"type":"message","user":"U0XR6J961","text":"now, if we treat execution of blocks as the equivalent of a checkpoint...","ts":"1460396011.000075"},{"type":"message","user":"U0XPR4NP4","text":"The executor can be expected to inform the orderer of the last sequence number it was told to execute.  This would be lastExec for classic and batch pbft.  For Sieve there would need to be some mapping done","ts":"1460396108.000076"},{"type":"message","user":"U0XR6J961","text":"right","ts":"1460396184.000077"},{"type":"message","user":"U0XR6J961","text":"so that is the startupinfo","ts":"1460396204.000078"},{"type":"message","user":"U0XPR4NP4","text":"Right","ts":"1460396209.000079"},{"type":"message","user":"U0XPR4NP4","text":"Today it always comes back as 0, because we had no way to persist the state, but after implementing the rest of the crash tolerance (ie a journal) that should be easy.","ts":"1460396252.000080"},{"type":"message","user":"U0XR6J961","text":"i'm wondering whether we should adapt pbft to blockchain, i.e. treat committed blocks as checkpoints","ts":"1460396269.000081"},{"type":"message","user":"U0XR6J961","text":"right, i'll work on that part","ts":"1460396279.000082"},{"type":"message","user":"U0XR6J961","text":"i think it is sufficient to persist reqstore, pset*, qset*, lastExec","ts":"1460396329.000083"},{"type":"message","user":"U0XR6J961","text":"where pset* is pset updated with certstore","ts":"1460396346.000084"},{"type":"message","user":"U0XR6J961","text":"ah, plus commits","ts":"1460396355.000085"},{"type":"message","user":"U0XR6J961","text":"commit certificate","ts":"1460396360.000086"},{"type":"message","user":"U0XPR4NP4","text":"So are you suggesting setting K=1?","ts":"1460396377.000087"},{"type":"message","user":"U0XR6J961","text":"not quite","ts":"1460396396.000088"},{"type":"message","user":"U0XR6J961","text":"that would trigger checkpoint messages all the time","ts":"1460396411.000089"},{"type":"message","user":"U0XPR4NP4","text":"Right","ts":"1460396417.000090"},{"type":"message","user":"U0XR6J961","text":"instead, adapt the protocol to not use checkpoint messages at all","ts":"1460396424.000091"},{"type":"message","user":"U0XR6J961","text":"that ties into the question i posed in <#C0YPYBVJM>","ts":"1460396458.000092"},{"type":"message","user":"U0XR6J961","text":"because if the blockchain contains a signed quorum from validators, that would allow us to stop using checkpoints","ts":"1460396497.000093"},{"type":"message","user":"U0XR6J961","text":"but that's sort of for later","ts":"1460396502.000094"},{"type":"message","user":"U0XPR4NP4","text":"So, checkpoints today buy us garbage collection, a basis for new views, and a cue for state transfer","ts":"1460396549.000095"},{"type":"message","user":"U0XPR4NP4","text":"Also, in the case of non-determinism under non-Sieve pbft, it causes the network to stop progressing","ts":"1460396596.000096"},{"type":"message","user":"U0XPR4NP4","text":"As we move to the new model, non-determinism shouldn't be an issue, and state transfer could be accomplished with the signed blocks","ts":"1460396646.000097"},{"type":"message","user":"U0XR6J961","text":"right","ts":"1460396661.000098"},{"type":"message","user":"U0XPR4NP4","text":"But garbage collection and new view would still need to be addressed","ts":"1460396671.000099"},{"type":"message","user":"U0XR6J961","text":"new view can use these K=1 style \"checkpoint\" blocks","ts":"1460396709.000100"},{"type":"message","user":"U0XR6J961","text":"i think","ts":"1460396714.000101"},{"type":"message","user":"U0XR6J961","text":"garbage collection as well","ts":"1460396720.000102"},{"type":"message","user":"U0XR6J961","text":"i.e. we'd still have to communicate \"I received this, executed it, signed it\"","ts":"1460396750.000103"},{"type":"message","user":"U0XPR4NP4","text":"Then we advance watermarks based on signed commits?","ts":"1460396769.000104"},{"type":"message","user":"U0XPR4NP4","text":"(which seems awfully similar to a checkpoint message)","ts":"1460396780.000105"},{"type":"message","user":"U0XR6J961","text":"yea it does","ts":"1460396790.000106"},{"type":"message","user":"U0XR6J961","text":"well, let's not spend too much time on it right now","ts":"1460396803.000107"},{"type":"message","user":"U0XR6J961","text":"just thinking aloud","ts":"1460396813.000108"},{"type":"message","user":"U0XPR4NP4","text":"Fair enough","ts":"1460396818.000109"},{"type":"message","user":"U0XR6J961","text":"do you tend to push your intermediate commits to your github repo?","ts":"1460396829.000110"},{"type":"message","user":"U0XR6J961","text":"for the reactor pattern refactor","ts":"1460396868.000111"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I like to push my intermediate commits, as it makes my life a little easier, though I know it can make bisecting less useful.  Had not heard an official stance on that.","ts":"1460396966.000112"},{"type":"message","user":"U0XPR4NP4","text":"(But I actually haven't committed anything for 919 yet)","ts":"1460397049.000113"},{"type":"message","user":"U0XR6J961","text":"ah!","ts":"1460397180.000114"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1460397181.000115"},{"type":"message","user":"U0XR6J961","text":"i'm all for frequent commits","ts":"1460397196.000116"},{"type":"message","user":"U0XR6J961","text":"i was just wondering, because your repo didn't update here - maybe you were on a different repo","ts":"1460397222.000117"},{"type":"message","user":"U0XPR4NP4","text":"Ah, yeah, no, I've done some work locally, but wasn't really happy with the structure, so went to Jeff, which triggered that whole goose chase that I mentioned via scrum","ts":"1460397286.000118"},{"type":"message","user":"U0XR6J961","text":":simple_smile:","ts":"1460397435.000119"},{"type":"message","user":"U0XR6J961","text":"bbl dinner","ts":"1460397462.000120"},{"type":"message","user":"U0XPR4NP4","text":"Sounds good, enjoy","ts":"1460397480.000121"},{"type":"message","user":"U0XR6J961","text":"i'm wondering how to phrase a test for this persistence thing","ts":"1460399188.000122"},{"type":"message","user":"U0XPR4NP4","text":"Scenario?","ts":"1460399645.000123"},{"type":"message","user":"U0XR6J961","text":"yea, what scenario.  i guess have most replicas disappear, and restart them","ts":"1460399787.000124"},{"type":"message","user":"U0XPR4NP4","text":"I think it is important that this happen while transactions are being processed.  An idle network should halt and and resume normally today.","ts":"1460399931.000125"},{"type":"message","user":"U0XPR4NP4","text":"Well, actually, I take that back, that is only true if all replicas go down","ts":"1460399972.000126"},{"type":"message","user":"U0XPR4NP4","text":"Process K+1 transactions, shut f+1 peers down, then start them up again.  Execute 1 additional transaction, verify everyone has executed K+2?","ts":"1460400042.000127"},{"type":"message","user":"U0XR6J961","text":"i guess that works for a start","ts":"1460400385.000128"},{"type":"message","user":"U0XR6J961","text":"i was thinking of \"what if you send a commit and never execute\", etc.","ts":"1460400403.000129"},{"type":"message","user":"U0XPR4NP4","text":"Since you mentioned 'restarting' them, I figured this was behave.  I would think those more interesting failure scenarios will probably need to be simulated in unit tests?","ts":"1460400501.000130"},{"type":"message","user":"U0XR6J961","text":"yea, unit test","ts":"1460400536.000131"},{"type":"message","user":"U0XR6J961","text":"stop a pbft instance, replace it with a new one, sharing the same ledger","ts":"1460400570.000132"},{"type":"message","user":"U0XPR4NP4","text":"Ah, I see, yes.  I find the unit tests to be much more useful generally anyhow, behave adds so much time in an iterative code\/test cycle","ts":"1460400726.000133"},{"type":"message","user":"U0XRC0KLH","text":"jason?  if unbusy&amp;workin'?","ts":"1460406339.000134"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XRC0KLH>: What can I do for you?","ts":"1460406894.000135"},{"type":"message","user":"U0XRC0KLH","text":"wanted to check on something.  Today, there's support for state-xfer, right?","ts":"1460406915.000136"},{"type":"message","user":"U0XPR4NP4","text":"Yes, there is","ts":"1460406921.000137"},{"type":"message","user":"U0XRC0KLH","text":"[this is in support of quorum-whitelist change]","ts":"1460406941.000138"},{"type":"message","user":"U0XRC0KLH","text":"can there be non-validating peers participating in PBFT (somehow .... not sure what that would mean, hence why I ask) that would thus have a full replica of the blockchain?","ts":"1460406979.000139"},{"type":"message","user":"U0XRC0KLH","text":"if it's useful, I can explain furthre","ts":"1460407073.000140"},{"type":"message","user":"U0XPR4NP4","text":"So, 'participating in PBFT', I'd say no, unless you're a validating peer, you shouldn't be in the white list, so we shouldn't process PBFT messages from you.  There's no technical reason why state transfer could not also poll non-validating peers for blocks, in the event of state transfer though.","ts":"1460407073.000141"},{"type":"message","user":"U0XRC0KLH","text":"ok.  that's what I figured -- there's two kinds of nodes: \"validating peers\" and \"clients\", right?","ts":"1460407097.000142"},{"type":"message","user":"U0XRC0KLH","text":"if you're not a validating peer, you're not going to get the blockchain, period","ts":"1460407108.000143"},{"type":"message","user":"U0XPR4NP4","text":"Well, non-validating peers do get a copy of the blockchain, but not the state","ts":"1460407129.000144"},{"type":"message","user":"U0XPR4NP4","text":"I think I would consider a \"client' to be someone interacting with the REST interface","ts":"1460407151.000145"},{"type":"message","user":"U0XPR4NP4","text":"and the types of peers to be \"validating\" and \"non-validating\"","ts":"1460407161.000146"},{"type":"message","user":"U0XPR4NP4","text":"Where \"validating\" peers execute transactions and participate in consensus, and \"non-validating\" peers can be connected to by \"clients\", and keep a copy of the blockchain, but not state","ts":"1460407189.000147"},{"type":"message","user":"U0XPR4NP4","text":"(This is of course all 'as it stands today', not necessarily a reflection of how things should be)","ts":"1460407213.000148"},{"type":"message","user":"U0XRC0KLH","text":"I'm not sure I understand what a non-validating peer is, then","ts":"1460407273.000149"},{"type":"message","user":"U0XPR4NP4","text":"[I'll also point out, I'm not sure that \"non-validating peers\" actually _work_ with PBFT, I think the integration is only in noops]","ts":"1460407292.000150"},{"type":"message","user":"U0XRC0KLH","text":"-ah-","ts":"1460407304.000151"},{"type":"message","user":"U0XRC0KLH","text":"ok.","ts":"1460407305.000152"},{"type":"message","user":"U0XRC0KLH","text":"um, can you talk voice?","ts":"1460407310.000153"},{"type":"message","user":"U0XPR4NP4","text":"Sure","ts":"1460407313.000154"},{"type":"message","user":"U0XRC0KLH","text":"maybe better than IM","ts":"1460407314.000155"},{"type":"message","user":"U0XRC0KLH","text":"6178695700 ?","ts":"1460407321.000156"},{"type":"message","user":"U0XRC0KLH","text":"or ph#","ts":"1460407323.000157"},{"user":"U0S5KF44D","type":"message","subtype":"channel_join","text":"<@U0S5KF44D|keithsmith> has joined the channel","ts":"1460407523.000158"},{"type":"message","user":"U0XRC0KLH","text":"sorry, lost you","ts":"1460407783.000159"},{"type":"message","user":"U0XRC0KLH","text":"can you call?  or if you give me a ph# I can call","ts":"1460407788.000160"},{"type":"message","user":"U0XPR4NP4","text":"Think I lost you again","ts":"1460408124.000161"},{"type":"message","user":"U0XRC0KLH","text":"dialing","ts":"1460408141.000162"},{"type":"message","user":"U0XPR4NP4","text":"Signed-off-by: You Name &lt;youremail@domain&gt;","ts":"1460408436.000163"},{"type":"message","user":"U0XRC0KLH","text":"geennady laventman","ts":"1460408439.000164"},{"user":"U0ZHVB1UP","type":"message","subtype":"channel_join","text":"<@U0ZHVB1UP|akakoudakis> has joined the channel","ts":"1460412052.000165"},{"user":"U0Z3BE0F5","type":"message","subtype":"channel_join","text":"<@U0Z3BE0F5|mcrafols> has joined the channel","ts":"1460446919.000166"},{"type":"message","user":"U0XR6J961","text":"<@U0XPR4NP4>: i think we need to make state transfer a bit more proactive - I created a test where i drop a set of commit messages to all but one correct replica (i.e. only that replica gets a commit certificate and executes), and then only that replica can keep on executing - everybody else is stuck","ts":"1460460900.000167"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: Could you elaborate a bit on that scenario?  The way I read it, is that you have a 4 replica network, somehow vp3 gets a commit certificate and executes, but vp0,1,2 for whatever reason don't, and do not execute.  You're saying the network then stalls? When vp0,1,2 have no execution at that sequence number, I would expect for progress to stop, and a view change timer to trigger, which would then get vp0,1,2 to recover.  I assume I'm missing something here?","ts":"1460468115.000168"},{"type":"message","user":"U0XR6J961","text":"let me gist the test","ts":"1460468215.000169"},{"type":"message","user":"U0XR6J961","text":"<https:\/\/gist.github.com\/f9382b0bc860b2a071755a9a64b2953c>","ts":"1460468229.000170"},{"type":"message","user":"U0XR6J961","text":"vp3 is down (byzantine), vp1 operates normally, vp0 and vp2 operate \"normally*\"; they don't receive commits from anybody","ts":"1460468298.000171"},{"type":"message","user":"U0XPR4NP4","text":"Is this for `TestReplicaCrash1` or `TestReplicaCrash2`?","ts":"1460469026.000172"},{"type":"message","user":"U0XR6J961","text":"replicacrash2","ts":"1460469036.000173"},{"type":"message","user":"U0XR6J961","text":"oh i should have gisted just the section","ts":"1460469057.000174"},{"type":"message","user":"U0XPR4NP4","text":"Sorry, was looking at `TestReplicaCrash1`, let me see...","ts":"1460469094.000175"},{"type":"message","user":"U0XPR4NP4","text":"Line 967\n\n```\n\t\tif filterMsg &amp;&amp; dst != -1 &amp;&amp; dst != 1 &amp;&amp; pm.GetCommit() != nil {\n```","ts":"1460469221.000176"},{"type":"message","user":"U0XPR4NP4","text":"That looks to me like it is filtering all commit messages? I suspect one of those dst filters should be different?","edited":{"user":"U0XPR4NP4","ts":"1460469307.000000"},"ts":"1460469246.000177"},{"type":"message","user":"U0XPR4NP4","text":"Oh, wait, nevermind","ts":"1460469264.000178"},{"type":"message","user":"U0XPR4NP4","text":"(Sorry, somehow read `-1` in both checks)","ts":"1460469429.000182"},{"type":"message","user":"U0XPR4NP4","text":"But I still think this is a view change scenario","ts":"1460469436.000183"},{"type":"message","user":"U0XPR4NP4","text":"And my suspicion is that this test is exiting before the view change timer can fire","ts":"1460469463.000184"},{"type":"message","user":"U0XR6J961","text":"i see","ts":"1460469492.000185"},{"type":"message","user":"U0XPR4NP4","text":"In fact, I don't see how this could be fixed by state transfer, we've only had one execution, and we need at least f+1 same results to trust it.","ts":"1460469796.000186"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1460469808.000187"},{"type":"message","user":"U0XR6J961","text":"so a view change should clear that up","ts":"1460469828.000188"},{"type":"message","user":"U0XPR4NP4","text":"Right","ts":"1460469870.000189"},{"user":"U0N25BLQH","type":"message","subtype":"channel_join","text":"<@U0N25BLQH|carmania> has joined the channel","ts":"1460472096.000190"},{"type":"message","user":"U0XR6J961","text":"<@U0XPR4NP4>: you around?","ts":"1460477549.000191"},{"type":"message","user":"U0XR6J961","text":"jyellick: the view change half solves it","ts":"1460477570.000192"},{"type":"message","user":"U0XR6J961","text":"jyellick: because the log rolls over at view change, there are no null requests included in the new-view message, so the view change timer expires","ts":"1460477638.000193"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> I think I'm lost again.  The view change timer should be reset once the new-view message is processed.  I would not expect null requests from that scenario, shouldn't everyone reprocess that commit that was dropped, then the new requests that they already prepared, so there should be no gaps, and no null requests.  I'm not seeing why a timer should be expiring.","ts":"1460477956.000194"},{"type":"message","user":"U0XR6J961","text":"so far we've reset the timer only when a request executes","ts":"1460478543.000195"},{"type":"message","user":"U0XPR4NP4","text":"We might want to change that, but I would expect for requests to be executing after this view change? vp1 has 1 committed, and 2 outstanding, and the rest have 3 outstanding, so there should be an execution everywhere?","ts":"1460478678.000196"},{"type":"message","user":"U0XR6J961","text":"If the timer expires before it receives a valid NEW-VIEW message for\nv + 1 or before it executes a request in the new view that it had not executed\npreviously, it starts the view change for view v + 2 but this time it will wait 2T\nbefore starting a view change for view v + 3.","ts":"1460478685.000197"},{"type":"message","user":"U0XR6J961","text":"so what happens is that vp1's new view timer expires (nothing executed, because it actually executed all previously), and vp0's timer expires because it has a request outstanding that nobody processed yet","ts":"1460478735.000198"},{"type":"message","user":"U0XPR4NP4","text":"Sounds reasonable, but is that a problem? If your test is looking for executions?  Also, why didn't vp0 rebroadcast that request after the view change?","ts":"1460478846.000199"},{"type":"message","user":"U0XPR4NP4","text":"[I'd agree though, that it's bad if having no outstanding requests causes us to view-change indefinitely]","ts":"1460478885.000200"},{"type":"message","user":"U0XR6J961","text":"yea, i'm looking at executions","ts":"1460479639.000201"},{"type":"message","user":"U0XR6J961","text":"we also don't have a rebroadcast","ts":"1460479656.000202"},{"type":"message","user":"U0XPR4NP4","text":"Look for `resubmitRequests` at the end of accepting a new view","ts":"1460479811.000203"},{"type":"message","user":"U0XPR4NP4","text":"It's implemented in `pbft-core.go` and invoked in `viewchange.go` in `processNewView2`","ts":"1460479887.000204"},{"type":"message","user":"U0XR6J961","text":"yea, that only happens for requests that are at the new primary","ts":"1460479897.000205"},{"type":"message","user":"U0XPR4NP4","text":"Ah, I see","ts":"1460479942.000206"},{"type":"message","user":"U0XPR4NP4","text":"And this is not addressed by your complaints work?","ts":"1460479963.000207"},{"type":"message","user":"U0XR6J961","text":"not for pure pbft","ts":"1460479976.000208"},{"type":"message","user":"U0XPR4NP4","text":"(Maybe a view change should trigger something in that path?)","ts":"1460479981.000209"},{"type":"message","user":"U0XPR4NP4","text":"But in pure pbft all replicas should receive all requests? So the primary should have that request in its store?","ts":"1460480033.000210"},{"type":"message","user":"U0XR6J961","text":"well, we changed that :confused:","ts":"1460480047.000211"},{"type":"message","user":"U0XR6J961","text":"in any case, these are two separate issues","ts":"1460480059.000212"},{"type":"message","user":"U0XR6J961","text":"even if there is no outstanding request, there are view changes","ts":"1460480079.000213"},{"type":"message","user":"U0XPR4NP4","text":"Agreed.  I'm having trouble parsing that comment:\n\n```\nIf the timer expires before it receives a valid NEW-VIEW message for\nv + 1 or before it executes a request in the new view that it had not executed\npreviously, it starts the view change ...\n```\n\nIt says \"or\",  but how could we execute a request in the new view before receiving a valid NEW-VIEW message?","edited":{"user":"U0XPR4NP4","ts":"1460480329.000000"},"ts":"1460480303.000214"},{"type":"message","user":"U0XR6J961","text":"yea, i don't know","ts":"1460482477.000216"},{"type":"message","user":"U0XR6J961","text":"there is something weird with the mock test net","ts":"1460485361.000217"},{"type":"message","user":"U0XPR4NP4","text":"I think I might know what it is","ts":"1460485543.000226"},{"type":"message","user":"U0XR6J961","text":"sorry, i'm struggling with slack","ts":"1460485559.000227"},{"type":"message","user":"U0XR6J961","text":"<https:\/\/gist.github.com\/f88cb52559f01789e5e192ea710ae852>","ts":"1460485568.000229"},{"type":"message","user":"U0XR6J961","text":"`\u001b[36m20:15:10.215 [consensus\/obcpbft] maybeSendCommit -&gt; DEBU 481\u001b[0m Replica 1 broadcasting commit for view=1\/seqNo=3`","ts":"1460485604.000230"},{"type":"message","user":"U0XPR4NP4","text":"The call to `makePBFTNetwork` creates a convenience slice, `pbftEndpoints` which the tests can refer to so that they're not constantly having to type assert","ts":"1460485606.000231"},{"type":"message","user":"U0XR6J961","text":"but:","ts":"1460485607.000232"},{"type":"message","user":"U0XPR4NP4","text":"But the network is still backed by the `endpoints` slice from the base mock implementation","ts":"1460485631.000233"},{"type":"message","user":"U0XPR4NP4","text":"So you need to replace the reference in both slices","ts":"1460485642.000234"},{"type":"message","user":"U0XR6J961","text":"`[36m20:15:10.697 [consensus\/obcpbft] recvCommit -&gt; DEBU 4f2\u001b[0m Replica 2 received commit from replica 1 for view=1\/seqNo=3`","ts":"1460485663.000235"},{"type":"message","user":"U0XR6J961","text":"it takes more than 400ms to deliver that message","ts":"1460485682.000236"},{"type":"message","user":"U0XR6J961","text":"including a time where no activity happens:","ts":"1460485697.000237"},{"type":"message","user":"U0XR6J961","text":"ah damn","ts":"1460485744.000238"},{"type":"message","user":"U0XR6J961","text":"wrong test","ts":"1460485747.000239"},{"type":"message","user":"U0XR6J961","text":"or wrong run","ts":"1460485750.000240"},{"type":"message","user":"U0XR6J961","text":"i ran it with -count 10","ts":"1460485767.000241"},{"type":"message","user":"U0XR6J961","text":"let me check again, there was something with a timeout and late message delivery","ts":"1460485792.000242"},{"type":"message","user":"U0XPR4NP4","text":"Ah, yeah, I really wish go did a better job making sure logs don't interleave, makes the output useless unless you run with `-v`, which is awful if the tests passes","ts":"1460485802.000243"},{"type":"message","user":"U0XR6J961","text":"oh i use -v","ts":"1460486019.000244"},{"type":"message","user":"U0XR6J961","text":"what happens without -v?","ts":"1460486026.000245"},{"type":"message","user":"U0XR6J961","text":"maybe i need to increase the timers","ts":"1460486136.000246"},{"type":"message","user":"U0XR6J961","text":"seems my laptop is weak, and many tests = slower","ts":"1460486154.000247"},{"type":"message","user":"U0XPR4NP4","text":"Without `-v`  there's no indication of where the previous tests ended and where the new one begins","ts":"1460486194.000248"},{"type":"message","user":"U0XPR4NP4","text":"Do you use `-parallel 1`?","ts":"1460486199.000249"},{"type":"message","user":"U0XR6J961","text":"but i've seen this before, long time of nothing, timer expires, later messages get delivered","ts":"1460486201.000250"},{"type":"message","user":"U0XR6J961","text":"no, i thought the default was parallel 1","ts":"1460486224.000251"},{"type":"message","user":"U0XPR4NP4","text":"So, usually when this happens, it's because that thread is stuck waiting for the pbft lock","ts":"1460486225.000252"},{"type":"message","user":"U0XPR4NP4","text":"Default is parallel $GOMAXPROCS I think","ts":"1460486240.000253"},{"type":"message","user":"U0XR6J961","text":"but that would mean that somebody else is holding it...","ts":"1460486243.000254"},{"type":"message","user":"U0XR6J961","text":"oh wow","ts":"1460486268.000255"},{"type":"message","user":"U0XR6J961","text":"how does it separate the outputs then?","ts":"1460486274.000256"},{"type":"message","user":"U0XR6J961","text":"ah, now it passed","ts":"1460486298.000257"},{"type":"message","user":"U0XPR4NP4","text":"```\nvagrant@ubuntu-1404:\/opt\/gopath\/src\/github.com\/hyperledger\/fabric$ go test -help 2&gt;&amp;1 | grep -A2 parallel\n\t-parallel n\n\t    Allow parallel execution of test functions that call t.Parallel.\n\t    The value of this flag is the maximum number of tests to run\n\t    simultaneously; by default, it is set to the value of GOMAXPROCS.\n\t    Note that -parallel only applies within a single test binary.\n\t    The 'go test' command may run tests for different packages\n\t    in parallel as well, according to the setting of the -p flag\n\t    (see 'go help build').\n```","ts":"1460486310.000258"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1460486317.000259"},{"type":"message","user":"U0XR6J961","text":"silly me, assumptions","ts":"1460486326.000260"},{"type":"message","user":"U0XR6J961","text":"well, one bug down","ts":"1460486343.000261"},{"type":"message","user":"U0XR6J961","text":"how's your messaging rework going?","ts":"1460486357.000262"},{"type":"message","user":"U0XPR4NP4","text":"Trying to fix some of these bad decisions, like having handlers instantiate the plugin, and running into dependency cycles in the imports","ts":"1460486403.000263"},{"type":"message","user":"U0XR6J961","text":"great, thanks","ts":"1460486416.000264"},{"type":"message","user":"U0XPR4NP4","text":"Do have the fanin\/out stuff written plus accompanying test","ts":"1460486416.000265"},{"type":"message","user":"U0XR6J961","text":"yea i ran into all of this","ts":"1460486429.000266"},{"type":"message","user":"U0XPR4NP4","text":"Need to talk with Jeff more, but he was tied up yesterday, and again today with visiting folks","ts":"1460486463.000267"},{"type":"message","user":"U0XR6J961","text":"so main.go:peer will have a statement that will create a consensus plugin?","ts":"1460486480.000268"},{"type":"message","user":"U0XR6J961","text":"happy to discuss with you too","ts":"1460486495.000269"},{"type":"message","user":"U0XPR4NP4","text":"Yes, so I was going to have `peer.go`s `NewPeerWithHandler` function call into `controller.InitializeConsensus` with itself (`peerImpl`) as a parameter, which would instantiate the plugin.  Then `handler` would simply refer to the singleton instance in `controller` to route things.","ts":"1460486607.000270"},{"type":"message","user":"U0XPR4NP4","text":"The problem is, that `peerImpl` isn't actually what's required, it needs to be wrapped by `helper`, which in turn references the interfaces defined in `peer`, and causes this cycle, which I'm trying to break.","ts":"1460486645.000271"},{"type":"message","user":"U0XPR4NP4","text":"One easy fix, would be to move the interfaces defined in `peer` out into some other package, which both could reference, but which reference neither, breaking the cycle","ts":"1460486682.000272"},{"type":"message","user":"U0XPR4NP4","text":"But, this would be a moderately large (if trivial) changeset outside of the consensus package, so felt like I should consult with Jeff before stepping on his toes like that.","ts":"1460486734.000273"},{"type":"message","user":"U0XR6J961","text":"yea, peer is a mixture of multiple things","ts":"1460486735.000274"},{"type":"message","user":"U0XR6J961","text":"it's the local peer operating, it is singletons for the local peer, and it is instances of connected peers","ts":"1460486782.000275"},{"type":"message","user":"U0XR6J961","text":"for inspiration, have a look at how tendermint does it - not saying we should do the same","ts":"1460486800.000276"},{"type":"message","user":"U0XR6J961","text":"they just do it entirely differently","ts":"1460486808.000277"},{"type":"message","user":"U0XR6J961","text":"but yea, large change, but necessary","ts":"1460486830.000278"},{"type":"message","user":"U0XR6J961","text":"what about having one module dealing with running a grpc endpoint, and maintaining a list of connected peers, and another module taking incoming messages from that first module, and distributing them to all registered handlers","ts":"1460486919.000279"},{"type":"message","user":"U0XR6J961","text":"and a third module (or maybe main.go) creating the switchboard, the grpc\/network facing side (taking switchboard as consumer), and the handlers (being registered\/passed to the switchboard)","ts":"1460487007.000280"},{"type":"message","user":"U0XR6J961","text":"just an idea","ts":"1460487014.000281"},{"type":"message","user":"U0XR6J961","text":"it's getting late here, so concentration is waning","ts":"1460487023.000282"},{"type":"message","user":"U0XR6J961","text":"oh yiss, tests are passing","ts":"1460487069.000283"},{"type":"message","user":"U0XR6J961","text":"so now i can start adding all the persistence stuff","ts":"1460487086.000284"},{"type":"message","user":"U0XR6J961","text":"we need more small modules - i think pbft would also benefit from this","ts":"1460487177.000285"},{"type":"message","user":"U0XPR4NP4","text":"Yes, there are a few things I really would like to see changed.  Right now, `peer` acts has this FSM code but consensus filters messages before they reach the FSM, but those filtering decisions need to be made based on the state of the FSM.  Plus, `peer` does too much together, it does the under the covers state transfer stuff, and the peerEndpoint stuff, which are such separate ideas.  It seems quite conceivable that we would want the peerEndpoint information available and none of the state transfer nonsense.","ts":"1460487185.000286"},{"type":"message","user":"U0XR6J961","text":"or at least well encapsulated interfaces","ts":"1460487194.000287"},{"type":"message","user":"U0XPR4NP4","text":"I think each of these little modules, like say peerEndpoint, statetransfer, etc. should each be in their own encapsulated piece of code.  Then, depending on the type of deployment, you pick which ones you want to glue together.","ts":"1460487235.000288"},{"type":"message","user":"U0XR6J961","text":"regarding \"what if another consensus wants to do something per new connection\": the tendermint code has an API for that as well:  `AddPeer`, `RemovePeer`, and messages coming in","ts":"1460487277.000289"},{"type":"message","user":"U0XR6J961","text":"it's a bit different, because they implement gossip in the consensus","ts":"1460487288.000290"},{"type":"message","user":"U0XR6J961","text":"and they use a lot of goroutines, which means no thorough unit tests (at least I didn't see them) (because distributed system)","ts":"1460487326.000291"},{"type":"message","user":"U0XR6J961","text":"but that could conceivably be an event","ts":"1460487341.000292"},{"type":"message","user":"U0XR6J961","text":"peer attached\/detached","ts":"1460487350.000293"},{"type":"message","user":"U0XPR4NP4","text":"Right, if we were more event driven with that, it would also eliminate the polling pattern that had to be used for the whitelisting","ts":"1460487434.000294"},{"user":"U0YM41HA5","type":"message","subtype":"channel_join","text":"<@U0YM41HA5|mandler> has joined the channel","ts":"1460534737.000295"},{"user":"U0XNB1QNA","type":"message","subtype":"channel_join","text":"<@U0XNB1QNA|davidcosta> has joined the channel","ts":"1460625542.000296"},{"type":"message","user":"U0XR6J961","text":"this executor code is complex","ts":"1460630309.000297"},{"type":"message","user":"U0XR6J961","text":"do we really need all these threads and queues?","ts":"1460630317.000298"},{"type":"message","user":"U0XR6J961","text":"i can't deal with this executor; i'm looking at how to remove it again","ts":"1460634191.000299"},{"type":"message","user":"U0XPR4NP4","text":"There's only one thread in the executor","ts":"1460639044.000300"},{"type":"message","user":"U0XPR4NP4","text":"And one queue?","ts":"1460639063.000301"},{"type":"message","user":"U0XR6J961","text":"yea, i just can't deal with it","ts":"1460639337.000302"},{"type":"message","user":"U0XR6J961","text":"way too complicated","ts":"1460639342.000303"},{"type":"message","user":"U0XPR4NP4","text":"I wouldn't be overly opposed to ripping it out of Sieve, the `Validate` stuff is pretty ugly,  without that bit of code, it would simplify a lot","ts":"1460639359.000304"},{"type":"message","user":"U0XPR4NP4","text":"But I think the simplifications it brings to pbft-core and classic\/batch are worth it","ts":"1460639423.000305"},{"type":"message","user":"U0XR6J961","text":"what kind of simplification?","ts":"1460639447.000306"},{"type":"message","user":"U0XR6J961","text":"i just ripped out a hundred lines of code, and it still seems to work","ts":"1460639461.000307"},{"type":"message","user":"U0XPR4NP4","text":"By making it synchronous?","ts":"1460639668.000308"},{"type":"message","user":"U0XPR4NP4","text":"Pushing all state modification onto a single thread simplified pbft-core a lot from a state transfer perspective.  There was also a lot of code duplication in classic\/batch.  And completely separating the pbft-core and execution bits have made it more clear (at least to me) where issues are occurring.","ts":"1460639966.000309"},{"type":"message","user":"U0XR6J961","text":"i agree, the more synchronous, the better","ts":"1460640003.000310"},{"type":"message","user":"U0XPR4NP4","text":"We'll need to support remote (which means asynchronous) execution in the future?","ts":"1460640073.000311"},{"type":"message","user":"U0XR6J961","text":"i don't know","ts":"1460640271.000312"},{"type":"message","user":"U0XR6J961","text":"i don't think it would be asynchronous","ts":"1460640286.000313"},{"type":"message","user":"U0XPR4NP4","text":"I suppose we could make it more of a synchronous RPC call, that is just not how anything works today, everything is an asynchronous message on the stream.","ts":"1460640618.000314"},{"type":"message","user":"U0XPR4NP4","text":"Maybe you could tell me specifically what you're interested in ripping out, I've been reviewing that code, and I'm not seeing a ton which is dedicated to keeping things asynchronous.","ts":"1460641848.000315"},{"type":"message","user":"U0XR6J961","text":"i'm testing what happens if i just get completely rid of the executor","ts":"1460642605.000316"},{"type":"message","user":"U0XR6J961","text":"i tried to persist the lastexec seqno, and I didn't see any obvious way how to do that with the executor","ts":"1460642719.000317"},{"type":"message","user":"U0XR6J961","text":"so my choice is: remove the complexity until I can reason about it again, and work with the code again","ts":"1460642751.000318"},{"type":"message","user":"U0XR6J961","text":"or give up and not work on the code anymore","ts":"1460642763.000319"},{"type":"message","user":"U0XPR4NP4","text":"Well, the choice seems pretty obvious.  My concern with removing the executor code is simply that some of the complexity is due to some nasty race type corner cases, and I want to make sure they aren't re-introduced","ts":"1460643346.000320"},{"type":"message","user":"U0XR6J961","text":"i agree","ts":"1460643411.000321"},{"type":"message","user":"U0XR6J961","text":"let's try to make this thing as synchronous as possible","ts":"1460643421.000322"},{"type":"message","user":"U0XR6J961","text":"if we use a channel to pipe in all messages, we can skip all locks","ts":"1460643490.000323"},{"type":"message","user":"U0XPR4NP4","text":"+1 on channels over locks","ts":"1460643505.000324"},{"type":"message","user":"U0XR6J961","text":"and we should have a way to send results for RPCs","ts":"1460643539.000325"},{"type":"message","user":"U0XR6J961","text":"i.e. once a message has been accepted into persistent custody","ts":"1460643553.000326"},{"type":"message","user":"U0XR6J961","text":"or maybe the transaction submission should only reply with a transaction uuid if it was accepted by the consensus network?","ts":"1460643593.000327"},{"type":"message","user":"U0XR6J961","text":"i don't know","ts":"1460643595.000328"},{"type":"message","user":"U0XPR4NP4","text":"I'd like to figure this out now, as it impacts #919","ts":"1460643661.000329"},{"type":"message","user":"U0XPR4NP4","text":"When a message comes in, we can reply with an error, or not, and those are our only two options.","ts":"1460643701.000330"},{"type":"message","user":"U0XPR4NP4","text":"(As the code works today)","ts":"1460643726.000331"},{"type":"message","user":"U0XR6J961","text":"i know","ts":"1460643732.000332"},{"type":"message","user":"U0XR6J961","text":"that's why I'm talking about it :simple_smile:","ts":"1460643740.000333"},{"type":"message","user":"U0XR6J961","text":"the peer code isn't in a shape to wait on some event before it will reply to the originator","ts":"1460643761.000334"},{"type":"message","user":"U0XR6J961","text":"but it should","ts":"1460643767.000335"},{"type":"message","user":"U0XPR4NP4","text":"Well, I think that is by design","ts":"1460643775.000336"},{"type":"message","user":"U0XPR4NP4","text":"gRCP supports multiple models, and the stream one was chosen explicitly because of its future scalability, I believe","ts":"1460643802.000337"},{"type":"message","user":"U0XR6J961","text":"i mean, even if we persist an incoming request to disk - we might go up in flames and the request never gets pushed to consensus","ts":"1460643802.000338"},{"type":"message","user":"U0XR6J961","text":"so we should wait until the request is prepared","ts":"1460643828.000339"},{"type":"message","user":"U0XR6J961","text":"technically","ts":"1460643831.000340"},{"type":"message","user":"U0XR6J961","text":"the transaction should come with a callback we can invoke","ts":"1460643852.000341"},{"type":"message","user":"U0XR6J961","text":"which then can send a reply to the originator","ts":"1460643863.000342"},{"type":"message","user":"U0XR6J961","text":"or a token, and somebody else stores the callback state","ts":"1460643873.000343"},{"type":"message","user":"U0XR6J961","text":"but let's fix that later","ts":"1460643892.000344"},{"type":"message","user":"U0XR6J961","text":"this is too much to fix in one go","ts":"1460643898.000345"},{"type":"message","user":"U0XPR4NP4","text":"What about simply sending a unicast message to the submitter's handle?","ts":"1460643906.000346"},{"type":"message","user":"U0XPR4NP4","text":"(Though in the case of the REST API, this would be local)","ts":"1460643963.000347"},{"type":"message","user":"U0XPR4NP4","text":"I guess that is why something token or callback based makes more sense.  In the case of a non-local gRPC connection, ie coming from an NVP, the notification should go back over gRPC, but in the case of REST, it should all be internal","ts":"1460644036.000348"},{"type":"message","user":"U0XR6J961","text":"right now REST uses grpc as well","ts":"1460644066.000349"},{"type":"message","user":"U0XPR4NP4","text":"Jeff and I were looking to rip that out today or very soon","ts":"1460644082.000350"},{"type":"message","user":"U0XR6J961","text":"which makes plenty sense, because it is just a special case of the generic NVP REST gateway","ts":"1460644089.000351"},{"type":"message","user":"U0XPR4NP4","text":"The problem is that it is a performance bottleneck, and necessarily sidesteps authentication","ts":"1460644107.000352"},{"type":"message","user":"U0XR6J961","text":"did you guys have a look at my performance branch modifications?","ts":"1460644123.000353"},{"type":"message","user":"U0XPR4NP4","text":"We have not","ts":"1460644131.000354"},{"type":"message","user":"U0XR6J961","text":"i converted the devops interface into an actual RPC","ts":"1460644139.000355"},{"type":"message","user":"U0XR6J961","text":"instead of this streaming interface","ts":"1460644148.000356"},{"type":"message","user":"U0XR6J961","text":"let gRPC handle the paralleling &amp; pipelining","ts":"1460644160.000357"},{"type":"message","user":"U0XR6J961","text":"I didn't use authentication yet, because nothing seems to use TLS anyways","ts":"1460644193.000358"},{"type":"message","user":"U0XR6J961","text":"and authentication inside of TLS is meh - no protection against MitM","ts":"1460644215.000359"},{"type":"message","user":"U0XPR4NP4","text":"I don't disagree with the idea of letting gRPC do the paralleling and pipelining, it makes a lot of sense to me, but I have to believe that the stream interface was a well thought out decision (maybe I am giving us a little too much credit though)","ts":"1460644267.000360"},{"type":"message","user":"U0XR6J961","text":"stream is fine to push consensus messages around","ts":"1460644311.000361"},{"type":"message","user":"U0XR6J961","text":"for a devops interface - why?","ts":"1460644319.000362"},{"type":"message","user":"U0XR6J961","text":"these *are* RPCs","ts":"1460644325.000363"},{"type":"message","user":"U0XR6J961","text":"submit, wait for result","ts":"1460644331.000364"},{"type":"message","user":"U0UGH3X7X","text":"i believe this is what keith smith and anya are looking at for their sdk work","ts":"1460644399.000365"},{"type":"message","user":"U0XR6J961","text":"why is the team not active in <#C0YPYBVJM>?","ts":"1460644469.000366"},{"type":"message","user":"U0XR6J961","text":"why aren't any of these design deliberations a topic of discussion in <#C0YPYBVJM>?","ts":"1460644496.000367"},{"type":"message","user":"U0UGH3X7X","text":"customer meeting in RTP this week","ts":"1460644505.000368"},{"type":"message","user":"U0XR6J961","text":"sure, but clearly people are working\/thinking about things","ts":"1460644524.000369"},{"type":"message","user":"U0UGH3X7X","text":"true, although we might need to prod people to participate","ts":"1460644557.000370"},{"type":"message","user":"U0XR6J961","text":"this is supposed to be an open and distributed project","ts":"1460644601.000371"},{"type":"message","user":"U0XR6J961","text":"and it absolutely doesn't feel that way","ts":"1460644613.000372"},{"user":"U10MVHVHQ","type":"message","subtype":"channel_join","text":"<@U10MVHVHQ|inabatk> has joined the channel","ts":"1460646423.000373"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: Are you still around?","ts":"1460649234.000374"},{"type":"message","user":"U0XR6J961","text":"i am","ts":"1460649239.000375"},{"type":"message","user":"U0XPR4NP4","text":"In `pbft-core.go` there `innerBroadcast` call","ts":"1460649249.000376"},{"type":"message","user":"U0XPR4NP4","text":"First, we `instance.consumer.broadcast`, then we `instance.recvMsgSync` if we are supposed to send to ourselves as well","ts":"1460649277.000377"},{"type":"message","user":"U0XPR4NP4","text":"Imagine we are running with 3 replicas up (one failed), we broadcast a checkpoint, which another replica receives, and moves its watermarks, and starts sending us requests above our high watermark, because we have not processed the checkpoint ourselves yet","ts":"1460649386.000378"},{"type":"message","user":"U0XPR4NP4","text":"This is what I am observing in the stress test now, and it seems to break our network","ts":"1460649442.000379"},{"type":"message","user":"U0XR6J961","text":"do we drop the lock around `broadcast`?","ts":"1460649443.000380"},{"type":"message","user":"U0XR6J961","text":"i changed this stuff in my persistence code anyways","ts":"1460649460.000381"},{"type":"message","user":"U0XPR4NP4","text":"No, though I'm not sure why it would matter? Since these are separate processes","ts":"1460649476.000382"},{"type":"message","user":"U0XR6J961","text":"because if we don't drop the lock, we shouldn't process the new requests or checkpoints until we processed our own","ts":"1460649511.000383"},{"type":"message","user":"U0XR6J961","text":"i.e. broadcast and processing of our own message should be atomic","ts":"1460649526.000384"},{"type":"message","user":"U0XPR4NP4","text":"Ah, I see, hmmm","ts":"1460649534.000385"},{"type":"message","user":"U0XR6J961","text":"maybe others moved forward more quickly?","ts":"1460649556.000386"},{"type":"message","user":"U0XR6J961","text":"or does that happen for all replicas?","ts":"1460649561.000387"},{"type":"message","user":"U0XPR4NP4","text":"We definitely do retain the lock, so I am not sure why this is happening","ts":"1460649702.000388"},{"type":"message","user":"U0XPR4NP4","text":"So, one replica falls behind because it is simply slower than the rest, and we are being flooded with requests.  And one replica ends up getting new pre-prepares for sequence numbers that are outside of its watermarks, but the lock should prevent that.","edited":{"user":"U0XPR4NP4","ts":"1460649786.000000"},"ts":"1460649779.000389"},{"type":"message","user":"U0XR6J961","text":"yea so what is going on","ts":"1460649933.000391"},{"type":"message","user":"U0XPR4NP4","text":"So I think this is what's happening\n\nvp0 - send checkpoint\nvp0 - receive vp0 checkpoint\nvp1 - send checkpoint\nvp1 - receive vp1 checkpoint\nvp2 - send checkpoint\nvp2 - receive vp0,vp1,vp2 checkpoint\nvp2 - move watermarks and send pre-prepare\nvp0,1 - receive vp2 preprepare and ignore\n\nThis should trigger a view change, which is not great, but it should not lock up the network","ts":"1460650040.000392"},{"type":"message","user":"U0XR6J961","text":"yea there is an issue that PBFT glances over","ts":"1460650094.000393"},{"type":"message","user":"U0XR6J961","text":"it assumes an infinite \"incoming messages\" store","ts":"1460650110.000394"},{"type":"message","user":"U0XR6J961","text":"and picks out the ones it can operate on","ts":"1460650118.000395"},{"type":"message","user":"U0XR6J961","text":"<@U0XPR4NP4>: i'm trying to understand how in your code, pbft will trigger a state transfer","ts":"1460650796.000396"},{"type":"message","user":"U0XR6J961","text":"something with `weakCheckpointSetOutOfRange`","ts":"1460650812.000397"},{"type":"message","user":"U0XPR4NP4","text":"Yes","ts":"1460650853.000398"},{"type":"message","user":"U0XR6J961","text":"so that sets `skipInProgress`","ts":"1460650886.000399"},{"type":"message","user":"U0XPR4NP4","text":"The code tracks the last checkpoint message which was above our watermarks, for each replica.","ts":"1460650886.000400"},{"type":"message","user":"U0XPR4NP4","text":"Once f+1 replicas agree that there is a checkpoint above our watermarks, then it sets `skipInProgress` so that PBFT knows that it is out of date.","ts":"1460650931.000401"},{"type":"message","user":"U0XR6J961","text":"right","ts":"1460650944.000402"},{"type":"message","user":"U0XR6J961","text":"but how does the state transfer start?","ts":"1460650951.000403"},{"type":"message","user":"U0XPR4NP4","text":"Once PBFT observes a weak checkpoint, so, a valid state, then it tells the executor to `SkipTo` that checkpoint ID","ts":"1460650965.000404"},{"type":"message","user":"U0XR6J961","text":"ah!","ts":"1460650983.000405"},{"type":"message","user":"U0XR6J961","text":"but isn't that the same?","ts":"1460650989.000406"},{"type":"message","user":"U0XPR4NP4","text":"There's a comment in there that we should reprocess in case it is the same, but it is not necessarily.","ts":"1460651011.000407"},{"type":"message","user":"U0XPR4NP4","text":"We could have f+1 checkpoints for the same sequence number with different ids, or we could have 3 checkpoints for different sequence numbers, all of which are above our watermarks.","ts":"1460651048.000408"},{"type":"message","user":"U0XPR4NP4","text":"Usually, they will be the same, but not always.","ts":"1460651069.000409"},{"type":"message","user":"U0XR6J961","text":"ah","ts":"1460651087.000410"},{"type":"message","user":"U0XR6J961","text":"<@U0XPR4NP4>: i think we need to set `activeView = true` when we do `skipTo()`","ts":"1460654035.000411"},{"type":"message","user":"U0XR6J961","text":"do you agree?","ts":"1460654038.000412"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I think you're right","ts":"1460654058.000413"},{"type":"message","user":"U0XR6J961","text":"how do all of these things work, if we have so many bugs everywhere? :simple_smile:","ts":"1460654087.000414"},{"type":"message","user":"U0XPR4NP4","text":"It is kind of surprising...","ts":"1460654123.000415"},{"type":"message","user":"U0XR6J961","text":"i guess we should also update our view","ts":"1460654128.000416"},{"type":"message","user":"U0XR6J961","text":"but how","ts":"1460654130.000417"},{"type":"message","user":"U0XR6J961","text":"well, i can't just set activeView","ts":"1460654167.000418"},{"type":"message","user":"U0XR6J961","text":"i need to set view to the right view","ts":"1460654172.000419"},{"type":"message","user":"U0XR6J961","text":"(`TestFallBehind`)","ts":"1460654188.000420"},{"type":"message","user":"U0XPR4NP4","text":"Yes, this is one of those pieces of the paper that I dislike, it is inconsistent with respect to 'falling behind'","ts":"1460654201.000421"},{"type":"message","user":"U0XPR4NP4","text":"Per the paper, we are supposed to simply reject all messages with sequence numbers outside of our watermarks, but later it refers to checking checkpoints above the watermarks, I had asked Marko, and he thought the f+1 checkpoints above was a good solution, but it kind of ignores the view thing","ts":"1460654286.000422"},{"type":"message","user":"U0XR6J961","text":"replica 3 is effectively disconnected (doesn't receive seqno=1 message)","ts":"1460654424.000423"},{"type":"message","user":"U0XR6J961","text":"then it goes into view change","ts":"1460654429.000424"},{"type":"message","user":"U0XR6J961","text":"later it observes checkpoints, catches up","ts":"1460654439.000425"},{"type":"message","user":"U0XR6J961","text":"but it is still in view change","ts":"1460654446.000426"},{"type":"message","user":"U0XPR4NP4","text":"Right","ts":"1460654467.000427"},{"type":"message","user":"U0XPR4NP4","text":"It seems like we not only need to track the out of bounds checkpoints, we then also need to get f+1 agreement on the current view? We could then set it active, to whatever that view happens to be.","ts":"1460654714.000428"},{"type":"message","user":"U0XPR4NP4","text":"We are still never really promised that we have not already missed some requests, we are basically hoping that we moved our window in time, but I don't think we can do better than that without some significant modifications to the protocol.  Effectively we need a view change to be certain of it.","ts":"1460654827.000429"},{"type":"message","user":"U0XR6J961","text":"or we keep messages around","ts":"1460654953.000430"},{"type":"message","user":"U0XR6J961","text":"yea i don't know","ts":"1460654976.000431"},{"type":"message","user":"U0XR6J961","text":"will you send me an invite for the discussion with jeff?","ts":"1460654987.000432"},{"user":"U0UFDAS91","type":"message","subtype":"channel_join","text":"<@U0UFDAS91|christophera> has joined the channel","ts":"1460655002.000433"},{"type":"message","user":"U0XPR4NP4","text":"Let me ask Jeff if he has a better idea of when he'll free up.  Would send the invite now but I don't have a firm time yet","ts":"1460655041.000434"},{"type":"message","user":"U0XPR4NP4","text":"[Also, we are somehow deadlocking when the view change timer fires, I see `Replica 2 view change timer expired, waiting for lock with expired count 2` and then the messages stop, also seeing `Replica 1 view change timer expired, waiting for lock with expired count 2` in the same network, which basically locks up the network.  This is in classic, not seeing anywhere where someone is obviously blocked waiting for the lock]","ts":"1460655237.000435"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: Jeff says 4pm EST","ts":"1460655316.000436"},{"type":"message","user":"U0XPR4NP4","text":"(Will send out a notes invite shortly)","ts":"1460655559.000437"},{"user":"U0N20TJUA","type":"message","subtype":"channel_join","text":"<@U0N20TJUA|guruprasath> has joined the channel","ts":"1460658798.000438"},{"user":"U0NCW1DPX","type":"message","subtype":"channel_join","text":"<@U0NCW1DPX|gengjh> has joined the channel","ts":"1460682515.000439"},{"user":"U0ULX737C","type":"message","subtype":"channel_join","text":"<@U0ULX737C|vipinb> has joined the channel","ts":"1460683979.000440"},{"user":"U0TFEHX8E","type":"message","subtype":"channel_join","text":"<@U0TFEHX8E|sheehan> has joined the channel","ts":"1460684258.000441"},{"user":"U10UX43K6","type":"message","subtype":"channel_join","text":"<@U10UX43K6|nicholas> has joined the channel","ts":"1460712289.000442"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: Are you around?","ts":"1460732318.000443"},{"user":"U0KPFAZNF","type":"message","subtype":"channel_join","text":"<@U0KPFAZNF|ghaskins> has joined the channel","ts":"1460739984.000444"},{"user":"U10PD21K7","type":"message","subtype":"channel_join","text":"<@U10PD21K7|ajlopez> has joined the channel","ts":"1460757970.000445"},{"user":"U11BP64LD","type":"message","subtype":"channel_join","text":"<@U11BP64LD|nathonline> has joined the channel","ts":"1460916592.000002"},{"user":"U0KM61BCP","type":"message","subtype":"channel_join","text":"<@U0KM61BCP|cbf> has joined the channel","ts":"1460923450.000003"},{"user":"U11C7DZU5","type":"message","subtype":"channel_join","text":"<@U11C7DZU5|mark.moir> has joined the channel","ts":"1460930487.000004"},{"type":"message","user":"U0XR6J961","text":"with my remove-executor changes most seems to work fine","ts":"1460982393.000005"},{"type":"message","user":"U0XR6J961","text":"just that the state transfer parts still trigger a view change, and then the new view doesn't match anybody else","ts":"1460982429.000006"},{"type":"message","user":"U0XR6J961","text":"and `TestReplicaCrash2` is dropping requests, because they're not being broadcast, but that's an old change","ts":"1460982464.000007"},{"type":"message","user":"U0XR6J961","text":"maybe i should just change the test evaluation","ts":"1460982470.000008"},{"type":"message","user":"U0XR6J961","text":"currently waiting on the docker image to build to run behave tests","ts":"1460982488.000009"},{"type":"message","user":"U0XR6J961","text":"statetransfer and pbft are way too intertwined","ts":"1461080386.000010"},{"type":"message","user":"U0XPR4NP4","text":"How so?","ts":"1461085265.000011"},{"type":"message","user":"U0XPR4NP4","text":"(I'm assuming you mean in our code, and not as a general protocol deficiency)","ts":"1461085460.000012"},{"user":"U0VJM7950","type":"message","subtype":"channel_join","text":"<@U0VJM7950|jonathan.mohan> has joined the channel","ts":"1461098274.000013"},{"user":"U0N3AJSSU","type":"message","subtype":"channel_join","text":"<@U0N3AJSSU|kelly> has joined the channel","ts":"1461151348.000014"},{"type":"message","user":"U0XR6J961","text":"yey, finally at a point where i can run bdd tests again","ts":"1461163865.000015"},{"type":"message","user":"U0UGH3X7X","text":"what did you do ?  I'm running into connection failed  on login  in behave today","ts":"1461163917.000016"},{"type":"message","user":"U0XR6J961","text":"i mean after all my code changes","ts":"1461163955.000017"},{"type":"message","user":"U0XR6J961","text":"<https:\/\/github.com\/corecode\/fabric\/commits\/revert-executor>","attachments":[{"service_name":"GitHub","title":"corecode\/fabric","title_link":"https:\/\/github.com\/corecode\/fabric\/commits\/revert-executor","text":"Blockchain fabric code","fallback":"GitHub: corecode\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400","from_url":"https:\/\/github.com\/corecode\/fabric\/commits\/revert-executor","thumb_width":400,"thumb_height":400,"id":1}],"ts":"1461164000.000018"},{"type":"message","user":"U0XR6J961","text":"yes, i know, a lot of commits","ts":"1461164106.000020"},{"type":"message","user":"U0XR6J961","text":"jyellick, tuand: do you want to discuss the implementation for #919, #973, etc.?","ts":"1461167066.000021"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: Yes, I've been thinking on it, haven't completely figured it out in my head yet","ts":"1461167110.000022"},{"type":"message","user":"U0XPR4NP4","text":"My big first question would be, do you think that the plugins should share the single PBFT thread?","ts":"1461167128.000023"},{"type":"message","user":"U0XR6J961","text":"what plugins?","ts":"1461167163.000024"},{"type":"message","user":"U0UGH3X7X","text":"thursday ?  i really need to finish #756 getting through the behave tests","ts":"1461167179.000025"},{"type":"message","user":"U0XR6J961","text":"i think we need to continually discuss design and implementation strategies","ts":"1461167210.000026"},{"type":"message","user":"U0XPR4NP4","text":"By plugins I mean classic\/batch\/sieve","ts":"1461167376.000027"},{"type":"message","user":"U0XR6J961","text":"ah yes","ts":"1461167470.000028"},{"type":"message","user":"U0XR6J961","text":"ideally it would just be a state machine","ts":"1461167651.000029"},{"type":"message","user":"U0XR6J961","text":"event driven","ts":"1461167653.000030"},{"type":"message","user":"U0XR6J961","text":"and some wrapper around it serialized the events coming in","ts":"1461167679.000031"},{"type":"message","user":"U0XR6J961","text":"e.g. via channel, or lock","ts":"1461167687.000032"},{"type":"message","user":"U0XR6J961","text":"depending on whether the events should return an error code, or not","ts":"1461167709.000033"},{"type":"message","user":"U0XR6J961","text":"and then maybe we even use a FSM tool, instead of open coding the state machine as it is right now","ts":"1461167752.000034"},{"type":"message","user":"U0XR6J961","text":"not talking about per-request state","ts":"1461167757.000035"},{"type":"message","user":"U0XR6J961","text":"but about \"in view change\", \"waiting for checkpoint\", etc.","ts":"1461167784.000036"},{"type":"message","user":"U0XR6J961","text":"timer expiring then would also be an event being injected","ts":"1461167824.000037"},{"type":"message","user":"U0XPR4NP4","text":"(have to run, will respond in a bit)","ts":"1461168007.000038"},{"type":"message","user":"U0UGH3X7X","text":"say for a timer expired event,  does that need to go the front of the queue ?","ts":"1461168453.000039"},{"type":"message","user":"U0XR6J961","text":"whatever the system is that implements the event delivery, it would create\/deliver the timeout event at the right time","ts":"1461168701.000040"},{"type":"message","user":"U0XR6J961","text":"i think we have to implement stronger separation of concerns - smaller structures","ts":"1461168757.000041"},{"type":"message","user":"U0UGH3X7X","text":"yes,  i'd like to see smaller components as well","ts":"1461170717.000042"},{"type":"message","user":"U0UGH3X7X","text":"different separation than what jason's done with executor ?","ts":"1461170758.000043"},{"type":"message","user":"U0XR6J961","text":"i think separated code should not have its own threads\/etc","ts":"1461171038.000044"},{"type":"message","user":"U0XR6J961","text":"ideally","ts":"1461171041.000045"},{"type":"message","user":"U0XR6J961","text":"because that just makes it so complicated to reason about","ts":"1461171064.000046"},{"type":"message","user":"U0XR6J961","text":"i don't even understand our test framework anymore","ts":"1461171071.000047"},{"type":"message","user":"U0UGH3X7X","text":"behave :stuck_out_tongue_winking_eye:","ts":"1461171134.000048"},{"type":"message","user":"U0XR6J961","text":"yea that doesn't work well either","ts":"1461171170.000049"},{"type":"message","user":"U0XR6J961","text":"some docker containers fail in my tests","ts":"1461171181.000050"},{"type":"message","user":"U0XR6J961","text":"not always","ts":"1461171201.000051"},{"type":"message","user":"U0XR6J961","text":"just sometimes","ts":"1461171203.000052"},{"type":"message","user":"U0UGH3X7X","text":"not to hijack this conversation too much but i posted a behave issue in <#C0YPYBVJM> a couple days ago ... we should really have a #testing or #tools channel","ts":"1461171278.000053"},{"type":"message","user":"U0UGH3X7X","text":"coming back to discussion, so basically components talking to each other via some sort of queues ?","ts":"1461171319.000054"},{"type":"message","user":"U0XR6J961","text":"wouldn't that be <#C0YPYBVJM>?","ts":"1461171322.000055"},{"type":"message","user":"U0XR6J961","text":"ideally no async communication as well","ts":"1461171343.000056"},{"type":"message","user":"U0XR6J961","text":"i prefer as much as possible to be synchronous and encapsulated","ts":"1461171354.000057"},{"type":"message","user":"U0XR6J961","text":"and we need to come up with a better solution than marshalling\/unmarshalling data left and right","ts":"1461171399.000058"},{"type":"message","user":"U0XR6J961","text":"it makes sense when shipping over network","ts":"1461171407.000059"},{"type":"message","user":"U0XR6J961","text":"internally it just breaks static type checking","ts":"1461171424.000060"},{"type":"message","user":"U0UGH3X7X","text":"but then haven't we serialized everything ?","ts":"1461171496.000061"},{"type":"message","user":"U0XR6J961","text":"yes!","ts":"1461171668.000062"},{"type":"message","user":"U0XR6J961","text":"all serial = no more internal races","ts":"1461171695.000063"},{"type":"message","user":"U0XR6J961","text":"oh my","ts":"1461171730.000064"},{"type":"message","user":"U0UGH3X7X","text":"i thought we were talking scalability issues as well","ts":"1461171745.000065"},{"type":"message","user":"U0XR6J961","text":"now my consensus helper is supposed to signal to the consenter that the state transfer has finished","ts":"1461171758.000066"},{"type":"message","user":"U0XR6J961","text":"but the helper doesn't know about the consenter - only vice versa","ts":"1461171772.000067"},{"type":"message","user":"U0XR6J961","text":"i give up","ts":"1461171842.000068"},{"type":"message","user":"U0XR6J961","text":"this code wants to be hacked, not carefully designed","ts":"1461171857.000069"},{"type":"message","user":"U0XR6J961","text":"now i want to know whether state transfer works","ts":"1461172464.000070"},{"type":"message","user":"U0XPR4NP4","text":"Back.  Maybe you could help me understand why you care if\/when state transfer finishes? In general, I tried to be careful with the executor to make sure that state transfer was an atomic non-blocking operation from the orderer perspective","ts":"1461173529.000071"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: With respect to synchronous vs asynchronous, I agree that within some unit of code, call it module say, that it makes sense to keep everything entirely synchronous.  The fact that it is possible for multiple handlers to have threads active inside PBFT at the same time today is a real problem, and there's just too much surface area for bugs to get in, we need to fix this.  The intent with the fabric code from a design perspective tries to follow the actor pattern, and it seems like it would be a good solution to this for PBFT.  Have the external methods simply queue messages into channels, then have a single thread dedicated to PBFT which selects across those channels, then performs work, and repeats.  This should eliminate all the pbft internal race bugs because everything would now be done on a single thread.  That's what I would like to implement for #919 #973","ts":"1461174175.000072"},{"type":"message","user":"U0XR6J961","text":"then let's make pbft entirely event driven","ts":"1461174230.000073"},{"type":"message","user":"U0XR6J961","text":"and a shim that allows communication with the rest of the stack","ts":"1461174250.000074"},{"type":"message","user":"U0XPR4NP4","text":"The piece where I think I diverge from slightly from you is whether execution should be synchronous to PBFT as well.  It could obviously be done either way, but I'd be in favor of keeping the asynchronous execution model, to make a later split easier.","ts":"1461174263.000075"},{"type":"message","user":"U0XR6J961","text":"that shim would also convert timeouts to events","ts":"1461174264.000076"},{"type":"message","user":"U0XR6J961","text":"no, i agree that execution does not need to be synchronous","ts":"1461174286.000077"},{"type":"message","user":"U0XPR4NP4","text":"So would you propose using something like the FSM package that is used in peer?","ts":"1461174336.000078"},{"type":"message","user":"U0XR6J961","text":"in an event driven system, the fact that the stack executed a transaction would be another event, i guess","ts":"1461174344.000079"},{"type":"message","user":"U0XR6J961","text":"that FSM package seems odd to use","ts":"1461174356.000080"},{"type":"message","user":"U0XR6J961","text":"lots of strings","ts":"1461174359.000081"},{"type":"message","user":"U0XPR4NP4","text":"Yes, that was my impression as well, and the fact that there are strings makes me think it's being implemented as reflection under the covers, which also seems slow.","ts":"1461174377.000082"},{"type":"message","user":"U0XR6J961","text":"then pbft could send another execute","ts":"1461174387.000083"},{"type":"message","user":"U0XR6J961","text":"i.e. execution would be async, but always only one execution outstanding","ts":"1461174432.000084"},{"type":"message","user":"U0XR6J961","text":"and while we're at it, we should do the same to state transfer","ts":"1461174453.000085"},{"type":"message","user":"U0XR6J961","text":"i mean the conversion to events","ts":"1461174494.000086"},{"type":"message","user":"U0XPR4NP4","text":"So help me understand this a little better.  The thing I like about the current execution model, is that in general, PBFT can treat executions as incapable of failing and atomic, even though they are not.  (Obviously this is not true for Sieve, but that is a different discussion).  If an execution can't be performed, say, because a state transfer is pending, then from PBFT's perspective, it doesn't have to care.  The only callback standard PBFT needs is the periodic checkpoint messages.  Once you switch to a model where there is only every one execution outstanding, I suppose it's PBFT who buffers the executions in the case of something like state transfer.  From a future split perspective, it seems like a queue of requests would be more scale-able, having to wait for a network round trip in between every execution seems problematic.","ts":"1461174785.000087"},{"type":"message","user":"U0XR6J961","text":"i don't think there will ever be such a split","ts":"1461174838.000088"},{"type":"message","user":"U0XR6J961","text":"realistically speaking","ts":"1461174857.000089"},{"type":"message","user":"U0XPR4NP4","text":"I thought this was the whole endorser sort of model? Where there would be consensus as a service which is simply doing ordering, but needs to send the transaction off for execution at other nodes?","ts":"1461174903.000090"},{"type":"message","user":"U0XR6J961","text":"in that case the execution would be \"add this block to the list of blocks\"","ts":"1461174936.000091"},{"type":"message","user":"U0XR6J961","text":"not execution of transactions","ts":"1461174949.000092"},{"type":"message","user":"U0XR6J961","text":"i see your point though","ts":"1461174987.000093"},{"type":"message","user":"U0XR6J961","text":"but i'd prefer to have it absolutely stable before making it faster","ts":"1461175014.000094"},{"type":"message","user":"U0XPR4NP4","text":"Yes, stability certainly takes preference over speed","ts":"1461175050.000095"},{"type":"message","user":"U0XR6J961","text":"now that i hacked the code, i realize that i did have a separate thread for executions","ts":"1461175062.000096"},{"type":"message","user":"U0XR6J961","text":"i guess that's what your executor did - just that i absolutely had trouble following it","ts":"1461175084.000097"},{"type":"message","user":"U0XPR4NP4","text":"Yes, the executor removed that thread and added its own (or maybe more accurately, just moved it to its own file and structure)","ts":"1461175129.000098"},{"type":"message","user":"U0XPR4NP4","text":"So assuming we go to this event driven FSM type model","ts":"1461175167.000099"},{"type":"message","user":"U0XPR4NP4","text":"How do you see the plugins working with this?","ts":"1461175175.000100"},{"type":"message","user":"U0XPR4NP4","text":"Do they run their own separate FSM, or do they somehow attempt to extend the underlying PBFT one?","ts":"1461175201.000101"},{"type":"message","user":"U0XR6J961","text":"i don't know","ts":"1461175239.000102"},{"type":"message","user":"U0XR6J961","text":"it's all a mess","ts":"1461175242.000103"},{"type":"message","user":"U0XR6J961","text":"probably they should run their own fsm","ts":"1461175273.000104"},{"type":"message","user":"U0XR6J961","text":"or maybe not?","ts":"1461175278.000105"},{"type":"message","user":"U0XR6J961","text":"they're so tied to it","ts":"1461175283.000106"},{"type":"message","user":"U0XR6J961","text":"e.g. classic","ts":"1461175285.000107"},{"type":"message","user":"U0XPR4NP4","text":"The plugin piece is what has been making me scratch my head.  I think the core PBFT actually wouldn't be that difficult to clean up.  And I think batch and classic really would be trivial to move to their own FSM.","ts":"1461175336.000108"},{"type":"message","user":"U0XPR4NP4","text":"But Sieve actually cares about PBFT internal state, like view, and timers, which is much more difficult.","ts":"1461175357.000109"},{"type":"message","user":"U0XR6J961","text":"but what kind of fsm would that be, for classic","ts":"1461175363.000110"},{"type":"message","user":"U0XPR4NP4","text":"I think part of the problem too is maybe that the `innerStack` interface should be broken down.  There's no reason classic and batch should be implementing different execute verify sign etc. methods.  So a FSM for classic would be pretty trivial, I'm not even sure it needs more than 1 state.  Its thread listens for incoming messages, if one arrives, it delivers, and goes back to listening.","ts":"1461175534.000111"},{"type":"message","user":"U0XPR4NP4","text":"For batch, you would only have slightly more.  You're in that listen state, you wait for either a timer event, or the nth message, then inject.  Neither of them care about any of the rest of the innerstack interface.","ts":"1461175584.000112"},{"type":"message","user":"U0XR6J961","text":"right","ts":"1461175603.000113"},{"type":"message","user":"U0XR6J961","text":"i don't think the plugin should have its own thread","ts":"1461175640.000114"},{"type":"message","user":"U0XR6J961","text":"some state machine service should have that thread","ts":"1461175654.000115"},{"type":"message","user":"U0XR6J961","text":"and only delivers events to the state machine","ts":"1461175666.000116"},{"type":"message","user":"U0XPR4NP4","text":"So a plugin would register event types (and maybe additional event sources) it's interested in?","ts":"1461175764.000117"},{"type":"message","user":"U0XR6J961","text":"or it just receives them","ts":"1461175790.000118"},{"type":"message","user":"U0XPR4NP4","text":"How would you handle if the core and a plugin were both interested in the same sort of event? Plugin supersedes?","ts":"1461175796.000119"},{"type":"message","user":"U0XR6J961","text":"and optionally ignores them","ts":"1461175798.000120"},{"type":"message","user":"U0XR6J961","text":"i think an event always goes to a specific fsm","ts":"1461175833.000121"},{"type":"message","user":"U0XR6J961","text":"in the context of FSMs","ts":"1461175843.000122"},{"type":"message","user":"U0XR6J961","text":"we're far away from an event bus","ts":"1461175856.000123"},{"type":"message","user":"U0XPR4NP4","text":"I guess I'm still a little fuzzy on how say, Sieve, would be implemented in this scheme.  There's the core PBFT FSM, and it's fairly obvious how classic or batch would be implemented on top of that.  For Sieve, it could certainly inject a request into the core state machine, but how does it deal with all its other state?","ts":"1461176066.000124"},{"type":"message","user":"U0XR6J961","text":"i don't know","ts":"1461176106.000125"},{"type":"message","user":"U0XR6J961","text":"if sieve and the pbft core (as its sub-fsm) execute within the same fsm context","ts":"1461176123.000126"},{"type":"message","user":"U0XR6J961","text":"then sieve could still access the pbft internals (not saying it is a good thing)","ts":"1461176138.000127"},{"type":"message","user":"U0XR6J961","text":"not modify them","ts":"1461176150.000128"},{"type":"message","user":"U0XR6J961","text":"but inquire","ts":"1461176154.000129"},{"type":"message","user":"U0XPR4NP4","text":"Just as another thing to keep in mind, speaking with <@U0XRC0KLH> he would like a way to publish PBFT state via an external gRPC interface.  Essentially to support dashboarding, so that a) developers can more easily debug problems without having to crawl through logs b) operators can easily verify that their systems are functioning properly and making progress.","ts":"1461176269.000130"},{"type":"message","user":"U0XR6J961","text":"what kind of state would that be?","ts":"1461176392.000131"},{"type":"message","user":"U0XPR4NP4","text":"(your mentioning being able to inquire without modifying state reminded me of this)","ts":"1461176396.000132"},{"type":"message","user":"U0XPR4NP4","text":"Well, we would pick what is most useful, but I think certainly things like `lastExec`, our watermarks, if we believe we are out of sync, what view we are in, if it is active.","ts":"1461176464.000133"},{"type":"message","user":"U0XR6J961","text":"formalized logging","ts":"1461176504.000134"},{"type":"message","user":"U0XPR4NP4","text":"Ultimately for operators we'll want to boil this down to a green\/red type thing, 'this node is functioning properly' or 'this node seems to be in trouble'","ts":"1461176506.000135"},{"type":"message","user":"U0XPR4NP4","text":"But yes, formalized logging seems like a reasonable interpretation","ts":"1461176532.000136"},{"type":"message","user":"U0XPR4NP4","text":"Ultimately he would like to see it become a more system wide thing, to be able to inspect the state of the ledger, what chaincodes are deployed, etc.","ts":"1461176641.000137"},{"type":"message","user":"U0XR6J961","text":"ok, i gotta go soon","ts":"1461176859.000138"},{"type":"message","user":"U0XPR4NP4","text":"Okay, so getting quickly back to #919 #973, about what can be implemented in the short term.  It's certainly possible to convert all of the message reception into a channel, so that we can select across our view change  timer, or a message received channel.","ts":"1461176927.000139"},{"type":"message","user":"U0XPR4NP4","text":"It also wouldn't be difficult to convert the Checkpoint callback to enqueue a message which could also be selected on.","ts":"1461176972.000140"},{"type":"message","user":"U0XR6J961","text":"but should we do stuff for short term?","ts":"1461177012.000141"},{"type":"message","user":"U0XR6J961","text":"because that's been sort of the trouble","ts":"1461177021.000142"},{"type":"message","user":"U0XPR4NP4","text":"Well, I guess with the whole agile model, we should try to accomplish something concrete in this sprint.  There are a number of outstanding bugs that are killing our scale tests because we deadlock, and I think this would fix those, and I think it would put us a little closer to a real event driven fsm.","ts":"1461177096.000143"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1461177111.000144"},{"type":"message","user":"U0XR6J961","text":"do we know what deadlocks precisely?","ts":"1461177122.000145"},{"type":"message","user":"U0XPR4NP4","text":"I can enumerate some of them.  One is that because we drop the lock around executions, the executions can actually be invoked out of order","ts":"1461177157.000146"},{"type":"message","user":"U0XPR4NP4","text":"Which causes the blockchains to diverge and pbft to stop making progress","ts":"1461177180.000147"},{"type":"message","user":"U0XR6J961","text":"ah what?","ts":"1461177203.000148"},{"type":"message","user":"U0XPR4NP4","text":"I have seen it in the logs, we'll get something like\n\nexecuting\/committing seqNo 35\nexecuting\/committing seqNo 36\nexecuting\/committing seqNo 37\nexecuting\/committing seqNo 34\nexecuting\/committing seqNo 38","ts":"1461177253.000149"},{"type":"message","user":"U0XR6J961","text":"how is that possible","ts":"1461177291.000150"},{"type":"message","user":"U0XPR4NP4","text":"Well, maybe not that exactly line, sorry","ts":"1461177295.000151"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1461177298.000152"},{"type":"message","user":"U0XPR4NP4","text":"Let me get the real log","ts":"1461177301.000153"},{"type":"message","user":"U0XPR4NP4","text":"If I still have it...","ts":"1461177306.000154"},{"type":"message","user":"U0XPR4NP4","text":"Ah, damn, blew them away to run the behave tests","ts":"1461177388.000155"},{"type":"message","user":"U0XPR4NP4","text":"Yes, on line 785, we increment `lastExec`, then we drop the lock, and send the exec off","ts":"1461177478.000156"},{"type":"message","user":"U0XPR4NP4","text":"As soon as we drop that lock, another handler thread can come in, and do its own thing","ts":"1461177503.000157"},{"type":"message","user":"U0XPR4NP4","text":"And so if the thread happens to get unscheduled before we actually run the invoke, then things break, I suppose that might be fixed by simply setting the lastExec after we send the execute","ts":"1461177536.000158"},{"type":"message","user":"U0XPR4NP4","text":"But we drop and re-acquire these locks far to often, and it just invites these sorts of bugs","ts":"1461177596.000159"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1461178032.000160"},{"type":"message","user":"U0XR6J961","text":"absolutely agree","ts":"1461178037.000161"},{"type":"message","user":"U0XR6J961","text":"i think i made exec synchronous again","ts":"1461178047.000162"},{"type":"message","user":"U0XR6J961","text":"which breaks all soft of other things, because that deploy takes forever","ts":"1461178059.000163"},{"type":"message","user":"U0XPR4NP4","text":"Yes, it seems like deploys are going to need to be restricted in any sort of production system, they are such an easy DOS path","ts":"1461178164.000164"},{"type":"message","user":"U0XR6J961","text":"<https:\/\/github.com\/corecode\/fabric\/commits\/revert-executor>","attachments":[{"service_name":"GitHub","title":"corecode\/fabric","title_link":"https:\/\/github.com\/corecode\/fabric\/commits\/revert-executor","text":"Blockchain fabric code","fallback":"GitHub: corecode\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400","from_url":"https:\/\/github.com\/corecode\/fabric\/commits\/revert-executor","thumb_width":400,"thumb_height":400,"id":1}],"ts":"1461178169.000165"},{"type":"message","user":"U0XR6J961","text":"or we make deploy execution asynchronous","ts":"1461178183.000167"},{"type":"message","user":"U0XR6J961","text":"i'd love to get some feedback on this","ts":"1461178199.000168"},{"type":"message","user":"U0XR6J961","text":"ok, now i'm really out","ts":"1461178223.000169"},{"type":"message","user":"U0XR6J961","text":"byes","ts":"1461178225.000170"},{"type":"message","user":"U0XPR4NP4","text":"Was reviewing your code","ts":"1461178799.000171"},{"type":"message","user":"U0XRC0KLH","text":"we should discuss deploy.  it's being done wrong today, b\/c there's no in-state row for a deploy","ts":"1461179174.000172"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XRC0KLH>: Did I appropriately summarize your desires for the pbft state introspection interface?","ts":"1461179314.000173"},{"type":"message","user":"U0XRC0KLH","text":"uh, voice?","ts":"1461179342.000174"},{"type":"message","user":"U0XRC0KLH","text":"yes, that summary was spot-on","ts":"1461179356.000175"},{"type":"message","user":"U0XRC0KLH","text":"re: deploy","ts":"1461179361.000176"},{"type":"message","user":"U0XPR4NP4","text":"Above, I tagged you many messages above here, sorry, slack not great about that","ts":"1461179379.000177"},{"type":"message","user":"U0XRC0KLH","text":"I saw it","ts":"1461179388.000178"},{"type":"message","user":"U0XRC0KLH","text":"slack is at least good thatway","ts":"1461179393.000179"},{"type":"message","user":"U0XRC0KLH","text":"it ws fine","ts":"1461179395.000180"},{"type":"message","user":"U0XRC0KLH","text":"oof, incoming","ts":"1461179403.000181"},{"type":"message","user":"U0XRC0KLH","text":"will IM bakc","ts":"1461179404.000182"},{"type":"message","user":"U0XPR4NP4","text":"Alright","ts":"1461179407.000183"},{"type":"message","user":"U0XRC0KLH","text":"but deploy is all worng","ts":"1461179410.000184"},{"type":"message","user":"U0UGH3X7X","text":"<@U0KN2SSKE>:  <@U0ULK2JPP>  see above re: deploy","ts":"1461179468.000185"},{"user":"U0KN2SSKE","inviter":"U0UGH3X7X","type":"message","subtype":"channel_join","text":"<@U0KN2SSKE|binhn> has joined the channel","ts":"1461179475.000186"},{"user":"U0ULK2JPP","inviter":"U0UGH3X7X","type":"message","subtype":"channel_join","text":"<@U0ULK2JPP|muralisr> has joined the channel","ts":"1461179475.000187"},{"type":"message","user":"U0TFEHX8E","text":"<@U0XRC0KLH>: are you talking about <https:\/\/github.com\/hyperledger\/fabric\/issues\/1054> or something else?","edited":{"user":"U0TFEHX8E","ts":"1461179582.000000"},"ts":"1461179577.000188"},{"type":"message","user":"U0XRC0KLH","text":"right, but that doesn't go far enough","ts":"1461181349.000191"},{"type":"message","user":"U0XRC0KLH","text":"deployed chaincode needs to have a \"state\".","ts":"1461181363.000192"},{"type":"message","user":"U0XRC0KLH","text":"so for instance: \"maintenance\", \"active\"","ts":"1461181382.000193"},{"type":"message","user":"U0XRC0KLH","text":"but also, since apparently building the chaincode is taking nontrivial time, \"installed\"","ts":"1461181407.000194"},{"type":"message","user":"U0XRC0KLH","text":"erm, \"committed\"","ts":"1461181422.000195"},{"type":"message","user":"U0XRC0KLH","text":"committed == committed to state (sysibm.sysprocedures)","ts":"1461181435.000196"},{"type":"message","user":"U0XRC0KLH","text":"which causes a background thread to attempt to build the chaincode image","ts":"1461181451.000197"},{"type":"message","user":"U0XRC0KLH","text":"eventually, a tran would be run at ALL endorsers with some HIGH threshold for success, that would move the chaincode from committed to maintenance","ts":"1461181505.000198"},{"type":"message","user":"U0XRC0KLH","text":"in maintenance, only users with maintainer rights could invoke trans on it.","ts":"1461181525.000199"},{"type":"message","user":"U0XRC0KLH","text":"e.g. to call\"init\"","ts":"1461181528.000200"},{"type":"message","user":"U0XRC0KLH","text":"and then finaly, move it to \"active\" so all users with rights can access it","ts":"1461181541.000201"},{"type":"message","user":"U0XRC0KLH","text":"at a minimum, EVEN IF chaincode image creation is instant, we need maintenance and active","ts":"1461181602.000202"},{"type":"message","user":"U0XRC0KLH","text":"b\/c a single init() call might not be enough to get teh chaincode ready for use","ts":"1461181615.000203"},{"type":"message","user":"U0XRC0KLH","text":"remember that an init() call is a tran like any other, so will be limited in how many rows it can modify","ts":"1461181639.000204"},{"type":"message","user":"U0XRC0KLH","text":"this is the equiv of: when I deploy a stored-proc, I need to create the tables it accesses, and load initial data into some of them","ts":"1461181663.000205"},{"type":"message","user":"U0XRC0KLH","text":"that isnt' guaranteedto fit in a 5M shellscript","ts":"1461181673.000206"},{"type":"message","user":"U0ULK2JPP","text":"<@U0XRC0KLH>: the \u201cdeploy state\u201d caught the eye\u2026. don;t want to derail the rest of the discussion but the system chaincode (lifecycle, deploy, \u2026we can decide what to call later) will *naturally* provide the way to create a \u201cstate\u201d for deployed chaincodes.","ts":"1461181832.000207"},{"type":"message","user":"U0ULK2JPP","text":"does that fall in line with your thinking \u2026 again, didn;t want to derail the discussion\u2026.","ts":"1461181865.000208"},{"type":"message","user":"U0XRC0KLH","text":"the table sysibm.chaincodes will have schema","ts":"1461181873.000209"},{"type":"message","user":"U0XRC0KLH","text":"ccid &lt;long-integer&gt;, body blog, state {MAINT,ACTIVE}","ts":"1461181891.000210"},{"type":"message","user":"U0XRC0KLH","text":"primary key ccid","ts":"1461181896.000211"},{"type":"message","user":"U0XRC0KLH","text":"perhaps other colums, like a list of certs who are allowed to invoke maintenance operations on it","ts":"1461181919.000212"},{"type":"message","user":"U0ULK2JPP","text":"yep","ts":"1461181939.000213"},{"type":"message","user":"U0ULK2JPP","text":"and when the (deploy) system chaincode receives a tran to deploy the chaincode, it\u2019ll manip. sysibm.chaincodes","ts":"1461181987.000214"},{"type":"message","user":"U0XRC0KLH","text":"right","ts":"1461181993.000215"},{"type":"message","user":"U0XRC0KLH","text":"the chaincode -buid- process will be -driven- by the state of sysbm.chaincodes and differences between that, and what's on-disk","ts":"1461182021.000216"},{"type":"message","user":"U0ULK2JPP","text":"right","ts":"1461182047.000217"},{"type":"message","user":"U0ULK2JPP","text":"basically... the system chaincode acts as a filter for deploy (and other trans) and being itself a chaincode (as opposed to code embedded in fabric as it is today) can access state naturally.  Opens up avenues","ts":"1461182243.000218"},{"type":"message","user":"U0ULK2JPP","text":"<@U0XRC0KLH>:  did that capture it ? anything else you\u2019d add\/change ?","ts":"1461182318.000219"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: <https:\/\/github.com\/jyellick\/fabric\/pull\/1\/> You can see my comments on your branch here (sorry for the clunkiness of doing it in a PR by me against my own fork, I did not want to submit your code to the hyperledger fabric project as a PR to discuss if you didn't want it there yet), most of my concerns are around state transfer with the executor removed.  I don't think they are beyond addressing, the pre #833 code handled some of these cases, but we are getting right back into having pbft and state transfer far too intertwined in eachother's workings, which was one of the principle reasons for pushing it into its own module.","attachments":[{"service_name":"GitHub","title":"Revert executor review by jyellick \u00b7 Pull Request #1 \u00b7 jyellick\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/jyellick\/fabric\/pull\/1\/","text":"@corecode Was trying to figure out a way to comment on your changes, this is inelegant, but at least I can comment on things somewhat line by line.","fallback":"GitHub: Revert executor review by jyellick \u00b7 Pull Request #1 \u00b7 jyellick\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/jyellick\/fabric\/pull\/1\/","thumb_width":420,"thumb_height":420,"id":1}],"ts":"1461182799.000220"},{"type":"message","user":"U0XPR4NP4","text":"I've actually been thinking that my biggest mistake with the executor split was attempting to create one executor to serve both sieve and classic\/batch, when their execution models are so different.  Sieve must only ever have one request in the queue at a time, so trying to use an asynchronous queue based system doesn't make a lot of sense there.  Similarly, Sieve can provide a checkpoint to transfer to at every round of consensus, so the feeding of checkpoints from PBFT is largely superfluous.  On the other hand, the executor removed a lot of the complexity of state transfer out of `pbft-core.go`.  I think it would be possible to rip the sieve support components out of the executor, which would drastically simplify it, then have Sieve perform its own executions or implement a much simpler more sycnhronous executor for Sieve.","ts":"1461183222.000222"},{"type":"message","user":"U0XRC0KLH","text":"<@U0XPR4NP4> might as well just rip out Sieve.  It's a broken protocol anyway.  No replayability, what's the point of its existence.","ts":"1461190377.000223"},{"type":"message","user":"U0XRC0KLH","text":"effort spent maintaining it is wasted effort","ts":"1461190393.000224"},{"type":"message","user":"U0KPFAZNF","text":"<@U0XRC0KLH>: I can't comment on sieves design or status, but I can say that consensus algorithms that perform EV are mandatory (to me) and I don't think PBFT provides that.  At least, not in this context.  What are your thoughts or that?","ts":"1461191641.000225"},{"type":"message","user":"U0KPFAZNF","text":"The notion that sieve can be arbitrarily abandoned concerns me.","ts":"1461191696.000226"},{"type":"message","user":"U0KPFAZNF","text":"What is the replay problem you mention by the way?","ts":"1461191785.000227"},{"type":"message","user":"U0XRC0KLH","text":"<@U0KPFAZNF> have you seen this? <https:\/\/github.com\/chetmurthy\/fabric-wiki\/blob\/master\/chet-arch\/mvcc%2Bpostimage.txt>","attachments":[{"service_name":"GitHub","title":"chetmurthy\/fabric-wiki","title_link":"https:\/\/github.com\/chetmurthy\/fabric-wiki\/blob\/master\/chet-arch\/mvcc%2Bpostimage.txt","text":"Contribute to fabric-wiki development by creating an account on GitHub.","fallback":"GitHub: chetmurthy\/fabric-wiki","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/1755771?v=3&s=400","from_url":"https:\/\/github.com\/chetmurthy\/fabric-wiki\/blob\/master\/chet-arch\/mvcc%2Bpostimage.txt","thumb_width":420,"thumb_height":420,"id":1}],"ts":"1461191830.000228"},{"text":"looks","type":"message","subtype":"me_message","user":"U0KPFAZNF","ts":"1461191853.000230"},{"type":"message","user":"U0XRC0KLH","text":"also, there's a note -in- this note, with subject \"trading latency ...\"","ts":"1461191873.000231"},{"type":"message","user":"U0XRC0KLH","text":"<https:\/\/github.com\/chetmurthy\/fabric-wiki\/blob\/master\/chet-arch\/confidential-data.txt>","attachments":[{"service_name":"GitHub","title":"chetmurthy\/fabric-wiki","title_link":"https:\/\/github.com\/chetmurthy\/fabric-wiki\/blob\/master\/chet-arch\/confidential-data.txt","text":"Contribute to fabric-wiki development by creating an account on GitHub.","fallback":"GitHub: chetmurthy\/fabric-wiki","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/1755771?v=3&s=400","from_url":"https:\/\/github.com\/chetmurthy\/fabric-wiki\/blob\/master\/chet-arch\/confidential-data.txt","thumb_width":420,"thumb_height":420,"id":1}],"ts":"1461191874.000232"},{"type":"message","user":"U0XRC0KLH","text":"same general subject","ts":"1461191877.000234"},{"type":"message","user":"U0XRC0KLH","text":"the reason state-machine replication is needed that we execute chaincode 'everywhere'","ts":"1461191899.000235"},{"type":"message","user":"U0XRC0KLH","text":"that isn't scalable to begin with","ts":"1461191904.000236"},{"type":"message","user":"U0XRC0KLH","text":"once you ditch that assumption, you can make HL be a normal database with a cryptographically protected log","ts":"1461191934.000237"},{"type":"message","user":"U0XRC0KLH","text":"that way lies throughput","ts":"1461191940.000238"},{"type":"message","user":"U0XRC0KLH","text":"Re: \"replay\", sieve doesn't guarantee that when an auditor replays a tran, it will have the same effect as when it was committed.  So it's entirely possible to be unable to audit a log by replaying it (and since logs don't contain state-deltas, there's no other way to audit a log)","ts":"1461192150.000239"},{"type":"message","user":"U0XRC0KLH","text":"by contrast, \"MVCC+postimage\" \"locks down\" one of the nondeterministic executions of a tran.  So even if, at replay time, the tran does something different, the auditor can just apply the state-delta and move past that tran (unless they're actually interested inthe tran, in which case, they could investigate further the discrepancy, knowing 100% that it's just a non-replayability issue, not some other bug.","ts":"1461192528.000240"},{"type":"message","user":"U0KPFAZNF","text":"So you are worried about a scenario where a given transaction was deterministic enough that 2f+1 validators computed the same hash...but later an auditor cannot reproduce the same result?","ts":"1461193935.000241"},{"type":"message","user":"U0XRC0KLH","text":"well, if we admit nondeterminstic trans, that's always a possibility.","ts":"1461194138.000242"},{"type":"message","user":"U0XRC0KLH","text":"whereas, with MVCC+postimage, we -know- what teh state-delta is.","ts":"1461194148.000243"},{"type":"message","user":"U0XRC0KLH","text":"sure, the replay of the tran might produce something different.  But we still know what was applied at commit, and we cna apply it again","ts":"1461194163.000244"},{"type":"message","user":"U0XRC0KLH","text":"I gotta run (sister just had twins!  time to visit hospital!) but we can talk another time.","ts":"1461194185.000245"},{"type":"message","user":"U0KPFAZNF","text":"Ok, congrats!","ts":"1461194199.000246"},{"type":"message","user":"U0KPFAZNF","text":"I totally understand the argument of MVCC as a vehicle for concurrency, but it seems some of the other issues are being conflated","ts":"1461194261.000247"},{"type":"message","user":"U0KPFAZNF","text":"I'd like to understand more, so ping when you are back","ts":"1461194276.000248"},{"type":"message","user":"U0XPR4NP4","text":"<@U0KPFAZNF>: Just for clarification, in Sieve, it only takes f+1 votes of confidence in the same answer to be committed","ts":"1461198319.000249"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XRC0KLH>: With respect to ripping out Sieve, I certainly agree that Sieve makes no sense in a post MVCC world, and I'm all in favor of not maintaining code that does not have a long term home.  Of course today, Sieve is the only option we have to tolerate chaincode which does not behave in a deterministic way, and I know <@U0XR6J961> especially and others (including myself) have put a lot of time into making Sieve functional.  I'd like to assume there is some sort of 'must have for this release' requirement that we have been trying to satisfy?","edited":{"user":"U0XPR4NP4","ts":"1461211388.000000"},"ts":"1461198637.000250"},{"type":"message","user":"U0KPFAZNF","text":"<@U0XPR4NP4>: i think that makes sense, or at least it doesnt jump out at me as wrong","ts":"1461198642.000251"},{"type":"message","user":"U0KPFAZNF","text":"most of these designs fall somewhere in the range of f+1 to 2f+1 to be correct :wink:","ts":"1461198684.000253"},{"type":"message","user":"U0KPFAZNF","text":"its not always clear when you can cheat back from 2f+1, but I know there are many opportunities to do so","ts":"1461198718.000254"},{"type":"message","user":"U0XPR4NP4","text":"Haha, very true, not a huge deal, unless you are truly interested in understanding the inner workings of Sieve.  The high level \"All the replicas will end up with the same state, even if transactions are behaving nondeterministically, and a byzantine replica will not generally be able to pick that state.\" is usually good enough.","edited":{"user":"U0XPR4NP4","ts":"1461198923.000000"},"ts":"1461198734.000255"},{"type":"message","user":"U0KPFAZNF","text":"anyway, I dont have a strong opinion on what the consensus algorithm is as long as it performs at scale and verifies outputs","ts":"1461199594.000258"},{"type":"message","user":"U0KPFAZNF","text":"if the mvcc work ends up being that and sieve gets deprecated, that is fine by me","ts":"1461199641.000259"},{"type":"message","user":"U0KPFAZNF","text":"i would just hate to see pbft become the only option, as I dont think it will work for me","ts":"1461199654.000260"},{"type":"message","user":"U0XPR4NP4","text":"<@U0KPFAZNF>: To me, the crux of the problem, is that you can take the output of 10 million trusted nodes all running the same code, and get the same result, and that's not good enough to say that it's actually deterministic.  It's very possible to prove non-determinism from transaction output, but never to prove determinism.  So, you always run the risk that the auditor comes by and replays that transaction and says \"Hey, why is my result different?\".  Now, you can certainly say, that you had a quorum which must have agreed on whatever the output was, but unless you analyze the input itself, you can't make that determinism guarantee.  Which is why the MVCC promise is not that the underlying chaincode is deterministic, but the application of the transaction is.","ts":"1461200406.000261"},{"type":"message","user":"U0KPFAZNF","text":"i understand that part: to play back..","ts":"1461200499.000262"},{"type":"message","user":"U0KPFAZNF","text":"we agree that only deterministic results are valid, and consensus tries to ensure that at least enough nodes agree that the results were deterministic (among other criteria)","ts":"1461200541.000263"},{"type":"message","user":"U0KPFAZNF","text":"but there is never a guarantee that operations truely are deterministic\u2026we could have 2f+1 that says it was but the auditor is the unlucky one that found out it isnt","ts":"1461200577.000264"},{"type":"message","user":"U0KPFAZNF","text":"so what we want to do is prevent this from somehow impacting replay\/auditability","ts":"1461200610.000265"},{"type":"message","user":"U0KPFAZNF","text":"or minimize it at least","ts":"1461200624.000266"},{"type":"message","user":"U0KPFAZNF","text":"it seems that the argument is that mvcc is more resistant to negative impact of non-determinism because the state delta may still be applied even if the process that generated the state delta cannot be reliably reproduced?","ts":"1461200683.000267"},{"type":"message","user":"U0XPR4NP4","text":"Right, so, MVCC has the advantage that it knows the correct output when trying to come to consensus.  Sieve has the much harder task of trying to determine the correct output from among a group of byzantine peers, then come to consensus.","edited":{"user":"U0XPR4NP4","ts":"1461200823.000000"},"ts":"1461200800.000268"},{"type":"message","user":"U0KPFAZNF","text":"ok, i am not sure I fully understand the details on your last statement, but lets back burner that for a second","ts":"1461200834.000271"},{"type":"message","user":"U0KPFAZNF","text":"the problem I am having (and this is not sieve\/mvcc specific, but just general) is that I dont see the notion of \u201cstate\u201d vs \u201cstate hash\u201d as being a property that is exclusive to the consensus algorithm","ts":"1461200886.000272"},{"type":"message","user":"U0XPR4NP4","text":"In the MVCC model, the 'state hash' no longer needs to be in the block, because replaying the transactions is guaranteed to produce the same result.","ts":"1461200974.000273"},{"type":"message","user":"U0KPFAZNF","text":"yes, there are differences \u201con the wire\u201d and even \u201con the block\u201d, but ultimately the notion of \u201cstate at a point in time\u201d or \u201cstate deltas\u201d seem to be data that either explicitly exists or could be synthesized at any point in time based on the fact that a \u201cblockchain\u201d is essential a record of exactly that","ts":"1461200976.000274"},{"type":"message","user":"U0KPFAZNF","text":"so I am not seeing why mvcc buys this replay resistance over other models (at least ones that do EV)","ts":"1461201013.000275"},{"type":"message","user":"U0KPFAZNF","text":"right, but \u201con the block\u201d optimizations are different from the data existing or at least being capable of synthesis","ts":"1461201070.000276"},{"type":"message","user":"U0KPFAZNF","text":"i agree on the block models differ, but the state should ultimately be available either way (it has to be)","ts":"1461201102.000277"},{"type":"message","user":"U0XPR4NP4","text":"The hope is that you could synthesize the a state delta from the transactions at any point in time, but with non-determinism that's not the case.  Today, we discard the state deltas because of space considerations.  So, you can know what the state hash was at a block, but unless you can replay those transactions successfully, unless you have a copy of that state, or retained the state deltas, it's possible in the worst case you can never recreate that state.","ts":"1461201125.000278"},{"type":"message","user":"U0XPR4NP4","text":"In MVCC the transaction is essentially a state delta, it is the keys, and their version, and what they are updated to.","ts":"1461201223.000279"},{"type":"message","user":"U0KPFAZNF","text":"ok, lets walk a scenario though: say I have some state with 100 mutations","ts":"1461201247.000280"},{"type":"message","user":"U0KPFAZNF","text":"start at mutation 0 with empty rows and grow over time to 100 versions","ts":"1461201269.000281"},{"type":"message","user":"U0KPFAZNF","text":"and those 100 versions all had at least 2f+1 commit certificates, etc, were considered value","ts":"1461201311.000282"},{"type":"message","user":"U0KPFAZNF","text":"valid","ts":"1461201312.000283"},{"type":"message","user":"U0KPFAZNF","text":"then someone tries to audit the sequence, and when they get to block 50 there is some non deterministic function that cant reproduce the same result","ts":"1461201361.000284"},{"type":"message","user":"U0KPFAZNF","text":"in one model, we stored 100 state hashes \u201cin the block\"","ts":"1461201393.000285"},{"type":"message","user":"U0KPFAZNF","text":"in the other, we recorded 100 mvcc+postimage objects","ts":"1461201411.000286"},{"type":"message","user":"U0KPFAZNF","text":"if I understand the argument, its that we are saying even though we cant reproduce the result at block 50, we can still apply block 50 because the mvcc data is sufficient to get to block 51","ts":"1461201482.000287"},{"type":"message","user":"U0KPFAZNF","text":"is this right so far?","ts":"1461201524.000288"},{"type":"message","user":"U0XPR4NP4","text":"Yes, so far so good","ts":"1461201531.000289"},{"type":"message","user":"U0KPFAZNF","text":"ok, so neither model is sufficient at eliminating the non-determinism (nothing is), but we can at least move on to block 51 with mvcc rather than stall the whole process","ts":"1461201592.000290"},{"type":"message","user":"U0XPR4NP4","text":"Yep, exactly.","ts":"1461201640.000291"},{"type":"message","user":"U0KPFAZNF","text":"so what I dont see is why mvcc is providing an advantage:  in theory, any of the other nodes should be able to provide\/synthesize the necessary state if we ask them in either model","ts":"1461201719.000292"},{"type":"message","user":"U0KPFAZNF","text":"i should be able to ask one of the other nodes for block 50, or ask for the delta between 49 and 50, or whatever, regardless of model","ts":"1461201747.000293"},{"type":"message","user":"U0KPFAZNF","text":"right?","ts":"1461201754.000294"},{"type":"message","user":"U0KPFAZNF","text":"or am I missing something","ts":"1461201758.000295"},{"type":"message","user":"U0KPFAZNF","text":"just because the on block representation is just a hash doesnt mean the state no longer exists (conceptually, anyway)","ts":"1461201786.000296"},{"type":"message","user":"U0XPR4NP4","text":"Ah, so, if the transaction is truly non-deterministic, a node executing it again doesn't guarantee it will get the same result","ts":"1461201812.000297"},{"type":"message","user":"U0KPFAZNF","text":"if we elided the state for space optimization or something, that is one thing","ts":"1461201813.000298"},{"type":"message","user":"U0XPR4NP4","text":"Consider a really silly chaincode which returns 0 until 2017, then returns 1 ever after.","ts":"1461201830.000299"},{"type":"message","user":"U0KPFAZNF","text":"ok","ts":"1461201838.000300"},{"type":"message","user":"U0XPR4NP4","text":"If the transaction executes in 2016, everyone will agree the output is 0, and then in 2017 the auditor comes along and tries to get back to that state.","ts":"1461201850.000301"},{"type":"message","user":"U0KPFAZNF","text":"got it, but that is true regardless of model","ts":"1461201869.000302"},{"type":"message","user":"U0XPR4NP4","text":"Well, in MVCC, the auditor would see, that when this was executed, 2f+1 nodes agreed that the output was 0","ts":"1461201898.000303"},{"type":"message","user":"U0KPFAZNF","text":"i think they would see that either way, no?","ts":"1461201921.000304"},{"type":"message","user":"U0XPR4NP4","text":"And so although the auditor may not be happy about that, that's much better than the alternative that \"2f+1 nodes agreed on that output\"","ts":"1461201938.000305"},{"type":"message","user":"U0XPR4NP4","text":"So, in the non-MVCC case,there's no way to recover that the output was 0","ts":"1461201952.000306"},{"type":"message","user":"U0XPR4NP4","text":"You only know if you got the same output, not what the old output was","ts":"1461201967.000307"},{"type":"message","user":"U0KPFAZNF","text":"block 50 would have a state-hash with 2f+1 signatures, and if you ask any of those nodes for the state corresponding to the hash, it should have 0 amongst its rows","ts":"1461201978.000308"},{"type":"message","user":"U0XPR4NP4","text":"(in the case of where they're different)","ts":"1461201979.000309"},{"type":"message","user":"U0XPR4NP4","text":"Ah, but nodes do not retain state for every block","ts":"1461201991.000310"},{"type":"message","user":"U0XPR4NP4","text":"So they say \"I garbage collected that ages ago, I don't know what that state was, just what it's hash was\"","ts":"1461202008.000311"},{"type":"message","user":"U0KPFAZNF","text":"it sounds like this is more of a case of the ledger introspection features than a property of the why states are represented on the block","ts":"1461202009.000312"},{"type":"message","user":"U0XPR4NP4","text":"If we stored the state deltas indefinitely, then you could get replayability","ts":"1461202047.000313"},{"type":"message","user":"U0KPFAZNF","text":"you could certainly argue that the internal representation is based on state deltas that are retrievably via state hash","ts":"1461202062.000314"},{"type":"message","user":"U0KPFAZNF","text":"right","ts":"1461202068.000315"},{"type":"message","user":"U0KPFAZNF","text":"and that is kind of what mvcc is doing, just at a higher level","ts":"1461202079.000316"},{"type":"message","user":"U0XPR4NP4","text":"No, that's the whole idea of a hash, it's one way, you can't reverse engineer a state from its hash","ts":"1461202085.000317"},{"type":"message","user":"U0XPR4NP4","text":"Once a state delta is garbage collected, it is gone forever, unless you can reproduce it by replaying the transactions","ts":"1461202117.000318"},{"type":"message","user":"U0XPR4NP4","text":"(Which is true, so long as your replay is determinstic)","ts":"1461202131.000319"},{"type":"message","user":"U0KPFAZNF","text":"understood that you cant from the hash itself, but the on-block representation of a state-hash is there for the purposes of protocol efficiency, not data obscurity\u2026the assumption would be that you should be able to query a hash back to a state value","ts":"1461202164.000320"},{"type":"message","user":"U0XPR4NP4","text":"There is no facility to do that today, and I don't think it's planned.  You can ask for a state delta by block number, but by default I believe we only retain the last 500 of them.","ts":"1461202223.000321"},{"type":"message","user":"U0KPFAZNF","text":"ok, thats fine\u2026 i didnt mean to comment on impl status, just conceptual understanding","ts":"1461202245.000322"},{"type":"message","user":"U0XPR4NP4","text":"Certainly retaining a whole copy of the state per block is probably infeasible.  Retaining the deltas indefinitely is in a sense what MVCC is doing.","ts":"1461202251.000323"},{"type":"message","user":"U0XPR4NP4","text":"(But MVCC also brings some other benefits, like scale)","ts":"1461202263.000324"},{"type":"message","user":"U0KPFAZNF","text":"my main point is, i dont think MVCC buys us this resistance, its the data model that buys it","ts":"1461202267.000325"},{"type":"message","user":"U0KPFAZNF","text":"right, MVCC is useful in other capacities, like concurrency and thus scale","ts":"1461202287.000326"},{"type":"message","user":"U0KPFAZNF","text":"you can have a state-delta strategy that is independent of the MVCC debate, thats all I am saying","ts":"1461202317.000327"},{"type":"message","user":"U0XPR4NP4","text":"Ah, yes, sorry for being dense, that's certainly true.","ts":"1461202328.000328"},{"type":"message","user":"U0KPFAZNF","text":"I am not arguing that we should do something other than MVCC either, dont get me wrong","ts":"1461202346.000329"},{"type":"message","user":"U0XPR4NP4","text":"Well, one thing though","ts":"1461202349.000330"},{"type":"message","user":"U0XPR4NP4","text":"State deltas are per block.","ts":"1461202360.000331"},{"type":"message","user":"U0XPR4NP4","text":"What if I have 2 transactions in my block, and I replay them, and I get a different result.","ts":"1461202384.000332"},{"type":"message","user":"U0XPR4NP4","text":"Then I can see what the aggregate effect of the 2 transactions was, but, I can't actually determine which is behaving non-deterministically.","ts":"1461202412.000333"},{"type":"message","user":"U0XPR4NP4","text":"(Assuming they both modify the same values)","ts":"1461202441.000334"},{"type":"message","user":"U0KPFAZNF","text":"well to be clear, i dont think you want to compress transactions to the block level","ts":"1461202442.000335"},{"type":"message","user":"U0KPFAZNF","text":"i envision the finest granularity for the hash is the transaction level, a block would just encompass N transactions (and thus N hashes)","ts":"1461202470.000336"},{"user":"U0J5URUJU","type":"message","subtype":"channel_join","text":"<@U0J5URUJU|nycnewman> has joined the channel","ts":"1461202490.000337"},{"type":"message","user":"U0XPR4NP4","text":"Yes, you could implement it this way, but that is not the current block implementation.","ts":"1461202491.000338"},{"type":"message","user":"U0KPFAZNF","text":"sure, thats fair","ts":"1461202499.000339"},{"type":"message","user":"U0KPFAZNF","text":"again, just conceptual","ts":"1461202503.000340"},{"type":"message","user":"U0KPFAZNF","text":"i actually havent had a chance to study what sieve is doing in reality","ts":"1461202519.000341"},{"type":"message","user":"U0XPR4NP4","text":"There's a paper around here somewhere I could probably dig up if you are interested, or I could try to quickly walk you through it at some point if you'd like.","ts":"1461202549.000342"},{"type":"message","user":"U0KPFAZNF","text":"but ultimately, i think even the on-wire\/on-block stuff should never go coarser than transaction-level hash","ts":"1461202561.000343"},{"type":"message","user":"U0KPFAZNF","text":"i assume you are talking about the sieve paper?  if so, link apprecated","ts":"1461202596.000344"},{"type":"message","user":"U0KPFAZNF","text":"i saw it go by while I was traveling a few weeks ago but I have lost track of the link","ts":"1461202610.000345"},{"type":"message","user":"U0XPR4NP4","text":"I believe this is the paper <http:\/\/arxiv.org\/abs\/1603.07351>","ts":"1461202714.000346"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> Would be a better person to ask","ts":"1461202722.000347"},{"type":"message","user":"U0KPFAZNF","text":"awesome, thank you","ts":"1461202726.000348"},{"type":"message","user":"U0XPR4NP4","text":"No problem","ts":"1461202741.000349"},{"type":"message","user":"U0KPFAZNF","text":"going to go eat dinner, thanks for the chat","ts":"1461202809.000350"},{"type":"message","user":"U0KPFAZNF","text":"will talk more","ts":"1461202812.000351"},{"type":"message","user":"U0XPR4NP4","text":"No problem, always happy to help, just let me know","ts":"1461202834.000352"},{"type":"message","user":"U0XRC0KLH","text":"MVCC does not offer \"replay resistance\" in the way tnat Bitcoin does.   But there's a minor extnesion to the design, that -does- offer such","ts":"1461207418.000353"},{"type":"message","user":"U0XRC0KLH","text":"\"just because the on block representation is just a hash doesnt mean the state no longer exists (conceptually, anyway)\"  ... Actually, YES","ts":"1461207503.000354"},{"type":"message","user":"U0XRC0KLH","text":"you would NOT want to have a database that kept full per-tran state-snapshots around.  That would be .... immense","ts":"1461207526.000355"},{"type":"message","user":"U0XRC0KLH","text":"uncontainably immense","ts":"1461207531.000356"},{"type":"message","user":"U0XRC0KLH","text":"something that's not clear is: MVCC+postimage is -just- the way normal databses do it","ts":"1461207551.000357"},{"type":"message","user":"U0XRC0KLH","text":"\"you can have a state-delta strategy that is independent of the MVCC debate\" .... if you keep only postimages (== state deltas) you cannot provide a reasonable concurrency-control model.","ts":"1461207602.000358"},{"type":"message","user":"U0XRC0KLH","text":"you might wish to look at Alonso &amp; Kemme, on the Dragon system","ts":"1461207616.000359"},{"type":"message","user":"U0XRC0KLH","text":"Christian Cachin pointed out that what I proposed is effectively the same as what they did in that work","ts":"1461207636.000360"},{"type":"message","user":"U0XRC0KLH","text":"The MVCC information corresponds to the locks that the tran woud take, and the postimage data corresponds to the REDO information in a typical transaction log.","ts":"1461208046.000361"},{"type":"message","user":"U0XRC0KLH","text":"we're merely doing what databases do.","ts":"1461208055.000362"},{"type":"message","user":"U0KPFAZNF","text":"<@U0XRC0KLH>: i think we are saying the same thing","ts":"1461208232.000363"},{"type":"message","user":"U0KPFAZNF","text":"when I said state exists, i meant logically","ts":"1461208248.000364"},{"type":"message","user":"U0KPFAZNF","text":"as in, \u201cstate\u201d can be a synthesis of a composition of deltas","ts":"1461208272.000365"},{"type":"message","user":"U0KPFAZNF","text":"and that is exactly my point: the structure that mvcc in terms of state deltas isnt really any different than what another design would be doing as well","ts":"1461208333.000366"},{"type":"message","user":"U0XRC0KLH","text":"this is probably easier to discuss interactively by voice than in a chat . But actually, no, MVCC+postimage provides \"proper concurrency control\", whereas state deltas alone do not.","ts":"1461208780.000367"},{"type":"message","user":"U0XRC0KLH","text":"this is where the Dragon paper might be useful","ts":"1461208797.000368"},{"type":"message","user":"U0XRC0KLH","text":"I will not claim that I was inspired by that work, but it's fair to say that they're prior, and their design considerations were similar to what drove me in this MVCC+postimage design","ts":"1461208835.000369"},{"type":"message","user":"U0XRC0KLH","text":"MVCC is the locks that would be acquired in a standard-issue lock-manager-based DB","ts":"1461208848.000370"},{"type":"message","user":"U0XRC0KLH","text":"postimage is -just- what would go in the tran-log","ts":"1461208855.000371"},{"type":"message","user":"U0XRC0KLH","text":"and the combination of MVCC+postimage allows us to eschew the lock-manager.  I can explain sometime more fully by voice","ts":"1461208874.000372"},{"type":"message","user":"U0XRC0KLH","text":"I'll put it this way: not that you'd want to do this, but you could imagine an application that does queries on a peer, and paints a screen; the application would ask the peer to take a (non-durable) snapshot, aaginst which the queries were run.  Say, a trading screen.","ts":"1461208940.000373"},{"type":"message","user":"U0XRC0KLH","text":"later, when the trader presses \"buy\", the tran would be \"simulated\" against the actual state-snapshot that was used to paint the screen; then, it would be re-simulated against the current state of the peer, and if the MVCC+postimage info differed, the trader would get a \"stuff changed while you were getting coffee; here's a repaint, do you still want to buy?\" message","ts":"1461209003.000374"},{"type":"message","user":"U0XRC0KLH","text":"this is simply not possible without version-numbers and MVCC information","ts":"1461209020.000375"},{"type":"message","user":"U0XRC0KLH","text":"similarly, one can be validating trans in parallel and know that if they're valid, they can be sequenced in any order, and as long as all replicas apply those trans in that same order, eacn tran will either execute as it did when it was validated, OR it will abort.","ts":"1461209082.000376"},{"type":"message","user":"U0XRC0KLH","text":"these properties are analogous to the properties you'd get in a normal database","ts":"1461209094.000377"},{"type":"message","user":"U0XRC0KLH","text":"and NOT what you'd get in ethereum","ts":"1461209098.000378"},{"type":"message","user":"U0XRC0KLH","text":"(for instance)","ts":"1461209100.000379"},{"type":"message","user":"U0XR6J961","text":"jyellick: i finally understood what your executor is about","ts":"1461229218.000381"},{"type":"message","user":"U0KPFAZNF","text":"<@U0XRC0KLH>: I hear you, and understand.  My only point was that you don\u2019t need the entire MVCC+postimage design as outlined in your notes to achieve replay-ability of the transaction log\u2026I can\u2019t speak for sieve specifically but most state-hash based designs that I can think of only use the state hash as a representational convenience (for instance, cheap equivalency tests and on-the-wire compression).  The underlying persistence layers would still be some form of a log of deltas and thus offer the same basic ability in a replay the log in auditing scenarios.  I wanted to avoid conflating the issues with the solution, thats all.","ts":"1461234778.000382"},{"type":"message","user":"U0KPFAZNF","text":"To be clear, I am not saying I am against your design, just pointing out that I think that particular problem can be solved in many ways.","ts":"1461234886.000383"},{"type":"message","user":"U0XR6J961","text":"we currently have deltas, but they are locally generated, like the blocks themselves","ts":"1461237191.000384"},{"type":"message","user":"U0XR6J961","text":"and the deltas are not cryptographically linked in the blocks","ts":"1461237207.000385"},{"type":"message","user":"U0XR6J961","text":"i would prefer to assemble the blocks before sending them through consensus","ts":"1461237938.000386"},{"type":"message","user":"U0KPFAZNF","text":"you can, though the problem that I have seen with that approach is that a protocol restart due to non-determinism can be expensive","ts":"1461238825.000387"},{"type":"message","user":"U0KPFAZNF","text":"like, how EVE does a viewchange+serial execution when that happens","ts":"1461238853.000388"},{"type":"message","user":"U0KPFAZNF","text":"my preference is to have the protocol converge on block inventory rather than use a block as a core negotiating state","ts":"1461238892.000389"},{"type":"message","user":"U0KPFAZNF","text":"ala ripple","ts":"1461238913.000390"},{"type":"message","user":"U0KPFAZNF","text":"not sure how sieve does it, but I envision that is is closer to EVE than ripple","ts":"1461238950.000391"},{"type":"message","user":"U0XR6J961","text":"could you explain more?","ts":"1461240169.000392"},{"type":"message","user":"U0KPFAZNF","text":"what I mean generally is: start with the notion that transactions flow in to a given peer, some of those will be \u201cvalid\" and some will not","ts":"1461241727.000393"},{"type":"message","user":"U0KPFAZNF","text":"what constitutes valid is of course a complicated criteria","ts":"1461241742.000394"},{"type":"message","user":"U0KPFAZNF","text":"some validity checks can be done locally, others are related to whether there is agreement","ts":"1461241764.000395"},{"type":"message","user":"U0KPFAZNF","text":"but generally speaking, the node can immediately discard the ones it doesnt believe are valid, and keep the ones that it does think are valid in a \u201cproposed\u201d state","ts":"1461241802.000396"},{"type":"message","user":"U0KPFAZNF","text":"and then consensus can whittle that set of proposed transactions down","ts":"1461241824.000397"},{"type":"message","user":"U0KPFAZNF","text":"so the set in a block is converged upon, rather than the block being negotiated up front","ts":"1461241858.000398"},{"type":"message","user":"U0KPFAZNF","text":"so, maybe 20 come in, 5 are discarded right away, and eventually 10 are agreed to go in the next block, and 5 are deferred to the next round","ts":"1461241901.000399"},{"type":"message","user":"U0KPFAZNF","text":"as opposed to taking 20 in the assumed block and then restarting the block process when there is a discrepancy (which is how EVE works, generally)","ts":"1461242011.000400"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1461242345.000401"},{"type":"message","user":"U0XR6J961","text":"EVE is just about optimistic concurrency","ts":"1461242359.000402"},{"type":"message","user":"U0XR6J961","text":"bitcoin does the same - collect transactions into blocks, consensus accepts blocks","ts":"1461242383.000403"},{"type":"message","user":"U0KPFAZNF","text":"right, though I dont think the optimism is bad\u2026what is bad is the penalty for non-determinism is relatively high (viewchange+serial)","ts":"1461242439.000404"},{"type":"message","user":"U0KPFAZNF","text":"what I prefer is a design that assumes some non-determinism might occur and make it less exceptional to handle","ts":"1461242474.000405"},{"type":"message","user":"U0KPFAZNF","text":"the trade off is that the overall protocol might have more overhead than the pure optimism approach, but the benefit is that non-determinism is just handled naturally as part of that rather than causing a hiccup","ts":"1461242523.000406"},{"type":"message","user":"U0KPFAZNF","text":"so you eliminate that hiccup as a DoS attack vector","ts":"1461242555.000407"},{"type":"message","user":"U0KPFAZNF","text":"or mitigate it is a better term","ts":"1461242562.000408"},{"type":"message","user":"U0KPFAZNF","text":"non-deterministic results just get deferred\/dropped (according to TTL rules) rather than cause a slower mode of operation","ts":"1461242620.000409"},{"type":"message","user":"U0XR6J961","text":"ripple is pessimistic by default","ts":"1461243643.000410"},{"type":"message","user":"U0XR6J961","text":"i don't think that ripple would outperform","ts":"1461243654.000411"},{"type":"message","user":"U0XR6J961","text":"with mvcc, the burden of proof is on the submitter","ts":"1461243688.000412"},{"type":"message","user":"U0XR6J961","text":"and only if the submitter can collect enough signatures from endorsers, the transaction would even make it into a block","ts":"1461243718.000413"},{"type":"message","user":"U0XR6J961","text":"and at that point, the postimage is already defined, and everybody now only applies the state delta, instead of executing the transaction again","ts":"1461243754.000414"},{"type":"message","user":"U0KPFAZNF","text":"I dont have any objection to the proposal per se, though I was a little concerned about the sequence","ts":"1461244186.000415"},{"type":"message","user":"U0KPFAZNF","text":"I was merely pointing out you don\u2019t need the proposal to provide log replay capability","ts":"1461244222.000416"},{"type":"message","user":"U0XR6J961","text":"no, you just need to keep the deltas","ts":"1461244304.000417"},{"type":"message","user":"U0KPFAZNF","text":"right","ts":"1461244390.000418"},{"type":"message","user":"U0KPFAZNF","text":"actually, the requirement is that any given state is retrievable, but practical matters probably dictate that is stored as deltas","ts":"1461244459.000419"},{"type":"message","user":"U0XR6J961","text":"why does any given state have to be retrievable?","ts":"1461244486.000420"},{"type":"message","user":"U0KPFAZNF","text":"logically","ts":"1461244496.000421"},{"type":"message","user":"U0KPFAZNF","text":"if you cant reproduce the state at position X, you at least need to be able to retrieve the state at position X","ts":"1461244556.000422"},{"type":"message","user":"U0KPFAZNF","text":"thats all we are talking about here","ts":"1461244575.000423"},{"type":"message","user":"U0XR6J961","text":"i don't understand","ts":"1461244642.000424"},{"type":"message","user":"U0XR6J961","text":"you're saying that an auditor needs to be able to check the correctness of the blockchain","ts":"1461244674.000425"},{"type":"message","user":"U0KPFAZNF","text":"what I am saying is that normally a PBFT-style blockchain is valid if each entry in the chain has a valid commit certificate with the requisite 2f+1 sigs and don\u2019t need to be able to re-run past transactions\u2026but if you are something like and auditor and want to re-run each transaction but are unable to achieve the same result, you have two choices: stall, or accept the previously accepted value","ts":"1461244840.000426"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1461244857.000427"},{"type":"message","user":"U0KPFAZNF","text":"for the former, you need to retrieve that state","ts":"1461244860.000428"},{"type":"message","user":"U0KPFAZNF","text":"sorry, for the latter","ts":"1461244864.000429"},{"type":"message","user":"U0XR6J961","text":"well or you just apply the delta","ts":"1461244879.000430"},{"type":"message","user":"U0KPFAZNF","text":"applying a delta is an implementation detail","ts":"1461244898.000431"},{"type":"message","user":"U0KPFAZNF","text":"the logical operation is accepting the committed state","ts":"1461244928.000432"},{"type":"message","user":"U0XR6J961","text":"i guess that depends on how you see it","ts":"1461244958.000433"},{"type":"message","user":"U0XR6J961","text":"in bitcoin, the blockchain does not talk about state, but only about transactions (deltas)","ts":"1461244997.000434"},{"type":"message","user":"U0XR6J961","text":"and the state is purely local and ephemeral, and only for speed","ts":"1461245022.000435"},{"type":"message","user":"U0XR6J961","text":"in fabric, it is more databasey","ts":"1461245053.000436"},{"type":"message","user":"U0KPFAZNF","text":"i think its largely semantics","ts":"1461245088.000437"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1461245105.000438"},{"type":"message","user":"U0KPFAZNF","text":"you could say \u201cthe state of the system at blockheight X\u201d which is the aggregate of all mutations before it","ts":"1461245139.000439"},{"type":"message","user":"U0KPFAZNF","text":"thats all I am really referring to","ts":"1461245151.000440"},{"type":"message","user":"U0KPFAZNF","text":"not literally a chaincode Get\/PutState per se","ts":"1461245179.000441"},{"type":"message","user":"U0XR6J961","text":"jyellick: around?","ts":"1461249033.000442"},{"type":"message","user":"U0XPR4NP4","text":"Yes","ts":"1461249040.000443"},{"type":"message","user":"U0XR6J961","text":"so i'm trying to add persistence","ts":"1461249057.000444"},{"type":"message","user":"U0XR6J961","text":"i can add the sequence number to the consensus metadata","ts":"1461249087.000445"},{"type":"message","user":"U0XR6J961","text":"but what happens to the checkpoints?","ts":"1461249095.000446"},{"type":"message","user":"U0XR6J961","text":"i guess i can persist the checkpoint info","ts":"1461249116.000447"},{"type":"message","user":"U0XR6J961","text":"elsewhere","ts":"1461249120.000448"},{"type":"message","user":"U0XR6J961","text":"but it seems so odd to use checkpoints when we have a blockchain","ts":"1461249135.000449"},{"type":"message","user":"U0XPR4NP4","text":"This is in the executor-less branch?","ts":"1461249143.000450"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1461249161.000451"},{"type":"message","user":"U0XPR4NP4","text":"I don't think you can add sequence number to the consensus metadata, this is how things used to work, but had to be undone in order to support sieve, which wanted the 'checkpoint value' (block hash) at speculative execution time, before final ordering.","ts":"1461249212.000452"},{"type":"message","user":"U0XR6J961","text":"right","ts":"1461249254.000453"},{"type":"message","user":"U0XR6J961","text":"i think it will work","ts":"1461249267.000454"},{"type":"message","user":"U0XPR4NP4","text":"But the consensus-metadata is included in the blockhash? How do you get around that?","ts":"1461249305.000455"},{"type":"message","user":"U0XR6J961","text":"yes, it will","ts":"1461249313.000456"},{"type":"message","user":"U0XR6J961","text":"i thought we could include the validate set","ts":"1461249382.000457"},{"type":"message","user":"U0XR6J961","text":"but that's not correct","ts":"1461249388.000458"},{"type":"message","user":"U0XR6J961","text":"honestly, i prefer to send the execute via pbft as well","ts":"1461249402.000459"},{"type":"message","user":"U0XR6J961","text":"then *all* of this goes away","ts":"1461249414.000460"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I have always thought it would make far more sense to do the execution and rollback as a 4th phase or second round of PBFT, but I thought <@U0Y14MWA2> said there was something subtly wrong with this?","ts":"1461249520.000461"},{"type":"message","user":"U0XR6J961","text":"what do you mean, do the execution as 4th phase?","ts":"1461249567.000462"},{"type":"message","user":"U0XR6J961","text":"it would be pbft(execute), outside(verify), pbft(verify-set), pbft(execute), ....","ts":"1461249630.000463"},{"type":"message","user":"U0XR6J961","text":"and verify-set and execute could be sent in one single pbft request","ts":"1461249647.000464"},{"type":"message","user":"U0XPR4NP4","text":"Yes, so what you describe there would be basically 2 rounds?","ts":"1461249897.000465"},{"type":"message","user":"U0XPR4NP4","text":"As far as a fourth phase, trying to think it out on the fly here, and running into troubles, but essentially to send something like a checkpoint out every round, which then is used to make a decision as to whether to commit, state transfer, or rollback.","ts":"1461249942.000466"},{"type":"message","user":"U0XPR4NP4","text":"I think the 2 ~phase~ rounds approach is more obviously correct, and I think would make Sieve a much simpler plugin.","edited":{"user":"U0XPR4NP4","ts":"1461250052.000000"},"ts":"1461249994.000467"},{"type":"message","user":"U0XPR4NP4","text":"It seems like it would even potentially return some of the windowing properties to Sieve which the current approach loses.","ts":"1461250034.000468"},{"type":"message","user":"U0XR6J961","text":"two rounds, yes","ts":"1461250036.000469"},{"type":"message","user":"U0XR6J961","text":"but strictly if you have enough requests queued, you can combine both rounds into one","ts":"1461250059.000471"},{"type":"message","user":"U0XPR4NP4","text":"Ah, sure,","ts":"1461250079.000472"},{"type":"message","user":"U0XR6J961","text":"you're basically saying \"this is the result of the last execution, and that's the next execution\"","ts":"1461250080.000473"},{"type":"message","user":"U0XR6J961","text":"then you're getting rid of race conditions between delivery of exec and other pbft messages","ts":"1461250117.000474"},{"type":"message","user":"U0XPR4NP4","text":"Right, yes, I like this approach.","ts":"1461250129.000475"},{"type":"message","user":"U0XR6J961","text":"yea i suggested that long ago, but for some reason we decided not to implement it that way","ts":"1461250151.000476"},{"type":"message","user":"U0XR6J961","text":"maybe just because \"we have it the other way right now\"","ts":"1461250163.000477"},{"type":"message","user":"U0XPR4NP4","text":"Is this something you're going to implement now?","ts":"1461250414.000478"},{"type":"message","user":"U0XPR4NP4","text":"I guess the comment from <@U0XRC0KLH> worries me a bit, since Sieve will not really be relevant in an MVCC world, I hate for us to spend too many cycles on it.  Do you know what the requirements around Sieve are for this first release?","edited":{"user":"U0XPR4NP4","ts":"1461250567.000000"},"ts":"1461250541.000479"},{"type":"message","user":"U0XR6J961","text":"until mvcc arrives, i think we need sieve","ts":"1461250590.000481"},{"type":"message","user":"U0XR6J961","text":"i'd be the first to throw it out","ts":"1461250596.000482"},{"type":"message","user":"U0XR6J961","text":"if we didn't have to deal with non-determinism","ts":"1461250609.000483"},{"type":"message","user":"U0XR6J961","text":"ok, i'll head outside for a bit and join you in the scrum","ts":"1461250719.000484"},{"type":"message","user":"U0XPR4NP4","text":"Maybe this is something to bring up to Sharon, is tolerating non-determinism but losing replay-ability okay? I think that was Chet's big dismissal","ts":"1461250721.000485"},{"type":"message","user":"U0UGH3X7X","text":"bring up to binh\/marko\/chet ?","ts":"1461250776.000486"},{"type":"message","user":"U0XQ35CDD","text":"in <https:\/\/github.com\/hyperledger\/fabric\/issues\/925> have we agreed on what the acceptable behavior should be?","attachments":[{"service_name":"GitHub","title":"obc-peer PBFT Classic does not work on queue after two VPs bounce \u00b7 Issue #925 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/issues\/925","text":"Description: PBFT does not recognize or make any effort to recognize two VPs that were down but rejoined, Deploy sent during downphase is queued, but does not execute once the two VPs are back up,...","fallback":"GitHub: obc-peer PBFT Classic does not work on queue after two VPs bounce \u00b7 Issue #925 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/17052305?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/issues\/925","thumb_width":420,"thumb_height":420,"id":1}],"ts":"1461252097.000487"},{"type":"message","user":"U0XQ35CDD","text":"my take is exactly the same as Simon's <https:\/\/github.com\/hyperledger\/fabric\/issues\/925#issuecomment-204421674>","attachments":[{"service_name":"GitHub","title":"obc-peer PBFT Classic does not work on queue after two VPs bounce \u00b7 Issue #925 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/issues\/925#issuecomment-204421674","text":"Description: PBFT does not recognize or make any effort to recognize two VPs that were down but rejoined, Deploy sent during downphase is queued, but does not execute once the two VPs are back up,...","fallback":"GitHub: obc-peer PBFT Classic does not work on queue after two VPs bounce \u00b7 Issue #925 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/17052305?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/issues\/925#issuecomment-204421674","thumb_width":420,"thumb_height":420,"id":1}],"ts":"1461252122.000489"},{"type":"message","user":"U0XQ35CDD","text":"you got f=2 so all bets are off","ts":"1461252127.000491"},{"type":"message","user":"U0XQ35CDD","text":"but I am guessing that since we are keeping it alive and assigning it, we have a take on the expected behavior","edited":{"user":"U0XQ35CDD","ts":"1461252171.000000"},"ts":"1461252150.000492"},{"type":"message","user":"U0XRC0KLH","text":"sorry guys, back (too many calls, kill me): crash-fault-tolerance is a non-negotiable.  Frankly, \"tolerating non-determinism\"?  I'd punt on it, if it's a choice.  B\/c we know two different ways of -fixing-it for good","ts":"1461254308.000496"},{"type":"message","user":"U0XR6J961","text":"chetsky: bihn said it is important","ts":"1461254527.000497"},{"user":"U126PEMNH","type":"message","subtype":"channel_join","text":"<@U126PEMNH|harshal> has joined the channel","ts":"1461256154.000498"},{"type":"message","user":"U0XR6J961","text":"okay, i can now restore persisted state (except for requests)","ts":"1461260765.000499"},{"type":"message","user":"U0XR6J961","text":"still needs to be tested with the outer plugins, but I don't see any problems there","ts":"1461260793.000500"},{"type":"message","user":"U0XR6J961","text":"i can stop a primary and restart it, and everything proceeds as normal","ts":"1461260807.000501","reactions":[{"name":"+1","users":["U0UGH3X7X"],"count":1}]},{"type":"message","user":"U0XRC0KLH","text":"<@U0XR6J961>: more important than crash-fault-tolerance?  really? *grin*","ts":"1461262522.000502"},{"type":"message","user":"U0XRC0KLH","text":"crash-fault-tolerance, and being able to catch-up lagging peers, is non-negotiable","ts":"1461262540.000503"},{"type":"message","user":"U0XRC0KLH","text":"sieve?  -whatever-","ts":"1461262546.000504"},{"user":"U0UKTPMG8","type":"message","subtype":"channel_join","text":"<@U0UKTPMG8|jeffgarratt> has joined the channel","ts":"1461300109.000505"},{"type":"message","user":"U0XR6J961","text":"chetsky: absolutely more important.","ts":"1461308876.000506"},{"type":"message","user":"U0XR6J961","text":"chetsky: one non-deterministic transaction -&gt; whole network broken","ts":"1461308895.000507"},{"type":"message","user":"U0XR6J961","text":"chetsky: one node crashes -&gt; restart from 0 using state transfer","ts":"1461308924.000508"},{"type":"message","user":"U0XR6J961","text":"i have an odd race condition in the mock network code","ts":"1461333976.000509"},{"type":"message","user":"U0XR6J961","text":"with isBusy","ts":"1461333980.000510"},{"type":"message","user":"U0XR6J961","text":"somehow the goroutine executing is not considered as busy","ts":"1461333994.000511"},{"type":"message","user":"U0XR6J961","text":"but why?","ts":"1461333998.000512"},{"type":"message","user":"U0XPR4NP4","text":"Isn't your check based on a timer's activity? I did not understand that","ts":"1461334069.000513"},{"type":"message","user":"U0XR6J961","text":"oh","ts":"1461334134.000514"},{"type":"message","user":"U0XR6J961","text":"yes, timer active -&gt; still busy","ts":"1461334146.000515"},{"type":"message","user":"U0XR6J961","text":"once everything is event driven, it would just be len(events) &gt; 0","ts":"1461334170.000516"},{"type":"message","user":"U0XPR4NP4","text":"<https:\/\/github.com\/corecode\/fabric\/blob\/revert-executor\/consensus\/obcpbft\/pbft-core.go#L814>","attachments":[{"service_name":"GitHub","title":"corecode\/fabric","title_link":"https:\/\/github.com\/corecode\/fabric\/blob\/revert-executor\/consensus\/obcpbft\/pbft-core.go#L814","text":"Blockchain fabric code","fallback":"GitHub: corecode\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400","from_url":"https:\/\/github.com\/corecode\/fabric\/blob\/revert-executor\/consensus\/obcpbft\/pbft-core.go#L814","thumb_width":400,"thumb_height":400,"id":1}],"ts":"1461334194.000517"},{"type":"message","user":"U0XPR4NP4","text":"The timer is being stopped in the execute, but certainly before the core is necessarily idle","ts":"1461334222.000519"},{"type":"message","user":"U0XR6J961","text":"of course execution being asynchronous, there is still some issues, because this essentially is an unfinished rpc - we expect an event to arrive later","ts":"1461334227.000520"},{"type":"message","user":"U0XR6J961","text":"yes, and I set currentExec","ts":"1461334249.000521"},{"type":"message","user":"U0XR6J961","text":"isbusy checks for both","ts":"1461334268.000522"},{"type":"message","user":"U0XR6J961","text":"that's why I don't get why it can race","ts":"1461334315.000523"},{"type":"message","user":"U0XPR4NP4","text":"But it's not set atomically? `currentExec` is not set until 3 lines after the timer stops","ts":"1461334338.000524"},{"type":"message","user":"U0XPR4NP4","text":"(unless it's already set for some reason, I don't entirely understand this flow)","ts":"1461334360.000525"},{"type":"message","user":"U0XR6J961","text":"oh sorry","ts":"1461334401.000526"},{"type":"message","user":"U0XR6J961","text":"this all happens with the lock taken","ts":"1461334414.000527"},{"type":"message","user":"U0XR6J961","text":"i changed isBusy to take the lock","ts":"1461334420.000528"},{"type":"message","user":"U0XR6J961","text":"what don't you understand about it?","ts":"1461334463.000529"},{"type":"message","user":"U0XR6J961","text":"i should rewrite it so that it is more clear","ts":"1461334473.000530"},{"type":"message","user":"U0XPR4NP4","text":"I don't think it's necessarily fair to say it's unclear, I've only read through your changeset maybe twice, and it is fairly large, just have not had time to understand it yet","ts":"1461334543.000531"},{"type":"message","user":"U0XR6J961","text":"yea :confused:","ts":"1461334556.000532"},{"type":"message","user":"U0XR6J961","text":"should add more comments then","ts":"1461334571.000533"},{"type":"message","user":"U0XV1HDL3","text":"hi, wanted to chat about what is \"the blockchain\"","ts":"1461340744.000534"},{"type":"message","user":"U0XV1HDL3","text":"so, regarding the discussion to split endorsement from consensus","ts":"1461340806.000535"},{"type":"message","user":"U0XV1HDL3","text":"there are \"endorsers\" per chaincode and a consensus service (done by consenter nodes)","ts":"1461340824.000536"},{"type":"message","user":"U0XV1HDL3","text":"now the output form the endorsers is a tx with its ops on state (read \/ write) and versions in which these take place, basically the writes &amp; reads should only be appended to ledger when ledger has still same versions as when endorser saw it","ts":"1461340957.000537"},{"type":"message","user":"U0XV1HDL3","text":"then this is sent through the ordering service implemented by the consensus service","ts":"1461340972.000538"},{"type":"message","user":"U0XV1HDL3","text":"what comes out there are ordered and \"valid\" (according to the endorsers) tx and their ensuing state changes","ts":"1461340997.000539"},{"type":"message","user":"U0XV1HDL3","text":"any peer can now consume this and will follow the recipe that it appends them to the ledger and affects the state \n-when endorsing sigs are valid according to policy\n-and versions match the expected ones","ts":"1461341047.000540"},{"type":"message","user":"U0XV1HDL3","text":"The peer can then update its hash chain, by computing  root = H(previous root,  tx descr, ops, versions)","ts":"1461341107.000541"},{"type":"message","user":"U0XQ35CDD","text":"correct","ts":"1461341241.000542"},{"type":"message","user":"U0XQ35CDD","text":"do we agree that this hash chaining cannot happen anywhere else?","ts":"1461341291.000543"},{"type":"message","user":"U0XV1HDL3","text":"it is not possible to get it elsewhere because: if there is to be only one chain, then this must be the chain \"consented on\", that is,","ts":"1461341358.000544"},{"type":"message","user":"U0XV1HDL3","text":"the one that comes out of consensus","ts":"1461341364.000545"},{"type":"message","user":"U0XV1HDL3","text":"in that sense, yes, i agree","ts":"1461341372.000546"},{"type":"message","user":"U0XQ35CDD","text":"so going back to the emails I sent, would you say we're in agreement? or is there something that's missing","ts":"1461341410.000547"},{"type":"message","user":"U0XV1HDL3","text":"one sec","ts":"1461341446.000548"},{"type":"message","user":"U0XV1HDL3","text":"yes, we agree. to find out what is the \"correct\" blockchain, i go to a peer that I trust and ask for the hash","ts":"1461341498.000549"},{"type":"message","user":"U0XV1HDL3","text":"then i can verify everything back from there, from this hash.","ts":"1461341517.000550"},{"type":"message","user":"U0XV1HDL3","text":"the feature that anyone else who goes to \"his\" peer should see the same ledger is then ensured from this, because his peer will also give the same hash or an extension of it","ts":"1461341547.000551"},{"type":"message","user":"U0XV1HDL3","text":"the other feature of blockchain should be that from the info on the blockchain (= hashed) one can recreate the current state. the above info allows this, assuming that also the deployed tx (their source) are included","ts":"1461341596.000552"},{"type":"message","user":"U0XQ35CDD","text":"and this peer in turn can find out if their blockchain is right, by querying the endorsers for the blockchain hash on the topmost block (and hoping for a quorum) - correct?","ts":"1461341599.000553"},{"type":"message","user":"U0XV1HDL3","text":"ah, no, the endorsers are now out","ts":"1461341616.000554"},{"type":"message","user":"U0XV1HDL3","text":"the endorsers would not know the topmost block better than any node that listens to the output of the (abstract) consensus service","ts":"1461341648.000555"},{"type":"message","user":"U0XV1HDL3","text":"if the consensus service is implemented by BFT, then the peer will go to 2f+1 and ask for their current block","ts":"1461341683.000556"},{"type":"message","user":"U0XQ35CDD","text":"that is not correct, because when you ask the endorsers, you say give me the \"blockchain hash of block 12\" (assuming 12 is *your* top-most block)","ts":"1461341684.000557"},{"type":"message","user":"U0XQ35CDD","text":"and the endorsers maintain state and can of course return that info","ts":"1461341703.000558"},{"type":"message","user":"U0XV1HDL3","text":"aha, i see ...","ts":"1461341736.000559"},{"type":"message","user":"U0XV1HDL3","text":"but an endorser would not play a special role here, for returning a block hash or storing it. any peer would do that, not only endorsers","ts":"1461341772.000560"},{"type":"message","user":"U0XQ35CDD","text":"yeah, that is a valid point","ts":"1461341782.000561"},{"type":"message","user":"U0XQ35CDD","text":"you don't have to focus just on the endorsers","ts":"1461341788.000562"},{"type":"message","user":"U0XV1HDL3","text":"i said, the endorser does not know *better*","ts":"1461341790.000563"},{"type":"message","user":"U0XV1HDL3","text":"ok, thanks for the discussion. i can turn this over into the design docs","ts":"1461341831.000564"},{"type":"message","user":"U0XQ35CDD","text":"sure thing. if you replace \"endorsers\" with \"peers\" in my last emails then everything should be exactly the same.","ts":"1461341861.000565"},{"type":"message","user":"U0XV1HDL3","text":"ok, thanks","ts":"1461341873.000566"},{"type":"message","user":"U0XR6J961","text":"cca: i would prefer that consensus happens on complete blocks","ts":"1461342832.000567"},{"type":"message","user":"U0XR6J961","text":"and ideally that during consensus incorrect blocks are rejected","ts":"1461342861.000568"},{"type":"message","user":"U0XR6J961","text":"so whatever happens to come out of consensus is the blockchain, without having to apply some special logic to filter out transactions\/blocks","ts":"1461342898.000569"},{"user":"U0KM0C3M3","type":"message","subtype":"channel_join","text":"<@U0KM0C3M3|jamie.steiner> has joined the channel","ts":"1461385245.000570"},{"user":"U12AHQ3NK","type":"message","subtype":"channel_join","text":"<@U12AHQ3NK|nits7sid> has joined the channel","ts":"1461421574.000571"},{"user":"U137A6LBE","type":"message","subtype":"channel_join","text":"<@U137A6LBE|latone> has joined the channel","ts":"1461458448.000572"},{"user":"U139GLMFD","type":"message","subtype":"channel_join","text":"<@U139GLMFD|howardwu> has joined the channel","ts":"1461555485.000573"},{"type":"message","user":"U12AHQ3NK","text":"Is there any restrictions on Block size?Like in Bitcoin blockchain there is 1MB per block and it handles only 7transactions per seconds... what in case of OBC?","ts":"1461574455.000574"},{"type":"message","user":"U0XR6J961","text":"you can configure how many transactions go into a block","ts":"1461578709.000575"},{"user":"U13DAL5V5","type":"message","subtype":"channel_join","text":"<@U13DAL5V5|wimtobback> has joined the channel","ts":"1461584322.000576"},{"type":"message","user":"U12AHQ3NK","text":"and also the timeout ?","ts":"1461586282.000577"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1461586825.000578"},{"type":"message","user":"U12AHQ3NK","text":"what happens when a peer on which chaincode is deployed  goes down?","ts":"1461588179.000579"},{"type":"message","user":"U0XR6J961","text":"crashes, you mean?","ts":"1461588219.000580"},{"type":"message","user":"U12AHQ3NK","text":"Yes","ts":"1461588224.000581"},{"type":"message","user":"U0XR6J961","text":"then everything proceeds as normal","ts":"1461588241.000582"},{"type":"message","user":"U0XR6J961","text":"unless more than f replicas don't answer","ts":"1461588251.000583"},{"type":"message","user":"U0XR6J961","text":"then the network stops processing requests until there are 2f+1 replicas operating correctly again","ts":"1461588270.000584"},{"type":"message","user":"U12AHQ3NK","text":"Ohh okay! ","ts":"1461589287.000585"},{"type":"message","user":"U12AHQ3NK","text":"In case of obcpbft\/config.yaml what does N value signify?","ts":"1461589597.000586"},{"type":"message","user":"U0Z3BE0F5","text":"number of peers in the network","ts":"1461589616.000587"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: Are you close to merging your crash fault tolerance work? Was going to rebase my single-threading work onto it if so","ts":"1461594428.000588"},{"type":"message","user":"U0XR6J961","text":"oh, i didn't see that work","ts":"1461594446.000589"},{"type":"message","user":"U0XR6J961","text":"am i tracking the wrong repo?","ts":"1461594452.000590"},{"type":"message","user":"U0XR6J961","text":"yes, i'm close","ts":"1461594460.000591"},{"type":"message","user":"U0XPR4NP4","text":"No, I just have done it in a few different branches and not pushed anything","ts":"1461594474.000592"},{"type":"message","user":"U0XR6J961","text":"ah","ts":"1461594487.000593"},{"type":"message","user":"U0XR6J961","text":"i'm having problems with state transfer","ts":"1461594502.000594"},{"type":"message","user":"U0XR6J961","text":"i fixed a couple of bugs","ts":"1461594516.000595"},{"type":"message","user":"U0XR6J961","text":"now trying again","ts":"1461594519.000596"},{"type":"message","user":"U0XPR4NP4","text":"<https:\/\/github.com\/corecode\/fabric\/tree\/revert-executor> &lt;- the correct branch to rebase onto?","attachments":[{"service_name":"GitHub","title":"corecode\/fabric","title_link":"https:\/\/github.com\/corecode\/fabric\/tree\/revert-executor","text":"Blockchain fabric code","fallback":"GitHub: corecode\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400","from_url":"https:\/\/github.com\/corecode\/fabric\/tree\/revert-executor","thumb_width":400,"thumb_height":400,"id":1}],"ts":"1461594549.000597"},{"type":"message","user":"U0XR6J961","text":"i just pushed a rebased version","ts":"1461594558.000599"},{"type":"message","user":"U0XR6J961","text":"because of jeff's changes","ts":"1461594564.000600"},{"type":"message","user":"U0XR6J961","text":"could you push your current changes?","ts":"1461594604.000601"},{"type":"message","user":"U0XPR4NP4","text":"I will try to get them pushed soon, rebasing may take me some time.  In your code I see this:\n\n```\n                go func() {\n                        instance.consumer.execute(idx.n, req.Payload)\n                        <http:\/\/logger.Info|logger.Info>(\"Replica %d finished execution %d, trying next\", instance.id, idx.n)\n                        instance.lock()\n                        defer instance.unlock()\n                        instance.execDone()\n                }()\n```","ts":"1461594848.000602"},{"type":"message","user":"U0XPR4NP4","text":"What guarantees multiple of those goroutines from being started at the same time? And if nothing, what guarantees they execute in order?","ts":"1461594883.000603"},{"type":"message","user":"U0XR6J961","text":"executeOne() will only run again if currentExec is nil","ts":"1461594911.000604"},{"type":"message","user":"U0XR6J961","text":"which is set to nil by execDone()","ts":"1461594928.000605"},{"type":"message","user":"U0XR6J961","text":"it's all an ad hoc state machine - i'd prefer if all of this was formalized using a declarative state machine","ts":"1461594951.000606"},{"type":"message","user":"U0XPR4NP4","text":"Okay, thanks","ts":"1461594961.000607"},{"type":"message","user":"U0XR6J961","text":"do you have a suggestion how to make this more explicit and less open-coded?","ts":"1461595013.000608"},{"type":"message","user":"U0XPR4NP4","text":"Not off the top of my head, we just had that outstanding bug around dropping the lock before executions which was causing our executions to occur out of order","ts":"1461595304.000609"},{"type":"message","user":"U0XR6J961","text":"i guess this could go into a mini-executor","ts":"1461595312.000610"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1461595316.000611"},{"type":"message","user":"U0XPR4NP4","text":"Yes, it might be worth factoring out, `pbft-core.go` is complex enough as it is.","ts":"1461595425.000612"},{"type":"message","user":"U0XR6J961","text":"right","ts":"1461595430.000613"},{"type":"message","user":"U0XR6J961","text":"doesn't have to go into a separate package, but a separate \"object\" may be a good idea","ts":"1461595460.000614"},{"type":"message","user":"U0XR6J961","text":"oh I realized that many patterns work well with embedding","ts":"1461595476.000615"},{"type":"message","user":"U0XR6J961","text":"I didn't know enough go early on to use embedding effectively","ts":"1461595494.000616"},{"type":"message","user":"U0XR6J961","text":"e.g. the omniproto could be used as a base for embedding","ts":"1461595568.000617"},{"type":"message","user":"U0XR6J961","text":"instead of using these \"impl\" function pointers","ts":"1461595590.000618"},{"type":"message","user":"U0XR6J961","text":"```14:47:22.035 [consensus\/obcpbft] restoreState -&gt; INFO 036\u001b[0m Replica 3 restored state: view: 0, seqNo: 31, lastExec: 0, pset: 1, qset: 0, reqs: 31```","ts":"1461595837.000619"},{"type":"message","user":"U0XR6J961","text":"why lastExec 0?","ts":"1461595842.000620"},{"type":"message","user":"U0XR6J961","text":"and then this: ```\u001b[33m14:47:39.387 [consensus\/statetransfer] tryOverPeers -&gt; WARN 18a\u001b[0m name:\"vp3\"  in tryOverPeers loop trying name:\"vp0\"  : name:\"vp3\"  got block 37 from name:\"vp0\"  with hash 81e3da4e5fe0d18f2a7fd662e8e982e1e7ab5ab5a36e73587f97b772f0546370424a6b7eee8f60304d37faf07171e3466506349995596e6ae7c28bbf782b5ac9, was expecting hash 763d71e4e31a313973c000ac68d0414f95ff87bc6efe9f66c662a880b81381d11d3a4b7fd18dcea25590adec5f8eee74fae9c0cc63f1e878cab4250cf9badb6b```","ts":"1461595879.000621"},{"type":"message","user":"U0XR6J961","text":":disappointed:","ts":"1461595884.000622"},{"type":"message","user":"U0XR6J961","text":"i don't get it","ts":"1461596039.000623"},{"type":"message","user":"U0XR6J961","text":"i need an offline block explorer","ts":"1461596044.000624"},{"type":"message","user":"U0XR6J961","text":"DUH","ts":"1461596173.000625"},{"type":"message","user":"U0XR6J961","text":"i didn't update batch yet","ts":"1461596183.000626"},{"type":"message","user":"U0XR6J961","text":"wrong hash, why","ts":"1461597916.000627"},{"type":"message","user":"U0XR6J961","text":"how do i even start to debug this","ts":"1461597963.000628"},{"text":"dreams of distributed gdb","type":"message","subtype":"me_message","user":"U0XR6J961","ts":"1461597999.000629"},{"type":"message","user":"U0XPR4NP4","text":"I usually find that things are an off by one error, try grep-ing for 'wrong' hash in the logs? You might find it belongs to an adjacent block?","ts":"1461598211.000630"},{"type":"message","user":"U0XR6J961","text":"yea i dunno","ts":"1461598241.000631"},{"type":"message","user":"U0XR6J961","text":"trying delve now","ts":"1461598246.000632"},{"type":"message","user":"U12AHQ3NK","text":"Am in correct on this ?The peer on which i deploy a chaincode becomes my primary replica?","ts":"1461599397.000633"},{"type":"message","user":"U0XR6J961","text":"no","ts":"1461599673.000634"},{"type":"message","user":"U0XR6J961","text":"all peers will deploy the chaincode","ts":"1461599685.000635"},{"type":"message","user":"U0XR6J961","text":"the primary is just part of PBFT, and changes during network problems or incorrect behavior of the primary","ts":"1461599720.000636"},{"type":"message","user":"U0XR6J961","text":"all validating peers are exactly the same","ts":"1461599739.000637"},{"type":"message","user":"U12AHQ3NK","text":"ohh... what id the significance of N=\"4\" peers in the network? and also .yaml has 9 test VP's listed..can you please explain me their importance?","ts":"1461599839.000638"},{"type":"message","user":"U12AHQ3NK","text":"is**","ts":"1461599847.000639"},{"type":"message","user":"U0XR6J961","text":"N=4 means that there are 4 peers in the network","ts":"1461599862.000640"},{"type":"message","user":"U0XR6J961","text":"i don't know which yaml lists 9 test VPs","ts":"1461599888.000641"},{"type":"message","user":"U12AHQ3NK","text":"membersrvc.yaml","ts":"1461599954.000642"},{"type":"message","user":"U0XR6J961","text":"oh i don't know about membersvc","ts":"1461600034.000643"},{"type":"message","user":"U0UGH3X7X","text":"membersrvc.yaml list userids that you can use when developing\/testing fabric  ... not meant to map to actual number of peers","ts":"1461600036.000644"},{"type":"message","user":"U12AHQ3NK","text":"ohh so basically in dev-net environment i can start max 4 VP's","ts":"1461600181.000645"},{"type":"message","user":"U0XR6J961","text":"i have no idea about dev-net - i'd start a single one","ts":"1461600261.000646"},{"type":"message","user":"U0XR6J961","text":"passed!","ts":"1461600271.000647"},{"type":"message","user":"U0XR6J961","text":"jyellick: right on, off-by one regarding block height","ts":"1461600281.000648","reactions":[{"name":"simple_smile","users":["U0XPR4NP4"],"count":1}]},{"type":"message","user":"U0UGH3X7X","text":"right, devnet shows an example. You can start N &gt; 4 peers if you wish","ts":"1461600377.000649"},{"type":"message","user":"U0UGH3X7X","text":"N=4 just happens to show how PBFT works if you allow 1 peer to go byzantine\/stop working","ts":"1461600429.000650"},{"type":"message","user":"U0XR6J961","text":"nits7sid: do you want to work on consensus code, or on chaincode?","ts":"1461600453.000651"},{"type":"message","user":"U12AHQ3NK","text":"Well i actually want to work on chaincode..But i had some queries on consensus which got solved..Thanks to <@U0XR6J961> and <@U0UGH3X7X>","ts":"1461600830.000652"},{"type":"message","user":"U0XR6J961","text":"jyellick: what I pushed works for batch and classic.  working on sieve now","ts":"1461600837.000653"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: I still don't understand how your branch handles state transfer, what happens if you witness a weak checkpoint for seqNo 10, and then one for seqNo 20, passing them both to state transfer, how do you know which seqNo state transfer completes to?","ts":"1461604346.000654"},{"type":"message","user":"U0XR6J961","text":"yea, i just added a XXX for that","ts":"1461604364.000655"},{"type":"message","user":"U0XR6J961","text":"it will have to retrieve the lastExec seqno from the block","ts":"1461604380.000656"},{"type":"message","user":"U0XPR4NP4","text":"So seqNo is now in the consensusMetadata in the block?","ts":"1461604398.000657"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1461604457.000658"},{"type":"message","user":"U0XPR4NP4","text":"How do you handle this for Sieve? (It used to be in the block, but we removed it explicitly to support Sieve)","ts":"1461604528.000659"},{"type":"message","user":"U0XR6J961","text":"sieve uses the block height","ts":"1461604788.000660"},{"type":"message","user":"U0XR6J961","text":"from the blockchain","ts":"1461604791.000661"},{"type":"message","user":"U0XPR4NP4","text":"But Sieve could still have null requests? And this would cause the seqNo and block number to diverge?","ts":"1461604982.000662"},{"type":"message","user":"U0XPR4NP4","text":"I guess what I am getting at, is that Sieve will need to call into `pbft-core.go` to update the `lastExec` properly, and the block number does not help us there?","ts":"1461605077.000663"},{"type":"message","user":"U0XR6J961","text":"sieve does not have null requests","ts":"1461605195.000664"},{"type":"message","user":"U0XR6J961","text":"yes, any state transfer needs to call (eventually) into pbft so that it can update lastexec","ts":"1461605227.000665"},{"type":"message","user":"U0XPR4NP4","text":"Why does Sieve rule out null requests? What if a byzantine primary skips a sequence number when it sends the pre-prepare, this will lead to a view change, and force the next primary to send a null request.  I didn't notice any inspection of the PBFT message to ensure that primary does not do this","ts":"1461605427.000666"},{"type":"message","user":"U0XR6J961","text":"ah, that's a pbft request","ts":"1461605458.000667"},{"type":"message","user":"U0XR6J961","text":"i thought you meant sieve requests","edited":{"user":"U0XR6J961","ts":"1461605484.000000"},"ts":"1461605471.000668"},{"type":"message","user":"U0XPR4NP4","text":"Ah, no, certainly Sieve does not allow null requests","ts":"1461605489.000670"},{"type":"message","user":"U0XR6J961","text":"pbft null requests are fine, sieve itself uses the blockchain height for its blocknumber","ts":"1461605514.000671"},{"type":"message","user":"U0XPR4NP4","text":"But at the completion of state transfer, how does Sieve know which PBFT sequence number the PBFT core has now `lastExec`-ed?","ts":"1461605546.000672"},{"type":"message","user":"U0XR6J961","text":"pbft restores its state from the head block","ts":"1461605558.000673"},{"type":"message","user":"U0XR6J961","text":"like it had just been restarted","ts":"1461605563.000674"},{"type":"message","user":"U0XR6J961","text":"from the consensus metadata","ts":"1461605582.000675"},{"type":"message","user":"U0XPR4NP4","text":"But if Sieve is consenting on the block hash, and the block contains the consensus metadata, which contains the PBFT sequence number, then how does Sieve pick the right info, prior to PBFT ordering?","ts":"1461605641.000676"},{"type":"message","user":"U0XR6J961","text":"i'm just using the last verify exec number","ts":"1461605722.000677"},{"type":"message","user":"U0XR6J961","text":"it's not nice, but it works","ts":"1461605734.000678"},{"type":"message","user":"U0XR6J961","text":"it's functionally the same as if verify+exec were in one double message","ts":"1461605756.000679"},{"type":"message","user":"U0XPR4NP4","text":"But `Verify` is a Sieve message, not a PBFT one? (it doesn't have a sequence number?)","ts":"1461605914.000680"},{"type":"message","user":"U0XPR4NP4","text":"(Sorry if I am being dense)","ts":"1461605922.000681"},{"type":"message","user":"U0XR6J961","text":"yes, but it comes through pbft","ts":"1461606882.000682"},{"type":"message","user":"U0XR6J961","text":"and therefore provides a seqno that can be used to restore to","ts":"1461606898.000683"},{"type":"message","user":"U0XPR4NP4","text":"It looks like the `Verify` is broadcast directly,  but the `VerifySet` comes through as a pbft message which would have a sequence number, so I'm guessing you were talking about.  So block `n`, would contain the consensus metadata that actually went into  block `n-1`? How then do you actually recover the sequence number which corresponds to a state transfer to block `n`?","ts":"1461608272.000684"},{"type":"message","user":"U0XR6J961","text":"ah yes, sorry","ts":"1461608395.000685"},{"type":"message","user":"U0XR6J961","text":"verifyset","ts":"1461608398.000686"},{"type":"message","user":"U0XR6J961","text":"you're just one off","ts":"1461608425.000687"},{"type":"message","user":"U0XPR4NP4","text":"But you don't know if there was a null request? You could be 20 off?","ts":"1461608440.000688"},{"type":"message","user":"U0XR6J961","text":"yes, you could be","ts":"1461609376.000689"},{"type":"message","user":"U0XR6J961","text":"but if they execute, all is fine","ts":"1461609384.000690"},{"type":"message","user":"U0XR6J961","text":"because they're null requests","ts":"1461609392.000691"},{"type":"message","user":"U0XPR4NP4","text":"I guess the problem I am seeing is:\n\nvp0,1,2 in network, vp0 byzantine and primary, at block 8, seqNo 8\nvp0 deliberately skips seqNo 9 and sends pre-prepare for seqNo 10, for block 9 (which gets a commit cert)\nThis triggers a view change, and new primary vp1 is forced to queue null request, and skip seqNo 9, as seqNo 10 has a commit certificate and it is for block 9.\nThe network now has a stable checkpoint for seqNo 10, corresponding to block 9, which has consensus metadata of seqNo 8.\nvp3 rejoins the network after crash, vp0 decides now to ignore all requests.\nEventually, because of view change, vp3 gets the last stable checkpoint to transfer to, which corresponds to block 9 (seqNo 10), so it performs a state transfer to this point, and sets its seqNo to 8+1 (according to the consensus metadata).  Its sequence number is now out of sync, and the network will never make progress, as byzantine vp0 has effectively tricked vp3 into a bad state (and now f=2).","ts":"1461610532.000692"},{"type":"message","user":"U0XR6J961","text":"which seqno is set?","ts":"1461610616.000693"},{"type":"message","user":"U0XR6J961","text":"lastexec?","ts":"1461610621.000694"},{"type":"message","user":"U0XPR4NP4","text":"Yes","ts":"1461610631.000695"},{"type":"message","user":"U0XPR4NP4","text":"(the above is for k=10 as our defaults, if it was not clear)","ts":"1461610677.000696"},{"type":"message","user":"U0XR6J961","text":"sorry, i don't understand","ts":"1461610739.000697"},{"type":"message","user":"U0XR6J961","text":"can you write a step by step sequence?","ts":"1461610749.000698"},{"type":"message","user":"U0XR6J961","text":"i think you're saying that because state transfer catches up to seqno 10, so should lastexec?","ts":"1461610832.000699"},{"type":"message","user":"U0XPR4NP4","text":"Is it alright if I start from:\n\nThe network now has a stable checkpoint for seqNo 10, corresponding to block 9, which has consensus metadata of seqNo 8.\n\n?","ts":"1461610929.000700"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1461610947.000701"},{"type":"message","user":"U0XR6J961","text":"i think i know what you mean","ts":"1461610953.000702"},{"type":"message","user":"U0XR6J961","text":"so state transfer needs to get the tag to play forward to, and then pass this tag to the callback","ts":"1461611022.000703"},{"type":"message","user":"U0XR6J961","text":"but will that solve all issues?","ts":"1461611029.000704"},{"type":"message","user":"U0XPR4NP4","text":"Yes, so that is why state transferred got enhanced to take that interface, which it would pass back to the caller so that it knew which point was transferred to.","ts":"1461611075.000705"},{"type":"message","user":"U0XR6J961","text":"right - that will be easy","ts":"1461611152.000706"},{"type":"message","user":"U0XR6J961","text":"what if sieve needs to sync?","ts":"1461611185.000707"},{"type":"message","user":"U0XPR4NP4","text":"Yes, this is exactly why the executor had that wrapping pattern for checkpoint IDs.  The executor would generate an ID which embedded the block hash and sequence number.  Then, Sieve would wrap that ID with its own block number information, before passing it into pbft-core as the checkpoint","ts":"1461611232.000708"},{"type":"message","user":"U0XPR4NP4","text":"That was the big point of the executor, was eliminating the sync logic from PBFT and plugins, that on sync completion only the executor had to manipulate itself, the core and plugins manipulated their own state and initiation of state transfer, so the callbacks were not needed.","ts":"1461611441.000709"},{"type":"message","user":"U0XPR4NP4","text":"Otherwise, there will need to be some other sort of cooperation mechanism between pbft and plugin to ensure that everything both pieces need for that callback gets embedded","ts":"1461611519.000710"},{"type":"message","user":"U0XR6J961","text":"probably not needed, because sieve can restore its state from the blockchain","ts":"1461611557.000711"},{"type":"message","user":"U0XR6J961","text":"it would be nice if pbft could do the same","ts":"1461611581.000712"},{"type":"message","user":"U0XPR4NP4","text":"Agreed, but Sieve seems to make that impossible, as we need to compute the block before PBFT has been invoked, so we can't embed the PBFT state in there.","ts":"1461611618.000713"},{"type":"message","user":"U0XR6J961","text":"we can, just an earlier state","ts":"1461611639.000714"},{"type":"message","user":"U0XR6J961","text":"which sieve can deal with","ts":"1461611654.000715"},{"type":"message","user":"U0XPR4NP4","text":"But then we have the problem I just described, where the PBFT state changes in an unlikely way (such as null requests)","ts":"1461611664.000716"},{"type":"message","user":"U0XR6J961","text":"hmm i may have made an incorrect change anyways","ts":"1461611709.000717"},{"type":"message","user":"U0XR6J961","text":"stopping timer on commit certificate reception","ts":"1461611719.000718"},{"type":"message","user":"U0XR6J961","text":"not on execute","ts":"1461611721.000719"},{"type":"message","user":"U0XR6J961","text":"but we can't stop on execute, because they take forever (deploy)","ts":"1461611736.000720"},{"type":"message","user":"U0XR6J961","text":"so i don't know","ts":"1461611753.000721"},{"type":"message","user":"U0XR6J961","text":"hm yes","ts":"1461616005.000722"},{"type":"message","user":"U0XR6J961","text":"jyellick: indeed.  it already doesn't work for the behave test.  sieve retrieves an older exec and then pbft can't commit","ts":"1461616036.000723"},{"type":"message","user":"U0XR6J961","text":"i'm pondering a nasty hack","ts":"1461616051.000724"},{"type":"message","user":"U0XPR4NP4","text":"What sort of hack?","ts":"1461616092.000725"},{"type":"message","user":"U0XPR4NP4","text":"(other than nasty, of course)","ts":"1461616103.000726"},{"type":"message","user":"U0XR6J961","text":"i thought about adding 1 to the seqno stored by sieve","ts":"1461616445.000727"},{"type":"message","user":"U0XR6J961","text":"but i'll try the tag first","ts":"1461616450.000728"},{"type":"message","user":"U0XR6J961","text":"it won't help with a replica restarting though","ts":"1461616460.000729"},{"type":"message","user":"U0XR6J961","text":"that's a problem","ts":"1461616469.000730"},{"type":"message","user":"U0XR6J961","text":"imagine all replicas crash except for one","ts":"1461616476.000731"},{"type":"message","user":"U0XR6J961","text":"and restart","ts":"1461616478.000732"},{"type":"message","user":"U0XR6J961","text":"they will be one behind and won't ever catch up","ts":"1461616496.000733"},{"type":"message","user":"U0XR6J961","text":"my at&amp;t vpn doesn't work","ts":"1461616542.000734"},{"type":"message","user":"U0XPR4NP4","text":"Yes, the crash scenario remains a problem.","ts":"1461616740.000735"},{"type":"message","user":"U0XPR4NP4","text":"(for what it's worth, VPN here seems fine)","ts":"1461616754.000736"},{"type":"message","user":"U0XPR4NP4","text":"So here is a question for you <@U0XR6J961>, I have pbft-core doing everything on a single thread, driven by channels now.  In ordinary operations, it sits in a select waiting for one of those channels to send a message, and then does the work.  The problem this causes with all of our existing test cases is that `process()` assumes that the thread which sends the message is consumed, so it immediately goes to check if things are idle, and they are, because the thread in the select hasn't had a chance to do anything.","ts":"1461616905.000737"},{"type":"message","user":"U0XPR4NP4","text":"I initially added yet another boolean that could be checked, but it is a race.  There is the idle channel type pattern which I used before, but am not crazy about, and I saw you had removed it from `process()`, how would you suggest I get `process()` to block?","ts":"1461616976.000738"},{"user":"U13JUH485","type":"message","subtype":"channel_join","text":"<@U13JUH485|fabio> has joined the channel","ts":"1461617675.000739"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: Everything's not passing yet, but if you are eager to take a look, you can see my issue-973 branch","ts":"1461621748.000740"},{"type":"message","user":"U0XR6J961","text":"cool","ts":"1461622121.000741"},{"type":"message","user":"U0XR6J961","text":"it's past midnight here","ts":"1461622126.000742"},{"type":"message","user":"U0XR6J961","text":"so i'll have a look tomorrow","ts":"1461622131.000743"},{"type":"message","user":"U0XR6J961","text":"```22:03:57.884 [consensus\/obcpbft] executeVerifySet -&gt; INFO 64c\u001b[0m Decision successful, but our output does not match (0826124039f938d3f299e917e859e9611c4d31d41336be61842cdd3ef944e38fa201ab8d00bcc5143c602794a1ae1d33495c7a489931ee6e2741787f4afb9f2ff001ba1a1a400b70443534fd04f0e73aa20148edd33f6e5672d311bb37f0718f1f5a156ff8c6bc2c5f033158e2a2178c73c85b2934954ab73bb84f66e257ed8c41670247fffc) vs (082612404c63aaba876263c7f6fbd635ab1fce88ede426806f8e8d601d4eb50b122f6f9b9eccbe0923fb881ec000bc263a4614f17067f677e990f5aa0c7221f35fdffc931a400b70443534fd04f0e73aa20148edd33f6e5672d311bb37f0718f1f5a156ff8c6bc2c5f033158e2a2178c73c85b2934954ab73bb84f66e257ed8c41670247fffc)\n```","ts":"1461622525.000744"},{"type":"message","user":"U0XR6J961","text":"hmmm","ts":"1461622527.000745"},{"type":"message","user":"U0XR6J961","text":"why?","ts":"1461622528.000746"},{"type":"message","user":"U0XR6J961","text":"this is going to be so much pain","ts":"1461622686.000747"},{"type":"message","user":"U0XR6J961","text":"to make this work reliably","ts":"1461622690.000748"},{"type":"message","user":"U0XR6J961","text":"i think exec needs to go into pbft","ts":"1461622845.000749"},{"type":"message","user":"U0XR6J961","text":"but there was some reason marko told me","ts":"1461622857.000750"},{"type":"message","user":"U0XR6J961","text":"if we just can treat the sieve commits as checkpoints","ts":"1461622961.000751"},{"type":"message","user":"U0XR6J961","text":"that would be great","ts":"1461622965.000752"},{"type":"message","user":"U0XR6J961","text":"they effectively are","ts":"1461622994.000753"},{"type":"message","user":"U0XR6J961","text":"they even carry the previous block hash...","ts":"1461623006.000754"},{"type":"message","user":"U0XR6J961","text":"which means that we should be able to seek to every block","ts":"1461623050.000755"},{"type":"message","user":"U0XR6J961","text":"i need to move the execDone out to make it completely asynchronous","ts":"1461623071.000756"},{"type":"message","user":"U0XR6J961","text":"hi","ts":"1461669604.000757"},{"type":"message","user":"U0XR6J961","text":"<@U0XPR4NP4>: you around?","ts":"1461672243.000758"},{"type":"message","user":"U0XR6J961","text":"i'm trying to understand `TestViewChangeWatermarksMovement` - and why it worked without panic","ts":"1461672272.000759"},{"type":"message","user":"U0XR6J961","text":"<@U0XPR4NP4>: i think `b47c4c3` is wrong","ts":"1461673808.000760"},{"type":"message","user":"U0XR6J961","text":"i don't think we need to initiate a state transfer when lastExec is lagging behind","ts":"1461673841.000761"},{"type":"message","user":"U0XR6J961","text":"or is that related to the executor","ts":"1461673852.000762"},{"type":"message","user":"U0XR6J961","text":"probably it is","ts":"1461673876.000763"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: Let me take a look","ts":"1461674208.000764"},{"type":"message","user":"U0XPR4NP4","text":"So, we are picking a new checkpoint to begin executing from.  I suppose if we believe we have all commit certificates leading up to that checkpoint, then we could simply attempt to execute them, but it should be safe to move our watermarks and perform state transfer.  By design the view change guarantees we pick a checkpoint which has at least one non-byzantine node to replicate from.","ts":"1461674454.000765"},{"type":"message","user":"U0XPR4NP4","text":"`b47c4c3` actually made state transfer less likely to occur, we used to perform state transfer if our low watermark was below the checkpoint, even if we had already executed beyond that checkpoint, which was definitely wrong.  The executor mitigated it by discarding the state transfer (as it was for a sequence number less than had already been executed to), but it still screwed up our `lastExec` by lowering it.","edited":{"user":"U0XPR4NP4","ts":"1461674619.000000"},"ts":"1461674594.000766"},{"type":"message","user":"U0XR6J961","text":"ah i see","ts":"1461674626.000768"},{"type":"message","user":"U0XR6J961","text":"what i was thinking was that we may have already have a commit certificate and could execute a request","ts":"1461674666.000769"},{"type":"message","user":"U0XR6J961","text":"but we just didn't get to it yet","ts":"1461674671.000770"},{"type":"message","user":"U0XR6J961","text":"in that case we don't need to do a state transfer either","ts":"1461674687.000771"},{"type":"message","user":"U0XR6J961","text":"the reason i'm talking about this is because suddenly that test is failing and I don't quite understand how it didn't fail before","ts":"1461674713.000772"},{"type":"message","user":"U0XR6J961","text":"specifically this triggered: ```\tif !(len(msgList) == 0 &amp;&amp; len(nv.Xset) == 0) &amp;&amp; !reflect.DeepEqual(msgList, nv.Xset) {\n\t\tlogger.Warning(\"Replica %d failed to verify new-view Xset: computed %+v, received %+v\",\n\t\t\tinstance.id, msgList, nv.Xset)\n\t\treturn instance.sendViewChange()\n\t}\n```","ts":"1461674753.000773"},{"type":"message","user":"U0XR6J961","text":"of course the msgList is populated (we have at least one request per xset), and xset injected in the test is empty","ts":"1461674802.000774"},{"type":"message","user":"U0XR6J961","text":"so i'm scratching my head","ts":"1461674816.000775"},{"type":"message","user":"U0XPR4NP4","text":"`(len(msgList) == 0 &amp;&amp; len(nv.Xset) == 0)` should be true, so the first piece should be false, and the second half should not be evaluated, and we should skip it?","ts":"1461674872.000776"},{"type":"message","user":"U0XPR4NP4","text":"I guess I'm unsure why `msgList` is non-empty","ts":"1461674896.000777"},{"type":"message","user":"U0XR6J961","text":"oh","ts":"1461674927.000778"},{"type":"message","user":"U0XR6J961","text":"because there is always at least one request in an Xset","ts":"1461674938.000779"},{"type":"message","user":"U0XR6J961","text":"at least one null request","ts":"1461674944.000780"},{"type":"message","user":"U0XR6J961","text":"or not?","ts":"1461674951.000781"},{"type":"message","user":"U0XR6J961","text":"ah yes","ts":"1461675011.000782"},{"type":"message","user":"U0XPR4NP4","text":"I would need to check the paper, really, that test is just supposed to be very specifically against the watermark movement and that bit was not being executed, so I did not worry about it","ts":"1461675032.000783"},{"type":"message","user":"U0XR6J961","text":"which is anyways our modification - original pbft fills the whole log with null requests","ts":"1461675056.000784"},{"type":"message","user":"U0XR6J961","text":"i'm just wondering how it didn't fail before :simple_smile:","ts":"1461675079.000785"},{"type":"message","user":"U0XR6J961","text":"I'm getting a panic not implemented, because it is trying to sign the view change message :simple_smile:","ts":"1461675098.000786"},{"type":"message","user":"U0XR6J961","text":"although you stubbed out the viewchangeimpl","ts":"1461675164.000787"},{"type":"message","user":"U0XR6J961","text":"so i don't know","ts":"1461675169.000788"},{"type":"message","user":"U0XR6J961","text":"ah no, that is called as response","ts":"1461675197.000789"},{"type":"message","user":"U0XPR4NP4","text":"Hmmm, so, looking at `assignSequenceNumbers` quickly, it meshes with that's in my head, if there is nothing in the P-set, because we have not prepared any requests","ts":"1461675335.000790"},{"type":"message","user":"U0XPR4NP4","text":"Then there is no need to fill in any null requests","ts":"1461675347.000791"},{"type":"message","user":"U0XR6J961","text":"no, there is always at least one request","ts":"1461675502.000792"},{"type":"message","user":"U0XR6J961","text":"(in original pbft, the whole L size is filled, with null requests if need be)","ts":"1461675523.000793"},{"type":"message","user":"U0XR6J961","text":"that was a bug we fixed long ago (as evidenced by a viewchange timeout because nothing executed after view change)","ts":"1461675562.000794"},{"type":"message","user":"U0XPR4NP4","text":"Then that seems like a bit of a silly check on the length of `msgList`","ts":"1461675565.000795"},{"type":"message","user":"U0XR6J961","text":"indeed","ts":"1461675573.000796"},{"type":"message","user":"U0XR6J961","text":"still, how come that test didn't fail before?","edited":{"user":"U0XR6J961","ts":"1461675715.000000"},"ts":"1461675700.000797"},{"type":"message","user":"U0XPR4NP4","text":"Yes, looking at little harder at `assignSequenceNumbers`, it seems like `maxN` should be our checkpoint seqNo+1, we have a quorum from the vSet, we should get 1 null request.","ts":"1461675720.000799"},{"type":"message","user":"U0XR6J961","text":"yep","ts":"1461675806.000800"},{"type":"message","user":"U0XPR4NP4","text":"But yes, I agree, I'm not sure how it didn't fail.  I'd say pretty clearly something must have changed, but I didn't think we'd been doing any real mucking around in the view change code (other than this, and another fix or two)","ts":"1461675807.000801"},{"type":"message","user":"U0XPR4NP4","text":"[And obviously I wouldn't have pushed any of those if they caused a panic in our tests]","ts":"1461675831.000802"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1461675855.000803"},{"type":"message","user":"U0XR6J961","text":"weird","ts":"1461675858.000804"},{"type":"message","user":"U0XPR4NP4","text":"So do you have an opinion on how to fix `process()` with PBFT processing not on the message thread?","ts":"1461676290.000805"},{"type":"message","user":"U0XR6J961","text":"regarding your proposed patch?","ts":"1461676337.000806"},{"type":"message","user":"U0XPR4NP4","text":"Yes","ts":"1461676339.000807"},{"type":"message","user":"U0XPR4NP4","text":"Or, other feedback on said patch is also welcome","ts":"1461676360.000808"},{"type":"message","user":"U0XR6J961","text":"i'll have a look in a minute","ts":"1461676502.000809"},{"type":"message","user":"U0XR6J961","text":"what i noticed when i had a look this morning: there is no back channel when the request gets dropped","ts":"1461676561.000810"},{"type":"message","user":"U0XR6J961","text":"you call it reject, but I don't see how the rejection works","ts":"1461676576.000811"},{"type":"message","user":"U0XR6J961","text":"ideally the request wouldn't be dequeued in the first place","ts":"1461676606.000812"},{"type":"message","user":"U0XPR4NP4","text":"In `handler.go`?","ts":"1461676978.000813"},{"type":"message","user":"U0XPR4NP4","text":"If so, I moved the reply into a deferred function, so that whatever is set in `response` gets sent when the function exits.  The logic before was pretty messy around setting and sending that `response` and the defer simplifies it considerably.  So, in the event that a request is not queued, it sends back an error response to the sender.","ts":"1461677116.000814"},{"type":"message","user":"U0XPR4NP4","text":"Hmm, actually looks like I may have missed some.","ts":"1461677200.000815"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I only do the rejection reply for the chain transactions, as that was the only place we did it before.","ts":"1461677267.000816"},{"type":"message","user":"U0XPR4NP4","text":"Would you suggest we reply with a reject for consensus messages as well?  I'm not sure what the other side would do with that.","ts":"1461677329.000817"},{"type":"message","user":"U0XR6J961","text":"ah no","ts":"1461677357.000818"},{"type":"message","user":"U0XPR4NP4","text":"(And we must dequeue even if there is no space in the buffer.  Otherwise we expose ourselves to the same sort of deadlock conditions which this changeset attempts to remove)","ts":"1461677372.000819"},{"type":"message","user":"U0XR6J961","text":"first, i think we agreed that there are different types of messages\/events to consensus that need to be handled differently","ts":"1461677426.000820"},{"type":"message","user":"U0XR6J961","text":"consensus messages should always be acted upon, while locally generated requests may back up (so that the frontend can inform the clients about overload)","ts":"1461677474.000821"},{"type":"message","user":"U0XR6J961","text":"that implies that these different events should have different ingress routes.  I never liked the generic `RecvMsg` interface","ts":"1461677512.000822"},{"type":"message","user":"U0XPR4NP4","text":"So, we don't have the promise that consensus messages are always acted upon today.  In the event that consensus does not read them fast enough, the gRPC buffer backs up, and they start getting discarded.  We are just trading a gRPC buffer, for one we control.","ts":"1461677592.000823"},{"type":"message","user":"U0XR6J961","text":"ah right","ts":"1461677606.000824"},{"type":"message","user":"U0XR6J961","text":"well, that is even acceptable","ts":"1461677617.000825"},{"type":"message","user":"U0XR6J961","text":"i guess","ts":"1461677618.000826"},{"type":"message","user":"U0XR6J961","text":"we just want to be able to prioritize consensus messages over new requests?","ts":"1461677634.000827"},{"type":"message","user":"U0XR6J961","text":"or rather, we want to be able to accept new local requests at our own pace (maybe we only have X oustanding requests per replica)","ts":"1461677668.000828"},{"type":"message","user":"U0XPR4NP4","text":"So, yes, local request actually stay somewhat synchronous thusfar in this changeset, as `engine.go` directly injects them via `RecvMsg` to consensus","ts":"1461677761.000829"},{"type":"message","user":"U0XR6J961","text":"right","ts":"1461677770.000830"},{"type":"message","user":"U0XPR4NP4","text":"For remote peers, their transactions go into a per peer channel","ts":"1461677781.000831"},{"type":"message","user":"U0XPR4NP4","text":"I haven't moved queries into a channel yet, but that can be done.","ts":"1461677801.000832"},{"type":"message","user":"U0XPR4NP4","text":"The original impetus for the change, and the one that the changeset thusfar targets, is to make sure that consensus messages cannot indefinitely block peer messages.","ts":"1461677831.000833"},{"type":"message","user":"U0XR6J961","text":"my vision is an object with a defined set of input events, and a shell around it that ensures that this state machine runs synchronously","ts":"1461677837.000834"},{"type":"message","user":"U0XR6J961","text":"there would also be a queue of output events (broadcast, execute, start state transfer)","ts":"1461677871.000835"},{"type":"message","user":"U0XPR4NP4","text":"Where the important peer message, is state transfer.","ts":"1461677874.000836"},{"type":"message","user":"U0XR6J961","text":"then we drop the locks internally","ts":"1461677905.000837"},{"type":"message","user":"U0XPR4NP4","text":"So, if you look at `pbft-core.go` for instance.  You can see that this tries to put the first bit of that in place.","ts":"1461677947.000838"},{"type":"message","user":"U0XPR4NP4","text":"There is a channel which `RecvMsg` writes into, same with the `stateUpdate`, etc.","ts":"1461677981.000839"},{"type":"message","user":"U0XR6J961","text":"oh so many channels","ts":"1461678019.000840"},{"type":"message","user":"U0XR6J961","text":"hmm","ts":"1461678022.000841"},{"type":"message","user":"U0XPR4NP4","text":"And then there is a single main thread which selects across these channels, the channel which is read from determined your 'type of input', then modifies the state machine.  Obviously not as clean as you'd like, but I think it's a first step.","ts":"1461678037.000842"},{"type":"message","user":"U0XPR4NP4","text":"Channels seems to be the preferred method of Go concurrency, and the constructs like select do make using them pretty nice.","ts":"1461678079.000843"},{"type":"message","user":"U0XR6J961","text":"right","ts":"1461678098.000844"},{"type":"message","user":"U0XR6J961","text":"they have different semantics from a single queue, but okay","ts":"1461678124.000845"},{"type":"message","user":"U0XR6J961","text":"could we remove the goroutine call from newPbftCore?","ts":"1461678144.000846"},{"type":"message","user":"U0XR6J961","text":"and instead put the burden of processing on some outside entity (i.e. handler)","ts":"1461678167.000847"},{"type":"message","user":"U0XR6J961","text":"that would simplify our tests as well","ts":"1461678180.000848"},{"type":"message","user":"U0XR6J961","text":"because then there are no multiple goroutines anymore","ts":"1461678190.000849"},{"type":"message","user":"U0XPR4NP4","text":"Hmmm","ts":"1461678212.000850"},{"type":"message","user":"U0XPR4NP4","text":"So I like the idea of moving the `go` call out of `pbft-core.go`, but I don't think it works coming from the handler.","ts":"1461678259.000851"},{"type":"message","user":"U0XR6J961","text":"i would even go so far to split the dispatch out of pbftcore","ts":"1461678261.000852"},{"type":"message","user":"U0XR6J961","text":"so that we really only receive events","ts":"1461678276.000853"},{"type":"message","user":"U0XPR4NP4","text":"The problem is, we have events like the view change timer, which we need to act on, which do not originate from the handler.","ts":"1461678287.000854"},{"type":"message","user":"U0XR6J961","text":"and somebody else cares about making those events appear in sequence","ts":"1461678290.000855"},{"type":"message","user":"U0XR6J961","text":"right, so the handler will have to provide a timeout service","ts":"1461678302.000856"},{"type":"message","user":"U0XR6J961","text":"and it will inject a timeout event","ts":"1461678310.000857"},{"type":"message","user":"U0XR6J961","text":"make the consensus a completely event driven thing","ts":"1461678350.000858"},{"type":"message","user":"U0XPR4NP4","text":"I'm still not sure where the actual execution comes from, there needs to be a go routine from somewhere.  It seems like it's simply pushing the burden of listening for and serializing events, then driving execution out of pbft and into somewhere else.","ts":"1461678479.000859"},{"type":"message","user":"U0XR6J961","text":"yes, change the encapsulation","ts":"1461678499.000860"},{"type":"message","user":"U0XR6J961","text":"i think it would make sense to have a goroutine created by the handler","ts":"1461678546.000861"},{"type":"message","user":"U0XR6J961","text":"or helper.  i don't know why there are two","ts":"1461678561.000862"},{"type":"message","user":"U0XPR4NP4","text":"I don't dislike it in theory, though I still think the handler is a funny place to put it, since there is one handler per connection.","ts":"1461678563.000863"},{"type":"message","user":"U0XR6J961","text":"oh","ts":"1461678598.000864"},{"type":"message","user":"U0XR6J961","text":"right","ts":"1461678599.000865"},{"type":"message","user":"U0XR6J961","text":"you are correct","ts":"1461678603.000866"},{"type":"message","user":"U0XR6J961","text":"engine then","ts":"1461678607.000867"},{"type":"message","user":"U0XPR4NP4","text":"I think this might be a bigger piece of work than fits into this sprint though.","ts":"1461678636.000868"},{"type":"message","user":"U0XR6J961","text":"it's a goal to aspire to :simple_smile:","ts":"1461678647.000869"},{"type":"message","user":"U0XR6J961","text":"i hope my monster #1000 will be done","ts":"1461678665.000870"},{"type":"message","user":"U0XR6J961","text":"and i can go and work on some of this refactoring","ts":"1461678673.000871"},{"type":"message","user":"U0XPR4NP4","text":"FYI did you see the message about the Sieve de-emphasis?","ts":"1461678777.000872"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1461678839.000873"},{"type":"message","user":"U0XR6J961","text":"that's good","ts":"1461678847.000874"},{"type":"message","user":"U0XR6J961","text":"why isn't it triggering state transfer now :confused:","ts":"1461678896.000875"},{"type":"message","user":"U0XR6J961","text":"aha, yes","ts":"1461678975.000876"},{"type":"message","user":"U0XR6J961","text":"jyellick: so #680 bdd test","ts":"1461679094.000877"},{"type":"message","user":"U0XR6J961","text":"how does that work","ts":"1461679096.000878"},{"type":"message","user":"U0XPR4NP4","text":"Ah, so, that will probably stop failing once crash recovery works","ts":"1461679132.000879"},{"type":"message","user":"U0XR6J961","text":"we put in 30 requests","ts":"1461679136.000880"},{"type":"message","user":"U0XR6J961","text":"ahahaha","ts":"1461679142.000881"},{"type":"message","user":"U0XR6J961","text":"and i've been fixing crash recovery to get it working","ts":"1461679152.000882"},{"type":"message","user":"U0XR6J961","text":"duh :simple_smile:","ts":"1461679161.000883"},{"type":"message","user":"U0XPR4NP4","text":"Er, yes, but failing I mean, it probably won't initiate state transfer.","ts":"1461679198.000884"},{"type":"message","user":"U0XR6J961","text":"so we put in 30 requests, then stop vp3, one more request, restart vp3, then 6 more requests","ts":"1461679240.000885"},{"type":"message","user":"U0XR6J961","text":"somehow that means 37 in total, but i can see requests 38 being executed","ts":"1461679260.000886"},{"type":"message","user":"U0XPR4NP4","text":"Deploy is a transaction","ts":"1461679268.000887"},{"type":"message","user":"U0XR6J961","text":"ah right","ts":"1461679283.000888"},{"type":"message","user":"U0XR6J961","text":"so 31, stop vp3, 32, start vp3, 33..38","ts":"1461679298.000889"},{"type":"message","user":"U0XPR4NP4","text":"In the past, VP would restart, thinking its seqNo was 0, so, it would witness enough checkpoints outside its watermarks, and initiate state transfer","ts":"1461679300.000890"},{"type":"message","user":"U0XR6J961","text":"K=2, L=8","ts":"1461679322.000891"},{"type":"message","user":"U0XPR4NP4","text":"So, with crash fault working, then it will not see those as outside its watermarks.","ts":"1461679330.000892"},{"type":"message","user":"U0XR6J961","text":"checkpoint is 30","ts":"1461679347.000893"},{"type":"message","user":"U0XPR4NP4","text":"Because it knows its last seqNo was 31","ts":"1461679348.000894"},{"type":"message","user":"U0XR6J961","text":"right","ts":"1461679352.000895"},{"type":"message","user":"U0XR6J961","text":"oh i just realized...","ts":"1461679380.000896"},{"type":"message","user":"U0XPR4NP4","text":"So, if you bump up the tail end of the requests from 6 additional to say, 10, I think you should get it.","ts":"1461679383.000897"},{"type":"message","user":"U0XR6J961","text":"i should move the low watermarks to the highest restored checkpoint","ts":"1461679397.000898"},{"type":"message","user":"U0XPR4NP4","text":"Yes","ts":"1461679411.000899"},{"type":"message","user":"U0XR6J961","text":"not to lastexec's previous low watermark","ts":"1461679412.000900"},{"type":"message","user":"U0XPR4NP4","text":"Right","ts":"1461679439.000901"},{"type":"message","user":"U0XR6J961","text":"in any case - need to inject 2 more, i guess?","ts":"1461679505.000902"},{"type":"message","user":"U0XR6J961","text":"so that checkpoint 40 is reached","ts":"1461679516.000903"},{"type":"message","user":"U0XR6J961","text":"which should trigger a state transfer","ts":"1461679522.000904"},{"type":"message","user":"U0XR6J961","text":"or do i wait for 42?","ts":"1461679527.000905"},{"type":"message","user":"U0XPR4NP4","text":"I think you want 4 more","ts":"1461679563.000906"},{"type":"message","user":"U0XR6J961","text":"i never understood why `weakCheckpointSetOutOfRange` stops `recvCheckpoint` processing","ts":"1461679565.000907"},{"type":"message","user":"U0XPR4NP4","text":"So, it shouldn't","ts":"1461679619.000908"},{"type":"message","user":"U0XPR4NP4","text":"There is a TODO saying that we should basically resubmit those 'out of watermark range' checkpoints, because chances are, we already have a weak checkpoint cert","ts":"1461679640.000909"},{"type":"message","user":"U0XPR4NP4","text":"But that's an optimization, not a correctness statement","ts":"1461679654.000910"},{"type":"message","user":"U0XR6J961","text":"oh, resubmit","ts":"1461679656.000911"},{"type":"message","user":"U0XR6J961","text":"because we discarded them","ts":"1461679671.000912"},{"type":"message","user":"U0XPR4NP4","text":"Right","ts":"1461679673.000913"},{"type":"message","user":"U0XR6J961","text":"because they were out of watermarks","ts":"1461679681.000914"},{"type":"message","user":"U0XR6J961","text":"hehe","ts":"1461679685.000915"},{"type":"message","user":"U0XPR4NP4","text":"Haha, yep","ts":"1461679690.000916"},{"type":"message","user":"U0XR6J961","text":"once you practically implement such a system and can't assume infinite storage for messages...","ts":"1461679712.000917"},{"type":"message","user":"U0XR6J961","text":"did you ever see how applications in erlang use state machines?","ts":"1461679794.000918"},{"type":"message","user":"U0XR6J961","text":"or in general in most functional languages","ts":"1461679806.000919"},{"type":"message","user":"U0XPR4NP4","text":"Erleng is unfortunately something I've never gotten a chance to explore, though it might be worth doing, since the whole 'actor model' message passing  thing I think originates there?","ts":"1461679860.000920","reactions":[{"name":"+1","users":["U0KPFAZNF"],"count":1}]},{"type":"message","user":"U0XR6J961","text":"i suppose","ts":"1461679944.000921"},{"type":"message","user":"U0XR6J961","text":"1 scenario passed, 0 failed, 26 skipped","ts":"1461679947.000922","reactions":[{"name":"+1","users":["U0UGH3X7X"],"count":1}]},{"type":"message","user":"U0XR6J961","text":"woohoo!","ts":"1461679950.000923"},{"type":"message","user":"U0KPFAZNF","text":"<@U0XPR4NP4>: Erlang is awesome","ts":"1461679962.000924"},{"type":"message","user":"U0KPFAZNF","text":"i dont know if they invented the actor model, but it certainly uses it","ts":"1461679981.000925"},{"type":"message","user":"U0KPFAZNF","text":"if you want to build highly available clusters though, it makes a great backend platform","ts":"1461680012.000926"},{"type":"message","user":"U0XR6J961","text":"so what they usually do is: `fun machine(state, inputchan) { dispatch msg &lt;- inputchan { case &lt;pattern match 1&gt; ....; case &lt;pattern match 2&gt; ...; case &lt;pattern match N&gt; do something with msg; machine({new state based on old state}, inputchan) }`","ts":"1461680080.000927"},{"type":"message","user":"U0XR6J961","text":"ghaskins: imagine BFT as erlang runtime service","ts":"1461680103.000928"},{"type":"message","user":"U0KPFAZNF","text":"i have, it would work pretty well I would imagine","ts":"1461680127.000929"},{"type":"message","user":"U0XR6J961","text":"and you send messages to other processes","ts":"1461680139.000930"},{"type":"message","user":"U0XR6J961","text":"not sure whether the queues are bounded","ts":"1461680149.000931"},{"type":"message","user":"U0KPFAZNF","text":"i forget how it manages that","ts":"1461680329.000932"},{"type":"message","user":"U0XR6J961","text":"lol, now it even works with sieve","ts":"1461680840.000933"},{"type":"message","user":"U0XR6J961","text":"yey","ts":"1461680840.000934"},{"type":"message","user":"U0XR6J961","text":"jyellick: i just pushed my remaining commits","ts":"1461680899.000935"},{"type":"message","user":"U0XPR4NP4","text":"Great, thanks <@U0XR6J961>","ts":"1461680922.000936"},{"type":"message","user":"U0XR6J961","text":"last behave run before i submit the pull request","ts":"1461680925.000937"},{"type":"message","user":"U0XR6J961","text":"but issue #680 passed for all 3 consensus plugins","ts":"1461680940.000938"},{"type":"message","user":"U0XR6J961","text":"it got a bit longer :confused:","ts":"1461680963.000939"},{"type":"message","user":"U0XR6J961","text":"it thought it would be maybe 10 commits","ts":"1461680973.000940"},{"type":"message","user":"U0XR6J961","text":"not 70","ts":"1461680975.000941"},{"type":"message","user":"U0XR6J961","text":"<https:\/\/github.com\/hyperledger\/fabric\/pull\/1265>","attachments":[{"service_name":"GitHub","title":"Persistence and more; #1000 by corecode \u00b7 Pull Request #1265 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1265","text":"This addresses #1000 and many other small bug fixes. Signed-off-by: Simon Schubert <mailto:sis@zurich.ibm.com|sis@zurich.ibm.com>","fallback":"GitHub: Persistence and more; #1000 by corecode \u00b7 Pull Request #1265 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1265","thumb_width":400,"thumb_height":400,"id":1}],"ts":"1461691514.000942"},{"type":"message","user":"U0XR6J961","text":"appreciate some more review","ts":"1461691545.000944"},{"type":"message","user":"U0XPR4NP4","text":"Working on finishing up my changeset, will post it here and then try to give yours some review.","ts":"1461691866.000945"},{"user":"U0KM3Q4FL","type":"message","subtype":"channel_join","text":"<@U0KM3Q4FL|stan.liberman> has joined the channel","ts":"1461706136.000946"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: Your PR seems to cause a slight problem in the ledger tests:\n\n`core\/ledger\/ledger_test.go:682: ledger.GetTXBatchPreviewBlock undefined (type *Ledger has no field or method GetTXBatchPreviewBlock)`","ts":"1461706165.000947"},{"type":"message","user":"U0XPR4NP4","text":"<!here|@here> A minor milestone. With <@U0XR6J961>'s latest changeset and the locking\/threading changes from the impending 919\/973 changeset on top of it, my standard vagrant environment has managed to process a 10k request flood (20 threads issuing 500 requests each as fast as they could be accepted) with no problems (no deadlock, not even any view changes)","ts":"1461731120.000948","reactions":[{"name":"+1","users":["U0ULK2JPP","U0TFEHX8E","U0UGH3X7X"],"count":3}]},{"type":"message","user":"U0ULK2JPP","text":"^^ very cool","ts":"1461731227.000949"},{"type":"message","user":"U0NCW1DPX","text":"<@U0XPR4NP4>: did you try to enable the security and privacy in your env?","ts":"1461736074.000950"},{"type":"message","user":"U0XR6J961","text":"jyellick: cool!","ts":"1461740317.000951"},{"type":"message","subtype":"file_share","text":"<@U0XR6J961|simon> shared a file: <https:\/\/hyperledgerproject.slack.com\/files\/simon\/F14337L6S\/Issue_Priorities|Issue Priorities>","file":{"id":"F14337L6S","created":1461741270,"timestamp":1462192331,"name":"Issue_Priorities","title":"Issue Priorities","mimetype":"text\/plain","filetype":"space","pretty_type":"Post","user":"U0XR6J961","editable":true,"size":2962,"mode":"space","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F14337L6S\/Issue_Priorities?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F14337L6S\/download\/Issue_Priorities?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/simon\/F14337L6S\/Issue_Priorities","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F14337L6S-d4f008e08c","preview":"<document><h2>Priority: HIGH<\/h2><ul class=\"checklist\"><li class=\"checked\"><div class=\"checkbox\"><\/div><a href=\"https:\/\/github.com\/hyperledger\/fabric\/issues\/793\">CI timeout<\/a> (done, needs closing)<\/li><li class=\"checked\"><div class=\"checkbox\"><\/div><a href=\"https:\/\/github.com\/hyperledger\/fabric\/issues\/796\">Complaints <\/a> (PR submitted, needs comitting)<\/li><li class=\"checked\"><div class=\"checkbox\"><\/div><a href=\"https:\/\/github.com\/hyperledger\/fabric\/issues\/1000\">Persistence<\/a> (also #925, #351)<\/li><\/ul><\/document>","updated":1462192331,"editor":"U0XR6J961","last_editor":"U0XR6J961","state":"inactive","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0,"num_stars":1},"user":"U0XR6J961","upload":false,"display_as_bot":false,"username":"<@U0XR6J961|simon>","bot_id":null,"ts":"1461741556.000953"},{"type":"message","subtype":"pinned_item","user":"U0XR6J961","item_type":"F","text":"<@U0XR6J961|simon> pinned their Post <https:\/\/hyperledgerproject.slack.com\/files\/simon\/F14337L6S\/Issue_Priorities|Issue Priorities> to this channel.","item":{"id":"F14337L6S","created":1461741270,"timestamp":1462192331,"name":"Issue_Priorities","title":"Issue Priorities","mimetype":"text\/plain","filetype":"space","pretty_type":"Post","user":"U0XR6J961","editable":true,"size":2962,"mode":"space","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F14337L6S\/Issue_Priorities?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F14337L6S\/download\/Issue_Priorities?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/simon\/F14337L6S\/Issue_Priorities","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F14337L6S-d4f008e08c","preview":"<document><h2>Priority: HIGH<\/h2><ul class=\"checklist\"><li class=\"checked\"><div class=\"checkbox\"><\/div><a href=\"https:\/\/github.com\/hyperledger\/fabric\/issues\/793\">CI timeout<\/a> (done, needs closing)<\/li><li class=\"checked\"><div class=\"checkbox\"><\/div><a href=\"https:\/\/github.com\/hyperledger\/fabric\/issues\/796\">Complaints <\/a> (PR submitted, needs comitting)<\/li><li class=\"checked\"><div class=\"checkbox\"><\/div><a href=\"https:\/\/github.com\/hyperledger\/fabric\/issues\/1000\">Persistence<\/a> (also #925, #351)<\/li><\/ul><\/document>","updated":1462192331,"editor":"U0XR6J961","last_editor":"U0XR6J961","state":"inactive","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0,"num_stars":1},"ts":"1461741628.000955"},{"type":"message","user":"U0XR6J961","text":"jyellick: i rewound my tree for the pull request - you'll have to rebase","ts":"1461746436.000956"},{"user":"U143JUETY","type":"message","subtype":"channel_join","text":"<@U143JUETY|andyz> has joined the channel","ts":"1461747686.000957"},{"type":"message","user":"U0XR6J961","text":"hi andy!","ts":"1461748269.000958"},{"type":"message","user":"U0XV1HDL3","text":"which entity in the current system creats the notion of a \"block\"? is a \"block\" the same as a \"batch\" of transactions that go togother through consensus?","ts":"1461748792.000959"},{"type":"message","user":"U0XR6J961","text":"DSL died :confused:","ts":"1461749735.000960"},{"type":"message","user":"U0XR6J961","text":"cca: yes, the consensus layer calls (via helper) into the ledger and chaincode layers.  this forms the block in the end","ts":"1461749769.000961"},{"type":"message","user":"U0XR6J961","text":"```13:05:19.728 [consensus\/obcpbft] request -&gt; INFO 7d8\u001b[0m Sieve replica 1: New consensus request received: t+IAW6yQaAgkLOaXRAECggsj05\/tr+\/zhORO0WuITlfhzLTBwZJZ4ytFPRDOw5fRiUC2KCV5Wt3BNLYW+elbVg==\nTEST: process looping\nTEST: processing message without testing for idle\nTEST: new message, delivering\nTEST: deliver\nTEST: Sending unicast\nTEST: process looping\nTEST: process looping\n13:05:19.728 [consensus\/obcpbft] request -&gt; INFO 7d9\u001b[0m Sieve replica 0: New consensus request received: XNKPQiijIp29a1KAPbM5BJoi00YSW0yqY4IJP\/Z0wN9rh+UzJUz7xvDFv\/RQ\/OYdlIT3MDPC1GGFyMeWOvvPIg==\n\u001b[36m13:05:19.728 [consensus\/obcpbft] recvRequest -&gt; DEBU 7da\u001b[0m Sieve primary 0 received request\n```","ts":"1461757003.000962"},{"type":"message","user":"U0XR6J961","text":"why does this happen?","ts":"1461757008.000963"},{"type":"message","user":"U0XR6J961","text":"why does recvRequest get called not directly after \"Sending unicast\"?","ts":"1461757044.000964"},{"type":"message","user":"U0XR6J961","text":"aha","ts":"1461758150.000965"},{"type":"message","user":"U0XR6J961","text":"what a bug","ts":"1461758154.000966"},{"type":"message","user":"U0XR6J961","text":"surprisingly stuff still worked","ts":"1461758169.000967"},{"type":"message","user":"U0XR6J961","text":"really unclear how","ts":"1461758172.000968"},{"type":"message","user":"U0XR6J961","text":"tuand: i'm looking at #796 now, rebasing onto my tip","ts":"1461766940.000969"},{"type":"message","user":"U0XR6J961","text":"tuand: is #756 done?","ts":"1461766990.000970"},{"type":"message","user":"U0UGH3X7X","text":"not checked in ... i have a couple of issues to clean up with praveen\/angelo before i do that","ts":"1461767063.000971"},{"type":"message","user":"U0XR6J961","text":"oh","ts":"1461767086.000972"},{"type":"message","user":"U0XR6J961","text":"what's outstanding?","ts":"1461767092.000973"},{"type":"message","user":"U0XR6J961","text":"the CI for my persist branch failed, but I think it is a timing issue","ts":"1461767110.000974"},{"type":"message","user":"U0UGH3X7X","text":"behave test case ?","ts":"1461767180.000975"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1461767236.000976"},{"type":"message","user":"U0XR6J961","text":"once i'm done with #796, which keeps tricking me, i can have a look at what needs to be done for #756","ts":"1461767274.000977"},{"type":"message","user":"U0UGH3X7X","text":"i'm trying to find marko's note ... he mentioned a couple of issues that he wanted us to look at","ts":"1461767335.000978"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1461767561.000979"},{"type":"message","user":"U0XR6J961","text":"that's the one i pinned to the channel","ts":"1461767567.000980"},{"type":"message","user":"U0XR6J961","text":"or should i have starred it?","ts":"1461767592.000981"},{"type":"message","user":"U0XR6J961","text":"does that get shared?","ts":"1461767595.000982"},{"type":"message","user":"U0UGH3X7X","text":"found it ! from April 22","ts":"1461767654.000983"},{"type":"message","subtype":"file_mention","text":"<@U0XR6J961|simon> mentioned a file: <https:\/\/hyperledgerproject.slack.com\/files\/simon\/F14337L6S\/Issue_Priorities|Issue_Priorities>.","file":{"id":"F14337L6S","created":1461741270,"timestamp":1462192331,"name":"Issue_Priorities","title":"Issue Priorities","mimetype":"text\/plain","filetype":"space","pretty_type":"Post","user":"U0XR6J961","editable":true,"size":2962,"mode":"space","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F14337L6S\/Issue_Priorities?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F14337L6S\/download\/Issue_Priorities?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/simon\/F14337L6S\/Issue_Priorities","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F14337L6S-d4f008e08c","preview":"<document><h2>Priority: HIGH<\/h2><ul class=\"checklist\"><li class=\"checked\"><div class=\"checkbox\"><\/div><a href=\"https:\/\/github.com\/hyperledger\/fabric\/issues\/793\">CI timeout<\/a> (done, needs closing)<\/li><li class=\"checked\"><div class=\"checkbox\"><\/div><a href=\"https:\/\/github.com\/hyperledger\/fabric\/issues\/796\">Complaints <\/a> (PR submitted, needs comitting)<\/li><li class=\"checked\"><div class=\"checkbox\"><\/div><a href=\"https:\/\/github.com\/hyperledger\/fabric\/issues\/1000\">Persistence<\/a> (also #925, #351)<\/li><\/ul><\/document>","updated":1462192331,"editor":"U0XR6J961","last_editor":"U0XR6J961","state":"inactive","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0,"num_stars":1},"user":"U0XR6J961","ts":"1461767657.000985"},{"type":"message","user":"U0XR6J961","text":"yea, this one","ts":"1461767661.000987"},{"type":"message","user":"U0XR6J961","text":"oh 22nd?","ts":"1461767671.000988"},{"type":"message","user":"U0XR6J961","text":"i gotta take a walk, think about the lifecycle of complaints and aborted executions...","ts":"1461767716.000989"},{"type":"message","user":"U0UGH3X7X","text":"#915 ... which should be closed","ts":"1461768352.000990"},{"type":"message","user":"U0UGH3X7X","text":"#1180 ... i talked to the author a bit , not sure the code that randomizes the invoke is correct.  Mark P. also wanted to see if we can get community help in recreating","ts":"1461768417.000991"},{"type":"message","user":"U0UGH3X7X","text":"#1171 ?","ts":"1461768500.000992"},{"type":"message","user":"U0XR6J961","text":"it would be great if i could close and rename issues","ts":"1461768741.000993","reactions":[{"name":"+1","users":["U0UGH3X7X"],"count":1}]},{"type":"message","user":"U0XR6J961","text":"silly to have to maintain a parallel list","ts":"1461768749.000994"},{"type":"message","user":"U0XR6J961","text":"i don't know if there is any community help interested in that","ts":"1461768801.000995"},{"type":"message","user":"U0XR6J961","text":"few pbft experts out there","ts":"1461768814.000996"},{"type":"message","user":"U0XR6J961","text":"although having the issues pinned to the side is useful","ts":"1461768889.000997"},{"type":"message","user":"U0XR6J961","text":"click channel info -&gt; pinned items -&gt; issue priorities","ts":"1461768920.000998"},{"type":"message","user":"U0UGH3X7X","text":"i think it might be something in the test case ... i did this for playback weeks ago and it ran fine","ts":"1461768921.000999"},{"type":"message","user":"U0XR6J961","text":"it stays on the right","ts":"1461768926.001000"},{"type":"message","user":"U0XR6J961","text":"i'll have a look at the code","ts":"1461768941.001001"},{"type":"message","user":"U0XPR4NP4","text":"919, and 973 which are not on there are more or less done, pending rebase onto Simon's changeset","ts":"1461768984.001002"},{"type":"message","user":"U0UGH3X7X","text":"although it's disturbing that fabric would go crazy and log garbage text","ts":"1461768985.001003"},{"type":"message","user":"U0UGH3X7X","text":"919\/973   agree","ts":"1461769001.001004"},{"type":"message","user":"U0XR6J961","text":"how can you work with these numbers?","ts":"1461769010.001005"},{"type":"message","user":"U0XR6J961","text":"i can never relate them to what they mean","ts":"1461769021.001006"},{"type":"message","user":"U0UGH3X7X","text":"because i just looked at them :simple_smile:","ts":"1461769027.001007"},{"type":"message","user":"U0XR6J961","text":"my brain refuses to learn abstract numbers","ts":"1461769043.001008"},{"type":"message","user":"U0UGH3X7X","text":"i do have to jump back to github\/issues a lot","ts":"1461769076.001009"},{"type":"message","user":"U0XR6J961","text":"then that list i pinned should help","ts":"1461769088.001010"},{"type":"message","user":"U0XR6J961","text":"can just check items off","ts":"1461769103.001011"},{"type":"message","user":"U0UGH3X7X","text":"btw,  how did you debug travis where all the tests failed on your pr ?","ts":"1461769109.001012"},{"type":"message","user":"U0XR6J961","text":"i ran it again","ts":"1461769118.001013"},{"type":"message","user":"U0XR6J961","text":"locally","ts":"1461769121.001014"},{"type":"message","user":"U0XR6J961","text":"turned out i missed the ledger test","ts":"1461769128.001015"},{"type":"message","user":"U0XR6J961","text":"my fault","ts":"1461769146.001016"},{"type":"message","user":"U0UGH3X7X","text":"oh ... 1 fail kills all of travis ?","ts":"1461769161.001017"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1461769169.001018"},{"type":"message","user":"U0UGH3X7X","text":"in any case,  i wish travis would keep logs around  ... mentioned that to ramesh and chris a few times","ts":"1461769256.001019"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1461769271.001020"},{"type":"message","user":"U0XR6J961","text":"seems they're about to switch to jenkins","ts":"1461769283.001021"},{"type":"message","user":"U0XR6J961","text":"dunno why","ts":"1461769288.001022"},{"user":"U0N1D1UAE","type":"message","subtype":"channel_join","text":"<@U0N1D1UAE|bcbrock> has joined the channel","ts":"1461771601.001023"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: Looks like my changes on top of yours pass the travis tests.","ts":"1461795124.001024"},{"type":"message","user":"U0XPR4NP4","text":"<https:\/\/github.com\/hyperledger\/fabric\/pull\/1279>","attachments":[{"service_name":"GitHub","title":"Consensus threading and queues by jyellick \u00b7 Pull Request #1279 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1279","text":"This PR is built upon the changeset which @corecode did for persistence. The first purpose of this changeset is to switch the pbft-core.go and each of the respective plugins to operate on a single...","fallback":"GitHub: Consensus threading and queues by jyellick \u00b7 Pull Request #1279 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1279","thumb_width":420,"thumb_height":420,"id":1}],"ts":"1461795135.001025"},{"type":"message","user":"U0XPR4NP4","text":"<@U0NCW1DPX>: Sorry I just now remembered I'd meant to document my test for you, sometimes slack scrolls too fast.  I used the docker-compose files in the consensus package, basically following the steps outlined in `fabric\/consensus\/compose-consensus-4.md`.  This brought up four validators, I used the PBFT classic (so that each request would be consensed upon, and with one transaction per block).  <@U0UGH3X7X> is probably a better person to ask about the details of that compose environment (I just use it according to the instructions), but I believe security is enabled.  Once up, I used SOAPUI to drive login, deploy, and then drive the load for the test as described.","ts":"1461797099.001027"},{"type":"message","user":"U0XPR4NP4","text":"And, just confirmed that the PR referenced above retains the same stability with that 10k request test","ts":"1461797852.001028"},{"type":"message","user":"U0UGH3X7X","text":"<@U0NCW1DPX>:  <@U0XPR4NP4>   the compose-consensus-4 docker config default to security enabled, privacy false","ts":"1461806442.001029"},{"type":"message","user":"U0NCW1DPX","text":"<@U0XPR4NP4>: ok, cool. We have already setup a bigger env which has 10+ VPNs and cross network on separate physical machines. But haven\u2019t tried the performance, will update here when we finish the test.","ts":"1461807099.001030"},{"type":"message","user":"U0UGH3X7X","text":"<@U0NCW1DPX>:  i think <@U11HTMW0H> would like to hear about your setup. Could you ping him ?   or advertise what you have on <#C0YQ1NHGD>  ? sorry if you've already done so and I missed it","edited":{"user":"U0UGH3X7X","ts":"1461847979.000000"},"ts":"1461807835.001031"},{"type":"message","user":"U0XR6J961","text":"<@U0UGH3X7X>: i can start looking at #756 if you want","ts":"1461851671.001034"},{"type":"message","user":"U0UGH3X7X","text":"can i hold on to it ?   ... i like to get through my rebase and behave issues today\/tomorrow","ts":"1461851745.001035"},{"type":"message","user":"U0XR6J961","text":"sure","ts":"1461851750.001036"},{"type":"message","user":"U0XR6J961","text":"does it still write to some random file?","ts":"1461851764.001037"},{"type":"message","user":"U0UGH3X7X","text":"yes, waiting until system chaincode available  ... so should be work for next week","ts":"1461851804.001038"},{"type":"message","user":"U0UGH3X7X","text":"i think there's a separate #issue for that too","ts":"1461851827.001039"},{"type":"message","user":"U0XR6J961","text":"we have like 5 issues that would be closed","ts":"1461851854.001040"},{"type":"message","user":"U0UGH3X7X","text":"both you and <@U0XPR4NP4>  waiting for PRs   ... i need to remind our committers :simple_smile:","ts":"1461851908.001041"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1461851916.001042"},{"user":"U0N1K6Z0X","type":"message","subtype":"channel_join","text":"<@U0N1K6Z0X|georglink> has joined the channel","ts":"1461852109.001043"},{"type":"message","user":"U0UGH3X7X","text":"<@U0XPR4NP4>:  <@U0XR6J961>,  can you ping your PR numbers to <@U0TFEHX8E> ?  he's a bit swamped so we might have to wait until next week","ts":"1461852498.001044"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: <@U0UGH3X7X> #1279 is mine, which contains <@U0XR6J961>'s persistence stuff, so probably fine to close that other PR (since the CI wasn't passing anyway)","ts":"1461852724.001045"},{"type":"message","user":"U0XPR4NP4","text":"(though the complaints PR is separate)","ts":"1461853006.001046"},{"user":"U14S06MT7","type":"message","subtype":"channel_join","text":"<@U14S06MT7|igor> has joined the channel","ts":"1461928535.001047"},{"type":"message","user":"U0UGH3X7X","text":"my last behave problem with #756  ... some time on peer startup,  obcExecutor gets called too early, getCurrentInfo() can't find the genesis block which makes queueThread() panic with a memory fault since there's no error check on the getCurrentInfo() result.","ts":"1461959737.001048"},{"type":"message","user":"U0UGH3X7X","text":"now, my branch is way behind so I need to rebase based on <@U0XPR4NP4> 's PR 1279  which probably already has the fix  ?","ts":"1461959812.001049"},{"type":"message","user":"U0XPR4NP4","text":"That PR is on top of Simon's which completely removed the executor","ts":"1461959875.001050"},{"type":"message","user":"U0UGH3X7X","text":"thought so :simple_smile:  I need to keep up","ts":"1461959916.001051"},{"type":"message","user":"U0XPR4NP4","text":"And we no longer use the real genesis block, which is a bit of a bug, but should fix your problem","ts":"1461959923.001052"},{"user":"U1566LCHM","type":"message","subtype":"channel_join","text":"<@U1566LCHM|phelanm> has joined the channel","ts":"1462063033.001053"},{"type":"message","user":"U1566LCHM","text":"hi. any hints about getting these behave tests to pass? (output to follow)","ts":"1462063059.001054"},{"type":"message","subtype":"file_share","text":"<@U1566LCHM|phelanm> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/phelanm\/F154R35T5\/-.txt|Untitled>","file":{"id":"F154R35T5","created":1462063084,"timestamp":1462063084,"name":"-.txt","title":"Untitled","mimetype":"text\/plain","filetype":"text","pretty_type":"Plain Text","user":"U1566LCHM","editable":true,"size":270185,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F154R35T5\/-.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F154R35T5\/download\/-.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/phelanm\/F154R35T5\/-.txt","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F154R35T5-69e92fef22","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/phelanm\/F154R35T5\/-.txt\/edit","preview":"vagrant@hyperledger-devenv:v0.0.9-2536afa:\/opt\/gopath\/src\/github.com\/hyperledger\/fabric\/bddtests$ behave\r\nFeature: lanching 3 peers # peer_basic.feature:11\r\n  As a HyperLedger developer\r\n  I want to be able to launch a 3 peers\r\n  Scenario: Peers list test, single peer issue #827                            # peer_basic.feature:16\r","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>vagrant@hyperledger-devenv:v0.0.9-2536afa:\/opt\/gopath\/src\/github.com\/hyperledger\/fabric\/bddtests$ behave<\/pre><\/div>\n<div><pre>Feature: lanching 3 peers # peer_basic.feature:11<\/pre><\/div>\n<div><pre>  As a HyperLedger developer<\/pre><\/div>\n<div><pre>  I want to be able to launch a 3 peers<\/pre><\/div>\n<div><pre>  Scenario: Peers list test, single peer issue #827                            # peer_basic.feature:16<\/pre><\/div>\n<div><pre><\/pre><\/div>\n<\/div>\n<\/div>\n","lines":2250,"lines_more":2245,"preview_is_truncated":true,"channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U1566LCHM","upload":true,"display_as_bot":false,"username":"<@U1566LCHM|phelanm>","bot_id":null,"ts":"1462063085.001055"},{"type":"message","user":"U0UGH3X7X","text":"interesting !  on the one failing test, it looks like we have one peer doing 7 more invokes than the other ones ...","ts":"1462068606.001056"},{"type":"message","user":"U0UGH3X7X","text":"is this test failing consistently ?","ts":"1462068629.001057"},{"type":"message","user":"U0UGH3X7X","text":"can you run only that test and record the peer logs ?  do `behave -n \"1 peer (vp3) is byzantine\" -D logs=y`","ts":"1462068815.001058"},{"type":"message","user":"U0UGH3X7X","text":"and if reproducible, can you create an issue and attach the logs ?  I'll try to take a closer look tomorrow when I can get to my laptop","edited":{"user":"U0UGH3X7X","ts":"1462072744.000000"},"ts":"1462068891.001059"},{"user":"U0M28HM6J","type":"message","subtype":"channel_join","text":"<@U0M28HM6J|takekiyokubo> has joined the channel","ts":"1462196822.001061"},{"type":"message","user":"U0TFEHX8E","text":"<@U0UGH3X7X>: I was sitting next to <@U1566LCHM> and saw him reproduce the issue. It did not happen on my laptop though.","ts":"1462200375.001062"},{"type":"message","user":"U0XPR4NP4","text":"What code level is this? Does it include the latest PRs?","ts":"1462200392.001063"},{"type":"message","user":"U0TFEHX8E","text":"yeah, was the current master","ts":"1462200410.001064"},{"type":"message","user":"U0TFEHX8E","text":"I just saw the following with PR 1225. not sure if it\u2019s related","ts":"1462200422.001065"},{"type":"message","subtype":"file_share","text":"<@U0TFEHX8E|sheehan> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/sheehan\/F15CTCKRD\/-.txt|Untitled>","file":{"id":"F15CTCKRD","created":1462200431,"timestamp":1462200431,"name":"-.txt","title":"Untitled","mimetype":"text\/plain","filetype":"text","pretty_type":"Plain Text","user":"U0TFEHX8E","editable":true,"size":38361,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F15CTCKRD\/-.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F15CTCKRD\/download\/-.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/sheehan\/F15CTCKRD\/-.txt","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F15CTCKRD-37bfcd3bfc","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/sheehan\/F15CTCKRD\/-.txt\/edit","preview":"  @issue_680\r\n  Scenario Outline: chaincode example02 with 4 peers and 1 membersrvc, issue #680 (State transfer) -- @1.1 Consensus Options    # peer_basic.feature:521\r\n    Given we compose \"docker-compose-4-consensus-classic.yml\"                                                                   # steps\/peer_basic_impl.py:95 1.916s\r\n    And I wait \"5\" seconds                                                                                                      # steps\/peer_basic_impl.py:132 5.007s\r\n    And I register with CA supplying username \"binhn\" and secret \"7avZQLwcUe9q\" on peers                                        # steps\/peer_basic_impl.py:442 0.032s\r","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>  @issue_680<\/pre><\/div>\n<div><pre>  Scenario Outline: chaincode example02 with 4 peers and 1 membersrvc, issue #680 (State transfer) -- @1.1 Consensus Options    # peer_basic.feature:521<\/pre><\/div>\n<div><pre>    Given we compose &quot;docker-compose-4-consensus-classic.yml&quot;                                                                   # steps\/peer_basic_impl.py:95 1.916s<\/pre><\/div>\n<div><pre>    And I wait &quot;5&quot; seconds                                                                                                      # steps\/peer_basic_impl.py:132 5.007s<\/pre><\/div>\n<div><pre>    And I register with CA supplying username &quot;binhn&quot; and secret &quot;7avZQLwcUe9q&quot; on peers                                        # steps\/peer_basic_impl.py:442 0.032s<\/pre><\/div>\n<div><pre><\/pre><\/div>\n<\/div>\n<\/div>\n","lines":547,"lines_more":542,"preview_is_truncated":true,"channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0TFEHX8E","upload":true,"display_as_bot":false,"username":"<@U0TFEHX8E|sheehan>","bot_id":null,"ts":"1462200432.001066"},{"type":"message","user":"U0TFEHX8E","text":"If these are a result of not having your latest consensus PRs, just let me know. I\u2019m working to merge those today, just want to merge earlier PRs first to avoid conflicts","ts":"1462200463.001067"},{"type":"message","user":"U0XPR4NP4","text":"I think there's a strong chance that they'll be dependent on the newer consensus PRs","ts":"1462200531.001068"},{"type":"message","user":"U0XPR4NP4","text":"Simply because so much of the code has changed","ts":"1462200545.001069"},{"type":"message","user":"U0XPR4NP4","text":"<@U0TFEHX8E>: <@U1566LCHM> Actually, with respect to one VP executing more requests than another, this is a bug I have observed (though only under stress, not in behave), which should be fixed in the pending PRs.","ts":"1462201735.001070"},{"type":"message","user":"U0TFEHX8E","text":"cool. I ran issue_680 again locally and it passed","ts":"1462201774.001071"},{"user":"U11TAFPUP","type":"message","subtype":"channel_join","text":"<@U11TAFPUP|joseph> has joined the channel","ts":"1462205953.001072"},{"type":"message","user":"U0XR6J961","text":"sheehan: !! right?","ts":"1462206444.001073"},{"type":"message","user":"U0XR6J961","text":"jyellick: <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/core\/logging.go#L74>","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/core\/logging.go#L74","text":"fabric - Fabric is a blockchain project in Incubation proposed to the community and documented at <https:\/\/goo.gl\/RYQZ5N>. Information on what Incubation entails can be found in the Hyperledger Proj...","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/core\/logging.go#L74","thumb_width":142,"thumb_height":142,"id":1}],"ts":"1462206449.001074"},{"type":"message","user":"U0XPR4NP4","text":"I tried playing around with that at some point, but never got it to work, do you have a working example?","ts":"1462206521.001076"},{"type":"message","user":"U0TFEHX8E","text":"I didn\u2019t write that code. In the same boat as <@U0XPR4NP4>. I know <@U0XQ35CDD> was investigating logging at one point.","ts":"1462208076.001077"},{"type":"message","user":"U0UGH3X7X","text":"I think <@U0N1D1UAE> wrote the logging code awhile ago? I've only done logging on a peer level so far","ts":"1462208487.001078"},{"type":"message","user":"U0TFEHX8E","text":"sometimes I just hardcode the level locally when testing :hushed: I need to stop doing that","ts":"1462208598.001079"},{"text":"slaps <@U0TFEHX8E|sheehan> with a large trout","type":"message","subtype":"me_message","user":"U0KM61BCP","ts":"1462211351.001080","reactions":[{"name":"fish","users":["U0TFEHX8E"],"count":1}]},{"type":"message","user":"U0N1D1UAE","text":"My ears are burning, but I can\u2019t figure out what is the logging issue you are discussing.","ts":"1462211723.001081"},{"type":"message","user":"U0XPR4NP4","text":"So, we'd like to be able to run the peer generally at default logging levels (say INFO or WARN or whatever), but get DEBUG messages for specific packages within peer (for instance `consensus`, or `consensus\/obcpbft`)","ts":"1462211924.001082"},{"type":"message","user":"U0N1D1UAE","text":"The way to do this is documented in <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/dev-setup\/logging-control.md>","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/dev-setup\/logging-control.md","text":"fabric - Fabric is a blockchain project in Incubation proposed to the community and documented at <https:\/\/goo.gl\/RYQZ5N>. Information on what Incubation entails can be found in the Hyperledger Proj...","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/dev-setup\/logging-control.md","thumb_width":142,"thumb_height":142,"id":1}],"ts":"1462212026.001083"},{"type":"message","user":"U0N1D1UAE","text":"So for example, CORE_LOGGING_LEVEL=warning:consensus=debug","ts":"1462212078.001085"},{"type":"message","user":"U0N1D1UAE","text":"warning applies as the default, \u201cconsensus\u201d goes at debug","ts":"1462212108.001086"},{"type":"message","user":"U0XPR4NP4","text":"Thanks <@U0N1D1UAE> I'll go give that a try now","ts":"1462212139.001087"},{"type":"message","user":"U0XPR4NP4","text":"<@U0N1D1UAE>: <@U0TFEHX8E> <@U0UGH3X7X> <@U0XR6J961> The logging is working for me now.  My misunderstanding was believing that \"consensus\" would log for \"consensus\/*\", but these packages need to be specified individually (not a bug, just user error)","ts":"1462213701.001088"},{"type":"message","user":"U0UGH3X7X","text":"so e.g. `core_logging_level=info:consensus\/controller=debug:consensus\/obcpbft=debug`  ?","ts":"1462213886.001089"},{"type":"message","user":"U0XPR4NP4","text":"Presently running a stress test with just `CORE_LOGGING_LEVEL=warning:consensus\/obcpbft=debug`, but suspect additional `:` will process as you indicate, based on the code","ts":"1462214110.001090"},{"type":"message","user":"U0TFEHX8E","text":"<@U0XPR4NP4>: I\u2019m seeing consistent failures on the behave test \"Scenario Outline: chaincode example02 with 4 peers and 1 membersrvc, issue #680 (State transfer) -- @1.3 Consensus Options\u201d with PR <https:\/\/github.com\/hyperledger\/fabric\/pull\/1255>","attachments":[{"service_name":"GitHub","title":"Issue #1247: An empty ciphertext decrypts to nil by adecaro \u00b7 Pull Request #1255 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1255","text":"When security and confidentiality is on and a chaincode tries to get a state that does not exists then the validator asks the crypto layer to decrypt an empty ciphertext This PR modify the behavior...","fallback":"GitHub: Issue #1247: An empty ciphertext decrypts to nil by adecaro \u00b7 Pull Request #1255 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/782238?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1255","thumb_width":420,"thumb_height":420,"id":1}],"ts":"1462214531.001091"},{"type":"message","subtype":"file_share","text":"<@U0TFEHX8E|sheehan> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/sheehan\/F15F63G3S\/-.txt|Untitled>","file":{"id":"F15F63G3S","created":1462214567,"timestamp":1462214567,"name":"-.txt","title":"Untitled","mimetype":"text\/plain","filetype":"text","pretty_type":"Plain Text","user":"U0TFEHX8E","editable":true,"size":31847,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F15F63G3S\/-.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F15F63G3S\/download\/-.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/sheehan\/F15F63G3S\/-.txt","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F15F63G3S-f93d4fa403","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/sheehan\/F15F63G3S\/-.txt\/edit","preview":" @issue_680\r\n  Scenario Outline: chaincode example02 with 4 peers and 1 membersrvc, issue #680 (State transfer) -- @1.3 Consensus Options    # peer_basic.feature:515\r\n    Given we compose \"docker-compose-4-consensus-sieve.yml\"                                                                     # steps\/peer_basic_impl.py:95 11.747s\r\n    And I register with CA supplying username \"binhn\" and secret \"7avZQLwcUe9q\" on peers                                        # steps\/peer_basic_impl.py:443 0.034s\r\n      | vp0 |\r","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre> @issue_680<\/pre><\/div>\n<div><pre>  Scenario Outline: chaincode example02 with 4 peers and 1 membersrvc, issue #680 (State transfer) -- @1.3 Consensus Options    # peer_basic.feature:515<\/pre><\/div>\n<div><pre>    Given we compose &quot;docker-compose-4-consensus-sieve.yml&quot;                                                                     # steps\/peer_basic_impl.py:95 11.747s<\/pre><\/div>\n<div><pre>    And I register with CA supplying username &quot;binhn&quot; and secret &quot;7avZQLwcUe9q&quot; on peers                                        # steps\/peer_basic_impl.py:443 0.034s<\/pre><\/div>\n<div><pre>      | vp0 |<\/pre><\/div>\n<div><pre><\/pre><\/div>\n<\/div>\n<\/div>\n","lines":440,"lines_more":435,"preview_is_truncated":true,"channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0TFEHX8E","upload":true,"display_as_bot":false,"username":"<@U0TFEHX8E|sheehan>","bot_id":null,"ts":"1462214568.001093"},{"type":"message","user":"U0TFEHX8E","text":"any reason why those would be related?","ts":"1462214576.001094"},{"type":"message","user":"U0XPR4NP4","text":"Based on the diff there's nothing obvious to me, would need to look at logs ","ts":"1462214700.001095"},{"type":"message","user":"U0N1D1UAE","text":"\u201csieve\u201d may be the smoking gun. Do other consensus algorithms pass?","ts":"1462216479.001096"},{"type":"message","user":"U0XPR4NP4","text":"1.3 is definitely Sieve.  There are fixes for Sieve in the consensus PRs","ts":"1462216734.001097"},{"type":"message","user":"U0N1D1UAE","text":"See for example my last comments in PR #1231","ts":"1462216739.001098"},{"type":"message","user":"U0XPR4NP4","text":"(And there were definitely known bugs in Sieve before those patches)","ts":"1462216763.001099"},{"type":"message","user":"U0TFEHX8E","text":"<@U0XR6J961>: Sorry, this one needs to be rebased. <https:\/\/github.com\/hyperledger\/fabric\/pull\/1265>\nMust have been an earlier conflicting PR","attachments":[{"service_name":"GitHub","title":"Persistence and more; #1000 by corecode \u00b7 Pull Request #1265 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1265","text":"This addresses #1000 and many other small bug fixes. Signed-off-by: Simon Schubert <mailto:sis@zurich.ibm.com|sis@zurich.ibm.com>","fallback":"GitHub: Persistence and more; #1000 by corecode \u00b7 Pull Request #1265 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1265","thumb_width":400,"thumb_height":400,"id":1}],"ts":"1462217080.001100"},{"user":"U13Q594J2","type":"message","subtype":"channel_join","text":"<@U13Q594J2|ratnakar> has joined the channel","ts":"1462218732.001102"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: That will break #1279 as well, want me to rebase onto master, then you can rebase onto mine, or vice versa? (mine has your persistence, but not complaints)","ts":"1462219083.001103"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> I did a rebase, which you can see here <https:\/\/github.com\/hyperledger\/fabric\/pull\/1325>, might be easier for you to rebase your complaints onto that","attachments":[{"service_name":"GitHub","title":"Consensus threading and queues rebase by jyellick \u00b7 Pull Request #1325 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1325","text":"This is a rebasing of the PR from #1279, please see there for the relevant description. Currently executing local tests, but pushing PR in anticipation of their passing as it was a relatively merg...","fallback":"GitHub: Consensus threading and queues rebase by jyellick \u00b7 Pull Request #1325 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1325","thumb_width":420,"thumb_height":420,"id":1}],"ts":"1462227189.001104"},{"type":"message","user":"U0XPR4NP4","text":"There's a rare (and especially shy, as it goes away with verbose logs) timeout that seems be happening obcpbft unit tests, I'm investigating","ts":"1462227222.001106"},{"type":"message","user":"U0XPR4NP4","text":"There was a bug in the view change which caused a periodic failure in the obcpbft tests, fixed and pushed into that PR.  Still seeing that behave test fail in CI  (\"consensus still works if 1 peer (vp3) is byzantine\"), though it's run successfully 5\/5 times on my vagrant env.","edited":{"user":"U0XPR4NP4","ts":"1462253514.000000"},"ts":"1462253432.001107"},{"type":"message","user":"U0XPR4NP4","text":"Was able to figure out how to retrieve the logs from CI, looks to me like it's yet another simple timeout problem in that behave test.  Extended it and pushed to that PR, executing now, hopefully I will have good news in the morning.","ts":"1462254655.001109"},{"type":"message","user":"U0XR6J961","text":"how did you get the logs from CI?","ts":"1462267964.001110"},{"type":"message","user":"U0XPR4NP4","text":"There is a place you click on expand, then a number of urls, like pastebin which you can reference ","ts":"1462279730.001111"},{"type":"message","user":"U0XR6J961","text":"ah, maybe that's new","ts":"1462279776.001112"},{"type":"message","user":"U0XR6J961","text":"i was trying to figure out a way to abstract this multitude of channels into a single event processor","ts":"1462279820.001113"},{"type":"message","user":"U0XR6J961","text":"i guess the easiest way would be what you use for injectchan","ts":"1462279841.001114"},{"type":"message","user":"U0XR6J961","text":"i.e. transform calls(events) with arguments into closures that get queued","ts":"1462279881.001115"},{"type":"message","user":"U0XPR4NP4","text":"Ah, hmmm, yes, the injection was a late addition, just to handle those little one off cases, but there's no reason you couldn't do it more generally","ts":"1462280113.001116"},{"type":"message","user":"U0XPR4NP4","text":"I'd like to make sure that whatever mechanism we use for the eventing doesn't require this idle channel pattern I've been using.  I don't like it, but it's the most reliable and least invasive solution I've been able come up with.  Would be nice if the driving thread were owned by UT, would make determining when things are finished easier.  I sort of imagine the solution is to have the driving thread enter from outside PBFT, but doing that without a lot of code duplication has not been obvious.","ts":"1462280570.001117"},{"type":"message","user":"U0XR6J961","text":":simple_smile:","ts":"1462280600.001118"},{"type":"message","user":"U0XR6J961","text":"yes, i agree","ts":"1462280611.001119"},{"type":"message","user":"U0XR6J961","text":"i wondered about blocking vs non-blocking enqueue","ts":"1462280651.001120"},{"type":"message","user":"U0XR6J961","text":"so far it seems that you are using blocking enqueues?","ts":"1462280661.001121"},{"type":"message","user":"U0XR6J961","text":"and i think that's the right thing","ts":"1462280670.001122"},{"type":"message","user":"U0XPR4NP4","text":"Yes, using blocking queues simplified life considerably","ts":"1462280689.001123"},{"type":"message","user":"U0XPR4NP4","text":"Otherwise if a calling thread makes multiple events, you aren't guaranteed the order of arrival","ts":"1462280717.001124"},{"type":"message","user":"U0XPR4NP4","text":"(back in 15 minutes or so)","ts":"1462280801.001125"},{"type":"message","user":"U0XPR4NP4","text":"The biggest problem I have trying to wrap my head around using a single channel for events vs doing a select over multiple channels, is how to handle the timer event.  The very nice thing that the new threading does is fix the view timer, such that if the pbft thread resets the view timer, when the elapsed time would have otherwise caused that timer to fire, then the pbft thread never gets that event.  If there is for instance a timer service out there, which attempts to queue a timer event when the timer expires, but the event thread is off doing work, there's no way to take that event back if the timer is reset.  There could obviously be some sort of callback scheme, the timer event has to call back to the timer service when an event arrives to verify that it is a legitimate event, but that seems really ugly.","ts":"1462282491.001126"},{"type":"message","user":"U0XR6J961","text":"My thought was to have an event dispatch processor that also provides timed events","ts":"1462283260.001127"},{"type":"message","user":"U0XR6J961","text":"if you cancel a timed event, it never gets delivered","ts":"1462283274.001128"},{"type":"message","user":"U0XR6J961","text":"usually this is implemented using a timer wheel","ts":"1462283305.001129"},{"type":"message","user":"U0XR6J961","text":"you just wait for the next timer to expire (and wait for other events)","ts":"1462283334.001130"},{"type":"message","user":"U0XPR4NP4","text":"So the event dispatch processor holds the thread which drives pbft execution?","ts":"1462283518.001131"},{"type":"message","user":"U0XR6J961","text":"jyellick: that \"this indicates a bug\" is benign","ts":"1462292882.001132"},{"type":"message","user":"U0XR6J961","text":"not sure if it will even be present with the new code","ts":"1462292890.001133"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: Where\/what are you talking about?","ts":"1462292966.001134"},{"type":"message","user":"U0UGH3X7X","text":"are you looking at #1180 ?","ts":"1462293006.001135"},{"type":"message","user":"U0XR6J961","text":"<https:\/\/github.com\/hyperledger\/fabric\/issues\/1180#issuecomment-216579990>","attachments":[{"service_name":"GitHub","title":"VP0 gacks under sieve pbft with non deterministic results returned \u00b7 Issue #1180 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/issues\/1180#issuecomment-216579990","text":"Description: VP0 stopped logging, started dumping numbers out till it was ctrl-c'd Steps to repro: Setup a CA and set of 4 VPs using pbft sieve using privacy and security Login your user Do a s...","fallback":"GitHub: VP0 gacks under sieve pbft with non deterministic results returned \u00b7 Issue #1180 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/17052305?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/issues\/1180#issuecomment-216579990","thumb_width":420,"thumb_height":420,"id":1}],"ts":"1462293042.001136"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1462293043.001138"},{"type":"message","user":"U0UGH3X7X","text":"i'm going to walk over and talk to rick  ... not sure i understand what these logs mean","ts":"1462293088.001139"},{"type":"message","user":"U0XR6J961","text":"well","ts":"1462293097.001140"},{"type":"message","user":"U0XR6J961","text":"he's testing old code, i guess","edited":{"user":"U0XR6J961","ts":"1462293109.000000"},"ts":"1462293098.001141"},{"type":"message","user":"U0XR6J961","text":"well, old relative to our PRs","ts":"1462293122.001143"},{"type":"message","user":"U0XPR4NP4","text":"Yes, there was a bug... which was eventually fixed, but, the bulk of that code disappeared in Simon's PR","ts":"1462293134.001144"},{"type":"message","user":"U0XPR4NP4","text":"Sometimes that message was benign, othertimes it truly indicated a bug, at some point, I thought I switched that message.","ts":"1462293165.001145"},{"type":"message","user":"U0UGH3X7X","text":"the latest logs says peer is dying on startup with connection errors ... i don't think the network is configured right","ts":"1462293204.001146"},{"type":"message","user":"U0XR6J961","text":"which peer?","ts":"1462293223.001147"},{"type":"message","user":"U0UGH3X7X","text":"vp0\/vp1","ts":"1462293240.001148"},{"type":"message","user":"U0UGH3X7X","text":"ah wait ... vp0 is culprit","ts":"1462293317.001149"},{"type":"message","user":"U0UGH3X7X","text":"still think config is wrong ... i'll go talk to him","ts":"1462293420.001150"},{"type":"message","user":"U0XR6J961","text":"also he really doesn't have to test any consensus stuff until the new PRs are in","ts":"1462293580.001151"},{"type":"message","user":"U0XR6J961","text":"well, jason's","ts":"1462293584.001152"},{"type":"message","user":"U0UGH3X7X","text":"all at lunch :simple_smile:  will check again later in aftermoon","ts":"1462293888.001153"},{"type":"message","subtype":"file_share","text":"<@U0ULK2JPP|muralisr> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F15ULLKEV\/pasted_image_at_2016_05_03_09_36_pm.png|Pasted image at 2016-05-03, 9:36 PM> and commented: with latest code..","file":{"id":"F15ULLKEV","created":1462325829,"timestamp":1462325829,"name":"Pasted image at 2016_05_03 09_36 PM.png","title":"Pasted image at 2016-05-03, 9:36 PM","mimetype":"image\/png","filetype":"png","pretty_type":"PNG","user":"U0ULK2JPP","editable":false,"size":337642,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F15ULLKEV\/pasted_image_at_2016_05_03_09_36_pm.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F15ULLKEV\/download\/pasted_image_at_2016_05_03_09_36_pm.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_64":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F15ULLKEV-8242e62596\/pasted_image_at_2016_05_03_09_36_pm_64.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_80":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F15ULLKEV-8242e62596\/pasted_image_at_2016_05_03_09_36_pm_80.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F15ULLKEV-8242e62596\/pasted_image_at_2016_05_03_09_36_pm_360.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360_w":360,"thumb_360_h":158,"thumb_480":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F15ULLKEV-8242e62596\/pasted_image_at_2016_05_03_09_36_pm_480.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_480_w":480,"thumb_480_h":211,"thumb_160":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F15ULLKEV-8242e62596\/pasted_image_at_2016_05_03_09_36_pm_160.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F15ULLKEV-8242e62596\/pasted_image_at_2016_05_03_09_36_pm_720.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720_w":720,"thumb_720_h":316,"thumb_960":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F15ULLKEV-8242e62596\/pasted_image_at_2016_05_03_09_36_pm_960.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_960_w":960,"thumb_960_h":421,"thumb_1024":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F15ULLKEV-8242e62596\/pasted_image_at_2016_05_03_09_36_pm_1024.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_1024_w":1024,"thumb_1024_h":449,"image_exif_rotation":1,"original_w":1860,"original_h":816,"permalink":"https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F15ULLKEV\/pasted_image_at_2016_05_03_09_36_pm.png","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F15ULLKEV-57fa1ec010","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":1,"initial_comment":{"id":"Fc15UDJGGG","created":1462325829,"timestamp":1462325829,"user":"U0ULK2JPP","is_intro":true,"comment":"with latest code..","channel":""}},"user":"U0ULK2JPP","upload":true,"display_as_bot":false,"username":"<@U0ULK2JPP|muralisr>","bot_id":null,"ts":"1462325832.001154"},{"type":"message","user":"U0ULK2JPP","text":"that was with \"CORE_SECURITY_ENABLED=true CORE_SECURITY_PRIVACY=true .\/peer peer --peer-chaincodedev\"","ts":"1462325849.001155"},{"type":"message","user":"U0ULK2JPP","text":"I can try setting \u201cstatetransfer.blocksperrequest\u201d to be non zero but I\u2019d expect not to have to set anythig","ts":"1462325975.001156"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ULK2JPP>: There is a default defined in the `consensus\/obcpbft\/config.yaml`, I know there's been some effort to make the config not be accessed relative to the current working directory, but I don't believe that's in yet.  This is only the first symptom, you'll likely see many other pbft problems for lack of config if that is the problem.","ts":"1462327205.001157"},{"type":"message","user":"U0ULK2JPP","text":"<@U0XPR4NP4>: let me make sure I\u2019m not doing something wrong first","ts":"1462327257.001158"},{"type":"message","user":"U0ULK2JPP","text":"I thought  I had reverted my work","ts":"1462327265.001159"},{"type":"message","user":"U0ULK2JPP","text":"but let me make sure","ts":"1462327268.001160"},{"type":"message","user":"U0XPR4NP4","text":"I may have misquoted you the path... hold on","ts":"1462327279.001161"},{"type":"message","user":"U0XPR4NP4","text":"Actually, looks like <@U0XR6J961> moved the state transfer config out of pbft and into `core.yaml`.  Looks like it is there in mine.","ts":"1462327465.001162"},{"type":"message","user":"U0ULK2JPP","text":"false alarm\u2026 sorry about that <@U0XPR4NP4>","ts":"1462327632.001163"},{"type":"message","user":"U0XPR4NP4","text":"No problem, the best sort of problems are the ones that don't exist! Glad to hear it.","ts":"1462327720.001164"},{"type":"message","user":"U0ULK2JPP","text":":simple_smile:","ts":"1462327734.001165"},{"type":"message","user":"U0ULK2JPP","text":"I did have some of my changes","ts":"1462327753.001166"},{"type":"message","user":"U12AHQ3NK","text":"Is the leader elected in sieve model of consensus same as the primary in the classic mode?","ts":"1462355897.001167"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1462356359.001168"},{"type":"message","user":"U0XR6J961","text":"sieve uses the pbft primary as leader","ts":"1462356374.001169"},{"type":"message","user":"U0XR6J961","text":"nits7sid: what are you specifically interested in?","ts":"1462356664.001170"},{"type":"message","user":"U12AHQ3NK","text":"i am actually interested in the difference between the working of  sieve  and the classic pbfts. In sieve i read that the processes executes the operations and sends the result hashes or signatures to the leader and finally the leader commits the transaction if it recieves f+1 identical hashes. so does that mean only leader can commit the transaction?","ts":"1462356861.001171"},{"type":"message","user":"U0XR6J961","text":"the leader just provides a lifecycle management","ts":"1462356910.001172"},{"type":"message","user":"U0XR6J961","text":"there is always just one request (or set block of requests) outstanding","ts":"1462356929.001173"},{"type":"message","user":"U0XR6J961","text":"(1) leader sends EXECUTE, (2) all replicas tentatively execute, but do not commit, (3) replicas send signed result to the leader, (4) leader waits until it collects enough results, (5) leader sends this result set through PBFT, (6) all replicas receive the result set and can commit (deterministic), rollback (non-deterministic), or sync (classified as deterministic, but local replica had a non-deterministic result)","ts":"1462357081.001174"},{"type":"message","user":"U12AHQ3NK","text":"ohh.. so the leader doesnt not actually filters out the non-deterministic transactions from the result-set?","ts":"1462357204.001175"},{"type":"message","user":"U0XR6J961","text":"no, all replicas do this based on the result set","ts":"1462357261.001176"},{"type":"message","user":"U12AHQ3NK","text":"In 5) point, through PBFT meaning the primary-backup mechanism is carried out again? or is it just that replicas now only checks the result-set and filters accordignly?","ts":"1462357379.001177"},{"type":"message","user":"U0XR6J961","text":"what mechanism?","ts":"1462357398.001178"},{"type":"message","user":"U0XR6J961","text":"the sieve leader submits a new request into pbft, acting as the pbft primary: it sends a pre-prepare of the result-set \"request\"","ts":"1462357436.001179"},{"type":"message","user":"U12AHQ3NK","text":"ohh okay.. i get it","ts":"1462357529.001180"},{"type":"message","user":"U12AHQ3NK","text":"thanks <@U0XR6J961>","ts":"1462357545.001181"},{"type":"message","user":"U0XR6J961","text":"jyellick: i don't understand how the idlechan works","ts":"1462358475.001182"},{"type":"message","user":"U0XR6J961","text":"it doesn't seem to account for outstanding timers","ts":"1462358490.001183"},{"user":"U1620CB4L","type":"message","subtype":"channel_join","text":"<@U1620CB4L|risto.laanoja> has joined the channel","ts":"1462364534.001184"},{"user":"U12J1TDSA","type":"message","subtype":"channel_join","text":"<@U12J1TDSA|weizhao> has joined the channel","ts":"1462371419.001185"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: You're correct, the idlechan does not account for outstanding timers, those are checked first","ts":"1462371466.001186"},{"user":"U10SJMAHH","type":"message","subtype":"channel_join","text":"<@U10SJMAHH|sachikoy> has joined the channel","ts":"1462371490.001187"},{"user":"U0YMACQSW","type":"message","subtype":"channel_join","text":"<@U0YMACQSW|vita> has joined the channel","ts":"1462371622.001188"},{"type":"message","user":"U0XR6J961","text":"can we drop the fuzzing tests?","ts":"1462372386.001189"},{"type":"message","user":"U0XR6J961","text":"i don't think they're useful anymore","ts":"1462372391.001190"},{"type":"message","user":"U0XPR4NP4","text":"I hate dropping tests, though usually they seem to reveal bugs in the mock network moreso than bugs in the code.","ts":"1462372570.001191"},{"type":"message","user":"U0XR6J961","text":":simple_smile:","ts":"1462372822.001192"},{"user":"U163J7MRT","type":"message","subtype":"channel_join","text":"<@U163J7MRT|hill> has joined the channel","ts":"1462372886.001193"},{"type":"message","user":"U0XR6J961","text":"TestViewChangeUpdateSeqNo is failing when i run it in my complaints code and a complete run","ts":"1462373277.001194"},{"type":"message","user":"U0XR6J961","text":"some timeout issue...","ts":"1462373367.001195"},{"type":"message","user":"U0XR6J961","text":"whole day spent on rebasing again :simple_smile:","ts":"1462374321.001196"},{"type":"message","user":"U0ULK2JPP","text":"I know the feeling :simple_smile: did the same yesterday","ts":"1462374360.001197"},{"type":"message","user":"U0XR6J961","text":"rebase actually forces you to write larger patches","ts":"1462374386.001198"},{"type":"message","user":"U0XR6J961","text":"which is not good","ts":"1462374388.001199"},{"type":"message","user":"U0XR6J961","text":"well, commits","ts":"1462374399.001200"},{"type":"message","user":"U0ULK2JPP","text":"ah right","ts":"1462374408.001201"},{"type":"message","user":"U0XR6J961","text":"or you get the same collision in every commit :confused:","ts":"1462374412.001202"},{"type":"message","user":"U0ULK2JPP","text":"and \u201cjust for the sake of rebase\"","ts":"1462374418.001203"},{"type":"message","user":"U0XR6J961","text":"right","ts":"1462374424.001204"},{"type":"message","user":"U0XR6J961","text":"now i squished all my commits into one","ts":"1462374438.001205"},{"type":"message","user":"U0XR6J961","text":"it is a better solution in the end","ts":"1462374448.001206"},{"type":"message","user":"U0ULK2JPP","text":"<!here|@here> \u2026 I need some help with the right way the to implement the  \u201chappy path\u201d of  #588","ts":"1462385337.001207"},{"type":"message","user":"U0ULK2JPP","text":"most of the changes are in the consensus component","ts":"1462385349.001208"},{"type":"message","user":"U0ULK2JPP","text":"here\u2019s the change I need to implement","ts":"1462385358.001209"},{"type":"message","subtype":"file_share","text":"<@U0ULK2JPP|muralisr> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F1662N14P\/pasted_image_at_2016_05_04_02_09_pm.png|Pasted image at 2016-05-04, 2:09 PM>","file":{"id":"F1662N14P","created":1462385365,"timestamp":1462385365,"name":"Pasted image at 2016_05_04 02_09 PM.png","title":"Pasted image at 2016-05-04, 2:09 PM","mimetype":"image\/png","filetype":"png","pretty_type":"PNG","user":"U0ULK2JPP","editable":false,"size":52292,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1662N14P\/pasted_image_at_2016_05_04_02_09_pm.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1662N14P\/download\/pasted_image_at_2016_05_04_02_09_pm.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_64":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1662N14P-257ab40d33\/pasted_image_at_2016_05_04_02_09_pm_64.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_80":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1662N14P-257ab40d33\/pasted_image_at_2016_05_04_02_09_pm_80.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1662N14P-257ab40d33\/pasted_image_at_2016_05_04_02_09_pm_360.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360_w":360,"thumb_360_h":110,"thumb_480":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1662N14P-257ab40d33\/pasted_image_at_2016_05_04_02_09_pm_480.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_480_w":480,"thumb_480_h":146,"thumb_160":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1662N14P-257ab40d33\/pasted_image_at_2016_05_04_02_09_pm_160.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1662N14P-257ab40d33\/pasted_image_at_2016_05_04_02_09_pm_720.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720_w":720,"thumb_720_h":219,"thumb_960":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1662N14P-257ab40d33\/pasted_image_at_2016_05_04_02_09_pm_960.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_960_w":960,"thumb_960_h":292,"thumb_1024":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1662N14P-257ab40d33\/pasted_image_at_2016_05_04_02_09_pm_1024.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_1024_w":1024,"thumb_1024_h":312,"image_exif_rotation":1,"original_w":1150,"original_h":350,"permalink":"https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F1662N14P\/pasted_image_at_2016_05_04_02_09_pm.png","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F1662N14P-cd0ea53199","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0ULK2JPP","upload":true,"display_as_bot":false,"username":"<@U0ULK2JPP|muralisr>","bot_id":null,"ts":"1462385369.001210"},{"type":"message","user":"U0ULK2JPP","text":"the key are two things","ts":"1462385382.001211"},{"type":"message","user":"U0ULK2JPP","text":"1) need to account for transaction errors (which we have been ignoring)","ts":"1462385400.001212"},{"type":"message","user":"U0ULK2JPP","text":"2) need to send out an event on block failure too (we have been only sending event from CommitTx\u2026)","ts":"1462385435.001213"},{"type":"message","user":"U0ULK2JPP","text":"First question\u2026 where would I store the txerrs from ExecuteTransactions in helper.ExecTxs","ts":"1462385493.001214"},{"type":"message","user":"U0ULK2JPP","text":"I can define a curBatchErrs field in Helper to mimic curBatch","ts":"1462385546.001215"},{"type":"message","user":"U0ULK2JPP","text":"would that be ok ?","ts":"1462385592.001216"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ULK2JPP>: I've often wondered if `helper.go` is really the place for this work to live, ultimately, it seems odd to me that it is the consensus package which is doing this accounting, but in the interest of expediency,  since the `curBatch` stuff is already there, it seems like a good place to put it to me.","edited":{"user":"U0XPR4NP4","ts":"1462386577.000000"},"ts":"1462386563.001217"},{"type":"message","user":"U0ULK2JPP","text":"thanks, <@U0XPR4NP4> \u2026 that were exactly my thoughts too","ts":"1462386595.001219"},{"type":"message","user":"U0ULK2JPP","text":"now I know who to send this for review :simple_smile:","ts":"1462386605.001220","reactions":[{"name":"grin","users":["U0XQ35CDD"],"count":1}]},{"type":"message","user":"U0ULK2JPP","text":"thanks!","ts":"1462386613.001221"},{"type":"message","user":"U0XPR4NP4","text":"No problem","ts":"1462386621.001222"},{"type":"message","user":"U0ULK2JPP","text":"at least they have the same codepaths\/semantics \u2026 I\u2019ll try hard to maintain that","ts":"1462386725.001223"},{"type":"message","user":"U0ULK2JPP","text":"The  \u201cconsensus failure\u201d part above is only useful if we have the transactions (ie, curBatch) at that point. For noops,  this is true.  Is it true for other consensus ?","ts":"1462401958.001224"},{"type":"message","user":"U0ULK2JPP","text":"I\u2019m wondering if 'send \u201cblockfailure\u201d event \u2018 should be changed to \u2018send \u201cblockfailure\u201d event if we have the tx list'","ts":"1462402026.001225"},{"type":"message","user":"U0ULK2JPP","text":"or more safely, send only block success events (ie, on CommitTxBatch)","ts":"1462402082.001226"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ULK2JPP>: Having a little trouble making sense of this.  What does 'blockfailure' mean?","ts":"1462460442.001227"},{"type":"message","user":"U0ULK2JPP","text":"<@U0XPR4NP4> : basically opposite of commit","ts":"1462460735.001228"},{"type":"message","user":"U0ULK2JPP","text":"if you look at the picture above, the \u201cconsensus failure\u201d path","ts":"1462460759.001229"},{"type":"message","user":"U0XPR4NP4","text":"What about the scenario where it's rolled back on some nodes, but committed on others?","ts":"1462460836.001230"},{"type":"message","user":"U0ULK2JPP","text":"right, that and also other complex cases where we may not have all the information to send out a meaninful \u201cevent\u201d \u2026","ts":"1462460913.001231"},{"type":"message","user":"U0XPR4NP4","text":"[This is basically only a Sieve case, where consensus is achieved, but instead of commit, the block comes from statetransfer]]","ts":"1462460915.001232"},{"type":"message","user":"U0ULK2JPP","text":"I\u2019m thinking the best we can do is the \u201cconsensus success\u201d path","ts":"1462460933.001233"},{"type":"message","user":"U0ULK2JPP","text":"it appears simple and better to do something that we can guarantee (and just an extension of what we do already)","ts":"1462461011.001234"},{"type":"message","user":"U0ULK2JPP","text":"what do you think ?","ts":"1462461015.001235"},{"type":"message","user":"U0XPR4NP4","text":"(Sorry, juggling scrum too)","ts":"1462461042.001236"},{"type":"message","user":"U0XPR4NP4","text":"So, I think we can definitely handle the 'consensus success' path, as you say.  If a peer calls into commit, that should indicate that consensus has occurred for that particular block.","ts":"1462461699.001237"},{"type":"message","user":"U0UGH3X7X","text":"so every peer will send an event ...  is it ok that the listener will receive multiple events about the same tx ?","ts":"1462461773.001238"},{"type":"message","user":"U0XPR4NP4","text":"The only thing that consensus can more generally give you, is an agreement on the hash of the latest block.  This happens at every block for Sieve, and ever `K` blocks for the other PBFT variants.  This is the only insight consensus has into the 'execution output' (unless you're talking about Sieve, but it is a special case, and its long term viability is in question)","ts":"1462461822.001239"},{"type":"message","user":"U0XPR4NP4","text":"I'll also say, that except for the black sheep that is Sieve, the other consensus plugins all call Begin Exec Commit in essentially an atomic fashion.  The output from Exec is possibly logged, but otherwise ignored (last we looked at it, it wasn't particularly useful, I think it was the state hash as output), and it's not at all clear what consensus should do if there is an error invoking exec.","ts":"1462461978.001240"},{"type":"message","user":"U0UGH3X7X","text":"<@U0XR6J961> how are things with your rebase ?  also PR #1277 ?","ts":"1462462018.001241"},{"type":"message","user":"U0ULK2JPP","text":"<@U0UGH3X7X> : it will be ideal if listener receives one event - block success\/block failure","ts":"1462462072.001242"},{"type":"message","user":"U0ULK2JPP","text":"I was hoping ledger.CommitTx and ledger.RollbackTx will catch those nicely","ts":"1462462098.001243"},{"type":"message","user":"U0XPR4NP4","text":"But for a byzantine consensus protocol, you cannot rely on any one particular replica following the protocol","ts":"1462462103.001244"},{"type":"message","user":"U0ULK2JPP","text":"ok","ts":"1462462106.001245"},{"type":"message","user":"U0XPR4NP4","text":"In the case that you tolerate `f` byzantine nodes, you would need, at a bare minimum, `f+1` attestations that a block was committed, or not","ts":"1462462188.001246"},{"type":"message","user":"U0XPR4NP4","text":"You could on the other hand flip this a bit, and say that a VP is trusted to the NVPs it is talking to","ts":"1462462226.001247"},{"type":"message","user":"U0XPR4NP4","text":"And say that each VP only broadcasts the event to its connect NVPs","ts":"1462462250.001248"},{"type":"message","user":"U0XPR4NP4","text":"Sorry if I'm playing catch up, what is the relationship between the listener, and the VP?","ts":"1462462326.001249"},{"type":"message","user":"U0XPR4NP4","text":"[And to jump back for a second, I'm still not sure what a block failure would be, outside of Sieve.  If a request is proposed for a particular block, and the network ends up not deciding to do that block, it's not like that request is gone, in general it will simply find its way into a later block]","ts":"1462462557.001250"},{"type":"message","user":"U0TFEHX8E","text":"if I want to run pbft with a single peer, are there any special configurations I need to set?","ts":"1462469781.001251"},{"type":"message","user":"U0XPR4NP4","text":"<@U0TFEHX8E>: <@U0XR6J961>: Is the expert here, but I think setting `N` to 1, and `f` to 0 might do it","edited":{"user":"U0XPR4NP4","ts":"1462471277.000000"},"ts":"1462470378.001252"},{"user":"U11L89VHU","type":"message","subtype":"channel_join","text":"<@U11L89VHU|posnerj> has joined the channel","ts":"1462494070.001254"},{"type":"message","user":"U12AHQ3NK","text":"Hello.. in the obcpbft\/config file the timeout value for singleblock=2s. So does that mean a block will be created in every 2s?","ts":"1462518100.001255"},{"type":"message","user":"U0XR6J961","text":"what does \"consensus failure\" mean?","ts":"1462529391.001256"},{"type":"message","user":"U0XR6J961","text":"nits7sid: if you run batch, then a new block will created after 2s, even if the block is not full","ts":"1462529602.001257"},{"type":"message","user":"U12AHQ3NK","text":"ohh.. i was testing the pbft and noops working. in nops when i call a Invoke  chaincode function 100 times all the 100 transactions goes into one block. But in case of pbft it creates 100 seperate blocks. why does this happen? or am i going wrong in my configuration?","ts":"1462529788.001258"},{"type":"message","user":"U0XR6J961","text":"you need to use pbft batch","ts":"1462530182.001259"},{"type":"message","user":"U0ULK2JPP","text":"<@U0XPR4NP4>: <@U0XR6J961> would you have some time to review \n<https:\/\/github.com\/muralisrini\/fabric\/tree\/report_transaction_and_block_failures_take2%23issue588> for changes to consensus for issue 588 please?","attachments":[{"service_name":"GitHub","title":"muralisrini\/fabric","title_link":"https:\/\/github.com\/muralisrini\/fabric\/tree\/report_transaction_and_block_failures_take2%23issue588","text":"Blockchain fabric incubator code","fallback":"GitHub: muralisrini\/fabric","thumb_url":"https:\/\/avatars1.githubusercontent.com\/u\/14361488?v=3&s=400","from_url":"https:\/\/github.com\/muralisrini\/fabric\/tree\/report_transaction_and_block_failures_take2%23issue588","thumb_width":420,"thumb_height":420,"id":1}],"ts":"1462535908.001260"},{"type":"message","user":"U0XR6J961","text":"i will","ts":"1462536077.001262"},{"type":"message","user":"U0ULK2JPP","text":"thanks!","ts":"1462536181.001263"},{"type":"message","user":"U0ULK2JPP","text":"it only takes care of the \u201cconsensus succeeded\u201d path. For now we don\u2019t issue an event on \u201cconsensus failure\"","ts":"1462536219.001264"},{"type":"message","user":"U0ULK2JPP","text":"the later needs more that to even determine all the cases so we can do it correctly (if it can be done)","ts":"1462536306.001265"},{"type":"message","user":"U0XR6J961","text":"feels wrong that the result is non-hash (i.e. non-consensus) data","ts":"1462536453.001266"},{"type":"message","user":"U0ULK2JPP","text":"it is","ts":"1462536642.001267"},{"type":"message","user":"U0ULK2JPP","text":"there is some explanation in the issue why we do it this way","ts":"1462536664.001268"},{"type":"message","user":"U0ULK2JPP","text":"and how we can change it in future to do the right thing","ts":"1462536678.001269"},{"user":"U0PB67X4K","type":"message","subtype":"channel_join","text":"<@U0PB67X4K|garisingh> has joined the channel","ts":"1462539719.001270"},{"user":"U16NAHH8U","type":"message","subtype":"channel_join","text":"<@U16NAHH8U|michaelhaley> has joined the channel","ts":"1462542253.001271"},{"type":"message","user":"U0XR6J961","text":"tuand: do we have #754 in now?","ts":"1462545715.001272"},{"type":"message","user":"U0UGH3X7X","text":"no ... haven't finished rebasing","ts":"1462545744.001273"},{"type":"message","user":"U0XR6J961","text":"ok","ts":"1462545747.001274"},{"type":"message","user":"U0UGH3X7X","text":"btw,  you mentioned squishing all your commits together ?  how did you do that ?","ts":"1462545801.001275"},{"type":"message","user":"U0XR6J961","text":"i did a rebase -i and marked commits as fixup","ts":"1462545834.001276"},{"type":"message","user":"U0UGH3X7X","text":"that's what i'm doing ... thought you mentioned something about reducing the # of commits so the committers don't complain so much","ts":"1462545898.001277"},{"type":"message","user":"U0XR6J961","text":"well, it is a balance - too many small commits (especially those fixing previous errors) - difficult to review; too big of a commit - difficult to review as well","ts":"1462545974.001278"},{"type":"message","user":"U0UGH3X7X","text":"well 90% of my commits are  -m \"resolve rebase xxxxx\"","ts":"1462546016.001279"},{"type":"message","user":"U0UGH3X7X","text":"ok, if i'm not done monday, please kill me","ts":"1462546034.001280"},{"type":"message","user":"U0XR6J961","text":"resolve rebase?","ts":"1462546051.001281"},{"type":"message","user":"U0XR6J961","text":"don't you fix up the commit itself?","ts":"1462546059.001282"},{"type":"message","user":"U0UGH3X7X","text":"rebase -i   ... hit a rebase conflict, resolve conflict through a commit","ts":"1462546092.001283"},{"type":"message","user":"U0XR6J961","text":"oh","ts":"1462546114.001284"},{"type":"message","user":"U0UGH3X7X","text":"then rinse and repeat","ts":"1462546125.001285"},{"type":"message","user":"U0XR6J961","text":"is jyellick around today?","ts":"1462546662.001286"},{"type":"message","user":"U0XPR4NP4","text":"I'm here","ts":"1462546670.001287"},{"type":"message","user":"U0XR6J961","text":"hi!","ts":"1462546672.001288"},{"type":"message","user":"U0XR6J961","text":"do you think now would be a good time to move state transfer from consensus into core?","ts":"1462546691.001289"},{"type":"message","user":"U0XR6J961","text":"that would allow us to slim down the consensus API significantly","ts":"1462546713.001290"},{"type":"message","user":"U0XPR4NP4","text":"This could be a good time to do it, after your persistence changes eliminated the direct callins","ts":"1462546731.001291"},{"type":"message","user":"U0XR6J961","text":"right","ts":"1462546741.001292"},{"type":"message","user":"U0XR6J961","text":"i snuck that in :simple_smile:","ts":"1462546747.001293"},{"type":"message","user":"U0XPR4NP4","text":"Working with bcbrock yesterday I found a state transfer bug of some sort, haven't figured out which side the failure's on, but was going to be mucking with that code anyway, I can go ahead and move it out.  What package would you propose? I would think `peer\/statetransfer`?","ts":"1462546811.001294"},{"type":"message","user":"U0XPR4NP4","text":"(Was also looking at 1368 and am very confused)","ts":"1462546846.001295"},{"type":"message","user":"U0XPR4NP4","text":"(Actually, found it)","ts":"1462547018.001296"},{"type":"message","user":"U0XR6J961","text":"i think sheehan and jeff may have an opinion on where it should go","ts":"1462547081.001297"},{"type":"message","user":"U0XR6J961","text":"i'd guess core\/statetransfer","ts":"1462547088.001298"},{"type":"message","user":"U0XR6J961","text":"so how does 1368 happen?","ts":"1462547107.001299"},{"type":"message","user":"U0XPR4NP4","text":"Just added it to the issue text, but basically, when rebasing onto your stuff, I missed one of the instances where the Sieve thread started executing in `pbft-core.go`","ts":"1462547151.001300"},{"type":"message","user":"U0XPR4NP4","text":"So there were concurrent modification to the checkpoint map, so it changed size between counting the entries, and filling the array","ts":"1462547183.001301"},{"type":"message","user":"U0XR6J961","text":"oh, is this the same as 1366?","ts":"1462547186.001302"},{"type":"message","user":"U0XPR4NP4","text":"Good chance","ts":"1462547198.001303"},{"type":"message","user":"U0XR6J961","text":"execDoneSync() calls?","ts":"1462547204.001304"},{"type":"message","user":"U0XPR4NP4","text":"Yep","ts":"1462547206.001305"},{"type":"message","user":"U0XR6J961","text":"ha","ts":"1462547209.001306"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1462547209.001307"},{"type":"message","user":"U0XPR4NP4","text":"They should be able to just be `execDone` now I believe","ts":"1462547226.001308"},{"type":"message","user":"U0XR6J961","text":"<https:\/\/github.com\/hyperledger\/fabric\/pull\/1384>","attachments":[{"service_name":"GitHub","title":"sieve: do not bypass pbft state machine, #1366 by corecode \u00b7 Pull Request #1384 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1384","text":"Signed-off-by: Simon Schubert <mailto:sis@zurich.ibm.com|sis@zurich.ibm.com>","fallback":"GitHub: sieve: do not bypass pbft state machine, #1366 by corecode \u00b7 Pull Request #1384 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1384","thumb_width":400,"thumb_height":400,"id":1}],"ts":"1462547227.001309"},{"type":"message","user":"U0XPR4NP4","text":"Perfect, thanks","ts":"1462547306.001311"},{"type":"message","user":"U0UGH3X7X","text":"<@U0N1D1UAE>:  was also mentioning #1091 and #919 yesterday ?   I haven't seen any updates on these though","ts":"1462547438.001312"},{"type":"message","user":"U0XPR4NP4","text":"I worked with <@U0N1D1UAE> on 1091 yesterday, which revealed the statetransfer bug I referred to above, but also exposed that the test was perhaps being too stringent on the behavior of PBFT.  The key point being that even with 4 non-byzantine nodes, the only guarantee is that 2f+1=3 of them will be participating in the network, and that the network will be making progress.  It is okay, and largely expected, from a protocol perspective that 1 of them is behind and not participating.  This is something I've discussed a little with <@U0Y14MWA2> and something we'll be looking to improve upon the future, but it's not a bug, changing this behavior would be an enhancement.","ts":"1462547749.001313"},{"type":"message","user":"U0XPR4NP4","text":"With respect to 919, that has been closed, I think maybe you're thinking of 915, which I think may be fixed, but, will be tough to verify until Simon's PR 1384 goes through.","ts":"1462547815.001314"},{"type":"message","user":"U0XPR4NP4","text":"<@U0TFEHX8E>: <@U0UKTPMG8> We are thinking this sprint would be an opportune time to move statetransfer out of consensus and into some other package, where would you propose we move it in the package structure?  Since it is dependent on the peer network, my proposal would be `core\/peer\/statetransfer` but I'm open to other places.","ts":"1462547823.001315"},{"type":"message","user":"U0UGH3X7X","text":"yup, typo #915","ts":"1462547850.001316"},{"type":"message","user":"U0UKTPMG8","text":"<@U0XPR4NP4>: <@U0TFEHX8E> makes sense to me.","ts":"1462547902.001317"},{"type":"message","user":"U0UKTPMG8","text":"<@U0XPR4NP4>: please feel free to contact me any time if you want to discuss the task","ts":"1462547968.001318"},{"type":"message","user":"U0XPR4NP4","text":"<@U0UKTPMG8>: <@U0XR6J961> Suggested `core\/statetransfer`, maybe he can explain his reasoning","ts":"1462547988.001319"},{"type":"message","user":"U0UKTPMG8","text":"I should free up a bit early next week","ts":"1462548002.001320"},{"type":"message","user":"U0XPR4NP4","text":"Thanks, I likely will confer, as it will need to stop using the helper calls, and go directly into peer.  My guess is that it should be a fairly simple migration, but will double check to make sure it's being hooked in correctly.","ts":"1462548067.001321"},{"type":"message","user":"U0UKTPMG8","text":"sounds good","ts":"1462548090.001322"},{"type":"message","user":"U0XR6J961","text":"jyellick: i suggest still using interfaces","ts":"1462548379.001323"},{"type":"message","user":"U0XR6J961","text":"jyellick: but then you can use ledger as something that provides this interface","ts":"1462548400.001324"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: Yes, I would still try to use the MessageHandlerCoordinator interface, which `helper.go` wraps, so the method names would change slightly.  It is getting the reference to it properly that I might need Jeff's help with.","edited":{"user":"U0XPR4NP4","ts":"1462548452.000000"},"ts":"1462548437.001325"},{"type":"message","user":"U0XPR4NP4","text":"I simply meant that statetransfer should no longer need to use the `consensus.Stack` interface","ts":"1462548491.001327"},{"type":"message","user":"U0XR6J961","text":"right, that's my idea","ts":"1462548504.001328"},{"type":"message","user":"U0XR6J961","text":"the stack interface could be reduced considerably","ts":"1462548514.001329"},{"type":"message","user":"U0XPR4NP4","text":"Exactly, which would be great","ts":"1462548522.001330"},{"type":"message","user":"U0XR6J961","text":"but given that most interfaces that statetransfer uses are basically passed through by the helper, you could use the ledger itself (or a mock)","ts":"1462548563.001331"},{"type":"message","user":"U0XR6J961","text":"of course not for all","ts":"1462548567.001332"},{"type":"message","user":"U0XR6J961","text":"and it won't be a single \"object\" providing all these interfaces","ts":"1462548617.001333"},{"type":"message","user":"U0XR6J961","text":"there will be ledger, communication, etc.","ts":"1462548629.001334"},{"type":"message","user":"U0XPR4NP4","text":"Yes","ts":"1462548767.001335"},{"type":"message","user":"U0XR6J961","text":"<https:\/\/s3.amazonaws.com\/archive.travis-ci.org\/jobs\/128321194\/log.txt>","ts":"1462548873.001336"},{"type":"message","user":"U0XR6J961","text":"any idea what is happening here?","ts":"1462548878.001337"},{"type":"message","user":"U0UGH3X7X","text":"is this #1358 ?","ts":"1462549051.001338"},{"type":"message","user":"U0XPR4NP4","text":"--- FAIL: TestBatchCustody (6.01s)\n\tobc-batch_test.go:105: Expected replica 0 to have one block","ts":"1462549058.001339"},{"type":"message","user":"U0XPR4NP4","text":"(I really still want to know how this isn't a huge bug in  `go test`.  When a test fails, you should get the output of the failing test, and that's it.  Instead, you get just tons of random output from other tests in addition to the failing test, and it makes it obnoxious to figure out what actually failed.  Why I always end up running with `go test -v`)","ts":"1462549156.001340"},{"type":"message","user":"U0XR6J961","text":"some timing issue","ts":"1462549609.001341"},{"type":"message","user":"U0UGH3X7X","text":"just saw #1379 `**23:58:39.168 [consensus\/util] RegisterChannel -&gt; WARN 055 Received duplicate connection from &lt;nil&gt;, switching to new connection**`","ts":"1462549792.001342"},{"type":"message","user":"U0UGH3X7X","text":"we can use  &lt;nil&gt; as a map key ?","ts":"1462549817.001343"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I've noticed that too, need to investigate, I did not believe that `<http:\/\/handler.peerHandler.To|handler.peerHandler.To>()` could be `nil`","ts":"1462549953.001344"},{"type":"message","user":"U0XPR4NP4","text":"My money is on handler's being unnecessarily instantiated.  It bears investigation, just hasn't obviously broken anything.","ts":"1462549984.001345"},{"user":"U0Z5BHCEM","type":"message","subtype":"channel_join","text":"<@U0Z5BHCEM|suma> has joined the channel","ts":"1462555325.001346"},{"user":"U0NLZCF8V","type":"message","subtype":"channel_join","text":"<@U0NLZCF8V|juanblanco> has joined the channel","ts":"1462728938.001347"},{"user":"U173QDB0W","type":"message","subtype":"channel_join","text":"<@U173QDB0W|pablofullana> has joined the channel","ts":"1462745394.001348"},{"user":"U1751P7U4","type":"message","subtype":"channel_join","text":"<@U1751P7U4|shubhamvrkr> has joined the channel","ts":"1462775177.001349"},{"type":"message","user":"U0XR6J961","text":"tuand: i don't understand your \"resolve rebase\" commits","ts":"1462787685.001350"},{"type":"message","user":"U0XR6J961","text":"i'm trying to add \"bound number of requests\"","ts":"1462792124.001351"},{"type":"message","user":"U0XR6J961","text":"i'm trying to figure out what the conditions are to reject a request because too many are outstanding from that replica","ts":"1462792188.001352"},{"type":"message","user":"U0XR6J961","text":"the problem is that i may not have processed the oldest request, while the primary already did","ts":"1462792241.001353"},{"type":"message","user":"U0XR6J961","text":"<@U0Y14MWA2>: any suggestions?","ts":"1462792263.001354"},{"type":"message","user":"U0XR6J961","text":"async networks are difficult","ts":"1462792273.001355"},{"type":"message","user":"U0XR6J961","text":"maybe we don't have to bound that, because the watermarks bound it","ts":"1462792483.001356"},{"type":"message","user":"U0Y14MWA2","text":"bound number of requests should in principle be per client","ts":"1462795807.001357"},{"type":"message","user":"U0Y14MWA2","text":"not sure what exactly what the count of reqs from a replica means - can you pls elaborate?","ts":"1462795836.001358"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XR6J961>:","ts":"1462796710.001359"},{"type":"message","user":"U0XR6J961","text":"<@U0Y14MWA2>: sorry, was afk for a while","ts":"1462797146.001360"},{"type":"message","user":"U0XR6J961","text":"<@U0Y14MWA2>: i wanted to bound the number of requests a replica can inject at any time","ts":"1462797206.001361"},{"type":"message","user":"U0XR6J961","text":"<@U0Y14MWA2>: not per client","ts":"1462797210.001362"},{"type":"message","user":"U0XR6J961","text":"clients are potentially millions?","ts":"1462797236.001363"},{"type":"message","user":"U0Y14MWA2","text":"ok so the problem is consistency of the counters at primary vs other replicas?","ts":"1462797353.001364"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1462797377.001365"},{"type":"message","user":"U0XR6J961","text":"the primary may already have executed a request and now allow a new request from a replica","ts":"1462797405.001366"},{"type":"message","user":"U0XR6J961","text":"why some other replica didn't - and then would consider that primary malicious","ts":"1462797427.001367"},{"type":"message","user":"U0XR6J961","text":"so obviously we need something like watermarks","ts":"1462797440.001368"},{"type":"message","user":"U0Y14MWA2","text":"what's the goal of this - preventing a DoS?","ts":"1462797521.001369"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1462798068.001370"},{"type":"message","user":"U0XR6J961","text":"<https:\/\/github.com\/hyperledger\/fabric\/issues\/1171>","attachments":[{"service_name":"GitHub","title":"pbft: bound number of requests \u00b7 Issue #1171 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/issues\/1171","text":"This is for the PBFT implementation for #1098. Bound the number of new requests we accept from the local peer. Bound the number of requests any other replica proposes. Reject primary if it propos...","fallback":"GitHub: pbft: bound number of requests \u00b7 Issue #1171 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/issues\/1171","thumb_width":400,"thumb_height":400,"id":1}],"ts":"1462798075.001371"},{"type":"message","user":"U0Y14MWA2","text":"the issue happens only because of PBFT watermarks","ts":"1462798228.001373"},{"type":"message","user":"U0Y14MWA2","text":"if the high watermark would be low watermark + 1","ts":"1462798243.001374"},{"type":"message","user":"U0Y14MWA2","text":"i.e., ordering and execution in sync - it would not happen right?","ts":"1462798257.001375"},{"type":"message","user":"U0Y14MWA2","text":"to circumvent this - one could bound the number of requests from last stable checkpoint","ts":"1462798374.001376"},{"type":"message","user":"U0Y14MWA2","text":"and have a signle number for this","ts":"1462798384.001377"},{"type":"message","user":"U0Y14MWA2","text":"as in each replica can have at most that many request in between checkpoints","ts":"1462798424.001378"},{"type":"message","user":"U0Y14MWA2","text":"this can be as well specified as reqlimit = reqfactor*checkpointsize","ts":"1462798476.001379"},{"type":"message","user":"U0Y14MWA2","text":"would that address the concern?","ts":"1462798487.001380"},{"type":"message","user":"U0XR6J961","text":"aha","ts":"1462798625.001381"},{"type":"message","user":"U0XR6J961","text":"i'll have to think about this","ts":"1462798631.001382"},{"type":"message","user":"U0XR6J961","text":"maybe watermarks are enough anyways","ts":"1462798639.001383"},{"type":"message","user":"U0XR6J961","text":"tuand: do you want some review for 756?","ts":"1462801797.001384"},{"type":"message","user":"U0XR6J961","text":"tuand: i guess best would be to squash all these fixup commits into the main change","ts":"1462801816.001385"},{"type":"message","user":"U0UGH3X7X","text":"i do but want to do this after i fix up the unit tests","ts":"1462801841.001386"},{"type":"message","user":"U0XR6J961","text":"i don't understand how these resolve rebase commits even appear in the first place","ts":"1462801843.001387"},{"type":"message","user":"U0UGH3X7X","text":"i can show you in 30 min or so ... about to go in a call now","ts":"1462801889.001388"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1462801917.001389"},{"type":"message","user":"U0XR6J961","text":"so many calls","ts":"1462801948.001390"},{"type":"message","user":"U0UGH3X7X","text":"or do git logs against <https:\/\/github.com\/tuand27613\/fabric\/tree\/whitelistTest>","attachments":[{"service_name":"GitHub","title":"tuand27613\/fabric","title_link":"https:\/\/github.com\/tuand27613\/fabric\/tree\/whitelistTest","text":"Blockchain fabric code","fallback":"GitHub: tuand27613\/fabric","thumb_url":"https:\/\/avatars1.githubusercontent.com\/u\/11295979?v=3&s=400","from_url":"https:\/\/github.com\/tuand27613\/fabric\/tree\/whitelistTest","thumb_width":400,"thumb_height":400,"id":1}],"ts":"1462801981.001391"},{"type":"message","user":"U0XR6J961","text":"i don't like these loops waiting for an ID","ts":"1462802598.001393"},{"type":"message","user":"U0XR6J961","text":"that's got to work better than that","ts":"1462802605.001394"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XR6J961> - watermarks may introduce another point of instability - and not clear exactly how this would be done","ts":"1462802794.001395"},{"type":"message","user":"U0XR6J961","text":"yea, i mean the watermarks that pbft already uses","ts":"1462802809.001396"},{"type":"message","user":"U0XR6J961","text":"they already pace the number of pbft requests that can be in flight at any given time","ts":"1462802831.001397"},{"type":"message","user":"U0Y14MWA2","text":"as we count from checkpoint to chekpoint in a static way - with the above we would have what I see as a simpler solution","ts":"1462802837.001398"},{"type":"message","user":"U0Y14MWA2","text":"indeed they do - but I see this as a root of an issue and you see it as a solution :simple_smile:","ts":"1462802864.001399"},{"type":"message","user":"U0XR6J961","text":"i don't know if counting between checkpoints helps either","ts":"1462802933.001400"},{"type":"message","user":"U0XR6J961","text":"example:","ts":"1462802934.001401"},{"type":"message","user":"U0XR6J961","text":"i didn't execute to a point yet that will produce a checkpoint","ts":"1462802958.001402"},{"type":"message","user":"U0XR6J961","text":"i get a request from the primary","ts":"1462802968.001403"},{"type":"message","user":"U0Y14MWA2","text":"the idea goes like this","ts":"1462802982.001404"},{"type":"message","user":"U0XR6J961","text":"well, pre-prepare, beyond the checkpoint","ts":"1462802984.001405"},{"type":"message","user":"U0Y14MWA2","text":"you execute batches from 1 to CHK and then from CHK+1 to 2*CHK","edited":{"user":"U0Y14MWA2","ts":"1462803096.000000"},"ts":"1462803003.001406"},{"type":"message","user":"U0Y14MWA2","text":"it does not matter when you execute","ts":"1462803015.001407"},{"type":"message","user":"U0Y14MWA2","text":"you just allow a param*CHK requests from a given replica in between any two checkpoints","ts":"1462803038.001408"},{"type":"message","user":"U0Y14MWA2","text":"param could be as well &lt;1","ts":"1462803049.001409"},{"type":"message","user":"U0Y14MWA2","text":"it is certainly &lt;= batchsize :simple_smile:","ts":"1462803061.001410"},{"type":"message","user":"U0XR6J961","text":"hmm","ts":"1462803136.001412"},{"type":"message","user":"U0XR6J961","text":"well we have to allow at least CHK requests","ts":"1462803145.001413"},{"type":"message","user":"U0Y14MWA2","text":"why?","ts":"1462803153.001414"},{"type":"message","user":"U0XR6J961","text":"so that if only one replica is injecting requests, and none of the other replicas want to inject requests","ts":"1462803164.001415"},{"type":"message","user":"U0XR6J961","text":"that the network can progress","ts":"1462803168.001416"},{"type":"message","user":"U0Y14MWA2","text":"aha","ts":"1462803181.001417"},{"type":"message","user":"U0Y14MWA2","text":"good catch","ts":"1462803183.001418"},{"type":"message","user":"U0XR6J961","text":"also:","ts":"1462803199.001419"},{"type":"message","user":"U0XR6J961","text":"how does this interact with batching","ts":"1462803208.001420"},{"type":"message","user":"U0Y14MWA2","text":"but with that then the approach does not work at all, since you need param = batchsize","ts":"1462803211.001421"},{"type":"message","user":"U0XR6J961","text":"maybe we shouldn't care about this at all?","ts":"1462803219.001422"},{"type":"message","user":"U0XR6J961","text":"i mean the byzantine part","ts":"1462803228.001423"},{"type":"message","user":"U0XR6J961","text":"and only care about our own performance","ts":"1462803238.001424"},{"type":"message","user":"U0XR6J961","text":"after all, the goal is to locally supply information so that the frontend can reject new requests","ts":"1462803257.001425"},{"type":"message","user":"U0XR6J961","text":"what we need is a way to pace ourselves, without overloading the primary","ts":"1462803298.001426"},{"type":"message","user":"U0XR6J961","text":"because if the primary (assembling batches) is overloaded, then we start complaining","ts":"1462803317.001427"},{"type":"message","user":"U0XR6J961","text":"we do a view change, but nothing will change","ts":"1462803324.001428"},{"type":"message","user":"U0XR6J961","text":"tuand: i don't like that writing whitelist to random file at all","ts":"1462803467.001429"},{"type":"message","user":"U0XR6J961","text":"not the right way of doing things","ts":"1462803475.001430"},{"type":"message","user":"U0UGH3X7X","text":"yes, that writing to file was something while we wait for system chaincode","ts":"1462805724.001431"},{"type":"message","user":"U0UGH3X7X","text":"i think #830 but i need to check","ts":"1462805737.001432"},{"type":"message","user":"U0ULK2JPP","text":"so <@U0XR6J961>, the whitelist is primarily what we need the sys CC for ?","ts":"1462805803.001433"},{"type":"message","user":"U0XR6J961","text":"muralisr: and other changes in the consensus configuration","ts":"1462809187.001434"},{"type":"message","user":"U0XR6J961","text":"i.e. if you figure out that performance is unsatisfactory, and you want to increase the batch size, etc.","ts":"1462809220.001435"},{"type":"message","user":"U0ULK2JPP","text":"I see","ts":"1462810352.001436"},{"type":"message","user":"U0ULK2JPP","text":"so some of it _can_ be dynamically adjusted","ts":"1462810385.001437"},{"type":"message","user":"U0XR6J961","text":"all of it, basically","ts":"1462811233.001438"},{"user":"U17BRDHPG","type":"message","subtype":"channel_join","text":"<@U17BRDHPG|jeroiraz> has joined the channel","ts":"1462822668.001439"},{"user":"U0N0GDVJ5","type":"message","subtype":"channel_join","text":"<@U0N0GDVJ5|nick> has joined the channel","ts":"1462847536.001440"},{"type":"message","subtype":"file_share","text":"<@U0UGH3X7X|tuand> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/tuand\/F17KLN3DY\/view-change.zip|view-change.zip> and commented: now why would the peers decide to to view-change so quickly and so frequently ?  Also, in peer4.log, connections from &lt;nil&gt; ?  and at end of  peer4.log, note the attempts at state transfer ?","file":{"id":"F17KLN3DY","created":1462890482,"timestamp":1462890482,"name":"view-change.zip","title":"view-change.zip","mimetype":"application\/zip","filetype":"zip","pretty_type":"Zip","user":"U0UGH3X7X","editable":false,"size":150803,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F17KLN3DY\/view-change.zip?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F17KLN3DY\/download\/view-change.zip?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/tuand\/F17KLN3DY\/view-change.zip","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F17KLN3DY-43f900bde1","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":1,"initial_comment":{"id":"Fc17K7UYEL","created":1462890482,"timestamp":1462890482,"user":"U0UGH3X7X","is_intro":true,"comment":"now why would the peers decide to to view-change so quickly and so frequently ?  Also, in peer4.log, connections from &lt;nil&gt; ?  and at end of  peer4.log, note the attempts at state transfer ?","channel":"C0Z4NBUN6"}},"user":"U0UGH3X7X","upload":true,"display_as_bot":false,"username":"<@U0UGH3X7X|tuand>","bot_id":null,"ts":"1462890482.001441"},{"type":"message","user":"U0UGH3X7X","text":"I've asked them to turn on debug logging level","ts":"1462890510.001442"},{"type":"message","user":"U0XPR4NP4","text":"So, state transfer is horribly broken at the moment","ts":"1462890561.001443"},{"type":"message","user":"U0XPR4NP4","text":"And, assuming it gets triggered a few times it will certainly put the network into a weird state where it constantly changes views,","ts":"1462890636.001444"},{"type":"message","user":"U0XPR4NP4","text":"Most of the logic was lost when the executor was removed, and the tests became largely invalid","ts":"1462890688.001445"},{"type":"message","user":"U0XPR4NP4","text":"I'll try to submit something to patch it up later today, but still wrestling with how to fix it","ts":"1462890714.001446"},{"type":"message","user":"U0UGH3X7X","text":"i think this is from a commit late friday","ts":"1462890718.001447"},{"type":"message","user":"U0XPR4NP4","text":"That would have contained the broken state transfer, I think","ts":"1462890772.001448"},{"type":"message","user":"U0UGH3X7X","text":"first thing I'm scratching my head about is the view changes seem to happen right after peer startup   ... will have to see if debug logs show anything right after startup","ts":"1462890831.001449"},{"type":"message","user":"U0UGH3X7X","text":"and of course , all behave tests ran fine for me friday till today and i run this app fine on friday","ts":"1462890934.001450"},{"type":"message","user":"U0XR6J961","text":"oh i broke it?","ts":"1462892080.001451"},{"type":"message","user":"U0XR6J961","text":"i didn't realize","ts":"1462892082.001452"},{"type":"message","user":"U0XPR4NP4","text":"Yes, `Initiate` is called only during construction of the helper, so once statetransfer completes once, it will never execute again.","ts":"1462892233.001453"},{"type":"message","user":"U0XPR4NP4","text":"Similarly, the mock tests were changed to bypass the statetransfer code entirely, and used generated blocks, rather than copying them from other peers","ts":"1462892274.001454"},{"type":"message","user":"U0XPR4NP4","text":"I see what your assumptions were now (they've actually made splitting the statetransfer tests out much easier) and I'm working to make them true, but undecided how to handle everything yet.","ts":"1462892347.001455"},{"type":"message","user":"U0XR6J961","text":"oh!","ts":"1462892407.001456"},{"type":"message","user":"U0XR6J961","text":"i didn't realize that this was the usage pattern","ts":"1462892418.001457"},{"type":"message","user":"U0XR6J961","text":"i've been terrible at not commenting interfaces - we need to fix this","ts":"1462892432.001458"},{"type":"message","user":"U0XR6J961","text":"yea i wanted to figure out how to copy blocks from other peers - but I didn't know how","ts":"1462892472.001459"},{"type":"message","user":"U0XPR4NP4","text":"We seem to be enforcing the go vet \/ golint on PRs now, so I think they will get cleaned up","ts":"1462892473.001460"},{"type":"message","user":"U0XR6J961","text":"i think overall, it may be a good idea to limit our tests as much as possible","ts":"1462892488.001461"},{"type":"message","user":"U0XR6J961","text":"i.e. if it can be done with a single peer, do it with a single peer","ts":"1462892502.001462"},{"type":"message","user":"U0XPR4NP4","text":"Take a look at <https:\/\/github.com\/hyperledger\/fabric\/pull\/1423>","attachments":[{"service_name":"GitHub","title":"Split statetransfer tests from obcpbft by jyellick \u00b7 Pull Request #1423 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1423","text":"Description This changeset splits the common infrastructure between state transfer and PBFT in two, and moves the statetransfer tests into the statetransfer package. This continues the work begun...","fallback":"GitHub: Split statetransfer tests from obcpbft by jyellick \u00b7 Pull Request #1423 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1423","thumb_width":420,"thumb_height":420,"id":1}],"ts":"1462892505.001463"},{"type":"message","user":"U0XR6J961","text":"instead of creating a network","ts":"1462892508.001465"},{"type":"message","user":"U0XPR4NP4","text":"It's hard to see in the diff, really, it should be compared against <https:\/\/github.com\/hyperledger\/fabric\/pull\/1416>","attachments":[{"service_name":"GitHub","title":"Remove helper dependencies from statetransfer by jyellick \u00b7 Pull Request #1416 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1416","text":"This is the first of several PRs decoupling statetransfer from consensus. Description State transfer needs to be moved from consensus\/statetransfer to core\/peer\/statetransfer. This first changes...","fallback":"GitHub: Remove helper dependencies from statetransfer by jyellick \u00b7 Pull Request #1416 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1416","thumb_width":420,"thumb_height":420,"id":1}],"ts":"1462892522.001466"},{"type":"message","user":"U0XPR4NP4","text":"But basically, this rips out the vast majority of the mock ledger, moves it to state transfer, and then uses a much simpler mock ledger for pbft, I think it's an improvement.","ts":"1462892546.001468"},{"type":"message","user":"U0XPR4NP4","text":"(It's also necessary in order to get the statetransfer tests out of obcpbft)","ts":"1462892559.001469"},{"type":"message","user":"U0XR6J961","text":"i saw your other patch - i was a bit confused that sheehan wanted documentation for lines you didn't even touch","ts":"1462892569.001470"},{"type":"message","user":"U0XR6J961","text":"great","ts":"1462892580.001471"},{"type":"message","user":"U0XPR4NP4","text":"Yeah, I added them, I guess they were visible in the diff, so, they became my responsibility","ts":"1462892589.001472"},{"type":"message","user":"U0XR6J961","text":"let me know if there is anything i can do - otherwise i'll just create documentation commits and go vet stuff","ts":"1462892634.001473"},{"type":"message","user":"U0XR6J961","text":"maybe if we don't combine the \"stack\" into one interface, but pass many separate interfaces, we can also simplify each of those interfaces","ts":"1462892681.001474"},{"type":"message","user":"U0XR6J961","text":"ideally we'd get rid of the helper and just hand in the ledger, for example","ts":"1462892701.001475"},{"type":"message","user":"U0XPR4NP4","text":"So maybe I can get your input on how to fix the `helper.go` statetransfer usage.  The usage pattern for statetransfer was designed as follows:\n\nDetect state transfer required\nCall `Initiate`\nCall `AddTarget` feeding in potential hashes as they become available\nReceive callback indicating `Finished`","ts":"1462892703.001476"},{"type":"message","user":"U0XR6J961","text":"let me have a look","ts":"1462892722.001477"},{"type":"message","user":"U0XR6J961","text":"oh you have to call finished?","ts":"1462892753.001478"},{"type":"message","user":"U0XPR4NP4","text":"That's a callback","ts":"1462892766.001479"},{"type":"message","user":"U0XPR4NP4","text":"The reason why the usage is a little messy, is because the underlying ledger infrastructure gives us no guarantee that a particular target is reachable","ts":"1462892769.001480"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1462892776.001481"},{"type":"message","user":"U0XPR4NP4","text":"Otherwise it would simplify things immensely","ts":"1462892792.001482"},{"type":"message","user":"U0XR6J961","text":"what is the relation between `Completed` and `Finished`?","ts":"1462892792.001483"},{"type":"message","user":"U0XPR4NP4","text":"Oops, I mispoke, out of memory","ts":"1462892821.001484"},{"type":"message","user":"U0XR6J961","text":"ah the same","ts":"1462892825.001485"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1462892828.001486"},{"type":"message","user":"U0XPR4NP4","text":"You can see the interface doc:\n\n```\n\/\/ Listener is an interface which allows for other modules to register to receive events about the progress of state transfer\ntype Listener interface {\n        Initiated()                                                   \/\/ Called when the state transfer thread starts a new state transfer\n        Errored(uint64, []byte, []*protos.PeerID, interface{}, error) \/\/ Called when an error is encountered during state transfer, only the error is guaranteed to be set, other fields will be set on a best effort basis\n        Completed(uint64, []byte, []*protos.PeerID, interface{})      \/\/ Called when the state transfer is completed\n}\n```","ts":"1462892829.001487"},{"type":"message","user":"U0XR6J961","text":"can we just call `Initiated` again from `Completed`?","ts":"1462892851.001488"},{"type":"message","user":"U0XPR4NP4","text":"So, the problem is the race, and why `AddTarget` does not implicitly call `Initiate`","ts":"1462892876.001489"},{"type":"message","user":"U0TFEHX8E","text":"<@U0XR6J961>: <@U0XPR4NP4> who should I track down for documenting public functions in consensus?","ts":"1462892925.001490"},{"type":"message","user":"U0XR6J961","text":"sheehan: oh for sure it is us","ts":"1462892936.001491"},{"type":"message","user":"U0XR6J961","text":"sheehan: just that jyellick's patch didn't even touch these interfaces :simple_smile:","ts":"1462892950.001492"},{"type":"message","user":"U0XR6J961","text":"i'll be working on it","ts":"1462892957.001493"},{"type":"message","user":"U0TFEHX8E","text":"yeah, I realize. Thought it would be easy to try to fix up as we go","ts":"1462892964.001494"},{"type":"message","user":"U0XR6J961","text":"but we're trying to severely cut down the interfaces exposed","ts":"1462892974.001495"},{"type":"message","user":"U0TFEHX8E","text":"but as long as someone is working on it, that\u2019s fine","ts":"1462892974.001496"},{"type":"message","user":"U0XR6J961","text":"jyellick: what race?","ts":"1462893012.001497"},{"type":"message","user":"U0XR6J961","text":"jyellick: maybe we need to move the state transfer interaction into the plugin statemachine","ts":"1462893040.001498"},{"type":"message","user":"U0XR6J961","text":"so that no races will happen","ts":"1462893046.001499"},{"type":"message","user":"U0XPR4NP4","text":"Essentially, imagine the following:\n\nt1: Calls initiate\nt1: Adds target\nt2: Calls Completed\nt1: Adds target (implicitly calls initiate)\nt1: receives Completed\n\nt1 now believes that state transfer is not occurring","ts":"1462893121.001500"},{"type":"message","user":"U0XR6J961","text":"hmm","ts":"1462893160.001501"},{"type":"message","user":"U0XR6J961","text":"yea, that race will always exist","ts":"1462893176.001502"},{"type":"message","user":"U0XR6J961","text":"well it gets back its interface","ts":"1462893203.001503"},{"type":"message","user":"U0XR6J961","text":"so it can tell that the completed refers to a different stage","ts":"1462893220.001504"},{"type":"message","user":"U0XR6J961","text":"the question is, where do we put the interlock and retry","ts":"1462893235.001505"},{"type":"message","user":"U0XR6J961","text":"it has to be in t1","ts":"1462893262.001506"},{"type":"message","user":"U0XPR4NP4","text":"It can tell the completed came from a different target, but that's also okay, this would also be a fine scenario:\n\nt1: Calls initiate\nt1: Adds target A\nt1: Adds target B\nt2: Calls Completed (to target A)\nt1: receives Completed","ts":"1462893419.001507"},{"type":"message","user":"U0XPR4NP4","text":"The guarantee made by state transfer is that one of the targets will be reached, not the last one added","ts":"1462893459.001508"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1462893470.001509"},{"type":"message","user":"U0XR6J961","text":"so ideally i'd prefer the helper not to do any mediation in the state transfer, and have a state transfer object passed to the plugin","ts":"1462893594.001510"},{"type":"message","user":"U0XR6J961","text":"and for tests we replace this with something simple (as we have anyways right now)","ts":"1462893622.001511"},{"type":"message","user":"U0XR6J961","text":"and then the plugin needs to figure out whether to initiate + addtarget again","ts":"1462893645.001512"},{"type":"message","user":"U0XPR4NP4","text":"So the executor eliminate the race by having the initiating thread block until completion.  I think that might be the most direct way to fix this.  Simply have a go routine who's responsibility it is to interact with state transfer, when that goroutine is busy (via say a default on a select) the pbft thread would be invoking `AddTarget`, when the thread isn't busy, it would grab the target, and invoke `Initiate`, then `AddTarget`.","ts":"1462894053.001513"},{"type":"message","user":"U0XPR4NP4","text":"Eh, maybe not, not sure that fixes this.","ts":"1462894121.001514"},{"type":"message","user":"U0XPR4NP4","text":"Double calling `Initiate` is a problem, but could even be solved with a mutex, the problem is knowing whether or not statetransfer is executing in PBFT.  Maybe the key would be to listen on the `Initiated` callback to keep track.","ts":"1462894201.001515"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: What would you think of eliminating `Initiate()` as a call, having `AddTarget` implicitly initiate, then require the caller to listen for the `Initiated` and `Completed` events to figure out what's going on?","ts":"1462894323.001516"},{"type":"message","user":"U0XR6J961","text":"hmmm","ts":"1462894387.001517"},{"type":"message","user":"U0XR6J961","text":"initiated is not used at all","ts":"1462894400.001518"},{"type":"message","user":"U0XPR4NP4","text":"Right, I added it because it seemed like valuable information, but never had the need to consume it.","ts":"1462894436.001519"},{"type":"message","user":"U0XR6J961","text":"so the race is really:","ts":"1462894441.001520"},{"type":"message","user":"U0XR6J961","text":"addtarget, completed sent, addtarget, completed arrives.  actually we should keep waiting","ts":"1462894472.001521"},{"type":"message","user":"U0XR6J961","text":"that has to be handled in pbft","ts":"1462894491.001522"},{"type":"message","user":"U0XR6J961","text":"in the statemachine","ts":"1462894499.001523"},{"type":"message","user":"U0XPR4NP4","text":"Yes, assuming addtarget now implicitly calls initiate","ts":"1462894502.001524"},{"type":"message","user":"U0XR6J961","text":"right","ts":"1462894511.001525"},{"type":"message","user":"U0XR6J961","text":"i think that makes sense to do","ts":"1462894517.001526"},{"type":"message","user":"U0XPR4NP4","text":"Okay, I like it, I'll get to work on coding it up","ts":"1462894530.001527"},{"type":"message","user":"U0XR6J961","text":"cool!","ts":"1462894534.001528"},{"type":"message","user":"U0XR6J961","text":"let me know what i can do","ts":"1462894537.001529"},{"type":"message","user":"U0XPR4NP4","text":"Will do, once I've got the code together, I'll post it here for review","ts":"1462894553.001530"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: <https:\/\/github.com\/hyperledger\/fabric\/pull\/1445> Here's the reworking of the statetransfer logic","attachments":[{"service_name":"GitHub","title":"Fix statetransfer failure on back to back execution by jyellick \u00b7 Pull Request #1445 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1445","text":"Description This changeset adds a test case for multiply invoked statetransfer, as well as fixes the logic of state transfer in the pbft test framework. It also modifies the behavior of state tra...","fallback":"GitHub: Fix statetransfer failure on back to back execution by jyellick \u00b7 Pull Request #1445 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1445","thumb_width":420,"thumb_height":420,"id":1}],"ts":"1462979521.001531"},{"type":"message","user":"U0XR6J961","text":"great","ts":"1462979643.001533"},{"user":"U1802P5D3","type":"message","subtype":"channel_join","text":"<@U1802P5D3|jianzhang98> has joined the channel","ts":"1462983719.001534"},{"type":"message","user":"U0UGH3X7X","text":"so #756  ... how it's done right now is that we put the PeerIDs in a list, sort by PeerID.name  and use the index of the sorted list as the replica id","ts":"1463013192.001535"},{"type":"message","user":"U0UGH3X7X","text":"we can't create the consenter until we have a list of the N validating peers  since we won't have the correct id until the list is complete","ts":"1463013294.001536"},{"type":"message","user":"U0UGH3X7X","text":"so, when we do `newObcXXXX`, we wait for the list to be completed before we get our own id and finish up `newPbftCore` etc ...","ts":"1463013384.001537"},{"type":"message","user":"U0UGH3X7X","text":"i do this by using a channel,  `newObcXXX` waits on the channel,   over in Peer,  when the list is complete, i  put a bool on the channel","ts":"1463013474.001538"},{"type":"message","user":"U0UGH3X7X","text":"the question now is, how do i make the engine wait until `obcXXXX` is ready to receiveMsg ?","ts":"1463013613.001539"},{"type":"message","user":"U0UGH3X7X","text":"i can wait on another channel but that means it's one more method added to consenter interface ?","ts":"1463013666.001540"},{"type":"message","user":"U0XPR4NP4","text":"<@U0UGH3X7X>: Does the value of the `bool` matter? In general, if you are using channels to communicate an event that has no value, I think the accepted go practice is to use a `chan struct{}`, and then simply write to it with a `ch&lt;-struct{}{}`.","ts":"1463014171.001541"},{"type":"message","user":"U0UGH3X7X","text":"the value doesn't matter ... it's just to wake up the other end","ts":"1463014208.001542"},{"type":"message","user":"U0XPR4NP4","text":"I'd vote for the `struct{}{}` approach then, still trying to process the rest of your message","ts":"1463014234.001543"},{"type":"message","user":"U0XPR4NP4","text":"So, I think it's also important that you remember we need to support the `N=1` case","ts":"1463014293.001544"},{"type":"message","user":"U0XPR4NP4","text":"Where you can't expect any `handler.go` activity to speak of","ts":"1463014318.001545"},{"type":"message","user":"U0UGH3X7X","text":"good point,  i'll have to handle that when i initialize the list ( in `newPeerWithEngine` right now)","ts":"1463014418.001546"},{"type":"message","user":"U0XPR4NP4","text":"So, in order to keep things general, I think that the `Consenter` interface should maybe have PeerJoined` and `PeerLeft` calls.","ts":"1463014573.001547"},{"type":"message","user":"U0XPR4NP4","text":"It's making the consensus interface slightly more complex, but I think it's easy to ignore them if you don't care","ts":"1463014649.001548"},{"type":"message","user":"U0XPR4NP4","text":"(Just like the state transfer callbacks that were added)","ts":"1463014661.001549"},{"type":"message","user":"U0UGH3X7X","text":"ya ... along the same lines, i was thinking Consenter interface would have a Ready()  that the engine could wait on before doing RecvMesg()","ts":"1463014706.001550"},{"type":"message","user":"U0XPR4NP4","text":"Well, so I think I wouldn't make the engine wait","ts":"1463014719.001551"},{"type":"message","user":"U0XPR4NP4","text":"I would actually push the logic into the consenter","ts":"1463014730.001552"},{"type":"message","user":"U0XPR4NP4","text":"Simply have the plugin thread not read from the other end of the message channel until it is satisfied that it's connected to enough peers","ts":"1463014753.001553"},{"type":"message","user":"U0XPR4NP4","text":"I think <@U0XR6J961> agreed on the phone that the right place for this is definitely inside PBFT, the fact that it's been pushed towards the helper\/handler is unfortunate, and if we have an opportunity to push it back, we should.","ts":"1463014791.001554"},{"type":"message","user":"U0UGH3X7X","text":"not exactly how we summarized it on the issue but i like that better. I can wait in the `obcXXXX.RecvMsg()` method","ts":"1463014955.001555"},{"type":"message","user":"U0XPR4NP4","text":"The way I would envision it, would be that prior to entering into the primary event loop, the thread would wait for the 'whitelist available' event (as it would only occur once) then enter into the normal event loop, which would handle the events from `RecvMsg`","ts":"1463028847.001556"},{"user":"U17F0A68Y","type":"message","subtype":"channel_join","text":"<@U17F0A68Y|lhy555> has joined the channel","ts":"1463033954.001557"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: I'm trying to understand this complaints stuff, trying to fix that failing test referenced in <#C11SL9YDV>","ts":"1463059887.001558"},{"type":"message","user":"U0XPR4NP4","text":"In obcbatch, if we receive a complaint, first we check if we are the primary, and if so, go do some stuff and return","ts":"1463059937.001559"},{"type":"message","user":"U0XPR4NP4","text":"If we are no the primary, we dedup, then `submitToLeader`, then for some reason check again if we are the primary, which I don't see how we can be? Then if not, we unicast the request to the primary","ts":"1463060037.001560"},{"type":"message","user":"U0XPR4NP4","text":"Then, eventually if a complaint timer expires, we'll get an event, and assuming the view is active, we'll send the view change request.","ts":"1463060264.001561"},{"type":"message","user":"U0UGH3X7X","text":"I made an interim commit <https:\/\/github.com\/tuand27613\/fabric\/tree\/whitelistTest>   ... let's see how the discussion goes","attachments":[{"service_name":"GitHub","title":"tuand27613\/fabric","title_link":"https:\/\/github.com\/tuand27613\/fabric\/tree\/whitelistTest","text":"Blockchain fabric code","fallback":"GitHub: tuand27613\/fabric","thumb_url":"https:\/\/avatars1.githubusercontent.com\/u\/11295979?v=3&s=400","from_url":"https:\/\/github.com\/tuand27613\/fabric\/tree\/whitelistTest","thumb_width":400,"thumb_height":400,"id":1}],"ts":"1463062045.001562"},{"type":"message","user":"U0UGH3X7X","text":"now to see what all this make stuff is about","ts":"1463062072.001564"},{"type":"message","user":"U0XR6J961","text":"jyellick: oh i have a patch","ts":"1463063557.001565"},{"type":"message","user":"U0XR6J961","text":"jyellick: the problem is that i can't run my behave tests","ts":"1463063568.001566"},{"type":"message","user":"U0XPR4NP4","text":"Oh, so do I...","ts":"1463063570.001567"},{"type":"message","user":"U0XR6J961","text":"good","ts":"1463063573.001568"},{"type":"message","user":"U0XR6J961","text":"i just fixed the test","ts":"1463063576.001569"},{"type":"message","user":"U0XR6J961","text":"what do you have?","ts":"1463063580.001570"},{"type":"message","user":"U0XR6J961","text":"sorry, i keep being distracted - gf broke her foot and needs help around the house","ts":"1463063622.001571"},{"type":"message","user":"U0XPR4NP4","text":"Ouch, definitely take care of that, far more important","ts":"1463063650.001572"},{"type":"message","user":"U0XPR4NP4","text":"There are two pieces, was going to run past you for review, one is, I think the timer in the custodian is not being handled properly, because I was seeing multiple view changes sent back to back (same millisecond)","ts":"1463063680.001573"},{"type":"message","user":"U0XPR4NP4","text":"The other piece was that the PBFT view change was being invoked on the batch thread, rather than being injected onto the PBFT one","ts":"1463063709.001574"},{"type":"message","user":"U0XR6J961","text":"oh wow","ts":"1463063767.001575"},{"type":"message","user":"U0XR6J961","text":"so many bugs :confused:","ts":"1463063771.001576"},{"type":"message","user":"U0XR6J961","text":"i'm sorry","ts":"1463063775.001577"},{"type":"message","user":"U0XR6J961","text":"all this parallelism","ts":"1463063779.001578"},{"type":"message","user":"U0XR6J961","text":"i thought i had tracked it down to replica 0 pbft expecting a request which never gets executed because the two requests are being reordered somehow","ts":"1463063853.001579"},{"type":"message","user":"U0XPR4NP4","text":"Maybe you can help me understand this flow.  When a request(s) that is in custody expires, it makes its callback into the consumer, which sends a view change","ts":"1463063944.001580"},{"type":"message","user":"U0XPR4NP4","text":"What happens to the requests which remain in custody? It seems like they should all be submitted to the new primary, and their deadlines reset?","ts":"1463063998.001581"},{"type":"message","user":"U0XPR4NP4","text":"I see that `Restart` is called out of `viewChange`, but it seems like we need to disable the custody timers after we request the view change, before the view actually changes","ts":"1463064132.001582"},{"type":"message","user":"U0XR6J961","text":"yea that is sort of an issue","ts":"1463064940.001583"},{"type":"message","user":"U0XR6J961","text":"but does it really matter?","ts":"1463064955.001584"},{"type":"message","user":"U0XR6J961","text":"ah now with two threads, we could actually expire the custody after pbft did the view change, but before we received the view change event","ts":"1463065018.001585"},{"type":"message","user":"U0XR6J961","text":"this all needs to run in one thread","ts":"1463065024.001586"},{"type":"message","user":"U0XPR4NP4","text":"It would certainly make things easier.","ts":"1463065584.001587"},{"type":"message","user":"U0XR6J961","text":"frustrating races","ts":"1463066769.001588"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: Another bug, `viewChange()` in batch modifies batch internal state, then tries to submit stuff to PBFT if the leader, which is on the PBFT thread, which can cause a deadlock, moving this to be an event","ts":"1463067962.001589"},{"user":"U1296EA0M","type":"message","subtype":"channel_join","text":"<@U1296EA0M|maro> has joined the channel","ts":"1463069730.001590"},{"type":"message","user":"U0XR6J961","text":"maybe we need more real mock tests?","ts":"1463071812.001591"},{"type":"message","user":"U0KM61BCP","text":"real mock \u2026 hmmm","ts":"1463071831.001592"},{"type":"message","user":"U0XR6J961","text":"where we test things really separate from each other","ts":"1463071831.001593"},{"type":"message","user":"U0XR6J961","text":"cbf: you know, right now we do sort of integration tests within consensus","ts":"1463071852.001594"},{"type":"message","user":"U0XR6J961","text":"we create whole virtual networks, etc.","ts":"1463071862.001595"},{"type":"message","user":"U0XR6J961","text":"instead of just testing for one specific microscopic behavior","ts":"1463071875.001596"},{"type":"message","user":"U0KM61BCP","text":"yes, but you could write more unit tests that mock the setup and just test the function","ts":"1463071886.001597"},{"type":"message","user":"U0XR6J961","text":"yes that's what i mean","ts":"1463071896.001598"},{"type":"message","user":"U0KM61BCP","text":"exactly what we need because the setup etc is the part that takes time","ts":"1463071899.001599"},{"type":"message","user":"U0XR6J961","text":"oh i'm talking about the unit tests","ts":"1463071914.001600"},{"type":"message","user":"U0KM61BCP","text":"I was just making fun of the juxtaposition of real and mock","ts":"1463071916.001601"},{"type":"message","user":"U0KM61BCP","text":"our unit tests are really integration tests","ts":"1463071929.001602"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1463071937.001603"},{"type":"message","user":"U0KM61BCP","text":"I have been trying to make this case for a while","ts":"1463071949.001604"},{"type":"message","user":"U0XR6J961","text":"go is more difficult to mock than other languages","ts":"1463071966.001605"},{"type":"message","user":"U0XR6J961","text":"at least it feels that way","ts":"1463071987.001606"},{"type":"message","user":"U0KM61BCP","text":"ginko can handle because it is go","ts":"1463072002.001607"},{"type":"message","user":"U0KM61BCP","text":"I\u2019ve been discussing this on and off with Jeff","ts":"1463072028.001608"},{"type":"message","user":"U0KM61BCP","text":"certainly it is more difficult when your test infra is python and the target is go","ts":"1463072081.001609"},{"type":"message","user":"U0XR6J961","text":"we need something that can generate mocks","ts":"1463072180.001610"},{"type":"message","user":"U0KM61BCP","text":"<https:\/\/onsi.github.io\/ginkgo\/>","ts":"1463072300.001611"},{"type":"message","user":"U0XR6J961","text":"yea i had a quick look, didn't find anything about mocks","ts":"1463072832.001612"},{"type":"message","user":"U0XR6J961","text":"`Ginkgo does not provide a mocking\/stubbing framework. It\u2019s the author\u2019s opinion that mocks and stubs can be avoided completely by embracing dependency injection and always injecting Go interfaces. `","ts":"1463072911.001613"},{"type":"message","user":"U0XR6J961","text":"yea,  i guess we should have that?","ts":"1463072922.001614"},{"type":"message","user":"U0XR6J961","text":"conveniently it completely ignores \"what if i want to check that function X calls function Y of interface Z\"","ts":"1463073162.001615"},{"type":"message","user":"U0KM61BCP","text":"I can hook you up with the author to discuss\u2026 alternately I have a few on my team that are very familiar","ts":"1463073260.001616"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: Why is `currentExec` a pointer? Is it purely to give us an 'unset' value for testing?","edited":{"user":"U0XPR4NP4","ts":"1463078175.000000"},"ts":"1463078111.001617"},{"type":"message","user":"U0XQ35CDD","text":"<@U0UGH3X7X>: <https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1463013613001539> -- can you expand here? everything that you describe in these messages was taken care of in the branch that I had delivered IIRC","attachments":[{"color":"4D394B","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1463013613001539","fallback":"[May 11th, 2016 5:40 PM] tuand: the question now is, how do i make the engine wait until `obcXXXX` is ready to receiveMsg ?","author_subname":"tuand","ts":"1463013613.001539","text":"the question now is, how do i make the engine wait until `obcXXXX` is ready to receiveMsg ?","author_name":"Tuan Dang","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/tuand","author_icon":"https:\/\/avatars.slack-edge.com\/2016-05-01\/39256398483_5bf896c70623b7526e05_48.jpg","mrkdwn_in":["text"],"id":1}],"ts":"1463080679.001619"},{"type":"message","user":"U0XQ35CDD","text":"(I read <@U0XR6J961>'s comments BTW on that thread and I agree with all of them)","ts":"1463080681.001621"},{"type":"message","user":"U0UGH3X7X","text":"so i had to make a few changes  ... write to db instead of to a file  ...  use a channel to wait until we have the whitelist  ... also, we added an engine object to handle talking directly to the local peer instead of grpc","ts":"1463080849.001622"},{"type":"message","user":"U0UGH3X7X","text":"i was trying to see where obcXXXX should wait for the whitelist to complete","ts":"1463080892.001623"},{"type":"message","user":"U0UGH3X7X","text":"but in the end,  waiting on isSufficientlyConnected in RecvMsg seems still the right place","ts":"1463080941.001624"},{"type":"message","user":"U0XPR4NP4","text":"It might work, but my vote would be to put the channel read in front of the `for` loop in `main()`","ts":"1463083677.001625"},{"type":"message","user":"U0XPR4NP4","text":"The whitelisting isn't a message, so, I don't think that's the right place to block for it","ts":"1463083695.001626"},{"type":"message","user":"U0PB67X4K","text":"<@U0XPR4NP4> - quick question - in PBFT, if a peer goes down and later comes back up and joins the network, my assumption would be that it will find that it is out of sync and request a state transfer or in the absence of new transactions during checkpointing this will be discovered.  Correct?","ts":"1463083935.001627"},{"type":"message","user":"U0XPR4NP4","text":"<@U0PB67X4K>: In the absence of transactions, no recovery will happen, recovery is driven by eavesdropping, so there needs to be requests on the network","ts":"1463084094.001628"},{"type":"message","user":"U0XPR4NP4","text":"<https:\/\/github.com\/hyperledger\/fabric\/issues\/1454>","attachments":[{"service_name":"GitHub","title":"Allow non-byzantine replica to always catch up \u00b7 Issue #1454 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/issues\/1454","text":"Description Per the classical PBFT implementation, the network is always able to make progress ordering and processing transactions, and the current PBFT implementation supports this. However, th...","fallback":"GitHub: Allow non-byzantine replica to always catch up \u00b7 Issue #1454 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/issues\/1454","thumb_width":420,"thumb_height":420,"id":1}],"ts":"1463084119.001629"},{"type":"message","user":"U0PB67X4K","text":"okay - so peer goes down, misses N transactions, comes back up and transaction N+1 is invoked.","ts":"1463084203.001631"},{"type":"message","user":"U0XPR4NP4","text":"The specific value of N matters a little here, but in general, no, unless there is some other sort of problem which prevents transaction n+1 from being committed to 2f+1 peers, the freshly restarted peer will not execute it","ts":"1463084301.001632"},{"type":"message","user":"U0PB67X4K","text":"okay - well on a related note, let's say that state transfer does happen.  State transfer is more like a \"bulk\" event rather than transaction processing, correct?  Meaning both the K\/V store and the \"ledger\"  (blocks) are force updated?  Meaning potentially a different path through the code than normal transactions?","ts":"1463084440.001633"},{"type":"message","user":"U0XPR4NP4","text":"That is correct, the normal path is basically `BeginBatchTX\/ExecTX\/CommitTxBatch`, and this modifies the state, and commits a block to the chain.","ts":"1463084481.001634"},{"type":"message","user":"U0XPR4NP4","text":"The state transfer path retrieves blocks from the network, validates them against the valid hash from the consensus checkpointing, and then commits them to the ledger through `PutRawBlock`","ts":"1463084512.001635"},{"type":"message","user":"U0XPR4NP4","text":"Once the blockchain is intact, the state is played forward to be current utilizing the state deltas stores in the DB.  At each step, the state hash is verified against the block has in the chain.","ts":"1463084549.001636"},{"type":"message","user":"U0XPR4NP4","text":"(Under some conditions, such as when the replica is very far behind, it will actually retrieve a fully copy of the state, and a partial copy of the blockchain, then restore the remainder of the chain in the background)","ts":"1463084592.001637"},{"type":"message","user":"U0PB67X4K","text":"gotcha - so basically like bulk database transfer with some checkpointing (i.e. validating the state hash)","ts":"1463084638.001638"},{"type":"message","user":"U0XPR4NP4","text":"Right, a similar idea.  There are some problems with this at the moment, since we store some things like chaincodes on the block which should probably be stored in the state, so it is possible that the partial copy of the blockchain is not good enough.","ts":"1463084699.001639"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ULK2JPP>: might have some insight as to if\/when the chaincodes will move off the block and into the state","ts":"1463084729.001640"},{"type":"message","user":"U0PB67X4K","text":"many thanks","ts":"1463084804.001641"},{"type":"message","user":"U0XPR4NP4","text":"No problem, always happy to help","ts":"1463084849.001642"},{"type":"message","user":"U0XR6J961","text":"jyellick: correct, it's a pointer so that it can be NULL","ts":"1463134485.001643"},{"user":"U18LUM6LR","type":"message","subtype":"channel_join","text":"<@U18LUM6LR|xinxi> has joined the channel","ts":"1463135113.001644"},{"type":"message","user":"U18LUM6LR","text":"Hi guys, I am recently studying the consensus protocol of HyperLedger. If my understanding is correct, PBFT's leaders could suffer from DDoS attacks as they are elected by all nodes so their IP addresses are public.","ts":"1463135241.001645"},{"type":"message","user":"U18LUM6LR","text":"I am wondering how HyperLedger solves this problem?","ts":"1463135254.001646"},{"type":"message","user":"U0XR6J961","text":"the nodes only have to be reachable by each other","ts":"1463135414.001647"},{"type":"message","user":"U0XR6J961","text":"i.e. if you have a 10 node network, you can tolerate 3 byzantine failures.  only those 10 nodes need to be able to talk to each other","ts":"1463135484.001648"},{"type":"message","user":"U0XR6J961","text":"xinxi: does that answer your question?","ts":"1463135499.001649"},{"type":"message","user":"U18LUM6LR","text":"Yeah, that makes sense. But in an open network environment, all the IP addresses including the one of the leader are also exposed to the external environment. Can people schedule a DDoS attack against the leader?","ts":"1463135665.001650"},{"type":"message","user":"U0XR6J961","text":"of course they can","ts":"1463135678.001651"},{"type":"message","user":"U0XR6J961","text":"but you could just filter this, or connect the nodes via a VPN","ts":"1463135703.001652"},{"type":"message","user":"U18LUM6LR","text":"A firewall can surely mitigate the problem to some extend. Actually, Bitcoin miners can also be DDoSed. But the advantage of Bitcoin miners is that within about 8,000 nodes, people don't know which nodes belong to the miners.","ts":"1463135861.001653"},{"type":"message","user":"U18LUM6LR","text":"However,  in PBFT, the IP of the leader is known to everyone, which makes DDoS very easy.","ts":"1463135893.001654"},{"type":"message","user":"U18LUM6LR","text":"Does this make sense to you?","ts":"1463135958.001655"},{"type":"message","user":"U0XR6J961","text":"the pbft nodes can be completely shielded, and run on a private IP range","ts":"1463136038.001656"},{"type":"message","user":"U0XR6J961","text":"and only receive messages from trusted clients (which act as proxies)","ts":"1463136061.001657"},{"type":"message","user":"U18LUM6LR","text":"Then it is running in a protected environment which is not open to the public.","ts":"1463136099.001658"},{"type":"message","user":"U18LUM6LR","text":"So if this is the case, it is good for enterprises to use, not for the some applications like creating a new cryptocurrency?","ts":"1463136168.001659"},{"type":"message","user":"U0XR6J961","text":"you would use pbft for a permissioned network, i.e. participants need to register, etc.","ts":"1463136295.001660"},{"type":"message","user":"U0XR6J961","text":"i don't think this would be a design for a cryptocurrency","ts":"1463136311.001661"},{"type":"message","user":"U18LUM6LR","text":"OK. Thank you for your clear answer.","ts":"1463136385.001662"},{"type":"message","user":"U0XR6J961","text":"i hope it was clear :simple_smile:","ts":"1463136409.001663"},{"type":"message","user":"U18LUM6LR","text":"However, I\u2019ve heard there is some kind of leaderless Byzantine Fault Tolerance protocol.","ts":"1463136409.001664"},{"type":"message","user":"U0XR6J961","text":"there are many different protocols","ts":"1463136427.001665"},{"type":"message","user":"U18LUM6LR","text":"Will that make it better?","ts":"1463136431.001666"},{"type":"message","user":"U0XR6J961","text":"i guess it could address some of your concerns","ts":"1463136453.001667"},{"type":"message","user":"U0XR6J961","text":"but usually you would use a small number of nodes (typically 4-20, most likely never &gt;1000)","ts":"1463136505.001668"},{"type":"message","user":"U0XR6J961","text":"and in that case DoS is easy to mount on all the nodes","ts":"1463136517.001669"},{"type":"message","user":"U18LUM6LR","text":"I see. Now I see the real purpose of hyperledger is an IT infrastructure for enterprises.","ts":"1463136563.001670"},{"type":"message","user":"U18LUM6LR","text":"That\u2019s a pretty good aim.","ts":"1463136591.001671"},{"user":"U15B57S4R","type":"message","subtype":"channel_join","text":"<@U15B57S4R|isidoro.ghezzi> has joined the channel","ts":"1463137603.001672"},{"type":"message","user":"U0KPFAZNF","text":"<@U0XR6J961> <@U0XPR4NP4> are these CI failures consensus related? <https:\/\/travis-ci.org\/hyperledger\/fabric\/builds\/129982579>","ts":"1463148918.001673"},{"type":"message","user":"U0UGH3X7X","text":"i started to read the log and travis restarted ?","ts":"1463149288.001674"},{"type":"message","user":"U0XPR4NP4","text":"<@U0KPFAZNF>: I cannot see the logs, though the `TestBatchCustody` failure is definitely due to consensus","ts":"1463149388.001675"},{"type":"message","user":"U0XR6J961","text":"there is a PR to fix this","ts":"1463149422.001676"},{"type":"message","user":"U0XR6J961","text":"(from me)","ts":"1463149426.001677"},{"type":"message","user":"U0KPFAZNF","text":"<@U0XR6J961>: which #?","ts":"1463155902.001678"},{"type":"message","user":"U0KPFAZNF","text":"<@U0UGH3X7X>: apologies, i restarted the build","ts":"1463156006.001679"},{"type":"message","user":"U0KPFAZNF","text":"<@U0XR6J961>: nevermind, i found it","ts":"1463156110.001680"},{"type":"message","user":"U0KPFAZNF","text":"it wasnt showing up because it was already merged","ts":"1463156116.001681"},{"type":"message","user":"U0XR6J961","text":":simple_smile:","ts":"1463156150.001682"},{"type":"message","user":"U0KM61BCP","text":"<@U0XR6J961>: a number of mock tools for golang here <https:\/\/github.com\/avelino\/awesome-go#testing>","attachments":[{"service_name":"GitHub","title":"avelino\/awesome-go","title_link":"https:\/\/github.com\/avelino\/awesome-go#testing","text":"awesome-go - A curated list of awesome Go frameworks, libraries and software","fallback":"GitHub: avelino\/awesome-go","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/31996?v=3&s=400","from_url":"https:\/\/github.com\/avelino\/awesome-go#testing","thumb_width":300,"thumb_height":300,"id":1}],"ts":"1463340624.001683"},{"user":"U19CHF6LE","type":"message","subtype":"channel_join","text":"<@U19CHF6LE|popldo> has joined the channel","ts":"1463453418.001685"},{"type":"message","user":"U0XR6J961","text":"i just realized that we need to clear our custody store on state transfer","ts":"1463488760.001686"},{"type":"message","user":"U0XR6J961","text":"lots of stale complaints","ts":"1463489277.001687"},{"type":"message","user":"U0XR6J961","text":"i need to fix this","ts":"1463489281.001688"},{"type":"message","user":"U0XR6J961","text":"i had a patch for these stale complaints - rebasing it for master","ts":"1463490706.001689"},{"type":"message","user":"U0XR6J961","text":"also i think we should merge pbft-core and batch","ts":"1463490722.001690","reactions":[{"name":"+1","users":["U0PB67X4K"],"count":1}]},{"type":"message","user":"U0XR6J961","text":"so that we get rid of the race conditions","ts":"1463490727.001691"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I think we really need to kill the pbft plugin concept.  Sieve is de-emphasized, classic is essentially batch=1.  By eliminating the consumer plugin model, it would be easy to have all of PBFT run on a single thread, and eliminate all the nastiness that arises trying to have a batch thread and a PBFT thread.","ts":"1463493762.001692"},{"user":"U17CZFXGU","type":"message","subtype":"channel_join","text":"<@U17CZFXGU|plucena> has joined the channel","ts":"1463496563.001693"},{"type":"message","user":"U0XR6J961","text":"jyellick: i could work on that","ts":"1463503568.001694"},{"type":"message","user":"U0XR6J961","text":"unless we have something more important to tackle","ts":"1463503587.001695"},{"type":"message","user":"U0XPR4NP4","text":"It needs to be done at some point, I thought the idea was to wait until after this sprint, but I don't see any harm in starting it sooner","ts":"1463503629.001696"},{"type":"message","user":"U0XPR4NP4","text":"I think the key will be to do it in small patches","ts":"1463503668.001697"},{"type":"message","user":"U0XR6J961","text":"what's up for this sprint?","ts":"1463503813.001698"},{"type":"message","user":"U0XPR4NP4","text":"Well, I think it's supposed to be a stabilizing sprint","ts":"1463503826.001699"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1463503846.001700"},{"type":"message","user":"U0XR6J961","text":"well, getting rid of race conditions is important","ts":"1463503857.001701"},{"type":"message","user":"U0UGH3X7X","text":"Right . clearing out any bug issues","ts":"1463503865.001702"},{"type":"message","user":"U0XR6J961","text":"another thing is catching up replicas","ts":"1463503868.001703"},{"type":"message","user":"U0XR6J961","text":"yea i need to drop stale complaints","ts":"1463503879.001704"},{"type":"message","user":"U0XPR4NP4","text":"Actually, if you wanted, I was planning to work on <https:\/\/github.com\/hyperledger\/fabric\/issues\/1454>, but you could and I could focus on some state transfer stuff","attachments":[{"service_name":"GitHub","title":"Allow non-byzantine replica to always catch up \u00b7 Issue #1454 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/issues\/1454","text":"Description Per the classical PBFT implementation, the network is always able to make progress ordering and processing transactions, and the current PBFT implementation supports this. However, th...","fallback":"GitHub: Allow non-byzantine replica to always catch up \u00b7 Issue #1454 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/issues\/1454","thumb_width":420,"thumb_height":420,"id":1}],"ts":"1463503885.001705"},{"type":"message","user":"U0XR6J961","text":"yes, let's do that","ts":"1463503896.001707"},{"type":"message","user":"U0XPR4NP4","text":"Sounds good.  Start with the periodic null requests?","ts":"1463503934.001708"},{"type":"message","user":"U0XPR4NP4","text":"What do you think?\n\nPR1, add periodic null requests\nPR2, have backups detect lack of periodic requests, to initiate view change\nPR3, eavesdrop on view","ts":"1463504008.001709"},{"type":"message","user":"U0UGH3X7X","text":"Simon could you look at #1466?","ts":"1463504010.001710"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1463518134.001711"},{"type":"message","user":"U0XR6J961","text":"sorry, back","ts":"1463518136.001712"},{"user":"U19MP2N67","type":"message","subtype":"channel_join","text":"<@U19MP2N67|rupendradhillon> has joined the channel","ts":"1463547242.001713"},{"user":"U19PX4G4T","inviter":"U0KM0C3M3","type":"message","subtype":"channel_join","text":"<@U19PX4G4T|allanpark> has joined the channel","ts":"1463571091.001714"},{"type":"message","user":"U0XR6J961","text":"jyellick: are you around?","ts":"1463587979.001715"},{"user":"U0UFDAS91","type":"message","subtype":"channel_leave","text":"<@U0UFDAS91|christophera> has left the channel","ts":"1463616068.001716"},{"user":"U115YGEH1","type":"message","subtype":"channel_join","text":"<@U115YGEH1|mtakemiya> has joined the channel","ts":"1463646569.001717"},{"type":"message","user":"U0XR6J961","text":"jyellick: you around?","ts":"1463660684.001718"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> I am now ","ts":"1463663981.001719"},{"type":"message","user":"U0XR6J961","text":"hi","ts":"1463663986.001720"},{"type":"message","user":"U0XR6J961","text":"i forgot what i wanted to ask","ts":"1463664006.001721"},{"type":"message","user":"U0XR6J961","text":"something about testing","ts":"1463664008.001722"},{"type":"message","user":"U0XR6J961","text":"i'm trying to write a test without creating a whole network","ts":"1463664017.001723"},{"type":"message","user":"U0XPR4NP4","text":"Ah, hmm, could be done, but also seems likely to be very verbose ","ts":"1463664102.001724"},{"type":"message","user":"U0XR6J961","text":"but way less finnicky","ts":"1463664175.001725"},{"type":"message","user":"U0XR6J961","text":"if we could get rid of that goroutine","ts":"1463664189.001726"},{"type":"message","user":"U0XR6J961","text":"and have a state machine...","ts":"1463664198.001727"},{"type":"message","user":"U0XPR4NP4","text":"I find so long as `processContinually` is avoided, the current network tests are pretty reliable, though I agree about moving to the state machine ","ts":"1463664354.001728"},{"type":"message","user":"U0XR6J961","text":"oh i think `idleChannel()` doesn't work as expected","ts":"1463664447.001729"},{"type":"message","user":"U0XR6J961","text":"i think to do this properly, the dispatch would have to only write to idleChan if the select would block otherwise","ts":"1463664483.001730"},{"type":"message","user":"U0XR6J961","text":"(and no timers are running)","ts":"1463664488.001731"},{"type":"message","user":"U0XPR4NP4","text":"So `idleChannel`is probably misleading, the promise is if the same thread writes to a pbft channel, then blocks on the `idleChan` you know the pbft thread has finished processing the event you first delivered. It's entirely possible there are other events pending. ","ts":"1463664695.001732"},{"type":"message","user":"U0XPR4NP4","text":"In the case of the mock network code, because it is the thread which delivers the message to the pbft thread, that when `idleChan` unblocks, that message has been processed. ","ts":"1463664796.001733"},{"type":"message","user":"U0XPR4NP4","text":"(so, not a true measure of idleness, but I'm not sure what a clearer name would be, and I also couldn't find a cleaned way to detect the 'message has been processed' state) ","ts":"1463664883.001734"},{"type":"message","user":"U0XR6J961","text":"no you are not guaranteed that","ts":"1463664893.001735"},{"type":"message","user":"U0XR6J961","text":"the main routine may as well serve the idlechannel first","ts":"1463664905.001736"},{"type":"message","user":"U0XR6J961","text":"select{} order is not priority","ts":"1463664913.001737"},{"type":"message","user":"U0XPR4NP4","text":"They're all unbuffered channels","ts":"1463664918.001738"},{"type":"message","user":"U0XPR4NP4","text":"If you write to one, then read from another, you know that the thread leaves the select in between ","ts":"1463664946.001739"},{"type":"message","user":"U0XPR4NP4","text":"(because the write blocks until the select 'chooses it') ","ts":"1463665010.001740"},{"type":"message","user":"U0XR6J961","text":"no","ts":"1463665010.001741"},{"type":"message","user":"U0XR6J961","text":"oh!","ts":"1463665016.001742"},{"type":"message","user":"U0XR6J961","text":"right","ts":"1463665022.001743"},{"type":"message","user":"U0XR6J961","text":"now i understand","ts":"1463665028.001744"},{"type":"message","user":"U0XPR4NP4","text":":simple_smile: ","ts":"1463665058.001745"},{"type":"message","user":"U0XR6J961","text":"bah, this coupling between batch and pbft core makes testing tricky","ts":"1463665149.001746"},{"type":"message","user":"U0XR6J961","text":"ideally i should mock the pbft core","ts":"1463665159.001747"},{"type":"message","user":"U0XR6J961","text":"wow you made the custodian very verbose","ts":"1463665832.001748"},{"type":"message","user":"U0XR6J961","text":"was there a bug in there?","ts":"1463665839.001749"},{"type":"message","user":"U0XPR4NP4","text":"There was ","ts":"1463666030.001750"},{"type":"message","user":"U0XPR4NP4","text":"The verbosity was more for my understanding, we could probably back it down ","ts":"1463666072.001751"},{"type":"message","user":"U0XPR4NP4","text":"And calling it a bug may be disingenuous, but the behavior was not what the other side seemed to be expecting ","ts":"1463666104.001752"},{"type":"message","user":"U0XR6J961","text":"oh","ts":"1463666179.001753"},{"type":"message","user":"U0XPR4NP4","text":"The custodian removed things as their timers expired, then the other side expected them to be there on `Restart` and they were not there, so, modified the custodian to re-register on expiration until manually removed ","ts":"1463666182.001754"},{"type":"message","user":"U0XR6J961","text":"oh","ts":"1463666196.001755"},{"type":"message","user":"U0XR6J961","text":"then we should change the docs and name","ts":"1463666219.001756"},{"type":"message","user":"U0XR6J961","text":"to reflect either way","ts":"1463666225.001757"},{"type":"message","user":"U0XPR4NP4","text":"Really, that custodian thread needs to go away too, I think there can be races ","ts":"1463666243.001758"},{"type":"message","user":"U0XR6J961","text":"yes it needs to","ts":"1463666251.001759"},{"type":"message","user":"U0XPR4NP4","text":"I thought I updated the docs, sorry if I missed some ","ts":"1463666261.001760"},{"type":"message","user":"U0XR6J961","text":"if all is an assembly of state machines, it will be much better","ts":"1463666264.001761"},{"type":"message","user":"U0XR6J961","text":"and timeouts should be handled by the state machine engine","ts":"1463666282.001762"},{"type":"message","user":"U0XPR4NP4","text":"Exactly ","ts":"1463666324.001763"},{"type":"message","user":"U0XR6J961","text":"hmmm","ts":"1463667398.001764"},{"type":"message","user":"U0XR6J961","text":"i think there is some bug with the complainer re-adding requests into custody","ts":"1463667427.001765"},{"type":"message","user":"U0XR6J961","text":"jyellick: i didn't think the custodian should keep requests around","ts":"1463667553.001766"},{"type":"message","user":"U0XR6J961","text":"why do you prefer this behavior?","ts":"1463667575.001767"},{"type":"message","user":"U0XR6J961","text":"i think you've traded one bug for another","ts":"1463667664.001768"},{"type":"message","user":"U0XR6J961","text":"now there is a race condition where briefly the custodian claims that a request is not under custody, but then is again in custody","ts":"1463667901.001769"},{"type":"message","user":"U0XR6J961","text":"which can race with another thread removing the request","ts":"1463667997.001770"},{"type":"message","user":"U0XR6J961","text":"i think i need to revert that","ts":"1463668010.001771"},{"type":"message","user":"U0XR6J961","text":"but for that i need to understand what bug you addressed with that","ts":"1463668024.001772"},{"type":"message","user":"U0XPR4NP4","text":"So, I was considering, that yes, the request probably needs to be added while the lock is retained","ts":"1463668724.001773"},{"type":"message","user":"U0XPR4NP4","text":"And, the problem is, that the callback from the custodian sends a view change, but does nothing to retain the request which expired","ts":"1463668826.001774"},{"type":"message","user":"U0XPR4NP4","text":"We could revert to the old behavior, but, then `Complain` would actually need to store the complaint that fired, and process it after the view change","ts":"1463668866.001775"},{"type":"message","user":"U0XPR4NP4","text":"So, maybe to be more clear:\n\nvp1 takes req1 into custody\nreq1 custody timer expires, is removed from custodian and calls `Complain`\nvp1 gets complaint, initiates a view change\nvp1 is new primary, goes to process everything in its complaint store, which is now empty\nreq1 no longer has any references","ts":"1463668954.001776"},{"type":"message","user":"U0XPR4NP4","text":"But yes, I agree, there is a race, the `Register` needs to take place with the mutex held to avoid a race, though I think as a real world race, this one is extremely unlikely.  It's extremely likely that that thread will have woken up by the time a view change is completely processed and a new view is accepted","ts":"1463669092.001777"},{"type":"message","user":"U0XR6J961","text":"yes, complaints are not retained, that is on purpose","ts":"1463669102.001778"},{"type":"message","user":"U0XR6J961","text":"the original custody holder can resubmit them on view change","ts":"1463669122.001779"},{"type":"message","user":"U0XR6J961","text":"the custodian keeps custody requests until they are successful","ts":"1463669152.001780"},{"type":"message","user":"U0XR6J961","text":"it doesn't keep complaints","ts":"1463669158.001781"},{"type":"message","user":"U0XPR4NP4","text":"I see, hmmm, maybe the re-register should go away then, I see that it's being done in `custodyTimeout`","ts":"1463669279.001782"},{"type":"message","user":"U0XPR4NP4","text":"I'm trying to remember if there were any other fixes that went into `custodian.go` or not","ts":"1463669347.001783"},{"type":"message","user":"U0XR6J961","text":"wait, how does the notifyRoutine get called again?","ts":"1463669360.001784"},{"type":"message","user":"U0XR6J961","text":"```if !obj.canceled {\n\t\texpired = &amp;CustodyPair{obj.id, obj.data}\n\t} else {\n\t\tc.resetTimer()\n\t}\n```","edited":{"user":"U0XR6J961","ts":"1463669386.000000"},"ts":"1463669375.001786"},{"type":"message","user":"U0XR6J961","text":"woops","ts":"1463669378.001787"},{"type":"message","user":"U0XPR4NP4","text":"`notifyRoutine` is called from a go routine from `resetTimer`","ts":"1463669460.001790"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1463669565.001791"},{"type":"message","user":"U0XR6J961","text":"but then notifyRoutine will have to call resetTimer again","ts":"1463669577.001792"},{"type":"message","user":"U0XR6J961","text":"not only if the request wasn't cancelled","ts":"1463669598.001793"},{"type":"message","user":"U0XR6J961","text":"no, vice versa","ts":"1463669609.001794"},{"type":"message","user":"U0XR6J961","text":"not only if the request was cancelled","ts":"1463669614.001795"},{"type":"message","user":"U0XPR4NP4","text":"Yes, there's a bug there","ts":"1463669642.001796"},{"type":"message","user":"U0XPR4NP4","text":"That should probably be converted back to a for loop","ts":"1463669669.001797"},{"type":"message","user":"U0XPR4NP4","text":"```\n        for {\n                select {\n                case &lt;-c.timer.C:\n                        break\n                case &lt;-c.stopCh:\n                        c.stopCh = nil\n                        return\n                }\n                c.lock.Lock()\n                var expired []CustodyPair\n                for _, obj := range c.seq {\n                        if obj.deadline.After(time.Now()) {\n                                break\n                        }\n                        if !obj.canceled {\n                                expired = append(expired, CustodyPair{obj.id, obj.data})\n                        }\n                        delete(c.requests, obj.id)\n                        c.seq = c.seq[1:]\n                }\n                c.resetTimer()\n                c.lock.Unlock()\n\n                for _, data := range expired {\n                        c.notifyCb(data.ID, data.Data)\n                }\n        }\n```\n\nThat is what the original implementation looked like","ts":"1463669766.001798"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1463669952.001799"},{"type":"message","user":"U0XPR4NP4","text":"I think it might be worth reverting the changes to the `notifyRoutine` and the tests which rely on the re-register behavior","ts":"1463670016.001800"},{"type":"message","user":"U0XR6J961","text":"ah, scrum","ts":"1463670048.001801"},{"type":"message","user":"U0XPR4NP4","text":"The original implementation looks correct to me now,","ts":"1463670071.001802"},{"type":"message","user":"U0UGH3X7X","text":":smile:","ts":"1463670071.001803"},{"type":"message","user":"U0XR6J961","text":":smile:","ts":"1463670102.001804"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: I'm putting together a patch to restore the bulk of your original custodian stuff, it breaks the BatchCustody test, will track it down though","ts":"1463671698.001805"},{"type":"message","user":"U0XPR4NP4","text":"Okay, so i think this is what's going on, and why my changeset 'fixed' it.  The problem is that whenever the length of `expired` is more than 1, then we get back to back complaint callbacks, which basically triggers back to back view change messages, and calling `Restart` does nothing to prevent this, because the `expired` slice is already built.","ts":"1463672299.001806"},{"type":"message","user":"U0XPR4NP4","text":"So, along with the bugs that my changes introduced, it only ever processes one expired at a time, spawning a new go routine to handle the next, which seems to give the rest of the code time to call `Restart` and get things cleaned up.","ts":"1463672351.001807"},{"type":"message","user":"U0XPR4NP4","text":"And I guess what I was trying to do, with the go routine that doesn't loop, is to stop more callbacks until someone called into `Register` again,  (of course, I introduced later introduced a race by calling back into `Register` from the `notifyRoutine`","edited":{"user":"U0XPR4NP4","ts":"1463672820.000000"},"ts":"1463672806.001808"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: Any thoughts on how to handle this? Also, custody expirations only broadcast a complaint, it seems like it should also register the complaint with itself, so that it can contribute a view change message, is there a reason why it does not?","ts":"1463673854.001810"},{"type":"message","user":"U0XR6J961","text":"aaaah","ts":"1463675398.001811"},{"type":"message","user":"U0XR6J961","text":"yes, all good points","ts":"1463675429.001812"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: I'm also confused as to where the 'resubmitting requests' you referred to exists.  I did modify the `Restart` routine to return both the requests in custody as well as the complaints, so that the new primary would process the outstanding complaints it knew about.  But, I don't see anywhere that the backup resubmits its requests on view change.","ts":"1463675433.001813"},{"type":"message","user":"U0XPR4NP4","text":"The `outstandingReqs` in PBFT needed to be zero-ed out on view change, because it is looking for exact batch messages, and really only gets populated on the primary","ts":"1463675467.001814"},{"type":"message","user":"U0XR6J961","text":"so many bugs in so little code","ts":"1463675472.001815"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1463675473.001816"},{"type":"message","user":"U0XPR4NP4","text":"So it doesn't solve the back to back view change things, but I'm thinking these two changes are correct:\n\n1.  When a backup complains, it should register the complaint with itself, so that when it expires, it sends a view change\n2.  When the backup calls `Restart`, it should loop through all the requests in its custody, and for those which it hasn't complained about (because the new primary should already have that complaint) it should resubmit those to the primary.","ts":"1463675770.001817"},{"type":"message","user":"U0XPR4NP4","text":"As to fixing the back to back view change problems, what would you think of adding some additional metadata to the request, basically, what view it was taken into custody\/complaint.  On `Restart`, you could supply the view that things are restarting in.  And, then through the callback, you could filter out expirations which are not for your current view. Thoughts <@U0XR6J961>?","edited":{"user":"U0XPR4NP4","ts":"1463676018.000000"},"ts":"1463676010.001818"},{"type":"message","user":"U0XR6J961","text":"hmm","ts":"1463676082.001820"},{"type":"message","user":"U0XR6J961","text":"i'll think about it some more","ts":"1463676090.001821"},{"type":"message","user":"U0XR6J961","text":"this sounds pretty complicated","ts":"1463676096.001822"},{"type":"message","user":"U0XPR4NP4","text":"Okay, I'll head back off into state transfer land then, let me know if you want to talk more about it","ts":"1463676223.001823"},{"type":"message","user":"U0XR6J961","text":"sure","ts":"1463676307.001824"},{"type":"message","user":"U0XR6J961","text":"thanks","ts":"1463676308.001825"},{"type":"message","user":"U0XR6J961","text":"jyellick: we can't access op.pbft.activeView, because that's racy","ts":"1463751215.001826"},{"type":"message","user":"U0XR6J961","text":"we really need to put this in a single thread","ts":"1463751227.001827"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: 100% agree, that's been on my radar for a bit, thought about opening an issue for it, but we reference it a lot","ts":"1463752696.001828"},{"type":"message","user":"U0XR6J961","text":"yea i just opened one","ts":"1463752715.001829"},{"type":"message","user":"U0XPR4NP4","text":"We could try to track it in  both locations, but at the end of the day, we just need to get rid of the second thread","ts":"1463752726.001830"},{"type":"message","user":"U0XR6J961","text":"jyellick: TestClassicBackToBackStateTransfer is failing because the state transfer seems to happen at seqno 4","ts":"1463756791.001831"},{"type":"message","user":"U0XPR4NP4","text":"This is presumably after some changes you made? Is this after the null stuff?","ts":"1463756838.001832"},{"type":"message","user":"U0XPR4NP4","text":"(as I've not seen that test fail locally or in CI)","ts":"1463756872.001833"},{"type":"message","user":"U0XR6J961","text":"my only explanation is that it did a state transfer more quickly","ts":"1463758490.001834"},{"type":"message","user":"U0XR6J961","text":"okay, i can't run any of these unit tests","ts":"1463758528.001835"},{"type":"message","user":"U0XR6J961","text":"jyellick: <https:\/\/gist.github.com\/5df88b0104c0f1c14fa9f215f7fd96a6>","ts":"1463758694.001836"},{"type":"message","user":"U0XPR4NP4","text":"Is this what's in master, or are there changes on top of it?","ts":"1463758737.001837"},{"type":"message","user":"U0XR6J961","text":"yes, my changes","ts":"1463758749.001838"},{"type":"message","user":"U0XPR4NP4","text":"Are they the null eavesdropping changes?","ts":"1463758763.001839"},{"type":"message","user":"U0XR6J961","text":"nono","ts":"1463758766.001840"},{"type":"message","user":"U0XR6J961","text":"i'm still tweaking out the custody bugs","ts":"1463758774.001841"},{"type":"message","user":"U0XR6J961","text":"or rather, i think i've been mostly trying to pass erratic unit tests for the last hours","ts":"1463758793.001842"},{"type":"message","user":"U0XR6J961","text":"i'm going to submit this PR as is","ts":"1463758833.001843"},{"type":"message","user":"U0XR6J961","text":"the failures are random here","ts":"1463758839.001844"},{"type":"message","user":"U0XPR4NP4","text":"I'm not sure why custody should have any effect on it.  I think if these unit tests were failing randomly, we would have seen CI complain","ts":"1463758866.001845"},{"type":"message","user":"U0XR6J961","text":"well, my laptop is slower than everybody's machines","ts":"1463758909.001846"},{"type":"message","user":"U0XR6J961","text":"it takes different code interleavings","ts":"1463758920.001847"},{"type":"message","user":"U0XR6J961","text":"which is not too bad","ts":"1463758935.001848"},{"type":"message","user":"U0XR6J961","text":"because it exposes bugs occasionally","ts":"1463758944.001849"},{"type":"message","user":"U0XR6J961","text":"and badly written tests (all :)","ts":"1463758955.001850"},{"type":"message","user":"U0XR6J961","text":"let's see what CI says","ts":"1463758959.001851"},{"type":"message","user":"U0XR6J961","text":"<https:\/\/github.com\/hyperledger\/fabric\/pull\/1537>","attachments":[{"service_name":"GitHub","title":"resubmit raced custody requests, fix other custody bugs by corecode \u00b7 Pull Request #1537 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1537","text":"Description If one of our requests turned stale without having been committed (because a newer request of us raced it), we need to repackage and resubmit the request. During implementation of t...","fallback":"GitHub: resubmit raced custody requests, fix other custody bugs by corecode \u00b7 Pull Request #1537 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1537","thumb_width":400,"thumb_height":400,"id":1}],"ts":"1463758969.001852"},{"type":"message","user":"U0XR6J961","text":"i'll go outside for a walk, haven't been in fresh air for a week","ts":"1463758999.001854"},{"type":"message","user":"U0XPR4NP4","text":"Looking at that test, wondering if I don't see a bug","ts":"1463759230.001855"},{"type":"message","user":"U0XPR4NP4","text":"Actually, not a bug, but, try on line 77 of mock_consumer_test.go bumping `MaxStateTransferTime` up to say, 400 instead of 200","ts":"1463759502.001856"},{"type":"message","user":"U0XPR4NP4","text":"The test does assume, that given at least 100ms is sufficient time to processes 5 rounds of PBFT","ts":"1463759546.001857"},{"type":"message","user":"U0XR6J961","text":"uh oh","ts":"1463759594.001858"},{"type":"message","user":"U0XR6J961","text":"talk about brittle code :slightly_smiling_face:","ts":"1463759600.001859"},{"type":"message","user":"U0XPR4NP4","text":"Well, it takes 20ms on my laptop to do that","ts":"1463759686.001860"},{"type":"message","user":"U0XPR4NP4","text":"So, 5x seemed like a reasonable guess as to the power of other machines.  Actually blocking for it would be better, but, would have made the changes for the test much more invasive.","ts":"1463759794.001861"},{"type":"message","user":"U0XPR4NP4","text":"Wow, it is taking over 3 seconds on your machine","ts":"1463759902.001862"},{"type":"message","user":"U0XPR4NP4","text":"That's roughly 150x as slow","ts":"1463759931.001863"},{"type":"message","user":"U0XPR4NP4","text":"I can take a TODO for this to modify the test infrastructure to support blocking this call, but I'm a little shocked any of the timing related tests run successfully for you","ts":"1463760112.001864"},{"type":"message","user":"U0Y14MWA2","text":"<@U0UGH3X7X>: <@U0XQ35CDD> <@U0XR6J961> <@U0XPR4NP4> Re Sharon's email","ts":"1463765646.001865"},{"type":"message","user":"U0Y14MWA2","text":"and #1454 and #1120","ts":"1463765655.001866"},{"type":"message","user":"U0Y14MWA2","text":"if they pause ONE node and want it to resume - that node falls directly into 1454","ts":"1463765683.001867"},{"type":"message","user":"U0Y14MWA2","text":"as the view does not change - so this is the most severe case and it won't be addressed by 1120","ts":"1463765705.001868"},{"type":"message","user":"U0Y14MWA2","text":"there is no way to make this node come back - as we cannot change the view based on the decision of one node, nor can we resume the node in a view","ts":"1463765736.001869"},{"type":"message","user":"U0Y14MWA2","text":"so we need SUSPECTs","ts":"1463765740.001870"},{"type":"message","user":"U0Y14MWA2","text":"my question is","ts":"1463765742.001871"},{"type":"message","user":"U0Y14MWA2","text":"can you implement configurable SUSPECTs?","ts":"1463765753.001872"},{"type":"message","user":"U0Y14MWA2","text":"meaning - there is a config param in which the whole trick can be switched off?","ts":"1463765766.001873"},{"type":"message","user":"U0Y14MWA2","text":"the reason is I would like to avoid adding instability to the code, so - if we decide to implement - would like to sandbox the SUSPECTs as much as possible - so they do not necessarily add to more instability","ts":"1463765826.001874"},{"type":"message","user":"U0XPR4NP4","text":"There's nothing technically infeasible about making it configurable, though obviously that is more work than simply forcing it to be enabled","ts":"1463766183.001875"},{"type":"message","user":"U0XPR4NP4","text":"<@U0Y14MWA2>: I responded to your email, but, per the discussions in those issues, I thought it had been agreed that 1454 was the priority, and that 1120 should be deferred","ts":"1463766243.001876"},{"type":"message","user":"U0XPR4NP4","text":"What might be a simpler solution, which I'm not sure I like, but would like your thoughts on.  What if we mandated view changes every n checkpoints? Combined with periodic null requests, this would at least guarantee us 'eventual consistency', and without introducing new messages.","ts":"1463766420.001877"},{"type":"message","user":"U0XPR4NP4","text":"Maybe that's a horrible idea, but it seems like it could be implemented much more easily than the SUSPECT mechanism.  I've also heard that despite PBFT's design, some users might not be comfortable with the idea that the primary never changes, so long as no one believes it to be byzantine, and this would address that fear as well.","ts":"1463766516.001878"},{"type":"message","user":"U0Y14MWA2","text":"it is not necessarily bad idea - some protocols do this anyway (see Aardvark from UT Austin)","ts":"1463766546.001879"},{"type":"message","user":"U0XR6J961","text":"hi","ts":"1463766549.001880"},{"type":"message","user":"U0Y14MWA2","text":"the drawback is killing the performance when we have a good leader","ts":"1463766581.001881"},{"type":"message","user":"U0Y14MWA2","text":"but I agree it may be easier to implement","ts":"1463766593.001882"},{"type":"message","user":"U0Y14MWA2","text":"ok - do try it","ts":"1463766672.001883"},{"type":"message","user":"U0Y14MWA2","text":"just make this configurable","ts":"1463766679.001884"},{"type":"message","user":"U0Y14MWA2","text":"with special value that switches it ioff","ts":"1463766687.001885"},{"type":"message","user":"U0Y14MWA2","text":"e.g., we can configure after how many reqs we switch the leader","ts":"1463766716.001886"},{"type":"message","user":"U0Y14MWA2","text":"but if we put -1 than we switch it off (or whatever value)","ts":"1463766729.001887"},{"type":"message","user":"U0XPR4NP4","text":"Right, I think that would be a much more direct change, and much easier to enable\/disable than something like SUSPECT","ts":"1463766766.001888"},{"type":"message","user":"U0Y14MWA2","text":"agree","ts":"1463766772.001889"},{"type":"message","user":"U0Y14MWA2","text":"ok solved","ts":"1463766774.001890"},{"type":"message","user":"U0Y14MWA2","text":":slightly_smiling_face:","ts":"1463766776.001891","reactions":[{"name":"+1","users":["U0UGH3X7X"],"count":1}]},{"type":"message","user":"U0XPR4NP4","text":"Haha, great, I'll throw a comment on 1120","ts":"1463766787.001892"},{"type":"message","user":"U0Y14MWA2","text":"and 1454","ts":"1463766794.001893"},{"type":"message","user":"U0XR6J961","text":"i'm still stuck trying to remove small bugs from the code","ts":"1463766826.001894"},{"type":"message","user":"U0XR6J961","text":"rather than adding features","ts":"1463766833.001895"},{"type":"message","user":"U0Y14MWA2","text":"by the way - let's make sure the test case keeps adding requests","ts":"1463766877.001896"},{"type":"message","user":"U0Y14MWA2","text":"otherwise there is no use of this :slightly_smiling_face:","ts":"1463766883.001897"},{"type":"message","user":"U0UGH3X7X","text":"already talked to the testers","ts":"1463766902.001898"},{"type":"message","user":"U0XR6J961","text":"i think before we add any convenience feature (replicas catching up), we need to address any subtle bugs","ts":"1463766904.001899"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XR6J961> anything more specific?","ts":"1463766921.001900"},{"type":"message","user":"U0XR6J961","text":"vukolic: <https:\/\/github.com\/hyperledger\/fabric\/issues\/1535>","attachments":[{"service_name":"GitHub","title":"pbft modules and pbft core data access needs to be synchronized \u00b7 Issue #1535 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/issues\/1535","text":"Description obcBatch accesses op.pbft.activeView, which is racy. Either provide a blocking \"RPC\" (which would return outdated values), or merge batch and pbft core goroutines.","fallback":"GitHub: pbft modules and pbft core data access needs to be synchronized \u00b7 Issue #1535 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/issues\/1535","thumb_width":400,"thumb_height":400,"id":1}],"ts":"1463766951.001901"},{"type":"message","user":"U0Y14MWA2","text":"I thought we are getting rid of pbft-classic and merging core and batch?","ts":"1463767007.001903"},{"type":"message","user":"U0XPR4NP4","text":"I think we should.  The problem is, we either need to duplicate the code, and do this, or we need to remove Sieve.","ts":"1463767063.001904"},{"type":"message","user":"U0XPR4NP4","text":"Merging classic and batch effectively requires eliminating the pbft plugin concept in the code.","ts":"1463767088.001905"},{"type":"message","user":"U0Y14MWA2","text":"Sieve should be implementable on the merged pbft","ts":"1463767108.001906"},{"type":"message","user":"U0Y14MWA2","text":"probably with quite some refactoring","ts":"1463767116.001907"},{"type":"message","user":"U0XPR4NP4","text":"Not the way the code is structured today.  Sieve also has a number of outstanding bugs with no clear solutions.","ts":"1463767135.001908"},{"type":"message","user":"U0UGH3X7X","text":"there are a few more issues floating e.g. #1538  #1466","ts":"1463767163.001909"},{"type":"message","user":"U0XPR4NP4","text":"I would agree it could be implemented on top of the merged PBFT, but it would certainly be broken in the meantime.","ts":"1463767174.001910"},{"type":"message","user":"U0Y14MWA2","text":"that's clear","ts":"1463767181.001911"},{"type":"message","user":"U0XR6J961","text":"jyellick: <https:\/\/github.com\/hyperledger\/fabric\/issues\/1538> that's state transfer being confused?","attachments":[{"service_name":"GitHub","title":"Consensus sieve has error on LoZ platform -- one peer cannot get block  \u00b7 Issue #1538 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/issues\/1538","text":"Description Get the latest hyper ledger code (commit 66ca505 ) Run with busywork and get error from peers. After tested with @bcbrock , he confirmed that this is bug with sieve on LoZ platform....","fallback":"GitHub: Consensus sieve has error on LoZ platform -- one peer cannot get block  \u00b7 Issue #1538 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/12942488?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/issues\/1538","thumb_width":420,"thumb_height":420,"id":1}],"ts":"1463767207.001912"},{"type":"message","user":"U0XPR4NP4","text":"(And 'breaking it in the meantime', to me is effectively removing it)","ts":"1463767217.001914"},{"type":"message","user":"U0XR6J961","text":"so:","ts":"1463767231.001915"},{"type":"message","user":"U0XPR4NP4","text":"No, I think that is the longstanding Sieve bug that Sieve must advertise the block hash before the block is committed, so when state transfer goes to retrieve it, it is a race to see whether the block is written or read first.","ts":"1463767269.001916"},{"type":"message","user":"U0Y14MWA2","text":"seems bishop says #1538 is looking like #1120?","ts":"1463767275.001917"},{"type":"message","user":"U0Y14MWA2","text":"from a skim I'd say it at least looks similar","ts":"1463767285.001918"},{"type":"message","user":"U0XR6J961","text":"if we make batch agree on (and sign in COMMIT) the next block (hash), instead of on a set of transactions, we already have half the infrastructure to implement sieve in batch","ts":"1463767301.001919"},{"type":"message","user":"U0XPR4NP4","text":"And any Sieve and state transfer that is not a single block catchup, I think is broken right now","ts":"1463767309.001920"},{"type":"message","user":"U0XPR4NP4","text":"Or maybe not any","ts":"1463767343.001921"},{"type":"message","user":"U0XR6J961","text":"jyellick: but statetransfer complains about non-matching correlation IDs","ts":"1463767349.001922"},{"type":"message","user":"U0XPR4NP4","text":"But any time it tries to recover the sequence number from the block","ts":"1463767351.001923"},{"type":"message","user":"U0Y14MWA2","text":"I have issue following multithreaded slack conversations...","ts":"1463767363.001924"},{"type":"message","user":"U0XR6J961","text":":slightly_smiling_face:","ts":"1463767367.001925"},{"type":"message","user":"U0XR6J961","text":"sorry","ts":"1463767369.001926"},{"type":"message","user":"U0Y14MWA2","text":"no parallel processing here...","ts":"1463767387.001927"},{"type":"message","user":"U0XR6J961","text":"hehe","ts":"1463767390.001928"},{"type":"message","user":"U0XR6J961","text":"decades of IRC trained me","ts":"1463767398.001929"},{"type":"message","user":"U0Y14MWA2","text":"so anyway","ts":"1463767413.001930"},{"type":"message","user":"U0Y14MWA2","text":"1535 is orthogonal to 1120","ts":"1463767421.001931"},{"type":"message","user":"U0XR6J961","text":"yes they are","ts":"1463767432.001932"},{"type":"message","user":"U0Y14MWA2","text":"so Jason pls try what you just suggested and make it -1able","ts":"1463767438.001933"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XR6J961> as for sigs on commits - we could have the same","ts":"1463767480.001934"},{"type":"message","user":"U0Y14MWA2","text":"this was 1182, right?","ts":"1463767493.001935"},{"type":"message","user":"U0XR6J961","text":"i forget the number","ts":"1463767598.001936"},{"type":"message","user":"U0XR6J961","text":"we have a problem with sieve persistence and maybe also state transfer","ts":"1463767633.001937"},{"type":"message","user":"U0XR6J961","text":"but with signed commits, maybe we can treat them as checkpoints","ts":"1463767656.001938"},{"type":"message","user":"U0XR6J961","text":"then we can get rid of checkpoints, and use the signed commits to catch up in a granular fashion","ts":"1463767677.001939"},{"type":"message","user":"U0XR6J961","text":"jyellick: TestBatchStaleCustody failed in CI...","ts":"1463767751.001940"},{"type":"message","user":"U0XR6J961","text":"all stupid racy tests","ts":"1463767761.001941"},{"type":"message","user":"U0XPR4NP4","text":"Yep, there's that race there, which we ID-ed yesterday","ts":"1463767768.001942"},{"type":"message","user":"U0XR6J961","text":"in the test, not in the code?","ts":"1463767785.001943"},{"type":"message","user":"U0XPR4NP4","text":"Nope, in the code","ts":"1463767794.001944"},{"type":"message","user":"U0XPR4NP4","text":"<@U0Y14MWA2>: <@U0XR6J961> before you sign off, I'd love to talk with you about some of what's been discussed in RTP regarding 'consenting on output', and signing blocks, etc.","ts":"1463767847.001945"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1463767857.001946"},{"type":"message","user":"U0XR6J961","text":"should we do a quick call, or do you prefer here?","ts":"1463767867.001947"},{"type":"message","user":"U0XR6J961","text":"here documents it for eternity","ts":"1463767873.001948"},{"type":"message","user":"U0XPR4NP4","text":"Either works for me, whichever you guys are more comfortable with","ts":"1463767887.001949"},{"type":"message","user":"U0XR6J961","text":"here is fine","ts":"1463767903.001950"},{"type":"message","user":"U0XPR4NP4","text":"Okay, so, the key issue is, people do not like the fact that we only 'consent on the input', and that even with 100% deterministic transactions (ie, the postimage stuff), people are still not happy about that.  Further, they do not like the fact that the only time we get a guarantee that the network is in a particular state, is at checkpoints, which means, there are are up to k-1 blocks, who's content, they would argue they cannot trust.","ts":"1463768001.001951"},{"type":"message","user":"U0XPR4NP4","text":"Obviously we could do a round of signing after every block, and store some signatures on the block, but, at that point, we've really lost a lot of PBFT, because if we're going to be doing signatures at every round, why did we choose a protocol that deliberately avoids them? I'm obviously not a protocol expert, but I believe that with the use of signatures, it is possible to perform less chatty byzantine consensus.","ts":"1463768116.001952"},{"type":"message","user":"U0XPR4NP4","text":"They further hate the idea that the although the network eventually halts on non-determinism, there are committed blocks which should not have been in this case.","ts":"1463768195.001953"},{"type":"message","user":"U0XPR4NP4","text":"So, the proposal I would give, is the following.  Today, we correspond a COMMIT message, and to a block. and issue checkpoints which confirm we all have the same view of the blockchain.","ts":"1463768211.001954"},{"type":"message","user":"U0XPR4NP4","text":"I would propose, that we make COMMIT messages correspond to executions, and CHECKPOINT messages correspond to blocks.","ts":"1463768234.001955"},{"type":"message","user":"U0XPR4NP4","text":"Then, we can sign checkpoint messages, and since this is at a configurable interval, we can control the overhead from the signatures.","ts":"1463768273.001956"},{"type":"message","user":"U0XPR4NP4","text":"And further, once a replica receives f+1 signatures, it can broadcast them to its NVPs, which effectively acts as a 'strong read' for that block.","ts":"1463768298.001957"},{"type":"message","user":"U0XPR4NP4","text":"We could actually bump that to 2f+1 signatures, if we wanted to ensure that the network will continue to make progress.","ts":"1463768347.001958"},{"type":"message","user":"U0XPR4NP4","text":"(as in, only consider the read strong if we know we can build more blocks upon the current state)","ts":"1463768364.001959"},{"type":"message","user":"U0XR6J961","text":"how does that all relate to the new consensus architecture?","ts":"1463768383.001960"},{"type":"message","user":"U0XPR4NP4","text":"Well, in the MVCC+postimage world, there's no state to shift around, so having a copy of the blockchain is sufficient to prove the state of the world, especially if you are only interested in the 'latest' state of a key, so a strong read on a block hash, is trivially a strong read against all the previous key values.","ts":"1463768456.001961"},{"type":"message","user":"U0XPR4NP4","text":"Because we only actually call 'commit' in the ledger at the checkpoint, and only once we have the signatures, everyone gets the promise that any reads they do will always be against an unequivocally committed state (whereas before, if nondeterminism had diverged the chains, it is possible that it could be wrong).","ts":"1463768540.001962"},{"type":"message","user":"U0XPR4NP4","text":"And assuming the checkpoints have signatures, you don't even need to introduce a strong read, and you don't have clients needing to deal with trying to connect to multiple VPs.","ts":"1463768624.001963"},{"type":"message","user":"U0XPR4NP4","text":"The complaint from <@U0XQ35CDD> I believe is that you basically force higher latency on people.  That if you want to perform a read, and you're 'sure' that the transactions are deterministic, you can get a fresher result if we commit the blocks with the COMMIT messages.","ts":"1463768678.001964"},{"type":"message","user":"U0XR6J961","text":"well, you still could be lagged","ts":"1463768688.001965"},{"type":"message","user":"U0XR6J961","text":"but yes","ts":"1463768709.001966"},{"type":"message","user":"U0XPR4NP4","text":"Absolutely, but what you get will never be incorrect for that version.","ts":"1463768712.001967"},{"type":"message","user":"U0XR6J961","text":"has this been an ongoing conversation? or did that come up recently?","ts":"1463768726.001968"},{"type":"message","user":"U0XPR4NP4","text":"It happened late last week on a whiteboard randomly when <@U0XQ35CDD>, <@U0TFEHX8E>, <@U0KN2SSKE> and I happened to be in the same room","ts":"1463768763.001969"},{"type":"message","user":"U0XPR4NP4","text":"I think it was a point <@U0TFEHX8E> made, is that no one actually wants a \"I'm 99% sure this read is reading something that will be committed\", that reporting data before we can verify it via a checkpoint is really of very little value.","ts":"1463768857.001970"},{"type":"message","user":"U0XR6J961","text":"well","ts":"1463768873.001971"},{"type":"message","user":"U0XR6J961","text":"why would it be wrong?","ts":"1463768885.001972"},{"type":"message","user":"U0XPR4NP4","text":"With deterministic transactions, it should never be wrong.  But, that's apparently not an argument the community is willing to accept, and to some extent, I get it.  Your RAM is hit by some cosmic radiation and you screw up the execution.  I think it's a bit of a silly game to play \"I can't trust myself\", but something could have gone wrong, and if you get agreement from f+1, or 2f+1 other replicas in the form of signatures, you can have a much higher confidence.  You've essentially got consent on the output.","ts":"1463769026.001973"},{"type":"message","user":"U0XR6J961","text":":slightly_smiling_face:","ts":"1463769050.001974"},{"type":"message","user":"U0XR6J961","text":"your ram is hit after you calculate the hash, but before you write it to disk...","ts":"1463769084.001975"},{"type":"message","user":"U0Y14MWA2","text":"the problem in making sure you have the right hash","ts":"1463769120.001976"},{"type":"message","user":"U0XPR4NP4","text":"It all seems pretty unlikely to me... and it would only help with benign faults.  If it's a malicious fault, like, maybe somebody fixes your crypto sig checker to always return true.... then you have a problem.","ts":"1463769123.001977"},{"type":"message","user":"U0Y14MWA2","text":"is that no amount of \"protection\" is going to save you from a \"cosmic ray\"","ts":"1463769136.001978"},{"type":"message","user":"U0Y14MWA2","text":"we could run agreement on output\/input\/NBA finals outcome","ts":"1463769150.001979"},{"type":"message","user":"U0Y14MWA2","text":"and then once we are done","ts":"1463769156.001980"},{"type":"message","user":"U0Y14MWA2","text":"with whatever","ts":"1463769158.001981"},{"type":"message","user":"U0Y14MWA2","text":"\"cosmic ray\" strikes","ts":"1463769164.001982"},{"type":"message","user":"U0Y14MWA2","text":"so, how can you be sure?","ts":"1463769176.001983"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I agree, I think real world, analytically, once you start not trusting yourself, you've got nothing.  Pretty sure philosophers have pondered on this for a long time.  But, apparently, psychologically, people really want consent on the output.","ts":"1463769221.001984"},{"type":"message","user":"U0XR6J961","text":":slightly_smiling_face:","ts":"1463769235.001985"},{"type":"message","user":"U0XR6J961","text":"arguably, the less computation happens between consenting and final data, the less bug surface you have","ts":"1463769267.001986"},{"type":"message","user":"U0XPR4NP4","text":"And, you also need a little less trust between the clients and their VP, if they can validate the other VP's signatures independently.","ts":"1463769294.001987"},{"type":"message","user":"U0Y14MWA2","text":"so we can agree on output - this is what sieve does - it may be buggy but conceptually it is implementable","ts":"1463769297.001988"},{"type":"message","user":"U0Y14MWA2","text":"with mvcc+ postimage we will have a leaderless approach to the same thing","ts":"1463769311.001989"},{"type":"message","user":"U0Y14MWA2","text":"which should inherently be less buggy","ts":"1463769317.001990"},{"type":"message","user":"U0Y14MWA2","text":"it is however IMPOSSIBLE","ts":"1463769326.001991"},{"type":"message","user":"U0Y14MWA2","text":"to have a 3 round ala PBFT protocol","ts":"1463769334.001992"},{"type":"message","user":"U0Y14MWA2","text":"that agrees on output","ts":"1463769338.001993"},{"type":"message","user":"U0Y14MWA2","text":"I can write a proof","ts":"1463769342.001994"},{"type":"message","user":"U0Y14MWA2","text":"so","ts":"1463769344.001995"},{"type":"message","user":"U0XPR4NP4","text":"Well, I think the difference between this and Sieve would be.  \"Assume your transactions are deterministic, and if they're not, it's fine if the network halts, but, never commit anything to the chain, unless the network consents on the output\"","ts":"1463769349.001996"},{"type":"message","user":"U0Y14MWA2","text":"hacking into PBFT to agree on output, without adding more comm is doomed to fail","ts":"1463769367.001997"},{"type":"message","user":"U0XPR4NP4","text":"What is wrong with not 'committing' the block, until you have a stable checkpoint","ts":"1463769385.001998"},{"type":"message","user":"U0Y14MWA2","text":"ah but that is more msgs","ts":"1463769395.001999"},{"type":"message","user":"U0Y14MWA2","text":"like k*3","ts":"1463769401.002000"},{"type":"message","user":"U0Y14MWA2","text":":slightly_smiling_face:","ts":"1463769403.002001"},{"type":"message","user":"U0XPR4NP4","text":"For sure, I agree it is.  So, it's basically cheating.  People dislike that PBFT doesn't validate at every round.... so, we say fine, we'll let PBFT run as it's designed and do what it does, and quickly.  But we only officially agree on the result of PBFT at the checkpoint interval.","ts":"1463769472.002002"},{"type":"message","user":"U0Y14MWA2","text":"btw, that does not explain what happens if the checkpoint reveals a non-det tx","ts":"1463769511.002003"},{"type":"message","user":"U0Y14MWA2","text":"what do you do then?","ts":"1463769517.002004"},{"type":"message","user":"U0XPR4NP4","text":"Halt","ts":"1463769528.002005"},{"type":"message","user":"U0Y14MWA2","text":"checkpoint after every commit is like a 4th message already","ts":"1463769529.002006"},{"type":"message","user":"U0Y14MWA2","text":"well we should not halt right?","ts":"1463769537.002007"},{"type":"message","user":"U0Y14MWA2","text":"that's a DoS","ts":"1463769546.002008"},{"type":"message","user":"U0Y14MWA2","text":"I write non-det chaincode and kill the blockchain","ts":"1463769557.002009"},{"type":"message","user":"U0XPR4NP4","text":"In the MVCC+Postimage world, it should not be possible","ts":"1463769559.002010"},{"type":"message","user":"U0XPR4NP4","text":"Postimage is inherently deterministic","ts":"1463769577.002011"},{"type":"message","user":"U0Y14MWA2","text":"ok, so MVCC+postimage solves the thing and if you look at the pattern it is exactly like sieve","ts":"1463769590.002012"},{"type":"message","user":"U0Y14MWA2","text":"w\/o leader","ts":"1463769592.002013"},{"type":"message","user":"U0Y14MWA2","text":"fact it does not have a leader","ts":"1463769597.002014"},{"type":"message","user":"U0Y14MWA2","text":"makes it more susceptible to concurrency clashes","ts":"1463769606.002015"},{"type":"message","user":"U0Y14MWA2","text":"but otherwise the pattern is the same","ts":"1463769613.002016"},{"type":"message","user":"U0Y14MWA2","text":"as we will have this in v2","ts":"1463769625.002017"},{"type":"message","user":"U0Y14MWA2","text":"I think we should do 0 in v1","ts":"1463769631.002018"},{"type":"message","user":"U0XPR4NP4","text":"Well, I would say the difference is that in Sieve, you do not know the output going in, you have to agree on the output","ts":"1463769634.002019"},{"type":"message","user":"U0XPR4NP4","text":"In the MVCC+Postimage you only have to agree whether an output is correct or not.","ts":"1463769651.002020"},{"type":"message","user":"U0Y14MWA2","text":"it is a minor change to have the same as in MVCC+postimage","ts":"1463769651.002021"},{"type":"message","user":"U0Y14MWA2","text":"leader could execute and propose a hash","ts":"1463769659.002022"},{"type":"message","user":"U0Y14MWA2","text":"and replicas would not execute themselves but confirm the leader or not","ts":"1463769671.002023"},{"type":"message","user":"U0Y14MWA2","text":"at some point I told chet we could easily have postimage in Sieve","ts":"1463769690.002024"},{"type":"message","user":"U0Y14MWA2","text":"but","ts":"1463769692.002025"},{"type":"message","user":"U0XPR4NP4","text":"Right, that is essentially the endorsers requiring f+1 policy","ts":"1463769693.002026"},{"type":"message","user":"U0Y14MWA2","text":"exactly","ts":"1463769698.002027"},{"type":"message","user":"U0Y14MWA2","text":"but","ts":"1463769700.002028"},{"type":"message","user":"U0Y14MWA2","text":"MVCC is where I clashed with Chet - because of the leader vs leader-less approach","ts":"1463769717.002029"},{"type":"message","user":"U0Y14MWA2","text":"and then","ts":"1463769719.002030"},{"type":"message","user":"U0Y14MWA2","text":"MVCC is simpler","ts":"1463769721.002031"},{"type":"message","user":"U0Y14MWA2","text":"so","ts":"1463769723.002032"},{"type":"message","user":"U0Y14MWA2","text":"let's try it","ts":"1463769725.002033"},{"type":"message","user":"U0Y14MWA2","text":"(Chet did say that this - simplicity - is the main reason MVCC is superior in his view)","ts":"1463769760.002034"},{"type":"message","user":"U0Y14MWA2","text":"and I can concur with that","ts":"1463769772.002035"},{"type":"message","user":"U0Y14MWA2","text":"if we end up with concurrency clashes all over the place - we sit and rethink the leader-based (or multi-leader) design","ts":"1463769798.002036"},{"type":"message","user":"U0XPR4NP4","text":"So, yes, you basically go leaderless, so that you assume your endorser is non-byzantine and you fix a lot of problems.","ts":"1463769845.002037"},{"type":"message","user":"U0Y14MWA2","text":"leaderless is the issue for concurrent tx changing the same objects","ts":"1463769867.002038"},{"type":"message","user":"U0Y14MWA2","text":"in UTXO this is largely a non issue","ts":"1463769874.002039"},{"type":"message","user":"U0Y14MWA2","text":"but we have a key-value store","ts":"1463769881.002040"},{"type":"message","user":"U0Y14MWA2","text":"will depend on the granularity of the data model - how often do we have concurrency issues","ts":"1463769898.002041"},{"type":"message","user":"U0XPR4NP4","text":"But getting back to the verifying the output side.  It seems obvious to me, that if we want the system to scale, it's impractical to have clients connect to f+1 peers to perform a strong read.  So it makes a lot of sense to me, to simply sign checkpoints, and then broadcast bundles of them, as implicit strong reads.","ts":"1463769900.002042"},{"type":"message","user":"U0Y14MWA2","text":"in principle this does not solve the issue","ts":"1463769923.002043"},{"type":"message","user":"U0Y14MWA2","text":"you can sign whatever","ts":"1463769928.002044"},{"type":"message","user":"U0Y14MWA2","text":"I as a Byzantine replica can serve to my clients stale reads","ts":"1463769938.002045"},{"type":"message","user":"U0Y14MWA2","text":"you need to go to more to be sure","ts":"1463769946.002046"},{"type":"message","user":"U0XPR4NP4","text":"So, this is two different problems to me.","ts":"1463769963.002047"},{"type":"message","user":"U0XPR4NP4","text":"One is, is the data that I'm reading definitely correct, at the version I'm being sent it.","ts":"1463769979.002048"},{"type":"message","user":"U0XPR4NP4","text":"IE, are blocks up through n correct.","ts":"1463769988.002049"},{"type":"message","user":"U0Y14MWA2","text":"that is signature-fixable yes","ts":"1463769989.002050"},{"type":"message","user":"U0XPR4NP4","text":"The other half, is \"is it current\", and the simple answer is, I don't think that's answerable.  Period.","ts":"1463770012.002051"},{"type":"message","user":"U0XPR4NP4","text":"You could ask \"is it current as of time XXXX\" and maybe you can answer that.","ts":"1463770025.002052"},{"type":"message","user":"U0XPR4NP4","text":"But it's an asynchronous system, nothing's atomic, even at it's most basic level, by the time the reply comes over the wire, it could no longer be current.","ts":"1463770066.002053"},{"type":"message","user":"U0Y14MWA2","text":"sure","ts":"1463770079.002054"},{"type":"message","user":"U0Y14MWA2","text":"anyway - great chatting here","ts":"1463770088.002055"},{"type":"message","user":"U0Y14MWA2","text":"seems we also made progress","ts":"1463770092.002056"},{"type":"message","user":"U0Y14MWA2","text":"need to take off","ts":"1463770094.002057"},{"type":"message","user":"U0XPR4NP4","text":"Okay, would love to continue this conversation at some point.","ts":"1463770110.002058"},{"type":"message","user":"U0Y14MWA2","text":"sure","ts":"1463770115.002059"},{"type":"message","user":"U0TFEHX8E","text":"<@U0Y14MWA2>: \"how often do we have concurrency issues\u201d yes, that is the question that we struggle with","ts":"1463770183.002060"},{"type":"message","user":"U0TFEHX8E","text":"if choosing mvcc","ts":"1463770194.002061"},{"type":"message","user":"U0XPR4NP4","text":"I know we've frequently talked about adding a trusted time service.  Assuming we have periodic checkpoints, and some way to sync on time, could we not include a timestamp in the signed checkpoint, to give a guarantee on \"current as of time XXXX\"?","ts":"1463770256.002062"},{"type":"message","user":"U0Y14MWA2","text":"time...","ts":"1463770725.002063"},{"type":"message","user":"U0Y14MWA2","text":"<http:\/\/www.scientificamerican.com\/article\/is-time-an-illusion\/>","attachments":[{"service_name":"Scientific American","title":"Is Time an Illusion?","title_link":"http:\/\/www.scientificamerican.com\/article\/is-time-an-illusion\/","text":"The concepts of time and change may emerge from a universe that, at root, is utterly static","fallback":"Scientific American: Is Time an Illusion?","from_url":"http:\/\/www.scientificamerican.com\/article\/is-time-an-illusion\/","id":1}],"ts":"1463770726.002064"},{"type":"message","user":"U0Y14MWA2","text":"<@U0TFEHX8E>: we will need to program with this in mind - it makes our life simpler as fabric developers - but whoever programs the chaincodes and defines objects will have a tougher job","ts":"1463770963.002066"},{"type":"message","user":"U0Y14MWA2","text":"but one should not implement chaincode for presidential election that says \"if vote='trump' then trump:=trump+1\"","ts":"1463771182.002067"},{"type":"message","user":"U0KPFAZNF","text":"<@U0XPR4NP4>: I would argue its actually three problems: you mention \u201ccorrect\" and \u201ccurrent\"\u2026quorum signatures solve the first, and, to your point, \u201ccurrent\u201d is difficult to prove\u2026however, there is a middle state and that is whether anything has been omitted outside of reasonable asynchronous issues.  Lets call the third one \"omission-detection\u201d.  I would argue that 1) strong reads are a solution to the omission detection problem and that 2) \u201ccurrent\u201d isn\u2019t really an issue we need to worry about because this is solved a different way (e.g. transaction confirmation).","ts":"1463800089.002068"},{"type":"message","user":"U0KPFAZNF","text":"To put it another way, I don\u2019t necessarily care if I am \u201ccurrent\u201d but I do want to figure out if information is being withheld from me (up to the limits of byzantine tolerance of the network) and I do want to monitor whether transactions confirm in a reasonable timeframe.","ts":"1463800207.002069"},{"type":"message","user":"U0KPFAZNF","text":"<@U0Y14MWA2>: I am not following your argument about variable increment within chaincode.  Could you elaborate?","ts":"1463800443.002070"},{"type":"message","user":"U0XPR4NP4","text":"<@U0KPFAZNF>: I think what I'm driving at would be, 'Wouldn't it be nice, if the network periodically emitted a \"this is my block height, and its hash, and this is the time\", in a way that you could trust (say, as a bundle of signed messages).  Because the time is always advancing, and you know you should receive and advertisement at least once every n seconds, you can be certain that you're not having the current state hidden from you.  It seems like in many situations, this would be a nice substitution for a strong read, and it would also be much less work for the network.","ts":"1463867043.002071"},{"type":"message","user":"U0XPR4NP4","text":"Then, all the clients (NVPs) need, is a copy of the blockchain, and a 'recent' chain state attestation, and they could have 100% confidence in their reads (acknowledging the fact that sure, the state may have changed beyond time t, but as you say, this is difficult to prove even with a strong read)","ts":"1463867179.002072"},{"type":"message","user":"U0XRC0KLH","text":"<@U0XPR4NP4>: I think if you look at \"time, crontab\", you'll find that combining that with the standard way that a client can read tran-outcome from 2f+1 clients, is enough.  At least, at first blush.","ts":"1463867638.002073"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XRC0KLH>: There's been considerable interest in signing blocks.  Now, this is somewhat counter to the PBFT idea, because it tries to eliminate having to constantly be signing messages (which is a bottleneck).  Further, there's also been considerable desire to 'consent on output', which brought us to the idea of switching block creation from PBFT 'COMMIT's to PBFT CHECKPOINTS.","ts":"1463867840.002074"},{"type":"message","user":"U0XPR4NP4","text":"So, if we're signing checkpoints, and we're emitting those periodically anyway, they seem like a convenient mechanism to 'push' strong reads","ts":"1463867907.002075"},{"type":"message","user":"U0XPR4NP4","text":"(Especially since if block creation is at checkpoint, we must be manufacturing these messages already, so, there's limited additional overhead)","ts":"1463868000.002076"},{"type":"message","user":"U0XRC0KLH","text":"<@U0XPR4NP4> of what interest is a strong read, other than to ensure you're geting up-to-date info?   If one is truly worried that one's bank is .... lying to one .... truly, there are more effective solutions.","ts":"1463868030.002077"},{"type":"message","user":"U0XRC0KLH","text":"and if it's merely to ensure your data is  up-to-date, watching the clock trans is enough","ts":"1463868046.002078"},{"type":"message","user":"U0XRC0KLH","text":"heck, as I think about it, why bother watching 2f+1 peers?  just listen to one peer for clock trans","ts":"1463868085.002079"},{"type":"message","user":"U0XRC0KLH","text":"People who think they won't get their faces ripped off, if they run a full node and validate all trans, are delusional, after all","ts":"1463868119.002080"},{"type":"message","user":"U0KPFAZNF","text":"<@U0XPR4NP4>: I would agree with that","ts":"1463868217.002081"},{"type":"message","user":"U0KPFAZNF","text":"\u201cstrong read\u201d as it has been discussed might be more relevant on the query side","ts":"1463868247.002082"},{"type":"message","user":"U0XPR4NP4","text":"I definitely need to catch up to speed on \"time, crontab\", I think I get the gist of it it, and can certainly see how that could eliminate the need for something like timestamped checkpoints.","ts":"1463868265.002083"},{"type":"message","user":"U0XPR4NP4","text":"Maybe it's just a use case that doesn't exist, but, I hear people asking \"How can I validate the correctness of my copy of the blockchain, as an NVP, without having to query the network\"?","ts":"1463868347.002084"},{"type":"message","user":"U0XPR4NP4","text":"(And clearly, to verify current-ness, you need to contact the network, but not correctness)","ts":"1463868399.002085"},{"type":"message","user":"U0XRC0KLH","text":"<@U0KPFAZNF> <@U0XPR4NP4> Guys, y'know, I think there's a far graver issue: from my understanding (and talking with Jason, Marko, others in the BFT community) the definition of \"correct\" in BFT, is -incompatible- with ANY definition of fault-tolerant in the fault-tolerance literature.","ts":"1463868405.002086"},{"type":"message","user":"U0XRC0KLH","text":"I think, absent a serious and careful investigation (use hot lights, rubber hoses stress positions, don't stint) , it's not at all clear that PBFT actually is a suitable protocol.","ts":"1463868443.002087"},{"type":"message","user":"U0XRC0KLH","text":"People who aren't banks, and ask \"how can I verify the correctness of my copy ...\" .... &lt;sigh&gt; (oh, can I borrow a few thousand dollars for a few days?)","ts":"1463868493.002088"},{"type":"message","user":"U0XPR4NP4","text":"I completely agree that PBFT as it comes out of the box, and the desirable behavior for a fault tolerant distributed system are rather different.  I'm not convinced it's not solvable, but certainly, there seem to have been some disconnects between people's expectations of BFT.","ts":"1463868620.002089"},{"type":"message","user":"U0XRC0KLH","text":"re: hot lights, you should not accept \"workarounds\".  And whatever solution, must work in the face of maximum traffic (hence, must come with built-in flow-control)","ts":"1463868742.002090"},{"type":"message","user":"U0XRC0KLH","text":"b\/c having floor(1\/3) of your nodes lag behind on the busiest day of the year, WILL result in lawsuits","ts":"1463868762.002091"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XRC0KLH>: I agree, we need a much stronger clear long term architecture to handle this, and hopefully <@U0Y14MWA2> can help us achieve this.  But, in the interest of walking before running, ensuring that every non-byzantine node can catch up and participate under normal load (not DOS level busyness) is a good first target.","ts":"1463868938.002092"},{"type":"message","user":"U0XRC0KLH","text":":wink:","ts":"1463869007.002093"},{"type":"message","user":"U0XR6J961","text":"chetsky: if 1\/3 of your nodes can be byzantine, how can you avoid leaving 1\/3 of your nodes to their own devices and ignore their slowness?  They may try to catch up, but clearly they're acting (relatively) byzantine, because they're slower than the rest.","ts":"1463991154.002094"},{"type":"message","user":"U0Y14MWA2","text":"<@U0KPFAZNF> roughly, MVCCs mentioned above imply that out of two concurrent tx modifying a single object at most one may go through","ts":"1464012709.002095"},{"type":"message","user":"U0Y14MWA2","text":"so implementing that counter like in that chaincode example would clash left and right","ts":"1464012739.002096"},{"type":"message","user":"U0KPFAZNF","text":"i see, you are referring to avoiding hotspots","ts":"1464012741.002097"},{"type":"message","user":"U0KPFAZNF","text":"got it, makes sense","ts":"1464012765.002098"},{"type":"message","user":"U0Y14MWA2","text":"in UTXO data model this is largely a non-issue - as objects (coins) are not supposed to be modified concurrently","ts":"1464012811.002099"},{"type":"message","user":"U0XRC0KLH","text":"<@U0XR6J961> absolutely, faulty nodes get no guarantees.  But if all nodes are fault-free, and the network is fault-free, then the protocol should not -induce- faults, should not -induce- instability","ts":"1464012818.002100"},{"type":"message","user":"U0Y14MWA2","text":"as we move to key value store we may need to take care how we program chaincodes with MVCCs","ts":"1464012836.002101"},{"type":"message","user":"U0XR6J961","text":"well should","ts":"1464012842.002102"},{"type":"message","user":"U0XR6J961","text":"but how do you prevent this?","ts":"1464012856.002103"},{"type":"message","user":"U0XRC0KLH","text":"I don't know enough aboutextant BFT protocols to be able to answer that.   I do know that as  -systems- guy, I wouldn't start down the road of building a -system- without having a protocol that had the properties I outline above.","ts":"1464012917.002104"},{"type":"message","user":"U0XRC0KLH","text":"In short, I should be able to operate it at maximum throughput, at overload of ingress requests, and as long as no nodes or network hops are faulty, the system should not itself induce faults.","ts":"1464012975.002105"},{"type":"message","user":"U0XRC0KLH","text":"that's what flow control is for, after all.","ts":"1464012992.002106"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1464013009.002107"},{"type":"message","user":"U0XR6J961","text":"how do you differentiate between a faulty node and a slightly slow node?","ts":"1464013027.002108"},{"type":"message","user":"U0XR6J961","text":"to determine your flow control boundaries\/metrics","ts":"1464013052.002109"},{"type":"message","user":"U0XRC0KLH","text":"I think we know the difference in practice, eh?","ts":"1464013068.002110"},{"type":"message","user":"U0XR6J961","text":"no?","ts":"1464013074.002111"},{"type":"message","user":"U0XR6J961","text":"not talking about a crashed node","ts":"1464013090.002112"},{"type":"message","user":"U0XRC0KLH","text":"agreed.  all I'm saying is, you -do- know what's the difference between faulty and \"slightly slow\".","ts":"1464013118.002113"},{"type":"message","user":"U0XR6J961","text":"but just faulty - e.g. bad cable, network is slow","ts":"1464013121.002114"},{"type":"message","user":"U0XRC0KLH","text":"slightly slow nodes don't exceed their timeouts","ts":"1464013128.002115"},{"type":"message","user":"U0XR6J961","text":"ah! timeouts","ts":"1464013135.002116"},{"type":"message","user":"U0XR6J961","text":"what timeout would you set?","ts":"1464013144.002117"},{"type":"message","user":"U0XR6J961","text":"static or determine the timeout dynamically","ts":"1464013179.002118"},{"type":"message","user":"U0XR6J961","text":"not how many seconds - of course that depends","ts":"1464013191.002119"},{"type":"message","user":"U0Y14MWA2","text":"well - definitely deployment dependent as deployment on LSEGs floor and over WAN are not going to be the same","ts":"1464013214.002120"},{"type":"message","user":"U0Y14MWA2","text":"whether dynamic this is yet another issue","ts":"1464013230.002121"},{"type":"message","user":"U0Y14MWA2","text":"(I am talking about timeouts obviously)","ts":"1464013264.002122"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1464013274.002123"},{"type":"message","user":"U0XRC0KLH","text":"Let me put this in context: <https:\/\/github.com\/bft-smart\/library\/issues\/27>","attachments":[{"service_name":"GitHub","title":"DefaultRecoverable doesn&#39;t seem to deal with nodes going out-to-lunch and then returning \u00b7 Issue #27 \u00b7 bft-smart\/library \u00b7 GitHub","title_link":"https:\/\/github.com\/bft-smart\/library\/issues\/27","text":"I've written a simple test application with BFT-Smart, as a warmup for doing something real. This application consists in: (a) a simple client that sends \"commands\" consisting of some fixed amoun...","fallback":"GitHub: DefaultRecoverable doesn't seem to deal with nodes going out-to-lunch and then returning \u00b7 Issue #27 \u00b7 bft-smart\/library","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/1755771?v=3&s=400","from_url":"https:\/\/github.com\/bft-smart\/library\/issues\/27","thumb_width":420,"thumb_height":420,"id":1}],"ts":"1464013352.002124"},{"type":"message","user":"U0XRC0KLH","text":"in NO protocol, is it acceptable for one of the conditions to be \"lower your input rate\"","ts":"1464013390.002126"},{"type":"message","user":"U0XRC0KLH","text":"i can tell you a funny, funny story about a certain enterprise app-server product from 1998, in that regard.","ts":"1464013421.002127"},{"type":"message","user":"U0XRC0KLH","text":"seemed, it had some bugs in its ingress-request-processing code.","ts":"1464013442.002128"},{"type":"message","user":"U0XRC0KLH","text":"with high likelihood,  with &gt;60 concurrent requests, it would crash.","ts":"1464013455.002129"},{"type":"message","user":"U0XRC0KLH","text":"so when it shipped, it was with that proviso to customers.","ts":"1464013465.002130"},{"type":"message","user":"U0XRC0KLH","text":"now, since nobody knew -why- it crashed, that meant that it could happen at &lt;60 concurrent reqs, and certainly nothing prevented load from going above that (per node)","ts":"1464013505.002131"},{"type":"message","user":"U0XRC0KLH","text":"after all, there are load-spikes in teh real world.","ts":"1464013515.002132"},{"type":"message","user":"U0XRC0KLH","text":"suppose you have such a system, with N nodes.  And you lose a node.  the #  of reqs\/node has just increased.  So you get another crash. And then another,etc.","ts":"1464013566.002133"},{"type":"message","user":"U0XRC0KLH","text":"Flow control is about preventing self-induced instability.","ts":"1464013585.002134"},{"type":"message","user":"U0XR6J961","text":"yes, sure","ts":"1464014370.002135"},{"type":"message","user":"U0XR6J961","text":"but byzantine flow control use the slowest F replicas as the performance limit gauge","ts":"1464014436.002136"},{"type":"message","user":"U0XR6J961","text":"because those F replicas may be deliberately slow","ts":"1464014453.002137"},{"type":"message","user":"U0ULK2JPP","text":"<!here|@here> sorry for jumping in (and being fairly clueless, please forgive if dumb q. :slightly_smiling_face: ). Is it possible to summarize the discussion so I can catchup ?","ts":"1464014616.002138"},{"type":"message","user":"U0XR6J961","text":"hi muralisr","ts":"1464014630.002139"},{"type":"message","user":"U0ULK2JPP","text":"I can take it offline if you like","ts":"1464014631.002140"},{"type":"message","user":"U0XPR4NP4","text":"I think it can be summarized quickly here (might be nice for others too)","ts":"1464014647.002141"},{"type":"message","user":"U0XR6J961","text":"we're talking about the fact that plain PBFT will leave F nodes behind","ts":"1464014664.002142"},{"type":"message","user":"U0XR6J961","text":"i.e. the fastest 2F+1 nodes make progress, and the remaining F are lagging behind","ts":"1464014683.002143"},{"type":"message","user":"U0XR6J961","text":"and the protocol is not \"waiting\" for them","ts":"1464014689.002144"},{"type":"message","user":"U0XPR4NP4","text":"To put it another way, PBFT is designed not to allow f byzantine replicas to negatively impact the network.  So, even when f nodes are simply 'a little slow', the network ends up leaving them behind, because it can't differentiate between \"doing their best but slow\" and \"trying to slow the network down\".","ts":"1464014740.002145"},{"type":"message","user":"U0Y14MWA2","text":"what may work there is agressive to moderate - but not conservative - timeouts - to wait for all replicas to catch up most of the time","ts":"1464014856.002146"},{"type":"message","user":"U0Y14MWA2","text":"as in wait for 2f+1 and expir of timer","ts":"1464014877.002147"},{"type":"message","user":"U0Y14MWA2","text":"where timer is agrweesive\/moderate","ts":"1464014883.002148"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: <@U0Y14MWA2> <@U0XRC0KLH>.  It seems like adaptive timeouts (we may have even discussed this in context of XFT) could make sense.  Say, the any node has to be no slower than 80% the speed of the 2f+1th fastest node. Otherwise we consider it byzantine and move along.","edited":{"user":"U0XPR4NP4","ts":"1464014934.000000"},"ts":"1464014904.002149"},{"type":"message","user":"U0Y14MWA2","text":"sth like that","ts":"1464014920.002151"},{"type":"message","user":"U0XR6J961","text":"so byzantine nodes can only slow down the network by 20%","ts":"1464014938.002153"},{"type":"message","user":"U0XPR4NP4","text":"Exactly.  Obviously you could make it configurable, but then the negative impact would be bounded.","ts":"1464014970.002154"},{"type":"message","user":"U0XR6J961","text":"i think it would be interesting to analyze the equilibrium between waiting for slower nodes and having to do state transfer","ts":"1464015006.002155"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XR6J961> write a paper! :slightly_smiling_face:","ts":"1464015024.002156"},{"type":"message","user":"U0XR6J961","text":"haha","ts":"1464015039.002157"},{"type":"message","user":"U0XR6J961","text":"i'm having trouble removing all the bugs i keep adding","ts":"1464015052.002158"},{"type":"message","user":"U0XPR4NP4","text":"From a business perspective, I'm not sure it's quite that simple.  \"Doing state transfer\" isn't an acceptable alternative to participating in the network.","ts":"1464015058.002159"},{"type":"message","user":"U0XR6J961","text":"why not?","ts":"1464015070.002160"},{"type":"message","user":"U0XPR4NP4","text":"Maybe <@U0XRC0KLH> can be more articulate about it, but if the f slowest nodes never execute a transaction but just get a slightly laggy state transferred version of the chain, that won't fly.","ts":"1464015123.002161"},{"type":"message","user":"U0XPR4NP4","text":"(Presumably, because they would be losing a business advantage by knowing the results at a later time, I'd think)","ts":"1464015179.002162"},{"type":"message","user":"U0XR6J961","text":"why not?","ts":"1464015192.002163"},{"type":"message","user":"U0XR6J961","text":"well, then they should use faster machines?","ts":"1464015204.002164"},{"type":"message","user":"U0XPR4NP4","text":"But then you get into an arms race, and you still leave the f slowest behind.","ts":"1464015220.002165"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1464015225.002166"},{"type":"message","user":"U0XR6J961","text":"darwinistic computing","ts":"1464015235.002167"},{"type":"message","user":"U0KPFAZNF","text":"So I can play this back: IIUC in the perhaps naive approach, we assume that the network will operate at approximately the speed of the fastest 2f+1 nodes, leaving f nodes to potentially fall behind\u2026but falling behind has its own cost in that lagging nodes must enter a state transfer protocol which is more expensive than steady state, perpetuating the load on the network","ts":"1464015237.002168"},{"type":"message","user":"U0XR6J961","text":"yes, that's what i suggested above","ts":"1464015263.002169"},{"type":"message","user":"U0Y14MWA2","text":"guys - we need to work here with well specified requirements - until then this is just the guesswork of what will businesses require","ts":"1464015273.002170"},{"type":"message","user":"U0KPFAZNF","text":"thus impacting the speed of the presumably fastest 2f+1 because then they are busy catching the others up","ts":"1464015283.002171"},{"type":"message","user":"U0XPR4NP4","text":"It seems like a clear requirement, that if all nodes are trying to participate in a non-byzantine way, they should all be able to.","ts":"1464015321.002172"},{"type":"message","user":"U0KPFAZNF","text":"and the proposal is to introduce a mitigating strategy to flow control the network in general to reduce state transfer pressure?","ts":"1464015337.002173"},{"type":"message","user":"U0XR6J961","text":"but what does \"participate\" mean?","ts":"1464015339.002174"},{"type":"message","user":"U0XPR4NP4","text":"PBFT as designed, leaves the f slowest nodes never executing transactions, always trying to catch up, whenever the network is under any sort of serious load.","ts":"1464015344.002175"},{"type":"message","user":"U0XR6J961","text":"ghaskins: no, people don't like it that until state transfer triggers, nodes are \"behind\"","ts":"1464015359.002176"},{"type":"message","user":"U0XRC0KLH","text":"guys, can I suggest you look at (for instance) tihe Ensemble system","ts":"1464015372.002177"},{"type":"message","user":"U0XPR4NP4","text":"<@U0KPFAZNF>: It is not about preventing state transfer, it's about allowing all nodes to be 'current' in terms of participating in the ordering etc.","ts":"1464015377.002178"},{"type":"message","user":"U0XRC0KLH","text":"real world distributed systems designed for massive data-flows all include flow-control","ts":"1464015388.002179"},{"type":"message","user":"U0XRC0KLH","text":"it isn't a 'mitigation\"","ts":"1464015392.002180"},{"type":"message","user":"U0XR6J961","text":"but they can participate in ordering","ts":"1464015392.002181"},{"type":"message","user":"U0XR6J961","text":"they just don't execute","ts":"1464015395.002182"},{"type":"message","user":"U0XRC0KLH","text":"it's a core part of what they do","ts":"1464015396.002183"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XPR4NP4> this is not sufficient as network faults may make them appear to the rest of the network as fautly","ts":"1464015398.002184"},{"type":"message","user":"U0KPFAZNF","text":"<@U0XRC0KLH>: what i am driving at is: isnt the flow control kind of already there?","ts":"1464015423.002185"},{"type":"message","user":"U0XPR4NP4","text":"<@U0Y14MWA2>: I agree, at some point nodes need to be left behind, but as a normal case high load operating principle \"we leave the f slowest behind\", that is a problem.","ts":"1464015429.002186"},{"type":"message","user":"U0Y14MWA2","text":"that we may try to solve with that agressive\/moderate (and perhaps dynamic) timeout","ts":"1464015464.002187"},{"type":"message","user":"U0KPFAZNF","text":"e.g. theres nothing you can do about the slower nodes per se\u2026the network will run at the speed of the fastest 2f+1\u2026that is a form of flow control right there","ts":"1464015478.002188"},{"type":"message","user":"U0KPFAZNF","text":"at least at the client txn confirmation rate level, not necessarily the consensus protocol level","ts":"1464015510.002189"},{"type":"message","user":"U0KPFAZNF","text":"personally, I dont see the f-nodes lagging as a problem\u2026thats the nature of being byzantine resistant","ts":"1464015561.002190"},{"type":"message","user":"U0KPFAZNF","text":"i think its irreducible, actually","ts":"1464015583.002191"},{"type":"message","user":"U0Y14MWA2","text":"<@U0KPFAZNF> - nice to hear this","ts":"1464015588.002192"},{"type":"message","user":"U0XPR4NP4","text":"<@U0KPFAZNF>: It's great to get that sort of feedback, but I have gotten just the opposite from many (for instance <@U0N1D1UAE>)","ts":"1464015592.002193"},{"type":"message","user":"U0KPFAZNF","text":"i think the moment you say \u201cthe network must be in lockstep\u201d you immediately discard the notion of being byzantine resistant","ts":"1464015629.002194"},{"type":"message","user":"U0Y14MWA2","text":"we actually have some methods to deal with that  - some being discussed here but others may be more invasive","ts":"1464015631.002195"},{"type":"message","user":"U0Y14MWA2","text":"(while staying byzantine resilient of course)","ts":"1464015654.002196"},{"type":"message","user":"U0Y14MWA2","text":"anyway <@U0XPR4NP4> <@U0XR6J961>  seems we are going for: 1) periodic leader rotation and 2) wait for f slowest nodes but not too much","ts":"1464015691.002197"},{"type":"message","user":"U0KPFAZNF","text":"so back to my comment about mitigating strategy, unless there is some quantifiable negative impact to the 2f+1 when f are slow (such as increased state-transfer pressure), let them be slow","ts":"1464015837.002198"},{"type":"message","user":"U0Y14MWA2","text":"<@U0KPFAZNF>: this was my initial answer but apparently users may have objections to this","ts":"1464015869.002199"},{"type":"message","user":"U0Y14MWA2","text":"so 1) and 2) would adress this to a large extent and would be configurable","ts":"1464015880.002200"},{"type":"message","user":"U0Y14MWA2","text":"so you can switch them off","ts":"1464015887.002201"},{"type":"message","user":"U0KPFAZNF","text":"it strikes me as \u201ccake and eat it too\"","ts":"1464015887.002202"},{"type":"message","user":"U0XPR4NP4","text":"<@U0KPFAZNF>: As mentioned, this is great feedback, we'll make sure we can at least have this behavior via config","ts":"1464015896.002203"},{"type":"message","user":"U0Y14MWA2","text":"and let dragging replicas - well - drag...","ts":"1464015901.002204"},{"type":"message","user":"U0XPR4NP4","text":"(and it is what exists today)","ts":"1464015905.002205"},{"type":"message","user":"U0KPFAZNF","text":"<@U0Y14MWA2>: I would love to understand more about the ideas you mentioned above that can deal with this","ts":"1464016048.002206"},{"type":"message","user":"U0KPFAZNF","text":"even if its just academic curiosity\u2026because I am fine with the lagging","ts":"1464016072.002207"},{"type":"message","user":"U0XPR4NP4","text":"You can see on <https:\/\/github.com\/hyperledger\/fabric\/issues\/1120> and <https:\/\/github.com\/hyperledger\/fabric\/issues\/1454>","ts":"1464016099.002208"},{"type":"message","user":"U0XPR4NP4","text":"(For some of the strategy)","ts":"1464016108.002209"},{"type":"message","user":"U0Y14MWA2","text":"these are good pointers - will also recap here","ts":"1464016115.002210"},{"type":"message","user":"U0KPFAZNF","text":"<@U0XPR4NP4>: ty","ts":"1464016123.002211"},{"type":"message","user":"U0Y14MWA2","text":"for 1) periodic leader rotation: it addresses a lagging replica in a case when it is one of at most f replicas that complains about the leader and issues a view change. Per PBFT protocol such replica  does participate in the main protocol until the leader is changed","ts":"1464016177.002212"},{"type":"message","user":"U0Y14MWA2","text":"so periodic leader rotation somehow helps unblock such replicas","ts":"1464016196.002213"},{"type":"message","user":"U0Y14MWA2","text":"<https:\/\/github.com\/hyperledger\/fabric\/issues\/1120> contains more elaborate discussion - including a more invasive solution to premature lack of trust into leader (cf. SUSPECT messages mentioned there)","ts":"1464016257.002214"},{"type":"message","user":"U0Y14MWA2","text":"re 2) it is simple - instead wait for 2f+1 fastest replicas (out of 3f+1) we would wait for 2f+1 fastest AND an agressive\/moderately set timeout to expire before moving on","ts":"1464016324.002215"},{"type":"message","user":"U0KPFAZNF","text":"I just skimmed the issue, and yes, this all makes sense","ts":"1464016330.002216"},{"type":"message","user":"U0Y14MWA2","text":"if a lagging replica cannot respond within that timout it will lag - and let it lag","ts":"1464016345.002217"},{"type":"message","user":"U0KPFAZNF","text":"without a SUSPECT protocol, the node may end up being permanently isolated","ts":"1464016351.002218"},{"type":"message","user":"U0Y14MWA2","text":"obviously this somehow limits latency to that timeout - so this is bad","ts":"1464016385.002219"},{"type":"message","user":"U0Y14MWA2","text":"but we will be able to switch the mechanism off","ts":"1464016401.002220"},{"type":"message","user":"U0Y14MWA2","text":"We avoid SUSPECTS at the moment as adding protocol msgs - is in a sense invasive","ts":"1464016468.002221"},{"type":"message","user":"U0Y14MWA2","text":"so it will be a last resort","ts":"1464016473.002222"},{"type":"message","user":"U0KPFAZNF","text":"it strikes me that you could summarize this as the basic notion of introducing consensus to view-change itself","edited":{"user":"U0KPFAZNF","ts":"1464016542.000000"},"ts":"1464016496.002223"},{"type":"message","user":"U0ULK2JPP","text":"if a machine joins the network and is neither slow nor byzantine, will it catch up \u201cpretty quickly\u201d ?","ts":"1464016512.002224"},{"type":"message","user":"U0XPR4NP4","text":"Before or after the suggested implemented changes?","ts":"1464016541.002225"},{"type":"message","user":"U0ULK2JPP","text":"before","ts":"1464016545.002227"},{"type":"message","user":"U0Y14MWA2","text":"hopefully :slightly_smiling_face: - once we implement reconfiguration - that is","ts":"1464016546.002228"},{"type":"message","user":"U0ULK2JPP","text":"as is today","ts":"1464016548.002229"},{"type":"message","user":"U0XPR4NP4","text":"Recovery is driven by eavesdropping, so today, if there is no traffic, no recovery will occur.","ts":"1464016575.002230"},{"type":"message","user":"U0XPR4NP4","text":"Some of the proposed changes basically artificially generate traffic, so that recovery can occur.","ts":"1464016599.002231"},{"type":"message","user":"U0ULK2JPP","text":"if the answer is a \u201cgood machine\u201d will likely catch up, then the effect of letting-things-be is just to be darwinistic ?","ts":"1464016624.002232"},{"type":"message","user":"U0ULK2JPP","text":"ie, go back to what <@U0KPFAZNF> was saying - don\u2019t do anything, its part of the game","ts":"1464016680.002233"},{"type":"message","user":"U0XPR4NP4","text":"If the node was partitioned, and initiated a view change, its blockchain will slowly catchup, but it will not start participating in ordering\/executing until a view change occurs.","ts":"1464016694.002234"},{"type":"message","user":"U0XPR4NP4","text":"(We propose periodic view changes to solve this)","ts":"1464016705.002235"},{"type":"message","user":"U0ULK2JPP","text":"ok","ts":"1464016708.002236"},{"type":"message","user":"U0ULK2JPP","text":"\u201cnode was partitioned\u201d as in network partitioning ?","ts":"1464016740.002237"},{"type":"message","user":"U0XPR4NP4","text":"Think, ethernet cable got unplugged for a few minutes.","ts":"1464016761.002238"},{"type":"message","user":"U0ULK2JPP","text":"ok","ts":"1464016764.002239"},{"type":"message","user":"U0ULK2JPP","text":"thanks much!","ts":"1464016783.002240"},{"type":"message","user":"U0XPR4NP4","text":"You're welcome, anytime","ts":"1464016809.002241"},{"type":"message","user":"U0N1D1UAE","text":"<@U0KPFAZNF> <@U0XPR4NP4> The problem with allowing lagging nodes to lag permanently is that it obviates the need for this project. Why would a client invest in the infrastructure to add \u201cher\u201d node to the blockchain network, if her node is not going to be up-to-date? The database might as well become a centralized service then. \u201cStrong reads\u201d are another example of a solution that calls into question the need for the blockchain. I don\u2019t want the network to wait for the slowest node, but I think all nodes need to make progress as fast as they can unless they are faulty.","ts":"1464017492.002242"},{"type":"message","user":"U0KPFAZNF","text":"<@U0N1D1UAE>: from my perspective, its the opposite\u2026you would want to use this project specifically _because_ its resistant to a slow node and a result can be validated with a strong-read.","ts":"1464017616.002243"},{"type":"message","user":"U0N1D1UAE","text":"You can do that already","ts":"1464017629.002244"},{"type":"message","user":"U0N1D1UAE","text":"with other distributed databases","ts":"1464017642.002245"},{"type":"message","user":"U0KPFAZNF","text":"i have to step out for a dr appt, to be continued...","ts":"1464017656.002246"},{"type":"message","user":"U0XPR4NP4","text":"<@U0N1D1UAE>: Other distributed databases are not byzantine fault tolerant?","ts":"1464017706.002247"},{"type":"message","user":"U0XPR4NP4","text":"[I'm actually inclined to agree with you with respect to keeping up to date with the network, just trying to understand where everyone is coming from]","ts":"1464017787.002248"},{"type":"message","user":"U0N1D1UAE","text":"<@U0XPR4NP4> I\u2019m coming from trying to understand how to explain the value proposition of joining a permissioned peer network as a peer. It seems that the current consensus system makes sense if the peer networks are not large, but composed of only a few independent players that everyone trusts, where most participants set up read-only peers that do strong reads from the trusted core. I don\u2019t think this is how we currently explain the benefits of blockchain however, it\u2019s all about everyone having all of the data.","edited":{"user":"U0N1D1UAE","ts":"1464019150.000000"},"ts":"1464019051.002249"},{"type":"message","user":"U0ULK2JPP","text":"<@U0N1D1UAE>: \u201c \u2026. allowing lagging nodes to lag permanently \u2026\u201d  - if that can, in general, happen only with byzantine nodes or slow machines., that is, it is not \u201ctypical\u201d scenario, I\u2019d think that\u2019s also subsumed by the model ? ie, nodes that lag behind deserve to lag behind\u2026.","ts":"1464019138.002250"},{"type":"message","user":"U0XQ35CDD","text":"<@U0N1D1UAE>: I would replace \"everyone trusts\" with \"limited trust\", and we make up for that lack of trust by checking for Byzantine faults","ts":"1464019174.002252"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ULK2JPP>: I think the difference here is that your machine doesn't have to be \"slow\" to be left behind.   In general, the f slowest replicas will constantly be lagging, even if they are 99% as fast as the 2f+1st fastest replica, whenever the system is under high load.","ts":"1464019529.002253"},{"type":"message","user":"U0ULK2JPP","text":"ah true. understood\u2026(thanks <@U0XPR4NP4> !)","ts":"1464019587.002254"},{"type":"message","user":"U0ULK2JPP","text":"interesting, its like this discussion. If its slow enough, I can catchup :slightly_smiling_face: \u2026. if that analogy holds, isn;t it a matter of flow control ?","ts":"1464020202.002255"},{"type":"message","user":"U0XV1HDL3","text":"Interesting &amp; good discussion here.\nMy 2c: \n<@U0XRC0KLH> - Ensemble would be the wrong place to look for a solution because there, if a node does not respond after a timeout, then it is faulty in the *worst* possible way that matters, because it only considers crashes. So if the slow node times out, it can be thrown out and we do not harm the system. Also, Ensemble will reconfigure the group for this. On the other hand, in the BFT model, a slow node shows a *mild* form of fault, because it could catch up later and fill in for an actually misbehaving node. So the suggested solution makse sense to me (use a moderate timeout, tuned to the progress rate of the others, with sth like the 20% idea). The inflow control must also be adjusted to what the system can handle.\n<@U0KPFAZNF>: Operating in with much asynchrony and permit the lagging nodes will create an issue with buffering: in theory we can pretend nodes perpetually try to resend to the slow nodes, but this implies unbounded buffers, either at the sender or in a communication channel like TCP. None of them has such unbounded memory in practice though. Thats why the proposed solutions are needed (periodic view change, gossip, and so on).","ts":"1464021202.002256"},{"type":"message","user":"U0KPFAZNF","text":"<@U0N1D1UAE>: back","ts":"1464023256.002257"},{"type":"message","user":"U0KPFAZNF","text":"so, you were wondering what is the value proposition if you were to go through the trouble of installing a VP only to have it be summarily ignored by the network IIUC","edited":{"user":"U0KPFAZNF","ts":"1464023345.000000"},"ts":"1464023326.002258"},{"type":"message","user":"U0KPFAZNF","text":"theres two parts to that answer","ts":"1464023372.002260"},{"type":"message","user":"U0KPFAZNF","text":"the first part is the value proposition to _everyone else_\u2026that is, someone bringing a subpar node\/network to the cluster doesn\u2019t take everyone else down with it","ts":"1464023451.002261"},{"type":"message","user":"U0KPFAZNF","text":"the second is to recognize that \u201cvalidation\u201d is actually a multi faceted beast:  one part is the part we often talk the most about\u2026the notion of computing a signature for a given transaction juxtaposed against a specific world state\u2026.the second part is about validating the signatures of all the participating validating peers","ts":"1464023641.002262"},{"type":"message","user":"U0KPFAZNF","text":"any VP has the ability to participate in the first part, but we only need a certain subset to achieve quorum\u2026.its a best effort contribution in the hope that your VP helps the network make forward progress","ts":"1464023748.002263"},{"type":"message","user":"U0KPFAZNF","text":"its the second part that is actually important w.r.t. the value proposition of a potential participant\u2026the ability to verify that everything looks kosher, up to the limits of the byzantine resistance of the network.","edited":{"user":"U0KPFAZNF","ts":"1464024131.000000"},"ts":"1464023799.002264"},{"type":"message","user":"U0KPFAZNF","text":"A slow node only loses out in the ability to help achieve quorum, it doesn\u2019t lose out in its ability to ascertain the legitimacy of the world state","edited":{"user":"U0KPFAZNF","ts":"1464023900.000000"},"ts":"1464023886.002265"},{"type":"message","user":"U0KPFAZNF","text":"What I am trying to say is, liveliness\/real-time doesn\u2019t matter for the most important function, it can be done offline at any time in the future.","ts":"1464023974.002267"},{"type":"message","user":"U0KPFAZNF","text":"If, on the other hand, we are saying that all things being equal, certain nodes may never catch up, we should probably try to address that so its more even","ts":"1464024185.002269"},{"type":"message","user":"U0KPFAZNF","text":"but if someone introduces a particularly slow node and\/or connection, i have absolutely no problem with the notion that it might never contribute a signature","ts":"1464024436.002270"},{"type":"message","user":"U0KPFAZNF","text":"<@U0XV1HDL3>: understand what you are getting at:  What I am saying is that at least for certain use cases, there will be a natural flow control at a higher level","ts":"1464025818.002271"},{"type":"message","user":"U0KPFAZNF","text":"for instance, if I am doing UTXOs, im probably not going to blast a chain of 100k successive spends of the same coin..rather I am going to do certain transactions and then block for confirmation","ts":"1464025914.002272"},{"type":"message","user":"U0KPFAZNF","text":"if confirmation is slow, my spend requests slow down","ts":"1464025938.002273"},{"type":"message","user":"U0KPFAZNF","text":"thats all I was getting at","ts":"1464025965.002274"},{"type":"message","user":"U0XPR4NP4","text":"<@U0KPFAZNF>: Do you see clients querying 'the network', or, 'their validating peer'?","ts":"1464026376.002275"},{"type":"message","user":"U0KPFAZNF","text":"Thats a tough question\u2026.we didn\u2019t have the notion of query() like the one that exists in HLF.  Everything went through consensus, which solves some problems (and creates others).  When I first joined OBC I didn\u2019t like the notion of \u201ctrusting your NVP\u201d, at least partly because I didn\u2019t view it as \u201cpart of the client stack\u201d.   If you do view it that way (or consume something more explicit like the upcoming node sdk), it seemed that \u201cstrong read\u201d was the only way to go.  However, I think the current mechanism for query() is not really conducive to strong reads so I am not sure we have much of a choice","edited":{"user":"U0KPFAZNF","ts":"1464026639.000000"},"ts":"1464026611.002276"},{"type":"message","user":"U0KPFAZNF","text":"we would either need to be able to specify the block height in the request (which may have implications for clients that ask for sufficiently old blocks), or to include block height in the response so that clients could tell when they get a stale answer (as opposed to a byzantine answer)","ts":"1464026718.002278"},{"type":"message","user":"U0KPFAZNF","text":"I do like what you were getting at the other day with the notion that we can probably \u201cpush\u201d some kind of synchronizing signal w.r.t. \u201ccurrent\u201d rather than requiring remote end points to try to request it","ts":"1464026796.002279"},{"type":"message","user":"U0KPFAZNF","text":"i think that is part of the story here.","ts":"1464026810.002280"},{"type":"message","user":"U0XPR4NP4","text":"Yes, there seem to be two camps to some extent. The \"You can't possibly trust the result unless it's a strong read, which goes to the whole network\" and then the other side of \"So long as I know my copy of the blockchain is correct, there's no reason to go to the network\"","ts":"1464026878.002281"},{"type":"message","user":"U0XQ35CDD","text":"don't checkpoints play that role of the synchronizing signal?","ts":"1464026894.002282"},{"type":"message","user":"U0XPR4NP4","text":"That is one proposal","ts":"1464026912.002283"},{"type":"message","user":"U0XPR4NP4","text":"(And one I like)","ts":"1464026916.002284"},{"type":"message","user":"U0KPFAZNF","text":"just realized my first statement above was incoherent (sorry, just had my eyes dilated and cant see very clearly right now, heh)","ts":"1464027028.002285"},{"type":"message","user":"U0KPFAZNF","text":"what I meant was, if you can get to \u201ci trust my stack\u201d, then a weak read is ok","ts":"1464027054.002286"},{"type":"message","user":"U0KPFAZNF","text":"but I do think that \u201ctrusting your stack\u201d really means that you own an NVP-like representation of the chain locally","edited":{"user":"U0KPFAZNF","ts":"1464027103.000000"},"ts":"1464027091.002287"},{"type":"message","user":"U0XPR4NP4","text":"The sort of fundamental architecture question I have is whether clients get to talk to the whole network or not.  As I've heard it described before, you have 4 companies, each running a validating peer, and of course, company A isn't going to let clients from company B query its validating peer, because of firewalls and generally because they do not want to pay to support their queries (maybe company B runs 100x the queries of company A).","ts":"1464027113.002289"},{"type":"message","user":"U0KPFAZNF","text":"I have always envisioned they could, but i see your point","ts":"1464027202.002290"},{"type":"message","user":"U0KPFAZNF","text":"let me think about it some more","ts":"1464027230.002291"},{"type":"message","user":"U0XPR4NP4","text":"And maybe it's fine that they can, but if they cannot, it changes the implementation considerably","ts":"1464027231.002292"},{"type":"message","user":"U0KPFAZNF","text":"agreed","ts":"1464027246.002293"},{"type":"message","user":"U0XPR4NP4","text":"I think in the bitcoin world, they would say \"It's totally unacceptable to have to go ask the network, I need to be able to trust queries against my node\".  Of course I think that's a little disingenuous, you still need information from the network, like the current block height, to actually trust your node, but I still understand their concern that doing strong reads is very much a different paradigm.  It would be nice to support both.","ts":"1464027350.002294"},{"type":"message","user":"U0XQ35CDD","text":"<@U0KPFAZNF>: as long as you have f+1 checkpoints for block X (which is a process that happens during PBFT), your local chain is solid up to that point, so a weak read is good. checkpoint messages keep coming periodically and harden your local chain up to block Y (Y &gt; X), so eventually you get a longer chain you can trust. do you see any drawbacks to that?","ts":"1464027367.002295"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XQ35CDD> There is the censorship problem, but I think with the 'time, crontab' stuff <@U0ULK2JPP> is working on, you would be able to detect that","ts":"1464027428.002296"},{"type":"message","user":"U0XQ35CDD","text":"censorship from whom specifically?","ts":"1464027458.002297"},{"type":"message","user":"U0XPR4NP4","text":"A VP censoring updates to a client.  Censorship would be the malicious form, but you could simply go with 'staleness' as a more general term.","edited":{"user":"U0XPR4NP4","ts":"1464027543.000000"},"ts":"1464027496.002298"},{"type":"message","user":"U0XQ35CDD","text":"correct, but not an unfixable problem. in the end, unless you're partitioned (at which case you have bigger problems), you should be able to get those checkpoints.","ts":"1464027635.002301"},{"type":"message","user":"U0KPFAZNF","text":"<@U0XQ35CDD>: when I first joined the project, I was bothered by that model because I saw the local NVP as part of \u201cthe network\u201d and not part of \u201cthe client\u201d.  I think when we start to talk about having the NVP be part of the client figuratively (or literally via the nodesdk) then it becomes more practical.  I think the important distinction is when looking at \u201cthe trust line\u201d.   On the trusted side of the trust line, single points of reference are \u201cok\u201d.  On the untrusted side, you have to \u201cfan out\u201d or \u201cstrong read\u201d\u2026.now by strong read, I dont mean necessarily w.r.t. transactions\/queries\u2026but rather just the notion that multiple points of reference are considered\u2026.this would include consensus\/ledger level comms","ts":"1464027661.002302"},{"type":"message","user":"U0KPFAZNF","text":"bridging the trust line must consider the entire network state, IOW","ts":"1464027716.002303"},{"type":"message","user":"U0XQ35CDD","text":"agreed","ts":"1464027739.002304"},{"type":"message","user":"U0KPFAZNF","text":"lunch time, bbiab","ts":"1464027803.002305"},{"user":"U196VQF1N","type":"message","subtype":"channel_join","text":"<@U196VQF1N|vladimir.starostenkov> has joined the channel","ts":"1464035143.002306"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XPR4NP4> are <https:\/\/github.com\/hyperledger\/fabric\/issues\/1538> and <https:\/\/github.com\/hyperledger\/fabric\/issues\/1091> really consensus related?","attachments":[{"service_name":"GitHub","title":"Consensus sieve has error on both LoZ and X86 platforms -- one peer cannot get block  \u00b7 Issue #1538 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/issues\/1538","text":"Description Get the latest hyper ledger code (commit 66ca505 ) Run with busywork and get error from peers. After tested with @bcbrock , he confirmed that this is bug with sieve on LoZ platform....","fallback":"GitHub: Consensus sieve has error on both LoZ and X86 platforms -- one peer cannot get block  \u00b7 Issue #1538 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/12942488?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/issues\/1538","thumb_width":420,"thumb_height":420,"id":1},{"service_name":"GitHub","title":"REST API \/chain\/blocks\/&lt;n&gt; returns empty blocks (other than block 0) \u00b7 Issue #1091 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/issues\/1091","text":"This issue is observed in conjunction with another error case, see #920. When a test program makes the REST API call \/chain\/blocks\/, it gets a normal HTTP response but the data is NULL, i.e., the b...","fallback":"GitHub: REST API \/chain\/blocks\/ returns empty blocks (other than block 0) \u00b7 Issue #1091 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars2.githubusercontent.com\/u\/11968347?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/issues\/1091","thumb_width":400,"thumb_height":400,"id":2}],"ts":"1464077576.002307"},{"type":"message","user":"U0Y14MWA2","text":"they might as well be - but this is not immediate\/obvious","ts":"1464077591.002309"},{"type":"message","user":"U0XR6J961","text":"<@U0ULK2JPP>: you are working \"time, crontab\"? what's this?","ts":"1464078825.002310"},{"type":"message","user":"U0ULK2JPP","text":"<@U0XR6J961> : more like \u201cplaying with\u201d. A time service using consensus based on <@U0XRC0KLH>\u2019s idea (a while back)","ts":"1464089276.002311"},{"type":"message","user":"U0XR6J961","text":"ah","ts":"1464089537.002312"},{"type":"message","user":"U0XR6J961","text":"how does it work?","ts":"1464089540.002313"},{"type":"message","user":"U0ULK2JPP","text":"basically a service will create  \u201cupdate\u201d time transactions periodically (at some granularity of seconds, say 1 second) on a system chaincode. If everyone consents based on accuracy within limits on their local clock time, that will serve as a global time. The time has to be coarse grained ( not msecs for example)\u2026.","ts":"1464089942.002314"},{"type":"message","user":"U0XR6J961","text":"everyone?","ts":"1464089976.002315"},{"type":"message","user":"U0ULK2JPP","text":"the devil will be in the details :slightly_smiling_face: but it is an interesting approach","ts":"1464089978.002316"},{"type":"message","user":"U0XR6J961","text":"or 2f+1?","ts":"1464089979.002317"},{"type":"message","user":"U0ULK2JPP","text":"2f+1","ts":"1464089990.002318"},{"type":"message","user":"U0XR6J961","text":"how do you tie in the validation?","ts":"1464089994.002319"},{"type":"message","user":"U0XR6J961","text":"what happens if the service stops updating the time?","ts":"1464090005.002320"},{"type":"message","user":"U0KM0C3M3","text":"Guardtime, my company, has a product that does exactly that (among other things)","ts":"1464090054.002321"},{"type":"message","user":"U0KM0C3M3","text":"and can be cryptographically verified out of band","ts":"1464090091.002322"},{"type":"message","user":"U0ULK2JPP","text":"there could be copies of  services","ts":"1464090109.002323"},{"type":"message","user":"U0KM0C3M3","text":"if that is a requirement, I would suggest we may have a ready solution","ts":"1464090126.002324"},{"type":"message","user":"U0XR6J961","text":"interesting - how would that go into hyperledger?","ts":"1464090164.002325"},{"type":"message","user":"U0XR6J961","text":"muralisr: i'm working on periodic null requests right now","ts":"1464090236.002326"},{"type":"message","user":"U0ULK2JPP","text":"<@U0XR6J961>: goroutine(s) built into the fabric for initiating transactions and a system chaincode","ts":"1464090241.002327"},{"type":"message","user":"U0XR6J961","text":"muralisr: that was directed to jamie.steiner","ts":"1464090276.002328"},{"type":"message","user":"U0XR6J961","text":"muralisr: i'm wondering - what about all consensus nodes attaching their idea of time to packets","ts":"1464090327.002329"},{"type":"message","user":"U0XR6J961","text":"(with signature)","ts":"1464090332.002330"},{"type":"message","user":"U0ULK2JPP","text":"<@U0KM0C3M3>: there\u2019s an issue that covers this broadly (@simone do you have the issue you created handy ?)","ts":"1464090371.002331"},{"type":"message","user":"U0XR6J961","text":"and then the leader compiles a list of times, which allows bounding the idea of time as \"somewhere between this and that value\"","ts":"1464090375.002332"},{"type":"message","user":"U0KM0C3M3","text":"access is available via an http service","ts":"1464090380.002333"},{"type":"message","user":"U0XR6J961","text":"although it is probably better not to attach it to the consensus service directly","ts":"1464090403.002334"},{"type":"message","user":"U0KM0C3M3","text":"we have a developer program which could be used to evaluate it: <https:\/\/guardtime.com\/blockchain-developers>","attachments":[{"title":"KSI Blockchain for Developers | Guardtime","title_link":"https:\/\/guardtime.com\/blockchain-developers","text":"KSI blockchain is built to be integrated into our digital lives and we have created the components for making the integrations easy. We have also made the KSI blockchain service available for non-commercial use by developers. \u00a0","fallback":"KSI Blockchain for Developers | Guardtime","from_url":"https:\/\/guardtime.com\/blockchain-developers","id":1}],"ts":"1464090422.002335"},{"type":"message","user":"U0KM0C3M3","text":"happy to get some of our developers to assist - <@U14FDQAS3> would be a good resource","edited":{"user":"U0KM0C3M3","ts":"1464090480.000000"},"ts":"1464090437.002337"},{"type":"message","user":"U0XR6J961","text":"jamie.steiner: i don't think that would work - the time keeping component needs to be part of hyperledger","ts":"1464090447.002338"},{"user":"U14FDQAS3","inviter":"U0KM0C3M3","type":"message","subtype":"channel_join","text":"<@U14FDQAS3|ristoalas> has joined the channel","ts":"1464090503.002340"},{"type":"message","user":"U0XR6J961","text":"muralisr: i suggested that peers compete in proposing the next time","ts":"1464090506.002341"},{"type":"message","user":"U0ULK2JPP","text":"<@U0XR6J961> yes. That\u2019s also an option\u2026 the time service would be on every peer","ts":"1464090541.002342"},{"type":"message","user":"U0KM0C3M3","text":"I would have thought time is the kind of thing an external oracle would be useful for","ts":"1464090543.002343"},{"type":"message","user":"U0XR6J961","text":"but then, do we want to record thousands of transactions a day that just update the time?","ts":"1464090544.002344"},{"type":"message","user":"U0ULK2JPP","text":"exactly","ts":"1464090550.002345"},{"type":"message","user":"U0XR6J961","text":"jamie.steiner: i don't think we should build a generic platform that is tied to one company's service","ts":"1464090578.002346"},{"type":"message","user":"U0ULK2JPP","text":"and in the end we also need this to work closely with crontab","ts":"1464090578.002347"},{"type":"message","user":"U0XR6J961","text":"what if your company disappears - suddenly all hyperledger blockchains stop working","ts":"1464090604.002348"},{"type":"message","user":"U0ULK2JPP","text":"loosely couple approach via a system chaincode helps us at least play with this","ts":"1464090627.002349"},{"type":"message","user":"U0XR6J961","text":"muralisr: what is crontab in this scenario?","ts":"1464090639.002350"},{"type":"message","user":"U0ULK2JPP","text":"basically allows users to specifiy \u201crun tx-A at this time\"","ts":"1464090675.002351"},{"type":"message","user":"U0ULK2JPP","text":"think timer-wheel going over transactions to run","ts":"1464090693.002352"},{"type":"message","user":"U0ULK2JPP","text":"triggers","ts":"1464090722.002353"},{"type":"message","user":"U0XR6J961","text":"and who triggers the transaction?","ts":"1464090725.002354"},{"type":"message","user":"U0XR6J961","text":"which peer","ts":"1464090727.002355"},{"type":"message","user":"U0ULK2JPP","text":"same thing as today. The peer to which the transaction is submitted will hold the crontab entry","ts":"1464090763.002356"},{"type":"message","user":"U0KM0C3M3","text":"as far as I am aware, a number of functions are designed to be pluggable, based on the deployment and the requirements.  It seems like one option could be to offer an external oracle for time.  Even the base consensus algorithm is more-or-less pluggable, right?","ts":"1464090772.002357"},{"type":"message","user":"U0XR6J961","text":"muralisr: so the local peer","ts":"1464090791.002358"},{"type":"message","user":"U0ULK2JPP","text":"correct","ts":"1464090802.002359"},{"type":"message","user":"U0KM0C3M3","text":"im not trying to create a dependency, just offering our expertise.","ts":"1464090809.002360"},{"type":"message","user":"U0XR6J961","text":"jamie.steiner: the aspiration is to make it pluggable","ts":"1464090811.002361"},{"type":"message","user":"U0XR6J961","text":"jamie.steiner: the difficulty is not the external oracle, but trusting its data and the way it has been introduced into the system","ts":"1464090860.002362"},{"type":"message","user":"U0XR6J961","text":"jamie.steiner: otherwise we could just use ntp","ts":"1464090868.002363"},{"type":"message","user":"U0XR6J961","text":"muralisr: but that notion of time would be independent of the chaincode's notion of time","ts":"1464090886.002364"},{"type":"message","user":"U0XR6J961","text":"muralisr: what happens if that peer goes down or suffers network outage, etc?","ts":"1464090905.002365"},{"type":"message","user":"U0ULK2JPP","text":"chaincode would have to have an API to on the shim to get the time","ts":"1464090988.002366"},{"type":"message","user":"U0KM0C3M3","text":"it's not similar to using ntp - in this case it would function as a TTS that does not require trust in a root certificate.","edited":{"user":"U0KM0C3M3","ts":"1464091028.000000"},"ts":"1464091007.002367"},{"type":"message","user":"U0KM0C3M3","text":"happy to discuss offline, if you are interested in evaluating the approach.","edited":{"user":"U0KM0C3M3","ts":"1464091057.000000"},"ts":"1464091038.002369"},{"type":"message","user":"U0XR6J961","text":"why offline?","ts":"1464091091.002371"},{"type":"message","user":"U0XR6J961","text":"this is perfect","ts":"1464091096.002372"},{"type":"message","user":"U0XR6J961","text":"the problem is that even if time comes from one oracle, how do you know that you can trust the entity that took the time from the oracle, and gave you the right value?","ts":"1464091132.002373"},{"type":"message","user":"U0ULK2JPP","text":"and the time service would be across validators ( skewed on a random sleep )","ts":"1464091133.002374"},{"type":"message","user":"U0KM0C3M3","text":"here is fine as well.  will have to come back after a while though, i have a call","ts":"1464091138.002375"},{"type":"message","user":"U0XR6J961","text":"it could have delayed the message for an arbitrary time","ts":"1464091146.002376"},{"type":"message","user":"U0KM0C3M3","text":"a particular message, is submitted to our service, gets a time associated with it that is universal.","ts":"1464091179.002377"},{"type":"message","user":"U0ULK2JPP","text":"in the end, the idea is to have something loosely coupled and easy enough to work with for everyone","ts":"1464091202.002378"},{"type":"message","user":"U0ULK2JPP","text":"built upon  and using fabric\u2019s mechanisms such as consensus","ts":"1464091228.002379"},{"type":"message","user":"U0XR6J961","text":"i'm interested in the specific implementation","ts":"1464091251.002380"},{"type":"message","user":"U0XR6J961","text":"so the crontab is just a \"submit this transaction after time X\"","ts":"1464091267.002381"},{"type":"message","user":"U0XR6J961","text":"that's the equivalent to the bitcoin mempool, in a way","ts":"1464091278.002382"},{"type":"message","user":"U0ULK2JPP","text":"\u201caround time X\u201d is more accurate I think","ts":"1464091289.002383"},{"type":"message","user":"U0XR6J961","text":"what does \"around\" mean?","ts":"1464091312.002384"},{"type":"message","user":"U0ULK2JPP","text":"won\u2019t be at 11.01.22.536 exactly \u2026 but between 11.02.22 and 11.02.24","ts":"1464091364.002385"},{"type":"message","user":"U0XR6J961","text":"so after 11.02.22","ts":"1464091371.002386"},{"type":"message","user":"U0ULK2JPP","text":"within tolerance","ts":"1464091383.002387"},{"type":"message","user":"U0XR6J961","text":"that's too vague for me","ts":"1464091394.002388"},{"type":"message","user":"U0ULK2JPP","text":"really ? well,  tolerance is just so we build the system to be not too finegrained. Idea being that in the end the execution of transactions cannot be accurately set for time, why make it a requirement that it should be initiated at an exact time","ts":"1464091550.002389"},{"type":"message","user":"U0ULK2JPP","text":"the crontab has to do work and the tolerance just gives us the room to do it","ts":"1464091593.002390"},{"type":"message","user":"U0XR6J961","text":"i didn't say initiated at an exact time","ts":"1464091696.002391"},{"type":"message","user":"U0XR6J961","text":"i said after some specific time","ts":"1464091708.002392"},{"type":"message","user":"U0ULK2JPP","text":"right","ts":"1464091740.002393"},{"type":"message","user":"U0XR6J961","text":"also do you want to trigger the transaction based on real world time, or based on agreed-upon chaincode time?","ts":"1464091768.002394"},{"type":"message","user":"U0XR6J961","text":"and why","ts":"1464091770.002395"},{"type":"message","user":"U0ULK2JPP","text":"you mean the \u201ccrontab\u201d transaction ?","ts":"1464092063.002396"},{"type":"message","user":"U0ULK2JPP","text":"that\u2019s just a service system provides so users can initiated a transaction based on system time","ts":"1464092113.002397"},{"type":"message","user":"U0XR6J961","text":"just local time","ts":"1464092204.002398"},{"type":"message","user":"U0XR6J961","text":"ok","ts":"1464092207.002399"},{"type":"message","user":"U0ULK2JPP","text":"again this is just something to try out as the implementation is not too hard","ts":"1464092457.002400"},{"type":"message","user":"U0XR6J961","text":"try out is bad","ts":"1464092965.002401"},{"type":"message","user":"U0XR6J961","text":"because it doesn't consider all issues that can arise","edited":{"user":"U0XR6J961","ts":"1464092992.000000"},"ts":"1464092982.002402"},{"type":"message","user":"U0ULK2JPP","text":"obviously this is not for merge into mainline","ts":"1464093096.002404"},{"type":"message","user":"U0XR6J961","text":"sure, but what i'm saying is that this needs a requirements doc, etc.","ts":"1464093150.002405"},{"type":"message","user":"U0XR6J961","text":"e.g. what happens if you submit a request, and the peer crashes and restarts?","ts":"1464093174.002406"},{"type":"message","user":"U0ULK2JPP","text":"correct. Theres a persistent component to crontab.","ts":"1464093368.002407"},{"type":"message","user":"U0ULK2JPP","text":"as for requirements doc, definitely. The implement is to test the mechanics fairly quickly and fail fast.","ts":"1464093800.002408"},{"type":"message","user":"U0XR6J961","text":"problem with consensus and security is that you don't fail fast :slightly_smiling_face:","ts":"1464097741.002409"},{"type":"message","user":"U0ULK2JPP","text":"haha..you could be right","ts":"1464097850.002410"},{"type":"message","user":"U0KM0C3M3","text":"<@U0XR6J961>: \"the problem is that even if time comes from one oracle, how do you know that you can trust the entity that took the time from the oracle, and gave you the right value?\" can you elaborate?  is the problem that you cant trust the accuracy of the time, or that you cant trust that the entity took some action at that particular moment?","ts":"1464100322.002411"},{"type":"message","user":"U0XR6J961","text":"either","ts":"1464100347.002412"},{"type":"message","user":"U0KM0C3M3","text":"I realize that our solution is specific to my company's service, but I can explain how we solve that problem.  I understand you may feel there is a reason to make a time stamping component that is intrinsic to the hyperledger stack.  If, however, there is a possibility to use an external source as an oracle for time, our service would serve well in that role. \n\nSpecifically, our blockchain creates one block every second, verifiable through public observation that there are 3600 blocks every hour, etc. Any piece of data or action that can be represented as data can be signed, and it's proof of existence at that point in time can be proven.  The trust anchor is widely witnessed evidence that is periodically published in newspapers.  the time can be backed out from that.","ts":"1464100761.002413"},{"type":"message","user":"U0XR6J961","text":"but only for the past","ts":"1464100887.002414"},{"type":"message","user":"U0XR6J961","text":"not for the current time","ts":"1464100891.002415"},{"type":"message","user":"U0XR6J961","text":"i can not be sure that the time you just published is actually timely - you might have delayed publication by a some time","ts":"1464100933.002416"},{"type":"message","user":"U0XR6J961","text":"but, for a moment, let's assume that you act honestly","ts":"1464100967.002417"},{"type":"message","user":"U0XR6J961","text":"whatever node that introduces your timestamp into the hyperledger blockchain might just delay your honest timestamp arbitrarily","ts":"1464100994.002418"},{"type":"message","user":"U0KM0C3M3","text":"if you are assuming that our service acts honestly, and I present you a signature that relates to a particular time - you must agree agree that this time has passed.","ts":"1464101093.002419"},{"type":"message","user":"U0XR6J961","text":"no","ts":"1464101110.002420"},{"type":"message","user":"U0XR6J961","text":"that *at least* this time has passed","ts":"1464101120.002421"},{"type":"message","user":"U0XR6J961","text":"but it could be a day later in fact","ts":"1464101133.002422"},{"type":"message","user":"U0XR6J961","text":"and it is a stale piece of information","ts":"1464101142.002423"},{"type":"message","user":"U0KM0C3M3","text":"sure, but if other timestamps from moments after that are known, then the stale nature is obvious.  it seems trivial to sign a piece of data every second and avoid this.","ts":"1464101229.002424"},{"type":"message","user":"U0XR6J961","text":"but all of these signed timestamps could be delayed by a day","ts":"1464101387.002425"},{"type":"message","user":"U0XR6J961","text":"nobody can tell the difference","ts":"1464101395.002426"},{"type":"message","user":"U0KM0C3M3","text":"anyone who has access to the service can get a fresh timestamp and see that it returns in a second.  I'm not sure i understand how it can be delayed.","ts":"1464101653.002427"},{"type":"message","user":"U0XR6J961","text":"chaincode cannot access the network","ts":"1464101789.002428"},{"type":"message","user":"U0XR6J961","text":"so this needs to be integrated into the hyperledger code","ts":"1464101819.002429"},{"type":"message","user":"U0XR6J961","text":"but different replicas will receive the request at different times","ts":"1464101847.002430"},{"type":"message","user":"U0XR6J961","text":"at that point, the replicas might as well just look at their local clock","ts":"1464101874.002431"},{"type":"message","user":"U0KM0C3M3","text":"hmm, I see.  so the real issue is that the notion of time has to be local to the chaincode, not the node that is executing the chaincode?  I dont agree that the local clock is as good - there is still the notion of an outside, impartial proof of what time is.  It is separate from, and independent from the local clock in a useful way.","ts":"1464101957.002432"},{"type":"message","user":"U0N1D1UAE","text":"<@U0XPR4NP4> Jason, regarding PR #1557, I apologize, I didn\u2019t realize the extent of the problem. I had assumed that the choice was between \u201cstale\u201d and \u201cup-to-date\u201d values. Of course the query should never return garbage.","ts":"1464102014.002433"},{"type":"message","user":"U0XR6J961","text":"jamie.steiner: but ntp is also impartial","ts":"1464102033.002434"},{"type":"message","user":"U0XR6J961","text":"bcbrock: that's #1091","ts":"1464102061.002435"},{"type":"message","user":"U0XPR4NP4","text":"<@U0N1D1UAE>: Not a problem, it's great to have interest to get these things fleshed out, I completely agree we need a better way to communicate this through the API","ts":"1464102085.002436"},{"type":"message","user":"U0XR6J961","text":"we totally have to","ts":"1464102098.002437"},{"type":"message","user":"U0XR6J961","text":"it's a long standing problem","ts":"1464102107.002438"},{"type":"message","user":"U0KM0C3M3","text":"its accuracy is not independently provable, and an attestation of time by ntp cannot be transferred or verified by a third party","ts":"1464102108.002439"},{"type":"message","user":"U0XR6J961","text":"ntp's accuracy is as provable as your accuracy","ts":"1464102160.002440"},{"type":"message","user":"U0XR6J961","text":"you say \"look at our past performance, we've been working correctly\"","ts":"1464102192.002441"},{"type":"message","user":"U0KM0C3M3","text":"I disagree.  you can choose to trust it locally, if you choose, but you cannot later explain to a third party why you chose that.  an ntp timestamp is just a piece of data","ts":"1464102202.002442"},{"type":"message","user":"U0XR6J961","text":"but that doesn't mean that the current timestamp is not wrong","ts":"1464102204.002443"},{"type":"message","user":"U0XR6J961","text":"that is correct","ts":"1464102212.002444"},{"type":"message","user":"U0XR6J961","text":"but for a byzantine fault tolerant network, trusting one external oracle is silly anyways","ts":"1464102275.002445"},{"type":"message","user":"U0KM0C3M3","text":"inevitably, it has to connect to external events.","ts":"1464102329.002446"},{"type":"message","user":"U0KM0C3M3","text":"and oracles will be required.","ts":"1464102341.002447"},{"type":"message","user":"U0XR6J961","text":"well if i trust an oracle","ts":"1464102362.002448"},{"type":"message","user":"U0KM0C3M3","text":"if not for time, then for what LIBOR is, or whether company XYZ defaulted.","ts":"1464102368.002449"},{"type":"message","user":"U0XR6J961","text":"why don't i just run all the code there","ts":"1464102368.002450"},{"type":"message","user":"U0XR6J961","text":"then i can skip the whole byzantine threat model","ts":"1464102387.002451"},{"type":"message","user":"U0KM0C3M3","text":"I think the problem of trusting code execution is separate from the problem of how a ledger connects to external events.","ts":"1464102471.002452"},{"type":"message","user":"U0XR6J961","text":"sure","ts":"1464102492.002453"},{"type":"message","user":"U0XR6J961","text":"the fundamental question is, how do we trust the data that is input","ts":"1464102517.002454"},{"type":"message","user":"U0KM0C3M3","text":"if your view is that every trusted event that impacts the state of the ledger must be generated within the ledger, I believe the scope of what can be accomplished is much limited.","ts":"1464102545.002455"},{"type":"message","user":"U0XR6J961","text":"and our answer seems to be \"if enough peers can validate hat the input reflects (approximately) its real value, then it is accepted\"","ts":"1464102573.002456"},{"type":"message","user":"U0KM0C3M3","text":"perhaps time is not the best example - im sure you can implement some method to come to consensus around what the time is.","ts":"1464102583.002457"},{"type":"message","user":"U0XR6J961","text":"another answer is \"if an external trusted entity certifies the fact\"","ts":"1464102625.002458"},{"type":"message","user":"U0XR6J961","text":"i.e. you for time, the FED for interest rates, etc.","ts":"1464102637.002459"},{"type":"message","user":"U0KM0C3M3","text":"the devil is in the details - for example, what \" (approximately)\" means for time seems fairly agreeable - it might be harder for LIBOR, but certainly the logic will be different, and the tolerance for different type of data is likely to be hotly contested.","ts":"1464102720.002460"},{"type":"message","user":"U0XR6J961","text":"correct","ts":"1464102786.002461"},{"type":"message","user":"U0XR6J961","text":"i suggested creating a framework for consenting on external data long ago","ts":"1464102805.002462","reactions":[{"name":"+1","users":["U0KPFAZNF"],"count":1}]},{"type":"message","user":"U0XR6J961","text":"but it was not considered the right approach, i guess","ts":"1464102825.002463"},{"type":"message","user":"U0XR6J961","text":"<@U0XPR4NP4>, <@U0Y14MWA2>: i'm thinking about how to do periodic null requests, and they are more complicated than you'd think","ts":"1464103019.002464"},{"type":"message","user":"U0XR6J961","text":"sending a null request is simple, but when do you send it?  or rather, when do you expect that the primary sent one?","ts":"1464103039.002465"},{"type":"message","user":"U0XR6J961","text":"do you look at when you receive a pre-prepare?","ts":"1464103065.002466"},{"type":"message","user":"U0XR6J961","text":"or when the request commits or executes","ts":"1464103079.002467"},{"type":"message","user":"U0XR6J961","text":"i guess because of primary, pre-prepare.","ts":"1464103087.002468"},{"type":"message","user":"U0KPFAZNF","text":"<@U0XR6J961>: I fully agree with you.  1) oracles are not useful here, and 2) I think we _can_ create a framework for defining consensus on external events (and think, in fact, we have to)","ts":"1464103149.002469"},{"type":"message","user":"U0KPFAZNF","text":"this is part of what I was driving at with my comments in <https:\/\/github.com\/hyperledger\/fabric\/pull\/1513>","edited":{"user":"U0KPFAZNF","ts":"1464103209.000000"},"ts":"1464103201.002470"},{"type":"message","user":"U0KPFAZNF","text":"For instance, to use system-chaincode as the closest thing to approximate what could be part of the an external-event-framework, I envision these system chaincodes would need to be able to invoke transactions on other chaincode without a tcert context","ts":"1464103301.002473"},{"type":"message","user":"U0KPFAZNF","text":"for instance, to emit a time event","ts":"1464103319.002474"},{"type":"message","user":"U0XR6J961","text":"external data is just a different name for non-determinism","ts":"1464103405.002475"},{"type":"message","user":"U0XR6J961","text":"and it will be real difficult to do that","ts":"1464103432.002476"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: I would think it should be keyed off the commit.  The network is configured to send a null request  pre-prepare one second after the last commit if no new requests have been received.  Then, for the byzantine check, the backups would have some slightly longer timer, say, 2s for how long to allow between completing an execution, and receiving a commit cert for the next execution.","ts":"1464103438.002477"},{"type":"message","user":"U0XR6J961","text":"but that's way in the future","ts":"1464103440.002478"},{"type":"message","user":"U0XR6J961","text":"jyellick: but the primary only controls pre-prepares, not commits","ts":"1464103470.002479"},{"type":"message","user":"U0XR6J961","text":"but i'm glad you disagree - it's not obvious","ts":"1464103502.002480"},{"type":"message","user":"U0KM0C3M3","text":"i agree that where this conversation ended is largely very theoretical.  I do not believe it will be possible to generate all required data internally","ts":"1464103505.002481"},{"type":"message","user":"U0XPR4NP4","text":"I'm not convinced that pre-prepare is wrong, but once a pre-prepare has been broadcast (non-byzantinely) we should be guaranteed to get that commit cert.","ts":"1464103591.002482"},{"type":"message","user":"U0XPR4NP4","text":"I was thinking queue off of commit because its existence is evidence to the fact that the pre-prepare was broadcast in that non-byzantine way","ts":"1464103621.002483"},{"type":"message","user":"U0XPR4NP4","text":"As I think about it more, handling the timer off of pre-prepare seems safe, I think they should be equivalent, and off of 'pre-prepare' is more fair to the primary, as only its latency to send to the backups is counted against it, not the network latency.","ts":"1464103771.002484"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1464103804.002485"},{"type":"message","user":"U0XR6J961","text":"thanks","ts":"1464103807.002486"},{"type":"message","user":"U0XR6J961","text":"i'll try to implement that","ts":"1464103812.002487"},{"type":"message","user":"U0XR6J961","text":"jyellick: oh, it's all not so easy","ts":"1464103947.002488"},{"type":"message","user":"U0XR6J961","text":"what happens if there are no free sequence numbers?","ts":"1464103959.002489"},{"type":"message","user":"U0XR6J961","text":"so maybe commit is better","ts":"1464103964.002490"},{"type":"message","user":"U0XPR4NP4","text":"So I think the timer definitely needs to start after execution.  The big thing we cannot do is include the execution time and count it against the 'null timeout'","ts":"1464104014.002491"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: I've started prototyping converting `pbft-core.go` to be more state-machine-y, trying to do it in a PR friendly way in small chunks.  Would like to talk about it when you have some time.","ts":"1464104076.002492"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1464104091.002493"},{"type":"message","user":"U0XR6J961","text":"what's your plan?","ts":"1464104095.002494"},{"type":"message","user":"U0XPR4NP4","text":"So, essentially, there would be an 'event manager' who's simple task is to have an unbuffered channel, which events get delivered to an event receiver interface whose definition simply requires `processEvent(event interface{}) interface{}`, if `processEvent` returns something that is non-nil, it is treated as a new priority event to be processed next.\n\nSo for instance `pbft-core.go` becomes a `eventReceiver`, and its `processEvent` looks like:\n\n```\nfunc (instance *pbftCore) processEvent(event interface{}) {\n        logger.Debug(\"Replica %d processing event\", instance.id)\n\n        switch ev := event.(type) {\n        case viewChangeTimerEvent:\n                <http:\/\/logger.Info|logger.Info>(\"Replica %d view change timer expired, sending view change\", instance.id)\n                instance.sendViewChange()\n        case messageEvent:\n                msg := ev\n                logger.Debug(\"Replica %d received incoming message from %v\", instance.id, msg.sender)\n                instance.recvMsg(msg.msg, msg.sender)\n        case stateUpdatingEvent:\n                update := ev\n                instance.skipInProgress = true\n                instance.lastExec = update.seqNo\n                instance.moveWatermarks(instance.lastExec) \/\/ The watermark movement handles moving this to a checkpoint boundary\n...\n        case execDoneEvent:\n                instance.execDoneSync()\n        default:\n                logger.Error(\"Replica %d received an unknown message type\", instance.id)\n        }\n}\n```","edited":{"user":"U0XPR4NP4","ts":"1464104275.000000"},"ts":"1464104257.002495"},{"type":"message","user":"U0XPR4NP4","text":"Then for the plugins, they would also be `eventReciver`s, and they would first process the event, then pass it into PBFT core if they chose to","ts":"1464104302.002497"},{"type":"message","user":"U0XR6J961","text":"why the return?","ts":"1464104371.002498"},{"type":"message","user":"U0XPR4NP4","text":"My concern is overflowing the stack","ts":"1464104381.002499"},{"type":"message","user":"U0XR6J961","text":"so that there is a formalized way?","ts":"1464104386.002500"},{"type":"message","user":"U0XR6J961","text":"oh, go doesn't do tail calls?","ts":"1464104391.002501"},{"type":"message","user":"U0XPR4NP4","text":"Not to my knowledge","ts":"1464104399.002502"},{"type":"message","user":"U0XR6J961","text":"usually compilers do these days","ts":"1464104409.002503"},{"type":"message","user":"U0XPR4NP4","text":"(But I could be wrong)","ts":"1464104411.002504"},{"type":"message","user":"U0XR6J961","text":"i would implement whatever is easier","ts":"1464104423.002505"},{"type":"message","user":"U0XR6J961","text":"however, there needs to be an interface to enqueue events (timer events)","ts":"1464104434.002506"},{"type":"message","user":"U0XPR4NP4","text":"But generally, I dislike that at the end of `sendViewChange` we call `processNewView`, it seems like it would be clearer if we just injected that as an event","ts":"1464104450.002507"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I've also worked a little on that","ts":"1464104459.002508"},{"type":"message","user":"U0XR6J961","text":"timers need to be first class objects supported by the event manager","ts":"1464104472.002509"},{"type":"message","user":"U0XPR4NP4","text":"The key is timer events need to be cancel-able, and I think I've got that down","ts":"1464104474.002510"},{"type":"message","user":"U0XR6J961","text":"well, cancelling events is simple","ts":"1464104497.002511"},{"type":"message","user":"U0XR6J961","text":"you just set a field `cancelled` to `true`","ts":"1464104510.002512"},{"type":"message","user":"U0XPR4NP4","text":"It depends on your implementation but isn't necessarily quite that easy, you have the race in that case","ts":"1464104545.002513"},{"type":"message","user":"U0XR6J961","text":"the event manager will have to maintain its own timer wheel, and pick the next event from that wheel, and post it to `processEvent`","ts":"1464104570.002514"},{"type":"message","user":"U0XPR4NP4","text":"```\nif !cancelled {\n  sendEvent()\n}\n```\nWhat if it's canceled after it enters into the (blocking) `sendEvent()` call","ts":"1464104573.002515"},{"type":"message","user":"U0XR6J961","text":"who could cancel it?","ts":"1464104592.002516"},{"type":"message","user":"U0XR6J961","text":"only `processEvent` can cancel","ts":"1464104605.002517"},{"type":"message","user":"U0XPR4NP4","text":"So, classic case, we're executing a request, and the view change timer expires, then we cancel the view change timer because the execution finished, and we've still got this view change event waiting for us.","ts":"1464104664.002518"},{"type":"message","user":"U0XR6J961","text":"well no","ts":"1464104685.002519"},{"type":"message","user":"U0XR6J961","text":"because the event manager will go and wait on `newMessage() || timerExpired()`","ts":"1464104726.002520"},{"type":"message","user":"U0XR6J961","text":"it will get the timerExpired, but then sees that the timer got cancelled","ts":"1464104742.002521"},{"type":"message","user":"U0XR6J961","text":"so it discards it","ts":"1464104745.002522"},{"type":"message","user":"U0XPR4NP4","text":"Why not, simply have the timer not send the event if it is reset before the event is read?","ts":"1464104792.002523"},{"type":"message","user":"U0XR6J961","text":"or that","ts":"1464104807.002524"},{"type":"message","user":"U0XR6J961","text":"it's all internal to the event manager","ts":"1464104814.002525"},{"type":"message","user":"U0XPR4NP4","text":"Right.  I liked the idea of pushing the complexity of 'not sending canceled timers' into the timer, rather than into event delivery, but yes, the key is they both happen in the event manager.","ts":"1464104877.002526"},{"type":"message","user":"U0XR6J961","text":"so how do we ingress events?","ts":"1464104902.002527"},{"type":"message","user":"U0XR6J961","text":"does the public API just enqueue events to the event manager?","ts":"1464104917.002528"},{"type":"message","user":"U0XPR4NP4","text":"I say the event manager has a thread, the only thread which touches any state, and the public API will simply write events onto the unbuffered channel that event thread reads from","edited":{"user":"U0XPR4NP4","ts":"1464104967.000000"},"ts":"1464104948.002529"},{"type":"message","user":"U0XPR4NP4","text":"(So, generally, the public API calls would block until the event is delivered)","ts":"1464104994.002531"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1464104997.002532"},{"type":"message","user":"U0XR6J961","text":"so the event manager has two sources of events, its internal timer thing, and \"incoming\" event (channel), which is written to by the public API","ts":"1464105083.002533"},{"type":"message","user":"U0XPR4NP4","text":"Right.  The channel is of type `interface{}` so you can write whatever event type you want to onto it, which makes it nicely pluggable, then on the other side, the type switch figures out what event it is, and gives you whatever event metadata is required","ts":"1464105143.002534"},{"type":"message","user":"U0XPR4NP4","text":"I did some brief research, and doing switching based on the type like that is (according to stack overflow) 4-5 times slower than switching on an int, but that still seems plenty fast, the switching is not likely to be our performance bottleneck, and it could be re-written as an int type switch later if we really needed to.","ts":"1464105210.002535"},{"type":"message","user":"U0XR6J961","text":"how does that integrate with timers?","ts":"1464105212.002536"},{"type":"message","user":"U0XR6J961","text":"i like the way you're switching","ts":"1464105231.002537"},{"type":"message","user":"U0XR6J961","text":"although an alternative would be to enqueue funcs","ts":"1464105242.002538"},{"type":"message","user":"U0XR6J961","text":"and just execute them","ts":"1464105248.002539"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I considered the func queue, but this seemed less invasive to the current code, and not obviously worse","ts":"1464105273.002540"},{"type":"message","user":"U0XR6J961","text":"`chan &lt;- func(){ op.doFoo(arg) }`","ts":"1464105286.002541"},{"type":"message","user":"U0XPR4NP4","text":"The timer would simply be another type which would get shoved onto the channel.  I figured the manager could provide an interface for registering timer types","ts":"1464105287.002542"},{"type":"message","user":"U0XR6J961","text":"wait, onto the channel?","ts":"1464105306.002543"},{"type":"message","user":"U0XR6J961","text":"i don't know whether i like that channel API","ts":"1464105336.002544"},{"type":"message","user":"U0XR6J961","text":"i think a `eventManager.Queue(...)` and `eventManager.Timer(duration, ...)` would be more explicit and symmetrical","ts":"1464105411.002545"},{"type":"message","user":"U0XR6J961","text":"for testing, we would implement a different eventmanager, i guess","ts":"1464105461.002546"},{"type":"message","user":"U0XR6J961","text":"where timers just don't have any duration, but execute when there is nothing else happening","ts":"1464105485.002547"},{"type":"message","user":"U0XR6J961","text":"of course the timer events would still be ordered properly","ts":"1464105494.002548"},{"type":"message","user":"U0XR6J961","text":"the more i think about the null requests, the less happy i am about them","ts":"1464105559.002549"},{"type":"message","user":"U0XR6J961","text":"watermarks only update when checkpoints are reached","ts":"1464105596.002550"},{"type":"message","user":"U0XR6J961","text":"so that binds in execution","ts":"1464105616.002551"},{"type":"message","user":"U0XR6J961","text":"i don't think null requests are a clear and simple solution","ts":"1464105711.002552"},{"type":"message","user":"U0XPR4NP4","text":"The channel would not be exposed to the outside world, only internal to the event manager, but because the timers are contained in the event manager, they are free to interact with it directly (which, I just showed <@U0XQ35CDD>, makes for some pretty clean code).  We could have an API on the event manager so that someone like `RecvMsg` could write `manager.Queue(event interface{})` which then blocks on a channel write, or we could have the API call write to the channel directly.  The channel is more flexible, but the API call is maybe more approachable.","ts":"1464106097.002553"},{"type":"message","user":"U0KPFAZNF","text":"<@U0XR6J961>: you mentioned external data is non deterministic and thats a problem\u2026.I would argue, thats the point","ts":"1464106243.002554"},{"type":"message","user":"U0XPR4NP4","text":"As to null requests, the eventual target would be to actually update watermarks based on sequence numbers from non-checkpoints.  I discussed with <@U0XQ35CDD> this weekend on why the original implementation used checkpoints, but there's nothing preventing it.","ts":"1464106255.002555"},{"type":"message","user":"U0KPFAZNF","text":"we want it to go through consensus\u2026","ts":"1464106260.002556"},{"type":"message","user":"U0KPFAZNF","text":"if 7 out of 10 nodes agree it is at least May 24 2016 UTC, then it is at least May 24 2016, otherwise it isnt","ts":"1464106314.002557"},{"type":"message","user":"U0KPFAZNF","text":"non-deterministic events will never be legitimized\u2026we just need to make sure the system can handle the possibility of their introduction","ts":"1464106356.002558"},{"type":"message","user":"U0KPFAZNF","text":"to be clear, the framework would only support the confirmation of events that have some semblance of determinism to them\u2026.the passing of a date, the delivery of a package, the current interest rate by the FED, etc\u2026its the job of the framework to associate consensus around that, not to legitimize random stuff being injected","ts":"1464106529.002559"},{"type":"message","user":"U0XR6J961","text":"jyellick: so what's the api of the event manager?","ts":"1464107034.002560"},{"type":"message","user":"U0XR6J961","text":"is it `Queue(interface{}), Timer(duration, interface{}) someTimerObj), Cancel(someTimerObjType)`?","ts":"1464107094.002561"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: Not yet finalized, but I'm not certain there needs to be anything other than `Queue`, you can create the timer with a reference to the event manager, and then use the timer's `start` and `stop` methods.","ts":"1464107197.002562"},{"type":"message","user":"U0XR6J961","text":"no","ts":"1464107270.002563"},{"type":"message","user":"U0XPR4NP4","text":"The actual 'event wheel' type stuff could be implemented separately, as you have in custodian","ts":"1464107283.002564"},{"type":"message","user":"U0XR6J961","text":"for tests the timers must be non-timers","ts":"1464107286.002565"},{"type":"message","user":"U0XPR4NP4","text":"You could have the manager act as a timer factory if you wanted","ts":"1464107321.002566"},{"type":"message","user":"U0XR6J961","text":"the event wheel must be in the event manager","ts":"1464107326.002567"},{"type":"message","user":"U0XPR4NP4","text":"I don't see why","ts":"1464107332.002568"},{"type":"message","user":"U0XPR4NP4","text":"You have an event wheel in custodian, which seems to work fine, it just needs to not have a go routine","ts":"1464107352.002569"},{"type":"message","user":"U0XR6J961","text":"because otherwise, how can the event manager decide whether to service a timer or an event?","ts":"1464107353.002570"},{"type":"message","user":"U0XPR4NP4","text":"Because it only gets the timer event if the event is not canceled","ts":"1464107366.002571"},{"type":"message","user":"U0XR6J961","text":"so the event manager internally uses something that implements a timer wheel?","ts":"1464107398.002572"},{"type":"message","user":"U0XPR4NP4","text":"Why do you need a timer wheel? Why not simply atomically get timer events, if you receiver a timer event, then it is valid.","ts":"1464107427.002573"},{"type":"message","user":"U0XR6J961","text":"who produces the timer events?","ts":"1464107440.002574"},{"type":"message","user":"U0XPR4NP4","text":"The event timer, which has a reference to the event manager","ts":"1464107452.002575"},{"type":"message","user":"U0XPR4NP4","text":"(so that it can atomically deliver events)","ts":"1464107470.002576"},{"type":"message","user":"U0XR6J961","text":"and how is that event timer implemented?","ts":"1464107471.002577"},{"type":"message","user":"U0XPR4NP4","text":"As a small state machine in a select statement","ts":"1464107479.002578"},{"type":"message","user":"U0XR6J961","text":"and where is it implemented?","ts":"1464107505.002579"},{"type":"message","user":"U0XPR4NP4","text":"in the `eventTimer` struct","ts":"1464107516.002580"},{"type":"message","user":"U0XR6J961","text":"i mean the code","ts":"1464107524.002581"},{"type":"message","user":"U0XR6J961","text":"of that state machine","ts":"1464107528.002582"},{"type":"message","user":"U0XPR4NP4","text":"The event timer would have a go routine which is created when it is constructed, that go routine would be responsible for servicing the events of 'start' 'stop' 'timer expired' and 'deliver event'.","ts":"1464107607.002583"},{"type":"message","user":"U0XPR4NP4","text":"The atomicity comes from the fact that the start, stop, and deliver events are all bound to the event manager thread","ts":"1464107636.002584"},{"type":"message","user":"U0XR6J961","text":"how would that work in tests?","ts":"1464107644.002585"},{"type":"message","user":"U0XR6J961","text":"i.e. how do we make tests deterministic?","ts":"1464107661.002586"},{"type":"message","user":"U0XR6J961","text":"use a different timer implementation?","ts":"1464107665.002587"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I think that would make most sense, have a timer factory of some sort so we can override the timer implementation in our unit tests","ts":"1464107715.002588"},{"type":"message","user":"U0XR6J961","text":"so then we might put that into the event manager","ts":"1464107740.002589"},{"type":"message","user":"U0XPR4NP4","text":"We could","ts":"1464107747.002590"},{"type":"message","user":"U0XPR4NP4","text":"Since we would be supplying a different event manager for unit tests","ts":"1464107775.002591"},{"type":"message","user":"U0XPR4NP4","text":"It would be a natural place to do it","ts":"1464107781.002592"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1464107787.002593"},{"type":"message","user":"U0XR6J961","text":"i don't see any benefit of using a go routine per timer, vs a timer wheel for all timers","ts":"1464107799.002594"},{"type":"message","user":"U0XPR4NP4","text":"The event manager in the non-unit test implementation becomes much simpler, and it allows us to in the near term retain the majority of our existing code","ts":"1464107914.002595"},{"type":"message","user":"U0XPR4NP4","text":"I don't see any particular problem with a go routine per timer","ts":"1464107925.002596"},{"type":"message","user":"U0XR6J961","text":"well, it needs more resources.","ts":"1464107952.002597"},{"type":"message","user":"U0XPR4NP4","text":"The overhead of a go routine is pretty minimal, especially since we're talking about two or three of them","ts":"1464107975.002598"},{"type":"message","user":"U0XR6J961","text":"well, custodian","ts":"1464107984.002599"},{"type":"message","user":"U0XR6J961","text":"potentially hundreds","ts":"1464107988.002600"},{"type":"message","user":"U0XPR4NP4","text":"No, not at all","ts":"1464107993.002601"},{"type":"message","user":"U0XR6J961","text":"the advantage of a timer wheel is that event order is determined on enqueue","ts":"1464108013.002602"},{"type":"message","user":"U0XPR4NP4","text":"For custodian, who already implements a timer wheel, he would simply keep his implementation, and use a single timer to trigger processing","ts":"1464108015.002603"},{"type":"message","user":"U0XR6J961","text":"and events don't race delivery","ts":"1464108022.002604"},{"type":"message","user":"U0XPR4NP4","text":"For custodian, that works because all of your timeouts are the same","ts":"1464108030.002605"},{"type":"message","user":"U0XPR4NP4","text":"Or rather, your queuing logic is simple because of that","ts":"1464108049.002606"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1464108051.002607"},{"type":"message","user":"U0XR6J961","text":"basically i'm proposing a completely deterministic system","ts":"1464108071.002608"},{"type":"message","user":"U0XR6J961","text":"with go routines, you get events delivered non-deterministically","ts":"1464108099.002609"},{"type":"message","user":"U0XPR4NP4","text":"You're proposing a completely deterministic set of timers, we still get non-determinism on timer vs. msg for instance","ts":"1464108146.002610"},{"type":"message","user":"U0XR6J961","text":"yes we do","ts":"1464108152.002611"},{"type":"message","user":"U0XR6J961","text":"but that we can't control","ts":"1464108160.002612"},{"type":"message","user":"U0XR6J961","text":"i think implementing the timers with goroutines is fine for now, because it reduces the amount of change","ts":"1464108182.002613"},{"type":"message","user":"U0XR6J961","text":"but eventually, i'd like to replace the timers with a deterministic timer wheel","ts":"1464108213.002614"},{"type":"message","user":"U0XPR4NP4","text":"I think there's nothing prohibiting that, and in fact, I think we'd basically just move the select statement out of the timer and into the event manager","ts":"1464108245.002615"},{"type":"message","user":"U0XPR4NP4","text":"(with a few minor modifications of course)","ts":"1464108260.002616"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1464108265.002617"},{"type":"message","user":"U0XR6J961","text":"okay, i gotta take off","ts":"1464108286.002618"},{"type":"message","user":"U0XPR4NP4","text":"Alright, thanks for the discussion","ts":"1464108298.002619"},{"type":"message","user":"U0XR6J961","text":"if you push intermediate code to your repo, i'll be able to review it at some point","ts":"1464108341.002620"},{"type":"message","user":"U0XPR4NP4","text":"I'm really trying to keep these changesets small so that we can meaningfully do them as PRs","ts":"1464108413.002621"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1464108419.002622"},{"type":"message","user":"U0XPR4NP4","text":"Hopefully I can push it as a PR for public review\/comment (so that we don't have to do the private repo review)","edited":{"user":"U0XPR4NP4","ts":"1464108445.000000"},"ts":"1464108424.002623"},{"type":"message","user":"U0ULK2JPP","text":"<@U0XR6J961>, <@U0XPR4NP4> : haven\u2019t paid attention\u2026 saw go routines and timers.. will this help stabilize tests so timing is not an issue ?","ts":"1464108442.002624"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1464108467.002626"},{"type":"message","user":"U0ULK2JPP","text":"ok","ts":"1464108469.002627"},{"type":"message","user":"U0ULK2JPP","text":"thanks","ts":"1464108472.002628"},{"type":"message","user":"U0XR6J961","text":"once tests don't have goroutines, all will be better","ts":"1464108478.002629"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ULK2JPP>: Yes, the biggest source of instability in our tests is racing go routines, we're trying to kill them off","ts":"1464108478.002630"},{"type":"message","user":"U0ULK2JPP","text":"ok","ts":"1464108484.002631"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: If you could take a look at the PR for the event stuff we discussed, I'd appreciate it <https:\/\/github.com\/hyperledger\/fabric\/pull\/1586>","attachments":[{"service_name":"GitHub","title":"Add PBFT event manager and convert core to use it by jyellick \u00b7 Pull Request #1586 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1586","text":"Description This changeset is the first in a series designed to unify the execution path of pbft core, and its plugins. This adds a new eventManager which serializes events and delivers them to a...","fallback":"GitHub: Add PBFT event manager and convert core to use it by jyellick \u00b7 Pull Request #1586 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1586","thumb_width":420,"thumb_height":420,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1464188697.002632"},{"type":"message","user":"U0XR6J961","text":"So it is not clear how to trigger a regular view change, because there are multiple outstanding requests at every time.  Maybe together with checkpoints?","ts":"1464342481.002634"},{"type":"message","user":"U0UGH3X7X","text":"so #756, PR #1623   ...  how should we proceed ?   at first glance, do we move all that logic inside the plugin ?  get a peerconnected\/disconnected event and keep track inside consensus ?","ts":"1464354109.002635"},{"user":"U14NC480K","type":"message","subtype":"channel_join","text":"<@U14NC480K|charles-cai> has joined the channel","ts":"1464355855.002636"},{"type":"message","user":"U0XR6J961","text":"yes, i think that would be best","ts":"1464356615.002637"},{"type":"message","user":"U0XR6J961","text":"like the RecvMsg() interface, just with PeerConnected() and PeerDisconnected()","ts":"1464356646.002638"},{"type":"message","user":"U0XR6J961","text":"or, alternatively, PeerEvent(connected\/disconnected)","ts":"1464356664.002639"},{"type":"message","user":"U0XR6J961","text":"do you remember why we need to wait for enough peers to connect before we start consensus?","ts":"1464356697.002640"},{"type":"message","user":"U0XPR4NP4","text":"So that we can establish a total ordering of the replicas","ts":"1464356713.002641"},{"type":"message","user":"U0XR6J961","text":"ah yes","ts":"1464356719.002642"},{"type":"message","user":"U0XQ35CDD","text":"you don't know their IDs in advance...","ts":"1464356725.002643"},{"type":"message","user":"U0XR6J961","text":"so that is only required once","ts":"1464356737.002644"},{"type":"message","user":"U0XR6J961","text":"that's good","ts":"1464356741.002645"},{"type":"message","user":"U0XQ35CDD","text":"correct","ts":"1464356748.002646"},{"type":"message","user":"U0UGH3X7X","text":"yes, we need to establish all the replicaIDs before doing anything","ts":"1464356753.002647"},{"type":"message","user":"U0XR6J961","text":"eventually we can also move `Broadcast` into the consensus","ts":"1464356759.002648"},{"type":"message","user":"U0XR6J961","text":"but small steps at a time","ts":"1464356777.002649"},{"type":"message","user":"U0UGH3X7X","text":"so i noticed that we still broadcast to all peers ... i'll change to broadcast to all validating peers","ts":"1464356845.002650"},{"type":"message","user":"U0UGH3X7X","text":"i'll try to refactor on top of <@U0XPR4NP4> event manager ?  jason,  do you have a branch i can work off of ?","ts":"1464356907.002651"},{"type":"message","user":"U0XPR4NP4","text":"pbft-state-machine-pr2 includes the latest changes","ts":"1464356938.002652"},{"type":"message","user":"U0UGH3X7X","text":"ok","ts":"1464356984.002653"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> <@U0XQ35CDD> <@U0UGH3X7X> : I'd like to get 1557, 1586, 1595, 1596, 1614, and 1622 merged today is possible if you could review and signoff","ts":"1464357119.002654"},{"user":"U0Y55KNG2","type":"message","subtype":"channel_join","text":"<@U0Y55KNG2|kletkeman> has joined the channel","ts":"1464357643.002655"},{"type":"message","user":"U0XR6J961","text":"tuand: well, or we just start unicasting from consensus directly","ts":"1464357772.002656"},{"type":"message","user":"U0XR6J961","text":"jyellick: yea, let's go with it.  i'd prefer to change that timerfactory stuff, but i think it can be done later","ts":"1464357812.002657"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: Yes, there will definitely be some tweaks down the line","ts":"1464357979.002658"},{"type":"message","user":"U0XQ35CDD","text":"<@U0XR6J961>: what's the logic behind moving broadcasting to consensus?","ts":"1464358001.002659"},{"type":"message","user":"U0XR6J961","text":"kostas: that broadcast doesn't block when sending to byzantine replicas","ts":"1464358102.002660"},{"type":"message","user":"U0XR6J961","text":"and consensus doesn't send messages to non-whitelisted replicas","ts":"1464358122.002661"},{"type":"message","user":"U0XQ35CDD","text":"got it, good call","ts":"1464358200.002662"},{"type":"message","user":"U0XR6J961","text":"does anybody have a suggestion how to do periodic view changes?","ts":"1464358443.002663"},{"type":"message","user":"U0XR6J961","text":"i guess the primary would stop accepting new requests","ts":"1464358488.002664"},{"type":"message","user":"U0XR6J961","text":"the backups send a view-change when they have a commit certificate for the last request of the primary","ts":"1464358526.002665"},{"type":"message","user":"U0XR6J961","text":"and new pre-prepares that should not have been sent by the primary directly lead to a view change","ts":"1464358561.002666"},{"type":"message","user":"U0XR6J961","text":"but rotating the primary means that requests may be lost initially, if the request was sent to the primary that now becomes a backup","ts":"1464358631.002667"},{"type":"message","user":"U0XR6J961","text":"so that means we probably should be broadcasting requests again...","ts":"1464358647.002668"},{"type":"message","user":"U0XR6J961","text":"it is all a bit hacky","ts":"1464358655.002669"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: My perhaps naive vision for periodic view change, was to have a config variable set, which would be \"change view of n checkpoints\", so, once the good primary hits that number, it sends a VIEW-CHANGE (That way we never change view with a non-empty pset and the xset just has the single null request)","edited":{"user":"U0XPR4NP4","ts":"1464360769.000000"},"ts":"1464359328.002670"},{"type":"message","user":"U0XPR4NP4","text":"The backup who becomes the new primary would send a VIEW-CHANGE and a NEW-VIEW","ts":"1464359381.002672"},{"type":"message","user":"U0XPR4NP4","text":"Shouldn't we already be resubmitting requests after a view change?","ts":"1464359426.002673"},{"type":"message","user":"U0XR6J961","text":"batch does, yes","ts":"1464362175.002675"},{"type":"message","user":"U0Y14MWA2","text":"<!channel> As discussed on the last HL Arch WG on Wednesday - the proposal for the next consensus architecture is posted here: <https:\/\/github.com\/hyperledger\/fabric\/wiki\/Next-Consensus-Architecture-Proposal>","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/wiki\/Next-Consensus-Architecture-Proposal","text":"fabric - Fabric is a blockchain project in Incubation proposed to the community and documented at <https:\/\/goo.gl\/RYQZ5N>. Information on what Incubation entails can be found in the Hyperledger Proj...","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/wiki\/Next-Consensus-Architecture-Proposal","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1464362881.002676"},{"type":"message","user":"U0Y14MWA2","text":"please review, comment, discuss and contribute","ts":"1464362908.002678"},{"type":"message","user":"U0XR6J961","text":"great!","ts":"1464364446.002679"},{"type":"message","user":"U0KM61BCP","text":"thanks for getting this out <@U0Y14MWA2> will be good to get some others to weigh in on the paper","ts":"1464365970.002680"},{"type":"message","user":"U0UGH3X7X","text":"<@U0Y14MWA2>,  can you also announce on the hyperledger mailing lists ?","ts":"1464367611.002681"},{"type":"message","user":"U0Y14MWA2","text":"i am just doing that","ts":"1464367639.002682"},{"type":"message","user":"U0Y14MWA2","text":"I will send to hl-fabric","ts":"1464367646.002683","reactions":[{"name":"+1","users":["U0UGH3X7X"],"count":1}]},{"type":"message","user":"U0Y14MWA2","text":"not sure if I should to others?","ts":"1464367651.002684"},{"type":"message","user":"U0UGH3X7X","text":"there's hyperledger-architecture-wg","ts":"1464367786.002685"},{"type":"message","user":"U0UGH3X7X","text":"i thought there was a fabric-announce listserv but can't find it now","ts":"1464367830.002686"},{"type":"message","user":"U0XR6J961","text":"jyellick: how do i wait for the pbft core to finish (for testing?)","ts":"1464372645.002687"},{"type":"message","user":"U0XPR4NP4","text":"I just commented on your PR","ts":"1464372663.002688"},{"type":"message","user":"U0XPR4NP4","text":"I've been converting tests which were not network based, but only a single instance of the PBFT core, to simply not start up the event manager, and instead, have the test manually inject events in via `sendEvent(pbftCore, event)`","ts":"1464372730.002689"},{"type":"message","user":"U0XPR4NP4","text":"With the latest changes, you can inject any message, like for instance `sendEvent(pbftCore, &amp;PrePrepare{...})`","ts":"1464372765.002690"},{"type":"message","user":"U0XR6J961","text":"ah!","ts":"1464372778.002691"},{"type":"message","user":"U0XR6J961","text":"well eventually we should have a test event manager that doesn't use timers\/goroutines","ts":"1464372806.002692"},{"type":"message","user":"U0XPR4NP4","text":"Will need to come up with some better solution for the networked ones in the future","ts":"1464372813.002693"},{"type":"message","user":"U0XPR4NP4","text":"Yes, exactly, eventually we'll want the test event manager to run entirely on the test thread","ts":"1464372824.002694"},{"type":"message","user":"U0XPR4NP4","text":"No more non-determinism in our network tests","ts":"1464372838.002695"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1464372842.002696"},{"type":"message","user":"U0XPR4NP4","text":"(The network based ones today, you can inject messages with `pbftCore.manager.queue() &lt;- &amp;Message{}`, which is ugly and I hate, and should go away once we fix up the mock network)","ts":"1464372892.002697"},{"type":"message","user":"U0XR6J961","text":"right","ts":"1464372944.002698"},{"user":"U1C3WNWRF","type":"message","subtype":"channel_join","text":"<@U1C3WNWRF|jphillips> has joined the channel","ts":"1464415298.002699"},{"type":"message","user":"U0YM41HA5","text":"architecture","ts":"1464607862.002700"},{"type":"message","user":"U0XR6J961","text":"so the problem with periodic view change is that after a crash fault, I don't know what the next change should be","ts":"1464610437.002701"},{"type":"message","user":"U0XR6J961","text":"i guess a crashed replica could just generally send a view change when it comes up...","ts":"1464610560.002702"},{"type":"message","user":"U0KPFAZNF","text":"<@U0XR6J961>: if you remember that work I did for <@U0XQ35CDD> last November, I had a state called \u201cconvening\u201d that was used precisely in that case","ts":"1464611167.002703"},{"type":"message","user":"U0KPFAZNF","text":"it was a state that was entered either at start up or if the network lost quorum\u2026.it had special rules for view changes that accounted for the fact that the network may be way ahead","ts":"1464611209.002704"},{"type":"message","user":"U0KPFAZNF","text":"could probably do something like that here","ts":"1464611217.002705"},{"user":"U142E5N0P","type":"message","subtype":"channel_join","text":"<@U142E5N0P|yingfeng> has joined the channel","ts":"1464663276.002706"},{"type":"message","user":"U0XR6J961","text":"<https:\/\/github.com\/hyperledger\/fabric\/pull\/1663>","attachments":[{"service_name":"GitHub","title":"Periodic viewchange by corecode \u00b7 Pull Request #1663 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1663","text":"Description Implement periodic view changes to actively try to incorporate \"lost\" replicas back into the network. Motivation and Context Related to #1454 How Has This Been Tested? N...","fallback":"GitHub: Periodic viewchange by corecode \u00b7 Pull Request #1663 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1663","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1464699270.002707"},{"type":"message","user":"U0XR6J961","text":"would appreciate review.  for now I implemented a dumb version of just cycling after a fixed number of requests from a primary, but we could \"optimize\" it by cycling after stable checkpoints.  The advantage of cycling after stable checkpoints is that the new primary does not have to repeat any request; the disadvantage is that it may stop the network for considerable time (wait for execution to finish at 2f+1 replicas).","ts":"1464699394.002709"},{"type":"message","user":"U0XR6J961","text":"jyellick: you around?","ts":"1464789401.002710"},{"type":"message","user":"U0XPR4NP4","text":"I am","ts":"1464789410.002711"},{"type":"message","user":"U0XR6J961","text":"i'm looking at a mock event manager","ts":"1464789429.002712"},{"type":"message","user":"U0XR6J961","text":"the issue seems to be that queue() returns a chan, which implies that there needs to be a goroutine somewhere to service that chan","ts":"1464789454.002713"},{"type":"message","user":"U0XPR4NP4","text":"So, the real event manager does have a goroutine","ts":"1464789479.002714"},{"type":"message","user":"U0XR6J961","text":"yes i know","ts":"1464789483.002715"},{"type":"message","user":"U0XPR4NP4","text":"For the mock, I think that thread should be the test thread","ts":"1464789492.002716"},{"type":"message","user":"U0XR6J961","text":"the problem is, there needs to be one goroutine per manager","ts":"1464789514.002717"},{"type":"message","user":"U0XPR4NP4","text":"Why?","ts":"1464789530.002718"},{"type":"message","user":"U0XR6J961","text":"because there need to be as many queues as managers","ts":"1464789531.002719"},{"type":"message","user":"U0XR6J961","text":"and i can't select on an array of queues","ts":"1464789553.002720"},{"type":"message","user":"U0XPR4NP4","text":"Ah, it's possible via reflection, though a bit slower","ts":"1464789582.002721"},{"type":"message","user":"U0XPR4NP4","text":"(which might be fine for tests, though I'd keep it out of the production path)","ts":"1464789596.002722"},{"type":"message","user":"U0XR6J961","text":"how?","ts":"1464789601.002723"},{"type":"message","user":"U0XPR4NP4","text":"<https:\/\/stackoverflow.com\/questions\/19992334\/how-to-listen-to-n-channels-dynamic-select-statement>","attachments":[{"title":"how to listen to N channels? (dynamic select statement)","title_link":"https:\/\/stackoverflow.com\/questions\/19992334\/how-to-listen-to-n-channels-dynamic-select-statement","text":"to start an endless loop of executing two goroutines, I can use the code below:after receiving the msg it will start a new goroutine and go on for ever. c1 := make(chan string)c2 := make(chan","fallback":"how to listen to N channels? (dynamic select statement)","thumb_url":"https:\/\/cdn.sstatic.net\/Sites\/stackoverflow\/img\/apple-touch-icon@2.png?v=73d79a89bded&a","from_url":"https:\/\/stackoverflow.com\/questions\/19992334\/how-to-listen-to-n-channels-dynamic-select-statement","thumb_width":316,"thumb_height":316,"service_icon":"http:\/\/cdn.sstatic.net\/Sites\/stackoverflow\/img\/favicon.ico?v=4f32ecc8f43d","service_name":"stackoverflow.com","id":1}],"ts":"1464789640.002724"},{"type":"message","user":"U0XR6J961","text":"oh god","ts":"1464789680.002726"},{"type":"message","user":"U0XR6J961","text":"if queue() would work like inject(), then this wouldn't be necessary","ts":"1464789695.002727"},{"type":"message","user":"U0XPR4NP4","text":"If this is a good reason to make `queue` accept a parameter rather than return a channel, then I'm fine with changing it.","edited":{"user":"U0XPR4NP4","ts":"1464789820.000000"},"ts":"1464789785.002728"},{"type":"message","user":"U0XPR4NP4","text":"The channel initially seemed more flexible, but in this case, I can see where the function call is","ts":"1464789806.002729"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1464789829.002731"},{"type":"message","user":"U0XR6J961","text":"i'll change it to see how the code looks","ts":"1464789840.002732"},{"type":"message","user":"U0XPR4NP4","text":"I've also got some pending changes which pulls the manager out of `pbft-core.go` which I'll post once I work the bugs out of it","ts":"1464789891.002733"},{"type":"message","user":"U0XPR4NP4","text":"(basically just moves it out a layer, so the consumer, or pbftendpoint are the ones holding the reference)","ts":"1464789940.002734"},{"type":"message","user":"U0XR6J961","text":"but the timer factory is still passed in?","ts":"1464790029.002735"},{"type":"message","user":"U0XPR4NP4","text":"Right, the timerfactory is now a parameter","ts":"1464790040.002736"},{"type":"message","user":"U0XR6J961","text":"so... timer events don't work without the queue","ts":"1464790046.002737"},{"type":"message","user":"U0XR6J961","text":"hmm","ts":"1464790047.002738"},{"type":"message","user":"U0XPR4NP4","text":"What do you mean?","ts":"1464790061.002739"},{"type":"message","user":"U0XR6J961","text":"but the timer events know the implementation","ts":"1464790076.002740"},{"type":"message","user":"U0XPR4NP4","text":"They do","ts":"1464790080.002741"},{"type":"message","user":"U0XR6J961","text":"and can use the events chan directly","ts":"1464790082.002742"},{"type":"message","user":"U0XPR4NP4","text":"Right","ts":"1464790084.002743"},{"type":"message","user":"U0XR6J961","text":"hmmm","ts":"1464791206.002744"},{"type":"message","user":"U0XR6J961","text":"but then i can't mock it for the tests","ts":"1464791215.002745"},{"type":"message","user":"U0XPR4NP4","text":"Why not?","ts":"1464792022.002746"},{"type":"message","user":"U0XR6J961","text":"if queue() does not return a chan, then the timer implementation needs to reach inside the manager to access the queue","ts":"1464792500.002747"},{"type":"message","user":"U0XR6J961","text":"but to reach inside the mananger, it cannot use an interface, but needs to use the impl type","ts":"1464792527.002748"},{"type":"message","user":"U0XR6J961","text":"which means that for testing the timer, we cannot use a mock manager.","ts":"1464792542.002749"},{"type":"message","user":"U0XR6J961","text":"so, hm.","ts":"1464792889.002750"},{"type":"message","user":"U0XPR4NP4","text":"Right, hmm","ts":"1464793021.002751"},{"type":"message","user":"U0XPR4NP4","text":"Well, it might be worth going ahead and try to start turning the non-mock manager into a timer wheel","ts":"1464793043.002752"},{"type":"message","user":"U0XPR4NP4","text":"I think essentially, it will still need one of the current style event timers, which is simply set to fire at the next most target event time","ts":"1464793084.002753"},{"type":"message","user":"U0XPR4NP4","text":"But might simplify the mocking","ts":"1464793090.002754"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1464794092.002755"},{"type":"message","user":"U0XR6J961","text":"i just would like to keep the changes small","ts":"1464794104.002756"},{"type":"message","user":"U0XR6J961","text":"i guess i could introduce an internal interface","ts":"1464794120.002757"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> <https:\/\/github.com\/hyperledger\/fabric\/pull\/1675>","attachments":[{"service_name":"GitHub","title":"Move event manager out of pbft core by jyellick \u00b7 Pull Request #1675 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1675","text":"Description This changeset removes the instantiation of the event manager from pbft-core and pushes it into the plugin layer. The tests are correspondingly updated. Motivation and Context This ...","fallback":"GitHub: Move event manager out of pbft core by jyellick \u00b7 Pull Request #1675 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1675","thumb_width":420,"thumb_height":420,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1464795548.002758"},{"type":"message","user":"U0XR6J961","text":"hmm","ts":"1464796110.002760"},{"type":"message","user":"U0XR6J961","text":"setReceiver seems odd","ts":"1464796191.002761"},{"type":"message","user":"U0XR6J961","text":"but yea","ts":"1464796201.002762"},{"type":"message","user":"U0XPR4NP4","text":"There's the weird bidirectional dependency between the event manager and event receiver.  The receiver needs some way to create timers the event manager understands, which means the timer factory needs a reference to the manager, which needed a reference to the receiver.  So, the `setReceiver` is a little odd, but was the cleanest way I could come up with breaking that cycle.","ts":"1464800960.002763"},{"type":"message","user":"U0TFEHX8E","text":"Hi <@U0XPR4NP4> <@U0XR6J961> - are there any consensus PRs ready for review?","ts":"1464805853.002764"},{"type":"message","user":"U0XPR4NP4","text":"I think 1605 is good to go, I can add a comment to that effect","ts":"1464805938.002765"},{"type":"message","user":"U0TFEHX8E","text":"thanks","ts":"1464806028.002766"},{"type":"message","user":"U0XPR4NP4","text":"I think 1623 could be closed, while <@U0UGH3X7X> reworks it, maybe he can chime in yay or nay","ts":"1464806039.002767"},{"type":"message","user":"U0TFEHX8E","text":"np to leave it open. whatever works best for you","ts":"1464806075.002768"},{"type":"message","user":"U0UGH3X7X","text":"i'll close it ... waiting for kostas to update 756","ts":"1464806095.002769"},{"type":"message","user":"U0XQ35CDD","text":"it can be closed regardless of 756 updates","ts":"1464806114.002770"},{"type":"message","user":"U0XPR4NP4","text":"I'm not sure what <@U0XR6J961>'s response to 1675 in channel meant, I think it was tacit approval, but we can wait for more review from him, or maybe <@U0XQ35CDD> or <@U0UGH3X7X> can review now, was going to take a look at 1663 now that it's been rebased","ts":"1464806194.002771"},{"type":"message","user":"U0UGH3X7X","text":"1623 closed","ts":"1464806228.002772"},{"type":"message","user":"U0UGH3X7X","text":"taking a look at 1675 now  ... can't find simon's slack comment but probably better if documented in PR","ts":"1464806550.002773"},{"user":"U1DFU0M32","type":"message","subtype":"channel_join","text":"<@U1DFU0M32|chenhua> has joined the channel","ts":"1464840821.002774"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: Trying to trace this view change code, seems like it can't be right, feel like I'm going crazy, do you have a minute?","ts":"1464876430.002775"},{"type":"message","user":"U0XR6J961","text":"sure","ts":"1464876471.002776"},{"type":"message","user":"U0XPR4NP4","text":"If you could take a look at `recvViewChange`","ts":"1464876503.002777"},{"type":"message","user":"U0XPR4NP4","text":"Down to the `if len(replicas) &gt;= instance.f+1` piece, basically, if we've got a weak cert of view change messages, we need to send a view change, seems right so far to me","ts":"1464876546.002778"},{"type":"message","user":"U0XPR4NP4","text":"So we call `instance.sendViewChange`","ts":"1464876568.002779"},{"type":"message","user":"U0XPR4NP4","text":"Which, without really any conditionals, builds a view change message, and then invokes `recvViewChange`","ts":"1464876612.002780"},{"type":"message","user":"U0XPR4NP4","text":"Which obviously will then satisfy the condition `len(replicas) &gt;= instance.f+1` because it was just matched and we added another","ts":"1464876649.002781"},{"type":"message","user":"U0XPR4NP4","text":"Which will then call `sendViewChange` again, which will then send it again, which will then call `recvViewChange` again, which will detect that we already have this view change message, and return nil.","ts":"1464876682.002782"},{"type":"message","user":"U0XPR4NP4","text":"And nothing in this path will trigger processing the new view.","ts":"1464876743.002783"},{"type":"message","user":"U0XR6J961","text":"but that's not what we see happening?","ts":"1464876747.002784"},{"type":"message","user":"U0XPR4NP4","text":"It might be, I guess nothing in that should break anything, but we should always be double broadcasting view change messages, which I hadn't noticed.","ts":"1464876795.002785"},{"type":"message","user":"U0XPR4NP4","text":"(Or rather, not always, but often)","ts":"1464876812.002786"},{"type":"message","user":"U0XPR4NP4","text":"Mostly just wanted a sanity check on my reasoning, make sure I'm not missing something obvious (have been staring at this particular code path too long)","ts":"1464876914.002787"},{"type":"message","user":"U0XR6J961","text":"maybe we need a test to see whether this really happens","ts":"1464876955.002788"},{"type":"message","user":"U0XR6J961","text":"i only see 2 scenarios where this would appear as a bug:","ts":"1464876965.002789"},{"type":"message","user":"U0XR6J961","text":"1. primary is slow with view change and receives f+1 messages, but then fails to send new-view","ts":"1464876989.002790"},{"type":"message","user":"U0XPR4NP4","text":"If our view-change was the 2f+1th, it would delay sending\/processing a new view.  But, for f&gt;0 I don't think that's actually possible","ts":"1464877001.002791"},{"type":"message","user":"U0XR6J961","text":"2. we already received new-view and we are slow with view-change, and now received the f+1 view-change.","ts":"1464877027.002792"},{"type":"message","user":"U0XPR4NP4","text":"Hmmm, yes, I will write a test for this, should include one with the fix","ts":"1464877075.002793"},{"type":"message","user":"U0XPR4NP4","text":"Actually, yes, I'm worried that once we have the f+1 view change messages, it will never trigger the new view processing via this path, because it will always d the `sendViewChange` loop which returns before hitting the new view path.","ts":"1464877171.002794"},{"type":"message","user":"U0XPR4NP4","text":"Alright, thanks for the chat, will go write that test.","ts":"1464877179.002795"},{"type":"message","user":"U0XR6J961","text":"so then we shouldn't return","ts":"1464877363.002796"},{"type":"message","user":"U0XR6J961","text":"HA!","ts":"1464877464.002797"},{"type":"message","user":"U0XR6J961","text":"no","ts":"1464877464.002798"},{"type":"message","user":"U0XR6J961","text":"jyellick: that loop only counts view-change messages that are *above* our own view","ts":"1464877485.002799"},{"type":"message","user":"U0XR6J961","text":"so the second time we get in there, we do not enter the f+1 branch","ts":"1464877518.002800"},{"type":"message","user":"U0XPR4NP4","text":"Aha! Thanks!","ts":"1464877539.002801"},{"type":"message","user":"U0XR6J961","text":"hehe","ts":"1464877690.002802"},{"type":"message","user":"U0XR6J961","text":"i remember thinking that before","ts":"1464877696.002803"},{"type":"message","user":"U0XR6J961","text":"the comment is clear as well","ts":"1464877701.002804"},{"type":"message","user":"U0XR6J961","text":"but maybe we should add another comment","ts":"1464877711.002805"},{"type":"message","user":"U0XR6J961","text":"our coverage doesn't look bad at all","ts":"1464880617.002806"},{"type":"message","subtype":"file_share","text":"<@U0UGH3X7X|tuand> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/tuand\/F1DL2KWTY\/aa.out|aa.out> and commented: this is what i got for test coverage . do `go tool cover -html=aa.out` on this file","file":{"id":"F1DL2KWTY","created":1464880730,"timestamp":1464880730,"name":"aa.out","title":"aa.out","mimetype":"text\/plain","filetype":"text","pretty_type":"Plain Text","user":"U0UGH3X7X","editable":true,"size":100250,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1DL2KWTY\/aa.out?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1DL2KWTY\/download\/aa.out?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/tuand\/F1DL2KWTY\/aa.out","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F1DL2KWTY-0cfda4c418","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/tuand\/F1DL2KWTY\/aa.out\/edit","preview":"mode: set\ngithub.com\/hyperledger\/fabric\/consensus\/obcpbft\/events.go:40.27,41.9 1 1\ngithub.com\/hyperledger\/fabric\/consensus\/obcpbft\/events.go:42.2,43.62 1 0\ngithub.com\/hyperledger\/fabric\/consensus\/obcpbft\/events.go:44.2,45.16 1 1\ngithub.com\/hyperledger\/fabric\/consensus\/obcpbft\/events.go:72.57,78.2 1 1","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>mode: set<\/pre><\/div>\n<div><pre>github.com\/hyperledger\/fabric\/consensus\/obcpbft\/events.go:40.27,41.9 1 1<\/pre><\/div>\n<div><pre>github.com\/hyperledger\/fabric\/consensus\/obcpbft\/events.go:42.2,43.62 1 0<\/pre><\/div>\n<div><pre>github.com\/hyperledger\/fabric\/consensus\/obcpbft\/events.go:44.2,45.16 1 1<\/pre><\/div>\n<div><pre>github.com\/hyperledger\/fabric\/consensus\/obcpbft\/events.go:72.57,78.2 1 1<\/pre><\/div>\n<\/div>\n<\/div>\n","lines":1275,"lines_more":1270,"preview_is_truncated":true,"channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":1,"initial_comment":{"id":"Fc1DL2LD62","created":1464880730,"timestamp":1464880730,"user":"U0UGH3X7X","is_intro":true,"comment":"this is what i got for test coverage . do `go tool cover -html=aa.out` on this file","channel":""}},"user":"U0UGH3X7X","upload":true,"display_as_bot":false,"username":"<@U0UGH3X7X|tuand>","bot_id":null,"ts":"1464880733.002807"},{"type":"message","user":"U0XPR4NP4","text":"There are a few pieces that looks like they could improve, but generally, yeah, not too bad.","ts":"1464881304.002808"},{"type":"message","user":"U0KPFAZNF","text":"<@U0XR6J961> <@U0XPR4NP4> seeing lots of failures in the consensus\/obcpbft unit tests in presumably unrelated branches of the code, are you aware of this?","ts":"1464883080.002809"},{"type":"message","user":"U0XPR4NP4","text":"What failures?","ts":"1464883090.002810"},{"type":"message","user":"U0KPFAZNF","text":"I just restarted one in travis, I suspect I lost the log as a result","ts":"1464883117.002811"},{"type":"message","user":"U0KPFAZNF","text":"i have a local run of something that looked identical (though different code change), ill see if I can capture it to a log","ts":"1464883136.002812"},{"type":"message","user":"U0XPR4NP4","text":"Unit tests have run reliably locally for me and in the CI I've pushed, so would appreciate a pointer to the failure","ts":"1464883172.002813"},{"type":"message","user":"U0KPFAZNF","text":"its this one: <https:\/\/travis-ci.org\/hyperledger\/fabric\/builds\/134769876>","ts":"1464883218.002814"},{"type":"message","user":"U0KPFAZNF","text":"but note I have seen it in at least three unrelated branches now","ts":"1464883228.002815"},{"type":"message","user":"U0KPFAZNF","text":"but same basic failure (at least when looking from 50k feet up","ts":"1464883246.002816"},{"type":"message","user":"U0XPR4NP4","text":"Ah, yeah, that's a new test for a feature that was merged a couple days ago","ts":"1464883280.002817"},{"type":"message","user":"U0KPFAZNF","text":"gut feeling, it might be flaky","ts":"1464883293.002818"},{"type":"message","user":"U0XPR4NP4","text":"Yeah, I'll take a look, thanks <@U0KPFAZNF>","ts":"1464883316.002819"},{"type":"message","user":"U0KPFAZNF","text":"but more research needed","ts":"1464883319.002820"},{"type":"message","user":"U0KPFAZNF","text":"ok, thanks!","ts":"1464883325.002821"},{"type":"message","user":"U0XR6J961","text":"is the timeout too short?","ts":"1464884158.002822"},{"type":"message","user":"U0XPR4NP4","text":"That's my immediate guess","ts":"1464885198.002823"},{"type":"message","user":"U0UGH3X7X","text":"i looked at the test coverage results for consensus and statetransfer ...  looks like the one that could use more unit tests is `obc-batch (67%)`  ?","ts":"1464892443.002824"},{"type":"message","user":"U0UGH3X7X","text":"others like `obc-classic` is really the broadcast() and unicast() calls  ... and `helper`, `controller`, etc ... are tested by the obcpbft and behave tests","ts":"1464892568.002825"},{"type":"message","user":"U0XPR4NP4","text":"<@U0UGH3X7X>: <@U0XQ35CDD> <@U0XR6J961>  Review of <https:\/\/github.com\/hyperledger\/fabric\/pull\/1689> would be appreciated","attachments":[{"service_name":"GitHub","title":"Remove hacky sendViewChangedEvent by jyellick \u00b7 Pull Request #1689 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1689","text":"Description This is a follow up to PR #1675. It removes the hacky mechanism for generating viewChangedEvent events introduced, and causes the view change code to pass back the events directly. I...","fallback":"GitHub: Remove hacky sendViewChangedEvent by jyellick \u00b7 Pull Request #1689 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1689","thumb_width":420,"thumb_height":420,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1464895497.002826"},{"type":"message","user":"U0XPR4NP4","text":"<@U0KPFAZNF>: I've included a bump in the timeout for that failing test in the PR above, I can break it out separately if you'd prefer","ts":"1464895689.002828"},{"type":"message","user":"U0KPFAZNF","text":"<@U0XPR4NP4>: yes, please\u2026id like that to go in ASAP, larger series might take longer to review","ts":"1464895722.002829"},{"type":"message","user":"U0XPR4NP4","text":"Understood, will do","ts":"1464895740.002830"},{"type":"message","user":"U0KPFAZNF","text":"ty","ts":"1464895750.002831"},{"type":"message","user":"U0KPFAZNF","text":"(and thanks for quick fix)","ts":"1464895762.002832"},{"type":"message","user":"U0XPR4NP4","text":"<@U0KPFAZNF>: <https:\/\/github.com\/hyperledger\/fabric\/pull\/1690> it's a pretty trivial change, sorry I did not push it earlier, was trying to finish up that other PR","attachments":[{"service_name":"GitHub","title":"Bump null request timeout to fix sporadic CI failures by jyellick \u00b7 Pull Request #1690 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1690","text":"Description This is a very simple change which increases the timeout for the TestNetworkNullRequestMissing test which has been periodically failing via CI. Motivation and Context There periodic ...","fallback":"GitHub: Bump null request timeout to fix sporadic CI failures by jyellick \u00b7 Pull Request #1690 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1690","thumb_width":420,"thumb_height":420,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1464896034.002833"},{"type":"message","user":"U0KPFAZNF","text":"i totally understand, no apology necessary","ts":"1464896050.002835"},{"type":"message","user":"U0KPFAZNF","text":"<@U0XPR4NP4>: still seems to fail CI, can you have a look?","ts":"1464899920.002836"},{"type":"message","user":"U0XPR4NP4","text":"Was just looking at that, different failure than the last","ts":"1464899939.002837"},{"type":"message","user":"U0XPR4NP4","text":"In `TestSieveNoDecision` this time","ts":"1464899951.002838"},{"type":"message","user":"U0KPFAZNF","text":"ah, ok, I didn\u2019t notice the subtlety there, sorry","ts":"1464899985.002839"},{"type":"message","user":"U0XPR4NP4","text":"No problem, wonder if maybe Travis is generally under higher load lately or something, nothing in that code path should really be new","ts":"1464900123.002840"},{"type":"message","user":"U0XPR4NP4","text":"<@U0KPFAZNF>: It's not entirely obvious what went wrong from the log, but, under the theory that it's just decreased Travis performance, I've tuned the timeouts in that test up by 50% as well, and enhanced the logging statement that looked suspicious to be a little more expressive. Pushed and will see how it goes.","edited":{"user":"U0XPR4NP4","ts":"1464902108.000000"},"ts":"1464901888.002841"},{"type":"message","user":"U0KPFAZNF","text":"Cool, thanks ","ts":"1464903028.002843"},{"type":"message","user":"U142E5N0P","text":"Hi, has this issue proved some problems of the consensus protocol?\n<https:\/\/github.com\/hyperledger\/fabric\/issues\/1701>","attachments":[{"service_name":"GitHub","title":"Inconsistent state after writing transactions to multiple peers concurrently \u00b7 Issue #1701 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/issues\/1701","text":"Description According to the definition of consensus, each fabric peer should have a consistent state at all time, or else, the decentralized ledger could not work at all. However, after I setup a...","fallback":"GitHub: Inconsistent state after writing transactions to multiple peers concurrently \u00b7 Issue #1701 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars2.githubusercontent.com\/u\/7248?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/issues\/1701","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1464946645.002844"},{"type":"message","user":"U0XR6J961","text":"no","ts":"1464954271.002846"},{"type":"message","user":"U0XR6J961","text":"i don't think so","ts":"1464954279.002847"},{"type":"message","user":"U0XR6J961","text":"or at least, not necessarily","ts":"1464954322.002848"},{"type":"message","user":"U0XR6J961","text":"yingfeng: it would be good if you could look at the blocks stored at the peers","ts":"1464954422.002849"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XR6J961> <@U0UGH3X7X> <@U0XPR4NP4> Guys I need consensus w. here","ts":"1464958373.002850"},{"type":"message","user":"U0Y14MWA2","text":"<https:\/\/github.com\/hyperledger\/fabric\/issues\/1608> (not only cons - also ledger)\nsee if <https:\/\/github.com\/hyperledger\/fabric\/issues\/1478> is still a problem\n<https:\/\/github.com\/hyperledger\/fabric\/issues\/1340> (nice to have fixed)\n<https:\/\/github.com\/hyperledger\/fabric\/issues\/1338> (trivial - yet a must for a release)\n<https:\/\/github.com\/hyperledger\/fabric\/issues\/1180> - should be closed IMO\n<https:\/\/github.com\/hyperledger\/fabric\/issues\/1098> (stack wide)","ts":"1464958378.002851"},{"type":"message","user":"U0XR6J961","text":"hi","ts":"1464958393.002852"},{"type":"message","user":"U0Y14MWA2","text":"what can or must we fix in the next two weeks","ts":"1464958406.002853"},{"type":"message","user":"U0Y14MWA2","text":"except #1338","ts":"1464958409.002854"},{"type":"message","user":"U0XR6J961","text":"i think we went through this already","ts":"1464958416.002855"},{"type":"message","user":"U0XR6J961","text":"i'm on 1478","ts":"1464958423.002856"},{"type":"message","user":"U0Y14MWA2","text":"yes - but I am struggling to have conclusions","ts":"1464958430.002857"},{"type":"message","user":"U0Y14MWA2","text":"e.g., #1340 is nice to have - not a must","ts":"1464958437.002858"},{"type":"message","user":"U0UGH3X7X","text":"i replied to sharon on these ?","ts":"1464958438.002859"},{"type":"message","user":"U0Y14MWA2","text":"so probably not","ts":"1464958439.002860"},{"type":"message","user":"U0Y14MWA2","text":"I know I know - but she asks again :slightly_smiling_face:","ts":"1464958450.002861"},{"type":"message","user":"U0UGH3X7X","text":":slightly_smiling_face:","ts":"1464958462.002862"},{"type":"message","user":"U0XR6J961","text":"does she want a different answer?","ts":"1464958465.002863"},{"type":"message","user":"U0Y14MWA2","text":"can we quickly do a rep here on what we commit for 2 weeks from now","ts":"1464958472.002864"},{"type":"message","user":"U0Y14MWA2","text":"I think she wants a concrete answer :slightly_smiling_face:","ts":"1464958480.002865"},{"type":"message","user":"U0XR6J961","text":"1338 is simple","ts":"1464958487.002866"},{"type":"message","user":"U0Y14MWA2","text":"yes","ts":"1464958490.002867"},{"type":"message","user":"U0Y14MWA2","text":"so that is in","ts":"1464958493.002868"},{"type":"message","user":"U0XR6J961","text":"1608 has to happen in ledger, so that's nothing we can fix ourselves","ts":"1464958504.002869"},{"type":"message","user":"U0Y14MWA2","text":"ok","ts":"1464958510.002870"},{"type":"message","user":"U0Y14MWA2","text":"agree","ts":"1464958513.002871"},{"type":"message","user":"U0XR6J961","text":"1478 is being worked on and is sort of important","ts":"1464958517.002872"},{"type":"message","user":"U0Y14MWA2","text":"ok noted","ts":"1464958523.002873"},{"type":"message","user":"U0XR6J961","text":"1340 not happening","ts":"1464958532.002874"},{"type":"message","user":"U0Y14MWA2","text":"ack","ts":"1464958535.002875"},{"type":"message","user":"U0UGH3X7X","text":"1180 should be closed","ts":"1464958539.002876"},{"type":"message","user":"U0Y14MWA2","text":"ack","ts":"1464958541.002877"},{"type":"message","user":"U0XR6J961","text":"1098 is related to 1478","edited":{"user":"U0XR6J961","ts":"1464958623.000000"},"ts":"1464958564.002878"},{"type":"message","user":"U0XR6J961","text":"but is more than that","ts":"1464958571.002879"},{"type":"message","user":"U0XR6J961","text":"also it shouldn't be labeled consensus","ts":"1464958579.002880"},{"type":"message","user":"U0Y14MWA2","text":"1098 (stack wide)?","ts":"1464958596.002881"},{"type":"message","user":"U0UGH3X7X","text":"1180 simon ?","ts":"1464958597.002882"},{"type":"message","user":"U0XR6J961","text":"yes 1098","ts":"1464958613.002883"},{"type":"message","user":"U0Y14MWA2","text":"ok then","ts":"1464958623.002884"},{"type":"message","user":"U0Y14MWA2","text":"anything else?","ts":"1464958630.002886"},{"type":"message","user":"U0UGH3X7X","text":"agree 1098 is not just consensus","ts":"1464958632.002887"},{"type":"message","user":"U0Y14MWA2","text":"for other things we have PRs submitted right (e.g., periodic leader rotation)","ts":"1464958661.002888"},{"type":"message","user":"U0Y14MWA2","text":"?","ts":"1464958663.002889"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1464958665.002890"},{"type":"message","user":"U0Y14MWA2","text":"ok","ts":"1464958668.002891"},{"type":"message","user":"U0Y14MWA2","text":"thanks","ts":"1464958668.002892"},{"type":"message","user":"U0Y14MWA2","text":"sorry for distrubance","ts":"1464958675.002893"},{"type":"message","user":"U0UGH3X7X","text":"#1701 which just came in","ts":"1464958685.002894"},{"type":"message","user":"U0Y14MWA2","text":"aha - let me look","ts":"1464958691.002895"},{"type":"message","user":"U0XR6J961","text":"there is 1701, which is related to 1098","ts":"1464958693.002896"},{"type":"message","user":"U0Y14MWA2","text":"hm 1701 looks bad","ts":"1464958763.002897"},{"type":"message","user":"U0Y14MWA2","text":"I will put that one in","ts":"1464958782.002898"},{"type":"message","user":"U0Y14MWA2","text":"so - to recap","ts":"1464958784.002899"},{"type":"message","user":"U0UGH3X7X","text":"i'll try to reproduce in the hackathon today","ts":"1464958798.002900"},{"type":"message","user":"U0Y14MWA2","text":"#1701, #1478, #1338 and #1098 (to a consensus extent)","ts":"1464958830.002901"},{"type":"message","user":"U0Y14MWA2","text":"+ #1180 should be closed","ts":"1464958836.002902"},{"type":"message","user":"U0Y14MWA2","text":"is that ok?","ts":"1464958854.002903"},{"type":"message","user":"U0UGH3X7X","text":"i'd rather we do not have 1098 on the list ?   should really be a system design","ts":"1464958945.002904"},{"type":"message","user":"U0Y14MWA2","text":"ok, let me get rid of it","ts":"1464958955.002905"},{"type":"message","user":"U0Y14MWA2","text":"else is fine?","ts":"1464958960.002906"},{"type":"message","user":"U0UGH3X7X","text":"ok","ts":"1464958968.002907"},{"type":"message","user":"U0Y14MWA2","text":"ok thks","ts":"1464958971.002908"},{"type":"message","user":"U0Y14MWA2","text":"in 1701 it would be ok if he sees one different reply","ts":"1464959251.002909"},{"type":"message","user":"U0Y14MWA2","text":"but not all 4 :slightly_smiling_face:","ts":"1464959254.002910"},{"type":"message","user":"U0Y14MWA2","text":"as he actually waits for systems to \"settle down\", so not really issuing reads concurrently with a write","ts":"1464959279.002911"},{"type":"message","user":"U0XR6J961","text":"yea no idea what is going on there","ts":"1464959597.002912"},{"type":"message","user":"U0XR6J961","text":"I've been pondering for hours about how to do this 2f+1 send limit","ts":"1465208225.000002"},{"type":"message","user":"U0XR6J961","text":"this is real tricky","ts":"1465208232.000003"},{"type":"message","user":"U0XR6J961","text":"the problem i'm having is that i think i shouldn't treat error results (= no send) as success","ts":"1465208645.000004"},{"type":"message","user":"U0XR6J961","text":"Let's say we are in a situation where f replicas are disconnected and byzantine, and the rest is connected, but a bit slow.  If I don't consider send errors as byzantine, I will end up waiting only for f+1 replicas, instead of for 2f+1, because the other f erroring ones complete most quickly.","ts":"1465208934.000005"},{"type":"message","user":"U0XR6J961","text":"Now let's say I consider errored ones as byzantine.  Maybe they are not, and we just lost the network connection, and instead there are f byz replicas that don't accept data.  Then I would be blocked because while waiting for 2f+1 sends to succeed, f byz replicas are not accepting data and the sends never finish.","ts":"1465209049.000006"},{"type":"message","user":"U0XR6J961","text":"So that doesn't work.  It means send errors need to be treated like \"it's still sending\", i.e. we need to retry sending.  Now the question becomes, how long should we wait for the network to become available?  If we say \"indefinitely\", then we stop operation on network failures.  Which may be fine, but seems counter to the spirit of PBFT.  If we say \"don't wait\", we will start discarding messages, maybe without need.  Imagine a deploy transaction - huge amount of data.  Following messages won't fit into the buffers and will be discarded.  That won't be good for system performance.","ts":"1465209304.000007"},{"type":"message","user":"U0XR6J961","text":"That leaves me with some arbitrary send timeout, which feels uncomfortable, but seems necessary.","ts":"1465209335.000008"},{"type":"message","user":"U0XQ35CDD","text":"define \"send errors\"?","ts":"1465209435.000009"},{"type":"message","user":"U0XR6J961","text":"anything where send returns an error","ts":"1465209835.000010"},{"type":"message","user":"U0XR6J961","text":"typically disconnected peers, i'd guess","ts":"1465209844.000011"},{"type":"message","user":"U0XR6J961","text":"<https:\/\/github.com\/hyperledger\/fabric\/issues\/1056>","attachments":[{"service_name":"GitHub","title":"Investigate blocking network operations in fabric \u00b7 Issue #1056 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/issues\/1056","text":"Per a discussion with @chetmurthy we should audit the fabric code to ensure that we never expect network operations to only succeed\/fail immediately, but instead ensure that we also handle the time...","fallback":"GitHub: Investigate blocking network operations in fabric \u00b7 Issue #1056 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/issues\/1056","thumb_width":420,"thumb_height":420,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1465210786.000012"},{"type":"message","user":"U0KPFAZNF","text":"I went through a similar dilemma trying to account for things beyond f problems.  Then I realized: you can't do much,  it essentially undefined at that point. ","ts":"1465211350.000014"},{"type":"message","user":"U0KPFAZNF","text":"So, if you have f bad nodes and a few more slow nodes, just do whatever is the most conservative ","ts":"1465211397.000015"},{"type":"message","user":"U0KPFAZNF","text":"In this case, that might be to block for a really long time","ts":"1465211417.000016"},{"type":"message","user":"U0KPFAZNF","text":"The algorithms are only designed to guarantee loveliness if you have not crossed the Byzantine threshold","ts":"1465211505.000017"},{"type":"message","user":"U0KPFAZNF","text":"Liveliness ","ts":"1465211529.000018"},{"type":"message","user":"U0KPFAZNF","text":"(Thanks, autocorrect)","ts":"1465211542.000019"},{"type":"message","user":"U0KPFAZNF","text":"Problems arise when you try to handle the condition in an effort to make forward progress","ts":"1465211647.000020"},{"type":"message","user":"U0XQ35CDD","text":"the paper states that it \"guarantees liveness provided message delays are bounded eventually\"","ts":"1465212737.000021"},{"type":"message","user":"U0XQ35CDD","text":"so a timeout seems in order here","ts":"1465212761.000022"},{"type":"message","user":"U0KPFAZNF","text":"maybe, but that isnt necessarily the conclusion to draw","edited":{"user":"U0KPFAZNF","ts":"1465214259.000000"},"ts":"1465214245.000023"},{"type":"message","user":"U0KPFAZNF","text":"it just simply says that liveness is predicated on messages within the 2f+1 arriving eventually\u2026that has no bearing on what to do if they don't","ts":"1465214314.000025"},{"type":"message","user":"U0XQ35CDD","text":"that is correct - I am looking for a practical fix","ts":"1465214373.000026"},{"type":"message","user":"U0KPFAZNF","text":"The system only works at approximately the speed of the healthiest 2f+1 nodes\u2026the moment you don\u2019t have 2f+1 healthy nodes, all bets are off\u2026but the most conservative thing to do might be to wait until you do","ts":"1465214407.000027"},{"type":"message","user":"U0KPFAZNF","text":"i guess the question is: what do we hope to accomplish with the timeout?","ts":"1465214454.000028"},{"type":"message","user":"U0KPFAZNF","text":"if merely logging, that is harmless enough","ts":"1465214468.000029"},{"type":"message","user":"U0KPFAZNF","text":"anything beyond that starts to get into sketchy territory, where we are no longer covered by the proofs","ts":"1465214511.000030"},{"type":"message","user":"U0XQ35CDD","text":"the timeout would fix #1478 and #1056","ts":"1465214581.000031"},{"text":"looks","type":"message","subtype":"me_message","user":"U0KPFAZNF","ts":"1465214587.000032"},{"type":"message","user":"U0XQ35CDD","text":"other than that, as I said, I agree - did Marko have a look into this?","ts":"1465214628.000033"},{"type":"message","user":"U0XR6J961","text":"i didn't yet talk to him about the specific thoughts i came up with","ts":"1465214683.000034"},{"type":"message","user":"U0KPFAZNF","text":"i see, seems like we are talking about a different problem here","ts":"1465214693.000035"},{"type":"message","user":"U0XR6J961","text":"technically you can just discard messages","ts":"1465214701.000036"},{"type":"message","user":"U0KPFAZNF","text":"in 1478, IIUC, its 4 out of 5 nodes that are healthy","ts":"1465214716.000037"},{"type":"message","user":"U0XR6J961","text":"but if you're too aggressive about that, then you basically produce a constantly failing network","ts":"1465214727.000038"},{"type":"message","user":"U0XQ35CDD","text":"<@U0KPFAZNF>: correct, you don't cross the `f` threshold","ts":"1465214728.000039"},{"type":"message","user":"U0KPFAZNF","text":"<@U0XQ35CDD>: ok, apologies, I thought @corecode mentioned situations beyond f failures","ts":"1465214753.000040"},{"type":"message","user":"U0XQ35CDD","text":"he did :simple_smile:","ts":"1465214765.000041"},{"type":"message","user":"U0XR6J961","text":"f byzantine plus network failures","ts":"1465214775.000042"},{"type":"message","user":"U0XR6J961","text":"which are not considered byzantine","ts":"1465214781.000043"},{"type":"message","user":"U0XQ35CDD","text":"he also included the link to #1056 which is what I was addressing","ts":"1465214785.000044"},{"type":"message","user":"U0KPFAZNF","text":"<@U0XR6J961>: I guess it depends on your definition of byzantine, but isn\u2019t it true that you cant easily tell the difference?","ts":"1465214824.000045"},{"type":"message","user":"U0XR6J961","text":"you cannot","ts":"1465214847.000046"},{"type":"message","user":"U0XR6J961","text":"and that's exactly the problem","ts":"1465214851.000047"},{"type":"message","user":"U0KPFAZNF","text":"right, thats my point\u2026once you cross f, regardless of the reason, all bets are off in terms of how you may reasonably respond","ts":"1465214876.000048"},{"type":"message","user":"U0KPFAZNF","text":"it seems the most conservative approach is to assume that forward progress is impeded and actively attempt to restore connectivity until we are below the threshold again","ts":"1465214930.000049"},{"type":"message","user":"U0XR6J961","text":"no, network failure does not count towards f","ts":"1465214936.000050"},{"type":"message","user":"U0KPFAZNF","text":"that makes no sense to me","ts":"1465214946.000051"},{"type":"message","user":"U0KPFAZNF","text":"how can you discern \u201cnetwork failure\u201d from any other class of error where the node isnt responsive","ts":"1465214964.000052"},{"type":"message","user":"U0XQ35CDD","text":"FWIW, it doesn't make sense to me either","ts":"1465214969.000053"},{"type":"message","user":"U0XR6J961","text":"you can't","ts":"1465214986.000054"},{"type":"message","user":"U0XR6J961","text":"but it still doesn't mean that more than f nodes are byzantine","ts":"1465214999.000055"},{"type":"message","user":"U0KPFAZNF","text":"I dont care if I cant reach node X because the trans-atlantic hop went down, the DC it lives in lost power, or the software that runs on it was hacked","ts":"1465215012.000056"},{"type":"message","user":"U0XR6J961","text":"yes, you don't care","ts":"1465215025.000057"},{"type":"message","user":"U0KPFAZNF","text":"either way, its not a healthy node as part of the 2f+1 from the perspective of the observer","ts":"1465215025.000058"},{"type":"message","user":"U0XR6J961","text":"no","ts":"1465215036.000059"},{"type":"message","user":"U0XR6J961","text":"an impartial observer can tell that there is a network partition","ts":"1465215056.000060"},{"type":"message","user":"U0XR6J961","text":"and all the proofs are based on that","ts":"1465215066.000061"},{"type":"message","user":"U0KPFAZNF","text":"im not sure that matters though","ts":"1465215072.000062"},{"type":"message","user":"U0KPFAZNF","text":"each node is its own observer and nodes that cannot be reached are effectively byzantine","ts":"1465215102.000063"},{"type":"message","user":"U0XR6J961","text":"no they are not","ts":"1465215113.000064"},{"type":"message","user":"U0XR6J961","text":"because if they were byzantine and i knew it","ts":"1465215123.000065"},{"type":"message","user":"U0XR6J961","text":"i would have to stop","ts":"1465215127.000066"},{"type":"message","user":"U0KPFAZNF","text":"that sounds like a semantic debate","ts":"1465215128.000067"},{"type":"message","user":"U0KPFAZNF","text":"we agree the network is decentralized, right?  there is no impartial byzantine status manager, right?","ts":"1465215184.000068"},{"type":"message","user":"U0XR6J961","text":"on the node, i can't tell what is what, that's correct","ts":"1465215185.000069"},{"type":"message","user":"U0KPFAZNF","text":"correct, you cant","ts":"1465215192.000070"},{"type":"message","user":"U0XR6J961","text":"but this is not just theory","ts":"1465215201.000071"},{"type":"message","user":"U0KPFAZNF","text":"all you can tell is how many nodes are responding and in agreement","ts":"1465215206.000072"},{"type":"message","user":"U0XR6J961","text":"we're trying to build a system that meets expectations that are stronger than what PBFT can provide","ts":"1465215233.000073"},{"type":"message","user":"U0KPFAZNF","text":"ok, but lets finish this thought:","ts":"1465215248.000074"},{"type":"message","user":"U0KPFAZNF","text":"all we can tell is how many nodes are responding and in agreement, nothing more\u2026.and we can try to be helpful to other nodes by responding ourselves","ts":"1465215280.000075"},{"type":"message","user":"U0XR6J961","text":"right","ts":"1465215292.000076"},{"type":"message","user":"U0KPFAZNF","text":"from that, the system, from the perspective of this node, can make forward progress if 2f+1 are responding and in agreement","ts":"1465215316.000077"},{"type":"message","user":"U0KPFAZNF","text":"and we cannot make forward progress if we have less than that","ts":"1465215344.000078"},{"type":"message","user":"U0KPFAZNF","text":"we will quickly try to run into trouble if you try to get fancy with how you respond after f has been crossed","ts":"1465215372.000079"},{"type":"message","user":"U0XR6J961","text":"well, you have to do something","ts":"1465215397.000080"},{"type":"message","user":"U0KPFAZNF","text":"the only thing you can really do is recognize that we have to wait until we get back to 2f+1","ts":"1465215404.000081"},{"type":"message","user":"U0XR6J961","text":"in PBFT, when the timeout expires, you do a view change","ts":"1465215415.000082"},{"type":"message","user":"U0KPFAZNF","text":"yes, service is out (at least on your side of the partition) but that is all you can really do","ts":"1465215418.000083"},{"type":"message","user":"U0XR6J961","text":"and hope that it was the primary's fault","ts":"1465215429.000084"},{"type":"message","user":"U0XR6J961","text":"or maybe it is the network and eventually you'll sync up","ts":"1465215443.000085"},{"type":"message","user":"U0KPFAZNF","text":"trying to do a view change in a subordinate or inferior partition will be fruitless though","ts":"1465215448.000086"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1465215459.000087"},{"type":"message","user":"U0KPFAZNF","text":"yes, you should perhaps try, yes","ts":"1465215463.000088"},{"type":"message","user":"U0XR6J961","text":"that's on the receiving side","ts":"1465215475.000089"},{"type":"message","user":"U0KPFAZNF","text":"but really, once &gt;f, you are stalled","ts":"1465215480.000090"},{"type":"message","user":"U0XR6J961","text":"what i'm at is the sending side","ts":"1465215482.000091"},{"type":"message","user":"U0KPFAZNF","text":"thats fine, i think we are talking about slightly different things now anyay","ts":"1465215512.000092"},{"type":"message","user":"U0KPFAZNF","text":"anyway","ts":"1465215514.000093"},{"type":"message","user":"U0XR6J961","text":"currently the code waits for all sends to return","ts":"1465215525.000094"},{"type":"message","user":"U0KPFAZNF","text":"i thought you were talking about channel timeouts, which would be a different consideration from view-change timeouts","ts":"1465215542.000095"},{"type":"message","user":"U0XR6J961","text":"which fails if a node deliberately doesn't service its connection","ts":"1465215544.000096"},{"type":"message","user":"U0KPFAZNF","text":"yes, you need to wait for 2f+1, not all","ts":"1465215563.000097"},{"type":"message","user":"U0KPFAZNF","text":"anyway, have to get kiddos to school, bbiab","ts":"1465215578.000098"},{"type":"message","user":"U0XR6J961","text":"ok","ts":"1465215581.000099"},{"type":"message","user":"U0XR6J961","text":"it is all difficult - even if 2f+1 nodes accept the send, there may still be f nodes that don't","ts":"1465216799.000100"},{"type":"message","user":"U0XR6J961","text":"their send may block.  but that means that i might queue an unbounded amount of data to these non-responding nodes","ts":"1465216937.000101"},{"user":"U1EEGQARJ","type":"message","subtype":"channel_join","text":"<@U1EEGQARJ|philippe> has joined the channel","ts":"1465226886.000102"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: I think you fell off the call","ts":"1465228919.000103"},{"type":"message","user":"U0XR6J961","text":"i did :confused:","ts":"1465228997.000104"},{"type":"message","user":"U0XPR4NP4","text":"There should be no scenario where the PBFT event thread stops reading messages off of the receive queue","ts":"1465229435.000105"},{"type":"message","user":"U0XPR4NP4","text":"Actually, there is a piece of code that really needs to be reworked, which I think could be causing those buffers to fill","ts":"1465229457.000106"},{"type":"message","user":"U0XPR4NP4","text":"Somehow, after all of the cleanup that's been done, in batch, the execution is being done on the main event thread now","ts":"1465229504.000107"},{"type":"message","user":"U0XPR4NP4","text":"So, for deploy transactions in particular, we could end up blocking for somewhat long periods of time","ts":"1465229525.000108"},{"type":"message","user":"U0XPR4NP4","text":"It's been on my TODO list to fix, maybe now if the time.","ts":"1465229558.000109"},{"type":"message","user":"U0XR6J961","text":"ooooh","ts":"1465229568.000110"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1465229599.000111"},{"type":"message","user":"U0XR6J961","text":"that with slow execution could explain both timeouts and discarded messages","ts":"1465229616.000112"},{"type":"message","user":"U0XPR4NP4","text":"Sounds like a reasonable priority for me for the moment then, I'll focus on that unless you see something else more pressing?","ts":"1465229666.000113"},{"type":"message","user":"U0XR6J961","text":"that sounds good and not too complicated","ts":"1465229679.000114"},{"type":"message","user":"U0XR6J961","text":"now with all events in place","ts":"1465229682.000115"},{"type":"message","user":"U0XPR4NP4","text":"Right","ts":"1465229688.000116"},{"type":"message","user":"U0XR6J961","text":"should i look into commit on checkpoint?","ts":"1465229746.000117"},{"type":"message","user":"U0XPR4NP4","text":"I'm a little worried we're going to be touching the same code there (since it's both in the batch execution path)","ts":"1465229783.000118"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1465229804.000119"},{"type":"message","user":"U0XR6J961","text":"that was my thought","ts":"1465229806.000120"},{"type":"message","user":"U0XR6J961","text":"i'll hold off for now","ts":"1465229812.000121"},{"type":"message","user":"U0XR6J961","text":"and think about the sending issue","ts":"1465229818.000122"},{"type":"message","user":"U0XPR4NP4","text":"Sounds good, thanks <@U0XR6J961>!","ts":"1465229826.000123"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> <https:\/\/github.com\/hyperledger\/fabric\/pull\/1734>","attachments":[{"service_name":"GitHub","title":"Move pbft batch execution off main thread by jyellick \u00b7 Pull Request #1734 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1734","text":"Description This changeset moves the actual fabric execution off of the main event thread and onto its own thread so that PBFT can continue to process messages while execution is being performed. ...","fallback":"GitHub: Move pbft batch execution off main thread by jyellick \u00b7 Pull Request #1734 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1734","thumb_width":420,"thumb_height":420,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1465233609.000124"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XQ35CDD>: <@U0UGH3X7X> ^ for review as well","ts":"1465234390.000126"},{"type":"message","user":"U0Y14MWA2","text":"guys - I have second thoughts on commit on checkpoint","ts":"1465246409.000127"},{"type":"message","user":"U0Y14MWA2","text":"in the case of #1701 or #1545 - what this would do is simply block the whole network for good - since we cannot make a valid checkpoint","ts":"1465246461.000128"},{"type":"message","user":"U0Y14MWA2","text":"with that - we are not addressing the source of issues that lead to #1701 and #1545","ts":"1465246487.000129"},{"type":"message","user":"U0Y14MWA2","text":"we need to understand: 1) do they have non-deterministic chaincode","ts":"1465246505.000130"},{"type":"message","user":"U0Y14MWA2","text":"or 2) we have a bug in execution \/ state hash calculation","ts":"1465246524.000131"},{"type":"message","user":"U0Y14MWA2","text":"in case of 1) - my response is - we do not care and will not do anything","ts":"1465246617.000132"},{"type":"message","user":"U0Y14MWA2","text":"in case of 2) we obviously need to fix","ts":"1465246626.000133"},{"type":"message","user":"U0Y14MWA2","text":"and re - commit on checkpoints - I do not think that blocking the entire network for good is actually a sufficiently good resolution of these issues","ts":"1465246628.000134"},{"type":"message","user":"U0XPR4NP4","text":"<@U0Y14MWA2>: In the event that there are 2f+1 matching checkpoints, any of the remaining f which disagree would believe themselves to be byzantine, and recover via state transfer","ts":"1465246685.000135"},{"type":"message","user":"U0Y14MWA2","text":"indeed but logs from JPX show all 4 peers diverging","ts":"1465246704.000136"},{"type":"message","user":"U0Y14MWA2","text":"at that point not only you cannot make a stable checkpoint","edited":{"user":"U0Y14MWA2","ts":"1465246746.000000"},"ts":"1465246715.000137"},{"type":"message","user":"U0Y14MWA2","text":"but cannot trust anyone to actually transfer state from","ts":"1465246723.000138"},{"type":"message","user":"U0Y14MWA2","text":"so we block","ts":"1465246725.000139"},{"type":"message","user":"U0XPR4NP4","text":"If they all four diverge at the same point, then yes, we would have a problem, I had not seen any logs which actually included the problem","ts":"1465246739.000140"},{"type":"message","user":"U0Y14MWA2","text":"again this may fix this run - but certainly does not fix the cause of the issue","ts":"1465246767.000142"},{"type":"message","user":"U0XPR4NP4","text":"Certainly the 'commit on checkpoint' is not a solution to non-determinism, but it would prevent inconsistent state from being committed across the network","ts":"1465246776.000143"},{"type":"message","user":"U0Y14MWA2","text":"agree wit hthat - but it does not solve the source of the issue","ts":"1465246807.000144"},{"type":"message","user":"U0XPR4NP4","text":"Completely agree with respect to (1) and (2)","ts":"1465246809.000145"},{"type":"message","user":"U0Y14MWA2","text":"non-determinism should not be there","ts":"1465246812.000146"},{"type":"message","user":"U0XPR4NP4","text":"If (2), this is a very serious bug that _must_ be identified and fixed","ts":"1465246823.000147"},{"type":"message","user":"U0XPR4NP4","text":"If (1), they should fix, but, committing on checkpoint would prevent a client from querying, and receiving a value which ultimately may not be committed","ts":"1465246859.000148"},{"type":"message","user":"U0Y14MWA2","text":"anyway - it would be great to make that  (checkpoint on commit) configurable","ts":"1465246871.000149"},{"type":"message","user":"U0Y14MWA2","text":"so we can actually configure the \"normal\" pbft and \"paranoid\" pbft","edited":{"user":"U0Y14MWA2","ts":"1465246911.000000"},"ts":"1465246891.000150"},{"type":"message","user":"U0XPR4NP4","text":"Yes, <@U0XR6J961> and I discussed this some on the phone, we should be able to make this configurable","ts":"1465246923.000153"},{"type":"message","user":"U0Y14MWA2","text":"ok - but again we need to also look at the source of the issue","ts":"1465246944.000154"},{"type":"message","user":"U0Y14MWA2","text":"do we have the chaincode?","ts":"1465246948.000155"},{"type":"message","user":"U0XPR4NP4","text":"I have not seen the logs to which you're referring, last I checked, I found the logs were not complete to the point they described the problem (and only for 2 nodes)","ts":"1465246974.000156"},{"type":"message","user":"U0XPR4NP4","text":"And we were missing chaincode logs, but I could be out of date","ts":"1465246983.000157"},{"type":"message","user":"U0Y14MWA2","text":"this is what I saw as well - but we need actual chaincode to look for non-determinism","ts":"1465247002.000158"},{"type":"message","user":"U0Y14MWA2","text":"we do not have that right?","ts":"1465247007.000159"},{"type":"message","user":"U0UGH3X7X","text":"barry\/mihir are replicating the environment ... should have more logs in the morning","ts":"1465247008.000160"},{"type":"message","user":"U0UGH3X7X","text":"and chaincodes","ts":"1465247023.000161"},{"type":"message","user":"U0Y14MWA2","text":"ok then - pls post here when you have the chaincodes","ts":"1465247034.000162"},{"type":"message","user":"U0Y14MWA2","text":"BTW - as a general rule","ts":"1465247038.000163"},{"type":"message","user":"U0Y14MWA2","text":"we must tell folks to submit chaincode + logs","ts":"1465247051.000164"},{"type":"message","user":"U0Y14MWA2","text":"otherwise no bug of this kind is reproducible","ts":"1465247064.000165"},{"type":"message","user":"U0UGH3X7X","text":"+1","ts":"1465247081.000166"},{"type":"message","user":"U0Y14MWA2","text":"i meant - do not post chaincode here :slightly_smiling_face:","ts":"1465247087.000167"},{"type":"message","user":"U0Y14MWA2","text":"but post a notice","ts":"1465247091.000168"},{"type":"message","user":"U0Y14MWA2","text":"thks!","ts":"1465247098.000169"},{"type":"message","user":"U0XPR4NP4","text":"<@U0Y14MWA2>: I am not an expert with the chaincodes, but I believe for many, this is where their 'application' which is being built on top of the fabric lives, I am not certain everyone will be happy\/willing to share this","ts":"1465247116.000170"},{"type":"message","user":"U0XPR4NP4","text":"But when available, certainly it could be helpful","ts":"1465247135.000171"},{"type":"message","user":"U0Y14MWA2","text":"ack but then it is easy for us - we offer no service :slightly_smiling_face:","ts":"1465247145.000172"},{"type":"message","user":"U0Y14MWA2","text":"until there is a chaincode utility  with which they can provably show it is deterministic :slightly_smiling_face:","edited":{"user":"U0Y14MWA2","ts":"1465247246.000000"},"ts":"1465247184.000173"},{"type":"message","user":"U0Y14MWA2","text":"in zero knowledge","ts":"1465247206.000174"},{"type":"message","user":"U142E5N0P","text":"How do I config pbft to be the consensus plugin of peer node?\n\nThis is my config:\n\n```\n    # Validator defines whether this peer is a validating peer or not, and if\n    # it is enabled, what consensus plugin to load\n    validator:\n        enabled: true\n\n        consensus:\n            # Consensus plugin to use. The value is the name of the plugin, e.g. pbft, noops ( this value is case-insensitive)\n            # if the given value is not recognized, we will default to noops\n            plugin: batch\n\n            # total number of consensus messages which will be buffered per connection before delivery is rejected\n            buffersize: 1000\n```\n\nbut I still see the outputs of a `noops` plugin is created:\n\n```\n[36m09:46:45.612 [consensus\/statetransfer] blockThread -&gt; DEBU 02bESC[0m name:\"vp0\"  has validated its blockchain to the genesis block\n09:46:45.612 [consensus\/noops] newNoops -&gt; INFO 02cESC[0m NOOPS consensus type = *noops.Noops\n09:46:45.612 [consensus\/noops] newNoops -&gt; INFO 02dESC[0m NOOPS block size = 500\n09:46:45.612 [consensus\/noops] newNoops -&gt; INFO 02eESC[0m NOOPS block timeout = 1s\n```","edited":{"user":"U142E5N0P","ts":"1465293499.000000"},"ts":"1465293434.000176"},{"type":"message","user":"U0XR6J961","text":"you set the consensus type in the core.yaml file","ts":"1465293487.000178"},{"type":"message","user":"U142E5N0P","text":"<@U0XR6J961>:  `plugin: batch` is  configured in the core.yaml file","ts":"1465293533.000180"},{"type":"message","user":"U0XR6J961","text":"hmm","ts":"1465293540.000181"},{"type":"message","user":"U0XR6J961","text":"ah no, plugin: obcpbft","ts":"1465293566.000182"},{"type":"message","user":"U0XR6J961","text":"i think","ts":"1465293567.000183"},{"type":"message","user":"U142E5N0P","text":"...","ts":"1465293607.000184"},{"type":"message","user":"U0XQ35CDD","text":"`plugin: pbft`","ts":"1465293607.000185"},{"type":"message","user":"U0XQ35CDD","text":"<@U142E5N0P>: <https:\/\/github.com\/hyperledger\/fabric\/wiki\/Consensus>","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/wiki\/Consensus","text":"fabric - Fabric is a blockchain project in Incubation proposed to the community and documented at <https:\/\/goo.gl\/RYQZ5N>. Information on what Incubation entails can be found in the Hyperledger Proj...","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/wiki\/Consensus","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1465293642.000186"},{"type":"message","user":"U142E5N0P","text":"<@U0XQ35CDD>:  got it, thank you","ts":"1465293699.000188"},{"type":"message","user":"U0XR6J961","text":"that should definitely be in a comment","ts":"1465294216.000191"},{"type":"message","user":"U0XR6J961","text":"what options you have","ts":"1465294219.000192"},{"type":"message","user":"U142E5N0P","text":"When I use `plugin: pbft` and setup the p2p network, I could see each node has the classic pbft plugin worked.  However, when I send a chaincode deploy json to them, why corresponding docker images could not be created anymore?  And I would get a failure when send query request.  This is the output of `docker images`:\n\n```\nREPOSITORY                     TAG                 IMAGE ID            CREATED             SIZE\nhyperledger-peer               latest              aad903f81518        52 minutes ago      2.066 GB\nhyperledger\/fabric-baseimage   latest              5d4fe4b975c6        4 days ago          1.384 GB\n```\nNo such containers with name of `dev-vp0-7b07c59e9b9405c1aef33493b63b9a766d9bb836989ded1730052de650aa8ce5654274d148ceff96a4e5bd43bca26aba099f55c400e4befdc8b2ee4c0a94e30b`  has ever been created any more.","ts":"1465297235.000193"},{"type":"message","user":"U0XR6J961","text":"i don't know","ts":"1465297319.000194"},{"type":"message","user":"U0XR6J961","text":"without logs i cannot help","ts":"1465297323.000195"},{"type":"message","user":"U142E5N0P","text":"<https:\/\/transfer.sh\/z94uL\/peer.dbg.out>","ts":"1465297460.000196"},{"type":"message","user":"U0XR6J961","text":"are you running 4 nodes?","ts":"1465297624.000197"},{"type":"message","user":"U142E5N0P","text":"yes","ts":"1465297632.000198"},{"type":"message","user":"U142E5N0P","text":"this is the output of another node which accept the `deploy` request   <https:\/\/transfer.sh\/GDJ3w\/peer.dbg.out>","ts":"1465297672.000199"},{"type":"message","user":"U0XR6J961","text":"what version of the code are you running?","ts":"1465297951.000200"},{"type":"message","user":"U142E5N0P","text":"latest code with commit of `803e594489dcd011970d168403ee328be0b3da3a`","ts":"1465298011.000201"},{"type":"message","user":"U0XR6J961","text":"i don't have that","ts":"1465298165.000202"},{"type":"message","user":"U0XR6J961","text":"ah no","ts":"1465298176.000203"},{"type":"message","user":"U0XR6J961","text":"weird","ts":"1465298183.000204"},{"type":"message","user":"U0XR6J961","text":"ah, try pbft batch","ts":"1465298228.000205"},{"type":"message","user":"U142E5N0P","text":"ok","ts":"1465298355.000206"},{"type":"message","user":"U142E5N0P","text":"still the same.. \nthe config is:\n```\nmode: batch\n```\nin the `consensus\/obcpbft\/config.yaml`,  and the output log is too  huge to be uploaded..  there are many chaotic outputs such as:\n```\n2\\246\\013\\322\\350,D\\321\\251\\350l\\366\\025\\343\\347\\003[\\013\\310\\242\\261\\270\\352t\\023\\335\\255C\\233\\000(\\315YZU\\252\\361\\020\\277\\030\\354\\346\\363$\\240\\266\\334k\\233\\361\\324\\250oW\\307\\204\\200\\\\\\002h\\334;J \\021\\306G\\214\\366\\211^\\261r\\032\\326\\214@\\322o\\\"t\\033\\374X`\\036\\001['\\243\\200sj\\245\\254r\\327B(%\\302\\363(\\263~*F\\331,p\\200\\002\\333+#\\034\\016!2\\217\\030\\311\\352\\010\\261J.\\311\\237\\376\\365\\021\\342\\260p:\\002\\324\\177c\\224s\\t\\013\\220#\\202\\363\\277\\242\\220\\262\\232C\\350F\\306\\003@.\\204\\305Qb\\\n```","edited":{"user":"U142E5N0P","ts":"1465299437.000000"},"ts":"1465299397.000207"},{"type":"message","user":"U0XR6J961","text":"yea i don't know what that is","ts":"1465299955.000210"},{"type":"message","user":"U0XR6J961","text":"some code paths log content","ts":"1465299967.000211"},{"type":"message","user":"U0XR6J961","text":"which is unfortunate","ts":"1465299972.000212"},{"type":"message","user":"U0XR6J961","text":"without log i cannot help at all","ts":"1465299981.000213"},{"type":"message","user":"U142E5N0P","text":"I cut the head 1800 lines of the log file such that those chaotic outputs are not included: <https:\/\/transfer.sh\/JTA0\/peer.out>   the overall log is above 10G ..    I just send a deploy request","ts":"1465300591.000214"},{"type":"message","user":"U0XR6J961","text":"your deploy transaction is huge","ts":"1465301169.000215"},{"type":"message","user":"U0XR6J961","text":"200MB","ts":"1465301174.000216"},{"type":"message","user":"U0XR6J961","text":"and your network needs 5s to send that transaction","ts":"1465301198.000217"},{"type":"message","user":"U0XR6J961","text":"at that point, consensus decides that something is wrong","ts":"1465301212.000218"},{"type":"message","user":"U0XR6J961","text":"you will have to adjust your timeouts","ts":"1465301228.000219"},{"type":"message","user":"U0XR6J961","text":"or reduce your transaction size","ts":"1465301234.000220"},{"type":"message","user":"U0KPFAZNF","text":"we have patches in the works that may help on that front","ts":"1465301243.000221"},{"type":"message","user":"U0KPFAZNF","text":"(by substantially reducing cruft that makes it into the deploy payload today","ts":"1465301270.000222"},{"type":"message","user":"U0XR6J961","text":"it's all a hack","ts":"1465301272.000223"},{"type":"message","user":"U0KPFAZNF","text":"assuming that is the problem","ts":"1465301273.000224"},{"type":"message","user":"U0KPFAZNF","text":"what is?","ts":"1465301278.000225"},{"type":"message","user":"U0XR6J961","text":"the patches to only include certain types of files","ts":"1465301308.000226"},{"type":"message","user":"U0KPFAZNF","text":"well, maybe, but its a stopgap anyway","ts":"1465301326.000227"},{"type":"message","user":"U0KPFAZNF","text":"the right way to do it is to ask the chaincode for its list of dependencies, that will go in next","ts":"1465301355.000228"},{"type":"message","user":"U0KPFAZNF","text":"but, the hack gets us most of the way there, so if you need a quick fix for the 200MB","ts":"1465301379.000229"},{"type":"message","user":"U0XR6J961","text":"and move the shim dependency out of the main fabric repo","ts":"1465301379.000230"},{"type":"message","user":"U0KPFAZNF","text":"that actually doesnt matter any more","ts":"1465301390.000231"},{"type":"message","user":"U0XR6J961","text":"how does it work then?","ts":"1465301399.000232"},{"type":"message","user":"U142E5N0P","text":"<@U0XR6J961>  I just deploy the chaincode example2 ..","ts":"1465301410.000233"},{"type":"message","user":"U0XR6J961","text":"yingfeng: probably you have some large log files around","ts":"1465301425.000234"},{"type":"message","user":"U0KPFAZNF","text":"<@U0XR6J961>: see the comment about half-way down in PR 1720 <https:\/\/github.com\/hyperledger\/fabric\/pull\/1720>","attachments":[{"service_name":"GitHub","title":"Adding filtering on file extension during deploy by angrbrd \u00b7 Pull Request #1720 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1720","text":"Description This change is being made to add control as to which files end up inside the .tar.gz package upon deploy. Motivation and Context The original .tar.gz package was going through $GOP...","fallback":"GitHub: Adding filtering on file extension during deploy by angrbrd \u00b7 Pull Request #1720 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars2.githubusercontent.com\/u\/14612437?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1720","thumb_width":168,"thumb_height":168,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1465301453.000235"},{"type":"message","user":"U0KPFAZNF","text":"regarding gofiles.sh","ts":"1465301475.000237"},{"type":"message","user":"U0KPFAZNF","text":"there are techniques to result the deps (direct and transitive) for any package","ts":"1465301495.000238"},{"type":"message","user":"U0KPFAZNF","text":"and from there, there are techniques to ask any package for the files it includes","ts":"1465301514.000239"},{"type":"message","user":"U0KPFAZNF","text":"so, you can simply ask a package such as a chaincode for the complete set of packages\/files it needs, doesnt matter where they live","ts":"1465301538.000240"},{"type":"message","user":"U0KPFAZNF","text":"that is the direction both SDK\/NVP for GOLANG and chaintool for CAR need to go","ts":"1465301568.000241"},{"type":"message","user":"U0KPFAZNF","text":"(IMO)","ts":"1465301574.000242"},{"type":"message","user":"U0KPFAZNF","text":"but in the meantime, the file exclusions work perfectly well, and will substantially reduce the payload size","ts":"1465301594.000243"},{"type":"message","user":"U0XR6J961","text":"ok","ts":"1465301636.000244"},{"type":"message","user":"U142E5N0P","text":"<@U0XR6J961>\n\nThis is the code directory of my machine <http:\/\/pastebin.com\/km02KA2P>  , I build docker image using this directory, there does not exist a log file here..","attachments":[{"service_name":"Pastebin","title":"```  136K fabric\/core\/rest  20K fabric\/core\/chaincode\/platforms\/golang  12K fabr - Pastebin.com","title_link":"http:\/\/pastebin.com\/km02KA2P","fallback":"Pastebin: ```  136K fabric\/core\/rest  20K fabric\/core\/chaincode\/platforms\/golang  12K fabr - Pastebin.com","image_url":"http:\/\/pastebin.com\/i\/facebook.png","from_url":"http:\/\/pastebin.com\/km02KA2P","image_width":250,"image_height":250,"image_bytes":19206,"service_icon":"http:\/\/pastebin.com\/favicon.ico","id":1}],"ts":"1465301820.000245"},{"type":"message","user":"U0XR6J961","text":"319M    fabric\/","ts":"1465302068.000247"},{"type":"message","user":"U142E5N0P","text":"yes, there are some binaries, they are peer and chaincode programs","ts":"1465302237.000248"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1465302293.000249"},{"type":"message","user":"U0XR6J961","text":"that all gets packaged up","ts":"1465302299.000250"},{"type":"message","user":"U0KPFAZNF","text":"<@U142E5N0P>: if you\u2019d like, you can try running on top of the PR 1708 branch and I think that problem will be mitigated","ts":"1465302326.000251"},{"type":"message","user":"U0KPFAZNF","text":"1720 is the more direct\/short-term fix, but it needs more work to be ready to work for all cases","ts":"1465302348.000252"},{"type":"message","user":"U0KPFAZNF","text":"1708 at least passes CI currently","ts":"1465302358.000253"},{"type":"message","user":"U0KPFAZNF","text":"either way, 1708, 1720, or (most likely) an amalgam will be merged asap","ts":"1465302392.000254"},{"type":"message","user":"U142E5N0P","text":"got it, thanks","ts":"1465302406.000255"},{"type":"message","user":"U10SJMAHH","text":"<@U0Y14MWA2> I sent you the chaincode by e-mail.","attachments":[{"fallback":"[June 7th, 2016 6:04 AM] vukolic: but post a notice","author_subname":"vukolic","ts":"1465247091.000168","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"but post a notice","author_name":"Marko Vukolic","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/vukolic","author_icon":"https:\/\/secure.gravatar.com\/avatar\/a52edd136bbd07ca069b9393ac60f675.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0006-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1465247091000168","is_share":true,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1465305721.000256"},{"type":"message","user":"U0XR6J961","text":"hi sachikoy","ts":"1465305756.000257"},{"type":"message","user":"U10SJMAHH","text":"hi","ts":"1465305919.000258"},{"type":"message","user":"U0XR6J961","text":"do you have debug logs of the failures in 1545, 1331?","ts":"1465306870.000259"},{"type":"message","user":"U10SJMAHH","text":"here is the logs for 1545, for vp0 an vp1  <https:\/\/ibm.box.com\/s\/l9i37p4ex5or44iy3ojbva61d6lzrx43>","ts":"1465308792.000260"},{"type":"message","user":"U0XR6J961","text":"are these new?","ts":"1465309125.000262"},{"type":"message","user":"U0XR6J961","text":"because the ones i saw yesterday are incomplete","ts":"1465309169.000263"},{"type":"message","user":"U0XR6J961","text":"jyellick: <https:\/\/www.readability.com\/articles\/y2qyiyzd>","ts":"1465310647.000264"},{"type":"message","user":"U10SJMAHH","text":"vp1\u2019s log is incomplete because I lost network connection while downloading the log","ts":"1465310709.000265"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: Interesting.  I don't think that sells me on entirely on eliminating channels, but it does reaffirm my intuition that channels and mutexes do not mix nicely","ts":"1465311228.000266"},{"type":"message","user":"U0XR6J961","text":"sachikoy: without full logs, ideally from all peers, we can't really see what is going on","ts":"1465311237.000267"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> <@U0XQ35CDD> <@U0UGH3X7X> <https:\/\/github.com\/hyperledger\/fabric\/pull\/1744> this is a simple code rename refactor, if you have a chance to glance at and sign off","attachments":[{"service_name":"GitHub","title":"Move obcpbft events infrastructure into its own package by jyellick \u00b7 Pull Request #1744 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1744","text":"Description This changeset moves the obcpbft events framework into its own package and fixes all of the corresponding local references in the code to be package references. It also renames the as...","fallback":"GitHub: Move obcpbft events infrastructure into its own package by jyellick \u00b7 Pull Request #1744 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1744","thumb_width":420,"thumb_height":420,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1465311780.000268"},{"type":"message","user":"U0UGH3X7X","text":"so for #1331,   what should happen when i do an invoke to a peer that's just been re-started ?","ts":"1465313460.000270"},{"type":"message","user":"U0XPR4NP4","text":"Depends on how 'just' restarted, and the state of the network","ts":"1465315152.000271"},{"type":"message","user":"U0XPR4NP4","text":"This all assumes under batch, but if the network has not changed views since the peer went down and back up, then it should forward the request to the current (correct) primary, and it should be ordered by the network","ts":"1465315202.000272"},{"type":"message","user":"U0XPR4NP4","text":"This is regardless of the current replica's ability to participate in ordering.","ts":"1465315215.000273"},{"type":"message","user":"U0XPR4NP4","text":"If the peer is more out of sync with the network, it may have to wait until it can eavesdrop into the correct watermarks, and for a view change potentially to pick the correct view","ts":"1465315255.000274"},{"type":"message","user":"U0XPR4NP4","text":"But eventually, the request should be processed","ts":"1465315267.000275"},{"type":"message","user":"U0UGH3X7X","text":"that's what i expected ... from reading <@U13Q594J2> 's latest logs,  after peer3 is restarted, the subsequent requests are being forwarded and executed but peer3 isn't starting state transfer ...  rechecking now","ts":"1465315526.000276"},{"type":"message","user":"U0XR6J961","text":"actually when custody runs out, it will broadcast the complaint, and then the system should commit the transaction","ts":"1465315647.000277"},{"type":"message","user":"U0XR6J961","text":"testing async functions is such a pain","ts":"1465315723.000278"},{"type":"message","user":"U0XR6J961","text":"i don't understand how people usually test these things","ts":"1465315745.000279"},{"type":"message","user":"U0XR6J961","text":"jyellick: do we ever move watermarks without being up to date?","ts":"1465317097.000280"},{"type":"message","user":"U0XPR4NP4","text":"Yes","ts":"1465317132.000281"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> When we first detect we are out of date, we move our watermarks to where the network seems to be operating, this is so that we can collect a weak checkpoint certificate so that we can initiate state transfer.  It also allows us to buffer new transactions while state transfer takes place.","ts":"1465317196.000282"},{"type":"message","user":"U0XR6J961","text":"so at that point we start updating p and q sets","ts":"1465317283.000283"},{"type":"message","user":"U0XPR4NP4","text":"(As I've mentioned before, to not grow unboundedly, we only track 1 checkpoint per peer above our watermarks.  Often, we might get a weak cert of matching checkpoints, but it is not guaranteed, we might get f+1 checkpoints for different sequence numbers, or with non-matching hashes, that simply means we are out of date and must listen for a good target)","ts":"1465317315.000284"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I think that's correct","ts":"1465317335.000285"},{"type":"message","user":"U0XR6J961","text":"so updating lastExec to the watermark is incorrect?","ts":"1465317354.000286"},{"type":"message","user":"U0XPR4NP4","text":"Right","ts":"1465317390.000287"},{"type":"message","user":"U0XPR4NP4","text":"Actually, I think that's a bug in the view change code","ts":"1465317416.000288"},{"type":"message","user":"U0XPR4NP4","text":"```\n        if instance.lastExec &lt; cp.SequenceNumber {\n                logger.Warning(\"Replica %d missing base checkpoint %d (%s)\", instance.id, cp.SequenceNumber, cp.Id)\n\n                snapshotID, err := base64.StdEncoding.DecodeString(cp.Id)\n                if nil != err {\n                        err = fmt.Errorf(\"Replica %d received a view change who's hash could not be decoded (%s)\", instance.id, cp.Id)\n                        logger.Error(err.Error())\n                        return nil\n                }\n\n                instance.consumer.skipTo(cp.SequenceNumber, snapshotID, replicas)\n                instance.lastExec = cp.SequenceNumber\n        }\n```","ts":"1465317420.000289"},{"type":"message","user":"U0XPR4NP4","text":"That `lastExec` should be set once the state transfer completes, not at initiation","ts":"1465317453.000290"},{"type":"message","user":"U0XR6J961","text":"hmm","ts":"1465317463.000291"},{"type":"message","user":"U0XPR4NP4","text":"(It used to be correct, under the old executor model)","ts":"1465317466.000292"},{"type":"message","user":"U0XR6J961","text":"right","ts":"1465317515.000293"},{"type":"message","user":"U0XR6J961","text":"because state transfer may sync to a different seqno","ts":"1465317568.000294"},{"type":"message","user":"U0XPR4NP4","text":"Well, and additionally, I don't see anything there that would keep us from executing transactions before the state transfer completes, (which would temporarily corrupt the blockchain, and actually potentially permanently cause divergence )","edited":{"user":"U0XPR4NP4","ts":"1465317657.000000"},"ts":"1465317623.000295"},{"type":"message","user":"U0XR6J961","text":"but we're set to \"syncing\"","ts":"1465317675.000297"},{"type":"message","user":"U0XPR4NP4","text":"Where?","ts":"1465317681.000298"},{"type":"message","user":"U0XR6J961","text":"```\tif instance.skipInProgress {\n\t\tlogger.Debug(\"Replica %d currently picking a starting point to resume, will not execute\", instance.id)\n\t\treturn false\n\t}\n```","ts":"1465317704.000299"},{"type":"message","user":"U0XPR4NP4","text":"Right, but in the view change, where do we set `instance.skipInProgress`?","ts":"1465317718.000300"},{"type":"message","user":"U0XR6J961","text":"aha!","ts":"1465317734.000301"},{"type":"message","user":"U0XR6J961","text":"view change","ts":"1465317737.000302"},{"type":"message","user":"U0XR6J961","text":"also","ts":"1465317750.000303"},{"type":"message","user":"U0XR6J961","text":"what happens if we are executing","ts":"1465317759.000304"},{"type":"message","user":"U0XR6J961","text":"and we trigger a state transfer","ts":"1465317782.000305"},{"type":"message","user":"U0XR6J961","text":"they will execute concurrently","ts":"1465317788.000306"},{"type":"message","user":"U0XPR4NP4","text":"That does seem like a potential race","ts":"1465317791.000307"},{"type":"message","user":"U0XPR4NP4","text":"This is why the executor combined the two","ts":"1465317803.000308"},{"type":"message","user":"U0XR6J961","text":"maybe now it is time to build a small executor using the events system","ts":"1465317854.000309"},{"type":"message","user":"U0XPR4NP4","text":"I wonder if it doesn't belong outside of obcpbft, like state transfer","ts":"1465317877.000310"},{"type":"message","user":"U0XR6J961","text":"and state transfer can probably also unwind by using events","ts":"1465317881.000311"},{"type":"message","user":"U0XR6J961","text":"yea it does","ts":"1465317884.000312"},{"type":"message","user":"U0XPR4NP4","text":"I am trying to remember, what execution path work was it you were going to tackle?","ts":"1465317988.000313"},{"type":"message","user":"U0XR6J961","text":"the preview exec + commit on checkpoint?","ts":"1465318064.000314"},{"type":"message","user":"U0XPR4NP4","text":"Ah, yes, that's right","ts":"1465318086.000315"},{"type":"message","user":"U0XPR4NP4","text":"Wondering which work should be done first","ts":"1465318159.000316"},{"type":"message","user":"U0XR6J961","text":"bug fix over features","ts":"1465318269.000317"},{"type":"message","user":"U0XPR4NP4","text":"Fair enough.  As I know the state transfer semantics well, want me to tackle the mini-executor then?","ts":"1465318422.000318"},{"type":"message","user":"U0XR6J961","text":"and with it the commit on viewchange race?","ts":"1465318761.000319"},{"type":"message","user":"U0XPR4NP4","text":"Right","ts":"1465318941.000320"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1465319281.000321"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: Are you still handy?","ts":"1465320194.000322"},{"type":"message","user":"U0XR6J961","text":"i am","ts":"1465320199.000323"},{"type":"message","user":"U0XPR4NP4","text":"Designing the API for the executor","ts":"1465320209.000324"},{"type":"message","user":"U0XPR4NP4","text":"Since the executor must necessarily have its own thread for performing executions (and we don't want to block until they complete)","ts":"1465320236.000325"},{"type":"message","user":"U0XPR4NP4","text":"I was trying to decide how we should pass back the result to a call like `Preview` or `Commit`","ts":"1465320266.000326"},{"type":"message","user":"U0XPR4NP4","text":"The most simple\/direct approach is to supply a callback which will be invoked with the return value, but it's not the most intuitive of APIs","ts":"1465320300.000327"},{"type":"message","user":"U0XPR4NP4","text":"Something like: `Preview(callback func(uint64, *pb.Block))` or `Execute(txs []*pb.Transaction, callback func())`","ts":"1465320326.000328"},{"type":"message","user":"U0XPR4NP4","text":"Thoughts?","ts":"1465320354.000329"},{"type":"message","user":"U0XR6J961","text":"yea, thinking","ts":"1465320360.000330"},{"type":"message","user":"U0XR6J961","text":"would it be enough for it to emit an event?","ts":"1465320436.000331"},{"type":"message","user":"U0XR6J961","text":"i suppose for decoupling that would be a callback","ts":"1465320452.000332"},{"type":"message","user":"U0XPR4NP4","text":"Right, ultimately it will be converted back to an event","ts":"1465320524.000333"},{"type":"message","user":"U0XPR4NP4","text":"The other option would be to specify a callback receiver at instantiation","ts":"1465320543.000334"},{"type":"message","user":"U0XPR4NP4","text":"That would make the API usage a little more straightforward I would think, though it would reduce the flexibility a bit.","ts":"1465320565.000335"},{"type":"message","user":"U0XR6J961","text":"i think supplying an interface is more idiomatic?","ts":"1465320587.000336"},{"type":"message","user":"U0XR6J961","text":"on instantiation","ts":"1465320593.000337"},{"type":"message","user":"U0XPR4NP4","text":"Okay, that's fine with me","ts":"1465320605.000338"},{"type":"message","user":"U0XR6J961","text":"but then you have the problem with concurrent bringup","ts":"1465320610.000339"},{"type":"message","user":"U0XPR4NP4","text":"It does make instantiation a little annoying, but, because there's a `Start()`, it should be safe","ts":"1465320651.000340"},{"type":"message","user":"U0XR6J961","text":"i wonder what the idiomatic way is","ts":"1465320752.000341"},{"type":"message","user":"U0XPR4NP4","text":"As do I, seems like there must be a better pattern","ts":"1465320888.000342"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: Still around?","ts":"1465323235.000343"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1465323313.000344"},{"type":"message","user":"U0XPR4NP4","text":"So, I've tracked down the problem <@U0N1D1UAE> has been having with 'empty' blocks.  Basically, in the execution loop, we mark all of the requests as stale, and end up with a slice of transactions which is 0 length.","ts":"1465323453.000345"},{"type":"message","user":"U0XPR4NP4","text":"(In this case, there was only 1 transaction to begin with)","ts":"1465323488.000346"},{"type":"message","user":"U0XR6J961","text":"oh","ts":"1465323501.000347"},{"type":"message","user":"U0XR6J961","text":"how come","ts":"1465323523.000348"},{"type":"message","user":"U0XPR4NP4","text":"So, I'm wondering two things, one, what should we do if there are no valid transactions in a batch? I would think we should not write a block.","ts":"1465323531.000349"},{"type":"message","user":"U0XR6J961","text":"why did the primary include stale requests?","ts":"1465323551.000350"},{"type":"message","user":"U0XPR4NP4","text":"And secondly, it seems like the primary including stale transactions is a bug","ts":"1465323555.000351"},{"type":"message","user":"U0XR6J961","text":"probably should trigger view change","ts":"1465323561.000352"},{"type":"message","user":"U0XPR4NP4","text":"Right, as it would indicate byzantine behavior","ts":"1465323578.000353"},{"type":"message","user":"U0XR6J961","text":"primary should sort requests by the same sender","ts":"1465323619.000354"},{"type":"message","user":"U0XPR4NP4","text":"So, I think the way this is happening...","ts":"1465323631.000355"},{"type":"message","user":"U0XPR4NP4","text":"Is that the primary is receiving requests from REST with out of order timestamps","ts":"1465323647.000356"},{"type":"message","user":"U0XPR4NP4","text":"Because if there are concurrent requests to be delivered into consensus, it is not FIFO, it is pseudorandom (per standard channel writer behavior)","ts":"1465323682.000357"},{"type":"message","user":"U0XPR4NP4","text":"Or wait, maybe not...","ts":"1465323728.000358"},{"type":"message","user":"U0XPR4NP4","text":"We make a new timestamp it looks like","ts":"1465323740.000359"},{"type":"message","user":"U0XR6J961","text":"yes we do","ts":"1465325034.000360"},{"type":"message","user":"U0XPR4NP4","text":"The leader is receiving stale requests from itself","ts":"1465325410.000361"},{"type":"message","user":"U0XV1HDL3","text":"hi guys - i had this open and was reading","ts":"1465325580.000362"},{"type":"message","user":"U0XV1HDL3","text":"FIFO is not required for BFT... but if it is missing, clients often wonder what happens","ts":"1465325609.000363"},{"type":"message","user":"U0XV1HDL3","text":"and even write papers .... <https:\/\/arxiv.org\/abs\/1605.05438> ...","ts":"1465325638.000364"},{"type":"message","user":"U0XV1HDL3","text":"so if you can support it without much cost, then it makes a lot of sense","ts":"1465325658.000365"},{"type":"message","user":"U0XR6J961","text":"hi cca","ts":"1465325671.000366"},{"type":"message","user":"U0XPR4NP4","text":"I think even if we were to not use the psuedorandom channel writer stuff, FIFO would still be difficult to promise, as requests can come in concurrently","ts":"1465325891.000367"},{"type":"message","user":"U0XR6J961","text":"cca: i think these guys didn't read the nakamoto paper?","ts":"1465325984.000368"},{"type":"message","user":"U0XR6J961","text":"just because a block has been mined doesn't mean that the data should be considered \"committed\"","ts":"1465326030.000369"},{"type":"message","user":"U0XV1HDL3","text":"FIFO is defined as per-sender order","ts":"1465326364.000370"},{"type":"message","user":"U0XV1HDL3","text":"can be implemented in the obvious way, with a sequence number stored at the sender (without a concept of a sender, it isn't defined)","ts":"1465326391.000371"},{"type":"message","user":"U0XV1HDL3","text":"simon: they go into the depth of the chain, and parameterize what is decided by the depth. you have to make some choice like this, in nakamoto consensus -- otherwise, if i buy my house using bitcoin, then the chain reverts and forks to something else, do i have to move out?","ts":"1465326528.000372"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: Are you seeing how the primary could be submitting stale requests to itself?","ts":"1465327039.000373"},{"type":"message","user":"U0XPR4NP4","text":"Aha! Found it","ts":"1465328039.000374"},{"type":"message","user":"U0Y14MWA2","text":"re commit on checkpoints as 1545 turns out non-deterministic and 1701 bogus use of noops - I am more convinced that we should not do it","ts":"1465329685.000375"},{"type":"message","user":"U0Y14MWA2","text":"there is no use in masking non-determinism (sometimes)","ts":"1465329694.000376"},{"type":"message","user":"U0Y14MWA2","text":"that said - we desperately need to help chaincode developers not write non-deterministic chaincode - and I am not aware that anybody is looking into how to do this","ts":"1465329853.000377"},{"type":"message","user":"U0XPR4NP4","text":"<@U0Y14MWA2>: I think the converse argument would be that committing on checkpoint would generally reveal nondeterminism more immediately, the blockchain should halt in a consistent state, and the set of trans which caused the non-determinism would be obvious","ts":"1465330239.000378"},{"type":"message","user":"U0Y14MWA2","text":"actually it wouldn't","ts":"1465333326.000379"},{"type":"message","user":"U0Y14MWA2","text":"if non determinism appears in one peer then it could be masked","ts":"1465333346.000380"},{"type":"message","user":"U0Y14MWA2","text":"anyway - for the record - I am not in support of that","ts":"1465333365.000381"},{"type":"message","user":"U0Y14MWA2","text":"one can have at a checkpoint detection that we diverged from others","ts":"1465333442.000382"},{"type":"message","user":"U0Y14MWA2","text":"and shut down the machine - that would be ok","ts":"1465333449.000383"},{"type":"message","user":"U0Y14MWA2","text":"I am more in favor of debugging Sieve and\/or moving to Cons v2 to address non-determinism","ts":"1465333536.000384"},{"type":"message","user":"U0Y14MWA2","text":"addressing it incompletely is not satisfactory IMO","ts":"1465333553.000385"},{"type":"message","user":"U0XPR4NP4","text":"Yes, for non-determinism which is exhibited in less than f peers, it would not be detected, but under  byzantine conditions, I believe it is provably not solvable (including under Sieve).","ts":"1465356042.000386"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> <@U0UGH3X7X> <@U0XQ35CDD> <https:\/\/github.com\/hyperledger\/fabric\/pull\/1749>\n\nThis should fix the empty blocks that <@U0N1D1UAE> has been observing under batch.  Essentially, when `pbft-core.go` runs out of sequence numbers, it begins buffering requests in a map, and when the watermarks move, it resubmits the requests in map iterator order (which is effectively random).  Because the deduplicator filters out 'old' requests, we end up with blocks which contain no transactions (and end up abandoning requests which we should not).","attachments":[{"service_name":"GitHub","title":"Correctly order PBFT requests on resubmission by jyellick \u00b7 Pull Request #1749 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1749","text":"Description This changeset causes the resubmission of requests to occur in order by timestamp, rather than randomly in map order. This changeset also includes a couple minor lint fixes and some e...","fallback":"GitHub: Correctly order PBFT requests on resubmission by jyellick \u00b7 Pull Request #1749 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1749","thumb_width":420,"thumb_height":420,"service_icon":"https:\/\/h2.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1465356226.000387"},{"type":"message","user":"U142E5N0P","text":"<@U0KPFAZNF>:  I've applied the patch of PR 1708, and now, on each machine, here are the results of `docker images`:\n```\nREPOSITORY                     TAG                 IMAGE ID            CREATED             SIZE\nhyperledger\/fabric-peer        latest              820b0b3235d8        21 minutes ago      1.443 GB\nhyperledger\/fabric-ccenv       latest              87324f87a686        21 minutes ago      1.433 GB\nhyperledger\/fabric-src         latest              f68c00309ee5        21 minutes ago      1.416 GB\nhyperledger\/fabric-baseimage   latest              43574ff03f31        43 minutes ago      1.384 GB\n```\n\nNow I start 4 peer nodes on 4 different machines, with the consensus configuration of pbft:\n`plugin:pbft` in `peer\/core.yaml` and `mode batch` in `consensus\/obcpbft\/config.yaml`\n\nThe deployment behavior is different from before---it returns immediately, I still use the chaincode example2 as the chaincode deployment test.\n\nHowever, after deployment, I could not get successful query:\n```\ncurl -H \"Content-Type: application\/json\" -X POST --data \"@query.json\"  -k <http:\/\/192.168.0.147:5000\/chaincode>\n{\"jsonrpc\":\"2.0\",\"error\":{\"code\":-32003,\"message\":\"Query failure\",\"data\":\"Error when querying chaincode: Error:Failed to launch chaincode spec(Could not get deployment transaction for 7b07c59e9b9405c1aef33493b63b9a766d9bb836989ded1730052de650aa8ce5654274d148ceff96a4e5bd43bca26aba099f55c400e4befdc8b2ee4c0a94e30b - LedgerError - ResourceNotFound: ledger: resource not found)\"},\"id\":5}\n```\n\nThe logs of 4 machines are uploaded here: <https:\/\/transfer.sh\/15kVnV\/logs.tar.gz>","ts":"1465361214.000389"},{"type":"message","user":"U0XR6J961","text":"yingfeng: they create containers","ts":"1465385382.000390"},{"type":"message","user":"U0XR6J961","text":"certainly not a consensus issue","ts":"1465385388.000391"},{"type":"message","user":"U142E5N0P","text":"<@U0XR6J961>: then what does it mean?  is it an extra bug?","ts":"1465386387.000392"},{"type":"message","user":"U0XR6J961","text":"i have no idea, i can't see the problem in the log","ts":"1465386419.000393"},{"type":"message","user":"U0XR6J961","text":"wait","ts":"1465386429.000394"},{"type":"message","user":"U0XR6J961","text":"are you using the wrong chaincode id?","ts":"1465386439.000395"},{"type":"message","user":"U142E5N0P","text":"ah you r right..   it seems different chaincode id will be returned when applying PR 1708?","ts":"1465386504.000396"},{"type":"message","user":"U0XR6J961","text":"no idea","ts":"1465386626.000397"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: What is the correct custodial reaction to state transfer?","ts":"1465400286.000398"},{"type":"message","user":"U0XR6J961","text":"throw away everything, i think","ts":"1465400832.000399"},{"type":"message","user":"U0XR6J961","text":"or re-introduce them and rely on some other subsystem to filter replays","ts":"1465400861.000400"},{"type":"message","user":"U0XR6J961","text":"but that subsystem doesn't exist","ts":"1465400874.000401"},{"type":"message","user":"U0XR6J961","text":"jyellick: how come 1741 is happening?","ts":"1465401274.000402"},{"type":"message","user":"U0XR6J961","text":"shouldn't we have observed this behavior previously?","ts":"1465401287.000403"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: I hadn't been following 1741 too closely, have been trying to figure out the other half of 1091","ts":"1465401365.000404"},{"type":"message","user":"U0XPR4NP4","text":"Looking at the sequence numbers, it's very suspicious that the network stalls at seqNo=20","ts":"1465401531.000405"},{"type":"message","user":"U0XR6J961","text":"well yes","ts":"1465401538.000406"},{"type":"message","user":"U0XR6J961","text":"it should get a checkpoint","ts":"1465401543.000407"},{"type":"message","user":"U0XR6J961","text":"but without debug info, i can't tell whether nodes are trying to send checkpoints, etc.","ts":"1465401555.000408"},{"type":"message","user":"U0XPR4NP4","text":"But yes, I've successfully run tens of thousands of transactions through on the defaults","ts":"1465401566.000409"},{"type":"message","user":"U0XPR4NP4","text":"I don't see why we would suddenly have no checkpoints","ts":"1465401575.000410"},{"type":"message","user":"U0XR6J961","text":"default is K=40, L=10?","ts":"1465401656.000411"},{"type":"message","user":"U0XR6J961","text":"vp3 is not working properly, but that should be fine","ts":"1465401674.000412"},{"type":"message","user":"U0XPR4NP4","text":"K=10, L=40, but primary will not order requests beyond L\/2 to prevent thrashing","ts":"1465401956.000413"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1465402289.000414"},{"type":"message","user":"U0XR6J961","text":"i don't understand why the primary doesn't seem to get checkpoints and then continue","ts":"1465402332.000415"},{"type":"message","user":"U0XR6J961","text":"so i have a first code for the broadcaster, but it is so ugly","ts":"1465402484.000416"},{"type":"message","user":"U0XR6J961","text":"<https:\/\/gist.github.com\/0e795f9310891dd3c68191528fa7329c>","ts":"1465402491.000417"},{"user":"U16NDNH08","type":"message","subtype":"channel_join","text":"<@U16NDNH08|crow15> has joined the channel","ts":"1465402824.000418"},{"type":"message","user":"U17CZFXGU","text":"Hi there. Is there any plan to support any proof of stake algorithm on Hyperledger?","ts":"1465407375.000419"},{"type":"message","user":"U0UGH3X7X","text":"<@U17CZFXGU>, take a look at <https:\/\/github.com\/hyperledger\/fabric\/wiki\/Next-Consensus-Architecture-Proposal>","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/wiki\/Next-Consensus-Architecture-Proposal","text":"fabric - Fabric is a blockchain project in Incubation proposed to the community and documented at <https:\/\/goo.gl\/RYQZ5N>. Information on what Incubation entails can be found in the Hyperledger Proj...","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/wiki\/Next-Consensus-Architecture-Proposal","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1465407474.000420"},{"type":"message","user":"U17CZFXGU","text":"Thanks a  lot  <@U0UGH3X7X>","ts":"1465409899.000422"},{"type":"message","user":"U0XR6J961","text":"jyellick: i've been thinking about the age filtering","ts":"1465478917.000423"},{"type":"message","user":"U0XR6J961","text":"jyellick: i think we shouldn't filter on execute","ts":"1465478930.000424"},{"type":"message","user":"U0XR6J961","text":"there is a chance that we are not synced (because we did state transfer), and will not reject a transaction that others will reject","ts":"1465478957.000425"},{"type":"message","user":"U0XR6J961","text":"jyellick: probably we need to reject the block on prepare","ts":"1465478972.000426"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I was just about to suggest that","ts":"1465478981.000427"},{"type":"message","user":"U0XPR4NP4","text":"It should be easy enough to do too in the context of the new events stuff, simply have batch catch the PrePrepare and filter it out if it is about a stale request","ts":"1465479024.000428"},{"type":"message","user":"U0XR6J961","text":"and trigger view change","ts":"1465479099.000429"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1465479109.000430"},{"type":"message","user":"U0XR6J961","text":"i'm still on 1741 - something is making the system non-deterministic, and i don't know what","ts":"1465479132.000431"},{"type":"message","user":"U0XR6J961","text":"what could it be?","ts":"1465479142.000432"},{"type":"message","user":"U0XPR4NP4","text":"Let me grab the logs and take a look","ts":"1465479204.000433"},{"type":"message","user":"U0XR6J961","text":"well, there are no buckettree\/ledger infos","ts":"1465479224.000434"},{"type":"message","user":"U0XPR4NP4","text":"My best guess is, since this is a system no-op chaincode, that it has something to do with the exec go routine returning faster than usual","ts":"1465479228.000435"},{"type":"message","user":"U0XPR4NP4","text":"(Looking at the logs now)","ts":"1465479273.000436"},{"type":"message","user":"U0XR6J961","text":"unfortunately you can only see the divergence at the checkpoint","ts":"1465479288.000437"},{"type":"message","user":"U0XPR4NP4","text":"All of the sequence number and execute digests match","ts":"1465479535.000438"},{"type":"message","user":"U0XR6J961","text":"yep","ts":"1465479547.000439"},{"type":"message","user":"U0XR6J961","text":"super weird","ts":"1465479552.000440"},{"type":"message","user":"U0XPR4NP4","text":"I'd say 'non-deterministic chaincode'","ts":"1465479560.000441"},{"type":"message","user":"U0XPR4NP4","text":"But could also be some sort of ledger bug, not sure why there are no logs for it","ts":"1465479575.000442"},{"type":"message","user":"U0XPR4NP4","text":"But I'd agree, there's nothing that looks like it's going 'wrong' in PBFT","ts":"1465479609.000443"},{"type":"message","user":"U0XR6J961","text":"the chaincode doesn't do anything","ts":"1465479713.000444"},{"type":"message","user":"U0XR6J961","text":"so that can't be it either","ts":"1465479719.000445"},{"type":"message","user":"U0XPR4NP4","text":"Just commented on that issue in support","ts":"1465479844.000446"},{"type":"message","user":"U0XR6J961","text":"yeah figured out 1741 - not our fault","ts":"1465494823.000447"},{"type":"message","user":"U0UGH3X7X","text":"just saw your #1741 comment  :+1:","ts":"1465495070.000448"},{"type":"message","user":"U0ULK2JPP","text":"I had <@U0Z541B3P> question too","ts":"1465495329.000449"},{"type":"message","user":"U0Y14MWA2","text":"so #1741 = non-det genesis blocks?","ts":"1465552297.000450"},{"type":"message","user":"U0Y14MWA2","text":"bcs timestamps?","ts":"1465552309.000451"},{"type":"message","user":"U0XR6J961","text":"yep","ts":"1465552560.000452"},{"type":"message","user":"U0KPFAZNF","text":"is the thought that each node will generate its own genesis block?","ts":"1465556610.000453"},{"type":"message","user":"U0XR6J961","text":"that or for provisioning, the genesis block is created in one place and imported on all nodes, i'd say","ts":"1465557305.000454"},{"type":"message","user":"U0XR6J961","text":"but i don't think there is any plan for that","ts":"1465557313.000455"},{"type":"message","user":"U0XR6J961","text":"i don't think anybody even thought about this","ts":"1465557323.000456"},{"type":"message","user":"U0KPFAZNF","text":"thats hows its done for most blockchains and I assumed would be the case here too","ts":"1465557333.000457"},{"type":"message","user":"U0KPFAZNF","text":"personally, i think its fine to assume that\u2026so if that simplifies anything w.r.t. 1741...","ts":"1465557385.000458"},{"type":"message","user":"U0XR6J961","text":"i'd say it is a requirement","ts":"1465557418.000459"},{"type":"message","user":"U0XR6J961","text":"and all settings need to be driven from that genesis block","ts":"1465557435.000460","reactions":[{"name":"+1","users":["U0KPFAZNF"],"count":1}]},{"type":"message","user":"U0XR6J961","text":"all settings that influence chain creation","ts":"1465557444.000461"},{"type":"message","user":"U0KPFAZNF","text":"totally agree","ts":"1465557450.000462"},{"type":"message","user":"U0KPFAZNF","text":"though it might be nice to properly delineate settings that influence genesis block creation and settings that are used dynamically over the lifetime of the system","ts":"1465557518.000463"},{"type":"message","user":"U0KPFAZNF","text":"(if there are any)","ts":"1465557525.000464"},{"type":"message","user":"U0KPFAZNF","text":"im thinking something like the seed\/root nodes needs to be dynamic minimally","ts":"1465557545.000465"},{"type":"message","user":"U0XR6J961","text":"i'd say the genesis block shouldn't be created implicitly","ts":"1465557546.000466"},{"type":"message","user":"U0XR6J961","text":"but explicitly, and imported explicitly","ts":"1465557559.000467"},{"type":"message","user":"U0KPFAZNF","text":"agreed, it should be an explicit operation","ts":"1465557560.000468"},{"type":"message","user":"U0KPFAZNF","text":"yep","ts":"1465557564.000469"},{"type":"message","user":"U0KPFAZNF","text":"i havent looked, but i am assuming that there isnt currently an external representation of a block?","ts":"1465557704.000470"},{"type":"message","user":"U0KPFAZNF","text":"(i.e. the system detects that the db is empty is emits a genesis block straight to the ledger)","ts":"1465557734.000471"},{"type":"message","user":"U0XR6J961","text":"<https:\/\/github.com\/hyperledger\/fabric\/issues\/1784>","attachments":[{"service_name":"GitHub","title":"genesis block should be created explicitly and (separately) imported explicitly \u00b7 Issue #1784 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/issues\/1784","text":"Description At the moment the genesis block is created implicitly when a peer starts the first time with an empty blockchain. This can lead to surprising problems: #1741. All peers in the netw...","fallback":"GitHub: genesis block should be created explicitly and (separately) imported explicitly \u00b7 Issue #1784 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/issues\/1784","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1465557887.000472","reactions":[{"name":"+1","users":["U0KPFAZNF"],"count":1}]},{"type":"message","user":"U0ULK2JPP","text":"<@U0XR6J961> <@U0KPFAZNF> with the Lifecycle work  we were considering not having system cc depoy transaction on the ledger at all.  (especially  for \u201cupgrade\u201d issues)","ts":"1465561342.000474"},{"type":"message","user":"U0ULK2JPP","text":"do you think - at least for now - we should go ahead with that plan ? Basically treat system chaincode the same way we would treat the fabric itself","ts":"1465561433.000475"},{"type":"message","user":"U0XR6J961","text":"i don't know what you mean","ts":"1465561445.000476"},{"type":"message","user":"U0XR6J961","text":"what is the terminology?","ts":"1465561460.000477"},{"type":"message","user":"U0XR6J961","text":"ledger is blockchain?","ts":"1465561464.000478"},{"type":"message","user":"U0XR6J961","text":"or ledger is blocks?","ts":"1465561476.000479"},{"type":"message","user":"U0XR6J961","text":"or state?","ts":"1465561485.000480"},{"type":"message","user":"U0ULK2JPP","text":"system chaincode deploy transaction does not go through consensus. Each peer brings it up outside of consensus. So we can take the next step and not write the deploy transaction on the genesis block","ts":"1465561619.000481"},{"type":"message","user":"U0ULK2JPP","text":"by doing that we are treating the system chaincode as part of the fabric in some sense. So \u201cupgrade\u201d of sys cc would have the same considerations as upgrade of the fabric itself","ts":"1465561693.000482"},{"type":"message","user":"U0XR6J961","text":"but how do you invoke system chaincode then?","ts":"1465561753.000483"},{"type":"message","user":"U0XR6J961","text":"how do you know it is enabled?","ts":"1465561762.000484"},{"type":"message","user":"U0ULK2JPP","text":"invoke will work or fail depending on the sys cc is installed or not, no ?","ts":"1465561818.000485"},{"type":"message","user":"U0ULK2JPP","text":"I have a branch where I was playing with the sys cc not being on the block","ts":"1465561879.000486"},{"type":"message","user":"U0XR6J961","text":"what determines whether it is registered or not?","ts":"1465562020.000487"},{"type":"message","user":"U0ULK2JPP","text":"it is registered if its in the core.yaml and hooked up via code","ts":"1465562365.000488"},{"type":"message","user":"U0ULK2JPP","text":"and if it is not, invokes and queries will fail","ts":"1465562380.000489"},{"type":"message","user":"U0XR6J961","text":"yea no","ts":"1465562686.000490"},{"type":"message","user":"U0XR6J961","text":"we need to make sure that all replicas are the same","ts":"1465562695.000491"},{"type":"message","user":"U0XR6J961","text":"it's fine as a prototype to have it in core.yaml","ts":"1465562721.000492"},{"type":"message","user":"U0XR6J961","text":"but for production, this needs to come from the ledger itself","ts":"1465562733.000493"},{"type":"message","user":"U0XR6J961","text":"which chaincode is enabled","ts":"1465562738.000494"},{"type":"message","user":"U0XR6J961","text":"otherwise different peers might run different chaincode","ts":"1465562753.000495"},{"type":"message","user":"U0ULK2JPP","text":"yea, I can see how that might be a good separation.","ts":"1465562887.000496"},{"type":"message","user":"U0ULK2JPP","text":"that\u2019s a different problem from having the dep. transaction on the block","ts":"1465562950.000497"},{"type":"message","user":"U0XR6J961","text":"so maybe we don't need a deploy transaction","ts":"1465562955.000498"},{"type":"message","user":"U0ULK2JPP","text":"yeah","ts":"1465562960.000499"},{"type":"message","user":"U0XR6J961","text":"but we need some form of registration","ts":"1465562961.000500"},{"type":"message","user":"U0ULK2JPP","text":"yea","ts":"1465562965.000501"},{"type":"message","user":"U0XR6J961","text":"didn't we want to move chaincode into the state?","ts":"1465562973.000502"},{"type":"message","user":"U0ULK2JPP","text":"yes","ts":"1465563010.000503"},{"type":"message","user":"U0ULK2JPP","text":"the dep transaction","ts":"1465563019.000504"},{"type":"message","user":"U0ULK2JPP","text":"<@U0Z541B3P> already did that work when we played with the things needed for \u201clife cycle\"","ts":"1465563067.000505"},{"type":"message","user":"U0ULK2JPP","text":"(of course not in the main branch)","ts":"1465563078.000506"},{"type":"message","user":"U0XR6J961","text":"i don't quite understand how we can remove the data from the deploy transaction","ts":"1465563174.000507"},{"type":"message","user":"U0XR6J961","text":"i guess it would be both in the transaction, and in the state","ts":"1465563186.000508"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: <@U0UGH3X7X> <@U0XQ35CDD> <https:\/\/github.com\/hyperledger\/fabric\/pull\/1785>","attachments":[{"service_name":"GitHub","title":"Add executor service by jyellick \u00b7 Pull Request #1785 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1785","text":"Description This changeset introduces the new executor service advertised in PR #1758. It adds an API for asynchronously invoking executions, commits, and state transfer. This changeset tries to...","fallback":"GitHub: Add executor service by jyellick \u00b7 Pull Request #1785 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1785","thumb_width":420,"thumb_height":420,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1465565357.000509"},{"user":"U1AU8DRQR","type":"message","subtype":"channel_join","text":"<@U1AU8DRQR|hgabor> has joined the channel","ts":"1465571455.000511"},{"type":"message","user":"U0XR6J961","text":"jyellick: you around?","ts":"1465578717.000512"},{"type":"message","user":"U0XPR4NP4","text":"I am","ts":"1465578733.000513"},{"type":"message","user":"U0XPR4NP4","text":"(<@U0XR6J961>)","ts":"1465578745.000514"},{"type":"message","user":"U0XR6J961","text":"hi","ts":"1465578747.000515"},{"type":"message","user":"U0XR6J961","text":"so i'm trying to test the broadcaster stuff","ts":"1465578759.000516"},{"type":"message","user":"U0XR6J961","text":"and something is odd with state transfer","ts":"1465578765.000517"},{"type":"message","user":"U0XR6J961","text":"it transfers to a point, and it has entries for the rest in its certstore, but i think it is missing a commit cert","ts":"1465578802.000518"},{"type":"message","user":"U0XR6J961","text":"and then it just sits there","ts":"1465578809.000519"},{"type":"message","user":"U0XR6J961","text":"sending prepares and commits","ts":"1465578821.000520"},{"type":"message","user":"U0XR6J961","text":"but unable to execute","ts":"1465578826.000521"},{"type":"message","user":"U0XR6J961","text":"not sure whether this is expected or not","ts":"1465578851.000522"},{"type":"message","user":"U0XPR4NP4","text":"Hmm, so, I suppose it is possible that we request transfer to a point, but we've already missed some messages and will basically need to wait for state transfer to trigger again","ts":"1465578901.000523"},{"type":"message","user":"U0XR6J961","text":"yea i guess that would be it","ts":"1465578913.000524"},{"type":"message","user":"U0XPR4NP4","text":"I'm not really sure how to avoid that.  We pre-emptively move our watermarks before picking a point to state transfer to, in the hope of capturing all needed messages","ts":"1465578959.000525"},{"type":"message","user":"U0XPR4NP4","text":"But that's really just best effort, I don't think there's any way to guarantee that we've not missed any messages, in practice, I've never seen it fail, where are you seeing this?","ts":"1465579049.000526"},{"type":"message","user":"U0XR6J961","text":"pausing a peer","ts":"1465579085.000527"},{"type":"message","user":"U0XR6J961","text":"and then unpausing","ts":"1465579088.000528"},{"type":"message","user":"U0XR6J961","text":"a subset of messages replays from tcp buffers","ts":"1465579098.000529"},{"type":"message","user":"U0XR6J961","text":"and other buffers","ts":"1465579103.000530"},{"type":"message","user":"U0XPR4NP4","text":"I think this is expected then","ts":"1465579280.000531"},{"type":"message","user":"U0XPR4NP4","text":"I am trying to fix up complaints, because perceived stale requests end up getting dropped, and it is causing problems for us.  I am trying to move the deduplicator `Execute` check to filter out pre-prepares with stale requests, but I'm not sure how to reset the de-duplicator on view change, as it's valid to pre-prepare the same request multiple times in multiple views.","ts":"1465579516.000532"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1465579623.000533"},{"type":"message","user":"U0XR6J961","text":"well","ts":"1465579642.000534"},{"type":"message","user":"U0XR6J961","text":"i've been there several times, it is difficult","ts":"1465579669.000535"},{"type":"message","user":"U0XR6J961","text":"oh it seems that the primary isn't complaining to itself, so it will never send a complaint view change","ts":"1465579911.000536"},{"type":"message","user":"U0XR6J961","text":"`[31m17:19:56.433 [consensus\/obcpbft] processMessage -&gt; ERRO 2456ESC[0m Unknown request: request:&lt;timestamp:&lt;seconds:1465579186 nanos:339740631 &gt; payload:...`","ts":"1465579968.000537"},{"type":"message","user":"U0XR6J961","text":"wut","ts":"1465579972.000538"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I've seen this....","ts":"1465580107.000539"},{"type":"message","user":"U0XR6J961","text":"`[33m17:20:12.097 [consensus\/handler] SkipTo -&gt; WARN 1104ESC[0m State transfer is being called for, but the state has not been invalidated`","ts":"1465580242.000540"},{"type":"message","user":"U0XPR4NP4","text":"Is this in view change?","ts":"1465580304.000541"},{"type":"message","user":"U0XPR4NP4","text":"Yes, it looks like the view change state transfer code was not updated to mark the state as invalid, should be an easy one line fix","ts":"1465580413.000542"},{"type":"message","user":"U0XPR4NP4","text":"All this code needs a serious overhaul, trying to minimize diffs by leaving in old interfaces is causing lots of cruft to build up","ts":"1465580461.000543"},{"type":"message","user":"U0XPR4NP4","text":"Oh, got it","ts":"1465580994.000544"},{"type":"message","user":"U0XPR4NP4","text":"Those `Unknown request` messages are benign","ts":"1465581004.000545"},{"type":"message","user":"U0XPR4NP4","text":"If we're not the leader, we ignore the `Request` message, and fall through to the end","ts":"1465581025.000546"},{"type":"message","user":"U0XPR4NP4","text":"I'll fix","ts":"1465581042.000547"},{"type":"message","user":"U0XPR4NP4","text":"(basically when one replica is in the wrong view, and thinks a backup is the primary, the backup will spew those messages)","ts":"1465581508.000548"},{"type":"message","user":"U0XR6J961","text":"aha","ts":"1465582120.000549"},{"type":"message","user":"U0XR6J961","text":"oh now i'm running into stale requests -_-","ts":"1465586506.000550"},{"type":"message","user":"U0XPR4NP4","text":"Yeah... am trying to clean that up","ts":"1465587949.000551"},{"type":"message","user":"U0XPR4NP4","text":"Wonder if we shouldn't just broadcast new requests into the network (not just to the primary), and count on the fact that since we have a periodic view change, they will all eventually be executed","ts":"1465588003.000552"},{"type":"message","user":"U0XPR4NP4","text":"This deduplication complaining stuff is complicated","ts":"1465588019.000553"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1465588367.000554"},{"type":"message","user":"U0XR6J961","text":"fine with me","ts":"1465588381.000555"},{"type":"message","user":"U0XR6J961","text":"<https:\/\/github.com\/hyperledger\/fabric\/pull\/1793>","attachments":[{"service_name":"GitHub","title":"consensus: non-blocking broadcast by corecode \u00b7 Pull Request #1793 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1793","text":"Description Introduces a broadcaster service, which will block only for N-f replicas, so that a byzantine replica cannot halt the network. Motivation and Context Fixes #1056 How Has This...","fallback":"GitHub: consensus: non-blocking broadcast by corecode \u00b7 Pull Request #1793 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1793","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1465588885.000556"},{"user":"U0PV6MUD6","type":"message","subtype":"channel_join","text":"<@U0PV6MUD6|sbrakev> has joined the channel","ts":"1465592684.000558"},{"type":"message","user":"U0XPR4NP4","text":"Tagged you in it, but here is a PR without complaints in batch, <https:\/\/github.com\/hyperledger\/fabric\/pull\/1798>","attachments":[{"service_name":"GitHub","title":"No complaints preview PR by jyellick \u00b7 Pull Request #1798 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1798","text":"This pull request is intended as a preview for stability, especially for @bcbrock in regards to issue #1091. There were several outstanding bugs in the logic of the complaints code, so this change...","fallback":"GitHub: No complaints preview PR by jyellick \u00b7 Pull Request #1798 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1798","thumb_width":420,"thumb_height":420,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1465600088.000559"},{"type":"message","user":"U142E5N0P","text":"I am using the code after PR 1774 has been merged for stress testing, and I've setup a 4 nodes' environment, with a configuration of `plugin:pbft` and `mode:classic`\nThe jmeter clients show a relative high TPS:\n```\nWaiting for possible shutdown message on port 4445\nsummary +  25811 in     9s = 2876.5\/s Avg:   488 Min:     3 Max:   738 Err:     0 (0.00%) Active: 2000 Started: 2000 Finished: 0\n```\n\nHowever, after I stopped jmeter, the system still run for a long time(I've let jmeter run only a few seconds, but the system will last around 5 minutes to stop), it seems the requests have been buffered a lot, and then send to consensus, as a result, the practical upper bound of TPS is far low than the number shown as above.   Actually, if I changed the config from `mode:classic` to `mode:batch`, the TPS results shown from jmeter is even higher, say 7000 TPS, but I need to wait much more time for the system to stop after I stopped jmeter program. \n\nSo, what's the practical TPS for fabric to achieve?  It's actually a kind of asynchronous processing, so fabric will not tell clients whether it has been out of processing limit, in this case, the client will never know whether his request will be success in practical(even if the requests are discarded due to the full of buffer internal, the client will never know)","ts":"1465695658.000002"},{"type":"message","user":"U142E5N0P","text":"Another issue of the above stress test is, after I setup 4 peer nodes and use jmeter to send requests to a peer,  there are two nodes whose logs would increase continuously without stopping, even if the stress test only last for a few seconds: peer0,peer1,peer2,peer3,   the logs of peer0 and peer2 keep increasing for hours, and have reaches to tens of gigabytes.  Peer2 is the node accepting jmeter requests.   \n\n\nHere are some log snippets of peer0 and peer2:\n\n```\n07:41:42.648 [peer] beforeSyncBlocks -&gt; WARN 1d53762 Ignoring SyncBlocks message with correlationId = 4982701, blocks 4184 to 4184, as current correlationId = 4982702\n07:41:42.648 [peer] beforeSyncBlocks -&gt; WARN 1d53763 Ignoring SyncBlocks message with correlationId = 4982701, blocks 4183 to 4183, as current correlationId = 4982702\n07:41:42.648 [peer] beforeSyncBlocks -&gt; WARN 1d53764 Ignoring SyncBlocks message with correlationId = 4982701, blocks 4182 to 4182, as current correlationId = 4982702\n07:41:42.648 [peer] beforeSyncBlocks -&gt; WARN 1d53765 Ignoring SyncBlocks message with correlationId = 4982701, blocks 4181 to 4181, as current correlationId = 4982702\n07:41:42.648 [peer] beforeSyncBlocks -&gt; WARN 1d53766 Ignoring SyncBlocks message with correlationId = 4982701, blocks 4180 to 4180, as current correlationId = 4982702\n07:41:42.648 [peer] beforeSyncBlocks -&gt; WARN 1d53767 Ignoring SyncBlocks message with correlationId = 4982701, blocks 4179 to 4179, as current correlationId = 4982702\n07:41:42.648 [peer] beforeSyncBlocks -&gt; WARN 1d53768 Ignoring SyncBlocks message with correlationId = 4982701, blocks 4178 to 4178, as current correlationId = 4982702\n07:41:42.649 [consensus\/statetransfer] tryOverPeers -&gt; WARN 1d53769 name:\"vp1\"  in tryOverPeers loop trying name:\"vp0\"  : name:\"vp1\"  got block 4188 from name:\"vp0\"  with hash 1458528567ed10981616468b50bc1754416e4388a871a848431b5e4bcf7e0470a5aaee4c978fc57d59db3c3e5adf8a407444f3210f0f304740ea2984ebcdf3f9, was expecting hash ffc3496f8d3cec47fa664a848dff85a4b05f0de8d2dd76594d920680a831faa45af0d955ca2892462623d78883fcbfca05346add57a7cff84f7492238f5d705d\n07:41:42.650 [consensus\/statetransfer] tryOverPeers -&gt; WARN 1d5376a name:\"vp1\"  in tryOverPeers loop trying name:\"vp2\"  : name:\"vp1\"  got block 4188 from name:\"vp2\"  with hash 1458528567ed10981616468b50bc1754416e4388a871a848431b5e4bcf7e0470a5aaee4c978fc57d59db3c3e5adf8a407444f3210f0f304740ea2984ebcdf3f9, was expecting hash ffc3496f8d3cec47fa664a848dff85a4b05f0de8d2dd76594d920680a831faa45af0d955ca2892462623d78883fcbfca05346add57a7cff84f7492238f5d705d\n07:41:42.651 [consensus\/statetransfer] tryOverPeers -&gt; WARN 1d5376b name:\"vp1\"  in tryOverPeers loop trying name:\"vp3\"  : name:\"vp1\"  got block 4188 from name:\"vp3\"  with hash 1458528567ed10981616468b50bc1754416e4388a871a848431b5e4bcf7e0470a5aaee4c978fc57d59db3c3e5adf8a407444f3210f0f304740ea2984ebcdf3f9, was expecting hash ffc3496f8d3cec47fa664a848dff85a4b05f0de8d2dd76594d920680a831faa45af0d955ca2892462623d78883fcbfca05346add57a7cff84f7492238f5d705d\n```","ts":"1465717525.000003"},{"type":"message","user":"U0XPR4NP4","text":"<@U142E5N0P> Is this pbft batch? What these messages indicate, is that vps0,2,3 all agree on the hash `1458528567ed10981616468b50bc1754416e4388a871a848431b5e4bcf7e0470a5aaee4c978fc57d59db3c3e5adf8a407444f3210f0f304740ea2984ebcdf3f9` for block 4188, but for some reason, vp1 believes the hash to be `ffc3496f8d3cec47fa664a848dff85a4b05f0de8d2dd76594d920680a831faa45af0d955ca2892462623d78883fcbfca05346add57a7cff84f7492238f5d705d`, this is causing the peer to try and retry and retry and so forth to retrieve that block, and constantly fail, which is causing the error flood you see in the logs\n\nIn order to figure out why vp1 believe in the wrong hash, I would need to see logs from earlier on","ts":"1465751659.000004"},{"type":"message","user":"U0XPR4NP4","text":"Also, for stress testing of pbft batch, I highly suggest you include PR 1798, as this fixes some known bugs which are related to stress.","ts":"1465751766.000005"},{"type":"message","user":"U142E5N0P","text":"<@U0XPR4NP4>:  it's pbft classic","ts":"1465778539.000006"},{"type":"message","user":"U0UGH3X7X","text":"<@U142E5N0P>: could you give us debug logs ? Or show us how we can set up a client to reproduce the test you ran? And can you create an issue for this?","ts":"1465780053.000007"},{"type":"message","user":"U142E5N0P","text":"<@U0UGH3X7X>: the logs are discarded since the disk was full..   I will create an issue and attach the jmeter file","ts":"1465780218.000008"},{"type":"message","user":"U0XPR4NP4","text":"<@U142E5N0P>: pbft classic is pending deprecation, please use batch with a batch size of 1 to emulate classic","edited":{"user":"U0XPR4NP4","ts":"1465781134.000000"},"ts":"1465781118.000009"},{"type":"message","user":"U142E5N0P","text":"<@U0XPR4NP4>:  got it, thanks~","ts":"1465781153.000011"},{"type":"message","user":"U142E5N0P","text":"<@U0XPR4NP4>: I applied PR 1798, and set config to `pbft batch` with batch size of `2`, and reproceed the stress testing,  the above issue does not appear any more. \n\nI just use jmeter to send around 290K invoke requests to chaincode through REST api in around 30 seconds, here's the output of jmeter:\n\n```\nroot@75df16cca62c:\/# jmeter -n -t fabric.jmx\nCreating summariser &lt;summary&gt;\nCreated the tree successfully using fabric.jmx\nStarting the test @ Mon Jun 13 03:49:54 UTC 2016 (1465789794744)\nWaiting for possible shutdown message on port 4445\nsummary +  37166 in     5s = 7869.2\/s Avg:   107 Min:     0 Max:   320 Err:     0 (0.00%) Active: 2000 Started: 2000 Finished: 0\nsummary + 260766 in  30.2s = 8633.8\/s Avg:   230 Min:   179 Max:   443 Err:     0 (0.00%) Active: 2000 Started: 2000 Finished: 0\nsummary = 297932 in    35s = 8580.2\/s Avg:   214 Min:     0 Max:   443 Err:     0 (0.00%)\n```\nAround 8000 TPS.  However, these requests had been accumulated for half an hour to be processed.  Peer0-3, Peer0 is the `CORE_PEER_DISCOVERY_ROOTNODE`, while Peer3 is the node accepting jmeter requests.   Logs from both these two nodes have reached up to 3GB and the log level is set to INFO, logs for the other two nodes are only around 40M","edited":{"user":"U142E5N0P","ts":"1465792411.000000"},"ts":"1465792010.000012"},{"type":"message","user":"U142E5N0P","text":"The average TPS is around 30 per node, because although 290K requests were sent to a single node, only 22K requests had been successfully processed, others are discarded due to buffer's full,  and it took 10min for those 22k requests to be processed.","ts":"1465793316.000015"},{"type":"message","user":"U142E5N0P","text":"When I adjust the batch size of pbft from 2 to 1000, the above performance metric does not change a lot.","ts":"1465794187.000016"},{"type":"message","user":"U0XR6J961","text":"no","ts":"1465814478.000017"},{"type":"message","user":"U0XPR4NP4","text":"<@U142E5N0P>: Remember that Invoke is an asynchronous call, submitting 8000 TPS for a half hour may queue all requests, but if the underlying chaincodes are only able to be executed at 30TPS, then no amount of batching etc. will help.  It sounds like you have hit a bottleneck which is not related to consensus, but rather chaincode execution.","ts":"1465822666.000018"},{"type":"message","user":"U0XR6J961","text":"we really need to make this closed loop","ts":"1465823098.000019"},{"type":"message","user":"U0XR6J961","text":"but i don't know how","ts":"1465823103.000020"},{"type":"message","user":"U0XPR4NP4","text":"I don't think you'll find support for that from the distributed guys","ts":"1465824652.000021"},{"type":"message","user":"U0XPR4NP4","text":"Really, the simpler solution to me would be to start rejecting requests once our queue is X full","ts":"1465824706.000022"},{"type":"message","user":"U0XR6J961","text":"but what queue","ts":"1465824724.000023"},{"type":"message","user":"U0XPR4NP4","text":"Well, we need a queue","ts":"1465824730.000024"},{"type":"message","user":"U0XR6J961","text":":slightly_smiling_face:","ts":"1465824733.000025"},{"type":"message","user":"U0XR6J961","text":"but we forward requests to the primary","ts":"1465824740.000026"},{"type":"message","user":"U0XPR4NP4","text":"We do, so hold them in the queue until they are executed?","ts":"1465824756.000027"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1465824765.000028"},{"type":"message","user":"U0XR6J961","text":"how large is the queue then?","ts":"1465824777.000029"},{"type":"message","user":"U0XPR4NP4","text":"I'd say configurable, but, a few thousand seems like a reasonable first guess","ts":"1465824795.000030"},{"type":"message","user":"U0XR6J961","text":":slightly_smiling_face:","ts":"1465824802.000031"},{"type":"message","user":"U0XR6J961","text":"hey slack, stop replacing my inverse smileys","ts":"1465824827.000032"},{"type":"message","user":"U0XR6J961","text":"jyellick: do you know why batch main loop keeps looping without printing anything else?","ts":"1465825372.000033"},{"type":"message","user":"U0XPR4NP4","text":"Nothing else at all? Is this a unit test or live?","ts":"1465825466.000034"},{"type":"message","user":"U0XR6J961","text":"test","ts":"1465825471.000035"},{"type":"message","user":"U0XR6J961","text":"TestNetworkBatch is racy","ts":"1465825508.000036"},{"type":"message","user":"U0XR6J961","text":"should i just add a timeout?","ts":"1465825518.000037"},{"type":"message","user":"U0XR6J961","text":"well, a sleep","ts":"1465825522.000038"},{"type":"message","user":"U0XPR4NP4","text":"Which piece of it is racy?","ts":"1465825700.000039"},{"type":"message","user":"U0XPR4NP4","text":"In unit tests, we send `nil` events to basically flush the event thread (make sure it has finished processing the last event we gave it)","ts":"1465825723.000040"},{"type":"message","user":"U0XR6J961","text":"so what happens is this:","ts":"1465825902.000041"},{"type":"message","user":"U0XR6J961","text":"```\n[36m13:28:09.132 [consensus\/obcpbft\/custodian] Register -&gt; DEBU 06b[0m Registering EPeABAdNkwfyAX8LB2i+fuLedvzVDNDhcYscmFYymcBuCc8i3ngXIqmnVVUOFv3Dr+pA1ZE5NPzGeUBjwkKtig== into custody with timeout 2016-06-13 13:28:11.132112257 +0200 CEST\n13:28:09.132 [consensus\/obcpbft] processMessage -&gt; INFO 06c[0m Batch replica 2 received new consensus request: EPeABAdNkwfyAX8LB2i+fuLedvzVDNDhcYscmFYymcBuCc8i3ngXIqmnVVUOFv3Dr+pA1ZE5NPzGeUBjwkKtig==\n--- FAIL: TestNetworkBatch (0.10s)\n\tobc-batch_test.go:65: 0 messages expected in primary's batchStore, found [timestamp:&lt;seconds:1465817289 nanos:31448813 &gt; payload:\"\\010\\001\\032\\00112\\002\\010\\001\" replica_id:1 ]\n```","edited":{"user":"U0XR6J961","ts":"1465825941.000000"},"ts":"1465825917.000042"},{"type":"message","user":"U0XR6J961","text":"that's this:","ts":"1465825959.000048"},{"type":"message","user":"U0XR6J961","text":"```\n\terr = net.endpoints[2].(*consumerEndpoint).consumer.RecvMsg(createOcMsgWithChainTx(2), broadcaster)\n\tnet.process()\n```","ts":"1465825969.000049"},{"type":"message","user":"U0XR6J961","text":"the process somehow doesn't last long enough for the message to be sent to the primary, which then would create a new batch block","ts":"1465826009.000050"},{"type":"message","user":"U0XPR4NP4","text":"Hmmm, that's a single threaded path I think? I don't see how it could process that nil event without having already queued a message","ts":"1465826111.000051"},{"type":"message","user":"U0XPR4NP4","text":"Is it possible that you hit the batch timeout on the first request?","ts":"1465826139.000052"},{"type":"message","user":"U0XPR4NP4","text":"(So that the second request didn't fill the batch size)","ts":"1465826151.000053"},{"type":"message","user":"U0XR6J961","text":"nope","ts":"1465826821.000054"},{"type":"message","user":"U0XR6J961","text":"ah no, interesting.  replacing the fatalf with errorf, it turns out that the batch replica never receives the message?","ts":"1465827049.000055"},{"type":"message","user":"U0XR6J961","text":"hm.","ts":"1465827050.000056"},{"type":"message","user":"U0XR6J961","text":"ah nm, i need to process more","ts":"1465827071.000057"},{"type":"message","user":"U0XR6J961","text":"jyellick: so if i call process() twice, it works :slightly_smiling_face:","ts":"1465828121.000058"},{"type":"message","user":"U0XR6J961","text":"haha","ts":"1465828213.000059"},{"type":"message","user":"U0XR6J961","text":"what a hack","ts":"1465828216.000060"},{"type":"message","user":"U0XPR4NP4","text":"Hmmm, it should be harmless to call it 'extra', but that's odd.  We still need to just fix the test framework to be entirely deterministic","ts":"1465828216.000061"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1465828221.000062"},{"type":"message","user":"U0XPR4NP4","text":"Obviously lower priority than fixing actual bugs in the real code, but hopefully we can find some time to do this after this June release","ts":"1465828271.000063"},{"type":"message","user":"U0XPR4NP4","text":"Or maybe during the period of code stabilization, merging new tests should be safe","ts":"1465828295.000064"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1465828378.000065"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: Are you around?","ts":"1465838274.000066"},{"type":"message","user":"U0XR6J961","text":"i am","ts":"1465839615.000067"},{"type":"message","user":"U0XR6J961","text":"seems that scheduling latency for me is in the order of 32us","ts":"1465844407.000068"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> What do you think should be the procedure when we get a view change, and have all the commit certs we need to reach a checkpoint, but do not have it yet?","ts":"1465844464.000069"},{"type":"message","user":"U0XPR4NP4","text":"(Whenever I try to turn on the periodic view change stuff, invariably, it triggers a ton of state transfer as one of the replicas is necessarily the slowest, and gets told to change views before it can reach a checkpoint)","ts":"1465844519.000070"},{"type":"message","user":"U0XR6J961","text":"we should execute instead of state transfer","ts":"1465845270.000071"},{"type":"message","user":"U0XPR4NP4","text":"My concern is that this is off paper, and we might not have enough room in our execution window say for everything in the Xset","ts":"1465845727.000072"},{"user":"U12452RAP","type":"message","subtype":"channel_join","text":"<@U12452RAP|grapebaba> has joined the channel","ts":"1465879514.000073"},{"user":"U1CK6522F","type":"message","subtype":"channel_join","text":"<@U1CK6522F|zuowang> has joined the channel","ts":"1465905084.000074"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: <@U0XQ35CDD> <@U0Y14MWA2> What do you think of the correctness of replying with a VIEW-CHANGE immediately if it is the primary of the view who sends it?","ts":"1465906300.000075"},{"type":"message","user":"U0XR6J961","text":"what does this address?","ts":"1465906333.000076"},{"type":"message","user":"U0XR6J961","text":"i guess that would be correct","ts":"1465906355.000077"},{"type":"message","user":"U0XQ35CDD","text":"I'm also wondering what this addresses","ts":"1465906491.000078"},{"type":"message","user":"U0XPR4NP4","text":"Just helps with the liveliness of the network, if the primary has sent a view change, then it is either in a new view, or byzantine, we should move on","ts":"1465906588.000079"},{"type":"message","user":"U0XPR4NP4","text":"In particular, the primary times out waiting for a reply to its pre-prepare, and switches views","ts":"1465906670.000080"},{"type":"message","user":"U0XPR4NP4","text":"The rest of the network prepares\/commits that request, and then thinks the world is good","ts":"1465906691.000081"},{"type":"message","user":"U0XPR4NP4","text":"Definitely an optimization and not a correctness thing.  Just see this frequently in the busywork tests","ts":"1465906747.000082"},{"user":"U1GN670VD","type":"message","subtype":"channel_join","text":"<@U1GN670VD|thiruworkspace> has joined the channel","ts":"1465907254.000083"},{"type":"message","user":"U0XPR4NP4","text":"FYI all, I've got that class today unfortunately, so I'll have very limited availability throughout the day","ts":"1465907585.000084"},{"type":"message","user":"U0XV1HDL3","text":"<@U0XPR4NP4>: does  this VIEW-CHANGE optimization take place in the context of the PBFT algorithm as in the TOCS paper (p.411)? If yes, then I would note that the leader doesnt ever send a VIEW-CHANGE there, neither in the figure nor in the text. It just remains correct and satisfied by itself.","ts":"1465907758.000085"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XV1HDL3>: Then our code is wrong, as the leader will send view changes based on request timers, or it's own failure to generate a new view","ts":"1465914009.000086"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: <@U0XQ35CDD> I can fix the above issue, but likely won't be able to get to it until tomorrow, if one of you has a chance and chooses to submit a PR, please make sure you base it off of <https:\/\/github.com\/hyperledger\/fabric\/pull\/1798>","attachments":[{"service_name":"GitHub","title":"No complaints preview PR by jyellick \u00b7 Pull Request #1798 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1798","text":"Description This changeset is targeted at eliminating bugs discovered while working through the busywork stress2b test. First, this changeset removes the old custody framework from batch, and r...","fallback":"GitHub: No complaints preview PR by jyellick \u00b7 Pull Request #1798 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1798","thumb_width":420,"thumb_height":420,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1465914396.000087"},{"type":"message","user":"U0XR6J961","text":"jyellick: you mean add view change when the primary does?","ts":"1465915200.000089"},{"type":"message","user":"U0XV1HDL3","text":"jyellick: i would not think \"wrong\", it seems there is no harm except for unnecessary view changes. but not exactly like in the paper and perhaps unnecessarily cautious. certainly, the suggested fix shouldn't happen, because the problem is better dealt with by eliminating the source.","ts":"1465918432.000090"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XV1HDL3> <@U0XR6J961> I meant fix by preventing the leader from sending timeout based view change messages.  <@U0XV1HDL3> Are there exceptions to this? Should the primary still respond with VIEW-CHANGE when it received f+1 VIEW-CHANGE messages (I would think so)?","ts":"1465920362.000091"},{"type":"message","user":"U0XPR4NP4","text":"Maybe we should hold off on this until after this June freeze, the code as written seems to be working, and unless it fixes a critical bug, it might not be worth the potential regressions.","ts":"1465920423.000092"},{"type":"message","user":"U0XR6J961","text":"i don't understand what you mean by timeout based view change messages","ts":"1465920425.000093"},{"type":"message","user":"U0XR6J961","text":"are you saying that the primary shouldn't maintain a view change timer?","ts":"1465920436.000094"},{"type":"message","user":"U0XPR4NP4","text":"For instance, request timeouts.  The primary sends a pre-prepare, and if it is not committed within the timeout window, then it sends a view change.","ts":"1465920452.000095"},{"type":"message","user":"U0XPR4NP4","text":"Per <@U0XV1HDL3> it sounds like the primary should _not_ send under this scenario.","ts":"1465920466.000096"},{"type":"message","user":"U0XPR4NP4","text":"(I would also assume the primary should not send a VIEW-CHANGE in response to a new view timeout, I would check the paper, but only snuck off to do real work during a lunch break)","ts":"1465920510.000097"},{"type":"message","user":"U0XR6J961","text":"why shouldn't send a view change?","edited":{"user":"U0XR6J961","ts":"1465920721.000000"},"ts":"1465920707.000098"},{"type":"message","user":"U0XPR4NP4","text":"Well, I assume because we know that we are not byzantine, and we may have started the view change timer sooner than the backups.  Also, because it is apparently specified as such in the Castro paper, and if it is causing problems to deviate from it, we should not.","ts":"1465920856.000100"},{"type":"message","user":"U0XV1HDL3","text":"As a primary i will operate under the assumption that i am able to perform the job, and not give up voluntarily. it is left to the others to kick me out. if my request does not get through (primary has sent pre-prepare but request does not commit), then i can't do anything because something like n-f nodes are reachable by assumption. if i cannot reach them, they should kick me out by triggering view change.","ts":"1465921106.000101"},{"type":"message","user":"U0XV1HDL3","text":"When I get f+1 VIEW-CHANGE msgs from others, then I would chime in as leader, yes, as I cannot prevent my expulsion any more.","ts":"1465921147.000102"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XV1HDL3> Since you here, so another quick question to you and <@U0XR6J961> .  On view change, we would like to not perform state transfer if we have all the needed requests less than the initial checkpoint selected by the new view.  The only way we know that a particular request was committed is if we have a commit certificate in the previous view, we cannot deduce this from the pSets\/qSets in general?","ts":"1465921242.000103"},{"type":"message","user":"U0XV1HDL3","text":"sure!","ts":"1465921248.000104"},{"type":"message","user":"U0XV1HDL3","text":"are your psets\/qsets exactly like in the TOCS paper?","ts":"1465921297.000105"},{"type":"message","user":"U0XPR4NP4","text":"That is my understanding, <@U0XQ35CDD> I believe is primarily responsible for that code.","ts":"1465921324.000106"},{"type":"message","user":"U0XQ35CDD","text":"that would be <@U0XR6J961> actually","ts":"1465921336.000107"},{"type":"message","user":"U0XQ35CDD","text":"and the answer to <@U0XV1HDL3> is yes","edited":{"user":"U0XQ35CDD","ts":"1465921400.000000"},"ts":"1465921345.000108"},{"type":"message","user":"U0XPR4NP4","text":"(The problem is on state transfer, we must necessarily clear some state like outstanding requests, as we cannot tell if they were included in one of the transferred blocks [or older, still transferring blocks], so it can lead to us needlessly orphaning requests, also, state transfer is slower than execution in general.  So if we have the knowledge to get to the current state without state transfer, that is preferable)","edited":{"user":"U0XPR4NP4","ts":"1465921419.000000"},"ts":"1465921352.000109"},{"type":"message","user":"U0XR6J961","text":"it is slower?","ts":"1465921506.000113"},{"type":"message","user":"U0XV1HDL3","text":"aha - but i dont understand this one yet - state transfer would mean on the ledger level, the KVS and everything? or some history of committed (decided) requests?","ts":"1465921516.000114"},{"type":"message","user":"U0XR6J961","text":"sync the ledger","ts":"1465921554.000115"},{"type":"message","user":"U0XV1HDL3","text":"the ledger is state that you want to transfer?","ts":"1465921588.000116"},{"type":"message","user":"U0XPR4NP4","text":"Yes, so, the particularly nasty scenario is as follows:","ts":"1465921602.000117"},{"type":"message","user":"U0XPR4NP4","text":"We are at block 5, the network is at block 1,000,000.  We end up doing state transfer, and, because it would take us hours to get all million blocks, we only have say, blocks 0-5, and 999,999,990-1,000,000, and a copy of the current state.  Ignoring the possibility of missing chaincode, there is nothing which prevents us from executing transactions and writing new blocks.","ts":"1465921681.000118"},{"type":"message","user":"U0XPR4NP4","text":"But, unless we have all million blocks, the ledger can't tell us which transactions have committed, it is part of the chain, not part of the state.","ts":"1465921706.000119"},{"type":"message","user":"U0XR6J961","text":"but why do we need to know which transactions have committed?","ts":"1465921774.000120"},{"type":"message","user":"U0XPR4NP4","text":"Ah, because we collect requests as they come in, and remove them from the outstanding list as they execute.","ts":"1465921804.000121"},{"type":"message","user":"U0XV1HDL3","text":"[ P = set of requests that have prepared according to my knowledge, in previous views; Q = set of requests that have pre-prepared; even from all those sets sent in all VIEW-CHANGE msgs that I receive, I cannot infer which ones have also committed... ]","ts":"1465921819.000122"},{"type":"message","user":"U0XR6J961","text":"right, so we need an R set","ts":"1465921844.000123"},{"type":"message","user":"U0XR6J961","text":"which is local use only","ts":"1465921852.000124"},{"type":"message","user":"U0XR6J961","text":"which is the set of requests we sent to the executor","ts":"1465921865.000125"},{"type":"message","user":"U0XPR4NP4","text":"On view change, almost always one replica ends up doing state transfer, and must discard all its outstanding requests.","ts":"1465921866.000126"},{"type":"message","user":"U0XR6J961","text":"yes, it must","ts":"1465921894.000127"},{"type":"message","user":"U0XPR4NP4","text":"When we have periodic view changes and large numbers of outstanding requests, every replica ends up (after a few iterations) discarding its outstanding requests, and we end up orphaning some.","edited":{"user":"U0XPR4NP4","ts":"1465921916.000000"},"ts":"1465921895.000128"},{"type":"message","user":"U0XV1HDL3","text":"If almost always a replica does state transfer on view change, you suggest that it could avoid this by receiving the committed requests that it missed, and apply those?","ts":"1465921951.000130"},{"type":"message","user":"U0XPR4NP4","text":"Right","ts":"1465921959.000131"},{"type":"message","user":"U0XPR4NP4","text":"In many cases, I would expect that it already has commit certs for these","ts":"1465921969.000132"},{"type":"message","user":"U0XV1HDL3","text":"well, if it has commit certs, then it can just run through them, not?","ts":"1465921988.000133"},{"type":"message","user":"U0XV1HDL3","text":"or is something else missing?","ts":"1465921994.000134"},{"type":"message","user":"U0XPR4NP4","text":"Yes, that was my first thought, my only concern is that view change calls for moving the watermarks to the h specified by the view change","ts":"1465922046.000135"},{"type":"message","user":"U0XPR4NP4","text":"The view change is obviously a complicated procedure, I'm just wary I'm missing something here.","ts":"1465922082.000136"},{"type":"message","user":"U0XR6J961","text":"but you could just delay processing the view change message (in\/out)","ts":"1465922110.000137"},{"type":"message","user":"U0XR6J961","text":"and execute","ts":"1465922118.000138"},{"type":"message","user":"U0XV1HDL3","text":"yes, but i would not accept and perform the view change yet, if i peek at this and see that I can get there without state transfer, then I could just pretend the view-change has not yet arrived and work through my requests until I get there as well. once there, when I start doing the view-change, i will have the correct state already","ts":"1465922119.000139"},{"type":"message","user":"U0XV1HDL3","text":"(my suggestion == simon's)","ts":"1465922139.000140"},{"type":"message","user":"U0XR6J961","text":":slightly_smiling_face:","ts":"1465922142.000141"},{"type":"message","user":"U0XPR4NP4","text":"Thanks, looks like they are telling me to get off my laptop, I'll think about it more, but that seems like a reasonable solution.","ts":"1465922164.000142"},{"type":"message","user":"U0XR6J961","text":"oppressive!","ts":"1465922178.000143"},{"type":"message","user":"U0XV1HDL3","text":"sure... but flow control remains an important topic for the protocol","ts":"1465922188.000144"},{"type":"message","user":"U0XV1HDL3","text":"this would just be an optimization that does not change it semantics","ts":"1465922199.000145"},{"type":"message","user":"U0XR6J961","text":"yea flow control :confused:","ts":"1465922230.000146"},{"type":"message","user":"U0XV1HDL3","text":"with more experience we will probably need to deal with the \"lagging\" peer in a different way... like, when it still sends I-am-alive signals, delaying the fast ones a bit, so that the lagging one can catch up","ts":"1465922239.000147"},{"type":"message","user":"U0XR6J961","text":"we're missing flow control for requests forwarded to primary","ts":"1465922243.000148"},{"type":"message","user":"U0XR6J961","text":"in other news, i can now prove what the problem is with poor performance","ts":"1465922282.000149"},{"type":"message","user":"U0XR6J961","text":"and it is exactly what i thought it was:","ts":"1465922297.000150"},{"type":"message","user":"U0XR6J961","text":"goroutine scheduling issues","ts":"1465922303.000151"},{"type":"message","user":"U0XV1HDL3","text":"aha, good to know.","ts":"1465922308.000152"},{"type":"message","user":"U0XV1HDL3","text":"make sure it becomes known beyond this channel","ts":"1465922320.000153"},{"type":"message","user":"U0XR6J961","text":"yep, i will","ts":"1465922331.000154"},{"type":"message","user":"U0XR6J961","text":"i don't think we will be able to work around this easily","ts":"1465922346.000155"},{"type":"message","user":"U0UGH3X7X","text":"<#C113WK2A1>  channel","ts":"1465922373.000156"},{"type":"message","user":"U12AHQ3NK","text":"i am running 4 peers using dockers under calssic pbft. But i am getting view change as soon as I deploy  a chaincode.   13:25:15.453 [consensus\/obcpbft\/events] loop -&gt; WARN 437 Attempting to stop an unfired idle timer","ts":"1465997254.000157"},{"type":"message","user":"U0UGH3X7X","text":"I'm guessing that the deploy transaction data structure is very big and is taking too long to broadcast which in turn is causing the request timeout timer to fire","ts":"1465997514.000158"},{"type":"message","user":"U0UGH3X7X","text":"couple things you can try ... increase the request timeout value in obcpbft\/config.yaml   or check your hyperledger\/fabric source tree and see if there are old copies of logs and what not that can be deleted ( those files are getting pulled into the deploy transaction)","ts":"1465997624.000159"},{"type":"message","user":"U0UGH3X7X","text":"if you're then still seeing a problem,  can you create an issue and include the debug logs ?","ts":"1465997679.000160"},{"type":"message","user":"U12AHQ3NK","text":"which logs ?","ts":"1465997698.000161"},{"type":"message","user":"U0UGH3X7X","text":"set core_logging_level=debug","ts":"1465997725.000162"},{"type":"message","user":"U12AHQ3NK","text":"ohh okay","ts":"1465997736.000163"},{"type":"message","user":"U12AHQ3NK","text":"ill try that","ts":"1465997740.000164"},{"type":"message","user":"U12AHQ3NK","text":"thanks:-)","ts":"1465997745.000165"},{"type":"message","user":"U0XPR4NP4","text":"That warning message is benign, and has been dropped in severity after <https:\/\/github.com\/hyperledger\/fabric\/pull\/1777>","attachments":[{"service_name":"GitHub","title":"Fix reset for event timers in consensus by kchristidis \u00b7 Pull Request #1777 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1777","text":"Description For the event timers in consensus, Reset() should reset an existing timer to a new timeout and clear out any pending events, while SoftReset() should reset the timer only if it's not a...","fallback":"GitHub: Fix reset for event timers in consensus by kchristidis \u00b7 Pull Request #1777 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars2.githubusercontent.com\/u\/14876848?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1777","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1466000882.000166"},{"type":"message","user":"U0XR6J961","text":"jyellick: can state transfer revert existing state?","ts":"1466004868.000168"},{"type":"message","user":"U0XR6J961","text":"i thought it does not, kostas thinks it does","ts":"1466004881.000169"},{"type":"message","user":"U0XPR4NP4","text":"It can, it is configurable","ts":"1466004887.000170"},{"type":"message","user":"U0XR6J961","text":"ah so we do have an option to revert","ts":"1466004901.000171"},{"type":"message","user":"U0XPR4NP4","text":"It can overwrite existing blocks, there is no mechanism to delete existing blocks unfortunately","ts":"1466004973.000172"},{"type":"message","user":"U0XR6J961","text":"what about state?","ts":"1466005033.000173"},{"type":"message","user":"U0XR6J961","text":"will it apply deltas in reverse?","ts":"1466005047.000174"},{"type":"message","user":"U0XPR4NP4","text":"It will not","ts":"1466005240.000175"},{"type":"message","user":"U0XPR4NP4","text":"State can be recovered completely, and played forward","ts":"1466005252.000176"},{"type":"message","user":"U0XPR4NP4","text":"The ledger has the ability to apply deltas backwards","ts":"1466005264.000177"},{"type":"message","user":"U0XPR4NP4","text":"But state transfer does not utilize this.  (In particular, because we want to try to verify the state snapshot before applying the deltas, but at that point, there is no point in going back in time)","ts":"1466005308.000178"},{"type":"message","user":"U0XR6J961","text":"so currently when we figure out that we diverged from the majority of the network, we will start state transfer, and state transfer will fix all data?","ts":"1466005647.000179"},{"type":"message","user":"U0XPR4NP4","text":"Correct","ts":"1466005740.000180"},{"type":"message","user":"U0XPR4NP4","text":"Unless you have twiddled the config to panic in this scenario","ts":"1466005750.000181"},{"type":"message","user":"U0XPR4NP4","text":"(But this is not the default)","ts":"1466005756.000182"},{"type":"message","user":"U0XPR4NP4","text":"Rough flow is:\n\n1. Given state target which is different from what we have.\n2. Go fetch the blocks from that target to our current believed valid block\n3. Realize our state doesn't mesh with what's reported by the retrieved blocks, and that however much of the chain does not hash\n4. New copy of the state is grabbed, corrupt blocks are grabbed, written\n5. We're now in a good state, normal state transfer for recovery takes place","ts":"1466005897.000183"},{"user":"U1B2FF8LR","type":"message","subtype":"channel_join","text":"<@U1B2FF8LR|scottz> has joined the channel","ts":"1466016224.000184"},{"type":"message","user":"U1B2FF8LR","text":"<@U0XR6J961> <@U0XPR4NP4> Hi, Do you have line of sight yet, and can you provide a forecast for merging the pull request 1793 for issue 1056? Sharon and Barry and many others of us are eagerly anticipating your delivery, so we can run our regression and performance tests on a loadbuild that includes this (along with 1798).","ts":"1466017298.000185"},{"type":"message","user":"U0XPR4NP4","text":"<@U1B2FF8LR> As this fixes a critical issue, I'm okay with 1793 as is, the theoretical negative implications are still better than the current bad behavior, and we can address those in the future","ts":"1466017486.000186"},{"type":"message","user":"U0XPR4NP4","text":"I'll post to that effect in the PR","ts":"1466017502.000187"},{"type":"message","user":"U0XPR4NP4","text":"Looks like <@U0XR6J961> will still need to rebase","ts":"1466017564.000188"},{"type":"message","user":"U1B2FF8LR","text":"<@U0XR6J961> <@U0XPR4NP4> Thanks for the update. Then it sounds like we could get this fix by early tomorrow, if all goes well.","ts":"1466019357.000189"},{"type":"message","user":"U0KM61BCP","text":"<@U1B2FF8LR>: you do know you can cherrypick a pr and run tests... no need to wait","ts":"1466021925.000190","reactions":[{"name":"+1","users":["U0XQ35CDD"],"count":1}]},{"type":"message","user":"U0KM61BCP","text":"it would help reinforce that the pr is good","ts":"1466021949.000191"},{"user":"U126PEMNH","type":"message","subtype":"channel_leave","text":"<@U126PEMNH|harshal> has left the channel","ts":"1466094184.000192"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XQ35CDD> <@U0XR6J961> <https:\/\/github.com\/hyperledger\/fabric\/pull\/1877>","attachments":[{"service_name":"GitHub","title":"Stabilize PBFT under stress with periodic viewchange by jyellick \u00b7 Pull Request #1877 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1877","text":"Description This changeset contains three new commits, to accomplish three things. If a view change occurs and selects an initial checkpoint which is higher than our lastExec, but which can be r...","fallback":"GitHub: Stabilize PBFT under stress with periodic viewchange by jyellick \u00b7 Pull Request #1877 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1877","thumb_width":420,"thumb_height":420,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1466102480.000193"},{"type":"message","user":"U142E5N0P","text":"Does fabric have the sequential semantic?  \nSay, there are a series of messages A,B,C,D with an increasing timestamp, does fabric guarantee the execution order of transactions, such that transactions with larger timestamp will never be executed before those with smaller timestamp?","ts":"1466159723.000195"},{"type":"message","user":"U0XR6J961","text":"no","ts":"1466159980.000196"},{"type":"message","user":"U142E5N0P","text":"so A,B,C,D will be concurrently executed without order guaranteed ?","ts":"1466160134.000197"},{"type":"message","user":"U0XR6J961","text":"if you submit them concurrently, they will be executed in a random order","ts":"1466160325.000198"},{"type":"message","user":"U142E5N0P","text":"got it, thanks~","ts":"1466161005.000199"},{"type":"message","user":"U0XR6J961","text":"jyellick: you around?","ts":"1466169006.000200"},{"type":"message","user":"U0XPR4NP4","text":"Yep","ts":"1466169018.000201"},{"type":"message","user":"U0XPR4NP4","text":"Working on that fix to #1874","ts":"1466169032.000202"},{"type":"message","user":"U0XR6J961","text":"but what is the problem?","ts":"1466169047.000203"},{"type":"message","user":"U0XR6J961","text":"i've been trying to replicate problems all morning and didn't get anywhere","ts":"1466169081.000204"},{"type":"message","user":"U0XR6J961","text":"or rather, found that you fixed it already","ts":"1466169094.000205"},{"type":"message","user":"U0XPR4NP4","text":"The big one, is that after view change, you can get duplicate executions, if the view changes after a request makes it into the pset, then gets scheduled for resubmission before the primary executes it","ts":"1466169198.000206"},{"type":"message","user":"U0XPR4NP4","text":"All my stress testing for view changes with this was at checkpoint boundaries, so my psets were generally empty","ts":"1466169221.000207"},{"type":"message","user":"U0XR6J961","text":"how does that lead to freeze?","ts":"1466169272.000208"},{"type":"message","user":"U0XPR4NP4","text":"Ah, it doesn't! But, <@U0UGH3X7X>'s behave test failed because the result was 'wrong'","ts":"1466169326.000209"},{"type":"message","user":"U0XPR4NP4","text":"So, no freeze, but potentially multiply executing transactions, which is is the problem I'm fixing","ts":"1466169352.000210"},{"type":"message","user":"U0XR6J961","text":"ah","ts":"1466169374.000211"},{"type":"message","user":"U0XR6J961","text":"so that's in the executor?","ts":"1466169378.000212"},{"type":"message","user":"U0XR6J961","text":"but don't we advance lastexec?","ts":"1466169388.000213"},{"type":"message","user":"U0XPR4NP4","text":"No, it's not in executor, it's a view change logic bug","ts":"1466169559.000214"},{"type":"message","user":"U0XPR4NP4","text":"We need to pull the requests out of the pset\/qset which are in the new view, but which the new primary didn't initially order, and make sure we do not submit them to the network as outstanding requests","ts":"1466169612.000215"},{"type":"message","user":"U0XPR4NP4","text":"Otherwise we end up executing the same request in two different batches","ts":"1466169625.000216"},{"type":"message","user":"U0XR6J961","text":"oh we're talking about an issue in batch","ts":"1466169648.000217"},{"type":"message","user":"U0XR6J961","text":"not the core","ts":"1466169655.000218"},{"type":"message","user":"U0XPR4NP4","text":"On the second execute, we'll see, that somehow, even as the primary, we didn't know about that request (as we deleted it from our store), but, so as not to fork, we execute anyway","ts":"1466169662.000219"},{"type":"message","user":"U0XPR4NP4","text":"Right","ts":"1466169663.000220"},{"type":"message","user":"U0XR6J961","text":"ha!","ts":"1466169687.000221"},{"type":"message","user":"U0XR6J961","text":"well, as we said, somebody down the line should prevent replays anyways","ts":"1466169705.000222"},{"type":"message","user":"U0XR6J961","text":"was that problem also in my complainer\/deduplicator?","ts":"1466169753.000223"},{"type":"message","user":"U0XR6J961","text":"i guess my code filters more aggressively","ts":"1466169770.000224"},{"type":"message","user":"U0XPR4NP4","text":"I think it was","ts":"1466170095.000225"},{"type":"message","user":"U0XPR4NP4","text":"Or rather, I would should say, you could certainly multiply submit requests to the network on view change","ts":"1466170122.000226"},{"type":"message","user":"U0XPR4NP4","text":"But, on execute, some or all of the nodes might filter it out","ts":"1466170137.000227"},{"type":"message","user":"U0XR6J961","text":"right","ts":"1466170285.000228"},{"type":"message","user":"U0UGH3X7X","text":"did you guys see the question about `TestOutstandingReqsSubmission` failing in  PR #1877 ?","ts":"1466171021.000229"},{"type":"message","user":"U0XPR4NP4","text":"Not yet, let me take a look","ts":"1466171435.000230"},{"type":"message","user":"U0XPR4NP4","text":"I'm planning to push the outstanding req fix to #1877 so will fix it if it is still failing then","ts":"1466173505.000231","reactions":[{"name":"+1","users":["U0UGH3X7X"],"count":1}]},{"type":"message","user":"U0XR6J961","text":"jyellick: can you rebase it so that only new commits are in the PR?","ts":"1466173535.000232"},{"type":"message","user":"U0XPR4NP4","text":"I tried to do that... any handy commands I should know?","ts":"1466173563.000233"},{"type":"message","user":"U0XPR4NP4","text":"(Since my commits were squashed in that other PR, even when rebasing to master, all those other commits linger)","ts":"1466173602.000234"},{"type":"message","user":"U0XR6J961","text":"git rebase --onto upstream\/master aa69ef","ts":"1466173653.000235"},{"type":"message","user":"U0XR6J961","text":"hm","ts":"1466173657.000236"},{"type":"message","user":"U0XR6J961","text":"or one below?","ts":"1466173662.000237"},{"type":"message","user":"U0XR6J961","text":"8b54?","ts":"1466173680.000238"},{"type":"message","user":"U0XR6J961","text":"i have a handy UI in emacs for that","ts":"1466173695.000239"},{"type":"message","user":"U0XPR4NP4","text":"Thanks, I'll give it a shot","ts":"1466174340.000240"},{"type":"message","user":"U0XPR4NP4","text":"<@U0UGH3X7X>: Are you planning on submitting a PR for those behave test, or should I include them in the PR I'm submitting?","ts":"1466175496.000241"},{"type":"message","user":"U0UGH3X7X","text":"simon has a pr for the #1874 behave test  ... go ahead and add the #1873 one to your pr","ts":"1466175581.000242"},{"type":"message","user":"U0XPR4NP4","text":"Thanks, will do","ts":"1466175673.000243"},{"type":"message","user":"U0XPR4NP4","text":"Have code changes which fix the behave test, need to write some unit tests, then will rebase and submit","ts":"1466176231.000244"},{"type":"message","user":"U0UGH3X7X","text":"<@U0XPR4NP4>:  code changes for #1874 ?   if so, check if .behaverc is skipping @issue_1874 and remove.   I just sent pr #1898  because all the builds are failing","ts":"1466176582.000245"},{"type":"message","user":"U0XPR4NP4","text":"Yes, for #1874","ts":"1466176603.000246"},{"type":"message","user":"U0XPR4NP4","text":"Thought you said I should include that behave test in my PR, it's already there?","ts":"1466176635.000247"},{"type":"message","user":"U0UGH3X7X","text":"include the behave test for #1873","ts":"1466176677.000248"},{"type":"message","user":"U0XPR4NP4","text":"Ah, got it","ts":"1466177899.000249"},{"type":"message","user":"U0TFEHX8E","text":"Tests have started to fail with\n```\n--- FAIL: TestSieveNoDecision (7.01s)\n\tobc-sieve_test.go:139: replica 0 in epoch 2, expected 1\n\tobc-sieve_test.go:139: replica 1 in epoch 2, expected 1\n\tobc-sieve_test.go:139: replica 2 in epoch 2, expected 1\n\tobc-sieve_test.go:139: replica 3 in epoch 2, expected 1\n```\nIs this a known issue? Seems it started on an unrelated change","ts":"1466194037.000250"},{"type":"message","user":"U0XPR4NP4","text":"I've seen this, I'll add a skip to it","ts":"1466194192.000251"},{"type":"message","user":"U0XPR4NP4","text":"<@U0TFEHX8E>: <https:\/\/github.com\/hyperledger\/fabric\/pull\/1909>","attachments":[{"service_name":"GitHub","title":"Disable TestSieveNoDecision until its stability can be improved by jyellick \u00b7 Pull Request #1909 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1909","text":"Description Skips the unstable TestSieveNoDecision test. Motivation and Context This is breaking CI, and Sieve is currently experimental, with known stability problems which are not currently be...","fallback":"GitHub: Disable TestSieveNoDecision until its stability can be improved by jyellick \u00b7 Pull Request #1909 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1909","thumb_width":420,"thumb_height":420,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1466202583.000252"},{"type":"message","user":"U0XPR4NP4","text":"<@U0UGH3X7X>: <@U0XQ35CDD> <@U0XR6J961> Added some commits to <https:\/\/github.com\/hyperledger\/fabric\/pull\/1877> unfortunately it spiked the complexity a little, but I've spent the afternoon testing, passing it through busywork, etc., so hopefully it is pretty stable.  Would like to write some more specific unit tests for the `requestStore`, but ran out of time and wanted to at least put it out there for review","attachments":[{"service_name":"GitHub","title":"Stabilize PBFT under stress with periodic viewchange by jyellick \u00b7 Pull Request #1877 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1877","text":"Description This changeset contains three new commits, to accomplish three things. If a view change occurs and selects an initial checkpoint which is higher than our lastExec, but which can be r...","fallback":"GitHub: Stabilize PBFT under stress with periodic viewchange by jyellick \u00b7 Pull Request #1877 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1877","thumb_width":420,"thumb_height":420,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1466202671.000254"},{"type":"message","user":"U1B2FF8LR","text":"It seems 1877 fixed 1873 but not 1874. <https:\/\/github.com\/hyperledger\/fabric\/issues\/1874>","attachments":[{"service_name":"GitHub","title":"Peer PBFT Batch does not work on queue after two VPs bounce \u00b7 Issue #1874 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/issues\/1874","text":"Description Some basic behavior with Consensus seems to be no longer working, in a specific scenario. This test fails on test images from 6\/15 (f8ffcd1) and 6\/16 (04f076b). The test passed on 6\/9 ...","fallback":"GitHub: Peer PBFT Batch does not work on queue after two VPs bounce \u00b7 Issue #1874 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars2.githubusercontent.com\/u\/19557276?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/issues\/1874","thumb_width":420,"thumb_height":420,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1466320853.000256"},{"user":"U1HFNJB50","type":"message","subtype":"channel_join","text":"<@U1HFNJB50|c0rwin> has joined the channel","ts":"1466332278.000258"},{"type":"message","subtype":"file_share","text":"<@U1B2FF8LR|scottz> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/scottz\/F1J755SRH\/s1s2ir2iq.go|S1S2IR2IQ.go> and commented: I updated 1874. I cannot yet explain why it fails, even though the behave test passes, and they seem to perform the same steps. I even modified my testcase to avoid extra things and avoid stopping peer0.","file":{"id":"F1J755SRH","created":1466354192,"timestamp":1466354192,"name":"S1S2IR2IQ.go","title":"S1S2IR2IQ.go","mimetype":"text\/plain","filetype":"go","pretty_type":"Go","user":"U1B2FF8LR","editable":true,"size":10130,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1J755SRH\/s1s2ir2iq.go?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1J755SRH\/download\/s1s2ir2iq.go?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/scottz\/F1J755SRH\/s1s2ir2iq.go","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F1J755SRH-a6754426ca","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/scottz\/F1J755SRH\/s1s2ir2iq.go\/edit","preview":"package main\n\/******************** Testing Objective consensu:STATE TRANSFER ********\n*   S1S2IR2IQ.go\n*   Setup: 5 node local docker peer network with security\n*   0. Deploy chaincodeexample02 with 10, 20 as initial args, query any one peer to verify.","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre><span class=\"cm-keyword\">package<\/span> <span class=\"cm-variable\">main<\/span><\/pre><\/div>\n<div><pre><span class=\"cm-comment\">\/******************** Testing Objective consensu:STATE TRANSFER ********<\/span><\/pre><\/div>\n<div><pre><span class=\"cm-comment\">*   S1S2IR2IQ.go<\/span><\/pre><\/div>\n<div><pre><span class=\"cm-comment\">*   Setup: 5 node local docker peer network with security<\/span><\/pre><\/div>\n<div><pre><span class=\"cm-comment\">*   0. Deploy chaincodeexample02 with 10, 20 as initial args, query any one peer to verify.<\/span><\/pre><\/div>\n<\/div>\n<\/div>\n","lines":289,"lines_more":284,"preview_is_truncated":null,"channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":1,"initial_comment":{"id":"Fc1J8FENTA","created":1466354192,"timestamp":1466354192,"user":"U1B2FF8LR","is_intro":true,"comment":"I updated 1874. I cannot yet explain why it fails, even though the behave test passes, and they seem to perform the same steps. I even modified my testcase to avoid extra things and avoid stopping peer0.","channel":""}},"user":"U1B2FF8LR","upload":true,"display_as_bot":false,"username":"<@U1B2FF8LR|scottz>","bot_id":null,"ts":"1466354192.000261"},{"type":"message","user":"U142E5N0P","text":"It seems the behaviors of latest version under stress test have been changed:\n\nPreviously, I setup 4 nodes with `pbft` and `batch`, after deploying chaincode `example2`, I use jmeter to send restful API to certain nodes to send `invoke` requests. The results show that jmeter could reach nearly 10K TPS, while fabric will process the transaction at a speed of 20 per second or so, therefore the left requests are discarded.\n\nFor the latest codebase, I can see jmeter only show tens of request around per second, while at the same time any other REST clients will be blocked.  It seems the behaviors have been changed from `asynchronous` to `near synchronous` ? \n\nAdditionally, there are some bugs for the latest codebase, because I can only see the `invoke` transactions have been executed for several times, while the later requests will not take into effects on the chaincode\u2014I drew the conclusion through continuously sending `query` requests to peer node.","edited":{"user":"U142E5N0P","ts":"1466403665.000000"},"ts":"1466403584.000262"},{"type":"message","user":"U0XR6J961","text":"yingfeng: what do you mean, several times and no effect?","ts":"1466405932.000266"},{"type":"message","user":"U142E5N0P","text":"yes, latest commit show that only several `invoke` requests have taken into effects","ts":"1466405976.000267"},{"type":"message","user":"U142E5N0P","text":"because the results from `query` requests keep unchanged for a long time, although jmeter had been running for minutes","ts":"1466406027.000268"},{"type":"message","user":"U0XR6J961","text":"do you have logs?","ts":"1466406189.000269"},{"type":"message","user":"U0XR6J961","text":"debug logs","ts":"1466406195.000270"},{"type":"message","user":"U0XR6J961","text":"jyellick: i just replaced the O(n) + reflect request store with a bit better performance","ts":"1466431040.000271"},{"type":"message","user":"U0XR6J961","text":"but i think we should use a better data structure","ts":"1466431050.000272"},{"type":"message","user":"U0XR6J961","text":"sorting a slice is just plain awful","ts":"1466431057.000273"},{"type":"message","user":"U0XR6J961","text":"with 100 entries, it takes avg 2ms to do an add, test, remove","ts":"1466431084.000274"},{"type":"message","user":"U0XR6J961","text":"well, for 100 entries","ts":"1466431095.000275"},{"type":"message","user":"U0XR6J961","text":"for 1000 entries it takes 215ms","ts":"1466431123.000276"},{"type":"message","user":"U0XR6J961","text":"this sorting is expensive","ts":"1466431134.000277"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I've thought the same for the `requeststore` thing I added, I know the performance must just be awful","ts":"1466431214.000278"},{"type":"message","user":"U0XPR4NP4","text":"As the slice sorting is being done via `reflect.DeepEqual` additionally","ts":"1466431230.000279"},{"type":"message","user":"U0XR6J961","text":"people already complained :slightly_smiling_face:","ts":"1466431300.000280"},{"type":"message","user":"U0XR6J961","text":"do we have to keep it sorted?","ts":"1466431342.000281"},{"type":"message","user":"U0XR6J961","text":"can't we sort it just when we need to?","ts":"1466431350.000282"},{"type":"message","user":"U0XPR4NP4","text":"We can","ts":"1466431357.000283"},{"type":"message","user":"U0XPR4NP4","text":"I thought it might be cheaper to try to keep it ordered than to order it before each access","ts":"1466431397.000284"},{"type":"message","user":"U0XR6J961","text":"why do we have to keep them ordered?","ts":"1466431437.000285"},{"type":"message","user":"U0XPR4NP4","text":"The behave tests tend to get upset if we do not, as they look for the last transaction they submitted to be committed as a signal that all have been committed.  Additionally, it's the intuitive behavior.","ts":"1466431567.000286"},{"type":"message","user":"U0XR6J961","text":"well","ts":"1466431625.000287"},{"type":"message","user":"U0XPR4NP4","text":"And prevents a request from getting starved.  Say if we go on map hash order, you could end up maintaining a huge queue of requests, and the requests which happen to land near the end of map iteration will constantly stay at the back of the queue and effectively never execute.","ts":"1466431625.000288"},{"type":"message","user":"U0XR6J961","text":"i see","ts":"1466431641.000289"},{"type":"message","user":"U0XR6J961","text":"but then a simple sequence would do","ts":"1466431650.000290"},{"type":"message","user":"U0XR6J961","text":"not ordered by time","ts":"1466431661.000291"},{"type":"message","user":"U0XR6J961","text":"just appended","ts":"1466431665.000292"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I thought ordered by time would be ideal, but it's not strictly necessary.","ts":"1466431740.000293"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1466431745.000294"},{"type":"message","user":"U0XR6J961","text":"let me see what i can do","ts":"1466431751.000295"},{"type":"message","user":"U0XPR4NP4","text":"Really, I think we we used a better datastructure, like a tree, we could store by time efficiently","ts":"1466431757.000296"},{"type":"message","user":"U0XR6J961","text":"because this quadratic behavior is not good at all","ts":"1466431761.000297"},{"type":"message","user":"U0XR6J961","text":"we could","ts":"1466431772.000298"},{"type":"message","user":"U0XPR4NP4","text":"Or, even if we did insertion ordering on a linked list","ts":"1466431778.000299"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1466431783.000300"},{"type":"message","user":"U0XR6J961","text":"that's what i was going for","ts":"1466431787.000301"},{"type":"message","user":"U0XPR4NP4","text":"Would definitely be an improvement, I'm the first to admit that PR opted for 'clear correctness' in the face of terrible performance","ts":"1466431859.000302"},{"type":"message","user":"U0XR6J961","text":":slightly_smiling_face:","ts":"1466432004.000303"},{"type":"message","user":"U0XR6J961","text":"but i see quite an overlap with the complainer reqstore stuff :slightly_smiling_face:","ts":"1466432033.000304"},{"type":"message","user":"U0XPR4NP4","text":"Yes, definitely so, in retrospect it might have been better to remove complaints, but not the complainer reqstore and re-use that.  Sadly sometimes it takes nearly reimplementing something to understand the decisions made in it.","ts":"1466432532.000305"},{"type":"message","user":"U0XR6J961","text":"yep","ts":"1466433016.000306"},{"type":"message","user":"U0XR6J961","text":"see executor :slightly_smiling_face:","ts":"1466433019.000307"},{"type":"message","user":"U0XR6J961","text":"yey","ts":"1466433065.000308"},{"type":"message","user":"U0XR6J961","text":"O(1) restored","ts":"1466433069.000309"},{"type":"message","user":"U0XR6J961","text":"i think i made a blunder with my broadcast","ts":"1466433264.000310"},{"type":"message","user":"U0XR6J961","text":"we will queue and not drop messages as long as grpc does","ts":"1466433281.000311"},{"type":"message","user":"U0XR6J961","text":"plus grpc message reordering (unless they use a queueing mutex)","ts":"1466433315.000312"},{"type":"message","user":"U0XR6J961","text":"jyellick: <https:\/\/github.com\/hyperledger\/fabric\/pull\/1924>","attachments":[{"service_name":"GitHub","title":"preview: Pbft performance reqstore by corecode \u00b7 Pull Request #1924 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1924","text":"Description Motivation and Context Fixes # How Has This Been Tested? Checklist: [] I have added a Signed-off-by [] Either no new documentation is required by this change, OR I ...","fallback":"GitHub: preview: Pbft performance reqstore by corecode \u00b7 Pull Request #1924 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1924","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1466433386.000313"},{"type":"message","user":"U0XR6J961","text":"i'm about to walk to the train","ts":"1466433410.000315"},{"type":"message","user":"U0XPR4NP4","text":"Thanks <@U0XR6J961>, appreciate the fix","ts":"1466433707.000316"},{"type":"message","user":"U0XR6J961","text":"sure","ts":"1466433794.000317"},{"type":"message","user":"U0XR6J961","text":"finally something not distributed :slightly_smiling_face:","ts":"1466433808.000318"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: I'm looking at `broadcast.go` and as best as I can tell, the message queue channels aren't ever read or written to? I think maybe this is what you were referring to on the scrum call today?","ts":"1466438379.000319"},{"type":"message","user":"U0XR6J961","text":"oh i didn't remove the channels?","ts":"1466438510.000320"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1466438512.000321"},{"type":"message","user":"U0XPR4NP4","text":"I think I'm seeing symptoms of arbitrary message ordering which is breaking busywork, currently putting together a changeset which doesn't spawn all the goroutines and utilizes those channels","ts":"1466438916.000322"},{"type":"message","user":"U0XPR4NP4","text":"<https:\/\/github.com\/hyperledger\/fabric\/pull\/1927> <@U0XR6J961> <@U0XQ35CDD> <@U0UGH3X7X> a pretty simple changeset if you guys could quickly review","attachments":[{"service_name":"GitHub","title":"Resend view change requests periodically if quorum is not achieved by jyellick \u00b7 Pull Request #1927 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1927","text":"Description This changeset introduces a new timer which is started after sending a view change message, and stopped when a quorum of view change messages is received. The timeout is configurable ...","fallback":"GitHub: Resend view change requests periodically if quorum is not achieved by jyellick \u00b7 Pull Request #1927 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1927","thumb_width":420,"thumb_height":420,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1466439325.000323"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>, I don't imagine you're around?","ts":"1466445811.000325"},{"type":"message","user":"U0XR6J961","text":"unfortunately my behave doesn't work well for 1874","ts":"1466509329.000326"},{"type":"message","user":"U0XR6J961","text":"i'm having problems with deploy","ts":"1466509348.000327"},{"type":"message","user":"U0UGH3X7X","text":"gimme a few minutes  ... doing a vagrant destroy\/up  ... will get the debug logs for the @issue_1874 tests","ts":"1466511966.000328"},{"type":"message","user":"U0XR6J961","text":"why can't i deploy chaincode? puzzling, puzzling","ts":"1466513451.000329"},{"type":"message","user":"U0UGH3X7X","text":"what's the error on deploy ?  is it a timeout again ?","ts":"1466514202.000330"},{"type":"message","user":"U0XR6J961","text":"no error","ts":"1466514624.000331"},{"type":"message","user":"U0XR6J961","text":"like it never finishes","ts":"1466514629.000332"},{"type":"message","user":"U0XR6J961","text":"but not even a timeout","ts":"1466514633.000333"},{"type":"message","user":"U0XR6J961","text":"ah now a timeout","ts":"1466514647.000334"},{"type":"message","user":"U0XR6J961","text":"2 minutes timeout","ts":"1466514662.000335"},{"type":"message","user":"U0XR6J961","text":"also there is no container running","ts":"1466514683.000336"},{"type":"message","user":"U0XR6J961","text":"is that some weird non-vagrant thing again?","ts":"1466514691.000337"},{"type":"message","user":"U0UGH3X7X","text":"maybe   ... i'm having to do vagrant destroy because when i tried make behave-deps earlier, i got \"no permissions to install\"","ts":"1466514783.000338"},{"type":"message","user":"U0UKTPMG8","text":"<@U0UGH3X7X>, that may be an issue with the installation of grpcio package for python","ts":"1466516031.000339"},{"type":"message","user":"U0XR6J961","text":"yea i installed that","ts":"1466516120.000340"},{"type":"message","user":"U0XR6J961","text":"it's really that the chaincode subsystem can't start a container, it seems","ts":"1466516136.000341"},{"type":"message","user":"U0UKTPMG8","text":"<@U0XR6J961> do you notice a new image downloaded?","ts":"1466516566.000342"},{"type":"message","user":"U0XR6J961","text":"see in <#C0YPYBVJM>","ts":"1466516588.000343"},{"type":"message","user":"U0XR6J961","text":"doesn't seem to be able to connect to the docker process","ts":"1466516599.000344"},{"type":"message","user":"U0UKTPMG8","text":"wondering if a base image is being downloaded and the chaincode container is taking a while to build?","ts":"1466516664.000345"},{"type":"message","user":"U0UKTPMG8","text":"does 'docker images' show new age on any of the base images?","ts":"1466516680.000346"},{"type":"message","user":"U0XR6J961","text":"no, nothing is being downloaded","ts":"1466516946.000347"},{"type":"message","user":"U0XR6J961","text":"jyellick: doesn't seem to be a consensus issue?","ts":"1466519340.000348"},{"type":"message","user":"U0XR6J961","text":"<@U0UKTPMG8>: could you have a look at 1874 - seems peers are not automatically reconnecting to each other?","ts":"1466519383.000349"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: Was putting together the final changes for 1928, haven't had a chance to look at the logs yet","ts":"1466519409.000350"},{"type":"message","user":"U0XR6J961","text":"i.e. if the rootnode bounces, it cannot join back (and probably other nodes can't join the network either)","ts":"1466519412.000351"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1466519414.000352"},{"type":"message","user":"U0XR6J961","text":"vp0 comes up, and nobody ever connects to it, nor does it connect to other nodes","ts":"1466519436.000353"},{"type":"message","user":"U0XR6J961","text":"i think that goes back to the lack of a fixed peer list we should have","ts":"1466519447.000354"},{"type":"message","user":"U0XPR4NP4","text":"Is this the 'root discovery node' thing?","ts":"1466519570.000355"},{"type":"message","user":"U0XR6J961","text":"i think this is it","ts":"1466519673.000356"},{"type":"message","user":"U0XR6J961","text":"we probably would have to persist a list of nodes\/ips that we ever saw, and try to connect to any of those","ts":"1466519700.000357"},{"type":"message","user":"U0XR6J961","text":"but that's in the peer - consensus can't do anything about it","ts":"1466519719.000358"},{"type":"message","user":"U0XQ35CDD","text":"I think there might be an easier fix","ts":"1466519929.000359"},{"type":"message","user":"U0XQ35CDD","text":"have the rest of the nodes attempt to reconnect to the rootnode if they're not connected to it","ts":"1466520077.000360"},{"type":"message","user":"U0UKTPMG8","text":"<@U0XR6J961> seems to pass with latest master.  I touched base with <@U1B5DPRLG>, she will contact me if any more issues","ts":"1466520094.000361"},{"type":"message","user":"U0XQ35CDD","text":"so invoke this line (if the rootNode is not in your peersList) <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/core\/peer\/peer.go#L537>","edited":{"user":"U0XQ35CDD","ts":"1466520133.000000"},"ts":"1466520094.000362"},{"type":"message","user":"U0XQ35CDD","text":"fix, as in \"stopgap measure\"","ts":"1466520151.000366"},{"type":"message","user":"U0XR6J961","text":"jeffgarratt: well, it fails here with latest master","ts":"1466520153.000367"},{"type":"message","user":"U0UKTPMG8","text":"hmmm","ts":"1466520161.000368"},{"type":"message","user":"U0UKTPMG8","text":"there is a new ensureConnected function that runs in background","ts":"1466520172.000369"},{"type":"message","user":"U0XR6J961","text":"i don't know why","ts":"1466520183.000370"},{"type":"message","user":"U0XR6J961","text":"also imagine: vp0 stays down","ts":"1466520194.000371"},{"type":"message","user":"U0XR6J961","text":"how does vp3 connect back to vp1 and vp2?","ts":"1466520205.000372"},{"type":"message","user":"U0UKTPMG8","text":"if they were NOT given a rootnode list, they would not, unless retrieved from discovery from remaining","ts":"1466520233.000373"},{"type":"message","user":"U0XR6J961","text":"ah that logic doesn't work","ts":"1466520259.000374"},{"type":"message","user":"U0XR6J961","text":"see, the problem is that vp1 and vp2 are connected with each other","ts":"1466520269.000375"},{"type":"message","user":"U0XR6J961","text":"so len(peersMsg.Peers) &gt; 0","ts":"1466520283.000376"},{"type":"message","user":"U0XQ35CDD","text":"which is why I suggest: <https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1466520094000362>","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1466520094000362","fallback":"[June 21st, 2016 7:41 AM] kostas: so invoke this line (if the rootNode is not in your peersList) <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/core\/peer\/peer.go#L537>","author_subname":"kostas","ts":"1466520094.000362","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"so invoke this line (if the rootNode is not in your peersList) <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/core\/peer\/peer.go#L537>","author_name":"Kostas Christidis","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/kostas","author_icon":"https:\/\/avatars.slack-edge.com\/2016-04-05\/31983107923_80db5353e9278df980c7_48.png","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1466520306.000377"},{"type":"message","user":"U0XR6J961","text":"so do we just have to give all peers a full rootnode list?","ts":"1466520314.000379"},{"type":"message","user":"U0XR6J961","text":"kostas: what if the rootnode is down?","ts":"1466520337.000380"},{"type":"message","user":"U0XR6J961","text":"how does vp3 connect to vp1 and vp2?","ts":"1466520344.000381"},{"type":"message","user":"U0XR6J961","text":"if the answer is, populate the rootnode list with all validators, fine","ts":"1466520372.000382"},{"type":"message","user":"U0XR6J961","text":"that's perfect","ts":"1466520374.000383"},{"type":"message","user":"U0XR6J961","text":"if this is something we can do","ts":"1466520434.000384"},{"type":"message","user":"U0XQ35CDD","text":"I see your point, with vp0 down, if vp1 also goes down and comes back up, vp3 won't ever be able to reconnect to it","edited":{"user":"U0XQ35CDD","ts":"1466520462.000000"},"ts":"1466520446.000385"},{"type":"message","user":"U0UKTPMG8","text":"correct","ts":"1466520456.000386"},{"type":"message","user":"U0UKTPMG8","text":"we would need to add some sort of recently connected logic with retry","ts":"1466520470.000388"},{"type":"message","user":"U0UKTPMG8","text":"which would be fairly simple to do","ts":"1466520478.000389"},{"type":"message","user":"U0XR6J961","text":"jeffgarratt: can we have more than 1 node in the root list?","ts":"1466520483.000390"},{"type":"message","user":"U0UKTPMG8","text":"but the rootNode list would work for now","ts":"1466520487.000391"},{"type":"message","user":"U0UKTPMG8","text":"yes","ts":"1466520488.000392"},{"type":"message","user":"U0XQ35CDD","text":"it's an array, yes","ts":"1466520492.000393"},{"type":"message","user":"U0XR6J961","text":"and the peer tries to keep connections to all of them?","ts":"1466520497.000394"},{"type":"message","user":"U0UKTPMG8","text":"no, only if totally lost conns","ts":"1466520506.000395"},{"type":"message","user":"U0XR6J961","text":"oh","ts":"1466520510.000396"},{"type":"message","user":"U0XR6J961","text":"that's bad","ts":"1466520512.000397"},{"type":"message","user":"U0UKTPMG8","text":"could add that fairly easily","ts":"1466520518.000398"},{"type":"message","user":"U0XR6J961","text":"because it means that we can have a partitioned network","ts":"1466520521.000399"},{"type":"message","user":"U0UKTPMG8","text":"we can definitely add more intelligence to the 'maintained' connections","ts":"1466520548.000400"},{"type":"message","user":"U0XR6J961","text":"i think if we can try to keep a connection to every node in the rootnodes, we're good","ts":"1466520573.000401"},{"type":"message","user":"U0UKTPMG8","text":"say isntead of Peers ==0, Peers &lt; len(rootNodes)","ts":"1466520580.000402"},{"type":"message","user":"U0XR6J961","text":"yep","ts":"1466520584.000403"},{"type":"message","user":"U0XR6J961","text":"well","ts":"1466520586.000404"},{"type":"message","user":"U0XQ35CDD","text":"yeah","ts":"1466520587.000405"},{"type":"message","user":"U0XR6J961","text":"and filter yourself from rootnodes","ts":"1466520591.000406"},{"type":"message","user":"U0XR6J961","text":"then all nodes can have the same config","ts":"1466520597.000407"},{"type":"message","user":"U0UKTPMG8","text":"simple enough","ts":"1466520623.000408"},{"type":"message","user":"U0XR6J961","text":"okay, should i add to the issue that you're on it?","ts":"1466520653.000409"},{"type":"message","user":"U0UKTPMG8","text":"sure thing","ts":"1466520672.000410"},{"type":"message","user":"U0XR6J961","text":"okay, this will have to go into release and master","ts":"1466520691.000411"},{"type":"message","user":"U0XR6J961","text":"thanks!","ts":"1466520730.000412"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1466520932.000413"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> <https:\/\/github.com\/hyperledger\/fabric\/pull\/1938> this incorporates the timeout you requested if you could take a look","attachments":[{"service_name":"GitHub","title":"Ensure message order of broadcasts by jyellick \u00b7 Pull Request #1938 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1938","text":"Description This changeset modifies the obcpbft broadcast.go to always send messages in the order in which they were received. This is a companion to PR#1928 and incorporates some feedback from @...","fallback":"GitHub: Ensure message order of broadcasts by jyellick \u00b7 Pull Request #1938 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1938","thumb_width":420,"thumb_height":420,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1466521419.000414"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XQ35CDD> <@U0XR6J961> <@U0UGH3X7X> Even with the broadcast ordering fix (which helps), I'm still seeing the occasional duplicated request slip through under busywork.\n\nWhat is happening with vp0 as primary and vp1 receiving a request, is:\n\nvp1 broadcasts request A to network\nvp0,vp2 receives request A from vp1\nvp0 sends pre-prepare to network\nNetwork prepares and commits request A, including vp3\nFinally, vp3 receives broadcast of request A, which adds it to outstanding requests, and eventually gets it executed","ts":"1466521583.000416"},{"type":"message","user":"U0XPR4NP4","text":"I asked <@U0TFEHX8E> about querying the ledger for existing transaction UUIDs before ordering, but that is a DB hit, which means it may require disk IO, and is probably not something we want in our consensus path if we can avoid it.","ts":"1466521710.000417"},{"type":"message","user":"U0XPR4NP4","text":"I think it wouldn't be too difficult to hook the deduplicator code from <@U0XR6J961> which is still sitting there, to try to squash this.  I think it opens up the censorship window again, but not executing a transaction seems better than executing it twice.","ts":"1466521786.000418"},{"type":"message","user":"U0XPR4NP4","text":"This is something that I've only seen under the high load of busywork, and obviously requires some odd network latencies.  What does everyone think about what approach should be taken, and whether this is critical for 0.5","ts":"1466521865.000419"},{"type":"message","user":"U0XQ35CDD","text":"if we keep track of the last X (10? 50?) requests executed, would that mitigate the problem? and if the answer is yes, can we  store these requests in a data structure without O(n) search times? (which I think was Simon's original concern)","ts":"1466522184.000420"},{"type":"message","user":"U0XR6J961","text":"who needs to deduplicate, that's the question","ts":"1466522522.000421"},{"type":"message","user":"U0XPR4NP4","text":"So, I did implement that list last night as a \"will this work\", and the short answer is \"generally yes\".  The thing I dislike about it though, is that you're basically just making an unlikely event less likely, not completely eliminating it.  Maybe that's good enough, especially as ultimately, it seems like the chaincode\/crypto layer will need to defend against more malicious replay.","edited":{"user":"U0XPR4NP4","ts":"1466522553.000000"},"ts":"1466522539.000422"},{"type":"message","user":"U0XR6J961","text":"and i think the answer is: everybody, and during pre-prepare","ts":"1466522548.000423"},{"type":"message","user":"U0XR6J961","text":"and this is something that security needs to do","ts":"1466522584.000425"},{"type":"message","user":"U0XR6J961","text":"because these occasional duplications right now are because of our code","ts":"1466522612.000426"},{"type":"message","user":"U0XR6J961","text":"but any byzantine actor could resubmit requests at will","ts":"1466522631.000427"},{"type":"message","user":"U0XPR4NP4","text":"Right.  We could certainly check the DB before accepting any request for ordering (either accepting a pre-prepare, or sending one), but obviously that slows us down, and as we talk of splitting the consensus network from the endorsers and actual ledger, that becomes even more expensive.","ts":"1466522727.000428"},{"type":"message","user":"U0XR6J961","text":"we really need to fuse batch and core","ts":"1466522730.000429"},{"type":"message","user":"U0XPR4NP4","text":"Agreed","ts":"1466522739.000430"},{"type":"message","user":"U0XR6J961","text":"how does pbft solve this?","ts":"1466522799.000431"},{"type":"message","user":"U0XPR4NP4","text":"I think PBFT assumes that broadcasts are atomic","ts":"1466522816.000432"},{"type":"message","user":"U0XPR4NP4","text":"Or, at least that messages arrive in the order in which they were sent","ts":"1466522845.000433"},{"type":"message","user":"U0XPR4NP4","text":"(across nodes)","ts":"1466522853.000434"},{"type":"message","user":"U0XR6J961","text":"so how come vp3 receives them in a different order?","ts":"1466522912.000435"},{"type":"message","user":"U0XR6J961","text":"the broadcaster issue?","ts":"1466522919.000436"},{"type":"message","user":"U0XPR4NP4","text":"Before the patch to the broadcaster, it was much more common","ts":"1466522969.000437"},{"type":"message","user":"U0XR6J961","text":"so why is it still possible at all?","ts":"1466523023.000438"},{"type":"message","user":"U0XPR4NP4","text":"The promise we get is that: \"Messages sent by one node to another will arrive in the order they were sent\", and my suspicion is that PBFT is assuming \"A message sent in response to a broadcast, will arrive after the broadcast has been received by all nodes\"","ts":"1466523048.000439"},{"type":"message","user":"U0XPR4NP4","text":"This is possible, because vp3 can commit a request without receiving any messages from vp1","ts":"1466523090.000440"},{"type":"message","user":"U0XR6J961","text":"well that is silly","ts":"1466523093.000441"},{"type":"message","user":"U0XR6J961","text":"that assumption","ts":"1466523104.000442"},{"type":"message","user":"U0XPR4NP4","text":"Maybe that assumption isn't really there, I am looking at the paper now","ts":"1466523126.000443"},{"type":"message","user":"U0XR6J961","text":"oh!","ts":"1466523148.000444"},{"type":"message","user":"U0XR6J961","text":"ha!","ts":"1466523149.000445"},{"type":"message","user":"U0XR6J961","text":"or not?","ts":"1466523153.000446"},{"type":"message","user":"U0XR6J961","text":"does the primary include the request in the pre-prepare?","ts":"1466523166.000447"},{"type":"message","user":"U0XR6J961","text":"i think it does","ts":"1466523185.000448"},{"type":"message","user":"U0XR6J961","text":"and we did that, because otherwise replicas would discard pre-prepares if they didn't have a matching request","ts":"1466523218.000449"},{"type":"message","user":"U0XPR4NP4","text":"It may be the timestamp deduplication","ts":"1466523264.000450"},{"type":"message","user":"U0XPR4NP4","text":"Ah, yes, that's true","ts":"1466523276.000451"},{"type":"message","user":"U0XR6J961","text":"so if we take that out","ts":"1466523287.000452"},{"type":"message","user":"U0XR6J961","text":"then vp3 would discard pre-prepare, and immediatelly get left behind","ts":"1466523316.000453"},{"type":"message","user":"U0XR6J961","text":"that's silly","ts":"1466523318.000454"},{"type":"message","user":"U0XR6J961","text":"so we'd have to queue messages","ts":"1466523327.000455"},{"type":"message","user":"U0XPR4NP4","text":"Yes, we would be trading one problem for another","ts":"1466523329.000456"},{"type":"message","user":"U0XR6J961","text":"and possibly fetch the request","ts":"1466523339.000457"},{"type":"message","user":"U0XR6J961","text":"but it would reduce the amount of work the primary has to do","ts":"1466523357.000458"},{"type":"message","user":"U0XR6J961","text":"well, network IO","ts":"1466523385.000459"},{"type":"message","user":"U0XR6J961","text":"completely impossible to reason about this","ts":"1466523394.000460"},{"type":"message","user":"U0XPR4NP4","text":"But this doesn't really solve the duplication issue.  I think that it's got to be the timestamping.  PBFT wants the client to broadcast requests with incrementing timestamps","ts":"1466523405.000461"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1466523411.000462"},{"type":"message","user":"U0XR6J961","text":"but then request can get lost","ts":"1466523421.000463"},{"type":"message","user":"U0XPR4NP4","text":"Yes","ts":"1466523434.000464"},{"type":"message","user":"U0XR6J961","text":"if they are submitted concurrently","ts":"1466523435.000465"},{"type":"message","user":"U0XPR4NP4","text":"Exactly, or, the byzantine primary can always pick the highest timestamp to order first, censoring all previous requests","ts":"1466523467.000466"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1466523476.000467"},{"type":"message","user":"U0XPR4NP4","text":"\"Additionally, replicas need to remember the 8-byte timestamp of the last request executed by each client to  ensure exactly once semantics. But since timestamps are small and timestamps of inactive clients can be stored on disk, this should not cause a significant scalability problem.\"","ts":"1466523603.000468"},{"type":"message","user":"U0XPR4NP4","text":"I guess the idea is that clients are supposed to wait for a reply before submitting a new request","ts":"1466523618.000469"},{"type":"message","user":"U0XPR4NP4","text":"It seems like that would lower throughput, but we could certainly implement it as such.","ts":"1466523639.000470"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1466524055.000471"},{"type":"message","user":"U0XR6J961","text":"that's what i had","ts":"1466524058.000472"},{"type":"message","user":"U0XR6J961","text":"ah, executed","ts":"1466524074.000473"},{"type":"message","user":"U0XR6J961","text":"so that would have to come from the ledger then","ts":"1466524083.000474"},{"type":"message","user":"U0XR6J961","text":"because on state transfer, consensus loses that information","ts":"1466524098.000475"},{"type":"message","user":"U0XPR4NP4","text":"Yes","ts":"1466524111.000476"},{"type":"message","user":"U0XR6J961","text":"so i think we should declare this a problem of some other part of the stack","ts":"1466524114.000477"},{"type":"message","user":"U0XR6J961","text":"which it is.","ts":"1466524118.000478"},{"type":"message","user":"U0XR6J961","text":"if somebody before consensus replays the transaction, we can't do anything about it","ts":"1466524143.000479"},{"type":"message","user":"U0XPR4NP4","text":"So I think the reply you'll here, is that \"we should not order transactions which are expected to fail\"","ts":"1466524222.000480"},{"type":"message","user":"U0XPR4NP4","text":"But I think if we ever want to achieve truly high throughput, we really need to not perform a ton of introspection on requests.  I would reply with \"Who cares about the validity of what comes out of consensus, so long as everyone agrees on the contents and the order\"","ts":"1466524336.000481"},{"type":"message","user":"U0XR6J961","text":"hm","ts":"1466524370.000482"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: Did you have a chance to review the broadcast changes?","ts":"1466524824.000483"},{"type":"message","user":"U0XR6J961","text":"jyellick: you around?","ts":"1466603344.000484"},{"type":"message","user":"U0XPR4NP4","text":"I am","ts":"1466603351.000485"},{"type":"message","user":"U0XR6J961","text":"i'm looking at some traces from <#C113WK2A1>","ts":"1466603508.000486"},{"type":"message","user":"U0XR6J961","text":"first, we need to drop requests","ts":"1466603522.000487"},{"type":"message","user":"U0XR6J961","text":"people submit 1000s of requests per second...","ts":"1466603546.000488"},{"type":"message","user":"U0XPR4NP4","text":"Yes, completely agree","ts":"1466603551.000489"},{"type":"message","user":"U0XPR4NP4","text":"But we need a way to signal rejection","ts":"1466603566.000490"},{"type":"message","user":"U0XR6J961","text":"second, i see a request being re-queued","ts":"1466603568.000491"},{"type":"message","user":"U0XR6J961","text":"but i never see it being added in the first place","ts":"1466603585.000492"},{"type":"message","user":"U0XPR4NP4","text":"I'm not sure what you mean","ts":"1466603596.000493"},{"type":"message","user":"U0XR6J961","text":"how is that possible?","ts":"1466603597.000494"},{"type":"message","user":"U0XR6J961","text":"`ESC[36m11:00:01.440 [consensus\/obcpbft] leaderProcReq -&gt; DEBU 12e07aESC[0m Batch primary 0 queueing new request qqlXTMDzm805n6gLNiVkjHKC2d\/5Nji7qxZ3iuWV+fcwx9u\/nRtoiJXqvI4RxSyxqAcihidLrbAILI9MrLWCKQ== `","ts":"1466603615.000495"},{"type":"message","user":"U0XR6J961","text":"but i never see this request being added to the outstanding request store before?","ts":"1466603640.000496"},{"type":"message","user":"U0XPR4NP4","text":"Yes, the ingress path is slightly different for the leader which we may want to fix.","ts":"1466603709.000497"},{"type":"message","user":"U0XR6J961","text":"`ESC[36m11:04:25.054 [consensus\/obcpbft] startTimer -&gt; DEBU 2c2fe3ESC[0m Replica 0 starting new view timer for -1012918h58m43.28654848s: new view change`","ts":"1466603709.000498"},{"type":"message","user":"U0XR6J961","text":"LOL","ts":"1466603711.000499"},{"type":"message","user":"U0XPR4NP4","text":"Oops... that seems like a bug","ts":"1466603728.000500"},{"type":"message","user":"U0XR6J961","text":"i'm tempted to set K&amp;L=1","ts":"1466603775.000501"},{"type":"message","user":"U0XR6J961","text":"and basically disable parallelism","ts":"1466603785.000502"},{"type":"message","user":"U0XR6J961","text":"and instead use batches","ts":"1466603797.000503"},{"type":"message","user":"U0XR6J961","text":"that thing probably has absorbed  a million requests, but didn't advance past h=10","ts":"1466603841.000504"},{"type":"message","user":"U0XPR4NP4","text":"When the leader receives a request from a backup, it immediately adds it to the current batch, and shortly thereafter sends it off to PBFT.  The leader doesn't add it to outstanding requests in this path, but probably should.  The counter argument is that it's a nonbyzantine primary, so why bother tracking it, it has submitted it appropriately for ordering.","ts":"1466603864.000505"},{"type":"message","user":"U0XR6J961","text":"so that if something happens and there is a view change, it can complain about the new primary?","ts":"1466603920.000506"},{"type":"message","user":"U0XPR4NP4","text":"But, it will lead to warning messages that it is executing stuff not in its outstanding requests","ts":"1466603920.000507"},{"type":"message","user":"U0XR6J961","text":"i don't know","ts":"1466603923.000508"},{"type":"message","user":"U0XPR4NP4","text":"I think it's a bug, it should be fixed","ts":"1466603930.000509"},{"type":"message","user":"U0XR6J961","text":"ah hm, out of sequence numbers","ts":"1466603956.000510"},{"type":"message","user":"U0XR6J961","text":"could it be that we cannot include a null request sequence number on view change?","ts":"1466603970.000511"},{"type":"message","user":"U0XR6J961","text":"ah no, we don't have to include a null request","ts":"1466603987.000512"},{"type":"message","user":"U0XR6J961","text":"okay, we first need a way to reject this amount of requests","ts":"1466604057.000513"},{"type":"message","user":"U0XR6J961","text":"because the traces we get that way are completely useless","ts":"1466604072.000514"},{"type":"message","user":"U0XR6J961","text":"so i think we need to ration the number of requests any replica can have outstanding","ts":"1466604096.000515"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I think so too","ts":"1466604108.000516"},{"type":"message","user":"U0XPR4NP4","text":"To do that we need to differentiate incoming transactions from consensus messages.  The problem we have today is that it all comes through RecvMsg, and by the time our thread gets a chance to look at it, we've already accepted it.","ts":"1466604138.000517"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1466604172.000518"},{"type":"message","user":"U0XPR4NP4","text":"I think consensus messages, which will be dropped if they come in too fast via the buffered channel sitting in front of them, should continue to be accepted the way they are today.","ts":"1466604172.000519"},{"type":"message","user":"U0XR6J961","text":"well no, we could return an error in recvmsg","ts":"1466604187.000520"},{"type":"message","user":"U0XPR4NP4","text":"New incoming chain transactions should come in via another call which returns an error if there are more than X outstanding.","ts":"1466604190.000521"},{"type":"message","user":"U0XR6J961","text":"which will be passed back to the rest","ts":"1466604192.000522"},{"type":"message","user":"U0XPR4NP4","text":"We could.  I dislike the idea of doing logic in RecvMsg though.","ts":"1466604221.000523"},{"type":"message","user":"U0XR6J961","text":"but yea, we should split the interface","ts":"1466604233.000524"},{"type":"message","user":"U0XR6J961","text":"like i did months ago","ts":"1466604239.000525"},{"type":"message","user":"U0XR6J961","text":"request and receive","ts":"1466604247.000526"},{"type":"message","user":"U0XR6J961","text":"that won't protect us against a byzantine replica just blasting out requests","ts":"1466604271.000527"},{"type":"message","user":"U0XR6J961","text":"but there it is more difficult to protect against","ts":"1466604336.000528"},{"type":"message","user":"U0XPR4NP4","text":"Ah! So I had an idea about this that I was discussing a bit with <@U0XQ35CDD>","ts":"1466604357.000529"},{"type":"message","user":"U0XPR4NP4","text":"The original PBFT design calls for clients to submit a request, and wait for the result before submitting a new request.  This fixes the censorship problem, but really poses a significant throughput problem per client.  The problem is amplified in the fabric, because only replicas are clients, so, if you followed that model strictly.  You could only ever have up to n requests outstanding.","ts":"1466604480.000530"},{"type":"message","user":"U0XPR4NP4","text":"So, my thought was, this 'submit one and wait' model should be the goal, because it's been formally proven to be valid.  What we could do though, is basically have up to 'm' slots per replica for outstanding requests, say, for instance 10.  When vp1 receives a request, it first checks to see if it has any unoccupied request slots, if so, it picks one, and broadcasts the request to the network, indicating that this new request should be assigned to slot 2 (for instance).  The network then stores this request as the outstanding request from vp1's slot 2, and waits for the request to be executed.  Once executed, that slot is freed, and a new request may be submitted for that slot.","ts":"1466604712.000531"},{"type":"message","user":"U0XPR4NP4","text":"The primary cannot censor any request, because each slot is being monitored for censorship.  You could essentially think of it like 'virtual clients'.","ts":"1466604789.000532"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1466604904.000533"},{"type":"message","user":"U0XPR4NP4","text":"If a replica sent a request for a slot that was already occupied, the slot can be safely overridden (assuming the timestamp has incremented), because the sending replica will only do this once it's confident that that request has been submitted for ordering.","ts":"1466604910.000534"},{"type":"message","user":"U0XR6J961","text":"do we only allow one outstanding request per virtual client?","ts":"1466604932.000535"},{"type":"message","user":"U0XPR4NP4","text":"Yes","ts":"1466604936.000536"},{"type":"message","user":"U0XR6J961","text":"aha","ts":"1466604943.000537"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1466604944.000538"},{"type":"message","user":"U0XR6J961","text":"so this is just for tracking","ts":"1466604948.000539"},{"type":"message","user":"U0XR6J961","text":"nice","ts":"1466604949.000540"},{"type":"message","user":"U0XR6J961","text":"so submission overrides","ts":"1466604965.000541"},{"type":"message","user":"U0XR6J961","text":"but that is equivalent to just giving a replica a list of 10 outstanding requests, no?","ts":"1466604985.000542"},{"type":"message","user":"U0XR6J961","text":"if it proposes a new one, the oldest one is discarded","ts":"1466604999.000543"},{"type":"message","user":"U0XPR4NP4","text":"Ah, not the oldest one","ts":"1466605010.000544"},{"type":"message","user":"U0XR6J961","text":"it doesn't prevent the massive submission of requests though","ts":"1466605014.000545"},{"type":"message","user":"U0XPR4NP4","text":"When it proposes a new one, by including the slot number, it indicates which old one should be discarded.","ts":"1466605035.000546"},{"type":"message","user":"U0XPR4NP4","text":"If you simply discard the oldest, then the primary may censor, by never ordering the oldest","ts":"1466605056.000547"},{"type":"message","user":"U0XPR4NP4","text":"A replica could send you a flood of requests, but it would essentially be censoring itself, because the requests would be overwritten before they had been ordered.","ts":"1466605209.000548"},{"type":"message","user":"U0XR6J961","text":"well","ts":"1466605354.000549"},{"type":"message","user":"U0XR6J961","text":"what if it waits for a pre-prepare","ts":"1466605361.000550"},{"type":"message","user":"U0XR6J961","text":"and then sends again","ts":"1466605366.000551"},{"type":"message","user":"U0XPR4NP4","text":"I think it needs to wait for a prepare quorum cert before it can be confident that the request won't be censored","ts":"1466605385.000552"},{"type":"message","user":"U0XR6J961","text":"it could sort of game the system","ts":"1466605385.000553"},{"type":"message","user":"U0XR6J961","text":"but not too much","ts":"1466605390.000554"},{"type":"message","user":"U0XR6J961","text":"yes, but typically requests don't get censored","ts":"1466605398.000555"},{"type":"message","user":"U0XR6J961","text":"but if the number of outstanding requests is less than the batch size, it will have to wait for batch creation","ts":"1466605420.000556"},{"type":"message","user":"U0XPR4NP4","text":"I guess I don't really see 'sending too many requests' as abusive, so long as they are all getting processed.  We want to make sure requests are not censored.  I guess you could argue that one replica getting an unfair proportion of requests through is almost like censorship.","ts":"1466605529.000557"},{"type":"message","user":"U0XR6J961","text":"oh i don't care about censorship","ts":"1466605582.000558"},{"type":"message","user":"U0XPR4NP4","text":"If we wanted to get really clever, we could keep a counter of the number of pending requests per replica, and use that as a weight when picking which replica's request to order next.  But I'm not really convinced that this is a problem yet.","ts":"1466605583.000559"},{"type":"message","user":"U0XR6J961","text":"right now","ts":"1466605587.000560"},{"type":"message","user":"U0XR6J961","text":"i care about limiting number of requests being ingressed by the system","ts":"1466605599.000561"},{"type":"message","user":"U0XPR4NP4","text":"I agree a peer could cheat a little by sending new requests once it sees its own in a pre-prepare, but I don't know that this really buys them much.  Unless the outstanding size is greater than the batch size, it cannot use this to prevent other requests from executing.","ts":"1466605678.000562"},{"type":"message","user":"U0XR6J961","text":"yes, right now i'm just worried about system overload","ts":"1466605929.000563"},{"type":"message","user":"U0XPR4NP4","text":"Ah, okay. So, I think this helps to keep another replica from sending you a ton of requests and overloading the system, but obviously it does nothing to address something like the REST API from flooding you with a ton of requests.","ts":"1466605969.000564"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1466605979.000565"},{"type":"message","user":"U0XR6J961","text":"it's a two step thing","ts":"1466605983.000566"},{"type":"message","user":"U0XR6J961","text":"correct client rejecting extra requests","ts":"1466605990.000567"},{"type":"message","user":"U0XR6J961","text":"and system protecting against byzantine flooding peers","ts":"1466606017.000568"},{"type":"message","user":"U0XR6J961","text":"i'll head outside to catch some (rare) sun","ts":"1466606054.000569"},{"type":"message","user":"U0XR6J961","text":"after that i will integrate the telemetry stuff","ts":"1466606062.000570"},{"type":"message","user":"U0XR6J961","text":"so that we can start seeing drops and queue sizes","ts":"1466606085.000571"},{"type":"message","user":"U0XR6J961","text":"then we split the recvmsg path","ts":"1466606096.000572"},{"type":"message","user":"U0XPR4NP4","text":"Sounds good, I may not get around to it today, but I can work on the 'virtual client' stuff","ts":"1466606123.000573"},{"type":"message","user":"U0XPR4NP4","text":"Assuming you're on board","ts":"1466606131.000574"},{"type":"message","user":"U0XR6J961","text":"it's just a fixed array, no?","ts":"1466606140.000575"},{"type":"message","user":"U0XPR4NP4","text":"Yep, I don't anticipate it will be horribly complicated","ts":"1466606152.000576"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1466606155.000577"},{"type":"message","user":"U0XR6J961","text":"what do think needs to be done for the release?","ts":"1466606167.000578"},{"type":"message","user":"U0XR6J961","text":"i don't think we can get this limiting done","ts":"1466606173.000579"},{"type":"message","user":"U0XPR4NP4","text":"For 0.5?","ts":"1466606182.000580"},{"type":"message","user":"U0XR6J961","text":"well, urgent stuff","ts":"1466606224.000581"},{"type":"message","user":"U0XPR4NP4","text":"There were the three PRs I submitted yesterday, adding back in the deduplication, the view change resend, and the broadcaster ordering.  The peer bouncing reeconnect stuff I think <@U0XQ35CDD> has a handle on.  Those were the only big outstanding things I was aware of.  Certainly we need to rate limit incoming transactions, you can kill the system just by submitting too many transactions, but I don't think that fits.","ts":"1466606331.000582"},{"type":"message","user":"U0UGH3X7X","text":"so for 0.5  , fixes for #1874, bishop's #1857","ts":"1466606452.000583"},{"type":"message","user":"U0XR6J961","text":"74 is handled by jeff and kostas, 57 - jason?","ts":"1466606492.000584"},{"type":"message","user":"U0UGH3X7X","text":"1857 jason's PRs, yes","ts":"1466606522.000585"},{"type":"message","user":"U0UGH3X7X","text":"plus  if scottz and co. find any regressions but that would be case by case","ts":"1466606606.000586"},{"type":"message","user":"U0XPR4NP4","text":"As best as I can tell 1857 is fixed.  The caveat is that sometimes, there will be a failure if null requests are not enabled (and not a true failure by pbft definitions, just by people's expectations)","ts":"1466606631.000587"},{"type":"message","user":"U0XR6J961","text":"great","ts":"1466606644.000588"},{"user":"U1KC1TAHE","type":"message","subtype":"channel_join","text":"<@U1KC1TAHE|brendan> has joined the channel","ts":"1466624539.000589"},{"type":"message","user":"U0XQ35CDD","text":"just catching up on this thread -- I'm a fan of the virtual clients idea","edited":{"user":"U0XQ35CDD","ts":"1466633655.000000"},"ts":"1466633524.000590"},{"user":"U1CPB11D0","type":"message","subtype":"channel_join","text":"<@U1CPB11D0|dianfu> has joined the channel","ts":"1466638933.000594"},{"type":"message","user":"U142E5N0P","text":"This is the pipelining support for Raft, could pbft be modified to support pipeling as well such that the throughput could be improved?\n\n```\nPipelining is also well-supported by Raft. The AppendEntries consistency check guarantees that pipelining is safe; in fact, the leader can safely send entries in any order. To support pipelining, the leader treats the next index for each follower optimistically; it updates the next index to send immediately after sending the previous entry, rather than waiting for the previous entry\u2019s acknowl- edgment. This allows another RPC to pipeline the next entry behind the previous one. Bookkeeping is a bit more involved if RPCs fail. If an RPC times out, the leader must decrement its next in- dex back to its original value to retry. If the AppendEntries consistency check fails, the leader may decrement the next index even further to retry sending the prior entry, or it may wait for that prior entry to be acknowledged and then try again. Even with this change, LogCabin\u2019s original threading architecture still prevented pipelining because it could only support one RPC per follower; thus, we changed it to spawn multiple threads per peer instead of just one.\n```","ts":"1466670751.000597"},{"type":"message","user":"U0XR6J961","text":"yingfeng: pbft uses pipelining","ts":"1466678723.000598"},{"type":"message","user":"U0XR6J961","text":"yingfeng: thoughput is limited by chaincode execution, not by pbft","ts":"1466678768.000599"},{"type":"message","user":"U1CK6522F","text":"simon: do you know why the chaincode execution should be done one after another? Could you site any paper to me to get a fully understand? Thank you very much!","ts":"1466679256.000600"},{"type":"message","user":"U142E5N0P","text":"simon: do you mean chaincode execution is the bottleneck? then why single peer node without p2p will have a much higher tps? i think it should because of the sequential execution that has lead to the blocking between two batches","ts":"1466680019.000601"},{"type":"message","user":"U0XR6J961","text":"it does?","ts":"1466680865.000602"},{"type":"message","user":"U0XQ35CDD","text":"Going back to the conversation about locally generated requests versus external ones and the issue of fairness (let's set aside pacing for now). If I'm parsing the path correctly, a request generated locally via the REST API will essentially take a shortcut to the consenter's `RecvMsg()` method. The external request, on the contrary, gets there via the goroutine who services the gRPC connection with the submitting replica, who adds it to the handler's `consenterChan`, where another goroutine will pick it up from and add it to the consenter's `out` channel, where the goroutine that was spawned in the `GetEngine` constructor will pick it up and pass it on to `RecvMsg()`. At any rate, in `RecvMsg()`, both the REST thread (that serves the locally generated request) and the goroutine spawned in `GetEngine` (serving the external request) try to add their respective requests to the unbuffered `events` channel of the manager in `obcpbft` for processing.","ts":"1466699884.000603"},{"type":"message","user":"U0XQ35CDD","text":"_If_ the paths are right, can we make any claims on lack of fairness? I don't quite see it.","ts":"1466700000.000604"},{"type":"message","user":"U0XPR4NP4","text":"I don't think there is a fairness problem there.  The fairness problem would arise only if we split the `RecvMsg` into `RecvConsensus` and `RecvLocalTran` and prioritized the `RecvConsensus` over `RecvLocalTran`.  But, if instead we make them equal priority when there is room in our outstanding reqs, and otherwise ignore `RecvLocalTran` I think we're fine.","ts":"1466700821.000605"},{"type":"message","user":"U0XQ35CDD","text":"Why would we ignore `RecvLocalTran()` when `outstandingReqs` is full, and not keep them at the same priority?","edited":{"user":"U0XQ35CDD","ts":"1466701063.000000"},"ts":"1466701055.000606"},{"type":"message","user":"U0XPR4NP4","text":"It would be when `localOutstandingReqs` is full, so that we can provide backpressure to the invoker.  Because it is only based on our own requests, we cannot be spammed by the network into ignoring local invokes.","edited":{"user":"U0XPR4NP4","ts":"1466701573.000000"},"ts":"1466701510.000608"},{"type":"message","user":"U0XQ35CDD","text":"I do not follow, and that is because you're switching to a different model and I don't think we have the same set of assumptions in mind.","ts":"1466701707.000610"},{"type":"message","user":"U0XQ35CDD","text":"Let's discuss how the `localOutstandingReqs` structure will be used for instance.","ts":"1466701758.000611"},{"type":"message","user":"U0XQ35CDD","text":"A locally generated request gets routed to `RecvLocalTran`, and is then placed to a finite-size `localOutstandingReqs`.","ts":"1466701850.000612"},{"type":"message","user":"U0XPR4NP4","text":"If there is no room in that structure, that call blocks until there is","ts":"1466701872.000613"},{"type":"message","user":"U0XPR4NP4","text":"(Or, blocks and times out, or returns an error on block, whatever defined behavior we want)","ts":"1466701901.000614"},{"type":"message","user":"U0XQ35CDD","text":"If there is room, the request is added there, sure. Do you then assume a separate goroutine that attempts to pick it up and pass it on to the manager's queue?","edited":{"user":"U0XQ35CDD","ts":"1466702332.000000"},"ts":"1466702187.000615"},{"type":"message","user":"U0XPR4NP4","text":"I think that would probably be the easiest way to implement it.","ts":"1466702625.000617"},{"type":"message","user":"U0XPR4NP4","text":"Additional go routines should not be problematic so long as they do not manipulate or reference PBFT internal state","ts":"1466702657.000618"},{"type":"message","user":"U0XQ35CDD","text":"&gt; But, if instead we make them equal priority when there is room in our outstanding reqs, and otherwise ignore `RecvLocalTran`","ts":"1466702713.000619"},{"user":"U150L8BDF","type":"message","subtype":"channel_join","text":"<@U150L8BDF|clessor> has joined the channel","ts":"1466702900.000620"},{"type":"message","user":"U0XQ35CDD","text":"So it's not that you ignore `RecvLocalTran`. Both the goroutine that it spawns, and the goroutine that is spawned via `RecvConsensus` always get the same treatment when it comes to adding to the manager's queue. (Whatever treatment the Go scheduler gives them, that is.) Instead, it may happen that the `RecvLocalTran` call will drop the transaction that it brings along, if the `localOutstandingReqs` store is full.","edited":{"user":"U0XQ35CDD","ts":"1466703030.000000"},"ts":"1466702970.000621"},{"type":"message","user":"U0XPR4NP4","text":"As I think about this, I might eliminate the delivery go routine, and instead, structure it as:\n\n1. REST API go routine enters `RecvLocalTran`\n2. It attempts to queue onto a buffered new tran channel of configurable size\n3. If successful, it then pushes a `newTranEvent` into the event manager\n * If  PBFT thread has a free virtual client spot, it reads a tran from the new tran channel\n * If the PFBT thread has no free virtual client spot, when one frees up, it will attempt to read from the new tran channel","edited":{"user":"U0XPR4NP4","ts":"1466703326.000000"},"ts":"1466703263.000624"},{"type":"message","user":"U0XPR4NP4","text":"Of course, if there is not room in the buffered channel, then we can do configurable behavior, either block until a timer expires, block indefinitely, or reject immediately","ts":"1466703294.000625"},{"type":"message","user":"U0XQ35CDD","text":"What is the problem that you're trying to solve?","ts":"1466703533.000628"},{"type":"message","user":"U0XQ35CDD","text":"Remember that my focus on this thread is on fairness --or lack thereof--, and the conclusion is that there is no unfairness in the existing mechanism. I take it we're switching to flow control?","ts":"1466703635.000629"},{"type":"message","user":"U0XPR4NP4","text":"Yes, this is to address flow control, not fairness","ts":"1466704053.000630"},{"text":"`git stash; git checkout flow-control`","edited":{"user":"U0XQ35CDD","ts":"1466704116.000000"},"type":"message","subtype":"me_message","user":"U0XQ35CDD","ts":"1466704099.000631"},{"type":"message","user":"U0XPR4NP4","text":"The system is 'fair' today.  The suggestion to prioritize consensus messages over local trans, as a mechanism of flow control, exposes the possible lack of fairness.  The proposal above adds flow control while maintaining fairness.","ts":"1466704117.000633"},{"type":"message","user":"U0XQ35CDD","text":"That works for me. The proposal make sense.","edited":{"user":"U0XQ35CDD","ts":"1466704910.000000"},"ts":"1466704635.000634"},{"type":"message","user":"U0TFEHX8E","text":"<@U0XPR4NP4>:  I\u2019m assuming <https:\/\/github.com\/hyperledger\/fabric\/pull\/1928> is still in progress. Is that correct?","attachments":[{"service_name":"GitHub","title":"Ensure message order of broadcasts by jyellick \u00b7 Pull Request #1928 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1928","text":"Description This changeset modifies the obcpbft broadcast.go to always send messages in the order in which they were received. As @corecode was the original author of the broadcast.go his review ...","fallback":"GitHub: Ensure message order of broadcasts by jyellick \u00b7 Pull Request #1928 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1928","thumb_width":420,"thumb_height":420,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1466710791.000636"},{"type":"message","user":"U0XPR4NP4","text":"I think it's good to go... the exact same changeset was already merged into 0.5 I believe","edited":{"user":"U0XPR4NP4","ts":"1466710905.000000"},"ts":"1466710835.000638"},{"type":"message","user":"U0XPR4NP4","text":"<@U0TFEHX8E>: ^","ts":"1466710966.000642"},{"type":"message","user":"U0TFEHX8E","text":"ok, so that dangling conversation is taken care of?","ts":"1466711008.000643"},{"type":"message","user":"U0UGH3X7X","text":"<@U0TFEHX8E>,  PR #1971 should be labeled as 0.5","ts":"1466711057.000644"},{"type":"message","user":"U0XPR4NP4","text":"<@U0TFEHX8E>: Yes, that PR was paired with one that was merged into 0.5 that the conversation continued on, I added a reply to that effect.","ts":"1466711319.000645"},{"type":"message","user":"U0TFEHX8E","text":"thanks!","ts":"1466711331.000646"},{"type":"message","user":"U0XPR4NP4","text":"Thank you","ts":"1466711364.000647"},{"type":"message","user":"U0UGH3X7X","text":"<@U0XPR4NP4>:   can you take a look at #1942 ?   behave test is in one of the comments ...  i thought nullrequest=1s cleared it but it's behaving differently today.  also changing  k=10 also seems to trigger something  ...  looks like some number of requests are being duplicated","ts":"1466712512.000648"},{"type":"message","user":"U0XPR4NP4","text":"Sure, I will take a look, got a few other things pending, so may be a few minutes, but I will get to it","ts":"1466712596.000649"},{"type":"message","user":"U0UGH3X7X","text":"danke !","ts":"1466712625.000650"},{"type":"message","user":"U0TFEHX8E","text":"<@U0XPR4NP4>: Just had build fail on the master branch after <https:\/\/github.com\/hyperledger\/fabric\/pull\/1928>","ts":"1466713515.000651"},{"type":"message","user":"U0TFEHX8E","text":"<https:\/\/travis-ci.org\/hyperledger\/fabric\/builds\/139861185>","ts":"1466713527.000652"},{"type":"message","user":"U0XPR4NP4","text":"Looking...","ts":"1466713542.000653"},{"type":"message","user":"U0TFEHX8E","text":"Raw log link <https:\/\/s3.amazonaws.com\/archive.travis-ci.org\/jobs\/139861187\/log.txt>","ts":"1466713623.000654"},{"type":"message","user":"U0XPR4NP4","text":"Running the tests locally off my branch to see if I can reproduce","ts":"1466713654.000655"},{"type":"message","user":"U0TFEHX8E","text":"It wasn\u2019t there when Travis ran against the PR","ts":"1466713720.000656"},{"type":"message","user":"U0XPR4NP4","text":"They pass in my local non-merged branch","ts":"1466713724.000657"},{"type":"message","user":"U0XPR4NP4","text":"Fetching upstream to try again","edited":{"user":"U0XPR4NP4","ts":"1466713773.000000"},"ts":"1466713730.000658"},{"type":"message","user":"U0TFEHX8E","text":"It looks like that test case already passed in the next master branch build <https:\/\/travis-ci.org\/hyperledger\/fabric\/builds\/139861848> so the error is not consistent","ts":"1466713792.000660"},{"type":"message","user":"U0XPR4NP4","text":"Ah, I see the bug","ts":"1466713911.000661"},{"type":"message","user":"U0XPR4NP4","text":"This should definitely be fixed, I imagine this could occur in production","ts":"1466713922.000662"},{"type":"message","user":"U0TFEHX8E","text":"you want me to open an issue?","ts":"1466713933.000663"},{"type":"message","user":"U0XPR4NP4","text":"Actually...  this may be less serious than I thought, but obviously should be fixed","ts":"1466713969.000664"},{"type":"message","user":"U0XPR4NP4","text":"Yeah, this could cause a crash at startup","ts":"1466714037.000665"},{"type":"message","user":"U0XPR4NP4","text":"Easy verifiable fix, I can turn it around in 10 minutes","ts":"1466714051.000666"},{"type":"message","user":"U0TFEHX8E","text":"<https:\/\/github.com\/hyperledger\/fabric\/issues\/1978>","attachments":[{"service_name":"GitHub","title":"Concurrent map read and map write crash during \u00b7 Issue #1978 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/issues\/1978","text":"Description Failed build Raw log Describe How to Reproduce Seen while running <http:\/\/github.com\/hyperledger\/fabric\/consensus\/obcpbft|github.com\/hyperledger\/fabric\/consensus\/obcpbft> unit test. The error is not consistent. fatal error: concurrent...","fallback":"GitHub: Concurrent map read and map write crash during \u00b7 Issue #1978 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars1.githubusercontent.com\/u\/4872087?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/issues\/1978","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1466714247.000667"},{"type":"message","user":"U0XPR4NP4","text":"Thanks","ts":"1466714400.000669"},{"type":"message","user":"U0XPR4NP4","text":"<https:\/\/github.com\/hyperledger\/fabric\/pull\/1979>","attachments":[{"service_name":"GitHub","title":"Eliminate possible broadcaster concurrent map read\/write by jyellick \u00b7 Pull Request #1979 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1979","text":"Description This changeset waits to start the broadcaster go routines until after the map they read from has been initialized. It also eliminates a constant map lookup inside a for loop which is ...","fallback":"GitHub: Eliminate possible broadcaster concurrent map read\/write by jyellick \u00b7 Pull Request #1979 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1979","thumb_width":420,"thumb_height":420,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1466714529.000670"},{"type":"message","user":"U0XPR4NP4","text":"<https:\/\/github.com\/hyperledger\/fabric\/pull\/1980>","attachments":[{"service_name":"GitHub","title":"Eliminate possible broadcaster concurrent map read\/write by jyellick \u00b7 Pull Request #1980 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1980","text":"Description This changeset waits to start the broadcaster go routines until after the map they read from has been initialized. It also eliminates a constant map lookup inside a for loop which is ...","fallback":"GitHub: Eliminate possible broadcaster concurrent map read\/write by jyellick \u00b7 Pull Request #1980 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/1980","thumb_width":420,"thumb_height":420,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1466714994.000672"},{"type":"message","user":"U0XPR4NP4","text":"<@U0TFEHX8E>: Those are for master and v05 respectively","ts":"1466715006.000674"},{"type":"message","user":"U0XPR4NP4","text":"And, my apologies, despite what I had just told you about 1928, when I tried to cherry pick the commit in, I noticed that apparently one of the broadcaster commits that made it into 0.5 did not make it into the 1928 PR, so, I just added it back in to 1979.","ts":"1466715262.000675"},{"type":"message","user":"U0TFEHX8E","text":"np","ts":"1466715415.000676"},{"type":"message","user":"U0XPR4NP4","text":"<@U0UGH3X7X>: Does one of the 1942 behave tests reproduce the issue?","ts":"1466716314.000677"},{"type":"message","user":"U0UGH3X7X","text":"leticia provided a behave test in #1942","ts":"1466716411.000678"},{"type":"message","user":"U0UGH3X7X","text":"`lhaskins`  comment timestamped \"2 days ago\"","ts":"1466716445.000679"},{"type":"message","user":"U0UGH3X7X","text":"yesterday, this behave test worked with core_pbft_general_timeout_nullrequests=1s , today, it's been inconsistent.   I also tried K = 2 or 10,  sometimes when K=2 it'll work","ts":"1466716588.000680"},{"type":"message","user":"U0XPR4NP4","text":"<@U0UGH3X7X>: I may see what's going on here, verifying","ts":"1466718940.000681"},{"type":"message","user":"U142E5N0P","text":"One of major engineering optimization of `raft` is to execute message sending and persistence in parallel. This could be seen from section `10.2.1` of [Ongaro's thesis](<https:\/\/ramcloud.stanford.edu\/~ongaro\/thesis.pdf>) .  During the code inspection, I've found there exists many data persistences during each step of consensus, including `recvRequest`, `sendPrePrepare`,`sendPrepare`,`maybeSendcommit`.  Could the persistence be refactored like the design of `raft` to improve the overall throughput?","ts":"1466754986.000684"},{"type":"message","user":"U0XV1HDL3","text":"<@U142E5N0P>: Remember we want to tolerate \"byzantine\" faults. Raft tolerates crashes. It is an interesting problem to find more efficient BFT protocols than PBFT, but there is no BFT version of Raft. (Yes I am aware there is a term paper with a protocol sketch titled BFT-Raft somewhere, but we are interested in protocols whose correctness is widely accepted.)","ts":"1466759685.000685"},{"type":"message","user":"U142E5N0P","text":"<@U0XV1HDL3>:  I mentioned Raft here because I wonder if its existing engineering optimization could be applied to PBFT, since current throughput is far from satisfying for our production usage.","edited":{"user":"U142E5N0P","ts":"1466761305.000000"},"ts":"1466761114.000686"},{"type":"message","user":"U0XR6J961","text":"yingfeng: please show me data that pbft is the performance bottleneck","ts":"1466763954.000689"},{"type":"message","user":"U0XR6J961","text":"yingfeng: and we do message sending and execution in parallel.","ts":"1466763999.000690"},{"type":"message","user":"U142E5N0P","text":"<@U0XR6J961> the  aim for our requirements is nearly 10k per peer node, do you think current pbft is enought to reach that aim?","edited":{"user":"U142E5N0P","ts":"1466764799.000000"},"ts":"1466764786.000691"},{"type":"message","user":"U0XR6J961","text":"no idea","ts":"1466764799.000693"},{"type":"message","user":"U0XR6J961","text":"but the chaincode execution cannot","ts":"1466764811.000694"},{"type":"message","user":"U0XR6J961","text":"the absolute maximum i could observe was 800tx\/sec","ts":"1466764827.000695"},{"type":"message","user":"U0XR6J961","text":"with a null chaincode","ts":"1466764835.000696"},{"type":"message","user":"U0XR6J961","text":"with example02 i could get 400 i think","ts":"1466764847.000697"},{"type":"message","user":"U0XR6J961","text":"so no","ts":"1466764852.000698"},{"type":"message","user":"U0XR6J961","text":"you won't get 10k.","ts":"1466764858.000699"},{"type":"message","user":"U0XR6J961","text":"unless you hack the system and not use chaincode containers, etc.","ts":"1466764871.000700"},{"type":"message","user":"U142E5N0P","text":"I also only get 700 for example02 using single peer. weeks before this value is 7000","ts":"1466765693.000701"},{"type":"message","user":"U0XR6J961","text":"no","ts":"1466766384.000702"},{"type":"message","user":"U0XR6J961","text":"never","ts":"1466766385.000703"},{"type":"message","user":"U0XR6J961","text":"you measured it wrong","ts":"1466766389.000704"},{"type":"message","user":"U0XR6J961","text":"you need to measure closed loop","ts":"1466766742.000705"},{"type":"message","user":"U0XR6J961","text":"<https:\/\/github.com\/corecode\/fabric\/tree\/telemetry>","attachments":[{"service_name":"GitHub","title":"corecode\/fabric","title_link":"https:\/\/github.com\/corecode\/fabric\/tree\/telemetry","text":"Blockchain fabric code","fallback":"GitHub: corecode\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400","from_url":"https:\/\/github.com\/corecode\/fabric\/tree\/telemetry","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1466766756.000706"},{"type":"message","user":"U0XR6J961","text":"try this branch","ts":"1466766760.000708"},{"type":"message","user":"U0XR6J961","text":"and use ?wait=20s on your invoke URL","ts":"1466766772.000709"},{"type":"message","user":"U0XR6J961","text":"then you will see the true performance","ts":"1466766780.000710"},{"type":"message","user":"U0Y14MWA2","text":"<@U142E5N0P> - this is why we will be separating execution from consensus","ts":"1466771341.000711"},{"type":"message","user":"U0Y14MWA2","text":"<https:\/\/github.com\/hyperledger\/fabric\/wiki\/Next-Consensus-Architecture-Proposal>","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/wiki\/Next-Consensus-Architecture-Proposal","text":"fabric - Fabric is a blockchain project in Incubation proposed to the community and documented at <https:\/\/goo.gl\/RYQZ5N>. Information on what Incubation entails can be found in the Hyperledger Proj...","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/wiki\/Next-Consensus-Architecture-Proposal","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1466771345.000712"},{"type":"message","user":"U0Y14MWA2","text":"while allowing chaincode to have an easy way to do parallel execution","ts":"1466772273.000714"},{"type":"message","user":"U0Y14MWA2","text":"however, if chaincode does not (or cannot) leverage this - bottleneck of a single chaincode will *almost always* be execution","ts":"1466772301.000715"},{"type":"message","user":"U0Y14MWA2","text":"yet, we do not want a single chaincode execution to be blocking other hence we are moving away from monolitic design","ts":"1466772337.000716"},{"type":"message","user":"U0Y14MWA2","text":"in principle PBFT with small number of nodes, on a cluster will never be a bottleneck for a single chaincode","ts":"1466772392.000717"},{"type":"message","user":"U0XR6J961","text":"so what's the next thing for me to work on?","ts":"1466776397.000718"},{"type":"message","user":"U0XR6J961","text":"split request and message input","ts":"1466776406.000719"},{"type":"message","user":"U0XPR4NP4","text":"I think that's certainly something that needs to be done","ts":"1466776784.000720"},{"type":"message","user":"U0TFEHX8E","text":"looking to merge 1951, 1971, and 1980 to the 0.5 branch today. They all look good to go, but please let me know if I should wait on any of these.","ts":"1466776886.000721"},{"type":"message","user":"U0XR6J961","text":"sheehan: i have a suggestion for simplifying release management","ts":"1466777177.000722"},{"type":"message","user":"U0XR6J961","text":"i'd merge only to the release branch, and occasionally merge release to master","ts":"1466777202.000723"},{"type":"message","user":"U0XR6J961","text":"and for next time i suggest feature freeze and first bug fixes only before branching off release","ts":"1466777228.000724"},{"type":"message","user":"U0XPR4NP4","text":"<@U0TFEHX8E>:  Please also look at 1987, as the associated issue #1942 has been tagged for inclusion in 0.5","edited":{"user":"U0XPR4NP4","ts":"1466777245.000000"},"ts":"1466777232.000725"},{"type":"message","user":"U0TFEHX8E","text":"<@U0XR6J961>: yes, agree about feature freeze. Need that next time. I don\u2019t think it was communicated very well this time and I don\u2019t think the amount of outstanding consensus work was understood","ts":"1466778305.000727"},{"type":"message","user":"U0TFEHX8E","text":"They we\u2019re discussing a more formal process in the TSC call yesterday","ts":"1466778317.000728"},{"type":"message","user":"U0XR6J961","text":"well the problem is that we didn't get testing well ahead","ts":"1466778405.000729"},{"type":"message","user":"U0XR6J961","text":"for a month it looked like there were no more bugs","ts":"1466778420.000730"},{"type":"message","user":"U0XR6J961","text":"can we remove noops?","ts":"1466779041.000731"},{"type":"message","user":"U0XPR4NP4","text":"At the very least it would be nice to prevent noops with N &gt; 1","ts":"1466779136.000732"},{"type":"message","user":"U0XR6J961","text":"but why even","ts":"1466779147.000733"},{"type":"message","user":"U0XR6J961","text":"pbft with N=1 F=0 works fine","ts":"1466779155.000734"},{"type":"message","user":"U0XPR4NP4","text":"I'd be fine with aliasing noops to be n=1, f=0","ts":"1466779181.000735"},{"type":"message","user":"U0XPR4NP4","text":"There may be some desire to leave multiple plugins in tree, that noops could be a good starting place for someone writing a new consensus plugin","ts":"1466779207.000736"},{"type":"message","user":"U0XPR4NP4","text":"I don't know that that's actually true.  And I think it's important that we remove the direct ledger execution stuff from the consensus API, because it is not serialized against state transfer (and running both concurrently has been shown to cause panics and crashes)","edited":{"user":"U0XPR4NP4","ts":"1466779335.000000"},"ts":"1466779318.000737"},{"type":"message","user":"U0XR6J961","text":"ah i see","ts":"1466779531.000739"},{"type":"message","user":"U0XR6J961","text":"so if i use a channel, i will have to introduce knowledge of transactions into the event manager","ts":"1466779893.000740"},{"type":"message","user":"U0XR6J961","text":"or i need to create a new goroutine","ts":"1466779905.000741"},{"type":"message","user":"U0XPR4NP4","text":"Can you elaborate?","ts":"1466779932.000742"},{"type":"message","user":"U0XPR4NP4","text":"Did you see my proposal to <@U0XQ35CDD> yesterday?","ts":"1466779954.000743"},{"type":"message","user":"U0XPR4NP4","text":"","attachments":[{"fallback":"[June 23rd, 2016 1:34 PM] jyellick: As I think about this, I might eliminate the delivery go routine, and instead, structure it as:\n\n1. REST API go routine enters `RecvLocalTran`\n2. It attempts to queue onto a buffered new tran channel of configurable size\n3. If successful, it then pushes a `newTranEvent` into the event manager\n * If  PBFT thread has a free virtual client spot, it reads a tran from the new tran channel\n * If the PFBT thread has no free virtual client spot, when one frees up, it will attempt to read from the new tran channel","author_subname":"jyellick","ts":"1466703263.000624","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"As I think about this, I might eliminate the delivery go routine, and instead, structure it as:\n\n1. REST API go routine enters `RecvLocalTran`\n2. It attempts to queue onto a buffered new tran channel of configurable size\n3. If successful, it then pushes a `newTranEvent` into the event manager\n * If  PBFT thread has a free virtual client spot, it reads a tran from the new tran channel\n * If the PFBT thread has no free virtual client spot, when one frees up, it will attempt to read from the new tran channel","author_name":"Jason Yellick","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/jyellick","author_icon":"https:\/\/secure.gravatar.com\/avatar\/80fccad690b283483c3b5418b8b82b5b.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F272a%2Fimg%2Favatars%2Fava_0026-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1466703263000624","is_share":true,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1466779990.000744"},{"type":"message","user":"U0XR6J961","text":"oh i see","ts":"1466779997.000745"},{"type":"message","user":"U0XQ35CDD","text":"Right that seems like a good way to do it.","ts":"1466780008.000746"},{"type":"message","user":"U0XR6J961","text":"have the engine not enqueue a transaction, but a transaction event","ts":"1466780016.000747"},{"type":"message","user":"U0XPR4NP4","text":"Exactly, then the event thread can go read off the channel if it decides to","ts":"1466780031.000748"},{"type":"message","user":"U0XR6J961","text":"but that introduces knowledge of the event manager to that interface","ts":"1466780080.000749"},{"type":"message","user":"U0XR6J961","text":"need a piping goroutine that just translates the queue contents","ts":"1466780096.000750"},{"type":"message","user":"U0XPR4NP4","text":"The way things are structured now, is that the `external.go` is the only file which go routines not belonging to the event manager should enter.  Although it's not the case today, I also think that's the only place that should have a reference to the event manager.  [`external.go` purposefully does not have a reference to the PBFT structures, to discourage any methods in them from accessing them directly, their interaction is through the event manager, which does the serializing]","edited":{"user":"U0XPR4NP4","ts":"1466780426.000000"},"ts":"1466780158.000751"},{"type":"message","user":"U0XPR4NP4","text":"That `external.go` is where the `RecvMsg` lives today, and it puts message events into the manager","ts":"1466780211.000752"},{"type":"message","user":"U0XPR4NP4","text":"If `RecvLocalTran` (or whatever better name) lives there with a buffered channel, it could queue that `newTranEvent` into the event manager.  Then the PBFT internals processes that event, checks if it can handle a new tran right now, and then goes and reads off the buffered tran chan (which I assume would live in `external.go`)","ts":"1466780300.000753"},{"type":"message","user":"U0XPR4NP4","text":"I'm not seeing the \"introduces knowledge of the event manager to that interface\"","ts":"1466780329.000754"},{"type":"message","user":"U0XR6J961","text":"well, enqueing a \"newTranEvent\" is introducing knowledge of the event manager","ts":"1466780609.000756"},{"type":"message","user":"U0XPR4NP4","text":"I guess I would not say 'introducing', because `RecvMsg` already has knowledge","ts":"1466780636.000757"},{"type":"message","user":"U0XR6J961","text":"i mean the engine function","ts":"1466780648.000758"},{"type":"message","user":"U0XPR4NP4","text":"(as does every other call in `external.go`)","ts":"1466780648.000759"},{"type":"message","user":"U0XPR4NP4","text":"Oh, then I don't see it again","ts":"1466780679.000760"},{"type":"message","user":"U0XPR4NP4","text":"Oh, why not have the engine call into `RecvLocalTran` in `external.go`","ts":"1466780682.000761"},{"type":"message","user":"U0XR6J961","text":"i am trying to export a chan","ts":"1466780685.000762"},{"type":"message","user":"U0XR6J961","text":"so that the engine can decide what to do with it","ts":"1466780698.000763"},{"type":"message","user":"U0XPR4NP4","text":"Ah, I see, you want the decision over blocking\/timing out\/rejecting to be at the engine level, and not at the PBFT level?","edited":{"user":"U0XPR4NP4","ts":"1466780743.000000"},"ts":"1466780734.000764"},{"type":"message","user":"U0XR6J961","text":"i don't think pbft should make that call","ts":"1466780814.000766"},{"type":"message","user":"U0XR6J961","text":"otoh, we could just make it a blocking call","ts":"1466780824.000767"},{"type":"message","user":"U0XR6J961","text":"and if somebody wants to drop messages, they can introduce a queue ahead of that?","ts":"1466780843.000768"},{"type":"message","user":"U0XR6J961","text":"or whatever other, maybe more fair data structure","ts":"1466780859.000769"},{"type":"message","user":"U0XPR4NP4","text":"Hmmm","ts":"1466780891.000770"},{"type":"message","user":"U0XR6J961","text":"yea, that also means that we don't need a channel","ts":"1466780900.000771"},{"type":"message","user":"U0XR6J961","text":"i like that better","ts":"1466780904.000772"},{"type":"message","user":"U0XPR4NP4","text":"I do agree, this is better configured in the engine in PBFT","ts":"1466780916.000773"},{"type":"message","user":"U0XPR4NP4","text":"Then `RecvLocalTran` always blocks until PBFT reads it.  And, the engine should never call it in parallel?","ts":"1466780963.000774"},{"type":"message","user":"U0XR6J961","text":"well it can","ts":"1466780983.000775"},{"type":"message","user":"U0XPR4NP4","text":"But it would lose ordering promises I would think?","ts":"1466780993.000776"},{"type":"message","user":"U0XR6J961","text":"but if it wants to establish some fairness, it will have to implement a different way","ts":"1466780999.000777"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1466781000.000778"},{"type":"message","user":"U0XR6J961","text":"also this matches better a possible RPC API","edited":{"user":"U0XR6J961","ts":"1466781032.000000"},"ts":"1466781025.000779"},{"type":"message","user":"U0XPR4NP4","text":"What does the implementation of making that call block until PBFT is ready to receive a tran look like?","ts":"1466781034.000781"},{"type":"message","user":"U0XR6J961","text":"for now, just enqueue into the normal event queue","ts":"1466781105.000782"},{"type":"message","user":"U0XR6J961","text":"later, have something that uses condition variables? counting semaphore, something","ts":"1466781134.000783"},{"type":"message","user":"U0XPR4NP4","text":"But then we are in the same situation as we are now? Not being able to defer receiving new transactions?","ts":"1466781138.000784"},{"type":"message","user":"U0XR6J961","text":"yes, i want to first transform the interface, then transform behavior","ts":"1466781155.000785"},{"type":"message","user":"U0XPR4NP4","text":"Ah okay","ts":"1466781166.000786"},{"type":"message","user":"U0XQ35CDD","text":"What engine function do you refer to specifically?","attachments":[{"fallback":"[June 24th, 2016 11:04 AM] simon: i mean the engine function","author_subname":"simon","ts":"1466780648.000758","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"i mean the engine function","author_name":"Simon Schubert","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/simon","author_icon":"https:\/\/secure.gravatar.com\/avatar\/676aeb5acbd353b77e077be1b7bd1a6e.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0016-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1466780648000758","is_share":true,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1466781643.000787"},{"type":"message","user":"U0XR6J961","text":"the one that calls recvmsg","ts":"1466781957.000788"},{"type":"message","user":"U0XPR4NP4","text":"<@U0TFEHX8E>: 1987 CI finished successfully","ts":"1466782350.000789"},{"type":"message","user":"U0TFEHX8E","text":"thanks, merged","ts":"1466782526.000790","reactions":[{"name":"+1","users":["U0XPR4NP4","U0UGH3X7X"],"count":2}]},{"type":"message","user":"U0XR6J961","text":"<https:\/\/github.com\/corecode\/fabric\/tree\/split-request-ingress>","attachments":[{"service_name":"GitHub","title":"corecode\/fabric","title_link":"https:\/\/github.com\/corecode\/fabric\/tree\/split-request-ingress","text":"Blockchain fabric code","fallback":"GitHub: corecode\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400","from_url":"https:\/\/github.com\/corecode\/fabric\/tree\/split-request-ingress","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1466782891.000791"},{"type":"message","user":"U0XPR4NP4","text":"When I see the duplicated deploy, they are both going into the same block, which I find a little odd\/interesting","ts":"1466789791.000793"},{"type":"message","user":"U0XR6J961","text":"haha wat","ts":"1466790446.000794"},{"type":"message","user":"U0XPR4NP4","text":"Think I've got it... think it may be from not taking the currentExec into account","edited":{"user":"U0XPR4NP4","ts":"1466790563.000000"},"ts":"1466790474.000795"},{"type":"message","user":"U0XPR4NP4","text":"And, it's only on deploy, because deploys take forever","ts":"1466790605.000797"},{"type":"message","user":"U0XPR4NP4","text":"Or not, the fact that they're in the same block makes me think this isn't view change related","ts":"1466790667.000798"},{"type":"message","subtype":"file_share","text":"<@U0XQ35CDD|kostas> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/kostas\/F1L4FA51N\/behave.txt|behave.txt>","file":{"id":"F1L4FA51N","created":1466790741,"timestamp":1466790741,"name":"behave.txt","title":"behave.txt","mimetype":"text\/plain","filetype":"text","pretty_type":"Plain Text","user":"U0XQ35CDD","editable":true,"size":2478,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1L4FA51N\/behave.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1L4FA51N\/download\/behave.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/kostas\/F1L4FA51N\/behave.txt","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F1L4FA51N-bf7699d5a9","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/kostas\/F1L4FA51N\/behave.txt\/edit","preview":"@issue_1874c\n    Scenario: chaincode example02 with 4 peers, two stopped, bring back both\n      Given we compose \"docker-compose-4-consensus-batch.yml\"\n      And I register with CA supplying username \"binhn\" and secret \"7avZQLwcUe9q\" on peers:\n                            | vp0  |","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>@issue_1874c<\/pre><\/div>\n<div><pre>    Scenario: chaincode example02 with 4 peers, two stopped, bring back both<\/pre><\/div>\n<div><pre>      Given we compose &quot;docker-compose-4-consensus-batch.yml&quot;<\/pre><\/div>\n<div><pre>      And I register with CA supplying username &quot;binhn&quot; and secret &quot;7avZQLwcUe9q&quot; on peers:<\/pre><\/div>\n<div><pre>                            | vp0  |<\/pre><\/div>\n<\/div>\n<\/div>\n","lines":51,"lines_more":46,"preview_is_truncated":true,"channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0XQ35CDD","upload":true,"display_as_bot":false,"username":"<@U0XQ35CDD|kostas>","bot_id":null,"ts":"1466790741.000799"},{"type":"message","user":"U0XQ35CDD","text":"<@U0XR6J961>, <@U0UGH3X7X>: How many `REST invoking chaincode...` statements would you expect to see in the logs generated from this test?","ts":"1466790752.000800"},{"type":"message","user":"U0UGH3X7X","text":"in vp0's log,   9 invokes no ?","ts":"1466790889.000801"},{"type":"message","user":"U0XQ35CDD","text":"Yet we see 10. And to make matters even more interesting, we see two chaincode invocations when the two nodes are down.","ts":"1466790935.000802"},{"type":"message","user":"U0UGH3X7X","text":"9 invokes from the behave log","ts":"1466791154.000803"},{"type":"message","subtype":"file_share","text":"<@U0XQ35CDD|kostas> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/kostas\/F1L4P1A93\/screen_shot_2016-06-24_at_14.00.12.png|Screen Shot 2016-06-24 at 14.00.12.png>","file":{"id":"F1L4P1A93","created":1466791228,"timestamp":1466791228,"name":"Screen Shot 2016-06-24 at 14.00.12.png","title":"Screen Shot 2016-06-24 at 14.00.12.png","mimetype":"image\/png","filetype":"png","pretty_type":"PNG","user":"U0XQ35CDD","editable":false,"size":15742,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1L4P1A93\/screen_shot_2016-06-24_at_14.00.12.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1L4P1A93\/download\/screen_shot_2016-06-24_at_14.00.12.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_64":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1L4P1A93-23f6df26b5\/screen_shot_2016-06-24_at_14.00.12_64.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_80":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1L4P1A93-23f6df26b5\/screen_shot_2016-06-24_at_14.00.12_80.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1L4P1A93-23f6df26b5\/screen_shot_2016-06-24_at_14.00.12_360.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360_w":360,"thumb_360_h":110,"thumb_160":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1L4P1A93-23f6df26b5\/screen_shot_2016-06-24_at_14.00.12_160.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","image_exif_rotation":1,"original_w":446,"original_h":136,"permalink":"https:\/\/hyperledgerproject.slack.com\/files\/kostas\/F1L4P1A93\/screen_shot_2016-06-24_at_14.00.12.png","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F1L4P1A93-79788ddf10","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0XQ35CDD","upload":true,"display_as_bot":false,"username":"<@U0XQ35CDD|kostas>","bot_id":null,"ts":"1466791229.000804"},{"type":"message","user":"U0XQ35CDD","text":"If you try on my branch, can you tell me how many you get?","ts":"1466791249.000805"},{"type":"message","user":"U0UGH3X7X","text":"on jyellick\/issue-1942 with kchristidis\/fix-184    ,  i see 9 invokes in vp0 log","ts":"1466791607.000806"},{"type":"message","subtype":"file_share","text":"<@U0UGH3X7X|tuand> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/tuand\/F1L3B2L1Z\/1874c.zip|1874c.zip>","file":{"id":"F1L3B2L1Z","created":1466791769,"timestamp":1466791769,"name":"1874c.zip","title":"1874c.zip","mimetype":"application\/zip","filetype":"zip","pretty_type":"Zip","user":"U0UGH3X7X","editable":false,"size":319311,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1L3B2L1Z\/1874c.zip?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1L3B2L1Z\/download\/1874c.zip?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/tuand\/F1L3B2L1Z\/1874c.zip","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F1L3B2L1Z-496f0c416c","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0UGH3X7X","upload":true,"display_as_bot":false,"username":"<@U0UGH3X7X|tuand>","bot_id":null,"ts":"1466791770.000807"},{"type":"message","user":"U0XPR4NP4","text":"Aha! 90% sure I've got it, checking now","ts":"1466792141.000808"},{"type":"message","user":"U0XQ35CDD","text":"Tuan, have a look at this: <https:\/\/github.com\/kchristidis\/fabric\/tree\/fix-1874-v0.5>","attachments":[{"service_name":"GitHub","title":"kchristidis\/fabric","title_link":"https:\/\/github.com\/kchristidis\/fabric\/tree\/fix-1874-v0.5","text":"Blockchain fabric code","fallback":"GitHub: kchristidis\/fabric","thumb_url":"https:\/\/avatars2.githubusercontent.com\/u\/14876848?v=3&s=400","from_url":"https:\/\/github.com\/kchristidis\/fabric\/tree\/fix-1874-v0.5","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1466792146.000809"},{"type":"message","user":"U0XQ35CDD","text":"Checking your logs now.","ts":"1466792156.000811"},{"type":"message","user":"U0XPR4NP4","text":"We do not clear the batch store on view change","ts":"1466792340.000812"},{"type":"message","user":"U0XPR4NP4","text":"So if we cycle 4 views, we look at our outstanding requests, see something, and so add it to the batchstore, but that 'something' is already in the batch store, so we get the duplicated deploys","ts":"1466792393.000813"},{"type":"message","user":"U0XR6J961","text":"there was so much churn recently","ts":"1466792440.000814"},{"type":"message","user":"U0XR6J961","text":"not surprised","ts":"1466792444.000815"},{"type":"message","user":"U0XR6J961","text":"i think for the next iteration we should not try to meet a deadline - it just makes it more likely that bugs slip through","ts":"1466792472.000816"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I don't think deadlines make for great code.  That's supposed to be the whole point of agile... push what's ready","ts":"1466792554.000817"},{"type":"message","user":"U0XR6J961","text":"and we need to have continuous testing","ts":"1466792631.000818"},{"type":"message","user":"U0XR6J961","text":"right now we have waterfall testing","ts":"1466792637.000819"},{"type":"message","user":"U0XPR4NP4","text":"And yet another bug... our request timer, and our batch timer are set to equal values.... if you fire exactly one request into the system, it will generally never execute, because we will view change before the batch expires","ts":"1466792708.000820"},{"type":"message","user":"U0XPR4NP4","text":"Clearing the batch store on viewchange, and dropping the batch timeout to be 1 second fix the behavior for busywork.  I could instead increase the request timeout, what do you guys think? (<@U0XR6J961> <@U0UGH3X7X> <@U0XQ35CDD>)","ts":"1466792830.000821"},{"type":"message","user":"U0UGH3X7X","text":"increase request timeout ...  less code changes ?","ts":"1466793503.000822"},{"type":"message","user":"U0XPR4NP4","text":"Code changes are needed regardless","ts":"1466793538.000823"},{"type":"message","user":"U0XPR4NP4","text":"It's \"decrease batch timeout\" or \"increase request timeout\"","ts":"1466793548.000824"},{"type":"message","user":"U0XPR4NP4","text":"If they are the same value, as they are today, then a single transaction will never execute","ts":"1466793562.000825"},{"type":"message","user":"U0UGH3X7X","text":"i'd still go with increase request timeout  ... might even help us if we run again into a huge transaction that takes too long to broadcast","ts":"1466793730.000826"},{"type":"message","user":"U0XPR4NP4","text":"Any other votes? <@U0XQ35CDD> <@U0XR6J961>","ts":"1466793842.000827"},{"type":"message","user":"U0XQ35CDD","text":"No particular preference here.","ts":"1466793870.000828"},{"type":"message","user":"U0XPR4NP4","text":"<@U0UGH3X7X>: I'm thinking it needs to be the batch timeout, not the request timeout.  In particular, if people want to turn  on null requests, in order to have the outstanding request timer work with today's code, the null requests must come less frequently than the request timeout, so, increasing the timeout means increasing the minimum value of the null requests, which seems problematic","ts":"1466797315.000829"},{"type":"message","user":"U0UGH3X7X","text":"agreed  ...  should add a warning in config.yaml to have diff values for the timeouts ?  don't cross the streams :grin:","ts":"1466797567.000830"},{"type":"message","user":"U0XPR4NP4","text":"<@U0UGH3X7X> Would you mind adding that to <https:\/\/github.com\/hyperledger\/fabric\/pull\/2007> ? I will respond with an update","attachments":[{"service_name":"GitHub","title":"Clear the batch store on view change by jyellick \u00b7 Pull Request #2007 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/2007","text":"Description This changeset clears the batch store on view change, does not start the request timer when not in an active view, and decreases the batch timeout to be less than the request timeout. ...","fallback":"GitHub: Clear the batch store on view change by jyellick \u00b7 Pull Request #2007 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/2007","thumb_width":420,"thumb_height":420,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1466798185.000831"},{"type":"message","user":"U0UGH3X7X","text":"done.","ts":"1466798815.000833"},{"type":"message","user":"U0XPR4NP4","text":"Thanks, and pushed the fix","ts":"1466799378.000834"},{"type":"message","user":"U1B2FF8LR","text":"<@U0XQ35CDD>: I retested 1942 using 9f5666f. Code looks much improved: no duplicates and all three peers sync up correctly - BUT querying the bounced peer (before and after stopping a 4th peer) still produces the initially deployed values (inaccurate responses) for at least a minute or two, even though after it becomes a functioning member of the 3-peer consensus network.","ts":"1466801456.000835"},{"type":"message","user":"U0XPR4NP4","text":"<@U1B2FF8LR> I commented on the issue, this is \"working as designed\" from a PBFT perspective","ts":"1466801638.000836"},{"type":"message","user":"U0XPR4NP4","text":"In the future we may want to make some optimizations to help the rejoined peer recover faster, but if you wish to know a definitive point in time value, you must perform this as an invocation which is ordered by the network and wait for the result of that invocation.  This is commonly referred to as a 'strong read'","ts":"1466801830.000837"},{"type":"message","user":"U0XQ35CDD","text":"<@U1B2FF8LR>: This is also a point we bring up the in the BMX documentation and a common source of confusion. Jason has covered it nicely in the Github issue.","ts":"1466801915.000838"},{"type":"message","user":"U1B2FF8LR","text":"Sure I will read more. Intuitively, I can accept that at the time when the peer joins the network when there are already 3 nodes working and reaching consensus without it. But when one of them drops, and that restarted node continues onwards as one of the remaining three AND there is consensus on subsequent transactions, then I would think at that time then it would have to be caught up in sync (and should give responses same as the other two peers would give).  How can that NOT be true?","ts":"1466802185.000839"},{"type":"message","user":"U0XPR4NP4","text":"When the peer rejoins the network, it knows the state the network was last in, and that was \"ordering requests 1 through 8\".  So, it gets a message from the primary saying \"Let's all agree to put request A in position 3\", and the replica says \"Okay, that's between 1 and 8, I've got nothing in slot 3, that's fine with me\", and then the primary says \"Let's all agree to put request B in position 4\",  and likewise the new peer says \"Okay, that's between 1 and 8, and I've got nothing in slot 4, that's fine with me\" and so on.\n\nThe old nodes, they've already agreed on what goes in positions 1 and 2, so they executed them, so when the position is agreed on for 3 through 8, they simply execute them.  The recently restarted one doesn't know what goes in position 1 or 2, so, it keeps a log of what goes into 3 through 8, but, it can't execute anything yet, because it must execute in sequence.","ts":"1466802505.000840"},{"type":"message","user":"U0XPR4NP4","text":"Now, eventually, the primary says \"Let's all agree to put request H in slot 9\", and the restarted replica says \"Nope, we're ordering requests 1 through 8 now, and I still don't have requests 1 or 2, maybe I missed those requests, or maybe the primary is being a jerk, either way, I'm not going to order this new request\".  So, now the network doesn't have enough nodes to make progress, and, this triggers a view change, where everyone agrees on a starting point, and a new leader.  Once they agree on the starting point, the restarted replica realizes it doesn't have that starting point, so it performs state transfer, and because it's been listening from the beginning of this new starting point, it won't miss any transactions, and will be able to execute up to date once state transfer finishes.","ts":"1466802712.000841"},{"type":"message","user":"U0XPR4NP4","text":"So, the TL;DR version is, the restarted peer will help the network,  and some new transactions may execute, but eventually the restarted peer gets in sync","ts":"1466802840.000842"},{"type":"message","user":"U0XQ35CDD","text":"I'll get sth up in the Wiki as well. ","ts":"1466802921.000843","reactions":[{"name":"+1","users":["U0UGH3X7X"],"count":1}]},{"type":"message","user":"U1B2FF8LR","text":"so they \"help\" the network with a \"yes\" vote but they don't really know if it makes sense with previous state. So if I was a peer who wanted to take over the world, I could zap and restart all the other peers, and while they were restarting I would advance my transactions and they would all blindly vote as zombies for awhile after they recover and then they would initiate their own state transfers eventually all matching mine. MuuuaHaHa.","ts":"1466803363.000844"},{"type":"message","user":"U0UGH3X7X","text":"well, the zap and restart part might be a wee bit complicated :wink:","ts":"1466803462.000845"},{"type":"message","user":"U0XPR4NP4","text":"<@U1B2FF8LR>: The PBFT ordering is agnostic to content.  We want to make sure no one is getting censored, but beyond that, it is really about everyone agreeing on a total ordering","ts":"1466803496.000846"},{"type":"message","user":"U0XPR4NP4","text":"The danger in something like bitcoin is that the blockchain forks and you end up being able to spend the same coin twice","ts":"1466803521.000847"},{"type":"message","user":"U0XPR4NP4","text":"So long as everyone agrees you give the coin to person A, and then you submit a transaction to give the coin to person B, there's really no problem","ts":"1466803561.000848"},{"type":"message","user":"U0XPR4NP4","text":"Because everyone agrees on the order, the second transaction will not execute successfully","ts":"1466803576.000849"},{"type":"message","user":"U0XPR4NP4","text":"In the same sense, in the bitcoin network, you could control 100% of the mining nodes, but you still could not falsify a transaction","ts":"1466803631.000850"},{"type":"message","user":"U0XPR4NP4","text":"Consensus is about getting everyone a consistent global ordering, and then the chaincode\/ledger is what determines whether a transaction is 'valid'","ts":"1466803672.000851"},{"type":"message","user":"U1B2FF8LR","text":"<@U0UGH3X7X>: If I was an evil genius, I would have a big laser zapper. OK, So, Back to my specific case: what you are saying is I cannot query a node that has restarted until it sync's, but I don't know how\/when\/why that happens. How big is the queue of ordered transactions (1 through 8, in your example)? Can I expect it to sync up after a certain number of transactions after recovering, or in lieu of that maybe after a certain timer pops after 1 minute? How can I write a reliable repeatable maintainable predictable deterministic test case for this?","ts":"1466804017.000852"},{"type":"message","user":"U0XPR4NP4","text":"If you want to know the ledger's point in time state, you need to submit an invoke transaction who's output contains your desired value.  Then wait for it to appear in the ledger, and you will know the value in the network at the point in time that transaction executed.","ts":"1466804153.000853"},{"type":"message","user":"U1B2FF8LR","text":"or rather, \" a certain number of transactions, plus the time it takes to complete the viewchange and also for that node to do a state transfer\"","ts":"1466804178.000854"},{"type":"message","user":"U0XPR4NP4","text":"In the future, we hope to add a 'strong read' API which will be like a query, but go through consensus, unlike a normal query, which executes without ordering","edited":{"user":"U0XPR4NP4","ts":"1466804247.000000"},"ts":"1466804202.000855"},{"type":"message","user":"U0XPR4NP4","text":"There is a checkpoint interval and log size multiplier in config.yaml","ts":"1466804293.000857"},{"type":"message","user":"U0XPR4NP4","text":"If you multiply those together, you will get the number of PBFT sequence numbers that may execute while not being up to date","ts":"1466804312.000858"},{"type":"message","user":"U0XPR4NP4","text":"Multiply this by the batch size for an upper bound on the number of transactions","ts":"1466804335.000859"},{"type":"message","user":"U1B2FF8LR","text":"right now in my view, that would 80.   K: 10    logmultiplier: 4     batchsize: 2.","edited":{"user":"U1B2FF8LR","ts":"1466805607.000000"},"ts":"1466804553.000860"},{"type":"message","user":"U1B2FF8LR","text":"OK, so if I am a user, and I query and it looks like I have $100, I cannot believe it (using the type of Query that we have implemented today). And if I try to withdraw it, you are saying that I won't get anything from my peer (or ledger) until enough transactions occur for my peer to sync with the ledger. So if my peer who told me I had $100 was recently restarted, it could have been wrong, so I just have to accept that my next request (withdrawal) might simply be rejected, depending on whatever happened while it was restarting. But overall if the other peers knew I had only $9, then the right result would occur (i.e. my $100 withdrawal request would be rejected, because I didn't actually have $100).","ts":"1466805047.000861"},{"type":"message","user":"U1B2FF8LR","text":"But after that, once I know a peer is in sync (40 transactions), my test scripts can believe and depend on any query results, right?","ts":"1466805107.000862"},{"type":"message","user":"U1B2FF8LR","text":"However... at any point in time, a client today would never really know if the peer it is querying was just restarted (and thus possibley out of sync) or rather if it was in sync (and therefore supplying reliable data).  Hmmmm...","ts":"1466805447.000863"},{"type":"message","user":"U1B2FF8LR","text":"I really appreciate your explanations!  Very helpful.","ts":"1466805552.000864"},{"type":"message","user":"U0XPR4NP4","text":"<@U1B2FF8LR> Your transactions should always validate their inputs.  Think about it like writing a check, you may check your account balance online and it says $100, but you wrote 12 checks for $50 each, that haven't been cashed yet.  There's nothing stopping you from writing another check.  The nice thing about the blockchain is that your check is now associated with a complete transaction like \"transfer $50 in exchange for X\", so it executes atomically, if you don't have the funds to back it up, then the transaction won't occur (unlike with a real check, where these things are detached)","ts":"1466805859.000866"},{"type":"message","user":"U0XPR4NP4","text":"Even discount the restarted peer, you can't guarantee that between your query and your transaction that something hasn't changed.  Your queries should always return data that was \"right at some point\", but may not be \"right when it was sent\", and certainly not \"right when it was received\"","ts":"1466805942.000867"},{"type":"message","user":"U0XPR4NP4","text":"I'd love to see the API expanded to include a timestamp about the data, that \"This was your balance at XXXX time\"","ts":"1466805986.000868"},{"type":"message","user":"U0XPR4NP4","text":"And I know there is some work pending in this area.","ts":"1466806005.000869"},{"type":"message","user":"U1B2FF8LR","text":"yes, and if there were any transactions pending at that point in time too (so I could determine if my last n transactions are still in queue or not, so I know how to interpret the info I receive back).  \nOr, to know when a given transaction is processed and entered into the ledger, not just received. (Tuan explained to me there is an event notification system being planned too.) Then I could check my checkbook transactions and determine if the query response makes sense for that point in time.","ts":"1466807730.000870"},{"user":"U0YP7KFGQ","type":"message","subtype":"channel_join","text":"<@U0YP7KFGQ|gennady.laventman> has joined the channel","ts":"1466930462.000871"},{"type":"message","user":"U0XR6J961","text":"jyellick: you around?","ts":"1467032557.000872"},{"type":"message","user":"U0XPR4NP4","text":"Yep","ts":"1467033646.000873"},{"type":"message","user":"U0XPR4NP4","text":"What's up?","ts":"1467033648.000874"},{"type":"message","user":"U0XPR4NP4","text":"^@simon","ts":"1467033653.000875"},{"type":"message","user":"U0XR6J961","text":"hi","ts":"1467033658.000876"},{"type":"message","user":"U0XR6J961","text":"trying to implement that sub-client registry","ts":"1467033666.000877"},{"type":"message","user":"U0XR6J961","text":"wondering how to hook it into the manager","ts":"1467033688.000878"},{"type":"message","user":"U0XPR4NP4","text":"Ah, thought you were doing the Consensus\/Transaction split","ts":"1467033703.000879"},{"type":"message","user":"U0XR6J961","text":"i did already","ts":"1467033720.000880"},{"type":"message","user":"U0XPR4NP4","text":"Including the flow control?","ts":"1467033731.000881"},{"type":"message","user":"U0XR6J961","text":"<https:\/\/github.com\/corecode\/fabric\/commit\/65a66d546eb7028805723ec851053a39d59c29e0>","ts":"1467033749.000882"},{"type":"message","user":"U0XR6J961","text":"no, for flow control i need the structure that allows me to do flow control","ts":"1467033767.000883"},{"type":"message","user":"U0XR6J961","text":"i.e. a structure that will allow me to take a new transaction","ts":"1467033799.000884"},{"type":"message","user":"U0XPR4NP4","text":"I'm not sure what you mean","ts":"1467033887.000885"},{"type":"message","user":"U0XR6J961","text":"i need to make RecvRequest() unblock when a previous request has executed, and now a new slot is free","ts":"1467034274.000886"},{"type":"message","user":"U0XR6J961","text":"so i need a structure that keeps record of these slots, and a way to communicate to the RecvRequest routine that it can continue","ts":"1467034346.000887"},{"type":"message","user":"U0XR6J961","text":"i guess recvrequest can read from a channel","ts":"1467034357.000888"},{"type":"message","user":"U0XR6J961","text":"and whenever a request is executing, we write to that channel","ts":"1467034374.000889"},{"type":"message","user":"U0XR6J961","text":"and we just use the context of that recvrequest routine","ts":"1467034421.000890"},{"type":"message","user":"U0XR6J961","text":"that would work","ts":"1467034425.000891"},{"type":"message","user":"U0XR6J961","text":"<@U0XPR4NP4>: did you want to implement the sub-client stuff?","ts":"1467034450.000892"},{"type":"message","user":"U0XR6J961","text":"then i'll just mock up a small counting thing","ts":"1467034463.000893"},{"type":"message","user":"U0XQ35CDD","text":"(counting what?)","ts":"1467034524.000894"},{"type":"message","user":"U0XR6J961","text":"outstanding requests","ts":"1467034824.000895"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: If you'd like to implement that, it's fine, there is plenty of work to go around, just thought it was on my plate","ts":"1467035676.000896"},{"type":"message","user":"U0XR6J961","text":"ah no","ts":"1467035688.000897"},{"type":"message","user":"U0XR6J961","text":"please go ahead","ts":"1467035691.000898"},{"type":"message","user":"U0XR6J961","text":"you must have something in mind","ts":"1467035696.000899"},{"type":"message","user":"U0XR6J961","text":"i started with this","ts":"1467035705.000900"},{"type":"message","user":"U0XR6J961","text":"```type clientTxStore struct {\n\tReady chan int\n\ttxToClient map[string]int\n\tfreeClient map[int]struct{}\n}\n```","ts":"1467035707.000901"},{"type":"message","user":"U0XR6J961","text":"but not sure it is the right choice","ts":"1467035714.000902"},{"type":"message","user":"U0XR6J961","text":"and i don't know how to put the subclient into the request","ts":"1467035735.000903"},{"type":"message","user":"U0XPR4NP4","text":"I assumed we would need to modify the Request message format","ts":"1467036054.000904"},{"type":"message","user":"U0XQ35CDD","text":"so that we include the slot?","ts":"1467036090.000905"},{"type":"message","user":"U0XPR4NP4","text":"Right","ts":"1467036093.000906"},{"type":"message","user":"U0XPR4NP4","text":"Another thing I've considered, what would everyone think about allowing the PrePrepare messages to include a repeated Request section","ts":"1467036196.000907"},{"type":"message","user":"U0XPR4NP4","text":"The marshaling and unmarshaling back and forth between batch and core seems inefficient and unnecessary","ts":"1467036230.000908"},{"type":"message","user":"U0XPR4NP4","text":"(Especially as they merge)","ts":"1467036241.000909"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1467036259.000910"},{"type":"message","user":"U0XR6J961","text":"i thought about that too","ts":"1467036262.000911"},{"type":"message","user":"U0XQ35CDD","text":"I agree","ts":"1467036266.000912"},{"type":"message","user":"U0XR6J961","text":"do we now work on master or on release?","ts":"1467036277.000913"},{"type":"message","user":"U0XQ35CDD","text":"master ","ts":"1467036286.000914"},{"type":"message","user":"U0XR6J961","text":"i think there should be a merge of release into master","ts":"1467036289.000915"},{"type":"message","user":"U0XR6J961","text":"because there are commits in release that are not in master, no?","ts":"1467036300.000916"},{"type":"message","user":"U0XPR4NP4","text":"I think that would have been the clean way to do things, but we should have frozen master and did not","ts":"1467036311.000917"},{"type":"message","user":"U0XR6J961","text":"well yes","ts":"1467036318.000918"},{"type":"message","user":"U0XR6J961","text":"not out of a release playbook","ts":"1467036328.000919"},{"type":"message","user":"U0XPR4NP4","text":"I believe I have rebased \/ cherry-picked commits in both","ts":"1467036333.000920"},{"type":"message","user":"U0XR6J961","text":"who came up with that release process?","ts":"1467036356.000921"},{"type":"message","user":"U0XPR4NP4","text":"(although also a number of outstanding PRs)","ts":"1467036359.000922"},{"type":"message","user":"U0XPR4NP4","text":"Not really sure...","ts":"1467036362.000923"},{"type":"message","user":"U0XR6J961","text":"i thought the linux foundation knew about these things","ts":"1467036370.000924"},{"type":"message","user":"U0XR6J961","text":"doesn't seem like it, honestly","ts":"1467036376.000925"},{"type":"message","user":"U0XR6J961","text":"i've done releases with dragonfly before - it's not that complicated","ts":"1467036395.000926"},{"type":"message","user":"U0XR6J961","text":"so everything is in master?","ts":"1467036409.000927"},{"type":"message","user":"U0XR6J961","text":"because so far i've been working on release","ts":"1467036424.000928"},{"type":"message","user":"U0XR6J961","text":"given that more stuff went into release than into master","ts":"1467036435.000929"},{"type":"message","user":"U0XPR4NP4","text":"I believe new features should be being built on master, but there's a big PR backlog against master","ts":"1467036447.000930"},{"type":"message","user":"U0XR6J961","text":"sure, but i'm not going to build new stuff against master unless master contains all the bug fixes, etc.","ts":"1467036485.000931"},{"type":"message","user":"U0XPR4NP4","text":"I've pushed a parallel PR to master for every PR that's gone to release","ts":"1467037063.000932"},{"type":"message","user":"U0XPR4NP4","text":"(Granted, 4 of them are outstanding, though one of those is also not yet in release)","ts":"1467037091.000933"},{"type":"message","user":"U0XQ35CDD","text":"This is being discussed in the technical planning call right now by the way. ","ts":"1467037284.000934"},{"type":"message","user":"U0XR6J961","text":"nope, there are still some not committed","ts":"1467037323.000935"},{"type":"message","user":"U0XR6J961","text":"i have no invitation to any technical planing call","ts":"1467037354.000936"},{"type":"message","user":"U0XPR4NP4","text":"Forwarded to you","ts":"1467037518.000937"},{"type":"message","user":"U0XR6J961","text":"i guess now is too late","ts":"1467037669.000938"},{"type":"message","user":"U0XPR4NP4","text":"They're still discussing to some extent... think you could still speak up","ts":"1467037722.000939"},{"type":"message","user":"U0XR6J961","text":"i don't even know the swiss dial in number - if they're interested in my input, they can ask me directly","ts":"1467037771.000940"},{"type":"message","user":"U0XPR4NP4","text":"Ah, heard someone connect, had assumed it was you","ts":"1467037866.000941"},{"type":"message","user":"U0XR6J961","text":"nope","ts":"1467037873.000942"},{"type":"message","user":"U0XQ35CDD","text":"You can join the meeting online. (Had to disconnect as I had to join another mtg so I don't know if it's still on, but keep it in mind for next time.)","ts":"1467037995.000943"},{"type":"message","user":"U0XV1HDL3","text":"the webex doesnt run on my linux, i need a phone #...","ts":"1467038074.000944"},{"type":"message","user":"U0XR6J961","text":"same here","ts":"1467038101.000945"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XV1HDL3> I had the same problem... <https:\/\/github.com\/fgsch\/docker-webex>","attachments":[{"service_name":"GitHub","title":"fgsch\/docker-webex","title_link":"https:\/\/github.com\/fgsch\/docker-webex","text":"docker-webex - Cisco WebEx inside docker","fallback":"GitHub: fgsch\/docker-webex","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/241785?v=3&s=400","from_url":"https:\/\/github.com\/fgsch\/docker-webex","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1467038145.000946"},{"type":"message","user":"U0XPR4NP4","text":"Works surprisingly well","ts":"1467038153.000948"},{"type":"message","user":"U0XQ35CDD","text":"Ah, I see.","ts":"1467038154.000949"},{"type":"message","user":"U0XPR4NP4","text":"(Though I've not tried to do audio through it, just looking at the screen share)","ts":"1467038173.000950"},{"type":"message","user":"U0XR6J961","text":"oh my","ts":"1467038180.000951"},{"type":"message","user":"U0XPR4NP4","text":"Rather than litter my system with obsolete random 32 bit libraries... docker seemed like a good option","ts":"1467038215.000952"},{"type":"message","user":"U0XR6J961","text":"should that request counting thing live in batch or in externaleventreceiver?","ts":"1467038358.000953"},{"type":"message","user":"U0XPR4NP4","text":"As I envisioned it, there would be some sort of queue in externaleventreceiver, which would preserve ordering (rather than just having a bunch of different go routines waiting on a channel, for instance)","ts":"1467038500.000954"},{"type":"message","user":"U0XPR4NP4","text":"Then, batch would remove the first item from the queue whenever it has room to do so","ts":"1467038522.000955"},{"type":"message","user":"U0XPR4NP4","text":"I think we need to decide how the engine side is going to work first","ts":"1467038580.000956"},{"type":"message","user":"U0XPR4NP4","text":"If the engine side only ever sends in one transaction at a time, then blocking on an unbuffered channel would be the way to do it, waiting for batch to come read from it","ts":"1467038625.000957"},{"type":"message","user":"U0XR6J961","text":"so i think if we block in RecvRequest, we can just inject a new event when we unblock","ts":"1467038645.000958"},{"type":"message","user":"U0XPR4NP4","text":"But what causes us to unblock?","ts":"1467038664.000959"},{"type":"message","user":"U0XR6J961","text":"execute writes to a chan","ts":"1467038691.000960"},{"type":"message","user":"U0XPR4NP4","text":"I'm not sure that I like that.  I would prefer a simple flag which indicates whether a request is pending or not (this would be set to true whever an `newBlockedRequestEvent` came in, and cleared once read).  If it is, then when we get an execution done event, or maybe a state transfered event, or whatever, then the event manager thread would simply go read from an unbuffered `pendingRequest` channel in `externalEventReceiver`","edited":{"user":"U0XPR4NP4","ts":"1467039097.000000"},"ts":"1467038832.000961"},{"type":"message","user":"U0XPR4NP4","text":"I suppose it would be easy enough to have a `unblockOneRequest` call, and do it that was instead, which would be invoked in the execute path, or wherever else.","edited":{"user":"U0XPR4NP4","ts":"1467038952.000000"},"ts":"1467038943.000962"},{"type":"message","user":"U0XR6J961","text":"i don't think i understand","ts":"1467039137.000966"},{"type":"message","user":"U0XPR4NP4","text":"So, the proposed ingress path would be:\n\n1. Enter `RecvRequest`, pbft `pendingRequest` is false\n2. Send the manager a `newBlockedRequestEvent`, once processed `pendingRequest` is true\n3. Block on an unbuffered channel, waiting for the manager thread to read the request from this channel\n4. Unblock as PBFT reads from this channel, `pendingRequest` is now false","ts":"1467039252.000967"},{"type":"message","user":"U0XR6J961","text":"also, how does the sub-client id get communicated?","ts":"1467039260.000968"},{"type":"message","user":"U0XPR4NP4","text":"So, `RecvRequest` is only for locally generated trans, no? So we can assign any free virtual client ID","ts":"1467039289.000969"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1467039305.000970"},{"type":"message","user":"U0XR6J961","text":"i don't understand your path, sorry","ts":"1467039326.000971"},{"type":"message","user":"U0XPR4NP4","text":"Maybe I can clarify","ts":"1467039347.000972"},{"type":"message","user":"U0XR6J961","text":"so you want to introduce knowledge of two channels to the manager?","ts":"1467039385.000973"},{"type":"message","user":"U0XPR4NP4","text":"Not to the manager, no.  The manager would have no knowledge of the other channel.  The second channel would live in `external.go` and PBFT would maintain state, as to whether a transaction is waiting on that channel or not. Whenever a go routine arrived with a tran, it would send an event via the event manager, to tell PBFT to update its state that a new transaction is waiting.  When PBFT is able to absorb a new transaction, it checks to see if a tran is waiting, and if so, goes and reads off the channel in `external.go`","ts":"1467039528.000974"},{"type":"message","user":"U0XR6J961","text":"hmm","ts":"1467039577.000975"},{"type":"message","user":"U0XPR4NP4","text":"So, I like your model because the ingress of the trans is through the event manager","ts":"1467039758.000976"},{"type":"message","user":"U0XPR4NP4","text":"The thing I don't like about it, is that PBFT doesn't know whether or not there's an outstanding tran until it arrives.  Maybe that's not a problem","ts":"1467039808.000977"},{"type":"message","user":"U0XPR4NP4","text":"I think I've talked myself out of the ingress model I proposed, I'm back on board with how you were planning to do it, basically a toggle to block incoming transactions we flip on once our client slots are full, and flip off once there is room.","ts":"1467040373.000978"},{"type":"message","user":"U0XR6J961","text":"#1171 is the issue we're working on","ts":"1467045028.000979"},{"type":"message","user":"U0XPR4NP4","text":"Yep","ts":"1467046043.000980"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XQ35CDD> What is your status for merging batch\/core?","ts":"1467046519.000981"},{"type":"message","user":"U0XQ35CDD","text":"On whitelisting now, batch\/core comes next. As we discussed last week, we can spread the tasks. Are you about to start on this?","ts":"1467046610.000982"},{"type":"message","user":"U0XPR4NP4","text":"I'm trying to figure out exactly how to fit the work on","ts":"1467046711.000983"},{"type":"message","user":"U0XPR4NP4","text":"As I look at this slotting stuff, trying to decide if I should implement it in batch or core, or, on top of some merged batch\/core.","ts":"1467046789.000984"},{"type":"message","user":"U0XQ35CDD","text":"I was actually wondering whether that would go into batch or core.","ts":"1467046810.000985"},{"type":"message","user":"U0XQ35CDD","text":"(If it goes in the merged batch\/core, the dilemma goes away :simple_smile: )","ts":"1467046844.000986"},{"type":"message","user":"U0XPR4NP4","text":"Exactly.  The right place I think is in core, but, it doesn't fit there today, so it could be done in batch for now, but that means it's one more thing to merge into core.","ts":"1467046889.000987"},{"type":"message","user":"U0XQ35CDD","text":"Shall we tackle the unification now?","ts":"1467046897.000988"},{"type":"message","user":"U0XQ35CDD","text":"I can set the whitelisting aside for a few days.","ts":"1467046913.000989"},{"type":"message","user":"U0XPR4NP4","text":"Up to you, but if you are willing, I think unification sooner is better than later","ts":"1467046937.000990"},{"type":"message","user":"U0XQ35CDD","text":"Agreed; I'm in.","ts":"1467046997.000991"},{"type":"message","user":"U0XPR4NP4","text":"I am on site in RTP today if you are, could come chat physically if you think that would be faster","ts":"1467047013.000992"},{"type":"message","user":"U0XQ35CDD","text":"Let's do that and then we can document the process in an issue on Github.","ts":"1467047078.000993"},{"type":"message","user":"U0XPR4NP4","text":"Sounds good","ts":"1467047106.000994"},{"type":"message","user":"U0XQ35CDD","text":"So if we are to remove `sieve` and all `obc-classic` references we should eventually be looking at a `consensus` package that looks roughly like this:\n\n```\nconsensus.go\ncontroller package\nexecutor package\nhelper package\nnoops package\npbft package\nutil package\n```","edited":{"user":"U0XQ35CDD","ts":"1467056386.000000"},"ts":"1467056375.000995"},{"type":"message","user":"U0XQ35CDD","text":"Where the `util` package contains the `events` package.","ts":"1467056396.000997"},{"type":"message","user":"U0XQ35CDD","text":"And within the `pbft` package all `obc-*.go` files are replaced by the `pbft.go` + `pbft_test.go` pair.","ts":"1467056410.000998"},{"type":"message","user":"U0XPR4NP4","text":"Still running CI, but here is the initial PR to remove Sieve and its references:\n\n<https:\/\/github.com\/hyperledger\/fabric\/pull\/2030>","attachments":[{"service_name":"GitHub","title":"Remove the sieve PBFT consensus plugin and all references to it by jyellick \u00b7 Pull Request #2030 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/2030","text":"Description This changeset removes the code for the Sieve PBFT variant, as well as references to it, and 'classic' in both the documentation and tests. Motivation and Context Sieve and classic a...","fallback":"GitHub: Remove the sieve PBFT consensus plugin and all references to it by jyellick \u00b7 Pull Request #2030 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/2030","thumb_width":420,"thumb_height":420,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1467056884.000999"},{"type":"message","user":"U1AU8DRQR","text":"Hi","ts":"1467058723.001001"},{"type":"message","user":"U1AU8DRQR","text":"Which is that part of the code that is executed right after a consensus is made e.g. pbft or a noops (as far that is a consensus)? If I m right it is exectxs in helper","ts":"1467058757.001002"},{"type":"message","user":"U0XPR4NP4","text":"<@U1AU8DRQR> Ultimately, to create a block first call `BeginTxBatch` followed by `ExecTxs` followed by `CommitTxBatch`.  All of the consensus plugins follow this pattern in some fashion.","ts":"1467059013.001003"},{"type":"message","user":"U0XPR4NP4","text":"Be aware, that PBFT now uses the `executor` package to perform this task, in order to serialize executions and state transfer, as calling those methods references above while in state transfer can cause a panic.  Noops never triggers state transfer, so its usage is safe.","ts":"1467059075.001004"},{"type":"message","user":"U1AU8DRQR","text":"Is it possible that obcpbft batch calls exectxs more than once in a row?","ts":"1467059079.001005"},{"type":"message","user":"U0XPR4NP4","text":"It should not be today, no.","ts":"1467059105.001006"},{"type":"message","user":"U1AU8DRQR","text":"I was 'playing' with it and it did so. I made some changes maybe that caused the problematic operation ","ts":"1467059204.001007"},{"type":"message","user":"U0XPR4NP4","text":"Ah.  yes. obcpbft batch uses `executor.go`, you can take a look there, it should be okay to multiply invoke execute, but the code path is usually invoke `Execute` (which invokes `BeginTxBatch` if necessary, then `ExecTxs` and calls back), which then invokes `Commit` (which invokes `CommitTxBatch`)","ts":"1467059311.001008"},{"type":"message","user":"U0XPR4NP4","text":"However, be careful to wait until the callback has been made before invoking the second `Execute`, if the callback is still pending, you will likely deadlock that node's consensus.","ts":"1467059357.001009"},{"type":"message","user":"U1AU8DRQR","text":"It seemed to log a critical message saying that Replica %d is missing request for seqNo=%d with digest '%s' for assigned prepare after fetching, this indicates a serious bug","ts":"1467059364.001010"},{"type":"message","user":"U0XPR4NP4","text":"Which commit level of the code are you at? There was a benign scenario which would spew that message erroneously.","ts":"1467059398.001011"},{"type":"message","user":"U1AU8DRQR","text":"I think I was at committed ","ts":"1467059433.001012"},{"type":"message","user":"U1AU8DRQR","text":"But not sure ","ts":"1467059438.001013"},{"type":"message","user":"U1AU8DRQR","text":"When can that message be spewed? ","ts":"1467059545.001014"},{"type":"message","user":"U1AU8DRQR","text":"In what scenario exactly ","ts":"1467059573.001015"},{"type":"message","user":"U0XPR4NP4","text":"<https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/consensus\/obcpbft\/viewchange.go#L476>","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/consensus\/obcpbft\/viewchange.go#L476","text":"fabric - Fabric is a blockchain project in Incubation proposed to the community and documented at <https:\/\/goo.gl\/RYQZ5N>. Information on what Incubation entails can be found in the Hyperledger Proj...","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/consensus\/obcpbft\/viewchange.go#L476","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1467059691.001016"},{"type":"message","user":"U0XPR4NP4","text":"You can check to make sure your code has that second check for a digest of \"\"","ts":"1467059714.001018"},{"type":"message","user":"U0XPR4NP4","text":"Essentially, on view change, if there are null requests included in the Xset, then we will not have a corresponding request in our request store, and that message will be displayed.  This is benign because null requests are a sort of psuedo-request which we never expect to be in our request store.  When this error message was added, that possibility was not taken into account.","ts":"1467059803.001019"},{"type":"message","user":"U1AU8DRQR","text":"Oh I see ","ts":"1467059836.001020"},{"type":"message","user":"U1AU8DRQR","text":"And let me ask more about exectxs and pbft batch. If you have only 1 TX, I mean the client has sent only one TX, is it possible that exectxs gets called more than once? ","ts":"1467059938.001021"},{"type":"message","user":"U0XPR4NP4","text":"No, it should not be.  There was a bug, fixed in PR #2007 \/ #2008 (for 0.5 \/ master respectively), which would sometimes cause transaction duplication, especially deploys.","ts":"1467060020.001022"},{"type":"message","user":"U0XPR4NP4","text":"(your question makes me think you might be observing that behavior)","ts":"1467060050.001023"},{"type":"message","user":"U1AU8DRQR","text":"I am doing my experiments with a week old master. May that bug affect that? ","ts":"1467060181.001024"},{"type":"message","user":"U0XQ35CDD","text":"(^^ Yes.)","ts":"1467060203.001025"},{"type":"message","user":"U0XPR4NP4","text":"Definitely, that was only merged into 0.5 earlier today, and is still not merged into master.","ts":"1467060218.001026"},{"type":"message","user":"U0XPR4NP4","text":"I strongly recommend that you do your experimentation with the current 0.5 branch.","ts":"1467060235.001027"},{"type":"message","user":"U1AU8DRQR","text":"BTW aren't you talking about the \"system chain code deployment bug\"? You mentioned deploy ","ts":"1467060259.001028"},{"type":"message","user":"U0XPR4NP4","text":"There was a significant amount of churn and bug fixing in obcpbft over the last week.","ts":"1467060275.001029"},{"type":"message","user":"U0XPR4NP4","text":"I'm not certain, do you have an issue number?","ts":"1467060291.001030"},{"type":"message","user":"U1AU8DRQR","text":"Ok I will switch to that :-) ","ts":"1467060307.001031","reactions":[{"name":"+1","users":["U0XPR4NP4"],"count":1}]},{"type":"message","user":"U1AU8DRQR","text":"No but I m trying to find one ","ts":"1467060319.001032"},{"type":"message","user":"U0XPR4NP4","text":"<https:\/\/github.com\/hyperledger\/fabric\/issues\/2015>","attachments":[{"service_name":"GitHub","title":"PBFT Batch: All chaincode deploys generate 2 transactions \u00b7 Issue #2015 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/issues\/2015","text":"Description Deploying a chaincode to a network running PBFT Batch generates 2 transactions: The original transaction, and also a duplicate transaction that seems to be marked as an error. This b...","fallback":"GitHub: PBFT Batch: All chaincode deploys generate 2 transactions \u00b7 Issue #2015 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars2.githubusercontent.com\/u\/11968347?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/issues\/2015","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1467060412.001033"},{"type":"message","user":"U0XPR4NP4","text":"^ This is an issue which reported the symptoms, though the fix was already in queue","edited":{"user":"U0XPR4NP4","ts":"1467060453.000000"},"ts":"1467060432.001035"},{"type":"message","user":"U1AU8DRQR","text":"I may have something similar but with invoke txs ","ts":"1467060666.001037"},{"type":"message","user":"U0XPR4NP4","text":"Yes, it can happen with invokes as well as deploys","ts":"1467060676.001038"},{"type":"message","user":"U0XPR4NP4","text":"Especially if you only send a single one","ts":"1467060681.001039"},{"type":"message","user":"U0XPR4NP4","text":"Then you will end up with a duplicated invoke  tx","ts":"1467060690.001040"},{"type":"message","user":"U0XPR4NP4","text":"It just so happens that in most of the test, people send a single deploy tx, wait for it to finish, and then send many invokes.","ts":"1467060735.001041"},{"type":"message","user":"U1AU8DRQR","text":"I will try the 0.5 branch and inform you what happened and whether I had that problem again ","ts":"1467060749.001042"},{"type":"message","user":"U0XPR4NP4","text":"Great, good luck","ts":"1467060755.001043"},{"type":"message","user":"U1AU8DRQR","text":"Thanks for the help, I will check out the consensus modules again and maybe I will have new questions :-P ","ts":"1467060907.001044"},{"type":"message","user":"U0XPR4NP4","text":"You're welcome, happy to help, we'll be here.","ts":"1467060931.001045"},{"type":"message","subtype":"pinned_item","user":"U1AU8DRQR","item_type":"C","attachments":[{"fallback":"[June 27th, 2016 1:19 PM] hgabor: Which is that part of the code that is executed right after a consensus is made e.g. pbft or a noops (as far that is a consensus)? If I m right it is exectxs in helper","ts":"1467058757.001002","author_subname":"hgabor","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"Which is that part of the code that is executed right after a consensus is made e.g. pbft or a noops (as far that is a consensus)? If I m right it is exectxs in helper","author_name":"Gabor Hosszu","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/hgabor","author_icon":"https:\/\/secure.gravatar.com\/avatar\/00f4290e36c198abb7d4f0ea586245db.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0012-48.png","mrkdwn_in":["text"]}],"text":"<@U1AU8DRQR|hgabor> pinned a message to this channel.","ts":"1467060939.001046"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XQ35CDD> <@U0UGH3X7X> <@U0XR6J961> If you guys have a chance, could you review and sign off on 1976 and 2030?","ts":"1467061002.001047"},{"user":"U1LP4T69E","type":"message","subtype":"channel_join","text":"<@U1LP4T69E|jeffprestes> has joined the channel","ts":"1467063018.001048"},{"type":"message","user":"U0XR6J961","text":"hah, i just ran into an issue where with N=1, F=0, i stopped the replica (probably while some requests were in flight), and now the replica won't process request anymore","ts":"1467118491.001049"},{"type":"message","user":"U0XR6J961","text":"because lastExec is 4867, and seqNo is 4872","ts":"1467118521.001050"},{"type":"message","user":"U0XR6J961","text":"maybe a view change would fix it?","ts":"1467118545.001051"},{"type":"message","user":"U0XR6J961","text":"if somebody could look at the split-request-ingress branch","ts":"1467120612.001052"},{"type":"message","user":"U0XR6J961","text":"<@U0XPR4NP4>, <@U0XQ35CDD>: you've been talking about the design","ts":"1467120630.001053"},{"type":"message","user":"U0XR6J961","text":"having it in the external event receiver is ugly","ts":"1467120642.001054"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: Sure, I can take a look","ts":"1467120676.001055"},{"text":"looking","type":"message","subtype":"me_message","user":"U0XQ35CDD","ts":"1467120681.001056"},{"type":"message","user":"U0XQ35CDD","text":"<https:\/\/github.com\/corecode\/fabric\/tree\/split-request-ingress>","attachments":[{"service_name":"GitHub","title":"corecode\/fabric","title_link":"https:\/\/github.com\/corecode\/fabric\/tree\/split-request-ingress","text":"Blockchain fabric code","fallback":"GitHub: corecode\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400","from_url":"https:\/\/github.com\/corecode\/fabric\/tree\/split-request-ingress","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1467120688.001057"},{"type":"message","user":"U0XR6J961","text":"so i'd appreciate some ideas how to improve that","ts":"1467120690.001059"},{"type":"message","user":"U0XR6J961","text":"but it seems to be working","ts":"1467120709.001060"},{"type":"message","user":"U0XR6J961","text":"meaning, it is closed loop now","ts":"1467120730.001061"},{"type":"message","user":"U0XR6J961","text":"yey","ts":"1467120731.001062"},{"type":"message","user":"U0XR6J961","text":"without my hack","ts":"1467120761.001063"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: I discussed this some with <@U0XQ35CDD>, I could not figure out why you wanted to assign the ID in `external.go` instead of simply sending in the transaction","ts":"1467121001.001064"},{"type":"message","user":"U0XR6J961","text":"it was the first data structure that came to my mind","ts":"1467121028.001065"},{"type":"message","user":"U0XR6J961","text":"i'm fine with whatever","ts":"1467121037.001066"},{"type":"message","user":"U0XPR4NP4","text":"Okay, then I think `external.go` can be cleaned up pretty simply","ts":"1467121048.001067"},{"type":"message","user":"U0XR6J961","text":"the nice thing now is that we can reject duplicate transactions :slightly_smiling_face:","ts":"1467121049.001068"},{"type":"message","user":"U0XR6J961","text":"which is more a protection of the data structure than anything else","ts":"1467121075.001069"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> <@U0XQ35CDD> <@U0UGH3X7X> Anyone have a chance to look at <https:\/\/github.com\/hyperledger\/fabric\/pull\/2030> ?","attachments":[{"service_name":"GitHub","title":"Remove the sieve PBFT consensus plugin and all references to it by jyellick \u00b7 Pull Request #2030 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/2030","text":"Description This changeset removes the code for the Sieve PBFT variant, as well as references to it, and 'classic' in both the documentation and tests. Motivation and Context Sieve and classic a...","fallback":"GitHub: Remove the sieve PBFT consensus plugin and all references to it by jyellick \u00b7 Pull Request #2030 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/2030","thumb_width":420,"thumb_height":420,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1467121306.001070"},{"type":"message","user":"U0XPR4NP4","text":"(Actually, saw your remark <@U0UGH3X7X> we can post to slack before merge, but as we just forked off the release, no one seems to be too worried about potential breakage, if anyone wants something stable to play with, they should use the dev preview, as master is likely to be in serious flux)","ts":"1467121397.001072"},{"type":"message","user":"U0UGH3X7X","text":"np ... good point about advertising on slack in advance","ts":"1467121546.001073"},{"type":"message","user":"U0XR6J961","text":"oh man, closed loop","ts":"1467121793.001074"},{"type":"message","user":"U0XR6J961","text":"so fantastic","ts":"1467121795.001075"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: Is it safe for me to base my work from your branch?","ts":"1467122392.001076"},{"type":"message","user":"U0XR6J961","text":"i think we should remove the closed loop hack first","ts":"1467122435.001077"},{"type":"message","user":"U0XR6J961","text":"which is in the middle of the telemetry branch","ts":"1467122445.001078"},{"type":"message","user":"U0XR6J961","text":"but you can also take the two commits and rebase them onto anything you want","ts":"1467122470.001079"},{"type":"message","user":"U0XR6J961","text":"either way","ts":"1467122472.001080"},{"type":"message","user":"U0XPR4NP4","text":"Alright","ts":"1467122506.001081"},{"type":"message","user":"U0XR6J961","text":"i'll remove the hack and push again","ts":"1467122586.001082"},{"type":"message","user":"U0XR6J961","text":"ok","ts":"1467122674.001083"},{"type":"message","user":"U0XPR4NP4","text":"Just cherry picked those commits onto a fork of the sieveless branch, hopefully good enough to work from there","ts":"1467122721.001084"},{"type":"message","user":"U0XR6J961","text":"should i merge your sieveless branch?","ts":"1467122953.001085"},{"type":"message","user":"U0XQ35CDD","text":"(Hope the answer is yes, I already have)","ts":"1467122969.001086"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1467122975.001087"},{"type":"message","user":"U0XR6J961","text":"i can rebase on top of the sieveless branch","ts":"1467122990.001088"},{"type":"message","user":"U0XPR4NP4","text":"If you guys vote your approval on the PR, we can probably get it pulled into master today","ts":"1467123003.001089"},{"type":"message","user":"U0XQ35CDD","text":"I don't think it's an issue of lack of approvals, but a matter of Sheehan &amp; co. being backlogged","ts":"1467123034.001090"},{"type":"message","user":"U0XR6J961","text":"jyellick: maybe you can merge your sieveless branch into my branch, that way we all have the same history","ts":"1467123149.001091"},{"type":"message","user":"U0XPR4NP4","text":"Sure, or just push your branch and I can rebase onto it","ts":"1467123192.001092"},{"type":"message","user":"U0XR6J961","text":"i did","ts":"1467123212.001093"},{"type":"message","user":"U0XPR4NP4","text":"simon\/split-request-ingress ?","ts":"1467123238.001094"},{"type":"message","user":"U0XR6J961","text":"yep","ts":"1467123251.001095"},{"type":"message","user":"U0XPR4NP4","text":"Thanks","ts":"1467123278.001096"},{"type":"message","user":"U0XR6J961","text":"so what is missing is function doc and tests","ts":"1467123317.001097"},{"type":"message","user":"U0XR6J961","text":"but i guess you'll change that stuff anyways","ts":"1467123328.001098"},{"type":"message","user":"U0XPR4NP4","text":"The reqqueue stuff?","ts":"1467123409.001099"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1467123419.001100"},{"type":"message","user":"U0XPR4NP4","text":"That's the plan","ts":"1467123468.001101"},{"type":"message","user":"U0XQ35CDD","text":"as for simplifying `RecvRequest` further, do we agree that this is as simple as it can go?\n\n```func (eer *externalEventReceiver) RecvRequest(tx *pb.Transaction) error {\n  &lt;- eer.reqQueue.GetReady()\n  eer.manager.Queue() &lt;- transactionEvent{tx}\n  return nil\n}```","ts":"1467123536.001102"},{"type":"message","user":"U0XQ35CDD","text":"(and is that less ugly?)","attachments":[{"fallback":"[June 28th, 2016 9:30 AM] simon: having it in the external event receiver is ugly","author_subname":"simon","ts":"1467120642.001054","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"having it in the external event receiver is ugly","author_name":"Simon Schubert","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/simon","author_icon":"https:\/\/secure.gravatar.com\/avatar\/676aeb5acbd353b77e077be1b7bd1a6e.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0016-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1467120642001054","is_share":true,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1467123556.001103"},{"type":"message","user":"U0XR6J961","text":"`WaitReady()` maybe","ts":"1467123558.001104"},{"type":"message","user":"U0XQ35CDD","text":"right, that seems like a better method name","ts":"1467123575.001105"},{"type":"message","user":"U0XQ35CDD","text":"(and I guess the thinking is that you call the reqQueue's `Register` from the manager's `ProcessEvent`)","ts":"1467123666.001106"},{"type":"message","user":"U0XPR4NP4","text":"I'd rather get the `reqQueue` out of `external.go` entirely, have it be a very simple channel logic in `external.go` and then deal with the more complicated stuff on the other side.\n\n```\nfunc (eer *externalEventReceiver) RecvRequest(tx *pb.Transaction) error {\n  eer.manager.Queue() &lt;- eer.createTxEvent(tx)\n  return nil\n}\n```","ts":"1467123761.001107"},{"type":"message","user":"U0XPR4NP4","text":"Where here `createTxEvent` waits for some channel to unblock","ts":"1467123783.001108"},{"type":"message","user":"U0XR6J961","text":"but createTxEvent is still part of external.go?","ts":"1467123828.001109"},{"type":"message","user":"U0XQ35CDD","text":"where that channel is the reqQueue's Ready channel I presume?","ts":"1467123830.001110"},{"type":"message","user":"U0XQ35CDD","text":"if that's the case, where do you hold the reqQueue?","ts":"1467123865.001111"},{"type":"message","user":"U0XPR4NP4","text":"Yes, `createTxEvent` is still part of `external.go` but there's just a simple counter that PBFT can hit saying \"I've got a slot available\", and that call (`createTxEvent`) blocks unless that counter is greater than 0 (implemented as a buffered channel)","edited":{"user":"U0XPR4NP4","ts":"1467123932.000000"},"ts":"1467123913.001112"},{"type":"message","user":"U0XPR4NP4","text":"There would be no queueing on the `external.go` side.  If you want correct ordering, call it serially.","ts":"1467123961.001114"},{"type":"message","user":"U0XR6J961","text":"where is the diffierence?","ts":"1467123984.001115"},{"type":"message","user":"U0XPR4NP4","text":"Purely that the queue state is managed inside of PBFT, rather than `external.go`","ts":"1467124003.001116"},{"type":"message","user":"U0XR6J961","text":"so createTxEvent() would just do &lt;- somechannel","ts":"1467124005.001117"},{"type":"message","user":"U0XPR4NP4","text":"More or less","ts":"1467124011.001118"},{"type":"message","user":"U0XR6J961","text":"how do you envision counting and unblocking?","edited":{"user":"U0XR6J961","ts":"1467124073.000000"},"ts":"1467124066.001119"},{"type":"message","user":"U0XR6J961","text":"it still would be a buffered chan of the same size?","ts":"1467124091.001121"},{"type":"message","user":"U0XPR4NP4","text":"Yes","ts":"1467124094.001122"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1467124117.001123"},{"type":"message","user":"U0XQ35CDD","text":"That does look like a cleaner approach.","ts":"1467124124.001124"},{"type":"message","user":"U0XR6J961","text":"aside: i want to start using panic() when a function is called incorrectly","ts":"1467124156.001125"},{"type":"message","user":"U0XR6J961","text":"not about network data being incorrect, but function with incorrect data\/state","ts":"1467124178.001126"},{"type":"message","user":"U0XPR4NP4","text":"It would make the code cleaner","ts":"1467124228.001127"},{"type":"message","user":"U0UGH3X7X","text":"send an event before calling panic() ?","ts":"1467124406.001128"},{"type":"message","user":"U0XR6J961","text":"what event?","ts":"1467124434.001129"},{"type":"message","user":"U0XR6J961","text":"panic is just to abort the code because there is a clear programming bug","ts":"1467124450.001130"},{"type":"message","user":"U0UGH3X7X","text":"using our event framework  ...  whoever's monitoring the network might not be sitting at a console","ts":"1467124517.001131"},{"type":"message","user":"U0XR6J961","text":"whoever is running the network better have a pager connected to when a node crashes","ts":"1467124538.001132"},{"type":"message","user":"U0UGH3X7X","text":"event would also automatically log reason for crash","ts":"1467124643.001133"},{"type":"message","user":"U0XR6J961","text":"events log something?","ts":"1467124682.001134"},{"type":"message","user":"U0UGH3X7X","text":"i would hope that there is a listener that is monitoring events from all peers","ts":"1467124748.001135"},{"type":"message","user":"U0XPR4NP4","text":"An announcement for anyone who is still using the \"sieve\" or \"classic\" PBFT variants.\n\nThere is a pending PR ( <https:\/\/github.com\/hyperledger\/fabric\/pull\/2030> ) which removes the \"sieve\" and \"classic\" PBFT variants from the fabric master branch.  Unless there is some new opposition, hopefully this PR will be merged later today.\n\nAnyone relying on these PBFT variants in their own scripts or automation should modify them to use the \"batch\" PBFT mode.\n\n\n^ Was about to send this to the fabric mailing list, unless anyone has any suggestions?","attachments":[{"service_name":"GitHub","title":"Remove the sieve PBFT consensus plugin and all references to it by jyellick \u00b7 Pull Request #2030 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/pull\/2030","text":"Description This changeset removes the code for the Sieve PBFT variant, as well as references to it, and 'classic' in both the documentation and tests. Motivation and Context Sieve and classic a...","fallback":"GitHub: Remove the sieve PBFT consensus plugin and all references to it by jyellick \u00b7 Pull Request #2030 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/pull\/2030","thumb_width":420,"thumb_height":420,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1467127164.001136","reactions":[{"name":"+1","users":["U0UGH3X7X"],"count":1}]},{"type":"message","user":"U0XR6J961","text":"go for it","ts":"1467127192.001138"},{"type":"message","user":"U0XQ35CDD","text":"ship it","ts":"1467127194.001139"},{"type":"message","user":"U0XR6J961","text":"and then we also remove noops","ts":"1467127197.001140"},{"type":"message","user":"U0XQ35CDD","text":"and drop the `obc` prefix from the entire package","ts":"1467127219.001141"},{"type":"message","user":"U0XR6J961","text":"oh you and your OCD :slightly_smiling_face:","ts":"1467127233.001142"},{"type":"message","user":"U0XQ35CDD","text":"I've been getting better at it, but still, a long way to go admittedly.","ts":"1467127256.001143"},{"type":"message","user":"U0XPR4NP4","text":"Do we have a plan for ensuring that all replicas have the same config? There are some obvious misconfigurations, like mismatched checkpoint intervals which could break us, but some of the new stuff like 'outstandingrequests' being out of sync might also break things in subtle, not so easy to spot ways","ts":"1467127694.001144"},{"type":"message","user":"U0XQ35CDD","text":"<https:\/\/github.com\/hyperledger\/fabric\/issues\/999>","attachments":[{"service_name":"GitHub","title":"configuration for consensus must be part of genesis block \u00b7 Issue #999 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/issues\/999","text":"For strong consistency between new replicas, all consensus configuration must be the same. The genesis block and system chaincode can guarantee that only replicas that are configured identically w...","fallback":"GitHub: configuration for consensus must be part of genesis block \u00b7 Issue #999 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/issues\/999","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1467127726.001145"},{"type":"message","user":"U0XQ35CDD","text":"I'm having the same concerns, which is why I resurfaced this during the weekend.","ts":"1467127763.001147"},{"type":"message","user":"U0XQ35CDD","text":"Step 4 is still not clear to me as I'd like it to be. I can make assumptions but I'm not sure about their validity. One way of interpreting it: the chain creator creates the genesis block (`$make genesis` or whatever). How is this distributed to all nodes? An off-band process (\"make sure you have this file in this directory before you bring up your node\"), or a process that happens during hand-shaking? Simon's last comment makes me think we're going for the former.","ts":"1467128097.001148"},{"type":"message","user":"U0XR6J961","text":"yes, of course","ts":"1467128214.001149"},{"type":"message","user":"U0XPR4NP4","text":"Bootstrapping is notoriously hard to do securely and automatically.  Even if we say \"make sure the config is the same when you first start so you get matching genesis blocks\" and then verify it on startup, it's effectively the same as distributing the genesis block.","ts":"1467128277.001150"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> <@U0Y14MWA2> <@U0XV1HDL3> <@U0XQ35CDD> My reading of the paper indicates that a byzantine client could broadcast a request to only f+1 backups, and force a view change.  It could continue to do this indefinitely, forcing the network to constantly change views.  This seems like a problem to me? Is this something that has been addressed before?","ts":"1467129017.001151"},{"type":"message","user":"U0XV1HDL3","text":"<@U0XPR4NP4>: referring to the PBFT paper? wouldnt the client in our case send the request to the leader first anyway, adn the leader inserts it into the system?","ts":"1467129383.001152"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XV1HDL3> I'm proposing a byzantine client, who is trying to slow the throughput of the system (And yes, to the Castro paper)","edited":{"user":"U0XPR4NP4","ts":"1467129461.000000"},"ts":"1467129420.001153"},{"type":"message","user":"U0XV1HDL3","text":"but, isnt the client here supposed to send it to the leader?","ts":"1467129520.001155"},{"type":"message","user":"U0XQ35CDD","text":"The point is that a client can follow this tactic to overthrow a normally-functioning leader, correct?","ts":"1467129643.001156"},{"type":"message","user":"U0XPR4NP4","text":"Yes, maybe I am missing something here, but the client is byzantine, and intentionally not following the protocol.  So instead of broadcasting to all replicas, it is only broadcasting to f+1, which it knows are *not* the leader.","ts":"1467129686.001157"},{"type":"message","user":"U0XV1HDL3","text":"certainly possible, sounds like things discussed in the Aardvark paper and \"Byzantine replication under attack\" by Yair Aimr et al","ts":"1467129690.001158"},{"type":"message","user":"U0XPR4NP4","text":"My concern is that, because in the fabric scheme, the replicas themselves act as clients.  So, a single byzantine replica could essentially force a view change until that replica becomes the primary.  With f conspiring together, it seems that they could force the network usually be led by a byzantine replica.","ts":"1467129811.001159"},{"type":"message","user":"U0XV1HDL3","text":"yes - read these 2 papers (aardvark = Making Byzantine Fault Tolerant Systems Tolerate Byzantine Faults)","ts":"1467129905.001160"},{"type":"message","user":"U0XV1HDL3","text":"given the FLP impossibility in the asynchronous model, with enough asynchrony the system never gets anything useful done. only randomized can give this","ts":"1467129952.001161"},{"type":"message","user":"U0XPR4NP4","text":"I will try to give those papers a read.  Would you suggest that we simply ignore this sort of attack for the time being, or are there some proactive steps we can take now in development to make adapting to these easier in the future?","ts":"1467130176.001162"},{"type":"message","user":"U0XV1HDL3","text":"ignore that for now","ts":"1467130197.001163"},{"type":"message","user":"U0XV1HDL3","text":"the quick remedies are pretty simple, i recall, see papers","ts":"1467130223.001164"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XPR4NP4>","ts":"1467133706.001165"},{"type":"message","user":"U0Y14MWA2","text":"not sure what PBFT is exactly doing - how client retransmission should be done is as follows","ts":"1467133725.001166"},{"type":"message","user":"U0Y14MWA2","text":"client is supposed to resend to f+1 or more replicas","ts":"1467133740.001167"},{"type":"message","user":"U0Y14MWA2","text":"who then forward the request to the primary","ts":"1467133749.001168"},{"type":"message","user":"U0Y14MWA2","text":"and only then replicas fire the timer","ts":"1467133756.001169"},{"type":"message","user":"U0Y14MWA2","text":"which prevents the scenario you are describing above","ts":"1467133769.001170"},{"type":"message","user":"U0Y14MWA2","text":"now this may be departing from PBFT - and in this case yes this is a bug in the paper","ts":"1467133794.001171"},{"type":"message","user":"U0Y14MWA2","text":"notice that other such bugs were discussed in <https:\/\/www.usenix.org\/conference\/nsdi-09\/making-byzantine-fault-tolerant-systems-tolerate-byzantine-faults>","ts":"1467133831.001172"},{"type":"message","user":"U0Y14MWA2","text":"(I just saw that <@U0XV1HDL3> already pointed to that paper)","ts":"1467133876.001173"},{"type":"message","user":"U0XPR4NP4","text":"<@U0Y14MWA2> I've been discussing with <@U0XQ35CDD>, and am becoming increasingly convinced, that unless requests are signed (so that their origin cannot be forged), many of these problems are not solvable.  In particular, in order to avoid executing requests multiple times, we must filter out requests we receive which are older than our 'last executed time' for that particular client.  This is because by the time we receive a request from a client, in an asynchronous network, the network may have already executed that request.  If a malicious client\/replica can forge a request from far in the future for a client, it may effectively censor that client indefinitely.","edited":{"user":"U0XPR4NP4","ts":"1467134287.000000"},"ts":"1467134105.001174"},{"type":"message","user":"U0Y14MWA2","text":"in HL fabric theory - client signs all requests","ts":"1467134166.001176"},{"type":"message","user":"U0Y14MWA2","text":"however this is now done, I believe, only if \"security is turned on\"","ts":"1467134187.001178"},{"type":"message","user":"U0Y14MWA2","text":"which painfully slows the things...","ts":"1467134196.001179"},{"type":"message","user":"U0Y14MWA2","text":"so we need to revisit that going towards v2","ts":"1467134213.001180"},{"type":"message","user":"U0XPR4NP4","text":"So I think the problem is that a HL fabric 'request' is a transaction, but PBFT operates on `Request` messages, which contain a transaction, plus some other information like originating replica.","ts":"1467134237.001181"},{"type":"message","user":"U0XPR4NP4","text":"So, the actual `Request` structure is never signed, and consequently, any replica can forge a `Request` as originating from another replica in a scenario as you described such as \"forwarding to the primary\"","ts":"1467134372.001183"},{"type":"message","user":"U0Y14MWA2","text":"the short answer is - PBFT request must be signed","ts":"1467134382.001184"},{"type":"message","user":"U0Y14MWA2","text":"so we agree","ts":"1467134388.001185"},{"type":"message","user":"U0Y14MWA2","text":"let's fix this in v2","ts":"1467134394.001186"},{"type":"message","user":"U0XPR4NP4","text":"Do you think we could instead use a scheme of REQUEST-ACK such as the VIEW-CHANGE-ACK described in the Castro paper?","ts":"1467134425.001187"},{"type":"message","user":"U0Y14MWA2","text":"take a look at this one re client signatures  <https:\/\/www.usenix.org\/conference\/nsdi-09\/making-byzantine-fault-tolerant-systems-tolerate-byzantine-faults>","ts":"1467134459.001188"},{"type":"message","user":"U0Y14MWA2","text":"it describes other attacks which are possible if you do not have client's signature (cf. BigMac attack)","ts":"1467134480.001189"},{"type":"message","user":"U0Y14MWA2","text":"now I do not know what you refer to with REQ-ACK - but if this is too chatty as in all to all communication - I would not do it - signature is cleaner and better and simpler","ts":"1467134531.001190"},{"type":"message","user":"U0XQ35CDD","text":"Signed requests in v2 will align neatly with the signed view-change messages.","edited":{"user":"U0XQ35CDD","ts":"1467134999.000000"},"ts":"1467134564.001191"},{"type":"message","user":"U0Y14MWA2","text":"I think we have those <@U0XR6J961>","ts":"1467134576.001192"},{"type":"message","user":"U0XPR4NP4","text":"We already do signatures, yes","edited":{"user":"U0XPR4NP4","ts":"1467134587.000000"},"ts":"1467134582.001193"},{"type":"message","user":"U0Y14MWA2","text":"because this is our departure from PBFT","ts":"1467134587.001195"},{"type":"message","user":"U0Y14MWA2","text":"as unsigned view change msgs are merely an academic showcase","edited":{"user":"U0Y14MWA2","ts":"1467134662.000000"},"ts":"1467134601.001196"},{"type":"message","user":"U0XPR4NP4","text":"In the Castro paper, rather than sign view change messages, replicas reply to a VIEW-CHANGE with a VIEW-CHANGE-ACK, and a view change message is only considered to be valid after it has a quorum cert of VIEW-CHANGE-ACKs (or something similar)","edited":{"user":"U0XPR4NP4","ts":"1467134624.000000"},"ts":"1467134603.001197"},{"type":"message","user":"U0XQ35CDD","text":"Right, right. I just sent Jason your slides on this yesterday.","ts":"1467134603.001198"},{"type":"message","user":"U0Y14MWA2","text":"of the fact that it is possible to have signature-free protocol","ts":"1467134616.001199"},{"type":"message","user":"U0Y14MWA2","text":"which was interesting at that time, for, well, academic reasons...","ts":"1467134631.001201"},{"type":"message","user":"U0Y14MWA2","text":"so we dropped that early on","ts":"1467134636.001202"},{"type":"message","user":"U0XPR4NP4","text":"Right, I wasn't sure whether it was a coding optimization, or a performance one.","ts":"1467134676.001204"},{"type":"message","user":"U0Y14MWA2","text":"I felt it is both :slightly_smiling_face:","ts":"1467134686.001205"},{"type":"message","user":"U0XPR4NP4","text":"As certainly the implementation without signatures is more complicated.","ts":"1467134687.001206"},{"type":"message","user":"U0Y14MWA2","text":"optimizing for the uncommon case rarely brings benefits","ts":"1467134714.001207"},{"type":"message","user":"U0Y14MWA2","text":"and if it complicates the code - for me it was a no go","ts":"1467134721.001208"},{"type":"message","user":"U0XPR4NP4","text":"Right.","ts":"1467134724.001209"},{"type":"message","user":"U0XPR4NP4","text":"This is why I was curious if such a scheme would be good for requests, as it is the common path.","ts":"1467134741.001210"},{"type":"message","user":"U0Y14MWA2","text":"it is if client's signature is expensive for you","ts":"1467134757.001211"},{"type":"message","user":"U0Y14MWA2","text":"to generate and verify","ts":"1467134762.001212"},{"type":"message","user":"U0Y14MWA2","text":"for generation we do not care - client does it","ts":"1467134770.001213"},{"type":"message","user":"U0Y14MWA2","text":"for verification - IMO it is much faster\/scalable than all to all chat","ts":"1467134784.001214"},{"type":"message","user":"U0XPR4NP4","text":"Ah, but the problem here is that the only clients are validating peers","ts":"1467134800.001215"},{"type":"message","user":"U0XPR4NP4","text":"(ie replicas)","ts":"1467134831.001216"},{"type":"message","user":"U0Y14MWA2","text":"yes - so they will have a bit more latency with a signature - but then again a decent signature is miliseconds","ts":"1467134834.001217"},{"type":"message","user":"U0Y14MWA2","text":"all to all among consenters might be 100s of ms","ts":"1467134843.001218"},{"type":"message","user":"U0Y14MWA2","text":"+ there is a BigMac issue described in that paper up there","ts":"1467134907.001219"},{"type":"message","user":"U0Y14MWA2","text":"so conclusion of that paper - if you want stable performance - do have clients' signatures","ts":"1467134927.001220"},{"type":"message","user":"U0XPR4NP4","text":"Maybe for v2 we should be looking at having the client and consenter be truly different entities?","ts":"1467134972.001221"},{"type":"message","user":"U0Y14MWA2","text":"this is the case, no?","edited":{"user":"U0Y14MWA2","ts":"1467135044.000000"},"ts":"1467134984.001222"},{"type":"message","user":"U0Y14MWA2","text":"client = peer","ts":"1467134986.001223"},{"type":"message","user":"U0Y14MWA2","text":"consenter = consenter","ts":"1467134990.001224"},{"type":"message","user":"U0XPR4NP4","text":"But today, the peer submits a fabric transaction, which is not a PBFT request.  Then, the PBFT replica receives that transaction, wraps it in a PBFT request, and submits it to the network, acting as a client.","ts":"1467135045.001227"},{"type":"message","user":"U0Y14MWA2","text":"my intuition is that this is ok so long as one verifies fabric tx signature","ts":"1467135109.001228"},{"type":"message","user":"U0Y14MWA2","text":"(not sure we do that though)","ts":"1467135110.001229"},{"type":"message","user":"U0Y14MWA2","text":"this should be the TCert signature","edited":{"user":"U0Y14MWA2","ts":"1467135216.000000"},"ts":"1467135161.001230"},{"type":"message","user":"U0Y14MWA2","text":"the question is do we verify it in PBFT or not?","ts":"1467135176.001231"},{"type":"message","user":"U0XPR4NP4","text":"I do not believe that we do.","ts":"1467135230.001233"},{"type":"message","user":"U0XPR4NP4","text":"```\nmessage Transaction {\n    enum Type {\n        UNDEFINED = 0;\n        \/\/ deploy a chaincode to the network and call `Init` function\n        CHAINCODE_DEPLOY = 1;\n        \/\/ call a chaincode `Invoke` function as a transaction\n        CHAINCODE_INVOKE = 2;\n        \/\/ call a chaincode `query` function\n        CHAINCODE_QUERY = 3;\n        \/\/ terminate a chaincode; not implemented yet\n        CHAINCODE_TERMINATE = 4;\n    }\n    Type type = 1;\n    \/\/store ChaincodeID as bytes so its encrypted value can be stored\n    bytes chaincodeID = 2;\n    bytes payload = 3;\n    bytes metadata = 4;\n    string uuid = 5;\n    google.protobuf.Timestamp timestamp = 6;\n\n    ConfidentialityLevel confidentialityLevel = 7;\n    string confidentialityProtocolVersion = 8;\n    bytes nonce = 9;\n\n    bytes toValidators = 10;\n    bytes cert = 11;\n    bytes signature = 12;\n}\n```\n\nThis is the transaction definition","ts":"1467135327.001234"},{"type":"message","user":"U0XPR4NP4","text":"```\nmessage request {\n    google.protobuf.Timestamp timestamp = 1;  \/\/ Generated at the client level. Ensures that client's requests are atomically ordered.\n    bytes payload = 2;  \/\/ opaque payload\n    uint64 replica_id = 3;\n    bytes signature = 4;\n}\n```","ts":"1467135349.001235"},{"type":"message","user":"U0XPR4NP4","text":"This is the request definition.","ts":"1467135353.001236"},{"type":"message","user":"U0Y14MWA2","text":"ah so there are two signatures?","ts":"1467135399.001237"},{"type":"message","user":"U0XPR4NP4","text":"Well, it looks that way, but today, we do nothing to populate or validate the `Request` signaure","ts":"1467135418.001238"},{"type":"message","user":"U0XQ35CDD","text":"One for the submitter, one for the validator.","ts":"1467135419.001239"},{"type":"message","user":"U0XPR4NP4","text":"We could start doing this, but then we will be having two signatures, which seems suboptimal","ts":"1467135449.001240"},{"type":"message","user":"U0Y14MWA2","text":"so request.payload is Transaction (from above)","ts":"1467135477.001241"},{"type":"message","user":"U0XPR4NP4","text":"Correct, marshaled via protobuf to a byte slice.","ts":"1467135493.001242"},{"type":"message","user":"U0XQ35CDD","text":"But if the plan is to have the validator assign it a slot number, he needs to sign on that assignment. So you definitely need a validator signature.","ts":"1467135503.001243"},{"type":"message","user":"U0Y14MWA2","text":"then we could verify Transaction.signature","ts":"1467135526.001244"},{"type":"message","user":"U0Y14MWA2","text":"aha - what is slot?","ts":"1467135532.001245"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XQ35CDD>","ts":"1467135535.001246"},{"type":"message","user":"U0XPR4NP4","text":"<@U0Y14MWA2>: This is a new concept","ts":"1467135539.001247"},{"type":"message","user":"U0Y14MWA2","text":"creative :slightly_smiling_face:","ts":"1467135545.001248"},{"type":"message","user":"U0XPR4NP4","text":"You can think of them as 'virtual clients'","ts":"1467135545.001249"},{"type":"message","user":"U0XPR4NP4","text":"The problem we had was, per the PBFT paper, a client should only have one request in flight at a time","ts":"1467135560.001250"},{"type":"message","user":"U0XPR4NP4","text":"It should wait until the request is fulfilled before submitting another one","ts":"1467135570.001251"},{"type":"message","user":"U0XPR4NP4","text":"With multiple requests in flight, the primary can pick the later request to order first, and the network will believe that the second request is stale (because its time stamp is older), and effectively censor this second request.","ts":"1467135615.001252"},{"type":"message","user":"U0XPR4NP4","text":"We suffer from this censorship problem today.","ts":"1467135629.001253"},{"type":"message","user":"U0XPR4NP4","text":"The idea was to assign each submitted request to one of a finite number of 'slots', or 'virtual client ids' (I like 'slot', as it's shorter)","ts":"1467135651.001254"},{"type":"message","user":"U0XPR4NP4","text":"So that you could have as many outstanding requests, as you had slots, and still solve the censorship problem.","ts":"1467135668.001255"},{"type":"message","user":"U0Y14MWA2","text":"how about using not UTC timestamps but a counter","ts":"1467135669.001256"},{"type":"message","user":"U0Y14MWA2","text":"so primary would not be able to do this","ts":"1467135681.001257"},{"type":"message","user":"U0XQ35CDD","text":"(For more context on slots, they were first brought up here I think: <https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1466604480000530>)","edited":{"user":"U0XQ35CDD","ts":"1467135868.000000"},"ts":"1467135719.001258"},{"type":"message","user":"U0Y14MWA2","text":"(because holes could be detected)","ts":"1467135724.001260"},{"type":"message","user":"U0XPR4NP4","text":"I briefly considered a counter, I think the problem is that a client may not always be sure if its request was processed.","ts":"1467135779.001262"},{"type":"message","user":"U0XPR4NP4","text":"Imagine the replica crashes, or is too slow.","ts":"1467135788.001263"},{"type":"message","user":"U0XPR4NP4","text":"Then the replica would be unsure of what its counter's value should truly be at.","ts":"1467135805.001264"},{"type":"message","user":"U0XPR4NP4","text":"(Because the network may have executed his requests, or not, it has no way to know)","ts":"1467135818.001265"},{"type":"message","user":"U0Y14MWA2","text":"hmmm...","ts":"1467135828.001266"},{"type":"message","user":"U0Y14MWA2","text":"don't we implement consensus :slightly_smiling_face:","ts":"1467135834.001267"},{"type":"message","user":"U0Y14MWA2","text":"anyway seems we are going in the direction of including FIFO into consensus total order","ts":"1467135889.001269"},{"type":"message","user":"U0Y14MWA2","text":"there is a precedence for this - a very practical system actually doing this","ts":"1467135902.001270"},{"type":"message","user":"U0Y14MWA2","text":"(albeit in crash)","ts":"1467135906.001271"},{"type":"message","user":"U0Y14MWA2","text":"it is Zookeeper","ts":"1467135910.001272"},{"type":"message","user":"U0Y14MWA2","text":"so I cannot recall exactly how they do it - but we may want to peek @ <https:\/\/www.semanticscholar.org\/paper\/Zab-High-performance-broadcast-for-primary-backup-Junqueira-Reed\/b02c6b00bd5dbdbd951fddb00b906c82fa80f0b3\/pdf>","attachments":[{"title":"Zab: High-performance broadcast for primary-backup systems (PDF) - Semantic Scholar","title_link":"https:\/\/www.semanticscholar.org\/paper\/Zab-High-performance-broadcast-for-primary-backup-Junqueira-Reed\/b02c6b00bd5dbdbd951fddb00b906c82fa80f0b3\/pdf","text":"\u2014Zab is a crash-recovery atomic broadcast algorithm we designed for the ZooKeeper coordination service. ZooKeeper implements a primary-backup scheme in which a primary process executes clients operations and uses Zab to propagate the corresponding incremental state changes to backup processes 1. Due the dependence of an incremental state change on the sequence of changes previously generated, Zab must guarantee that if it delivers a given state change, then all other changes it depends upon must be delivered first. Since primaries may crash, Zab must satisfy this requirement despite crashes of primaries. Applications using ZooKeeper demand high-performance from the service, and consequently, one important goal is the ability of having multiple outstanding client operations at a time. Zab enables multiple outstanding state changes by guaranteeing that at most one primary is able to broadcast state changes and have them incorporated into the state, and by using a synchronization phase while establishing a new primary. Before this synchronization phase completes, a new primary does not broadcast new state changes. Finally, Zab uses an identification scheme for state changes that enables a process to easily identify missing changes. This feature is key for efficient recovery. Experiments and experience so far in production show that our design enables an implementation that meets the performance requirements of our applications. Our implementation of Zab can achieve tens of thousands of broadcasts per second, which is sufficient for demanding systems such as our Web-scale applications.","fallback":"Zab: High-performance broadcast for primary-backup systems (PDF) - Semantic Scholar","image_url":"https:\/\/www.semanticscholar.org\/img\/semantic_scholar_og.jpg","from_url":"https:\/\/www.semanticscholar.org\/paper\/Zab-High-performance-broadcast-for-primary-backup-Junqueira-Reed\/b02c6b00bd5dbdbd951fddb00b906c82fa80f0b3\/pdf","image_width":476,"image_height":250,"image_bytes":62051,"service_icon":"https:\/\/www.semanticscholar.org\/img\/favicon.png","service_name":"semanticscholar.org","id":1}],"ts":"1467135990.001273"},{"type":"message","user":"U0Y14MWA2","text":"that said - let me have a look at slots","ts":"1467136015.001275"},{"type":"message","user":"U0Y14MWA2","text":"ok so what I could quickly grasp is - slots can be seen to be a sort of a moving window on a counter?","ts":"1467136150.001276"},{"type":"message","user":"U0Y14MWA2","text":"does that interpretation make sense?","ts":"1467136156.001277"},{"type":"message","user":"U0XPR4NP4","text":"I would say, slots are analogous to virtual clients.  Each slot holds a request until it is executed.  In this way, you can have as many requests in flight, as you have slots, without risking duplication or censorship.","ts":"1467136235.001278"},{"type":"message","user":"U0XPR4NP4","text":"When the replica, acting as a client, generates a request, it picks a free slot to assign that request to.  In this way, it simulates that it had received this request from that virtual client.","ts":"1467136274.001279"},{"type":"message","user":"U0Y14MWA2","text":"so my take on this is - stick with 1 request at a time for v0.5","ts":"1467136286.001280"},{"type":"message","user":"U0Y14MWA2","text":"and lets add sth like slots w. FIFO for v2","ts":"1467136295.001281"},{"type":"message","user":"U0XPR4NP4","text":"Absolutely, this is all post 0.5","ts":"1467136300.001282"},{"type":"message","user":"U0Y14MWA2","text":"but for v2 we do need also signatures","ts":"1467136315.001283"},{"type":"message","user":"U0Y14MWA2","text":"clients' signatures","ts":"1467136321.001284"},{"type":"message","user":"U0XQ35CDD","text":"(All the work from now on is post v0.5 by the way.)","ts":"1467136326.001285"},{"type":"message","user":"U0Y14MWA2","text":"allowing multiple outstanding requests (w. FIFO) is a noble idea","ts":"1467136343.001286"},{"type":"message","user":"U0Y14MWA2","text":"and should be implemented :slightly_smiling_face:","ts":"1467136347.001287"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I think we can definitely preserve the FIFO nature with slots.  I will think on switching to a counter over a timestamp, as although I think it may have some problems, it may have fewer than the timestamp.","ts":"1467136424.001288"},{"type":"message","user":"U0Y14MWA2","text":"BTW, guys do have a look at ZAB paper and making BFT systems tolerate byzantine faults papers","ts":"1467136439.001289"},{"type":"message","user":"U0Y14MWA2","text":"both are good stuff","ts":"1467136444.001290"},{"type":"message","user":"U0KM0C3M3","text":"is there an interface specification for implementing a new\/different consensus algorithm?","ts":"1467136464.001291"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XQ35CDD> is the expert on specs :slightly_smiling_face:","ts":"1467136496.001292"},{"type":"message","user":"U0Y14MWA2","text":"short answer is - yes","ts":"1467136516.001293"},{"type":"message","user":"U0XPR4NP4","text":"<@U0KM0C3M3>: There is a protocol spec, but I think it is unfortunately a little outdated","ts":"1467136528.001294"},{"type":"message","user":"U0KM0C3M3","text":":point_left: :point_right:","ts":"1467136532.001295"},{"type":"message","user":"U0KM0C3M3","text":":slightly_smiling_face:","ts":"1467136536.001296"},{"type":"message","user":"U0XQ35CDD","text":"Look into the spec, section 3.4","ts":"1467136549.001297"},{"type":"message","user":"U0Y14MWA2","text":"see sec 5 of <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/protocol-spec.md>","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/protocol-spec.md","text":"fabric - Fabric is a blockchain project in Incubation proposed to the community and documented at <https:\/\/goo.gl\/RYQZ5N>. Information on what Incubation entails can be found in the Hyperledger Proj...","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/protocol-spec.md","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1467136552.001298"},{"type":"message","user":"U0XQ35CDD","text":"But as Marko said it is outdated.","ts":"1467136555.001300"},{"type":"message","user":"U0Y14MWA2","text":"for the outdated hint","ts":"1467136556.001301"},{"type":"message","user":"U0Y14MWA2","text":"for an outlook in how the interface will look like - down the road have a look here <https:\/\/github.com\/hyperledger\/fabric\/wiki\/Next-Consensus-Architecture-Proposal>","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/wiki\/Next-Consensus-Architecture-Proposal","text":"fabric - Fabric is a blockchain project in Incubation proposed to the community and documented at <https:\/\/goo.gl\/RYQZ5N>. Information on what Incubation entails can be found in the Hyperledger Proj...","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/wiki\/Next-Consensus-Architecture-Proposal","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1467136606.001302"},{"type":"message","user":"U0Y14MWA2","text":"so we have an outlook and dated specs - but not the current one :slightly_smiling_face:","ts":"1467136629.001304"},{"type":"message","user":"U0KM0C3M3","text":"<http:\/\/www.swirlds.com\/developer-resources\/whitepapers\/> - crossposting here from <#C0J02NU1E>","attachments":[{"service_name":"Swirlds","title":"Whitepapers - Swirlds","title_link":"http:\/\/www.swirlds.com\/developer-resources\/whitepapers\/","text":"See the latest whitepapers about Swirlds such as: Overview of Swirlds Hashgraph, Swirlds and Sybil Attacks, and Dictatorship, Democracy, and Blockchain.","fallback":"Swirlds: Whitepapers - Swirlds","thumb_url":"http:\/\/www.swirlds.com\/wp-content\/uploads\/2016\/05\/Fotolia_101984598_Subscription_XXL.jpg","from_url":"http:\/\/www.swirlds.com\/developer-resources\/whitepapers\/","thumb_width":1000,"thumb_height":667,"service_icon":"http:\/\/www.swirlds.com\/favicon\/apple-touch-icon-57x57.png","id":1}],"ts":"1467136676.001305"},{"type":"message","user":"U0Y14MWA2","text":"that one is still on my \"to read\" list...","ts":"1467136718.001307"},{"type":"message","user":"U0XQ35CDD","text":"I am still trying to wrap my head around the \"Attacking PBFT\" section in Miller's paper, but that's another story I guess.","ts":"1467136806.001308"},{"type":"message","user":"U0Y14MWA2","text":"in the meantime - informed, brief reviews welcome here","ts":"1467136807.001309"},{"type":"message","user":"U0Y14MWA2","text":"or perhaps we can open a #reading-section channel :slightly_smiling_face:","ts":"1467136893.001310"},{"user":"U18U45W48","type":"message","subtype":"channel_join","text":"<@U18U45W48|davidjhowie> has joined the channel","ts":"1467151945.001311"},{"type":"message","user":"U0XR6J961","text":"hi guys","ts":"1467205361.001312"},{"type":"message","user":"U0XQ35CDD","text":"hi","ts":"1467205390.001313"},{"type":"message","user":"U0XR6J961","text":"so what's next on the agenda?","ts":"1467206245.001314"},{"type":"message","user":"U0XR6J961","text":"i played around with performance measurement without chaincode","ts":"1467206261.001315"},{"type":"message","user":"U0XQ35CDD","text":"I saw the numbers, 4K tps","edited":{"user":"U0XQ35CDD","ts":"1467206285.000000"},"ts":"1467206276.001316"},{"type":"message","user":"U0XR6J961","text":"yep","ts":"1467206279.001317"},{"type":"message","user":"U0XQ35CDD","text":"So I'm working on unifying obc-batch and PBFT piece by piece. Working on this with Jason to make sure I don't break his work.","ts":"1467206340.001319"},{"type":"message","user":"U0UGH3X7X","text":"per binh, we also need to come up with list of v2 work items and add them to <https:\/\/github.com\/hyperledger\/fabric\/wiki\/Fabric-Next>","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/wiki\/Fabric-Next","text":"fabric - Fabric is a blockchain project in Incubation proposed to the community and documented at <https:\/\/goo.gl\/RYQZ5N>. Information on what Incubation entails can be found in the Hyperledger Proj...","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/wiki\/Fabric-Next","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1467206413.001320"},{"type":"message","user":"U0XR6J961","text":"for our stuff or for everybody?","ts":"1467206473.001322"},{"type":"message","user":"U0XR6J961","text":"oh this is super high level stuff","ts":"1467206505.001323"},{"type":"message","user":"U0UGH3X7X","text":"for consensus specifically but nothing that says we can't add other requirements","ts":"1467206522.001324"},{"type":"message","user":"U0UGH3X7X","text":"<@U0Y14MWA2>, <@U0XV1HDL3>  need your input as well ^^^","ts":"1467206713.001325"},{"type":"message","user":"U0Y14MWA2","text":"1) come up with a centralized consensus service implementation (single consenter)","ts":"1467206788.001326"},{"type":"message","user":"U0Y14MWA2","text":"from that point on we split peer development and consensus development in parallel","ts":"1467206807.001327"},{"type":"message","user":"U0Y14MWA2","text":"2) work on peer implementation per design document","ts":"1467206842.001328"},{"type":"message","user":"U0Y14MWA2","text":"3) work on extracting PBFT from the current codebase as the consensus service","ts":"1467206862.001329"},{"type":"message","user":"U0Y14MWA2","text":"2 and 3 are in parallel","ts":"1467206868.001330"},{"type":"message","user":"U0Y14MWA2","text":"let me know if I should suggest breaking 2 and 3 into more details or is this sufficient","ts":"1467206887.001331"},{"type":"message","user":"U0UGH3X7X","text":"more details always welcome :slightly_smiling_face:  will help with prioritization","ts":"1467206933.001332"},{"type":"message","user":"U0Y14MWA2","text":"for 2)","ts":"1467206957.001333"},{"type":"message","user":"U0Y14MWA2","text":"2a) implement basic peer level protocols (Sections 1-5). Haifa Research Lab will also work in paralel on peer-to-peer communication facilities we need to see how do we integrate with them","ts":"1467207004.001334"},{"type":"message","user":"U0UGH3X7X","text":"also <@U0PB67X4K> has requirements for v2 implementation ?","ts":"1467207007.001335"},{"type":"message","user":"U0Y14MWA2","text":"2b) add peer reconfiguration","ts":"1467207011.001336"},{"type":"message","user":"U0Y14MWA2","text":"2c) add support for confidential chaincodes","ts":"1467207034.001337"},{"type":"message","user":"U0Y14MWA2","text":"3a) start by extracting stuff from current codebase","ts":"1467207103.001338"},{"type":"message","user":"U0Y14MWA2","text":"3b) perhaps plug-in apache kafka as a pilot distributed consensus service (although crash-tolerant)","ts":"1467207132.001339"},{"type":"message","user":"U0XR6J961","text":"are we concerned about confidential chaincodes?","ts":"1467207139.001340"},{"type":"message","user":"U0Y14MWA2","text":"3c) go to more elaborate protocols instead of PBFT","ts":"1467207153.001341"},{"type":"message","user":"U0KM61BCP","text":"+1 I would like to see us avoid rolling our own messaging","ts":"1467207167.001342"},{"type":"message","user":"U0XR6J961","text":"so who is implementing the submitting peer and endorser part?","ts":"1467207173.001343"},{"type":"message","user":"U0KM61BCP","text":"kafka, 0mq, NATS","ts":"1467207188.001344"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XR6J961> yes we are - we will have some fabric level support for them - we need to support confidential stuff","ts":"1467207213.001345"},{"type":"message","user":"U0KM61BCP","text":"there are a number of viable alternatives that would be far more robust than anything we might write","ts":"1467207217.001346"},{"type":"message","user":"U0Y14MWA2","text":"<@U0KM61BCP> absolutely, the problem is none of these is byzantine fault tolerant so none of these is really ideal for HL fabric","ts":"1467207240.001347"},{"type":"message","user":"U0Y14MWA2","text":"so we will have to be building in parallel our own stuff","ts":"1467207249.001348"},{"type":"message","user":"U0Y14MWA2","text":"that is hopefully going to become the standard (state-of-the-art) as much as these other things mentioned above are (in the crash-recovery world)","ts":"1467207282.001349"},{"type":"message","user":"U0KM61BCP","text":"and the messaging itself needs to be BFT?","ts":"1467207295.001350"},{"type":"message","user":"U0KM61BCP","text":"because why?","ts":"1467207298.001351"},{"type":"message","user":"U0Y14MWA2","text":"no it does not","ts":"1467207301.001352"},{"type":"message","user":"U0KM61BCP","text":"exactly","ts":"1467207309.001353"},{"type":"message","user":"U0Y14MWA2","text":"we were talking on diff level of abstractions - sorry","ts":"1467207321.001354"},{"type":"message","user":"U0Y14MWA2","text":"when I said Kafka, I really meant kafka as the consensus service","ts":"1467207334.001355"},{"type":"message","user":"U0Y14MWA2","text":"because the API is really similar","ts":"1467207340.001356"},{"type":"message","user":"U0Y14MWA2","text":"except for the hashchain which should not be difficult to add","ts":"1467207350.001357"},{"type":"message","user":"U0XR6J961","text":"i wonder who will implement the submitting peer","ts":"1467207410.001358"},{"type":"message","user":"U0XR6J961","text":"and the endorsers","ts":"1467207426.001359"},{"type":"message","user":"U0Y14MWA2","text":"this we need to decide... How do we split current dev set and how do we get it reinforced","ts":"1467207464.001360"},{"type":"message","user":"U0Y14MWA2","text":"I presume we start from dev preferences?","ts":"1467207497.001361"},{"type":"message","user":"U0XR6J961","text":"well we have a lot of work just working on pbft","ts":"1467207498.001362"},{"type":"message","user":"U0UGH3X7X","text":"no one signed up and\/or assigned to anything yet ... at this point,  get the components sync designs and list items for v2","ts":"1467207530.001363"},{"type":"message","user":"U0Y14MWA2","text":"for peer level stuff I expect significant contributions from Haifa folks","ts":"1467207549.001364"},{"type":"message","user":"U0Y14MWA2","text":"but it would be great we get community involvement","ts":"1467207558.001365"},{"type":"message","user":"U0Y14MWA2","text":"I am trying to get BFT-smart folks on board HL fabric as well","ts":"1467207570.001366"},{"type":"message","user":"U0Y14MWA2","text":"re Haifaalthough","ts":"1467207594.001367"},{"type":"message","user":"U0Y14MWA2","text":"sorry, re Haifa: they want to focus more on communication","ts":"1467207610.001368"},{"type":"message","user":"U0Y14MWA2","text":"and for submitter endorser perhaps the logical choice is to ask ledger\/execution folks from v0.5 to help","ts":"1467207646.001369"},{"type":"message","user":"U0XR6J961","text":"endorser interface is just chaincode + network","ts":"1467207737.001370"},{"type":"message","user":"U0Y14MWA2","text":"true... + peer's interface to ledger","ts":"1467207772.001371"},{"type":"message","user":"U0Y14MWA2","text":"hence it is chaincode (execution) + network + ledger","ts":"1467207783.001372"},{"type":"message","user":"U0Y14MWA2","text":"ledger seems critical there with all the readset\/writeset\/stateUpdate stuff","ts":"1467207819.001373"},{"type":"message","user":"U0Y14MWA2","text":"for network we probably should have Jeff and other folks responsible for messaging now working with Haifa","ts":"1467207859.001374"},{"type":"message","user":"U12AHQ3NK","text":"Hi...i am using batch pbft with 4 peers and a CA..I was actually doin the performance analysis by setting the batch size to 100.. I fired 100 transactions in a loop and noticed that the block got generated in 6s..then I just fired a single transaction and it took 15s to commit the block..so how is the batch size and time to commit a block related? ","ts":"1467211099.001375"},{"type":"message","user":"U0UGH3X7X","text":"they are not ... batchsize is used to batch incoming requests before sending them through consensus.  how long the chaincode takes to execute is another matter","ts":"1467211242.001376"},{"type":"message","user":"U12AHQ3NK","text":"Ohh and what is the batch timeout exactly?","ts":"1467212079.001377"},{"type":"message","user":"U0UGH3X7X","text":"when the timeout fires,  the batch of requests is processed even if we do not have batchsize requests inputted yet","edited":{"user":"U0UGH3X7X","ts":"1467212268.000000"},"ts":"1467212170.001378"},{"type":"message","user":"U12AHQ3NK","text":"ohh","ts":"1467212377.001380"},{"type":"message","user":"U12AHQ3NK","text":"thanks <@U0UGH3X7X> ","ts":"1467212388.001381"},{"type":"message","user":"U0UGH3X7X","text":"np ... check out PR #2003 and the <#C113WK2A1>  channel","ts":"1467212481.001382"},{"user":"U1MDQRX4P","type":"message","subtype":"channel_join","text":"<@U1MDQRX4P|iko> has joined the channel","ts":"1467229431.001383"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: Are you around?","ts":"1467293815.001384"},{"type":"message","user":"U0XR6J961","text":"i am!","ts":"1467293833.001385"},{"type":"message","user":"U0XPR4NP4","text":"You haven't spoken up on <https:\/\/github.com\/hyperledger\/fabric\/issues\/2053> yet.  I'm battling back in forth in my head over which answer I think is best, was wondering your thoughts on TCP vs UDP","attachments":[{"service_name":"GitHub","title":"Reliance on gRPC ordering in consensus \u00b7 Issue #2053 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/issues\/2053","text":"Description The gRPC protocol guarantees us that, for a single stream, messages will be delivered in order. The PBFT protocol assumes that message transmission is 'reliable', but not that message...","fallback":"GitHub: Reliance on gRPC ordering in consensus \u00b7 Issue #2053 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/7431583?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/issues\/2053","thumb_width":420,"thumb_height":420,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1467293904.001386"},{"type":"message","user":"U0XR6J961","text":"well, i don't think we should go to udp","ts":"1467294086.001388"},{"type":"message","user":"U0XR6J961","text":"there doesn't seem to be any reason","ts":"1467294103.001389"},{"type":"message","user":"U0XR6J961","text":"if we have an obvious optimization by relying on (typically) sequential delivery, we should go for it","ts":"1467294174.001390"},{"type":"message","user":"U0XPR4NP4","text":"Okay.  I think that's certainly the easiest path","ts":"1467294292.001391"},{"type":"message","user":"U0XPR4NP4","text":"It seems to me, like ultimately, we could have a faster system if we built it on UDP, and clearly PBFT was designed for a UDP network.  We've already implemented a lot of the things like windowing which would be needed for UDP to work.","ts":"1467294345.001392"},{"type":"message","user":"U0XPR4NP4","text":"But, there's certainly something to be said for making our lives easier, and we're a long way from TCP being our bottleneck at this point.","ts":"1467294394.001393"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> Care to voice your opinion in 2053?","ts":"1467294799.001394"},{"type":"message","user":"U0XR6J961","text":"i don't even know what we are discussing","ts":"1467295474.001395"},{"type":"message","user":"U0XPR4NP4","text":"Basically \"Should we try to keep the code tolerant of non sequential delivery?\"","ts":"1467295564.001396"},{"type":"message","user":"U0XR6J961","text":"well, do we have anything actionable?","ts":"1467295701.001397"},{"type":"message","user":"U0PB67X4K","text":"are we trying to talk about the \"new\" mysterious code for the mythical 2.0 architecture?","ts":"1467295739.001398"},{"type":"message","user":"U0XPR4NP4","text":"<@U0PB67X4K>: I was trying to dispose of some technical debt we've built up, namely some byzantine scenarios which we're vulnerable to.  The implementation is much simpler if we can rely on FIFO links, but, the PBFT paper does not..","ts":"1467295912.001399"},{"type":"message","user":"U0XR6J961","text":"for example?","ts":"1467295968.001400"},{"type":"message","user":"U0XQ35CDD","text":"\"If the next pre-prepare that you receive from the primary doesn't correspond to seqNo 11 (i.e. it creates a hole), you should view-change.\"","ts":"1467295996.001401"},{"type":"message","user":"U0XPR4NP4","text":"The question is, should we try to keep things in a state that, if we so chose, we could switch a non FIFO link network protocol (like UDP), or embrace the fact that we're running over TCP\/gRPC and take the optimizations.","ts":"1467295998.001402"},{"type":"message","user":"U0XR6J961","text":"i think it is much harder to reason about changes","ts":"1467296026.001403"},{"type":"message","user":"U0XPR4NP4","text":"Is there anything in the code today that relies on FIFO ordering? Nothing jumped to mind for me","ts":"1467296055.001404"},{"type":"message","user":"U0PB67X4K","text":"in either case, you need to check for missing sequence numbers so you are always tracking the last seq no you received \/ processed.  As far as I know, gRPC does not give you access to seq no and the gRPC link could break","ts":"1467296073.001405"},{"type":"message","user":"U0XPR4NP4","text":"This is a PBFT seqNo?","edited":{"user":"U0XPR4NP4","ts":"1467296105.000000"},"ts":"1467296087.001406"},{"type":"message","user":"U0PB67X4K","text":"right - my point is you still need to track the last one received no matter what even on a FIFO link","ts":"1467296114.001408"},{"type":"message","user":"U0PB67X4K","text":"maybe you don't get them out of order, but you could miss them","ts":"1467296134.001409"},{"type":"message","user":"U0XPR4NP4","text":"Certainly.  But, if you are missing seqNo 10, and you see seqNo 11, then you know you missed something, with ordering.","ts":"1467296144.001410"},{"type":"message","user":"U0PB67X4K","text":"but the seqNo is in the PBFT protocol message anyway, correct?  I am most likely missing something here","ts":"1467296201.001411"},{"type":"message","user":"U0XR6J961","text":"jyellick: but you also may have been disconnected and reconnected?","ts":"1467296225.001412"},{"type":"message","user":"U0XPR4NP4","text":"Yes, the seqNo is part of the PBFT protocol message, and PBFT assumes that these sequence numbers will arrive in any order, and so long as they are within a sliding window, we are able to process them.","ts":"1467296249.001413"},{"type":"message","user":"U0XQ35CDD","text":"Correct, but he'll know he missed something and, maybe kick in state transfer, instead of thinking that this is normal due to messages arriving out of order.","edited":{"user":"U0XQ35CDD","ts":"1467296370.000000"},"ts":"1467296265.001414"},{"type":"message","user":"U0PB67X4K","text":"you can't rely on gRPC for sequence numbers - you can only rely on the fact that if a stream stays connected messages sent over the stream will be delivered in order (no concurrent access)","ts":"1467296277.001415"},{"type":"message","user":"U0XQ35CDD","text":"Ultimately, a FIFO link allows you to detect that things are abnormal faster.","ts":"1467296289.001416"},{"type":"message","user":"U0PB67X4K","text":"but if the link breaks, you have no idea what you missed","ts":"1467296289.001417"},{"type":"message","user":"U0PB67X4K","text":"<@U0XQ35CDD> - I think I agree with that","ts":"1467296307.001418"},{"type":"message","user":"U0PB67X4K","text":"and you may not need to try to sort - just track the last protocol seqNO received","ts":"1467296326.001419"},{"type":"message","user":"U0XPR4NP4","text":"But you can detect that the link broke, and take appropriate action.  And when the link is re-established, we know the first message we get, is the lowest seqNo we will receive from that link","ts":"1467296328.001420"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1467296374.001422"},{"type":"message","user":"U0PB67X4K","text":"ah - gotcha - and then you can \"request\" the missing seqNos since you don't you won't get them over the re-established link","ts":"1467296392.001423"},{"type":"message","user":"U0XR6J961","text":"but would that simplify code?","ts":"1467296393.001424"},{"type":"message","user":"U0PB67X4K","text":"do we wait around today to see if out of order messages come in before requesting them?  Or do we not request them directly at all?","ts":"1467296496.001425"},{"type":"message","user":"U0XPR4NP4","text":"We wait around for them.  There's no checking for ordering in the code today.  Basically, if there are enough healthy nodes, the network moves on, and eventually we notice, that enough people are talking about sequence numbers outside of our moving window, that we must be behind, and then do some recovery stuff.  If there aren't enough healthy nodes to keep the network going, we do a view change, which basically picks a new starting sequence number and state that everyone can agree to work forward from.","ts":"1467296947.001426"},{"type":"message","user":"U0PB67X4K","text":"well we can improve that  :wink:","ts":"1467297026.001427"},{"type":"message","user":"U0XPR4NP4","text":"The piece of code I was working on, was to solve a censorship problem.  From the PBFT paper, clients are supposed to only have one request in flight, in this way, each client gets a request timer, and if the request is censored, then a view change happens.  For us, each VP is a client, so, having only 1 request in flight is a non-starter, so, we needed to basically pretend each VP is multiple clients.  In the unordered case, there's some complexity, where we can't necessarily expect requests we send to the primary for ordering to be ordered in the same order we sent them.  It's doable, but trickier than assuming that if the primary sends out of order requests, or skips one, that we immediately know there's a problem, rather than having to wait for the timer to pop.","ts":"1467297144.001428"},{"type":"message","user":"U0PB67X4K","text":"gotcha - this makes sense to me -   `but trickier than assuming that if the primary sends out of order requests, or skips one, that we immediately know there's a problem, rather than having to wait for the timer to pop.`","ts":"1467297237.001429"},{"type":"message","user":"U0PB67X4K","text":"that what I was getting at.  at that should be true for gRPC assuming you are correct in the order you send  :wink:","ts":"1467297267.001430"},{"type":"message","user":"U0PB67X4K","text":"meaning your inputs from the primary to the stream must be in order to start with  :wink:","ts":"1467297309.001431"},{"type":"message","user":"U0PB67X4K","text":"this is how pub\/sub protocols general work as well FWIW","ts":"1467297356.001432"},{"type":"message","user":"U0XPR4NP4","text":"Exactly.  Simplifying our lives not only makes the code easier, but probably reduces bugs, may improve execution times, etc.  So, if we've got FIFO links, I think we should definitely use them.  My question was, talking with some of the distributed guys, I've heard opinions like \"to ever seriously scale, you must be able to do UDP\".  I think we could switch to UDP today, without too much headache, but I think we need to commit one way or the other.","ts":"1467297421.001433"},{"type":"message","user":"U0PB67X4K","text":"Not sure you have to go to UDP.  UDP is probably better if you are going to \"broadcast\" from a single peer to tons of peers - but you can also go with more of a mesh network as well where not all peers are connected to each other directly","ts":"1467297561.001434"},{"type":"message","user":"U0PB67X4K","text":"If we move to more of a \"broadcast\" model, you could follow the model where if you see a message for the first time you re-broadcast it","ts":"1467297605.001435"},{"type":"message","user":"U0XPR4NP4","text":"PBFT is certainly broadcast heavy, there is no normal path unicasting that I can think of.","ts":"1467297614.001436"},{"type":"message","user":"U0PB67X4K","text":"I think we need to look at how we really do \"atomic broadcast\" if we are going that route for 2.0 and where something like PBFT fits in (if anywhere).  Clearly if you have a centralize consensus service you could use PBFT among the consenter processes, but I would assume we would move to a broadcast model for deliver to committers \/ followers","ts":"1467297730.001437"},{"type":"message","user":"U0PB67X4K","text":"That's what I'd like to see laid out for this 2.0 piece.  We should be completely agnostic of blockchain, MVCC, etc.  We need to prove out a simple \"centralized\" broadcast service for \"log\" replication without caring about what's in the log message nor what the state machine which process the \"log\" on the committer does","edited":{"user":"U0PB67X4K","ts":"1467297848.000000"},"ts":"1467297829.001438"},{"type":"message","user":"U0XPR4NP4","text":"+1 to that.  It terrifies me when I see people making comments about how \"consensus should filter out bad transactions\"","ts":"1467297878.001440"},{"type":"message","user":"U0XPR4NP4","text":"Consensus should do log replication, so that everyone gets the same order of, whatever it is, we don't care.","ts":"1467297908.001441"},{"type":"message","user":"U0XR6J961","text":"well, you'd like that there is admission control","ts":"1467297925.001442"},{"type":"message","user":"U0PB67X4K","text":"I would start simple - build a simple broadcast service and I personally would probably use something like Raft between the consenters and broadcast between the consenter and the committers","ts":"1467297929.001443"},{"type":"message","user":"U0PB67X4K","text":"then build on top of that","ts":"1467297944.001444"},{"type":"message","user":"U0XR6J961","text":"well go ahead and implement raft","ts":"1467297946.001445"},{"type":"message","user":"U0XR6J961","text":"because we thought pbft was simple, and it is real difficult","ts":"1467297958.001446"},{"type":"message","user":"U0PB67X4K","text":"<@U0XR6J961> - actually I would just take the etcd\/raft implementation.  I am not saying ti would be the final thing, just a simple way for a dummy like me to take code that exists to prover out a consenter service","ts":"1467298011.001447"},{"type":"message","user":"U0PB67X4K","text":"we could actually use the PBFT implementation today in place of Raft I just have no idea how to extract it from the fabric code  :wink:","ts":"1467298039.001448"},{"type":"message","user":"U0PB67X4K","text":"<https:\/\/godoc.org\/github.com\/coreos\/etcd\/raft>","attachments":[{"title":"Package raft","title_link":"https:\/\/godoc.org\/github.com\/coreos\/etcd\/raft","text":"Package raft sends and receives messages in the Protocol Buffer format defined in the raftpb package.","fallback":"Package raft","from_url":"https:\/\/godoc.org\/github.com\/coreos\/etcd\/raft","service_icon":"https:\/\/godoc.org\/favicon.ico","service_name":"godoc.org","id":1}],"ts":"1467298115.001449"},{"type":"message","user":"U0PB67X4K","text":"But in the end, all I am really saying is to start with the basic \"log\" replication stuff using a consenter service rather than trying to do everything at once.  Incremental build out rather than extract and retrofit","ts":"1467298165.001451"},{"type":"message","user":"U0XPR4NP4","text":"So, going way back to my original question, should we assume FIFO links going forward or not? The unfortunate answer it sounds to me like, is \"We don't know what this future thing looks like, so let's keep our options open\"","ts":"1467298245.001452"},{"type":"message","user":"U0PB67X4K","text":"the question is are you trying to fix the exiting implementation in hopes that we use it in the future or just trying to fix \/ simplify the existing implementation?","ts":"1467298340.001453"},{"type":"message","user":"U0XPR4NP4","text":"The former (fix it, under the hope that it is used in the future)","edited":{"user":"U0XPR4NP4","ts":"1467298386.000000"},"ts":"1467298361.001454"},{"type":"message","user":"U0XPR4NP4","text":"Frankly, if we don't think (there's at least a decent chance) we'll be using the existing implementation in the future, why bother doing any work on it at all?","edited":{"user":"U0XPR4NP4","ts":"1467298462.000000"},"ts":"1467298416.001456"},{"type":"message","user":"U0PB67X4K","text":"agreed.  if we can give you guys a chance to come up for air, we need to have some discussions about what 2.0 architecture really looks like","ts":"1467298464.001458"},{"type":"message","user":"U0XPR4NP4","text":"Well, we are heads down on master, I don't think anyone is on the 0.5 branch right now.  So, if we can't say whether we see a future for the consensus code in master, then I don't see any reason we should not have time for this discussion.","ts":"1467298686.001459"},{"type":"message","user":"U0PB67X4K","text":"okay - cool.   I'd love to be a part of it, but unfortunately I am more or less out the rest of today and tomorrow.  but I'd love to see some more details on the underpinnings of the architecture and discuss an incremental build plan for a modular architecture  :wink:","ts":"1467298802.001460"},{"type":"message","user":"U0XQ35CDD","text":"Can we still make the case for this `validate` method, or should I remove it while I'm doing the refactoring? <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/consensus\/obcpbft\/obc-batch.go#L199>","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/consensus\/obcpbft\/obc-batch.go#L199","text":"fabric - Fabric is a blockchain project in Incubation proposed to the community and documented at <https:\/\/goo.gl\/RYQZ5N>. Information on what Incubation entails can be found in the Hyperledger Proj...","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/consensus\/obcpbft\/obc-batch.go#L199","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1467316540.001461"},{"type":"message","user":"U0XPR4NP4","text":"My vote is kill it.  I don't see how this is useful to us","ts":"1467317165.001463","reactions":[{"name":"+1","users":["U0PB67X4K"],"count":1}]},{"type":"message","user":"U0UGH3X7X","text":"+1","ts":"1467317220.001464"},{"type":"message","user":"U0Y14MWA2","text":"<@U0PB67X4K> if one wants to try a crash-fault tolerant protocol in fabric v2 in place of a consensus service then one should not use etcd\/raft or anything but Kafka","ts":"1467320729.001465"},{"type":"message","user":"U0Y14MWA2","text":"which needs to be hacked just to output the hashchain instead of a simple total order of requests","ts":"1467320756.001466"},{"type":"message","user":"U0Y14MWA2","text":"I am talking single-topic single-partition Kafka","ts":"1467320771.001467"},{"type":"message","user":"U0Y14MWA2","text":"as Kafka already functions as we want consensus service to function (etcd\/raft function differently)","ts":"1467320821.001468"},{"type":"message","user":"U0Y14MWA2","text":"of course we need BFT Kafka - which does not exist, and we can start from making one around our v0.5 PBFT code","ts":"1467320913.001469"},{"type":"message","user":"U0Y14MWA2","text":"later on we replace this with a more scalable protocol than PBFT","ts":"1467320935.001470"},{"type":"message","user":"U0PB67X4K","text":"<@U0Y14MWA2>:   Agreed on Kafka and it would not be hard to output the hash chain using Kafka.   My point on etcd\/raft was slightly different though.   Kafka use ZK for some pieces of coordination (although they have lots of other stuff built into the brokers as well) and unfortunately it has proven hard to completely eliminate the tie to ZK with Kafka.   My (potentially misguided) mention of Raft assumed that we built our own \"broadcast\" piece (i.e. our own Kafka) and that we would still need a mechanism to coordinate those processes (which is where I would the the Raft library to start with)","edited":{"user":"U0PB67X4K","ts":"1467367465.000000"},"ts":"1467367372.001471"},{"type":"message","user":"U0PB67X4K","text":"I don't believe Raft is the answer, but if I can take existing libraries and piece them together to prove out a basic concept, that is the approach I generally take.","ts":"1467367416.001472"},{"user":"U1B5DPRLG","type":"message","subtype":"channel_join","text":"<@U1B5DPRLG|lhaskins> has joined the channel","ts":"1467395864.001474"},{"user":"U1N8VD2CE","type":"message","subtype":"channel_join","text":"<@U1N8VD2CE|sunsay00> has joined the channel","ts":"1467407962.001475"},{"type":"message","user":"U0ULX737C","text":"<@U0Y14MWA2>: <@U0XR6J961> should wait for Honey badger  open source","ts":"1467415077.001476"},{"type":"message","user":"U0XV1HDL3","text":"HoneyBadger code is on github, just in a different branch - <https:\/\/github.com\/amiller\/HoneyBadgerBFT\/tree\/another-dev>","attachments":[{"service_name":"GitHub","title":"amiller\/HoneyBadgerBFT","title_link":"https:\/\/github.com\/amiller\/HoneyBadgerBFT\/tree\/another-dev","text":"HoneyBadgerBFT - The Honey Badger of BFT Protocols","fallback":"GitHub: amiller\/HoneyBadgerBFT","thumb_url":"https:\/\/avatars1.githubusercontent.com\/u\/71644?v=3&s=400","from_url":"https:\/\/github.com\/amiller\/HoneyBadgerBFT\/tree\/another-dev","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1467439733.001477"},{"type":"message","user":"U0XR6J961","text":"so with consensus v2, where do we store our consensus config, i.e. replica list, etc.","ts":"1467641400.001479"},{"type":"message","user":"U0XR6J961","text":"do we maintain our own mini-ledger?","ts":"1467641409.001480"},{"type":"message","user":"U0XR6J961","text":"do we persist into a database?","ts":"1467641436.001481"},{"type":"message","user":"U0XR6J961","text":"i'd persist into text files","ts":"1467641454.001482"},{"type":"message","user":"U0XR6J961","text":"jyellick: you around?","ts":"1467644651.001483"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> USA holiday today, but can maybe help quickly ","ts":"1467655362.001484"},{"user":"U1N4KNWP2","type":"message","subtype":"channel_join","text":"<@U1N4KNWP2|thomas.leplus> has joined the channel","ts":"1467679241.001485"},{"type":"message","user":"U0XR6J961","text":"hi","ts":"1467719307.001486"},{"type":"message","user":"U0XPR4NP4","text":"Hey <@U0XR6J961>, did you get what you needed yesterday?","ts":"1467726296.001487"},{"type":"message","user":"U0XR6J961","text":"hi jyellick","ts":"1467726309.001488"},{"type":"message","user":"U0XR6J961","text":"i forgot what it was about","ts":"1467726314.001489"},{"type":"message","user":"U0XR6J961","text":"i'm implementing a separate consensus peer binary","ts":"1467726324.001490"},{"type":"message","user":"U0XPR4NP4","text":"Neat, going to implement the single consenter consensus? Or are you porting PBFT to start?","ts":"1467726416.001491"},{"type":"message","user":"U0XR6J961","text":"using our obcpbft","ts":"1467726429.001492"},{"type":"message","user":"U0XR6J961","text":"so much crusty interface","ts":"1467726439.001493"},{"type":"message","user":"U0XR6J961","text":"so beh","ts":"1467726442.001494"},{"type":"message","user":"U0XPR4NP4","text":"Yeah, hopefully we can clean that interface, Kostas was working on switching the PrePrepare to carry a RequestBlock instead of a Request, once he finishes this, I think we'll be able to finally merge batch\/core and clean much of that up]","ts":"1467726702.001495"},{"type":"message","user":"U0XR6J961","text":"i'm trying to decide where to put the grpc service for consensus","ts":"1467727678.001496"},{"type":"message","user":"U0XR6J961","text":"does it go into pbft or outside?","ts":"1467727683.001497"},{"type":"message","user":"U0XR6J961","text":"it feels like it should be part of the consensus implementation","ts":"1467727696.001498"},{"type":"message","user":"U0XR6J961","text":"i.e. connection management","ts":"1467727722.001499"},{"type":"message","user":"U0XPR4NP4","text":"I'd assume you're trying to keep it pluggable so it would be relatively easy to drop another implementation in? I would think gRPC should live on the outside","ts":"1467728142.001500"},{"type":"message","user":"U0XPR4NP4","text":"Though certainly you might need to have some hooks for the connection\/disconnection events.","ts":"1467728163.001501"},{"type":"message","user":"U0XR6J961","text":"i want to avoid excessive marshalling\/unmarshalling","ts":"1467728663.001502"},{"type":"message","user":"U0XR6J961","text":"which currently is the bottleneck","ts":"1467728671.001503"},{"user":"U13TWBRBL","type":"message","subtype":"channel_join","text":"<@U13TWBRBL|jzhang> has joined the channel","ts":"1467729989.001504"},{"type":"message","user":"U0XPR4NP4","text":"Other than the batch marshal\/unmarshal, where are we doing that?","ts":"1467730240.001505"},{"type":"message","user":"U0XR6J961","text":"i don't know exactly how the composition breaks down","ts":"1467736851.001506"},{"type":"message","user":"U0XR6J961","text":"a lot in hashReq","ts":"1467736861.001507"},{"type":"message","user":"U0XR6J961","text":"and in txID","ts":"1467736868.001508"},{"type":"message","user":"U0XPR4NP4","text":"Ah, yes, we do use the marshaling for computing those digests.  We could certainly write a custom digest of some sort, though it seems debatable whether it would be more efficient than the marshaling","ts":"1467738202.001509"},{"type":"message","user":"U0XR6J961","text":"well we should only hash it once","ts":"1467738394.001510"},{"type":"message","user":"U0XR6J961","text":"jyellick: i'm debating whether the grpc link between peers should receive a stream or send a stream","ts":"1467738439.001511"},{"type":"message","user":"U0XPR4NP4","text":"Hmmm","ts":"1467738458.001512"},{"type":"message","user":"U0XPR4NP4","text":"Obviously they could both work, what do you see as the tradeoffs?","ts":"1467738481.001513"},{"type":"message","user":"U0XR6J961","text":"nothing really","ts":"1467738537.001514"},{"type":"message","user":"U0XR6J961","text":"i'm trying to figure out how structure the code","ts":"1467738557.001515"},{"type":"message","user":"U0XPR4NP4","text":"Presumably this gRPC piece will maintain the point to point links between the peers, and register\/deregister connections as consenters come\/go? Are you not simply lifting this from the existing peer implementation?","ts":"1467738741.001516"},{"type":"message","user":"U0XR6J961","text":"oh no","ts":"1467738981.001517"},{"type":"message","user":"U0XR6J961","text":"absolutely not","ts":"1467738983.001518"},{"type":"message","user":"U0XR6J961","text":"the current peer code is super messy","ts":"1467738990.001519"},{"type":"message","user":"U0XPR4NP4","text":"Fair enough.  Not to add to your troubles, but I think it would be nice to keep the door open to not use gRPC.  Something with true broadcasts might be ultimately what's required for scale.","ts":"1467739090.001520"},{"type":"message","user":"U0XR6J961","text":"what do you mean by true broadcasts?","ts":"1467740159.001521"},{"type":"message","user":"U0XR6J961","text":"RAII is messy :confused:","ts":"1467740689.001522"},{"type":"message","user":"U0XR6J961","text":"jyellick: <https:\/\/github.com\/corecode\/fabric\/tree\/separate-consensus>","attachments":[{"service_name":"GitHub","title":"corecode\/fabric","title_link":"https:\/\/github.com\/corecode\/fabric\/tree\/separate-consensus","text":"Blockchain fabric code","fallback":"GitHub: corecode\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400","from_url":"https:\/\/github.com\/corecode\/fabric\/tree\/separate-consensus","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1467741167.001523"},{"type":"message","user":"U0XR6J961","text":"<@U0XPR4NP4>: it looks quite simple","ts":"1467741379.001525"},{"type":"message","user":"U0XR6J961","text":"of course i didn't run it yet","ts":"1467741384.001526"},{"type":"message","user":"U0XR6J961","text":"i need a solution for defining the replica set","ts":"1467741409.001527"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> By \"true broadcast\" I was thinking something like multicast, though I suppose PBFT assumes message validity because the point to point links are secured by an exchanged symmetric key so maybe this is not an obvious drop in","ts":"1467743184.001528"},{"type":"message","user":"U0XR6J961","text":"wide area multicast?","ts":"1467743208.001529"},{"type":"message","user":"U0XR6J961","text":"that seems like a lot of pain","ts":"1467743214.001530"},{"type":"message","user":"U0XPR4NP4","text":"Could be.  I'm still not sure how people plan to run this, I've not seen anybody actually try to run things other than same physical location.","ts":"1467743676.001531"},{"type":"message","user":"U0XPR4NP4","text":"(Not to say that the WAN scenario isn't coming)","ts":"1467743699.001532"},{"type":"message","user":"U0XR6J961","text":"interesting.","ts":"1467744143.001533"},{"type":"message","user":"U0XPR4NP4","text":"But even ignoring multicast, apparently some other UDP based transport is still on the table, especially as this was the original design for PBFT.","ts":"1467744404.001534"},{"type":"message","user":"U0XR6J961","text":"i wouldn't","ts":"1467745290.001535"},{"type":"message","user":"U0XR6J961","text":"then you need to do DTLS","ts":"1467745296.001536"},{"type":"message","user":"U0XPR4NP4","text":"I'm not too familiar with DTLS, is it painful?","ts":"1467745536.001537"},{"type":"message","user":"U0XR6J961","text":"well, i don't see any benefit","ts":"1467745725.001538"},{"type":"message","user":"U0XR6J961","text":"except for lost packets","ts":"1467745729.001539"},{"type":"message","user":"U0PB67X4K","text":"it is really a question of connection versus connectionless when it comes to TCP or UDP( <@U0XPR4NP4> - DTLS is basically the analog of TLS for UDP).  For WAN-based deployments there is not way to do traditional multicast (since it would be impossible to know what networks \/ switches to broadcast on)","ts":"1467804464.001540"},{"type":"message","user":"U0PB67X4K","text":"<@U0XR6J961> - on the gRPC issue, isn't the question really whether or not we continue to use protobufs as the serialization format?  Technically we should be able to transport the same protobufs over other transports if we ever wanted to given that gRPC is basically protobufs over HTTP\/2  (yes - I know there is an additional serialization for the gRPC stream but in the end what gets delivered to the handlers are protobufs)","ts":"1467804601.001541"},{"type":"message","user":"U0XR6J961","text":"or we transport other data via gRPC","ts":"1467804625.001542"},{"type":"message","user":"U0PB67X4K","text":"well minimally gRPC will require a base protobuf","ts":"1467804649.001543"},{"type":"message","user":"U0XR6J961","text":"i just saw a lot of memory\/GC activity, my suspicion is mostly due to protobufs","ts":"1467804653.001544"},{"type":"message","user":"U0XR6J961","text":"no, gRPC seems to be able to handle other encoders\/decoders","ts":"1467804666.001545"},{"type":"message","user":"U0PB67X4K","text":"well that is technically true I guess, but have you ever seen an example of that?  and I don't believe that there are (any?) libraries \/ generators for anything other than the default protobuf implementation","ts":"1467804835.001546"},{"type":"message","user":"U0XR6J961","text":"just something to keep in mind","ts":"1467804926.001547"},{"type":"message","user":"U0PB67X4K","text":"I am not against swapping out the serialization \/  transport, but in that case we are probably better off just using the raw building blocks (e.g. TCP or HTTP\/2) rather than gRPC  :wink:","ts":"1467805022.001548"},{"type":"message","user":"U0XR6J961","text":"i don't know - it does nice things for us","ts":"1467805150.001549"},{"type":"message","user":"U0PB67X4K","text":"actually - this is kinda interesting - <https:\/\/open.dgraph.io\/post\/rpc-vs-grpc\/>","attachments":[{"title":"Custom encoding: Go implementation in net\/rpc vs grpc and why we switched - Dgraph Blog","title_link":"https:\/\/open.dgraph.io\/post\/rpc-vs-grpc\/","fallback":"Custom encoding: Go implementation in net\/rpc vs grpc and why we switched - Dgraph Blog","image_url":"https:\/\/open.dgraph.io\/images\/martian-encoding.jpg","from_url":"https:\/\/open.dgraph.io\/post\/rpc-vs-grpc\/","image_width":602,"image_height":250,"image_bytes":360963,"service_name":"open.dgraph.io","id":1}],"ts":"1467805575.001550","reactions":[{"name":"cool","users":["U12452RAP"],"count":1}]},{"type":"message","user":"U0XR6J961","text":"jyellick: i just pushed a refactored version of the client","ts":"1467828905.001552"},{"type":"message","user":"U0XR6J961","text":"i think it is getting to a point where it should be able to create a network, but i didn't try that yet","ts":"1467828925.001553"},{"type":"message","user":"U0XR6J961","text":"basically you need to create a local cert + key, and push the certs of all replicas into the persistence store (`data\/config.peers.`)","ts":"1467828978.001554"},{"type":"message","user":"U0XPR4NP4","text":"Neat, that was quick, I'll try to take a look","ts":"1467829192.001555"},{"type":"message","user":"U0XR6J961","text":"i spent most time figuring out tls :slightly_smiling_face:","ts":"1467830910.001556"},{"type":"message","user":"U0XR6J961","text":"yey, getting close","ts":"1467901498.001557"},{"type":"message","user":"U0XR6J961","text":"panic in sign: not implemented","ts":"1467901507.001558"},{"type":"message","user":"U0XR6J961","text":"this is where i don't know what to do","ts":"1467901520.001559"},{"type":"message","user":"U0XR6J961","text":"the crypto layer in fabric is huge and confusing","ts":"1467901536.001560"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I know there are the assorted certificate types, but it seems like we may have to introduce new ones for the consenter\/endorser split?","ts":"1467901584.001561"},{"type":"message","user":"U0XR6J961","text":"hmm","ts":"1467901732.001562"},{"type":"message","user":"U0XR6J961","text":"messages not being broadcast?","ts":"1467901736.001563"},{"type":"message","user":"U0XR6J961","text":"so, we never start our outstanding requests timer when there are outstanding requests","ts":"1467901792.001564"},{"type":"message","user":"U0XR6J961","text":"but we also don't submit them","ts":"1467901797.001565"},{"type":"message","user":"U0XR6J961","text":"should we?","ts":"1467901803.001566"},{"type":"message","user":"U0XR6J961","text":"why is the consensus code still using vp0... etc?","ts":"1467901946.001567"},{"type":"message","user":"U0XR6J961","text":"instead of actual peerids?","ts":"1467901952.001568"},{"type":"message","user":"U0XR6J961","text":"what a mess this is","ts":"1467901956.001569"},{"type":"message","user":"U0XPR4NP4","text":"The outstanding request stuff is definitely pending an overhaul, it is a mess","ts":"1467902210.001570"},{"type":"message","user":"U0XPR4NP4","text":"I've got some outstanding code to fix this","ts":"1467902217.001571"},{"type":"message","user":"U0XPR4NP4","text":"But, I'm waiting for <@U0XQ35CDD> to finish with his work to make the PrePrepare carry a non-opaque RequestBlock instead of a Request, so that we can then merge core\/batch","ts":"1467902282.001572"},{"type":"message","user":"U0XPR4NP4","text":"And I'm not sure what you mean by \"vp0...\" etc.? I see that some in our tests, and, we need to keep a ReplicaID around, so that we can compute the leader after viewchange (for which a peerID wouldn't suffice)","ts":"1467902363.001573"},{"type":"message","user":"U0XR6J961","text":"well the interface sucks","ts":"1467902587.001574"},{"type":"message","user":"U0XR6J961","text":"we require the peerid to match vp%d","ts":"1467902600.001575"},{"type":"message","user":"U0XR6J961","text":"which is pointless","ts":"1467902607.001576"},{"type":"message","user":"U0XPR4NP4","text":"Oh, I thought we killed that","ts":"1467902609.001577"},{"type":"message","user":"U0XR6J961","text":"yea so did i","ts":"1467902613.001578"},{"type":"message","user":"U0XPR4NP4","text":"I thought we have behave tests which verify this","ts":"1467902627.001579"},{"type":"message","user":"U0XR6J961","text":"i wrote code for a whitelist with certificates","ts":"1467902648.001580"},{"type":"message","user":"U0XR6J961","text":"but it doesn't live inside pbft","ts":"1467902658.001581"},{"type":"message","user":"U0XR6J961","text":"maybe eventually we can merge those two codebases as well","ts":"1467902676.001582"},{"type":"message","user":"U0XR6J961","text":"or use a better interface","ts":"1467902683.001583"},{"type":"message","user":"U0XR6J961","text":"now i need to figure out why exec doesn't finish","ts":"1467902700.001584"},{"type":"message","user":"U0XR6J961","text":"oh there is still a reference to tx.Uuid","ts":"1467902768.001585"},{"type":"message","user":"U0XR6J961","text":"how do i post an executedEvent?","ts":"1467902790.001586"},{"type":"message","user":"U0XR6J961","text":"OH, i shouldn't implement the executor interface directly","ts":"1467902869.001587"},{"type":"message","user":"U0XR6J961","text":"we really must stop putting all these interfaces into consenter","ts":"1467902885.001588"},{"type":"message","user":"U0XPR4NP4","text":"Absolutely, that consenter interface is in desperate need of an overhaul","ts":"1467903033.001589"},{"type":"message","user":"U0XPR4NP4","text":"The whole monolithic interface always bugged me.  The thing doing network communication really should not be the thing doing ledger access.  It's odd that those are tied together.","ts":"1467903080.001590"},{"type":"message","user":"U0XR6J961","text":"why does the executor create a state transfer instance?","ts":"1467903559.001591"},{"type":"message","user":"U0XR6J961","text":"god so messy","ts":"1467903577.001592"},{"type":"message","user":"U0XR6J961","text":"so much to stub out","ts":"1467903590.001593"},{"type":"message","user":"U0XR6J961","text":"so what happened right now is that the state transfer gets pulled in","ts":"1467903939.001594"},{"type":"message","user":"U0XR6J961","text":"and with it all kinds of ledger code, etc.","ts":"1467903945.001595"},{"type":"message","user":"U0XR6J961","text":"is there a way to decouple executor and state transfer?","ts":"1467903964.001596"},{"type":"message","user":"U0XPR4NP4","text":"Hmmm","ts":"1467904194.001597"},{"type":"message","user":"U0XPR4NP4","text":"So, I think we need to ask where state transfer should live.","ts":"1467904238.001598"},{"type":"message","user":"U0XPR4NP4","text":"In the new design, do we have state transfer for the PBFT log replication, or for the blockchain, or for both?","ts":"1467904263.001599"},{"type":"message","user":"U0XPR4NP4","text":"Leaving things largely as they stand today, I'd say we simply need to include a state transfer network API in addition to the execution network API","ts":"1467904350.001600"},{"type":"message","user":"U0XPR4NP4","text":"This also begs the question of how we for instance get the value for our checkpoints? Is this still the blockinfo?","ts":"1467904407.001601"},{"type":"message","user":"U0XPR4NP4","text":"Really, I think we need to know what the network interface to the endorsers is","ts":"1467904429.001602"},{"type":"message","user":"U0XR6J961","text":"i think we just do consensus","ts":"1467904641.001603"},{"type":"message","user":"U0XR6J961","text":"which means we need to do some minimal sort of state transfer for consensus","ts":"1467904660.001604"},{"type":"message","user":"U0XPR4NP4","text":"So, state transfer is only on the PBFT log then?","ts":"1467904685.001605"},{"type":"message","user":"U0XR6J961","text":"<@U0Y14MWA2>: ideas?","ts":"1467904687.001606"},{"type":"message","user":"U0XR6J961","text":"do we even maintain a log?","ts":"1467904695.001607"},{"type":"message","user":"U0XR6J961","text":"i don't think so","ts":"1467904697.001608"},{"type":"message","user":"U0XPR4NP4","text":"We do not.  Though it seems like we must, in order to 'do consensus'","ts":"1467904730.001609"},{"type":"message","user":"U0XR6J961","text":"why?","ts":"1467904808.001610"},{"type":"message","user":"U0XR6J961","text":"we just do total order broadcast","ts":"1467904823.001611"},{"type":"message","user":"U0XR6J961","text":"we really need to merge batch and core","ts":"1467904915.001612"},{"type":"message","user":"U0XPR4NP4","text":"True.  I'm unsure then how we supply a state transfer target if there is a gap in our log","ts":"1467904916.001613"},{"type":"message","user":"U0XR6J961","text":"i just had a \"missing request\" issue","ts":"1467904929.001614"},{"type":"message","user":"U0XR6J961","text":"odd","ts":"1467904934.001615"},{"type":"message","user":"U0XPR4NP4","text":"Yes, we do.  I know that <@U0XQ35CDD> is eager to do this, and I told him we could wait until his return.","ts":"1467904935.001616"},{"type":"message","user":"U0XR6J961","text":"so for doing total order, we don't need to maintain a log","ts":"1467904969.001617"},{"type":"message","user":"U0XPR4NP4","text":"I really need to understand this network interface","ts":"1467904990.001618"},{"type":"message","user":"U0XR6J961","text":"but if all endorsers\/peers miss a broadcast block, it is lost forever","ts":"1467905006.001619"},{"type":"message","user":"U0XPR4NP4","text":"Does everyone get ordering messages from all consenters? Or do they subscribe to a particular one","ts":"1467905011.001620"},{"type":"message","user":"U0XR6J961","text":"unclear yet","ts":"1467905025.001621"},{"type":"message","user":"U0XR6J961","text":"i would say, you connect to the consenter cloud","ts":"1467905038.001622"},{"type":"message","user":"U0XR6J961","text":"maybe to one particular one","ts":"1467905044.001623"},{"type":"message","user":"U0XR6J961","text":"does it matter?","ts":"1467905051.001624"},{"type":"message","user":"U0XPR4NP4","text":"I would say yes.","ts":"1467905056.001625"},{"type":"message","user":"U0XPR4NP4","text":"Because a byzantine attack can certainly cause a particular consenter to end up with a gap in the log it broadcasts","ts":"1467905082.001626"},{"type":"message","user":"U0XPR4NP4","text":"(unless we store and somehow state transfer this log)","ts":"1467905093.001627"},{"type":"message","user":"U0XR6J961","text":"right","ts":"1467905109.001628"},{"type":"message","user":"U0XPR4NP4","text":"Or, ignore the byzantine attack, it could happen under more benign conditions as we have seen.","ts":"1467905112.001629"},{"type":"message","user":"U0XR6J961","text":"so when a peer connects to the consensus cloud, it needs to be able to retrieve a partial log","ts":"1467905152.001630"},{"type":"message","user":"U0XPR4NP4","text":"I believe traditionally, with log replication, you have periodic snapshots, which allows you to garbage collect the log, so that someone who connects either has recent enough state that their log overlaps with the available log, or, they retrieve that snapshot, and then can retrieve the log.","ts":"1467905253.001631"},{"type":"message","user":"U0XR6J961","text":"or it has a way to retrieve blocks via some other mechanism","ts":"1467905260.001632"},{"type":"message","user":"U0XR6J961","text":"honestly, i think somebody else needs to design and implement this","ts":"1467905310.001633"},{"type":"message","user":"U0XPR4NP4","text":"'this'?","ts":"1467905323.001634"},{"type":"message","user":"U0XR6J961","text":"logs, state transfer","ts":"1467905345.001635"},{"type":"message","user":"U0XPR4NP4","text":"It all seems like so much duplication of the blockchain to me","ts":"1467905472.001636"},{"type":"message","user":"U0XPR4NP4","text":"The old executor service worked off the semi-synchronous deal of, send executions, periodically get back checkpoint values, and, send skips including the checkpoint value to skip to.  That would completely eliminate the need for us to log or state transfer, push it all back into the peer, and seems like it would work.  I'm not sure I love the semi-synchronous nature of it, but I'm struggling to think of anything better.","ts":"1467905645.001637"},{"type":"message","user":"U0XR6J961","text":"yes it does","ts":"1467906352.001638"},{"type":"message","user":"U0XR6J961","text":"something is wrong with my code","ts":"1467906394.001639"},{"type":"message","user":"U0XR6J961","text":"it doesn't execute right","ts":"1467906400.001640"},{"type":"message","user":"U0XR6J961","text":"<@U0XPR4NP4>: can you give me some feedback on what i am doing wrong with the executor interface?","ts":"1467907366.001641"},{"type":"message","user":"U0XR6J961","text":"i don't see the execute getting through","ts":"1467907378.001642"},{"type":"message","user":"U0XPR4NP4","text":"Sure, let me pull your branch again","ts":"1467907392.001643"},{"type":"message","user":"U0XPR4NP4","text":"Can you point me where specifically you're not seeing execution?","ts":"1467907588.001644"},{"type":"message","user":"U0XR6J961","text":"stuck in chan send in the executor","ts":"1467907623.001645"},{"type":"message","user":"U0XR6J961","text":"so manager is not running?","ts":"1467907633.001646"},{"type":"message","user":"U0XPR4NP4","text":"You do need to explicitly start the executor, it does not start at construction","ts":"1467907708.001647"},{"type":"message","user":"U0XPR4NP4","text":"(Starting the executor starts the backing event manager)","ts":"1467907733.001648"},{"type":"message","user":"U0XR6J961","text":"oh.","ts":"1467907752.001649"},{"type":"message","user":"U0XR6J961","text":"who starts it?","ts":"1467907755.001650"},{"type":"message","user":"U0XPR4NP4","text":"Helper starts it immediately after constructing it","ts":"1467907783.001651"},{"type":"message","user":"U0XR6J961","text":"hmm","ts":"1467907789.001652"},{"type":"message","user":"U0XR6J961","text":"odd","ts":"1467907791.001653"},{"type":"message","user":"U0XR6J961","text":"why do you have to start it explicitly?","ts":"1467907799.001654"},{"type":"message","user":"U0XPR4NP4","text":"Having it automatically start creates garbage that must be cleaned up.  Especially for testing, we want the execution to take place on the testing thread, so we don't have to deal with synchronizing","ts":"1467907843.001655"},{"type":"message","user":"U0XPR4NP4","text":"Outside of the unit tests, the executor is effectively a singleton, so the additional work after constructing it didn't seem like a big deal","ts":"1467907916.001656"},{"type":"message","user":"U0XR6J961","text":"aha","ts":"1467908020.001657"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1467908053.001658"},{"type":"message","user":"U0XR6J961","text":"i'm checking out for today","ts":"1467908058.001659"},{"type":"message","user":"U0XR6J961","text":"been at it already for 9h","ts":"1467908074.001660"},{"type":"message","user":"U0XR6J961","text":"but it seems to work","ts":"1467908084.001661"},{"type":"message","user":"U0XR6J961","text":"you can create a basic consensus network now","ts":"1467908111.001662"},{"type":"message","user":"U0XPR4NP4","text":"Great! Enjoy your evening","ts":"1467908401.001663"},{"type":"message","user":"U0XR6J961","text":"<@U0XPR4NP4>: i just pushed a deploy script","ts":"1467909914.001664"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XR6J961> <@U0XPR4NP4> ok there are a few things here","ts":"1467910402.001665"},{"type":"message","user":"U0Y14MWA2","text":"1) *what is the state of consensus (PBFT)?* The state is only the internal PBFT state - for example: the set of consenters, view number, sequence numbers, P, Q sets and similar. Things related to the ledger (e.g., raw ledger) are not required.","ts":"1467910507.001666"},{"type":"message","user":"U0Y14MWA2","text":"That said, our implementation of consensus may decide to offer more than the spec - for example, consensus service could (perhaps only best-effort) cash the last K blocks of the raw ledger.","ts":"1467910579.001667"},{"type":"message","user":"U0Y14MWA2","text":"There might be additional call (not present in the current API) to get those blocks - but I would say this is not \"Phase 1\"","ts":"1467910614.001668"},{"type":"message","user":"U0XR6J961","text":"my concern is that if we do not persist the raw blocks we `deliver()`, these blocks might be lost","ts":"1467910624.001669"},{"type":"message","user":"U0Y14MWA2","text":"This is not our issue - strictly speaking","ts":"1467910635.001670"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1467910641.001671"},{"type":"message","user":"U0Y14MWA2","text":"this is the issue of peers","ts":"1467910649.001672"},{"type":"message","user":"U0Y14MWA2","text":"some cash needs to exist though in order not to loose all messages","ts":"1467910663.001673"},{"type":"message","user":"U0Y14MWA2","text":"in case of catastrophes","ts":"1467910675.001674"},{"type":"message","user":"U0Y14MWA2","text":"that is true","ts":"1467910677.001675"},{"type":"message","user":"U0XR6J961","text":"well if we consider the consensus network as \"miners\", we need to retain the chain","ts":"1467910678.001676"},{"type":"message","user":"U0Y14MWA2","text":"ok, so this is one thing to consider. However one thing is important - this ledger cache if implemented - must not block PBFT \"state transfer\" among consenters if you see what I mean","ts":"1467910759.001677"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1467910774.001678"},{"type":"message","user":"U0XR6J961","text":"pbft does not need it for its own operation","ts":"1467910782.001679"},{"type":"message","user":"U0Y14MWA2","text":"we need to entirely decouple the functionality related to PBFT operation and optional raw ledger cache","ts":"1467910789.001680"},{"type":"message","user":"U0Y14MWA2","text":"We should look how Kafka is doing this - this exists","ts":"1467910809.001681"},{"type":"message","user":"U0Y14MWA2","text":"so other points","ts":"1467910820.001682"},{"type":"message","user":"U0Y14MWA2","text":"2) *To how many consenters peer connects*. This is another important one. The first step is to decouple PBFT from peer and in that decoupling we will have first peer trusting the consenter it connects to.","ts":"1467910884.001683"},{"type":"message","user":"U0Y14MWA2","text":"Of course this is not sufficient","ts":"1467910890.001684"},{"type":"message","user":"U0Y14MWA2","text":"in general","ts":"1467910894.001685"},{"type":"message","user":"U0XR6J961","text":"the first step is done","ts":"1467910901.001686"},{"type":"message","user":"U0XR6J961","text":"pbft runs in a separate process, maintains a separate network","ts":"1467910914.001687"},{"type":"message","user":"U0XR6J961","text":"and there is a client \"library\" that provides `Broadcast()` and `Deliver()`","ts":"1467910936.001688"},{"type":"message","user":"U0Y14MWA2","text":"great - so then we need to *ADD* the functionality that was not there in v0.5 by which a peer *optionally* connects to different consenters if the current one does not work","ts":"1467910953.001689"},{"type":"message","user":"U0XR6J961","text":"yes, we can do that","ts":"1467910977.001690"},{"type":"message","user":"U0XR6J961","text":"i'd say the peer needs to do that, using the library","ts":"1467910994.001691"},{"type":"message","user":"U0Y14MWA2","text":"by the way this is optional as organization maintaining several peers *and* a consenter - may always trust its peer - so this will improve those peers perfromance and simlify their execution path","ts":"1467911010.001692"},{"type":"message","user":"U0Y14MWA2","text":"now in the general case","ts":"1467911020.001693"},{"type":"message","user":"U0Y14MWA2","text":"we need other things that are not there yet - such as","ts":"1467911033.001694"},{"type":"message","user":"U0Y14MWA2","text":"a) as we do not have signatures in Commit messages - a peer must always connect to at least *f+1* consenters and get their confirmations before the library outputs deliver()","ts":"1467911084.001695"},{"type":"message","user":"U0Y14MWA2","text":"b) if we introduce signatures on commit - we could have a peer tentatively \"trusting\" a single consenter and waiting for the latter to forward him the commit certificate","ts":"1467911133.001696"},{"type":"message","user":"U0Y14MWA2","text":"the latter can be silent in which case the peer would connect to another consenter","ts":"1467911153.001697"},{"type":"message","user":"U0Y14MWA2","text":"now obviously - we have a choice","ts":"1467911163.001698"},{"type":"message","user":"U0XR6J961","text":"if we sign on commit, then we can include the certificate directly","ts":"1467911190.001699"},{"type":"message","user":"U0Y14MWA2","text":"a) introduce signatures - or go for f+1 stuff","ts":"1467911195.001700"},{"type":"message","user":"U0Y14MWA2","text":"you mean if you sign commit msgs?","ts":"1467911208.001701"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1467911212.001702"},{"type":"message","user":"U0Y14MWA2","text":"yes, then once you assemble commit certificate you could forward to client","ts":"1467911228.001703"},{"type":"message","user":"U0Y14MWA2","text":"this is actually the \"only\" way to properly do it if we want to avoid connecting to f+1 or more consenters","ts":"1467911265.001704"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1467911271.001705"},{"type":"message","user":"U0Y14MWA2","text":"what is your take on the tradeoff?","ts":"1467911273.001706"},{"type":"message","user":"U0Y14MWA2","text":"f+1 vs signatures?","ts":"1467911277.001707"},{"type":"message","user":"U0XR6J961","text":"i'm for signing","ts":"1467911279.001708"},{"type":"message","user":"U0XR6J961","text":"better scale","ts":"1467911284.001709"},{"type":"message","user":"U0XR6J961","text":"allows distribution tree","ts":"1467911289.001710"},{"type":"message","user":"U0Y14MWA2","text":"it seemingly does - we need to see where to sign though - commit msg is an obvious one but not the only one","ts":"1467911343.001711"},{"type":"message","user":"U0XPR4NP4","text":"I'm still in favor of signing checkpoint messages","ts":"1467911359.001712"},{"type":"message","user":"U0XPR4NP4","text":"With those corresponding to blocks","ts":"1467911375.001713"},{"type":"message","user":"U0XR6J961","text":"so that would effectively be a 4th phase","ts":"1467911415.001714"},{"type":"message","user":"U0Y14MWA2","text":"so we should make a plan on how do we proceed with these additions that we have on current code which stem from the fact that consensus client (peer) is not tied to a consenter (esp. trust-wise)","ts":"1467911489.001715"},{"type":"message","user":"U0XPR4NP4","text":"Effectively.  But by separating it from the standard commit path, you could effectively tweak the rate of signatures by modifying the checkpoint interval.","ts":"1467911504.001716"},{"type":"message","user":"U0XR6J961","text":"but if we can only deliver() what has a certificate, that doesn't help us","ts":"1467911531.001717"},{"type":"message","user":"U0Y14MWA2","text":"signing chkpoint is possible but then client\/peer connecting to a single consenter would output a burst  of deliver() events only every checkpoint","ts":"1467911535.001718"},{"type":"message","user":"U0XR6J961","text":"we still need to wait for a certificate","ts":"1467911538.001719"},{"type":"message","user":"U0Y14MWA2","text":"but","ts":"1467911540.001720"},{"type":"message","user":"U0Y14MWA2","text":"checkpoint is sufficient","ts":"1467911545.001721"},{"type":"message","user":"U0Y14MWA2","text":"yet not necessary","ts":"1467911548.001722"},{"type":"message","user":"U0XR6J961","text":"which means that we can just increase our batch size","ts":"1467911558.001723"},{"type":"message","user":"U0Y14MWA2","text":"f+1 signatures upon commit are sufficient","ts":"1467911560.001724"},{"type":"message","user":"U0Y14MWA2","text":"so it is like 2f+1 commit signatures","ts":"1467911568.001725"},{"type":"message","user":"U0Y14MWA2","text":"or f+1 4th phase signatures","ts":"1467911574.001726"},{"type":"message","user":"U0XPR4NP4","text":"I don't see why we could not deliver periodically, with a separate commit phase","ts":"1467911576.001727"},{"type":"message","user":"U0Y14MWA2","text":"latency","ts":"1467911585.001728"},{"type":"message","user":"U0XPR4NP4","text":"Set k=1 and you're to the behavior of signatures on commit","ts":"1467911610.001729"},{"type":"message","user":"U0Y14MWA2","text":"we would be blowing it up for no strong reason + issues if there is not enough traffic","ts":"1467911615.001730"},{"type":"message","user":"U0XPR4NP4","text":"But it allows people to trade some latency for some throughput","ts":"1467911618.001731"},{"type":"message","user":"U0Y14MWA2","text":"so, again, for this particular feature checkpoint is an overkill","ts":"1467911648.001732"},{"type":"message","user":"U0Y14MWA2","text":"f+1 \"4th phase\" signatures suffice","ts":"1467911657.001733"},{"type":"message","user":"U0Y14MWA2","text":"or 2f+1 commit signatures (transferable commit certificate)","ts":"1467911674.001734"},{"type":"message","user":"U0Y14MWA2","text":"now, in future, as we go for large number of consenters, this may need to be revisited","ts":"1467911724.001735"},{"type":"message","user":"U0Y14MWA2","text":"client would need to verify for n=100 at least 34 signatures","ts":"1467911742.001736"},{"type":"message","user":"U0Y14MWA2","text":"but also otherwise connect to 34 consenters","ts":"1467911758.001737"},{"type":"message","user":"U0Y14MWA2","text":"it will certainly be a challenge to properly scale this - but lets have something more basic for Phase 1 (end of September)","ts":"1467911799.001738"},{"type":"message","user":"U0Y14MWA2","text":"and worry about scalability in Phases 2 and 3","ts":"1467911808.001739"},{"type":"message","user":"U0Y14MWA2","text":"this emphasizes the need to have the trust of a peer (consensus client) into consenters configurable","ts":"1467912505.001740"},{"type":"message","user":"U0Y14MWA2","text":"at one extreme we will have peer trusting \"his\" consenter (very efficient - not very robust)","ts":"1467912530.001741"},{"type":"message","user":"U0Y14MWA2","text":"at the other extreme we have the above (f+1 connections or  a connections with f+1 or 2f+1 signature verifications) - (very robust - not very efficient)","edited":{"user":"U0Y14MWA2","ts":"1467912648.000000"},"ts":"1467912594.001742"},{"type":"message","user":"U0Y14MWA2","text":"one can easily imagine peer\/consenter trust policies in between - but practically they may be less appealing","ts":"1467912626.001743"},{"type":"message","user":"U0XR6J961","text":"maybe the cryptographers have a way to compact all these signatures","ts":"1467912765.001745"},{"type":"message","user":"U0XR6J961","text":"ok, i gotta go outside","ts":"1467912819.001746"},{"type":"message","user":"U0XR6J961","text":"staring too much into the screen","ts":"1467912823.001747"},{"type":"message","user":"U0Y14MWA2","text":"yes - lets discuss this later on further","ts":"1467912835.001748"},{"type":"message","user":"U0Y14MWA2","text":"we'll get it right :slightly_smiling_face:","ts":"1467912843.001749"},{"type":"message","user":"U0Y14MWA2","text":"just to conclude for  this iteration - I do not particularly like signing commit msgs - but we may want to sign the 4th phase instead","ts":"1467912930.001750"},{"type":"message","user":"U0Y14MWA2","text":"reasons next time :wink:","ts":"1467912935.001751"},{"type":"message","user":"U0XPR4NP4","text":"I'm looking at the virtual client \/ slot stuff again, and I'm wondering about recovering after getting out of sync with the network.  Namely, today, we discard our outstanding requests when we get out of sync with the network, as we may have missed their executions","ts":"1467915519.001752"},{"type":"message","user":"U0XPR4NP4","text":"In an ideal world, we would somehow encode the counter each slot has executed to somehow, either in the checkpoint, or in the consensus metadata, so that we could intelligently decide whether a particular request has been executed or not, rather than simply discarding them","ts":"1467915610.001753"},{"type":"message","user":"U0XPR4NP4","text":"The problem I am coming up with, is that as the number of allowed outstanding requests goes up, and the number of replicas goes up, this could become quite large.","ts":"1467915636.001754"},{"type":"message","user":"U0XPR4NP4","text":"Since each counter is 64 bit, were we to allow 1000 outstanding requests per replica (I think this is the upper end of what is reasonable, but possible), then we would have 8KB of counter data per replica","ts":"1467915680.001755"},{"type":"message","user":"U0Y14MWA2","text":"I lost the context a bit - is this still relevant for v2? Asking since you talk about execution...","ts":"1467915706.001756"},{"type":"message","user":"U0XPR4NP4","text":"Yes, this is.  This comes back to the idea that, per the PBFT paper, a client should submit requests one at a time, and wait for the execution to complete.","ts":"1467915745.001757"},{"type":"message","user":"U0XPR4NP4","text":"Because the consenters are acting as clients, we can't reasonably only have one outstanding request per consenter.","ts":"1467915791.001758"},{"type":"message","user":"U0Y14MWA2","text":"how come they act as clients? they will normally not broadcast -except perhaps for some maintenance\/reconfiguration operations","ts":"1467915841.001759"},{"type":"message","user":"U0XPR4NP4","text":"I guess we could re-evaluate for v2, but, assuming you want an endorser to be able to connect to a single consenter and pass in transactions","ts":"1467915892.001760"},{"type":"message","user":"U0XPR4NP4","text":"Then that single consenter needs to act as the PBFT client, broadcasting the PBFT request to the consenting network.","ts":"1467915923.001761"},{"type":"message","user":"U0Y14MWA2","text":"in this case the replica\/consenter is merely a proxy not a client","edited":{"user":"U0Y14MWA2","ts":"1467915973.000000"},"ts":"1467915936.001762"},{"type":"message","user":"U0Y14MWA2","text":"so the broadcaster stays the client (peer)","ts":"1467915946.001763"},{"type":"message","user":"U0XPR4NP4","text":"Sure, the consenter is not originating the request, but it is the one who is assuming responsibility for it, waiting for its execution to complete before submitting a new request","ts":"1467915975.001765"},{"type":"message","user":"U0Y14MWA2","text":"not really","ts":"1467915988.001766"},{"type":"message","user":"U0XPR4NP4","text":"Or rather, before proxying a new request if you prefer","ts":"1467915990.001767"},{"type":"message","user":"U0Y14MWA2","text":"it should not wait for that IMO","ts":"1467915999.001768"},{"type":"message","user":"U0XPR4NP4","text":"How then, do you prevent censorship?","ts":"1467916012.001769"},{"type":"message","user":"U0Y14MWA2","text":"remind me of the problem?","ts":"1467916020.001770"},{"type":"message","user":"U0XPR4NP4","text":"A consenter broadcasts this proxied request to the network.","ts":"1467916078.001771"},{"type":"message","user":"U0XPR4NP4","text":"Each receiving replica must first decide whether this request has been executed or not.  Because it's possible the network has already done the 3 phase protocol for this request, before the broadcast reaches every replica.","edited":{"user":"U0XPR4NP4","ts":"1467916128.000000"},"ts":"1467916112.001772"},{"type":"message","user":"U0Y14MWA2","text":"normally there are client timestamps for this","ts":"1467916138.001775"},{"type":"message","user":"U0Y14MWA2","text":"also in PBFT","ts":"1467916142.001776"},{"type":"message","user":"U0XPR4NP4","text":"Yes! There are... but it exposes us to potential censorship without the waiting approach","ts":"1467916160.001777"},{"type":"message","user":"U0Y14MWA2","text":"ok listening :slightly_smiling_face:","ts":"1467916170.001778"},{"type":"message","user":"U0XPR4NP4","text":"So, it is easy enough, for the receiving replica to check the timestamp of the request against the timestamp of the most recently executed request, and, if the timestamp is older, to discard, and this is our current behavior.","ts":"1467916199.001779"},{"type":"message","user":"U0Y14MWA2","text":"so far so good","ts":"1467916214.001780"},{"type":"message","user":"U0XPR4NP4","text":"Now, imagine that a replica broadcasts two requests to the network, request A with timestamp of 1, and request B with timestamp of 2","ts":"1467916244.001781"},{"type":"message","user":"U0XPR4NP4","text":"The primary byzantinely wants to censor request A, so, it first orders request B","ts":"1467916276.001782"},{"type":"message","user":"U0XPR4NP4","text":"Now, the network executes B, so, any replica which receives request A will believe it is stale and already executed, and discard it.","ts":"1467916326.001783"},{"type":"message","user":"U0Y14MWA2","text":"ok, right so there are two things here","ts":"1467916349.001784"},{"type":"message","user":"U0Y14MWA2","text":"first if consenter = proxy not client","ts":"1467916361.001785"},{"type":"message","user":"U0Y14MWA2","text":"then we can have client still have 1 outstanding request as different proxied requests will have different timestamp (clientID,clientTimestamp)","ts":"1467916391.001786"},{"type":"message","user":"U0Y14MWA2","text":"so that would be still ok - you do not need 1 request proxied at the time","ts":"1467916407.001787"},{"type":"message","user":"U0Y14MWA2","text":"now","ts":"1467916409.001788"},{"type":"message","user":"U0Y14MWA2","text":"to allow the client\/peer to broadcast requests in paralel we do face the issue you mention","ts":"1467916438.001789"},{"type":"message","user":"U0Y14MWA2","text":"and in that case we need FIFO for client requests","ts":"1467916450.001790"},{"type":"message","user":"U0XPR4NP4","text":"Ah, so, I had a different implementation idea","ts":"1467916465.001791"},{"type":"message","user":"U0Y14MWA2","text":"ok, listening :slightly_smiling_face:","ts":"1467916472.001792"},{"type":"message","user":"U0XPR4NP4","text":"That does not require FIFO","ts":"1467916473.001793"},{"type":"message","user":"U0Y14MWA2","text":"BTW FIFO may be of independent interest","ts":"1467916492.001794"},{"type":"message","user":"U0Y14MWA2","text":"as aguarantee to clients","ts":"1467916497.001795"},{"type":"message","user":"U0Y14MWA2","text":"but go on","ts":"1467916500.001796"},{"type":"message","user":"U0XPR4NP4","text":"So, each replica maintains some number of \"virtual client ids\", I usually refer to them as 'slots', as there are a fixed number of them and they are occupied or vacant.","ts":"1467916519.001797"},{"type":"message","user":"U0Y14MWA2","text":"(because one request at the time somehow gives FIFO - so we may want to maintain that if we go for multiple \"paralell broadcasts\")","edited":{"user":"U0Y14MWA2","ts":"1467916547.000000"},"ts":"1467916526.001798"},{"type":"message","user":"U0XPR4NP4","text":"When a request is proxied, the replica looks for an empty slot, and assigns the request that virtual client ID before broadcasting to the network","edited":{"user":"U0XPR4NP4","ts":"1467916558.000000"},"ts":"1467916550.001800"},{"type":"message","user":"U0XPR4NP4","text":"Each slot has a slot local counter (akin to a timestamp), and the promise is that a non-byzantine replica will never broadcast two requests with the same slot number until the previous request has prepared","ts":"1467916616.001802"},{"type":"message","user":"U0Y14MWA2","text":"ok so slot is like a window? shared by many clients or 1 window per client?","ts":"1467916643.001803"},{"type":"message","user":"U0XPR4NP4","text":"Sort of like a window I suppose, potentially shared by many clients.","ts":"1467916722.001804"},{"type":"message","user":"U0XPR4NP4","text":"The number of slots is the number of total outstanding requests allowed for each replica","ts":"1467916739.001805"},{"type":"message","user":"U0XPR4NP4","text":"And the replica might choose to allocate all slots to a single client, or to distribute them among many clients","ts":"1467916752.001806"},{"type":"message","user":"U0Y14MWA2","text":"hm, this may already be limiting if we have a lot of clients but they are fine with broadcasting 1 request at the time","ts":"1467916783.001807"},{"type":"message","user":"U0Y14MWA2","text":"but go on","ts":"1467916788.001808"},{"type":"message","user":"U0XPR4NP4","text":"Slots hold requests which are not prepared.  Once a request is prepared, the last prepared counter associated with that slot is set to the value of the counter for the request that was prepared.  Any request which is received who's counter is less than this last prepared counter will be assumed to be stale, and discarded.","ts":"1467916927.001809"},{"type":"message","user":"U0XPR4NP4","text":"This prevents any request from being multiply executed.","ts":"1467916947.001810"},{"type":"message","user":"U0XPR4NP4","text":"Because no new requests are sent for a slot until that request is prepared, it is easy to run a timer against the slot to detect censorship.","ts":"1467916991.001811"},{"type":"message","user":"U0XPR4NP4","text":"And the degree of parallelism is controlled by the number of slots.","ts":"1467917015.001812"},{"type":"message","user":"U0Y14MWA2","text":"i was wondering could we simply view change the leader who order request with timestamp 2 instead of 1 for given client","ts":"1467917028.001813"},{"type":"message","user":"U0Y14MWA2","text":"and basically track per client the last sequence number","ts":"1467917041.001814"},{"type":"message","user":"U0XPR4NP4","text":"Ah, if we have FIFO, we could","ts":"1467917048.001815"},{"type":"message","user":"U0Y14MWA2","text":"so this would be somehow implementing fifo, no?","ts":"1467917058.001816"},{"type":"message","user":"U0Y14MWA2","text":"primary would put an advance request n+2 in some queue and not actually process it unless n+1 is processed","ts":"1467917106.001817"},{"type":"message","user":"U0Y14MWA2","text":"to prevent DoS the n+k above could be limited by k","ts":"1467917119.001818"},{"type":"message","user":"U0Y14MWA2","text":"which is the number of outstanding reqs a client may have","ts":"1467917129.001819"},{"type":"message","user":"U0Y14MWA2","text":"hard coded - to begin with","edited":{"user":"U0Y14MWA2","ts":"1467917145.000000"},"ts":"1467917132.001820"},{"type":"message","user":"U0Y14MWA2","text":"now k=1","edited":{"user":"U0Y14MWA2","ts":"1467917153.000000"},"ts":"1467917134.001821"},{"type":"message","user":"U0XPR4NP4","text":"Hmmm, let me think","ts":"1467917186.001824"},{"type":"message","user":"U0Y14MWA2","text":"sure - I need to transfer to France v. Germany","ts":"1467917202.001825"},{"type":"message","user":"U0XPR4NP4","text":"The tricky part abou this implementation","ts":"1467917205.001826"},{"type":"message","user":"U0Y14MWA2","text":"but will be back :slightly_smiling_face:","ts":"1467917205.001827"},{"type":"message","user":"U0XPR4NP4","text":"Is that the primary does not necessarily send pre-prepares in order","ts":"1467917217.001828"},{"type":"message","user":"U0XPR4NP4","text":"So to conclude whether the primary is sequentially ordering requests gets trickier","ts":"1467917236.001829"},{"type":"message","user":"U0Y14MWA2","text":"yes so this would be making it to look at client timestamp and actually do them in order","ts":"1467917236.001830"},{"type":"message","user":"U0Y14MWA2","text":"I think it would be vital to enforce FIFO if we allow parallel requests","ts":"1467917254.001831"},{"type":"message","user":"U0Y14MWA2","text":"not sure submitting peer would like it differently...","ts":"1467917266.001832"},{"type":"message","user":"U0XPR4NP4","text":"But imagine that client submits reqs A,B,C with increasing timestamps.","ts":"1467917315.001833"},{"type":"message","user":"U0XPR4NP4","text":"The primary orders B,C into seqNo=3, but has not sent preprepare for seqNo=2 yet","ts":"1467917354.001834"},{"type":"message","user":"U0XPR4NP4","text":"The network will prepare and commit this, because there's nothing obviously wrong with it.","ts":"1467917375.001835"},{"type":"message","user":"U0Y14MWA2","text":"ok, yes so we would need to eliminate this watermark thingy","edited":{"user":"U0Y14MWA2","ts":"1467917553.000000"},"ts":"1467917392.001836"},{"type":"message","user":"U0Y14MWA2","text":"and basically rely on batching for throughput optimisation","ts":"1467917402.001837"},{"type":"message","user":"U0Y14MWA2","text":"and do batches 1 by 1","ts":"1467917407.001838"},{"type":"message","user":"U0XPR4NP4","text":"Yes, we could do this, but it would be a pretty significant change","ts":"1467917428.001839"},{"type":"message","user":"U0Y14MWA2","text":"not necessarily bad... and it can be easy to try out (by hardocding watermarks)","ts":"1467917452.001840"},{"type":"message","user":"U0Y14MWA2","text":"to H=L+1","edited":{"user":"U0Y14MWA2","ts":"1467917466.000000"},"ts":"1467917457.001841"},{"type":"message","user":"U0Y14MWA2","text":"or H=L not sure how that goes","ts":"1467917481.001843"},{"type":"message","user":"U0Y14MWA2","text":"side comment: I remember talking to Alysson Bessani (lead of BFT Smart) - he told me they eliminated watermarks early on...","ts":"1467917525.001844"},{"type":"message","user":"U0XPR4NP4","text":"Interesting.  I think we could certainly completely eliminate watermarks if we assume an underlying FIFO stream","ts":"1467917553.001845"},{"type":"message","user":"U0XPR4NP4","text":"But, we do have working watermarks today.  I really think we could switch to UDP transports, and things would continue to work.","ts":"1467917607.001847"},{"type":"message","user":"U0Y14MWA2","text":"that might be more straightforward to do - put H=L and make primary order things from clients one by one","ts":"1467917628.001848"},{"type":"message","user":"U0Y14MWA2","text":"well we may have both","ts":"1467917632.001849"},{"type":"message","user":"U0Y14MWA2","text":"just a note to system admins","ts":"1467917637.001850"},{"type":"message","user":"U0Y14MWA2","text":"do not put H!=L (watermarks) and K&gt;1 (paralel req FIFO) at the same time","ts":"1467917673.001851"},{"type":"message","user":"U0XPR4NP4","text":"I don't know, I think we should commit one way or the other","ts":"1467917727.001852"},{"type":"message","user":"U0XPR4NP4","text":"The additional code complexity of supporting both windowed and non-windowed modes seems like a waste","ts":"1467917741.001853"},{"type":"message","user":"U0Y14MWA2","text":"ok, I think watermarks may have limited use - it was PBFT way of doing batching","ts":"1467917747.001854"},{"type":"message","user":"U0Y14MWA2","text":"so batching handles that","ts":"1467917758.001855"},{"type":"message","user":"U0Y14MWA2","text":"and then paralel FIFO is not too complex","ts":"1467917769.001856"},{"type":"message","user":"U0Y14MWA2","text":"with primary needing to look at client ts and do +1","ts":"1467917778.001857"},{"type":"message","user":"U0Y14MWA2","text":"that queue might be problematic","ts":"1467917787.001858"},{"type":"message","user":"U0Y14MWA2","text":"but I would limit it to K","ts":"1467917793.001859"},{"type":"message","user":"U0Y14MWA2","text":"hard coded","ts":"1467917797.001860"},{"type":"message","user":"U0Y14MWA2","text":"for all clients","ts":"1467917803.001861"},{"type":"message","user":"U0Y14MWA2","text":"later on one could play with more flexible Ks","ts":"1467917815.001862"},{"type":"message","user":"U0Y14MWA2","text":"need to take off","ts":"1467917854.001863"},{"type":"message","user":"U0Y14MWA2","text":"thanks for the discussion","ts":"1467917858.001864"},{"type":"message","user":"U0Y14MWA2","text":"will catch up later","ts":"1467917861.001865"},{"type":"message","user":"U0XPR4NP4","text":"Alright, thanks for the chat, will think on this","ts":"1467917862.001866"},{"type":"message","user":"U0XPR4NP4","text":"<@U0Y14MWA2> Independent of all the of the discussion above.  In the Castro paper, each client submits a request one at a time, and the replica tracks the timestamp per replica to determine whether it should send a view change or not.  It is somewhat handwaved away that this information could be stored on disk, but what is not clear to me, is how this information is updated during fall behind \/ catch up scenarios.  If a replica crashes after receiving a request and must do state transfer, does it discard its outstanding requests? If so, then what prevents a cascade of failures from censoring requests? Imagine 4 nodes, all receive a request, then vp0 crashes, recovers, discards outstanding, and then so do vp1,2,3 in sequence.  At this point, all outstanding requests have been discarded, and the request may have, or may not have executed.  To me, the correct way to handle this, is to track the last executed request for each client, and somehow have this recovered via state transfer.  My problem here is, as they mention, there could be lots of clients, so recovering this data via state transfer might be very expensive indeed.","edited":{"user":"U0XPR4NP4","ts":"1467922286.000000"},"ts":"1467918795.001867"},{"type":"message","user":"U0XR6J961","text":"the client is responsible for resubmitting the request?","ts":"1467926727.001869"},{"type":"message","user":"U0XR6J961","text":"make `broadcast()` a RPC (it is already) and have it return only when the request has been prepared","ts":"1467926774.001870"},{"type":"message","user":"U0XPR4NP4","text":"We could certainly require the client to resubmit it.  But I think we need to clearly define that as part of the v2 architecture then","ts":"1467927208.001871"},{"type":"message","user":"U0Y14MWA2","text":"yes the client, in the end, in BFT protocols usually cares for having its request (periodically) resubmitted","ts":"1467961978.001872"},{"type":"message","user":"U0Y14MWA2","text":"*re caching raw ledger at consensus service*","ts":"1467965724.001873"},{"type":"message","user":"U0Y14MWA2","text":"we may want to follow the footsteps of Kafka - which has configurable retention time for the partition retention <http:\/\/kafka.apache.org\/documentation.html#intro_topics>","attachments":[{"service_name":"Apache Kafka","title":"Kafka","title_link":"http:\/\/kafka.apache.org\/documentation.html#intro_topics","text":"A high-throughput, distributed, publish-subscribe messaging system.","fallback":"Apache Kafka: Kafka","from_url":"http:\/\/kafka.apache.org\/documentation.html#intro_topics","service_icon":"http:\/\/kafka.apache.org\/images\/apache_feather.gif","id":1}],"ts":"1467965825.001874"},{"type":"message","user":"U0Y14MWA2","text":"(it does not store the whole log for eternity - nor I think should we)","ts":"1467965848.001876"},{"type":"message","user":"U0Y14MWA2","text":"now to facilitate the usage of this cache - Kafka allows the consumer (peer in our case) to *seek* on a given offset (batch) in the partition (ledger)","ts":"1467965929.001877"},{"type":"message","user":"U0Y14MWA2","text":"see \"seek\" in <https:\/\/kafka.apache.org\/090\/javadoc\/org\/apache\/kafka\/clients\/consumer\/KafkaConsumer.html>","ts":"1467965944.001878"},{"type":"message","user":"U0Y14MWA2","text":"the question is how do we want this - I really would like to see - sth slightly different from Kafka for state transfer in which state transfer would be peer-to-peer not peer-consenter oriented","ts":"1467966011.001879"},{"type":"message","user":"U0Y14MWA2","text":"Kafka does not have interconsumer state transfer and I strongly believe we should. IMO, we need to avoid, or discourage, peers from \"torturing\" consensus service with state transfer and make them rely predominantly on peer-to-peer for state transfer.","edited":{"user":"U0Y14MWA2","ts":"1467966657.000000"},"ts":"1467966037.001880"},{"type":"message","user":"U0Y14MWA2","text":"BTW, another important design point as we have consenters split from peers is (Push vs Pull) <http:\/\/kafka.apache.org\/documentation.html#design_pull>","attachments":[{"service_name":"Apache Kafka","title":"Kafka","title_link":"http:\/\/kafka.apache.org\/documentation.html#design_pull","text":"A high-throughput, distributed, publish-subscribe messaging system.","fallback":"Apache Kafka: Kafka","from_url":"http:\/\/kafka.apache.org\/documentation.html#design_pull","service_icon":"http:\/\/kafka.apache.org\/images\/apache_feather.gif","id":1}],"ts":"1467966111.001881"},{"type":"message","user":"U0Y14MWA2","text":"when peer is colocated with a consenter and trusts it - push (our v0.5) is obvious choice","ts":"1467966138.001883"},{"type":"message","user":"U0Y14MWA2","text":"not so clear with the separation...","ts":"1467966145.001884"},{"type":"message","user":"U0Y14MWA2","text":"comments welcome","ts":"1467966147.001885"},{"type":"message","user":"U0Y14MWA2","text":"*re signatures vs multi connections*","ts":"1467966211.001886"},{"type":"message","user":"U0Y14MWA2","text":"I would have basically two  parts of the consensus client library: 1) one in which peer trusts \"his\" consenter and 2) the other one in which does not","ts":"1467966268.001887"},{"type":"message","user":"U0Y14MWA2","text":"clearly 1 is not BFT but has its place in practice (single organization running peers trusting \"its\" consenter)","ts":"1467966293.001888"},{"type":"message","user":"U0Y14MWA2","text":"now for 2) we discussed signatures vs. multi-connections","ts":"1467966309.001889"},{"type":"message","user":"U0Y14MWA2","text":"with multi-connections we could reuse 1st part of the library and get only hash of the committed batches confirmation on other f connections","ts":"1467966345.001890"},{"type":"message","user":"U0Y14MWA2","text":"this would be alternative to signatures - as part of brainstorming","ts":"1467966358.001891"},{"type":"message","user":"U0Y14MWA2","text":"comments welcome","ts":"1467966364.001892"},{"type":"message","user":"U0Y14MWA2","text":"*- over and out -*","edited":{"user":"U0Y14MWA2","ts":"1467966381.000000"},"ts":"1467966367.001893"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XR6J961> <@U0XPR4NP4> <@U0XQ35CDD> <@U0UGH3X7X> ^^","edited":{"user":"U0Y14MWA2","ts":"1467966909.000000"},"ts":"1467966896.001897"},{"type":"message","user":"U0XV1HDL3","text":"Your 1) and 2) are basically two different interfaces to the consensus service. should be hidden behind the same interface, but allow one configuration option for the client to express which \"submission semantics\" it wants. \nMy ideas for names: \nsubmission=fast\/slow  or  weak\/strong  or  optimistic\/guaranteed\nor\ninvocation=       \"\"","ts":"1468222298.001899"},{"type":"message","user":"U0XR6J961","text":"given that we're talking about exchangable consensus protocols, i think the fabric peer consensus protocol API should be the same","ts":"1468225548.001900"},{"type":"message","user":"U0XR6J961","text":"i.e. ideally not to require a different \"stub\" that connects to consensus in a proprietary way","ts":"1468225572.001901"},{"type":"message","user":"U0UGH3X7X","text":"hi","ts":"1468241369.001902"},{"type":"message","user":"U0XR6J961","text":"hi tuand","ts":"1468241467.001903"},{"type":"message","user":"U0UGH3X7X","text":"ok, so a week's worth of stuff to catch up on :slightly_smiling_face:","ts":"1468241532.001904"},{"type":"message","user":"U0XR6J961","text":"hehe","ts":"1468241678.001905"},{"type":"message","user":"U0XR6J961","text":"not much happened outside of consensus","ts":"1468241683.001906"},{"type":"message","user":"U0XR6J961","text":"so... i need to track the lastExec in the new consensus peer","ts":"1468242441.001907"},{"type":"message","user":"U0XR6J961","text":"i need some better reconnect logic","ts":"1468246572.001908"},{"type":"message","user":"U0XR6J961","text":"grpc seems to use exponential retries","ts":"1468246602.001909"},{"type":"message","user":"U0XR6J961","text":"1200 tx\/sec","ts":"1468246976.001910"},{"type":"message","user":"U0XR6J961","text":"with consensus separated","ts":"1468246981.001911"},{"type":"message","user":"U0XR6J961","text":"and batchsize=500","ts":"1468246989.001912"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1468247358.001913"},{"type":"message","user":"U0XR6J961","text":"fabric peer now can talk to consensus cloud","ts":"1468247372.001914"},{"type":"message","user":"U0XR6J961","text":"i'd appreciate if you could test it","ts":"1468247387.001915"},{"type":"message","user":"U0XR6J961","text":"then maybe do some refactoring","ts":"1468247405.001916"},{"type":"message","user":"U0XR6J961","text":"and then integrate it to master","ts":"1468247412.001917"},{"type":"message","user":"U0XR6J961","text":"now it slowed down to 880","ts":"1468247616.001918"},{"type":"message","user":"U0XR6J961","text":"i wonder why","ts":"1468247620.001919"},{"type":"message","user":"U0XR6J961","text":"hmm 30% docker","ts":"1468248032.001920"},{"type":"message","user":"U0XR6J961","text":"is it still logging like crazy?","ts":"1468248038.001921"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: I noticed in my perf testing that the throughput slowly dropped over time","ts":"1468248193.001922"},{"type":"message","user":"U0XR6J961","text":"it was a local interaction with a VM","ts":"1468248208.001923"},{"type":"message","user":"U0XR6J961","text":"i think","ts":"1468248209.001924"},{"type":"message","user":"U0XPR4NP4","text":"This was with your shortcircuited chaincode too","ts":"1468248213.001925"},{"type":"message","user":"U0XR6J961","text":"oh, now with externalization we are no longer closed loop","ts":"1468248222.001926"},{"type":"message","user":"U0XR6J961","text":"ah, then that must be ledger","ts":"1468248233.001927"},{"type":"message","user":"U0XR6J961","text":"but apart from the closed loop, it looks good","ts":"1468248246.001928"},{"type":"message","user":"U0XR6J961","text":"none of the fast path stuff was tested","ts":"1468248268.001929"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> Reviewing your branch, the thing that worries me is:\n\n```\nfunc (c *Server) SyncToTarget(blockNumber uint64, blockHash []byte, peerIDs []*pb.PeerID) (error, bool) {\n        panic(\"not implemented\")\n}\n\n\/\/\nfunc (c *Server) GetBlockchainInfoBlob() []byte {\n        \/\/ XXX assemble state for consensus service\n        \/\/ XXX this probably should include last block hash, etc.\n        \/\/panic(\"not implemented\")\n        return []byte(\"some internal state\")\n}\n```\n\nObviously this can't be handled until we actually figure out the inputs\/outputs of consensus, but until these get implemented, almost all failure test scenarios will not succeed.","ts":"1468252023.001930"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1468252042.001931"},{"type":"message","user":"U0XR6J961","text":"but we don't have tests, so that's no problem :slightly_smiling_face:","ts":"1468252063.001932"},{"type":"message","user":"U0XPR4NP4","text":"Haha, I suppose that is one fix","ts":"1468252088.001933"},{"type":"message","user":"U0XR6J961","text":"we need to figure out how we want to store consensus config and apply changes","ts":"1468252167.001934"},{"type":"message","user":"U0XPR4NP4","text":"Without the split, the very natural place is the blockchain, with the split, I'm less convinced.  I also wonder about the growing peers.  I know some discussion had been made about 'longest chain wins' with respect to determining which whitelist to trust, but I don't know if that ever went anywhere.","ts":"1468252331.001935"},{"type":"message","user":"U0XR6J961","text":"yea, policy is a topic for another time","ts":"1468252568.001936"},{"type":"message","user":"U0XR6J961","text":"right now the consensus peers are part of the persist config data","ts":"1468252585.001937"},{"type":"message","user":"U0XR6J961","text":"kostas: any questions yet?","ts":"1468254661.001938"},{"type":"message","user":"U0XR6J961","text":"otherwise i'll check out","ts":"1468254665.001939"},{"type":"message","user":"U0XQ35CDD","text":"Sorry, didn't realize you were waiting on me and was still working on my pre-prepare branch. Will look at it tonight and post questions. We can resume tomorrow.","ts":"1468254707.001940"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1468254870.001941"},{"type":"message","user":"U0XR6J961","text":"is there something for me to work on tomorrow?","ts":"1468254896.001942"},{"type":"message","user":"U0XR6J961","text":"i mean, what are our concrete goals","ts":"1468254920.001943"},{"type":"message","user":"U0XR6J961","text":"maybe we can make this all a bit agily","edited":{"user":"U0XR6J961","ts":"1468254938.000000"},"ts":"1468254932.001944"},{"type":"message","user":"U0XR6J961","text":"because so far we've been doing scrum meetings, but we didn't do the \"these are the things we want to get done, what do you think how long this will take\", etc.","ts":"1468254986.001946"},{"type":"message","user":"U0XR6J961","text":"<@U0XQ35CDD>: what is that pre-prepare change exactly?","ts":"1468255393.001947"},{"type":"message","user":"U0XQ35CDD","text":"modifying `pre_prepare` to take a `request_block` rather than a `request` - this ripples into a bunch of things in pbft-core","ts":"1468255507.001948"},{"type":"message","user":"U0XR6J961","text":"and this is so that when we merge batch and core, we have transparency on the actual request level and don't have to deal with opaque blocks?","ts":"1468255550.001949"},{"type":"message","user":"U0XQ35CDD","text":"Correct.","ts":"1468255556.001950"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1468255594.001951"},{"type":"message","user":"U0XR6J961","text":"we need to figure out a way how to reference requests without re-marshalling them just to do a hash over them","ts":"1468255645.001952"},{"type":"message","user":"U0XQ35CDD","text":"I saw your comments on the performance hit this results in, yes.","ts":"1468255686.001953"},{"type":"message","user":"U0XR6J961","text":"oh, if you rebase onto my code, you also can build and run actual networks much more quickly","ts":"1468255689.001954"},{"type":"message","user":"U0XQ35CDD","text":"Excellent, I shall give it a shot.","ts":"1468255709.001955"},{"type":"message","user":"U0XR6J961","text":"if everybody is okay, i will rebase my branch onto lastest master","ts":"1468255711.001956"},{"type":"message","user":"U0XR6J961","text":"we shouldn't do both at the same time","ts":"1468255721.001957"},{"type":"message","user":"U0XR6J961","text":"or commit trouble","ts":"1468255727.001958"},{"type":"message","user":"U0XR6J961","text":"let me see how quickly i can do that","ts":"1468255747.001959"},{"type":"message","user":"U0XQ35CDD","text":"Right, if you rebase onto the master (pulling in the obc-renaming, and the new discovery service), I can rebase onto your code and get all of those changes in.","ts":"1468255804.001960"},{"type":"message","user":"U0XQ35CDD","text":"Although the discovery service in `fabric` is ultimately irrelevant to your `separate-consensus` work as I understand it.","ts":"1468255842.001961"},{"type":"message","user":"U0XR6J961","text":"haha discovery service","ts":"1468256338.001962"},{"type":"message","user":"U0XR6J961","text":"that one didn't last long","ts":"1468256351.001963"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1468257173.001964"},{"type":"message","user":"U0XR6J961","text":"rebased","ts":"1468257175.001965"},{"type":"message","user":"U0XR6J961","text":"i think at some point we may want to squash some of the commits together","ts":"1468257203.001966"},{"type":"message","user":"U0XR6J961","text":"but let's do that only just before merging into master","ts":"1468257214.001967"},{"type":"message","user":"U0XR6J961","text":"<@U0XQ35CDD>: ready to go","ts":"1468257264.001968"},{"type":"message","user":"U0XQ35CDD","text":"Gotcha, thank you. Will rebase on your branch.","ts":"1468257280.001969"},{"type":"message","user":"U0XR6J961","text":"cool","ts":"1468257292.001970"},{"type":"message","user":"U0XR6J961","text":"i guess then i pin down that branch and start working on a new name?","ts":"1468257324.001971"},{"type":"message","user":"U0XR6J961","text":"making this our new tentative master","ts":"1468257334.001972"},{"type":"message","user":"U0XQ35CDD","text":"Works for me.","ts":"1468257343.001973"},{"type":"message","user":"U0XQ35CDD","text":"Am I still looking at <https:\/\/github.com\/corecode\/fabric\/commits\/separate-consensus>?","attachments":[{"service_name":"GitHub","title":"corecode\/fabric","title_link":"https:\/\/github.com\/corecode\/fabric\/commits\/separate-consensus","text":"Blockchain fabric code","fallback":"GitHub: corecode\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400","from_url":"https:\/\/github.com\/corecode\/fabric\/commits\/separate-consensus","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1468257390.001974"},{"type":"message","user":"U0XR6J961","text":"i think i'll do some performance tests tomorrow and maybe play with building either a bft-smart or a kafka consensus service","ts":"1468257392.001976"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1468257396.001977"},{"type":"message","user":"U0XQ35CDD","text":"OK","ts":"1468257401.001978"},{"type":"message","user":"U0XR6J961","text":"i guess by using bft smart, we could have avoided man months of development work","ts":"1468257694.001979"},{"type":"message","user":"U0XR6J961","text":"oh well","ts":"1468257700.001980"},{"type":"message","user":"U0TFEHX8E","text":"do you plan to move consensus into its own repository?","ts":"1468265891.001981"},{"type":"message","user":"U0XQ35CDD","text":"I think it'd be great if we could do that.","ts":"1468265932.001982","reactions":[{"name":"+1","users":["U0XPR4NP4"],"count":1}]},{"type":"message","user":"U0XQ35CDD","text":"After receiving a `batchMessage-Request` message <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/consensus\/pbft\/batch.go#L325> shouldn't we be doing a check to make sure that the `ReplicaID` included in the message is the same as that of the receiving stream? (Basically, something like this: <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/consensus\/pbft\/pbft-core.go#L571>)","edited":{"user":"U0XQ35CDD","ts":"1468304377.000000"},"ts":"1468304371.001983"},{"type":"message","user":"U0XR6J961","text":"i think we should get rid of the replicaid thing","ts":"1468314717.001986"},{"type":"message","user":"U0XR6J961","text":"and pass it in via recvmsg","ts":"1468314730.001987"},{"type":"message","user":"U0XR6J961","text":"wait, we do that","ts":"1468314738.001988"},{"type":"message","user":"U0XR6J961","text":"so hm","ts":"1468314741.001989"},{"type":"message","user":"U0XR6J961","text":"we need to figure out how to store the consensus config","ts":"1468315783.001990"},{"type":"message","user":"U0XR6J961","text":"options:\n1. yaml text, parsed on start. cons: viper tolerates misspelled keys.  i don't like it\n2. ini text, parsed on start. there are ini parsers that parse directly into config structs.\n3. $config text, parsed on network creation, into config struct.  struct stored as grpc bytestream, grpc unmarshal on start.\n4. $config text, parsed on network creation.  values are stored in separate keys, and individually parsed on startup.  seems fiddly.","ts":"1468316349.001991"},{"type":"message","user":"U0XR6J961","text":"something happened and i seem to only be able to process one request per second, very odd","ts":"1468322536.001992"},{"type":"message","user":"U0XR6J961","text":"somehow not all requests make it into the batch...","ts":"1468322622.001993"},{"type":"message","user":"U0XR6J961","text":"OH","ts":"1468322669.001994"},{"type":"message","user":"U0XR6J961","text":"my requests are all the same -_-","ts":"1468322677.001995"},{"type":"message","user":"U0XR6J961","text":"and therefore get filtered","ts":"1468322685.001996"},{"type":"message","user":"U0XR6J961","text":"so i get around 8500 transactions per second","ts":"1468328565.001997"},{"type":"message","user":"U0XR6J961","text":"which is really really bad","ts":"1468328582.001998"},{"type":"message","user":"U0XR6J961","text":"and the cpu profile is all over the place","ts":"1468328597.001999"},{"type":"message","user":"U0XR6J961","text":"marshaling, network IO, tls?","ts":"1468328610.002000"},{"type":"message","user":"U0XR6J961","text":"maybe the rpc overhead indeed is too high","ts":"1468328692.002001"},{"type":"message","user":"U0XR6J961","text":"15500 with pbft short circuited","ts":"1468328939.002002"},{"type":"message","user":"U0XR6J961","text":"so the overhead seems to be 50:50 pbft and grpc","ts":"1468328956.002003"},{"type":"message","user":"U0XR6J961","text":"super poor number, 15k","ts":"1468329194.002004"},{"type":"message","user":"U0XR6J961","text":"<@U0XPR4NP4>, <@U0XQ35CDD>, <@U0UGH3X7X>: ideas about the config thing?","ts":"1468332879.002005"},{"type":"message","user":"U0XPR4NP4","text":"Are you on the phone?","ts":"1468332895.002006"},{"type":"message","user":"U0XR6J961","text":"i am","ts":"1468332897.002007"},{"type":"message","user":"U0XR6J961","text":"i can hear your slack sounds :slightly_smiling_face:","ts":"1468332906.002008"},{"type":"message","user":"U0XQ35CDD","text":"So, going back to this:","attachments":[{"fallback":"[July 12th, 2016 5:39 AM] simon: options:\n1. yaml text, parsed on start. cons: viper tolerates misspelled keys.  i don't like it\n2. ini text, parsed on start. there are ini parsers that parse directly into config structs.\n3. $config text, parsed on network creation, into config struct.  struct stored as grpc bytestream, grpc unmarshal on start.\n4. $config text, parsed on network creation.  values are stored in separate keys, and individually parsed on startup.  seems fiddly.","author_subname":"simon","ts":"1468316349.001991","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"options:\n1. yaml text, parsed on start. cons: viper tolerates misspelled keys.  i don't like it\n2. ini text, parsed on start. there are ini parsers that parse directly into config structs.\n3. $config text, parsed on network creation, into config struct.  struct stored as grpc bytestream, grpc unmarshal on start.\n4. $config text, parsed on network creation.  values are stored in separate keys, and individually parsed on startup.  seems fiddly.","author_name":"Simon Schubert","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/simon","author_icon":"https:\/\/secure.gravatar.com\/avatar\/676aeb5acbd353b77e077be1b7bd1a6e.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0016-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1468316349001991","is_share":true,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1468338603.002009"},{"type":"message","user":"U0XQ35CDD","text":"I'm not sure what $config text means?","ts":"1468338683.002010"},{"type":"message","user":"U0XPR4NP4","text":"I'm not sure any of the options are great.\n1. I have no real issue with this, beyond yours stated\n2. ini is an odd choice to me, seems like a somewhat antiquated and fiddly format of itself\n3. I see the benefit to doing this is binary, keeps people from thinking they can screw with it, but, simultaneously hard to see what's going on\n4. Not really sure what this means\n\nI think my vote is 1.","ts":"1468338900.002011"},{"type":"message","user":"U0UGH3X7X","text":"should we have the same config system across all of fabric ? I vote for 1  or make a change across the board","ts":"1468338933.002012"},{"type":"message","user":"U0XR6J961","text":"yaml is way bad","ts":"1468338957.002013"},{"type":"message","user":"U0XR6J961","text":"not acceptable for a product","ts":"1468338966.002014"},{"type":"message","user":"U0XR6J961","text":"or at least viper","ts":"1468338974.002015"},{"type":"message","user":"U0XR6J961","text":"ini is just `key = value` pairs, essentially","ts":"1468338994.002016"},{"type":"message","user":"U0XPR4NP4","text":"What is so way bad about it?","ts":"1468339060.002017"},{"type":"message","user":"U0XPR4NP4","text":"(But agree, consistency is valuable here)","ts":"1468339078.002018"},{"type":"message","user":"U0XR6J961","text":"it doesn't validate keys","ts":"1468339336.002019"},{"type":"message","user":"U0XQ35CDD","text":"(Still not clear on the $config text by the way.)","ts":"1468339352.002020"},{"type":"message","user":"U0XR6J961","text":"so you can hunt for hours for a typo","ts":"1468339354.002021"},{"type":"message","user":"U0XR6J961","text":"i don't think we should stick with a bad way just for perceived consistency","ts":"1468339426.002022"},{"type":"message","user":"U0XPR4NP4","text":"I'm not sure what makes it 'perceived' and not 'actual'","ts":"1468339552.002023"},{"type":"message","user":"U0XPR4NP4","text":"But I guess the complaint is that viper has no config schema to complain about unnecessary or missing keys?","ts":"1468339577.002024"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1468339583.002025"},{"type":"message","user":"U0XR6J961","text":"together with yaml whitespace formatting, etc.","ts":"1468339600.002026"},{"type":"message","user":"U0XR6J961","text":"just not good","ts":"1468339607.002027"},{"type":"message","user":"U0XPR4NP4","text":"Because my recollection is that yaml does support schemas","ts":"1468339635.002028"},{"type":"message","user":"U0XPR4NP4","text":"Not certain if viper does","ts":"1468339646.002029"},{"type":"message","user":"U0XPR4NP4","text":"Looks like not.  But I'm not sure how ini solves any of these? I've seen multiple ini formats, and there's no native way to detect missing or misspelled keys.   Obviously you could code something up to do that, but I'm not sure what prevents this from being done against yaml as well.","ts":"1468339912.002030"},{"type":"message","user":"U0XPR4NP4","text":"( [what I was thinking of](<http:\/\/www.kuwata-lab.com\/kwalify\/>) )","edited":{"user":"U0XPR4NP4","ts":"1468339961.000000"},"ts":"1468339941.002031"},{"type":"message","user":"U0XR6J961","text":"there are go packages that do ini parsing","ts":"1468340262.002033"},{"type":"message","user":"U0XR6J961","text":"into a struct","ts":"1468340264.002034"},{"user":"U1QUW6W82","text":"<@U1QUW6W82|michele> has joined the channel","type":"message","subtype":"channel_join","ts":"1468343057.002035"},{"type":"message","user":"U0XR6J961","text":"so with a crude \"rpc\" implementation in C (no TLS), i get to 172k ops\/s on my laptop","ts":"1468410469.002036"},{"type":"message","user":"U0XR6J961","text":"just to get an upper bound","ts":"1468410480.002037"},{"type":"message","user":"U0XR6J961","text":"so using grpc with go is 8% of this performance figure","ts":"1468410495.002038"},{"type":"message","user":"U0XQ35CDD","text":"Are yesterday's numbers w\/o TLS as well?","ts":"1468410538.002039"},{"type":"message","user":"U0XR6J961","text":"no","ts":"1468410587.002040"},{"type":"message","user":"U0XR6J961","text":"these were go grpc with tls","ts":"1468410602.002041"},{"type":"message","user":"U0XR6J961","text":"i don't know whether it is worth to hack in gnutls to see a performance difference","ts":"1468410757.002042"},{"type":"message","user":"U0XR6J961","text":"83k ops\/sec with gnutls anon","ts":"1468414581.002043"},{"type":"message","user":"U0XR6J961","text":"<@U0XQ35CDD>: happy? :slightly_smiling_face:","ts":"1468414616.002044"},{"type":"message","user":"U0Y14MWA2","text":"ouch","ts":"1468415240.002045"},{"type":"message","user":"U0Y14MWA2","text":"what is an op? still Bitcoin size?","edited":{"user":"U0Y14MWA2","ts":"1468415277.000000"},"ts":"1468415264.002046"},{"type":"message","user":"U0XR6J961","text":"couple of bytes","ts":"1468417166.002048"},{"type":"message","user":"U0XR6J961","text":"not much","ts":"1468417169.002049"},{"type":"message","user":"U0XR6J961","text":"heh it dropped to 75k, probably because of thermal limiting","ts":"1468417203.002050"},{"type":"message","user":"U0XR6J961","text":"vukolic: the size doesn't impact things much","ts":"1468417326.002051"},{"type":"message","user":"U0XR6J961","text":"localhost bandwidth is not a problem","ts":"1468417343.002052"},{"type":"message","user":"U0Y14MWA2","text":"so it is 1\/latency of the thingy","ts":"1468417608.002053"},{"type":"message","user":"U0Y14MWA2","text":"but 75k vs 15k is a lot","ts":"1468417653.002054"},{"type":"message","user":"U0XR6J961","text":"well, one is C without any magic dispatch system","ts":"1468418197.002055"},{"type":"message","user":"U0XR6J961","text":"with streaming rpc: ~13k ops\/sec","ts":"1468419288.002056"},{"type":"message","user":"U0XR6J961","text":"38k ops\/sec with streaming without pbft","ts":"1468419600.002057"},{"type":"message","user":"U0XR6J961","text":"so go+streaming grpc = 1\/2 performance of C","ts":"1468419966.002058"},{"type":"message","user":"U0XR6J961","text":"which is fine","ts":"1468419968.002059"},{"type":"message","user":"U0Y14MWA2","text":"ack","edited":{"user":"U0Y14MWA2","ts":"1468424311.000000"},"ts":"1468424276.002060"},{"type":"message","user":"U1B2FF8LR","text":"why is \"F\" defined in consensus\/obcpbft\/config.yaml? I thought it was simply computed = (N-1)\/3. Should we change F if I change \"N\"?","ts":"1468449802.002062"},{"type":"message","user":"U0XQ35CDD","text":"N can actually be &gt; 3f+1","ts":"1468449840.002063"},{"type":"message","user":"U0XQ35CDD","text":"3f+1 is the minimum value it can get","ts":"1468449851.002064"},{"type":"message","user":"U0XQ35CDD","text":"(See: <https:\/\/github.com\/hyperledger\/fabric\/issues\/573#issue-129658891>)","attachments":[{"service_name":"GitHub","title":"Switch pbft-core algorithm to the new bounds for N &gt; 3f \u00b7 Issue #573 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/issues\/573#issue-129658891","text":"If we wish to have N &gt; 3f nodes on the network, we'll need to modify the bounds prescribed in the Castro paper, and switch to the ones suggested by Christian in his \"Yet Another Visit to Paxos\" pap...","fallback":"GitHub: Switch pbft-core algorithm to the new bounds for N &gt; 3f \u00b7 Issue #573 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars2.githubusercontent.com\/u\/14876848?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/issues\/573#issue-129658891","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1468449943.002065"},{"type":"message","user":"U0XV1HDL3","text":"<@U1B2FF8LR>: with N &gt;&gt; 3f one could run more efficiently if not the full resilience is needed.","ts":"1468479524.002067"},{"type":"message","user":"U0XR6J961","text":"so what was the reason why we don't like signatures on commit messages?","ts":"1468487827.002068"},{"type":"message","user":"U0XR6J961","text":"radical idea: assume that don't have arbitrary chaincode, but only a DSL describing an endorsement enforcement policy, i.e. something that deterministically describes a required set of signatures.  changes to the ledger (key\/value store) are authorized by this policy.  do we still need a BFT network for ordering\/appending to the ledger?","ts":"1468493434.002069"},{"type":"message","user":"U0XR6J961","text":"<@U0UGH3X7X> <@U0XPR4NP4> <@U0XQ35CDD> did any of you get the chance of reviewing my separate-consensus branch?","ts":"1468498137.002070"},{"type":"message","user":"U0XQ35CDD","text":"<@U0XR6J961>: I can test it out right now - let's do the Q&amp;A to build that README while at it","ts":"1468501145.002071"},{"type":"message","user":"U0XQ35CDD","text":"So, how do you build and execute?","ts":"1468501192.002072"},{"type":"message","user":"U0XR6J961","text":"`cd consensus-peer`","ts":"1468501225.002073"},{"type":"message","user":"U0XR6J961","text":"`go build`","ts":"1468501229.002074"},{"type":"message","user":"U0XQ35CDD","text":"And then we do `.\/local-deploy.sh \/tmp 4` or sth along these lines?","edited":{"user":"U0XQ35CDD","ts":"1468501275.000000"},"ts":"1468501268.002075"},{"type":"message","user":"U0XR6J961","text":"then do `.\/local-deploy.sh foo 4`","ts":"1468501307.002077"},{"type":"message","user":"U0XQ35CDD","text":"Done, what's next","ts":"1468501317.002078"},{"type":"message","user":"U0XR6J961","text":"`run-1.sh`","ts":"1468501324.002079"},{"type":"message","user":"U0XQ35CDD","text":"What's the result of running local-deploy?","ts":"1468501341.002080"},{"type":"message","user":"U0XR6J961","text":"possibly drop a consensus.yaml into the current directory","ts":"1468501343.002081"},{"type":"message","user":"U0XR6J961","text":"check out the `foo` directory","ts":"1468501350.002082"},{"type":"message","user":"U0XQ35CDD","text":"Roger","ts":"1468501354.002083"},{"type":"message","user":"U0XR6J961","text":"so just run all 4 peers","ts":"1468501395.002084"},{"type":"message","subtype":"file_share","text":"<@U0XQ35CDD|kostas> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/kostas\/F1RMW9570\/screen_shot_2016-07-14_at_09.02.59.png|Screen Shot 2016-07-14 at 09.02.59.png> and commented: Empty. Should I have dropped the YAML file in there before?","file":{"id":"F1RMW9570","created":1468501408,"timestamp":1468501408,"name":"Screen Shot 2016-07-14 at 09.02.59.png","title":"Screen Shot 2016-07-14 at 09.02.59.png","mimetype":"image\/png","filetype":"png","pretty_type":"PNG","user":"U0XQ35CDD","editable":false,"size":184367,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1RMW9570\/screen_shot_2016-07-14_at_09.02.59.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1RMW9570\/download\/screen_shot_2016-07-14_at_09.02.59.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_64":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1RMW9570-f77198ca08\/screen_shot_2016-07-14_at_09.02.59_64.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_80":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1RMW9570-f77198ca08\/screen_shot_2016-07-14_at_09.02.59_80.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1RMW9570-f77198ca08\/screen_shot_2016-07-14_at_09.02.59_360.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360_w":360,"thumb_360_h":117,"thumb_480":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1RMW9570-f77198ca08\/screen_shot_2016-07-14_at_09.02.59_480.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_480_w":480,"thumb_480_h":156,"thumb_160":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1RMW9570-f77198ca08\/screen_shot_2016-07-14_at_09.02.59_160.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1RMW9570-f77198ca08\/screen_shot_2016-07-14_at_09.02.59_720.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720_w":720,"thumb_720_h":233,"thumb_960":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1RMW9570-f77198ca08\/screen_shot_2016-07-14_at_09.02.59_960.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_960_w":960,"thumb_960_h":311,"thumb_1024":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1RMW9570-f77198ca08\/screen_shot_2016-07-14_at_09.02.59_1024.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_1024_w":1024,"thumb_1024_h":332,"image_exif_rotation":1,"original_w":1826,"original_h":592,"permalink":"https:\/\/hyperledgerproject.slack.com\/files\/kostas\/F1RMW9570\/screen_shot_2016-07-14_at_09.02.59.png","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F1RMW9570-20e9752431","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":1,"initial_comment":{"id":"Fc1RNAU41F","created":1468501408,"timestamp":1468501408,"user":"U0XQ35CDD","is_intro":true,"comment":"Empty. Should I have dropped the YAML file in there before?","channel":""}},"user":"U0XQ35CDD","upload":true,"display_as_bot":false,"username":"<@U0XQ35CDD|kostas>","bot_id":null,"ts":"1468501411.002085"},{"type":"message","user":"U0XR6J961","text":"why empty","ts":"1468501442.002086"},{"type":"message","user":"U0XR6J961","text":"must have errored","ts":"1468501446.002087"},{"type":"message","user":"U0XQ35CDD","text":"You see all the output in the screenshot.","ts":"1468501460.002088"},{"type":"message","user":"U0XR6J961","text":"seems your shell doesn't print error results","ts":"1468501467.002089"},{"type":"message","user":"U0XR6J961","text":"do you have `certtool`?","ts":"1468501502.002090"},{"type":"message","user":"U0XQ35CDD","text":"I do not","ts":"1468501517.002091"},{"type":"message","user":"U0XR6J961","text":"well that would be it","ts":"1468501523.002092"},{"type":"message","user":"U0XR6J961","text":"it's part of gnutls","ts":"1468501529.002093"},{"type":"message","user":"U0XQ35CDD","text":"Alright, let me get that then.","ts":"1468501543.002094"},{"type":"message","user":"U0XQ35CDD","text":"Cool, that worked.","ts":"1468501697.002095"},{"type":"message","user":"U0XQ35CDD","text":"Drop `consensus.yaml` into `foo` comes next?","ts":"1468501709.002096"},{"type":"message","user":"U0XR6J961","text":"for example, yes","ts":"1468501729.002097"},{"type":"message","user":"U0XR6J961","text":"if you did a `go install`, then you don't have to fiddle around with `PATH`","ts":"1468501765.002098"},{"type":"message","user":"U0XQ35CDD","text":"Alright, so it works even w\/o dropping a `consensus.yaml` in there","ts":"1468502059.002099"},{"type":"message","user":"U0XR6J961","text":"yea, it'll magically use it","ts":"1468502102.002100"},{"type":"message","user":"U0XR6J961","text":"but just by chance, i think","ts":"1468502108.002101"},{"type":"message","user":"U0XR6J961","text":"so you have a running network now?","ts":"1468502137.002102"},{"type":"message","user":"U0XQ35CDD","text":"Just so we're on the same page - is `consensus.yaml` a renamed `pbft\/config.yaml`?","ts":"1468502163.002103"},{"type":"message","user":"U0XR6J961","text":"oh, then it is called config.yaml","ts":"1468502174.002104"},{"type":"message","user":"U0XR6J961","text":"i didn't change the config loading code","ts":"1468502185.002105"},{"type":"message","user":"U0XQ35CDD","text":"Gotcha, let me try something.","ts":"1468502204.002106"},{"type":"message","user":"U0XR6J961","text":"and?","ts":"1468502528.002107"},{"type":"message","user":"U0XQ35CDD","text":"If I run `.\/run-1.sh` I'm replica vp3","ts":"1468502785.002108"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1468502801.002109"},{"type":"message","user":"U0XQ35CDD","text":"If I run `.\/run-2.sh` I would expect to be another replica, correct?","ts":"1468502805.002110"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1468502809.002111"},{"type":"message","user":"U0XQ35CDD","text":"I'm still `vp3`","ts":"1468502819.002112"},{"type":"message","user":"U0XR6J961","text":"wat","ts":"1468502823.002113"},{"type":"message","user":"U0XQ35CDD","text":"Same for run-3 and run4","ts":"1468502824.002114"},{"type":"message","user":"U0XQ35CDD","text":"And hmm, I see an error message.","ts":"1468502846.002115"},{"type":"message","user":"U0XR6J961","text":"which message?","ts":"1468502861.002116"},{"type":"message","user":"U0XQ35CDD","text":"`listen tcp :7100: bind: address already in use`. Am I supposed to be able to launch all of these processes from the same vagrant session?","ts":"1468502903.002117"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1468502909.002118"},{"type":"message","user":"U0XR6J961","text":"can you show the contents of run-2.sh?","ts":"1468502922.002119"},{"type":"message","user":"U0XQ35CDD","text":"```vagrant@hyperledger-devenv:v0.0.10-bab9e41:\/opt\/gopath\/src\/github.com\/hyperledger\/fabric\/consensus-peer\/foo$ .\/run-2.sh\nlisten tcp :7100: bind: address already in use\n2016\/07\/14 13:23:10 replica 0: 96b6ffc13c4b4626e6c9c12c08518b97499ce3023740871e0e276652ef1434d8\n2016\/07\/14 13:23:10 replica 1: 96b6ffc13c4b4626e6c9c12c08518b97499ce3023740871e0e276652ef1434d8\n2016\/07\/14 13:23:10 replica 2: 96b6ffc13c4b4626e6c9c12c08518b97499ce3023740871e0e276652ef1434d8\n2016\/07\/14 13:23:10 replica 3: 96b6ffc13c4b4626e6c9c12c08518b97499ce3023740871e0e276652ef1434d8\n2016\/07\/14 13:23:10 we are replica vp3 (96b6ff [:6102])```","ts":"1468502940.002120"},{"type":"message","user":"U0XQ35CDD","text":"Let me know if you want more.","ts":"1468502946.002121"},{"type":"message","user":"U0XR6J961","text":"uhm","ts":"1468502948.002122"},{"type":"message","user":"U0XR6J961","text":"why are all the certificates the same?","ts":"1468502958.002123"},{"type":"message","user":"U0XR6J961","text":"that should not happen","ts":"1468502967.002124"},{"type":"message","user":"U0XQ35CDD","text":"This is where you come in and help me debug it.","ts":"1468502978.002125"},{"type":"message","user":"U0XR6J961","text":"something about no entropy","ts":"1468503015.002126"},{"type":"message","user":"U0XR6J961","text":"certtool should create different certificates","ts":"1468503022.002127"},{"type":"message","user":"U0XR6J961","text":"hm","ts":"1468503036.002128"},{"type":"message","user":"U0XR6J961","text":"can you show the contents of run-2.sh?","ts":"1468503043.002129"},{"type":"message","user":"U0XQ35CDD","text":"Last line is `consensus-peer -addr :6102 -cert cert2.pem -key key.pem -data-dir data2 \"$@\"`","ts":"1468503074.002130"},{"type":"message","user":"U0XQ35CDD","text":"And all the `cert*.pem` files are indeed identical.","edited":{"user":"U0XQ35CDD","ts":"1468503102.000000"},"ts":"1468503082.002131"},{"type":"message","user":"U0XR6J961","text":"okay, the listen error is about the profiling port","ts":"1468503104.002133"},{"type":"message","user":"U0XR6J961","text":"which is fine","ts":"1468503108.002134"},{"type":"message","user":"U0XR6J961","text":"that's why it isn't fatal","ts":"1468503122.002135"},{"type":"message","user":"U0XR6J961","text":"something about certtool in your vagrant is really wrong","ts":"1468503140.002136"},{"type":"message","user":"U0XQ35CDD","text":"Googling.","ts":"1468503155.002137"},{"type":"message","user":"U0XR6J961","text":"even if you repeat you get the same certificates?","ts":"1468503167.002138"},{"type":"message","user":"U0XQ35CDD","text":"Let me re-run the deploy script.","ts":"1468503191.002139"},{"type":"message","user":"U0XR6J961","text":"you'll have to remove the directory","ts":"1468503244.002140"},{"type":"message","user":"U0XQ35CDD","text":"Yup yup.","ts":"1468503252.002141"},{"type":"message","user":"U0XQ35CDD","text":"Still the same. This is odd.","ts":"1468503272.002142"},{"type":"message","user":"U0XR6J961","text":"well, you should be able to run all of this outside vagrant","ts":"1468503313.002143"},{"type":"message","user":"U0XR6J961","text":"<@U0XQ35CDD>: try removing the 2&gt;\/dev\/null on the certtool invocations","ts":"1468503428.002144"},{"type":"message","user":"U0XR6J961","text":"maybe it will say something interesting","ts":"1468503436.002145"},{"type":"message","user":"U0XQ35CDD","text":"On it.","ts":"1468503441.002146"},{"type":"message","subtype":"file_share","text":"<@U0XQ35CDD|kostas> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/kostas\/F1RNGHLLD\/__local-deploy_sh_foo_4.txt|.\/local-deploy.sh foo 4>","file":{"id":"F1RNGHLLD","created":1468503588,"timestamp":1468503588,"name":"__local-deploy_sh_foo_4.txt","title":".\/local-deploy.sh foo 4","mimetype":"text\/plain","filetype":"text","pretty_type":"Plain Text","user":"U0XQ35CDD","editable":true,"size":6834,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1RNGHLLD\/__local-deploy_sh_foo_4.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1RNGHLLD\/download\/__local-deploy_sh_foo_4.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/kostas\/F1RNGHLLD\/__local-deploy_sh_foo_4.txt","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F1RNGHLLD-c8c7c5b707","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/kostas\/F1RNGHLLD\/__local-deploy_sh_foo_4.txt\/edit","preview":"Generating a self signed certificate...\r\nX.509 Certificate Information:\r\n\tVersion: 3\r\n\tSerial Number (hex): 578795ec\r\n\tValidity:\r","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>Generating a self signed certificate...<\/pre><\/div>\n<div><pre>X.509 Certificate Information:<\/pre><\/div>\n<div><pre>    Version: 3<\/pre><\/div>\n<div><pre>    Serial Number (hex): 578795ec<\/pre><\/div>\n<div><pre>    Validity:<\/pre><\/div>\n<div><pre><\/pre><\/div>\n<\/div>\n<\/div>\n","lines":192,"lines_more":187,"preview_is_truncated":true,"channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0XQ35CDD","upload":true,"display_as_bot":false,"username":"<@U0XQ35CDD|kostas>","bot_id":null,"ts":"1468503589.002147"},{"type":"message","user":"U0XR6J961","text":"hum","ts":"1468503632.002148"},{"type":"message","user":"U0XR6J961","text":"your certtool is damaged","ts":"1468503689.002149"},{"type":"message","user":"U0XQ35CDD","text":"Huh.","ts":"1468503696.002150"},{"type":"message","user":"U0XR6J961","text":"it uses a super short serial","ts":"1468503709.002151"},{"type":"message","user":"U0XR6J961","text":"probably a 10 year old thing in debian as usual","ts":"1468503722.002152"},{"type":"message","user":"U0XQ35CDD","text":":simple_smile:","ts":"1468503731.002153"},{"type":"message","user":"U0XQ35CDD","text":"I got it via `sudo apt-get install gnutls-bin` -- that would explain it.","ts":"1468503744.002154"},{"type":"message","user":"U0XQ35CDD","text":"Will install from source and give it another go.","ts":"1468503803.002155"},{"type":"message","user":"U0XR6J961","text":"nonono","ts":"1468503893.002156"},{"type":"message","user":"U0XR6J961","text":"let's make it work with vagrant","ts":"1468503899.002157"},{"type":"message","user":"U0XQ35CDD","text":"I'm listening.","ts":"1468503911.002158"},{"type":"message","user":"U0XR6J961","text":"okay, i pushed a new version","ts":"1468504319.002159"},{"type":"message","user":"U0XQ35CDD","text":"`date: invalid date \u2018%s%9N\u2019`?","ts":"1468504429.002160"},{"type":"message","user":"U0XR6J961","text":"oh are you kidding me","ts":"1468504437.002161"},{"type":"message","user":"U0XR6J961","text":"what kind of linux is this?","ts":"1468504456.002162"},{"type":"message","user":"U0XQ35CDD","text":"Ubuntu 14.04.04","edited":{"user":"U0XQ35CDD","ts":"1468504483.000000"},"ts":"1468504464.002163"},{"type":"message","user":"U0XR6J961","text":"2 years old and probably even older","ts":"1468504517.002165"},{"type":"message","user":"U0XR6J961","text":"well, what can date produce","ts":"1468504531.002166"},{"type":"message","user":"U0XQ35CDD","text":"If you're asking for its output, it looks like this: `Thu Jul 14 13:55:43 UTC 2016`","ts":"1468504565.002167"},{"type":"message","user":"U0XR6J961","text":"well new date can use %N to output nanoseconds","ts":"1468504596.002168"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1468504729.002169"},{"type":"message","user":"U0XR6J961","text":"try again","ts":"1468504730.002170"},{"type":"message","user":"U0XQ35CDD","text":"`date +%N` gives me nanoseconds FWIW","ts":"1468504748.002171"},{"type":"message","user":"U0XQ35CDD","text":"Don't know if you're ready for this...","ts":"1468504852.002172"},{"type":"message","user":"U0XQ35CDD","text":"`date: invalid date \u2018%s1\u2019`","ts":"1468504860.002173"},{"type":"message","user":"U0XR6J961","text":"OH WHAT","ts":"1468504884.002174"},{"type":"message","user":"U0XR6J961","text":"what is this about?","ts":"1468504931.002177"},{"type":"message","user":"U0XR6J961","text":"so %N gives nanosec, and %s gives sec, but %s%N doesn't work?","ts":"1468504956.002178"},{"type":"message","user":"U0XR6J961","text":"or %s%9N","ts":"1468504962.002179"},{"type":"message","user":"U0XR6J961","text":"or %s1","ts":"1468504966.002180"},{"type":"message","user":"U0XR6J961","text":"what is this lunacy","ts":"1468504973.002181"},{"type":"message","user":"U0XQ35CDD","text":"Let me try something.","ts":"1468505022.002182"},{"type":"message","user":"U0XQ35CDD","text":"Can you give me an example output of `%s%9N` from your machine?","ts":"1468505104.002183"},{"type":"message","user":"U0XR6J961","text":"it's seconds then nanoseconds","ts":"1468505117.002184"},{"type":"message","user":"U0XR6J961","text":"```% date +'%s%9N' \n1468505127401261388\n```","ts":"1468505138.002185"},{"type":"message","user":"U0XQ35CDD","text":"```consensus-peer$ date +'%s%9N'\n1468505146450186473```","ts":"1468505157.002186"},{"type":"message","user":"U0XQ35CDD","text":"So, that works.","ts":"1468505179.002187"},{"type":"message","user":"U0XR6J961","text":"so what is going on?","ts":"1468505181.002188"},{"type":"message","user":"U0XR6J961","text":"OH","ts":"1468505196.002189"},{"type":"message","user":"U0XR6J961","text":"the +","ts":"1468505197.002190"},{"type":"message","user":"U0XR6J961","text":"oh my.","ts":"1468505200.002191"},{"type":"message","user":"U0XQ35CDD","text":"Yes.","ts":"1468505205.002192"},{"type":"message","user":"U0XR6J961","text":"why did this work then?","ts":"1468505208.002193"},{"type":"message","user":"U0XR6J961","text":"a mystery","ts":"1468505217.002194"},{"type":"message","user":"U0XR6J961","text":"okay, i'm going to rewind this branch","ts":"1468505231.002195"},{"type":"message","user":"U0XR6J961","text":"just because there is too much embarrasment","ts":"1468505239.002196"},{"type":"message","user":"U0XQ35CDD","text":"Yup.","ts":"1468505240.002197"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1468505320.002199"},{"type":"message","user":"U0XR6J961","text":"<@U0XQ35CDD>: does it work now?","ts":"1468505663.002200"},{"type":"message","user":"U0XQ35CDD","text":"Was talking to <@U13TWBRBL> for a sec, checking now.","ts":"1468505688.002201"},{"type":"message","user":"U0XQ35CDD","text":"`error parsing command line: template1.cfg: given number '1468505963808852495' was too big or too small in option 'serial' at position 51 in config file`","ts":"1468505984.002202"},{"type":"message","user":"U0XR6J961","text":"LOL","ts":"1468506136.002203"},{"type":"message","user":"U0XR6J961","text":"<http:\/\/are.you.kidding.me|are.you.kidding.me>.","ts":"1468506147.002204"},{"type":"message","user":"U0XR6J961","text":"okay, i pushed a rewound version","ts":"1468506206.002205"},{"type":"message","user":"U0XR6J961","text":"this vagrant is aggravating","ts":"1468506216.002206"},{"type":"message","user":"U0XR6J961","text":"aggravant","ts":"1468506219.002207"},{"type":"message","user":"U0XQ35CDD","text":"This should work, the certs are different now.","ts":"1468506345.002208"},{"type":"message","user":"U0XQ35CDD","text":"We're good.","ts":"1468506511.002209"},{"type":"message","user":"U0XR6J961","text":"phew","ts":"1468506660.002210"},{"type":"message","user":"U0XR6J961","text":"does the network work now?","ts":"1468506808.002211"},{"type":"message","user":"U0XR6J961","text":"<@U0XQ35CDD>: did i lose you?","ts":"1468507085.002212"},{"type":"message","user":"U0XQ35CDD","text":"You did not. The network runs fine, we're good.","ts":"1468507179.002213"},{"type":"message","user":"U0XR6J961","text":"ah cool","ts":"1468507207.002214"},{"type":"message","user":"U0XR6J961","text":"you can connect to it with the test-client","ts":"1468507227.002215"},{"type":"message","user":"U0XQ35CDD","text":"Can you give me instructions on how to do it?","ts":"1468507237.002216"},{"type":"message","user":"U0XR6J961","text":"sure","ts":"1468507241.002217"},{"type":"message","user":"U0XR6J961","text":"`cd test-client; go build`","ts":"1468507249.002218"},{"type":"message","user":"U0XR6J961","text":"`.\/test-client -addr :6101 -cert $pathto\/cert1.pem -listen`","ts":"1468507306.002219"},{"type":"message","user":"U0XR6J961","text":"`.\/test-client -addr :6102 -cert $pathto\/cert2.pem -broadcast \"hi\"`","ts":"1468507330.002220"},{"type":"message","user":"U0XQ35CDD","text":"Neat!","ts":"1468507490.002221"},{"type":"message","user":"U0XR6J961","text":"you can also use -parallel 10 on the broadcast to run a performance test","ts":"1468507528.002222"},{"type":"message","user":"U0XQ35CDD","text":"Can you tell me what happens with each command? When you pass the `-listen` flag what happens under the covers?","ts":"1468507530.002223"},{"type":"message","user":"U0XR6J961","text":"or 20","ts":"1468507532.002224"},{"type":"message","user":"U0XR6J961","text":"it connects and subscribes to the `Deliver` stream","ts":"1468507547.002225"},{"type":"message","user":"U0XR6J961","text":"now what you can do is run a fabric peer connected to the consensus service","ts":"1468507580.002226"},{"type":"message","user":"U0XR6J961","text":"`CORE_PEER_VALIDATOR_CONSENTER_ADDRESS=:6101 CORE_PEER_VALIDATOR_CONSENTER_CERT_FILE=$pathto\/cert1.pem .\/peer node start`","ts":"1468507635.002227"},{"type":"message","user":"U0XQ35CDD","text":"And `-broadcast \"foo\"` creates a transaction with that payload?","ts":"1468507638.002228"},{"type":"message","user":"U0XR6J961","text":"yes exactly","ts":"1468507644.002229"},{"type":"message","user":"U0XQ35CDD","text":"When I do the `-parallel` thing, the output looks like this:","ts":"1468507687.002230"},{"type":"message","user":"U0XQ35CDD","text":"`success: 123.95 failure: 0.00`","ts":"1468507688.002231"},{"type":"message","user":"U0XR6J961","text":"rate per second","ts":"1468507696.002232"},{"type":"message","user":"U0XQ35CDD","text":"What's that number next to `success`?","ts":"1468507696.002233"},{"type":"message","user":"U0XQ35CDD","text":"Gotcha.","ts":"1468507702.002234"},{"type":"message","user":"U0XQ35CDD","text":"And what does the `10` stand for?","ts":"1468507721.002235"},{"type":"message","user":"U0XQ35CDD","text":"I was expecting 10 transactions to be honest.","ts":"1468507730.002236"},{"type":"message","user":"U0XR6J961","text":"10 parallel goroutines","ts":"1468507736.002237"},{"type":"message","user":"U0XR6J961","text":"submitting transactions","ts":"1468507756.002238"},{"type":"message","user":"U0XQ35CDD","text":"With each of them submitting how many txs?","ts":"1468507763.002239"},{"type":"message","user":"U0XR6J961","text":"forever","ts":"1468507768.002240"},{"type":"message","user":"U0XQ35CDD","text":"Oh, so I ctrl+c?","ts":"1468507779.002241"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1468507782.002242"},{"type":"message","user":"U0XQ35CDD","text":"Gotcha, 100 tps by the way.","ts":"1468507845.002243"},{"type":"message","user":"U0XQ35CDD","text":"This is great.","ts":"1468507883.002244"},{"type":"message","user":"U0XQ35CDD","text":"(Not the number, but the way the network is spawned.)","ts":"1468507904.002245"},{"type":"message","user":"U0XQ35CDD","text":"I say you go for it and do a PR, we can review the code then.","ts":"1468507930.002246"},{"type":"message","user":"U0XQ35CDD","text":"But I'd definitely add a `README.md` before the PR though.","ts":"1468508211.002247"},{"type":"message","user":"U0XR6J961","text":"well it definitely degrades resilience compared to v0.5","ts":"1468508710.002248"},{"type":"message","user":"U0XR6J961","text":"because no state transfer, etc.","ts":"1468508717.002249"},{"type":"message","user":"U0XR6J961","text":"`CORE_PEER_VALIDATOR_CONSENTER_ADDRESS=local-development-loopback-consensus`","ts":"1468511044.002250"},{"text":"looks for <@U0XQ35CDD|kostas> and <@U0XPR4NP4|jyellick>","type":"message","subtype":"me_message","user":"U0XR6J961","ts":"1468588031.002251"},{"type":"message","user":"U0XQ35CDD","text":"<@U0XR6J961>: hello","edited":{"user":"U0XQ35CDD","ts":"1468588291.000000"},"ts":"1468588107.002252"},{"type":"message","user":"U0XQ35CDD","text":"(Jason's out until Mon-Tue IIRC)","ts":"1468588300.002254"},{"type":"message","user":"U0XPR4NP4","text":"(correct, am out on vacation, unless it's something quick) ","ts":"1468588362.002255"},{"type":"message","user":"U0XR6J961","text":"ah okay","ts":"1468588366.002256"},{"type":"message","user":"U0XR6J961","text":"stay vacating","ts":"1468588370.002257"},{"type":"message","user":"U0XR6J961","text":"so regarding pbft config persistence:","ts":"1468589019.002258"},{"type":"message","user":"U0XR6J961","text":"how does the config get persisted?","ts":"1468589031.002259"},{"type":"message","user":"U0XR6J961","text":"is the config stored as text and parsed?","ts":"1468589107.002260"},{"type":"message","user":"U0XR6J961","text":"or is it stored as protobuf and unmarshaled?","ts":"1468589140.002261"},{"type":"message","user":"U0XR6J961","text":"or is it stored as individual elements and converted from []byte to uint64, e.g.","ts":"1468589184.002262"},{"type":"message","user":"U0XQ35CDD","text":"I'm tending towards protobufs, which I believe was option 3 when you asked a couple of days back. IIRC, you're leaning more towards the INI option?","ts":"1468589274.002263"},{"type":"message","user":"U0XR6J961","text":"well, if we use protobuf, we still need to get the config into the protobuf","ts":"1468589329.002264"},{"type":"message","user":"U0XQ35CDD","text":"What's the workflow here? Edit the protobuf and run, or run using command-line flags, parse those and persist them into a protobuf?","ts":"1468589598.002266"},{"type":"message","user":"U0XR6J961","text":"exactly that's my question","ts":"1468589953.002268"},{"type":"message","user":"U0XR6J961","text":"seems that we would still read from some text config","ts":"1468589963.002269"},{"type":"message","user":"U0XQ35CDD","text":"<http:\/\/stackoverflow.com\/questions\/12873653\/using-protobuf-as-a-textual-configuraton-file>","attachments":[{"title":"using protobuf as a textual configuraton file","title_link":"http:\/\/stackoverflow.com\/questions\/12873653\/using-protobuf-as-a-textual-configuraton-file","text":"I recently encountered a very large mission-critical project where all the configurationfiles were defined using textual protobuf definitions. The configuration files are meant to be human readab...","fallback":"using protobuf as a textual configuraton file","thumb_url":"http:\/\/cdn.sstatic.net\/Sites\/stackoverflow\/img\/apple-touch-icon@2.png?v=73d79a89bded&a","from_url":"http:\/\/stackoverflow.com\/questions\/12873653\/using-protobuf-as-a-textual-configuraton-file","thumb_width":316,"thumb_height":316,"service_icon":"http:\/\/cdn.sstatic.net\/Sites\/stackoverflow\/img\/favicon.ico?v=4f32ecc8f43d","service_name":"stackoverflow.com","id":1}],"ts":"1468590055.002270"},{"type":"message","user":"U0XQ35CDD","text":"Would it be a bad idea (or as the OP wonders, \"moronic\") to have a `.proto` file with a `message Config` serve as our new `config.yaml`? Tending towards this even though it'll be less easy to edit than other options. I do not have a hard stand on the matter though.","edited":{"user":"U0XQ35CDD","ts":"1468683317.000000"},"ts":"1468590371.002272"},{"user":"U1S54EHL7","text":"<@U1S54EHL7|steven.lebowitz> has joined the channel","type":"message","subtype":"channel_join","ts":"1468606431.002273"},{"user":"U1SE970KY","text":"<@U1SE970KY|svr> has joined the channel","type":"message","subtype":"channel_join","ts":"1468751801.000002"},{"type":"message","user":"U0XR6J961","text":"all of the code parts are so interconnected","ts":"1468856418.000003"},{"type":"message","user":"U0XR6J961","text":"not happy about this","ts":"1468856423.000004"},{"type":"message","user":"U0XR6J961","text":"so how do i unify config setting in pbft","ts":"1468857771.000005"},{"type":"message","user":"U0XR6J961","text":"we have a set of peers, which should drive N","ts":"1468857902.000006"},{"type":"message","user":"U0KM61BCP","text":"on chain?","ts":"1468857987.000007"},{"type":"message","user":"U0XQ35CDD","text":"What does \"on chain\"' mean?","ts":"1468858010.000008"},{"type":"message","user":"U0XR6J961","text":"cbf: no, consenters will run entirely separately","ts":"1468858011.000009"},{"type":"message","user":"U0XQ35CDD","text":"Ah.","ts":"1468858036.000010"},{"type":"message","user":"U0XR6J961","text":"this is a pretty low level question","ts":"1468858048.000011"},{"type":"message","user":"U0XR6J961","text":"i have a set of peers that are used in `backend`","ts":"1468858075.000012"},{"type":"message","user":"U0XR6J961","text":"and pbft, which currently is created in `main`","ts":"1468858086.000013"},{"type":"message","user":"U0XR6J961","text":"so somehow `main` needs to update N?","ts":"1468858109.000014"},{"type":"message","user":"U0XR6J961","text":"or `backend` instantiates pbft","ts":"1468858117.000015"},{"type":"message","user":"U0XR6J961","text":"ah cute, that works","ts":"1468858456.000016"},{"user":"U0UKSBAKZ","text":"<@U0UKSBAKZ|sergeybalashevich> has joined the channel","type":"message","subtype":"channel_join","ts":"1468871457.000017"},{"user":"U1ADSTE0N","text":"<@U1ADSTE0N|viewer> has joined the channel","type":"message","subtype":"channel_join","ts":"1468915231.000018"},{"type":"message","user":"U0XR6J961","text":"anybody around?","ts":"1468932360.000019"},{"type":"message","user":"U0XR6J961","text":"jyellick: around?","ts":"1468933861.000020"},{"type":"message","user":"U0XPR4NP4","text":"Yep","ts":"1468933868.000021"},{"type":"message","user":"U0XR6J961","text":"i keep trying to figure out a way how to configure the consensus peer","ts":"1468933894.000022"},{"type":"message","user":"U0XR6J961","text":"like, create the initial configuration","ts":"1468933901.000023"},{"type":"message","user":"U0XPR4NP4","text":"Right","ts":"1468933923.000024"},{"type":"message","user":"U0XR6J961","text":"just on a commandline use level","ts":"1468933930.000025"},{"type":"message","user":"U0XR6J961","text":"and i can't figure it out","ts":"1468933939.000026"},{"type":"message","user":"U0XR6J961","text":"there are a few small restrictions","ts":"1468933950.000027"},{"type":"message","user":"U0XR6J961","text":"so i start with a `.ini` file","ts":"1468933963.000028"},{"type":"message","user":"U0XR6J961","text":"that sets all the pbft things","ts":"1468933970.000029"},{"type":"message","user":"U0XR6J961","text":"that works fine","ts":"1468933973.000030"},{"type":"message","user":"U0XR6J961","text":"but in addition to `N`, i need certificates and addresses for the peers","ts":"1468933995.000031"},{"type":"message","user":"U0XQ35CDD","text":"just point it to a dir where these are stored?","ts":"1468934044.000032"},{"type":"message","user":"U0XR6J961","text":"stored how?","ts":"1468934056.000033"},{"type":"message","user":"U0XR6J961","text":"every peer is a tuple of (address, certificate)","ts":"1468934078.000034"},{"type":"message","user":"U0XQ35CDD","text":"A generation step comes first. ","ts":"1468934089.000035"},{"type":"message","user":"U0XR6J961","text":"well in a realistic scenario, some other operator would create a certificate, and then tell you the address the peer is on","ts":"1468934132.000036"},{"type":"message","user":"U0XR6J961","text":"and would hand you the certificate and address","ts":"1468934166.000037"},{"type":"message","user":"U0XR6J961","text":"possibly somebody would compile a configuration of all peers","ts":"1468934184.000038"},{"type":"message","user":"U0XR6J961","text":"like, an authoritative config file","ts":"1468934206.000039"},{"type":"message","user":"U0XPR4NP4","text":"I guess we do not want to require that the address is in the cert, ie the common name?","ts":"1468934213.000040"},{"type":"message","user":"U0XR6J961","text":"i didn't require this at the moment","ts":"1468934235.000041"},{"type":"message","user":"U0XR6J961","text":"right now to authenticate, i compare the certificiate that is sent","ts":"1468934256.000042"},{"type":"message","user":"U0XR6J961","text":"i don't know whether comparing a fingerprint is acceptable","ts":"1468934268.000043"},{"type":"message","user":"U0XR6J961","text":"so the problem basically is that certificates are usually stored in a separate file","ts":"1468934292.000044"},{"type":"message","user":"U0XR6J961","text":"which complicates things","ts":"1468934309.000045"},{"type":"message","user":"U0XR6J961","text":"because then i can't just store the ini in verbatim","ts":"1468934321.000046"},{"type":"message","user":"U0XR6J961","text":"but maybe i shouldn't do that at all","ts":"1468934337.000047"},{"type":"message","user":"U0XR6J961","text":"yea i guess that's too brittle","ts":"1468934432.000048"},{"type":"message","user":"U0XPR4NP4","text":"How are you enumerating the peers? A comma separated list? If you want to stick with something like ini which doesn't natively support multi-entry fields and such, I would be inclined to go with a nested directory structure.","ts":"1468934462.000049"},{"type":"message","user":"U0XR6J961","text":"well, exactly, how","ts":"1468934489.000050"},{"type":"message","user":"U0XPR4NP4","text":"You could simply have a 'peers' directory, and a directory for each peer, which includes a name and a certificate.","ts":"1468934491.000051"},{"type":"message","user":"U0XR6J961","text":"ignoring the ini format for a moment","ts":"1468934494.000052"},{"type":"message","user":"U0XR6J961","text":"peers are tuples of address and certificate","ts":"1468934507.000053"},{"type":"message","user":"U0XR6J961","text":"address, meaning IP\/name, port","ts":"1468934529.000054"},{"type":"message","user":"U0XPR4NP4","text":"Here I am using name\/address interchangeably","ts":"1468934538.000055"},{"type":"message","user":"U0XPR4NP4","text":"Yes","ts":"1468934543.000056"},{"type":"message","user":"U0XR6J961","text":"so my prototype is something like","ts":"1468934568.000057"},{"type":"message","user":"U0XR6J961","text":"```[peer \"foo\"]\naddress = name:5111\ncert = foocert.pem\n```","ts":"1468934598.000058"},{"type":"message","user":"U0XR6J961","text":"which works good enough","ts":"1468934610.000059"},{"type":"message","user":"U0XR6J961","text":"just to initialize the local peer","ts":"1468934657.000060"},{"type":"message","user":"U0XR6J961","text":"i guess that works","ts":"1468934660.000061"},{"type":"message","user":"U0XR6J961","text":"then the question becomes: how do we store the pbft config in our consensus state","ts":"1468934686.000062"},{"type":"message","user":"U0XR6J961","text":"because the config should basically form the genesis hash, so that all replicas are configured the same way","ts":"1468934716.000063"},{"type":"message","user":"U0XPR4NP4","text":"So, do we have a plan for updating configuration at runtime?","ts":"1468934751.000064"},{"type":"message","user":"U0XR6J961","text":"i have a vague plan","ts":"1468934761.000065"},{"type":"message","user":"U0XR6J961","text":"basically assuming there is a protocol that allows submission of a new config, which has to be signed by enough replicas, goes through consensus, check signatures, apply configuration to state at some point, then restart application","ts":"1468934859.000066"},{"type":"message","user":"U0XPR4NP4","text":"How is this reflected in the local configuration? Are the config files essentially inert after bootstrapping?","ts":"1468934909.000067"},{"type":"message","user":"U0XR6J961","text":"that's why i want to put them into the state","ts":"1468934931.000068"},{"type":"message","user":"U0XR6J961","text":"and not operate from some random config file","ts":"1468934940.000069"},{"type":"message","user":"U0XPR4NP4","text":"I understand and like the simplicity of a plain config file to start, but I would be in favor of using whatever this runtime facility is to do the modification","ts":"1468934961.000070"},{"type":"message","user":"U0XR6J961","text":"you go `consensus-peer -init somefile.ini -data-dir foo`","ts":"1468934962.000071"},{"type":"message","user":"U0XPR4NP4","text":"Maybe start in a state of 'operate in N=1, f=0, listen only on a local socket, and wait for a config update'","ts":"1468934982.000072"},{"type":"message","user":"U0XR6J961","text":"and this creates `foo` and populates it with some internal representation of `somefile.ini`","ts":"1468934997.000073"},{"type":"message","user":"U0XPR4NP4","text":"And then use whatever mechanism it is that injects runtime config changes to do the bootstrapping","ts":"1468935002.000074"},{"type":"message","user":"U0XR6J961","text":"but then we would have to first develop the mechanism on how to change config during runtime","ts":"1468935022.000075"},{"type":"message","user":"U0XR6J961","text":"i don't think that's a low effort sequence","ts":"1468935035.000076"},{"type":"message","user":"U0XPR4NP4","text":"Yes, that's true.  I just dislike the idea of multiple configuration paths.  I suppose we could always migrate things later.","ts":"1468935102.000077"},{"type":"message","user":"U0XR6J961","text":"one is \"initial setup\", the other is \"modify setup\"","ts":"1468935129.000078"},{"type":"message","user":"U0XR6J961","text":"there always will be those two","ts":"1468935152.000079"},{"type":"message","user":"U0XR6J961","text":"anyways, how do we store our state?","ts":"1468935207.000080"},{"type":"message","user":"U0XR6J961","text":"especially, how do we store our config","ts":"1468935221.000081"},{"type":"message","user":"U0XR6J961","text":"the problem with grpc is that if we serialize it multiple times, we are not guaranteed the same output","ts":"1468935247.000082"},{"type":"message","user":"U0XR6J961","text":"i think practically right now there is","ts":"1468935262.000083"},{"type":"message","user":"U0XR6J961","text":"but it is not good practice to rely on it","ts":"1468935277.000084"},{"type":"message","user":"U0XR6J961","text":"should we store all pbft config settings in separate persist keys and (un)serialize them by ourselves?","ts":"1468935359.000085"},{"type":"message","user":"U0XR6J961","text":"then we have a defined format","ts":"1468935381.000086"},{"type":"message","user":"U0XPR4NP4","text":"Can you explain this?","attachments":[{"fallback":"[July 19th, 2016 9:34 AM] simon: the problem with grpc is that if we serialize it multiple times, we are not guaranteed the same output","author_subname":"simon","ts":"1468935247.000082","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"the problem with grpc is that if we serialize it multiple times, we are not guaranteed the same output","author_name":"Simon Schubert","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/simon","author_icon":"https:\/\/secure.gravatar.com\/avatar\/676aeb5acbd353b77e077be1b7bd1a6e.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0016-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1468935247000082","is_share":true,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1468935405.000087"},{"type":"message","user":"U0XQ35CDD","text":"&gt; the problem with grpc is that if we serialize it multiple times, we are not guaranteed the same output","ts":"1468935407.000088"},{"type":"message","user":"U0XQ35CDD","text":"Not sure I follow. ","ts":"1468935412.000089"},{"type":"message","user":"U0XQ35CDD","text":"Ah.","ts":"1468935414.000090"},{"type":"message","user":"U0XQ35CDD","text":"(Same here.)","ts":"1468935428.000091"},{"type":"message","user":"U0XR6J961","text":"nothing in the grpc spec says that the same structure will always be serialized the same way","ts":"1468935516.000092"},{"type":"message","user":"U0XR6J961","text":"fields could be reordered","ts":"1468935527.000093"},{"type":"message","user":"U0XR6J961","text":"well, protobufs","edited":{"user":"U0XR6J961","ts":"1468935549.000000"},"ts":"1468935546.000094"},{"type":"message","user":"U0XR6J961","text":"not grpc","ts":"1468935550.000096"},{"type":"message","user":"U0XQ35CDD","text":"Got it, so hash will be different, etc. ","ts":"1468935576.000097"},{"type":"message","user":"U0ULK2JPP","text":"<@U0XR6J961>\u2026 sorry to jump in :slightly_smiling_face: \u2026. but the grpc statement caught the eye","ts":"1468935624.000098"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1468935625.000099"},{"type":"message","user":"U0XQ35CDD","text":"So you suggest timeout.request goes to a separate persist key, and the same process is followed for every PBFT key essentially.","ts":"1468935627.000100"},{"type":"message","user":"U0XR6J961","text":"kostas: that could be one way of doing it","ts":"1468935641.000101"},{"type":"message","user":"U0ULK2JPP","text":"do protofbuf folks specifically say that we cannot depend on structures being serialized the same way ?","ts":"1468935691.000102"},{"type":"message","user":"U0ULK2JPP","text":"typically we expect \u201cbackward compatibility\u201d so we can dd new fields to the end\u2026. but if we cannot rely upon ordering even among existing fields, that goes out of the window","ts":"1468935764.000103"},{"type":"message","user":"U0XR6J961","text":"nothing states that all implementations will always do it the same way","ts":"1468935766.000104"},{"type":"message","user":"U0ULK2JPP","text":"not saying you are wrong\u2026. but it is surprising","ts":"1468935784.000105"},{"type":"message","user":"U0XR6J961","text":"unless there is a clear statement that this is a format requirement, i don't think we can rely on it","ts":"1468935817.000106"},{"type":"message","user":"U0XPR4NP4","text":"This is surprising to me, I thought the numbers associated with the protobuf fields indicated a required ordering (not saying you are wrong, just surprising)","ts":"1468935899.000107"},{"type":"message","user":"U0ULK2JPP","text":"^^^ ditto","ts":"1468935930.000108"},{"type":"message","user":"U0XPR4NP4","text":"<https:\/\/developers.google.com\/protocol-buffers\/docs\/encoding#order>","ts":"1468936175.000109"},{"type":"message","user":"U0XPR4NP4","text":"\"when a message is serialized its known fields should be written sequentially by field number\"","ts":"1468936202.000110"},{"type":"message","user":"U0XPR4NP4","text":"It sounds to me like we can rely on field ordering when serializing, however decoding must support arbitrary ordering.","ts":"1468936246.000111"},{"type":"message","user":"U0XR6J961","text":"should","ts":"1468936422.000112"},{"type":"message","user":"U0XR6J961","text":"not MUST","ts":"1468936434.000113"},{"type":"message","user":"U0XR6J961","text":"or will","ts":"1468936438.000114"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I suppose read with the RFC type meaning of 'should', then it is not guaranteed.  This comes back to a possible runtime reconfiguration.  If runtime reconfiguration is done by simply broadcasting an encoded protobuf of the config, then it seems like we have no problem?","ts":"1468936684.000115"},{"type":"message","user":"U0XR6J961","text":"correct","ts":"1468936778.000116"},{"type":"message","user":"U0XR6J961","text":"if just one person encodes it, all is fine","ts":"1468936792.000117"},{"type":"message","user":"U0XPR4NP4","text":"I'd be inclined to make the config generation a separate tool, parses your INI, spits out an encoded protobuf config, which is consumable initially only via some 'bootstrap with this config' param, and later via the runtime reconfiguration.  Less intuitive to start, but seems more consistent to me.","ts":"1468936905.000118"},{"type":"message","user":"U0ULK2JPP","text":"I still think the \u201cshould\u201d is misleading\u2026. we can take it to the extreme and take it to mean two back to back serializations in the same transport can be serialized differently\u2026 would make the deserilization more complex and inefficient.","ts":"1468936937.000119"},{"type":"message","user":"U0ULK2JPP","text":"I think its worth confirming that the \u201cshould\u201d is meant to be a \u201cshould\"","ts":"1468936964.000120"},{"type":"message","user":"U0XR6J961","text":"what do you mean by misleading?","ts":"1468936998.000121"},{"type":"message","user":"U0ULK2JPP","text":"I think they could have wanted to mean would or must","ts":"1468937031.000122"},{"type":"message","user":"U0XR6J961","text":"jyellick: so use protobuf as internal config serialization?","ts":"1468937038.000123"},{"type":"message","user":"U0ULK2JPP","text":"did they put the should in bold ? as SHOULD ?","ts":"1468937046.000124"},{"type":"message","user":"U0XR6J961","text":"muralisr: what does it matter?","ts":"1468937053.000125"},{"type":"message","user":"U0XR6J961","text":"clearly it doesn't say WILL ALWAYS SRSLY YOU CAN TRUST US","ts":"1468937065.000126"},{"type":"message","user":"U0ULK2JPP","text":"it matters if it makes implementation convoluted","ts":"1468937091.000127"},{"type":"message","user":"U0XPR4NP4","text":"simon: That seems like the most direct path to me, and the easiest to extend down the road","ts":"1468937092.000128"},{"type":"message","user":"U0ULK2JPP","text":"if not, then it doesn't","ts":"1468937106.000129"},{"type":"message","user":"U0ULK2JPP","text":"btw way I meant the should in caps as they do typically in an RFC\u2026.it would add weight to that that intent","ts":"1468937276.000130"},{"type":"message","user":"U0ULK2JPP","text":":slightly_smiling_face:","ts":"1468937278.000131"},{"type":"message","user":"U0XR6J961","text":"i don't think it is good software engineering practice to sloppily accept third party outputs as the foundation for a data structure that should (cryptograpically) last for years or decades","ts":"1468937337.000132"},{"type":"message","user":"U0ULK2JPP","text":"agreed","ts":"1468937359.000133"},{"type":"message","user":"U0XR6J961","text":"so our stable outputs need to be hand crafted","ts":"1468937373.000134"},{"type":"message","user":"U0XR6J961","text":"the wire formats can change more easily","ts":"1468937411.000135"},{"type":"message","user":"U0XR6J961","text":"okay, protobufs then","ts":"1468937449.000136"},{"type":"message","user":"U0ULK2JPP","text":"however backward compatibility is a big issue with all these wire format datastructures. \u2026. not sure if they\u2019d change that easily. There maybe a new \u201cversion\u201d as in protobuf2 vs 3","ts":"1468937705.000137"},{"type":"message","user":"U0XR6J961","text":"<@U0XQ35CDD> <@U0XPR4NP4> <@U0UGH3X7X> in preparation for the scrum, let's make a list of targets we need to reach, and break them down into tasks","ts":"1468937714.000138"},{"type":"message","user":"U0ULK2JPP","text":"anyway that\u2019s my story","ts":"1468937745.000139"},{"type":"message","user":"U0XR6J961","text":"<@U0XPR4NP4>: can we derive all these viewchange and request and resend timeouts from a single value?","ts":"1468938747.000140"},{"type":"message","user":"U0XPR4NP4","text":"I think we should","ts":"1468938802.000141"},{"type":"message","user":"U0XPR4NP4","text":"There is too much dependency between them all","ts":"1468938811.000142"},{"type":"message","user":"U0XPR4NP4","text":"I'd actually love to set them more heuristically, based on network performance, but that is a step for later","ts":"1468938828.000143"},{"type":"message","user":"U0XPR4NP4","text":"batch timeout &lt; request timeout &lt; null request timeout","ts":"1468938902.000144"},{"type":"message","user":"U0XR6J961","text":"okay, so we just define one, and calculate the others","ts":"1468938915.000145"},{"type":"message","user":"U0XPR4NP4","text":"Right","ts":"1468938919.000146"},{"type":"message","user":"U0XR6J961","text":"and just say null requests enabled: yes\/no","ts":"1468938929.000147"},{"type":"message","user":"U0XQ35CDD","text":"Request timeout is the one to go for I think, based on the issues I witnessed last Friday with the Bluemix service.","ts":"1468938947.000148"},{"type":"message","user":"U0XPR4NP4","text":"The code today I think defaults to:\n\nbatch = 1\/2 * request\nnull = 3\/2 * request","ts":"1468938988.000149"},{"type":"message","user":"U0XQ35CDD","text":"It does.","ts":"1468938997.000150"},{"type":"message","user":"U0XR6J961","text":"i think we should define it based on some notion of \"network diameter\"","ts":"1468939021.000151"},{"type":"message","user":"U0XR6J961","text":"and use multiplicatives","ts":"1468939032.000152"},{"type":"message","user":"U0XQ35CDD","text":"f(N) essentially?","ts":"1468939043.000153"},{"type":"message","user":"U0XR6J961","text":"no","ts":"1468939047.000154"},{"type":"message","user":"U0XQ35CDD","text":"I'm listening.","ts":"1468939122.000155"},{"type":"message","user":"U0XR6J961","text":"running in a datacenter, you'd put it at maybe 1ms","ts":"1468939135.000156"},{"type":"message","user":"U0XR6J961","text":"running on multiple clouds, maybe 2s","ts":"1468939159.000157"},{"type":"message","user":"U0XR6J961","text":"or 5s","ts":"1468939161.000158"},{"type":"message","user":"U0XPR4NP4","text":"I still maintain that we should have an option to set these dynamically","ts":"1468939193.000159"},{"type":"message","user":"U0XPR4NP4","text":"Say, have a floating request timeout equal to 3 times the average request time to execution","ts":"1468939216.000160"},{"type":"message","user":"U0XPR4NP4","text":"(up to some ceiling or whatnot)","ts":"1468939224.000161"},{"type":"message","user":"U0XQ35CDD","text":"Simon: Sure, but then you need to add logic to identify whether all the peers are in the same subnet, or whatever, right?","ts":"1468939256.000162"},{"type":"message","user":"U0XR6J961","text":"well, that's in the future","ts":"1468939257.000163"},{"type":"message","user":"U0XR6J961","text":"kostas: well, when you configure your network, you know that","ts":"1468939270.000164"},{"type":"message","user":"U0XR6J961","text":"i mean, this is the part where we poke through the \"asynchronous network\" abstraction","ts":"1468939293.000165"},{"type":"message","user":"U0XR6J961","text":"so i think the person designing the network should do it","ts":"1468939307.000166"},{"type":"message","user":"U0XR6J961","text":"it's just a matter of deriving the other timeouts from that one","ts":"1468939324.000167"},{"type":"message","user":"U0XQ35CDD","text":"OK, my initial impression was that you were trying to do this behind-the-scenes, in code.","ts":"1468939335.000168"},{"type":"message","user":"U0XR6J961","text":"oh no","ts":"1468939340.000169"},{"type":"message","user":"U0XR6J961","text":"what i want is one timeout, and the other ones are derived from it","ts":"1468939354.000170"},{"type":"message","user":"U0XR6J961","text":"just to simplify configuration","ts":"1468939362.000171"},{"type":"message","user":"U0XR6J961","text":"but we can tackle that later","ts":"1468939367.000172"},{"type":"message","user":"U0UGH3X7X","text":"so just to get started on targets like <@U0XR6J961> mentioned ... from  the various conversations from last week ...","ts":"1468939517.000173"},{"type":"message","user":"U0UGH3X7X","text":"separate out consensus service","ts":"1468939525.000174"},{"type":"message","user":"U0UGH3X7X","text":"\"solo\" consensus","ts":"1468939543.000175"},{"type":"message","user":"U0UGH3X7X","text":"separate consensus using pbft and others (raft, kafka , etc ... )","ts":"1468939579.000176"},{"type":"message","user":"U0UGH3X7X","text":"i don't know what we want to do with endorsers ??","ts":"1468939604.000177"},{"type":"message","user":"U0UGH3X7X","text":"what other targets ?","ts":"1468939619.000178"},{"type":"message","user":"U0XR6J961","text":"i would say endorsement stuff is still being worked on, and at least for now we can't take this into consideration","ts":"1468939659.000179"},{"type":"message","user":"U0XPR4NP4","text":"I think we should include a target for getting the consensus code out of the main fabric repo","ts":"1468939688.000180"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1468939698.000181"},{"type":"message","user":"U0XR6J961","text":"more specifically, we need:","ts":"1468939713.000182"},{"type":"message","user":"U0XR6J961","text":"- \"state\" transfer between consensus nodes (can just be the checkpoint \"hash\" contents)","ts":"1468939753.000183"},{"type":"message","user":"U0XR6J961","text":"- persisting raw log","ts":"1468939796.000184"},{"type":"message","user":"U0XR6J961","text":"- reconfiguration","ts":"1468939823.000185"},{"type":"message","user":"U0XR6J961","text":"- signatures on batches\/checkpoints","ts":"1468939868.000186"},{"type":"message","user":"U0UGH3X7X","text":"i'll add as target  :  dynamic addition of consensters, committers","ts":"1468939875.000187"},{"type":"message","user":"U0XR6J961","text":"yea, that would be reconfiguration","ts":"1468939883.000188"},{"type":"message","user":"U0XR6J961","text":"committers are just clients","ts":"1468939896.000189"},{"type":"message","user":"U0XR6J961","text":"but some of them need to persist the log \"for sure\"","ts":"1468939904.000190"},{"type":"message","user":"U0XR6J961","text":"i.e. we cannot advance without these peers having confirmed reception","ts":"1468939923.000191"},{"type":"message","user":"U0XR6J961","text":"or we need to persist ourselves","ts":"1468939930.000192"},{"type":"message","user":"U0XQ35CDD","text":"Going back to the grpc ordering guarantees discussion for a sec, this is what the `protoc` release notes of v3-b4 (released 17h ago) write:","edited":{"user":"U0XQ35CDD","ts":"1468940076.000000"},"ts":"1468940041.000193"},{"type":"message","user":"U0XQ35CDD","text":"&gt; The deterministic serialization is, however, NOT canonical across languages; it is also unstable across different builds with schema changes due to unknown fields. Users who need canonical serialization, e.g. persistent storage in a canonical form, fingerprinting, etc, should define their own canonicalization specification and implement the serializer using reflection APIs rather than relying on this API.","ts":"1468940045.000194"},{"type":"message","user":"U0XQ35CDD","text":"<https:\/\/github.com\/google\/protobuf\/releases>","attachments":[{"service_name":"GitHub","title":"google\/protobuf","title_link":"https:\/\/github.com\/google\/protobuf\/releases","text":"protobuf - Protocol Buffers - Google's data interchange format","fallback":"GitHub: google\/protobuf","thumb_url":"https:\/\/avatars2.githubusercontent.com\/u\/1342004?v=3&s=400","from_url":"https:\/\/github.com\/google\/protobuf\/releases","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1468940048.000195"},{"type":"message","user":"U0XQ35CDD","text":"So Simon's right.","ts":"1468940055.000197"},{"type":"message","user":"U0UGH3X7X","text":"registration of committers  ... is this something we handle as part of consensus service ?","ts":"1468940239.000199"},{"type":"message","user":"U0ULK2JPP","text":"ah good. thanks <@U0XQ35CDD> that does clear it","ts":"1468940317.000200"},{"type":"message","user":"U0XR6J961","text":"what would be registration of committers?","ts":"1468940325.000201"},{"type":"message","user":"U0XR6J961","text":"<@U0XQ35CDD>: :slightly_smiling_face:","ts":"1468940341.000202"},{"type":"message","user":"U0XR6J961","text":"oh, protobufs also generates a json description","ts":"1468940359.000203"},{"type":"message","user":"U0XR6J961","text":"so there is a json serialization format","ts":"1468940366.000204"},{"type":"message","user":"U0XR6J961","text":"we can use this for initial config ingress","ts":"1468940374.000205"},{"type":"message","user":"U0XPR4NP4","text":"I like the human readability aspect of that","ts":"1468940375.000206"},{"type":"message","user":"U0UGH3X7X","text":"I threw together this page <https:\/\/github.com\/hyperledger\/fabric\/wiki\/Consensus-work-items-for-next-Architecture-proposal> .  Add your items today\/tomorrow then we can use the list to prioritize our work","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/wiki\/Consensus-work-items-for-next-Architecture-proposal","text":"fabric - Fabric is a blockchain project in Incubation proposed to the community and documented at <https:\/\/goo.gl\/RYQZ5N>. Information on what Incubation entails can be found in the Hyperledger Proj...","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/wiki\/Consensus-work-items-for-next-Architecture-proposal","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1468943174.000207"},{"user":"U1422GVM1","text":"<@U1422GVM1|yajneshrai> has joined the channel","type":"message","subtype":"channel_join","ts":"1469005154.000209"},{"type":"message","user":"U1422GVM1","text":"Hello. I have a question on new consensus architecture.\nIn a blockchain network, can we have all the peers as endorsing peers and omit submitting peers? \nAre these peers just the roles that can be played by any node? (I mean can a submitting peer play the role of other nodes as well?)","edited":{"user":"U1422GVM1","ts":"1469011065.000000"},"ts":"1469005847.000210"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1469009663.000211"},{"type":"message","user":"U1422GVM1","text":"<@U0XR6J961>: May I know which of the above statements are true, to be more precise?","ts":"1469010828.000212"},{"type":"message","user":"U0XR6J961","text":"any machine can run multiple node types","ts":"1469010861.000213"},{"type":"message","user":"U1422GVM1","text":"okay thank you <@U0XR6J961> ! Any comment on first question, regarding omitting all the submitting peers and keeping only endorsing peers?","ts":"1469011115.000215"},{"type":"message","user":"U0XR6J961","text":"well you need somebody to submit","ts":"1469011225.000216"},{"type":"message","user":"U1422GVM1","text":"yeah got it","ts":"1469011264.000217"},{"type":"message","user":"U1422GVM1","text":"<@U0XR6J961>: Have you got any idea about the limit for chains that can be present in a blockchain network? (The max no of chains in a network)","edited":{"user":"U1422GVM1","ts":"1469011473.000000"},"ts":"1469011421.000218"},{"type":"message","user":"U0XR6J961","text":"i don't understand","ts":"1469011612.000220"},{"type":"message","user":"U0XR6J961","text":"the design is single chain","ts":"1469011620.000221"},{"type":"message","user":"U1422GVM1","text":"Is there any notion of maintaining multiple chains to keep confidentiality against other peers?","ts":"1469011731.000222"},{"type":"message","user":"U0XR6J961","text":"there is talk about it, but no clear design yet","ts":"1469011856.000223"},{"type":"message","user":"U0XR6J961","text":"do you have suggestions?","ts":"1469011861.000224"},{"type":"message","user":"U1422GVM1","text":"Yes. For a particular group of business entities(peers) create a separate chain where only they can maintain their relevant transactions. \nBut I feel this would lead to an overhead if there are 100(or more) separate group of peers.","ts":"1469012213.000225"},{"type":"message","user":"U0XR6J961","text":"it is a difficult thing, yes","ts":"1469013146.000226"},{"type":"message","user":"U0XR6J961","text":"what does it mean to create a separate chain?  maintain own set of consensus nodes as well?","ts":"1469013188.000227"},{"type":"message","user":"U1422GVM1","text":"Just endorsing peers will change, and consenters can remain same as they do not keep the ledgers","ts":"1469016871.000228"},{"type":"message","user":"U1422GVM1","text":"<@U0XR6J961>: Is PBFT going to be replaced by XFT in the next consensus model?","edited":{"user":"U1422GVM1","ts":"1469017243.000000"},"ts":"1469017225.000229"},{"type":"message","user":"U0XR6J961","text":"we want to make consensus exchangable","ts":"1469017311.000231"},{"type":"message","user":"U1422GVM1","text":"What does exchangable mean?","ts":"1469017466.000232"},{"type":"message","user":"U0XR6J961","text":"ideally there will be pbft, and some sort of PoW, some crash-fault tolerant","ts":"1469017624.000233"},{"type":"message","user":"U1422GVM1","text":"But in the new proposal it is mentioned that PBFT will be completely replaced in the architecture.","ts":"1469017873.000234"},{"type":"message","user":"U1422GVM1","text":"<https:\/\/github.com\/hyperledger\/fabric\/wiki\/Fabric-Next#212-consensus-service-development-after-solo>","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/wiki\/Fabric-Next#212-consensus-service-development-after-solo","text":"fabric - Fabric is a blockchain project in Incubation proposed to the community and documented at <https:\/\/goo.gl\/RYQZ5N>. Information on what Incubation entails can be found in the Hyperledger Proj...","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/wiki\/Fabric-Next#212-consensus-service-development-after-solo","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1469017915.000235"},{"type":"message","user":"U0UGH3X7X","text":"interesting ... <https:\/\/github.com\/hyperledger\/fabric\/issues\/2262>   ... I've asked Dongming to post logs","attachments":[{"service_name":"GitHub","title":"invokes do mot go thru with large payload (1M) \u00b7 Issue #2262 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/issues\/2262","text":"Description commit level: 3e0e80a branch: v0.5-developer-preview When test invokes (200 transactions with 1 thread) with large payload, about 1.3M, only part of transactions recorded to ledger. O...","fallback":"GitHub: invokes do mot go thru with large payload (1M) \u00b7 Issue #2262 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars2.githubusercontent.com\/u\/17034559?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/issues\/2262","thumb_width":420,"thumb_height":420,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1469019942.000237"},{"type":"message","user":"U0XR6J961","text":"why are people storing megabyte files in the blockchain?","ts":"1469020193.000239"},{"type":"message","user":"U0XR6J961","text":"what is going on?","ts":"1469020197.000240"},{"type":"message","user":"U0UGH3X7X","text":"i think they're testing effects of different payload sizes","ts":"1469020250.000241"},{"type":"message","user":"U0XR6J961","text":"peers are down?","ts":"1469035137.000242"},{"type":"message","user":"U0XR6J961","text":"what kind of test is this?","ts":"1469035141.000243"},{"type":"message","user":"U0XPR4NP4","text":"It is well known that large payloads require timeouts to be turned way up.","ts":"1469035553.000244"},{"type":"message","user":"U0XR6J961","text":"jyellick: <https:\/\/github.com\/corecode\/fabric\/commits\/separate-consensus-config>","attachments":[{"service_name":"GitHub","title":"corecode\/fabric","title_link":"https:\/\/github.com\/corecode\/fabric\/commits\/separate-consensus-config","text":"Blockchain fabric code","fallback":"GitHub: corecode\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400","from_url":"https:\/\/github.com\/corecode\/fabric\/commits\/separate-consensus-config","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1469036269.000245"},{"type":"message","user":"U0XR6J961","text":"does this look remotely reasonable?","ts":"1469036288.000247"},{"type":"message","user":"U0XPR4NP4","text":"(looking)","ts":"1469036340.000248"},{"type":"message","user":"U0XPR4NP4","text":"So, I'm not sure I'm sold either way, but I think there's definitely a tradeoff using a map vs. explicitly enumerating the config parameters in the protobuf definition","ts":"1469036493.000249"},{"type":"message","user":"U0XPR4NP4","text":"The map means the proto stays constant and you don't have to worry about forward\/backward compatibility at the proto level, but it also seems far more opaque","ts":"1469036546.000250"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1469036591.000251"},{"type":"message","user":"U0XR6J961","text":"the map is internal","ts":"1469036597.000252"},{"type":"message","user":"U0XR6J961","text":"initial config is done via json and does not do a map","ts":"1469036615.000253"},{"type":"message","user":"U0XR6J961","text":"we may want a `pbft.CheckConfig(c *BatchConfig) error`","ts":"1469036657.000254"},{"type":"message","user":"U0XR6J961","text":"also maybe something with defaults","ts":"1469036693.000255"},{"type":"message","user":"U0XR6J961","text":"my test config looked this way:","ts":"1469036698.000256"},{"type":"message","subtype":"file_share","text":"<@U0XR6J961|simon> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/simon\/F1THDNR6H\/consensus.json|consensus.json>","file":{"id":"F1THDNR6H","created":1469036738,"timestamp":1469036738,"name":"consensus.json","title":"consensus.json","mimetype":"text\/plain","filetype":"javascript","pretty_type":"JavaScript\/JSON","user":"U0XR6J961","editable":true,"size":356,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1THDNR6H\/consensus.json?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1THDNR6H\/download\/consensus.json?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/simon\/F1THDNR6H\/consensus.json","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F1THDNR6H-c0ac69d8ea","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/simon\/F1THDNR6H\/consensus.json\/edit","preview":"{\n    \"consensus\": {\n        \"pbft_config\": {\n            \"f\": 0,\n            \"k\": 2,","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>{<\/pre><\/div>\n<div><pre>    <span class=\"cm-string\">&quot;consensus&quot;<\/span>: {<\/pre><\/div>\n<div><pre>        <span class=\"cm-string\">&quot;pbft_config&quot;<\/span>: {<\/pre><\/div>\n<div><pre>            <span class=\"cm-string\">&quot;f&quot;<\/span>: <span class=\"cm-number\">0<\/span>,<\/pre><\/div>\n<div><pre>            <span class=\"cm-string\">&quot;k&quot;<\/span>: <span class=\"cm-number\">2<\/span>,<\/pre><\/div>\n<\/div>\n<\/div>\n","lines":17,"lines_more":12,"preview_is_truncated":null,"channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0XR6J961","upload":true,"display_as_bot":false,"username":"<@U0XR6J961|simon>","bot_id":null,"ts":"1469036739.000257"},{"type":"message","subtype":"file_share","text":"<@U0XPR4NP4|jyellick> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/jyellick\/F1THGPCEB\/two_phase_consensus.pdf|two_phase_consensus.pdf> and commented: Two Phase Consensus Illustrated","file":{"id":"F1THGPCEB","created":1469037166,"timestamp":1469037166,"name":"two_phase_consensus.pdf","title":"two_phase_consensus.pdf","mimetype":"application\/pdf","filetype":"pdf","pretty_type":"PDF","user":"U0XPR4NP4","editable":false,"size":144487,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1THGPCEB\/two_phase_consensus.pdf?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1THGPCEB\/download\/two_phase_consensus.pdf?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/jyellick\/F1THGPCEB\/two_phase_consensus.pdf","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F1THGPCEB-5bb39ad2af","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":1,"initial_comment":{"id":"Fc1THTAGBC","created":1469037166,"timestamp":1469037166,"user":"U0XPR4NP4","is_intro":true,"comment":"Two Phase Consensus Illustrated","channel":""},"num_stars":1},"user":"U0XPR4NP4","upload":true,"display_as_bot":false,"username":"<@U0XPR4NP4|jyellick>","bot_id":null,"ts":"1469037167.000258"},{"type":"message","user":"U0XR6J961","text":"maybe the timeouts should be strings","ts":"1469037168.000259"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XQ35CDD> <@U0XR6J961> See above","ts":"1469037186.000260"},{"type":"message","user":"U0XR6J961","text":"yea that is one way of doing that with total order broadcast","ts":"1469037212.000261"},{"type":"message","user":"U0XPR4NP4","text":"I don't see why it strictly requires total order broadcast, if you allow forking","ts":"1469037243.000262"},{"type":"message","user":"U0XPR4NP4","text":"From the broadcast to deliver step, it looks exactly like bitcoin to me.  Assuming you use gossip without ordering for the network box","ts":"1469037329.000263"},{"type":"message","user":"U0XPR4NP4","text":"With total ordering, then you can guarantee exactly one correct block comes out.","ts":"1469037422.000264"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1469037430.000265"},{"type":"message","user":"U0XR6J961","text":"and you don't need to order the TX before","ts":"1469037456.000266"},{"type":"message","user":"U0XPR4NP4","text":"Well, I'd argue you are getting an implicit TX order","ts":"1469037479.000267"},{"type":"message","user":"U0XQ35CDD","text":"Just came back, looking now.","ts":"1469037491.000268"},{"type":"message","user":"U0XR6J961","text":"so (4) and (5) could be using gossip","ts":"1469037491.000269"},{"type":"message","user":"U0XR6J961","text":"while (6) and (7) use total order broadcast","ts":"1469037503.000270"},{"type":"message","user":"U0XPR4NP4","text":"I think you could.  Though by having ordering at 5, you can guarantee everyone builds the same block, which I think would improve the efficiency of 7","ts":"1469037624.000271"},{"type":"message","user":"U0XQ35CDD","text":"So this separation between \"Consenter\" and \"Network Orderer\" in this diagram throws me off a bit. You're basically saying that on the Consenter level, you have TXs coming in, candidate blocks being created internally, which are then validated and delivered.","edited":{"user":"U0XQ35CDD","ts":"1469038158.000000"},"ts":"1469038120.000272"},{"type":"message","user":"U0XQ35CDD","text":"I guess I agree, but I'm not sure what's new here, compared to the rest of today's discussions. Not being blunt, I'm trying to realize if there's a subtle difference that I'm missing.","ts":"1469038386.000274"},{"type":"message","user":"U0XPR4NP4","text":"Yes, so I've deliberately called that a 'consenter' even though it really does nothing for 'consensus' from an ordering perspective.  Basically, we keep shoving 'ordering' and 'consenting' together, but I don't think people are great at articulating that they do not want this.  From a bitcoin perspective, I'd argue that their 'consenters' actually don't do ordering.  Ordering is done by looking at a collection of blocks, and picking the longest chain.  Using PBFT, we are exploiting ordering, to deterministically create blocks, but that's a different sort of 'ordering'.","ts":"1469038386.000275"},{"type":"message","user":"U0XPR4NP4","text":"So yes, I'd say a blockchain is ordered, because blocks have numbers, and 'validity'.  Under some schemes, like PBFT, it will be impossible to generate multiple valid blocks for the same block number.  Under other schemes, like PoW, it may be possible to generate multiple valid blocks for the same block number, but there is an incentive not to.  But fundamentally, consenters create blocks and determine whether a block is valid, not what order the blocks go in.","edited":{"user":"U0XPR4NP4","ts":"1469038653.000000"},"ts":"1469038638.000276"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XQ35CDD> With regards to what's new here, is that from Binh's picture, the consenter \/ orderer are the same, and then there's this external 'validator' thing, which I think is wrong.  I think the consenter \/ validator are one, and the orderer is the external thing (and could more appropriately be called 'network').  In the permissioned PBFT mode, the consenter\/validator can exploit the total ordering properties of the network to decide what blocks are valid, but they do not do ordering.","ts":"1469039434.000278"},{"user":"U1SDX7EQZ","text":"<@U1SDX7EQZ|liewsc> has joined the channel","type":"message","subtype":"channel_join","ts":"1469064994.000279"},{"type":"message","user":"U0XV1HDL3","text":"<@U0XPR4NP4>: interesting diagram ... but can you perhaps add some API descriptions? i dont follow. would the endorsers work as described in next-consensus-architecture? if yes, which box filters those tx after \"consenter\" (where there is total order) violate version dependencies? why loop twice from \"consenter\" to \"orderer\" ?","ts":"1469085774.000280"},{"type":"message","user":"U0XQ35CDD","text":"<@U0XV1HDL3>: Jason will expand more, but in the meantime maybe it'll be a bit clearer if you think of \"consenter\" as a \"validator\". (At least it did to me.) The first pass through the consenter gives you valid transactions (i.e. those read the read the right version of a key and propose a valid changeset), the second pass gives you valid blocks (so it makes sure there are no conflicting transactions in the same block, and filters out transactions that may have become stale).","edited":{"user":"U0XQ35CDD","ts":"1469098684.000000"},"ts":"1469098513.000281"},{"type":"message","user":"U0XR6J961","text":"hi guys","ts":"1469107275.000283"},{"type":"message","user":"U0UGH3X7X","text":"hey simon","ts":"1469107301.000284"},{"type":"message","user":"U0XR6J961","text":"managed to catch up with everything?","ts":"1469107323.000285"},{"type":"message","user":"U0UGH3X7X","text":"eh ...","ts":"1469107334.000286"},{"type":"message","user":"U0UGH3X7X","text":"reading through our task list","ts":"1469107346.000287"},{"type":"message","user":"U0UGH3X7X","text":"idk  ... is there enough details for us to start prioritizing a bit ?","ts":"1469107381.000288"},{"type":"message","user":"U0UGH3X7X","text":"also, binh is going to send out some proposals for v2 ...  he wants to show the community on monday's arch group call","ts":"1469107463.000289"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1469107613.000290"},{"type":"message","user":"U0UGH3X7X","text":"in the mean time , i'm going to take a quick look at #2262 ... go totally sidetracked yesterday","ts":"1469107802.000291"},{"type":"message","user":"U0XR6J961","text":"i think it isn't worth it","ts":"1469108329.000292"},{"type":"message","user":"U0XR6J961","text":"i'd appreciate it if we could decide on whether we want to go with my separate consensus approach","ts":"1469108362.000293"},{"type":"message","user":"U0XR6J961","text":"and if so, work on getting it into the main repo","ts":"1469108374.000294"},{"type":"message","user":"U0XR6J961","text":"or figure out what we need to do to get it into the repo","ts":"1469108387.000295"},{"type":"message","user":"U0XQ35CDD","text":"My vote on this is known, I believe.","ts":"1469108388.000296"},{"type":"message","user":"U0UGH3X7X","text":"ok ...  i say we go for it and get a PR to get into master ... what's needed ?","ts":"1469108534.000297"},{"type":"message","user":"U0XQ35CDD","text":"I'm all for the work in your branch, but I disagree with the main repo approach.","ts":"1469108585.000298"},{"type":"message","user":"U0XQ35CDD","text":"I suggest we work in your branch until the powers that be realize that a separate consensus branch is the way to go.","ts":"1469108648.000299"},{"type":"message","user":"U0XR6J961","text":"well in the end we need to get it in","ts":"1469108653.000300"},{"type":"message","user":"U0XR6J961","text":"in one form or another","ts":"1469108665.000301"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XV1HDL3> I'll put together a better diagram.  My key thought was that we should split block creation from ordering consensus.  Basically, Bitcoin uses PoW puzzle solving as its primitive for this block is next, but we can use a 'total order broadcast' for our primitive as to what block is next.  In this way, the flow for the permissioned BFT path and the probabilistic PoW\/PoET paths become the same, each utilizing a different primitive to determine block validity.","ts":"1469108737.000302"},{"type":"message","user":"U0UGH3X7X","text":"and we have to get the community aware of and using simon's branch","ts":"1469108769.000303"},{"type":"message","user":"U0XR6J961","text":"yea that's silly","ts":"1469108785.000304"},{"type":"message","user":"U0UGH3X7X","text":"which is silly ?","ts":"1469108831.000305"},{"type":"message","user":"U0UGH3X7X","text":"fyi #2262  ... looks to be a bug in chaincode","ts":"1469109232.000306"},{"type":"message","user":"U0XQ35CDD","text":"<@U0XPR4NP4>: Spent some more time thinking about this yesterday. How would you say that this is different from the concept of bringing validation to the consenter level in the NCAP work, as DAH had suggested? The only difference that I see is the first pass through the consenter\/validator to filter out potentially invalid transactions. But you can maybe argue that you'll take the toll on ordering invalid transactions because you'll filter them on the way out anyway. Is there another difference?","ts":"1469109368.000307"},{"type":"message","user":"U0XPR4NP4","text":"I'm not very familiar with the NCAP work \/ DAH's suggestion","ts":"1469109418.000308"},{"type":"message","user":"U0XQ35CDD","text":"NCAP is the new consensus architecture proposal. DAH's suggestion is to have the consenters validate the blocks before they get emitted, instead of having the committers do the validation.","ts":"1469109485.000309"},{"type":"message","user":"U0XPR4NP4","text":"Ah okay, sorry, didn't catch the acronym.  I think it's all pretty similar, probably more semantic than anything.  The issue about modifying the NCAP and emitting only 'valid blocks' is that you lose the chain aspect, as once you've pruned the block, the hash chain from consensus is broken.  But, you could certainly build a new chain, and, if you even added some sort of gossip of block signatures at that step, then I'd argue they're very similar.  I still think the right first step is to go to the consenter\/validator, and not the orderer, because not all consensus mechanisms require that ordering step.","ts":"1469109985.000310"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> Assuming your comment was about my remark, certainly open to criticism, I can see some downsides, but it doesn't seem obviously broken to me, would like to hear your thoughts","ts":"1469110055.000311"},{"type":"message","user":"U0XR6J961","text":"my comment is about developing on our own branch","ts":"1469110095.000312"},{"type":"message","user":"U0XR6J961","text":"and telling the community to use that branch","ts":"1469110105.000313"},{"type":"message","user":"U0XR6J961","text":"regarding the design, can we do API design first?","ts":"1469110155.000314"},{"type":"message","user":"U0XR6J961","text":"(while thinking about how different implementations would work)","ts":"1469110173.000315"},{"type":"message","user":"U0XPR4NP4","text":"Definitely","ts":"1469110208.000316"},{"type":"message","user":"U0XQ35CDD","text":"<@U0XPR4NP4>: Gotcha. RE: \"But, you could certainly build a new chain, and, if you even added some sort of gossip of block signatures at that step, then I'd argue they're very similar.\" Inevitably you would be collecting signatures on the new block (that's linked to the previous one) during the validation in the NCAP+DAH design, so yeah, I think the two approaches would overlap.","ts":"1469110411.000317"},{"type":"message","user":"U0XPR4NP4","text":"I think the block validation strategy could optionally depend on ordering as well.","ts":"1469110459.000318"},{"type":"message","user":"U0XPR4NP4","text":"If the rule is, you require f+1 signatures for a valid block, for instance.  That's a broken rule in a 3f+1 network, because you can have two sets of f+1 signatures.  If however, you require the \"first set of f+1 signatures\", then you're back to only one valid block.","ts":"1469110509.000319"},{"type":"message","user":"U0XPR4NP4","text":"Of course, if you require 2f+1 signatures, then it should be safe without ordering.","ts":"1469110526.000320"},{"type":"message","user":"U0XR6J961","text":"what are you talking about?","ts":"1469110605.000321"},{"type":"message","user":"U0XQ35CDD","text":"<@U0XPR4NP4>: I agree.","ts":"1469110628.000322"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> If the validators\/consenters (not the ordering consenters) are building the blockchain themselves, by pruning bad transactions, creating a new block, and signing that block, then they must have some sort of threshold for the number of required signatures before a block becomes valid.","ts":"1469110667.000323"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1469110735.000324"},{"type":"message","user":"U0XR6J961","text":"how can we describe this independent of the consensus method","ts":"1469110751.000325"},{"type":"message","user":"U0XR6J961","text":"because PoW will be different","ts":"1469110757.000326"},{"type":"message","user":"U0XPR4NP4","text":"In some schemes, a simple threshold of \"&gt; n\" might be sufficient, but, you could imagine a scheme which depends on the 'first to &gt; n', which requires fewer signatures.","ts":"1469110773.000327"},{"type":"message","user":"U0XPR4NP4","text":"So, for the validator\/consenter (not ordering consenter) [we should really come up with a formal name for this], I would think the API is pretty naturally defined.  You have two api points of ingress, one accepts new transactions, the other accepts proposed blocks (or block representations, maybe hash+signature).  Then, you have a single defined point of egress which is 'valid blocks'.","ts":"1469110939.000328"},{"type":"message","user":"U0XR6J961","text":"how do the blocks get proposed?","ts":"1469111005.000329"},{"type":"message","user":"U0XPR4NP4","text":"In the PoW mechanism, the ingress and egress are both done via gossip, trans come in, you try to solve a puzzle, and valid blocks go out.  If someone else solves the puzzle first, you get that block coming in (from someone else's valid block egress) commit it, and you work on the next block.","edited":{"user":"U0XPR4NP4","ts":"1469111203.000000"},"ts":"1469111025.000330"},{"type":"message","user":"U0XPR4NP4","text":"In the PBFT mechanism, the ingress of trans is unordered, we then use our atomic broadcast ordering primitive (equivalent to the puzzle solving step) to give us an ordered list of trans, and we create a valid block, sign it and send it out.  Gossip would be fine here depending on the threshold scheme.  Once we receive enough valid signatures, we consider that block to be valid and commit it.","edited":{"user":"U0XPR4NP4","ts":"1469111230.000000"},"ts":"1469111102.000331"},{"type":"message","user":"U0XQ35CDD","text":"(RE: formal names. The consenter term has been so overloaded that I honestly propose we get rid of it, at least internally. I read a doc yesterday that talked about \"block adders\" and thought to myself, \"well, at least it gets the message across\". So validators, and orderers work for me.)","ts":"1469111114.000332"},{"type":"message","user":"U0XPR4NP4","text":"(Great, I'll use that)","ts":"1469111160.000333"},{"type":"message","user":"U0XR6J961","text":"but the \"send it out\" would be internal to that specific pbft consensus cloud","ts":"1469111216.000335"},{"type":"message","user":"U0XQ35CDD","text":"&gt; Gossip would be fine here depending on the threshold scheme.\nHere you mean among the orderers?","ts":"1469111217.000336"},{"type":"message","user":"U0XR6J961","text":"so i guess my questions are:","ts":"1469111232.000338"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XQ35CDD> I mean among the validators","edited":{"user":"U0XPR4NP4","ts":"1469111258.000000"},"ts":"1469111238.000339"},{"type":"message","user":"U0XR6J961","text":"1. how do we define what \"right set of signatures\" is","ts":"1469111248.000341"},{"type":"message","user":"U0XR6J961","text":"or rather, \"cryptographic proof\"","ts":"1469111263.000343"},{"type":"message","user":"U0XR6J961","text":"which is different between consensus models","ts":"1469111274.000344"},{"type":"message","user":"U0XR6J961","text":"crash fault tolerant doesn't have any","ts":"1469111299.000345"},{"type":"message","user":"U0XR6J961","text":"PoW has one crypto puzzle","ts":"1469111306.000346"},{"type":"message","user":"U0XR6J961","text":"bft has 2f+1 signatures of replicas (at that time)","ts":"1469111330.000347"},{"type":"message","user":"U0XR6J961","text":"so clearly the \"proof\" is specific to the consensus method chosen","ts":"1469111356.000348"},{"type":"message","user":"U0XPR4NP4","text":"1. Yes, these I've been handwaving at with \"There are a bunch of ways you could do this\", which I do think is true.  As a proof of concept first step sort of thing, I would say we use the PBFT scheme.  Given 3f+1 validators, require 2f+1 signatures before a block is valid.","ts":"1469111368.000349"},{"type":"message","user":"U0XQ35CDD","text":"And on top of that, another thing that I believe Christian mentioned yesterday, and threw me off. How do you prove that the signature you have for block X did indeed belong to a valid-at-the-time validator. What if the validator wasn't authorized to be a validator back then?","ts":"1469111404.000350"},{"type":"message","user":"U0XQ35CDD","text":"You probably solve this by recording on the blockchain who the validators are during an epoch.","ts":"1469111462.000351"},{"type":"message","user":"U0XPR4NP4","text":"I would say timestamps solve that somewhat nicely, if the signature is for something before the cert became valid (was issued), then it is not a valid signature.","edited":{"user":"U0XPR4NP4","ts":"1469111487.000000"},"ts":"1469111475.000352"},{"type":"message","user":"U0XPR4NP4","text":"Ah, yes, recording that on the blockchain might be cleaner","ts":"1469111508.000354"},{"type":"message","user":"U0XQ35CDD","text":"I'm thinking a \"from now on, and until we record another block suggesting otherwise, A-B-C-D are the approved validators\" block on the chain.","ts":"1469111559.000355"},{"type":"message","user":"U0XQ35CDD","text":"Right.","ts":"1469111560.000356"},{"type":"message","user":"U0XPR4NP4","text":"This is a hard problem, though I would maintain that it's probably easier to come up with a correct validator signature scheme, than to make PBFT dynamically add orderers.","ts":"1469111599.000357"},{"type":"message","user":"U0XPR4NP4","text":"(If, for our first pass, we are interested in adding and removing validators, but not orderers)","ts":"1469111630.000358"},{"type":"message","user":"U0XPR4NP4","text":"Alright, going to hop offline for a few minutes as I make my way to the main site, back in a bit","ts":"1469111791.000359"},{"type":"message","user":"U0XV1HDL3","text":"<@U0XPR4NP4> - to understand better, you want to accommodate BFT and PoW consensus in this one framework? this will be quite difficult because PoW is not final, while BFT is...","ts":"1469113261.000360"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XV1HDL3> So certainly, PoW can create forks, while BFT does not.  So, to me the difference is, in  BFT there is exactly one possible valid block for each block number, while in PoW there may be multiple.  So, the idea would be that a 'validator' simply creates\/validates blocks, and the actual mechanism for determining the content of the block (whether it be ordering, or puzzle solving) would plug into the validator.","ts":"1469113941.000361"},{"type":"message","user":"U0XPR4NP4","text":"I know that <@U0TFEHX8E> has been looking to make the ledger support forks, so I'm not sure what else would make the support of both so challenging?","ts":"1469114481.000362"},{"type":"message","user":"U0XR6J961","text":"hi","ts":"1469122373.000363"},{"type":"message","user":"U0XR6J961","text":"i think people took over that room","ts":"1469122383.000364"},{"type":"message","user":"U0XR6J961","text":"do we have an API surface thing?","ts":"1469122440.000365"},{"type":"message","subtype":"file_share","text":"<@U0KN2SSKE|binhn> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/binhn\/F1TUZG2DD\/slack_for_ios_upload.jpg|Slack for iOS Upload>","file":{"id":"F1TUZG2DD","created":1469122738,"timestamp":1469122738,"name":"Slack for iOS Upload.jpg","title":"Slack for iOS Upload","mimetype":"image\/jpeg","filetype":"jpg","pretty_type":"JPEG","user":"U0KN2SSKE","editable":false,"size":1337858,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1TUZG2DD\/slack_for_ios_upload.jpg?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1TUZG2DD\/download\/slack_for_ios_upload.jpg?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_64":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1TUZG2DD-061768a660\/slack_for_ios_upload_64.jpg?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_80":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1TUZG2DD-061768a660\/slack_for_ios_upload_80.jpg?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1TUZG2DD-061768a660\/slack_for_ios_upload_360.jpg?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360_w":360,"thumb_360_h":270,"thumb_480":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1TUZG2DD-061768a660\/slack_for_ios_upload_480.jpg?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_480_w":480,"thumb_480_h":360,"thumb_160":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1TUZG2DD-061768a660\/slack_for_ios_upload_160.jpg?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1TUZG2DD-061768a660\/slack_for_ios_upload_720.jpg?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720_w":720,"thumb_720_h":540,"thumb_960":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1TUZG2DD-061768a660\/slack_for_ios_upload_960.jpg?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_960_w":960,"thumb_960_h":720,"thumb_1024":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1TUZG2DD-061768a660\/slack_for_ios_upload_1024.jpg?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_1024_w":1024,"thumb_1024_h":768,"image_exif_rotation":1,"original_w":3264,"original_h":2448,"permalink":"https:\/\/hyperledgerproject.slack.com\/files\/binhn\/F1TUZG2DD\/slack_for_ios_upload.jpg","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F1TUZG2DD-405194367a","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0KN2SSKE","upload":true,"display_as_bot":false,"username":"<@U0KN2SSKE|binhn>","bot_id":null,"ts":"1469122745.000366"},{"type":"message","user":"U0KN2SSKE","text":"<@U0XPR4NP4>: could you post the new picture here","ts":"1469140863.000367"},{"type":"message","user":"U0XPR4NP4","text":"I'm not sure which new picture you mean? We plan on writing something more formal up soon that is the hybrid option 2 \/ 3 as described ","ts":"1469148172.000368"},{"type":"message","user":"U0XQ35CDD","text":"(Jason: Probably the drawing that Tuan had on the whiteboard which I believe wasn't captured because of the upcoming write-up.)","edited":{"user":"U0XQ35CDD","ts":"1469148944.000000"},"ts":"1469148686.000369"},{"type":"message","user":"U0KN2SSKE","text":"I thought we split out the validator into 2 components, so ","ts":"1469150708.000371"},{"type":"message","user":"U0KN2SSKE","text":"I like to see those components in a diagram","ts":"1469150756.000372"},{"type":"message","subtype":"file_share","text":"<@U0XR6J961|simon> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/simon\/F1U78DT0D\/arch.pptx|arch.pptx>","file":{"id":"F1U78DT0D","created":1469188736,"timestamp":1469188736,"name":"arch.pptx","title":"arch.pptx","mimetype":"application\/vnd.openxmlformats-officedocument.presentationml.presentation","filetype":"pptx","pretty_type":"PowerPoint Presentation","user":"U0XR6J961","editable":false,"size":38009,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1U78DT0D\/arch.pptx?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1U78DT0D\/download\/arch.pptx?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/simon\/F1U78DT0D\/arch.pptx","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F1U78DT0D-17d82761e1","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0XR6J961","upload":true,"display_as_bot":false,"username":"<@U0XR6J961|simon>","bot_id":null,"ts":"1469188737.000373"},{"type":"message","user":"U0XR6J961","text":"<@U0XPR4NP4>: does that look like what you had in mind?","ts":"1469188757.000374"},{"type":"message","subtype":"file_share","text":"<@U0XR6J961|simon> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/simon\/F1U78NBS9\/consensus.proto|consensus.proto>","file":{"id":"F1U78NBS9","created":1469188813,"timestamp":1469188813,"name":"consensus.proto","title":"consensus.proto","mimetype":"text\/plain","filetype":"text","pretty_type":"Plain Text","user":"U0XR6J961","editable":true,"size":1218,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1U78NBS9\/consensus.proto?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1U78NBS9\/download\/consensus.proto?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/simon\/F1U78NBS9\/consensus.proto","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F1U78NBS9-e3e0b0a1af","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/simon\/F1U78NBS9\/consensus.proto\/edit","preview":"\/*\nCopyright IBM Corp. 2016 All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>\/*<\/pre><\/div>\n<div><pre>Copyright IBM Corp. 2016 All Rights Reserved.<\/pre><\/div>\n<div><pre><\/pre><\/div>\n<div><pre>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<\/pre><\/div>\n<div><pre>you may not use this file except in compliance with the License.<\/pre><\/div>\n<\/div>\n<\/div>\n","lines":50,"lines_more":45,"preview_is_truncated":true,"channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0XR6J961","upload":true,"display_as_bot":false,"username":"<@U0XR6J961|simon>","bot_id":null,"ts":"1469188814.000375"},{"type":"message","user":"U0XR6J961","text":"the proto sketch is a bit unsatisfying","ts":"1469188825.000376"},{"type":"message","user":"U0XR6J961","text":"also the gossip needs more formalizing","ts":"1469188857.000377"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: I think that's roughly what we described.  The thing that worries me in this picture is that 3\/5 both seem to be some sort of network which seems like unfortunate duplication","ts":"1469196518.000378"},{"type":"message","user":"U0KN2SSKE","text":"could it be labeled like this  Validator = Consenter,  Validator2 = Validator ?","ts":"1469198062.000379"},{"type":"message","user":"U0KN2SSKE","text":"i am not clear on how step 4 comes about \u2014 when would a batch become a block? i thought that must be part of step 6","ts":"1469198217.000380"},{"type":"message","user":"U0XPR4NP4","text":"So, option 2 smashes consensus together with the \"proof of work\" or \"atomic broadcast\" boxes.  Option 3 smashes the \"consensus\" box with the \"validator\" box.  And this diagram shows them both separated.","ts":"1469198249.000381"},{"type":"message","user":"U0XPR4NP4","text":"I think step 4 is appropriate where a batch becomes a block.  Step 6 is doing whatever it is to validate the block to accept it","ts":"1469198353.000382"},{"type":"message","user":"U0XPR4NP4","text":"(For other validators)","ts":"1469198359.000383"},{"type":"message","user":"U0XPR4NP4","text":"In the PoW case it would be verifying the crypto puzzle.  In the atomic broadcast case, it would be checking the signature and verifying enough signatures.","ts":"1469198401.000384"},{"type":"message","user":"U0KN2SSKE","text":"ok, so this picture contains both \u2014 that was the source of my confusion;  i\u2019d like to draw a picture like your option 3 without pow vs ab","ts":"1469198567.000385"},{"type":"message","user":"U0XPR4NP4","text":"Ah, yes, we can do that","ts":"1469198675.000386"},{"type":"message","subtype":"file_share","text":"<@U0XPR4NP4|jyellick> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/jyellick\/F1U8TJ9TQ\/consensus_arch.pdf|consensus_arch.pdf> and commented: Orderer only proposed arch","file":{"id":"F1U8TJ9TQ","created":1469200058,"timestamp":1469200058,"name":"consensus_arch.pdf","title":"consensus_arch.pdf","mimetype":"application\/pdf","filetype":"pdf","pretty_type":"PDF","user":"U0XPR4NP4","editable":false,"size":144063,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1U8TJ9TQ\/consensus_arch.pdf?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1U8TJ9TQ\/download\/consensus_arch.pdf?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/jyellick\/F1U8TJ9TQ\/consensus_arch.pdf","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F1U8TJ9TQ-bd9d4365d0","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":1,"initial_comment":{"id":"Fc1U97JWGH","created":1469200058,"timestamp":1469200058,"user":"U0XPR4NP4","is_intro":true,"comment":"Orderer only proposed arch","channel":""},"num_stars":1},"user":"U0XPR4NP4","upload":true,"display_as_bot":false,"username":"<@U0XPR4NP4|jyellick>","bot_id":null,"ts":"1469200059.000387"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961>: <@U0KN2SSKE> <@U0XQ35CDD> <@U0UKTPMG8> <@U0UGH3X7X> ^^","edited":{"user":"U0XPR4NP4","ts":"1469200564.000000"},"ts":"1469200117.000388"},{"type":"message","user":"U0XPR4NP4","text":"The picture got a little crowded with all the detail, hopefully it's still clear.  Of note, steps 8 and 9 take place on both receiving consensus plugins, but that was the end of the diagram and it was getting tight, so I only listed one on each plugin to validator path.","ts":"1469200534.000389"},{"type":"message","user":"U0XPR4NP4","text":"(<@U0XV1HDL3> Did not tag you because I thought you were unavailable today, see you are there, would welcome your feedback, I know you are skeptical)","ts":"1469200996.000391"},{"type":"message","user":"U0XV1HDL3","text":"so, let me see if i get this right: in the pdf, \"consensus plugin\" is only an interface, which is implemented by \"atomic broadcast\"; what is \"consensus plugin network\"? and what is \"validator\"?","ts":"1469200998.000392"},{"type":"message","user":"U0XV1HDL3","text":"thanks - not available for calls, indeed","ts":"1469201021.000393"},{"type":"message","user":"U0XV1HDL3","text":"for a brief here and then, yes","ts":"1469201029.000394"},{"type":"message","user":"U0XPR4NP4","text":"No, the \"consensus plugin\" is a piece of code which has a policy for determining block validity.  So, the 'atomic broadcast service', runs somewhere, and gives us the promise that it will fairly delivery a stream of these transaction batches to everyone in the same order.  This could be PBFT, could be Kafka, etc.","ts":"1469201087.000395"},{"type":"message","user":"U0XPR4NP4","text":"The \"consensus plugin\" takes this atomic ordered broadcast stream, and generated blocks (deterministically) from it","ts":"1469201117.000396"},{"type":"message","user":"U0XPR4NP4","text":"At this stage, every consensus plugin can generate the same block, with the same trans, and I think we are exactly at the old design","ts":"1469201135.000397"},{"type":"message","user":"U0XPR4NP4","text":"However, people really really seem to want to support consenting on the 'validated block', so we add an extra round of sharing block signatures, and accumulating enough to commit it.","ts":"1469201157.000398"},{"type":"message","user":"U0XV1HDL3","text":"ok, this is what i meant earlier, but here it sort-of wraps around the actual communication with atomic broadcast","ts":"1469201163.000399"},{"type":"message","user":"U0XV1HDL3","text":"extra round sounds like a waste","ts":"1469201189.000400"},{"type":"message","user":"U0XV1HDL3","text":"- but what is the validator?","ts":"1469201201.000401"},{"type":"message","user":"U0XPR4NP4","text":"So a validator is the thing that actually understands how to apply transactions","ts":"1469201217.000402"},{"type":"message","user":"U0XV1HDL3","text":"so, the logic with versions and such?","ts":"1469201228.000403"},{"type":"message","user":"U0XPR4NP4","text":"Right, the consensus plugin can treat trans as opaque blobs, and call into the validator to remove conflicts and bad trans etc.","ts":"1469201249.000404"},{"type":"message","user":"U0XV1HDL3","text":"(i wouldn't call this validator, then, because of overload; it is only the \"filterer\")","ts":"1469201257.000405"},{"type":"message","user":"U0XV1HDL3","text":"(you need a new term)","ts":"1469201274.000406"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I think it's a pretty simple object, and, I'll be curious to see if anyone actually wants to separate it from the consensus plugin in real world deployments","ts":"1469201291.000407"},{"type":"message","user":"U0XV1HDL3","text":"that consensus plugin would be one interface, where tx are submitted, and which outputs the \"filtered\" tx at the end, or?","ts":"1469201327.000408"},{"type":"message","user":"U0XPR4NP4","text":"The consensus plugin makes calls into the 'validator\/filterer' to convert a batch of txs into a block","ts":"1469201350.000409"},{"type":"message","user":"U0XV1HDL3","text":"so behind this consensus plugin, it hides the state-agnostic atomic broadcast plus the stateful (blockchain state) filterer\/validator","ts":"1469201388.000410"},{"type":"message","user":"U0XV1HDL3","text":"i find the pdf a bit confusing because 2 and 7\/8\/9 are not clear whether they are on the same node or on different ones","ts":"1469201439.000411"},{"type":"message","user":"U0XPR4NP4","text":"Yes, sorry, that PDF is crowded, maybe I should take another stab at it","ts":"1469201465.000412"},{"type":"message","user":"U0XV1HDL3","text":"i need a pic that shows what happens on one node, then how they link to others (which boxes talk to others)","ts":"1469201466.000413"},{"type":"message","user":"U0XV1HDL3","text":"2 would be better...","ts":"1469201476.000414"},{"type":"message","user":"U0XV1HDL3","text":"(i did not understand this here)","ts":"1469201488.000415"},{"type":"message","user":"U0XPR4NP4","text":"I will try to put together a better picture later, though may just whiteboard it this afternoon and take a picture","ts":"1469201534.000416"},{"type":"message","user":"U0XQ35CDD","text":"I cannot understand the PDF anymore either FWIW","ts":"1469201545.000417"},{"type":"message","user":"U0XV1HDL3","text":"ah, good. i'm ok with what you just described.","ts":"1469201567.000418"},{"type":"message","user":"U0XPR4NP4","text":"Great.  Yes, I think none of our discussions have really been a radical departure, we still end up with what is essentially a 'raw log', but, instead of stopping there, we form a new chain and share some signatures.  Since everyone has the same raw log and the same deterministic rules, everyone will produce the same block, so that last consenting on block step is a little silly, but, it seems to make some people feel better, and it aligns nicely with the probabilistic consensus methods if we ever decide to plug one in.","ts":"1469201856.000419"},{"type":"message","user":"U0XR6J961","text":"so what is wrong with my picture?","ts":"1469202133.000420"},{"user":"U1U7BR1KP","text":"<@U1U7BR1KP|ray> has joined the channel","type":"message","subtype":"channel_join","ts":"1469202164.000421"},{"type":"message","user":"U0XPR4NP4","text":"Binh wanted a picture without the PoW option in it","edited":{"user":"U0XPR4NP4","ts":"1469202284.000000"},"ts":"1469202230.000422"},{"type":"message","user":"U0XPR4NP4","text":"I also removed the validator to validator communication in the new one and had it all go through the plugin","ts":"1469202247.000423"},{"type":"message","user":"U0XPR4NP4","text":"There were a couple other things I noticed while trying to transcribe yours, 3b. `Broadcast` can't deliver a block, just a `[]tx`","ts":"1469202349.000426"},{"type":"message","user":"U0XPR4NP4","text":"Ah, I see, there is the difference","ts":"1469202411.000427"},{"type":"message","user":"U0XPR4NP4","text":"In 2 you call `CreateBatch`, but I would say that doesn't happen.  You just deliver your received txs into the orderer service, and get back a batch of tx.","ts":"1469202438.000428"},{"type":"message","user":"U0XPR4NP4","text":"I don't think you can push blocks into the orderer, because blocks have numbers and previous block hashes, and so you get a race where a fast node can be the first to propose a block and only ever include their desired txs","ts":"1469202492.000429"},{"type":"message","user":"U0XPR4NP4","text":"If you push txs into the orderer and get batches or a stream back (which you deterministically turn into batches), you eliminate that problem,","ts":"1469202524.000430"},{"type":"message","subtype":"file_share","text":"<@U0XR6J961|simon> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/simon\/F1U9QHRUH\/arch.pptx|arch.pptx>","file":{"id":"F1U9QHRUH","created":1469202546,"timestamp":1469202546,"name":"arch.pptx","title":"arch.pptx","mimetype":"application\/vnd.openxmlformats-officedocument.presentationml.presentation","filetype":"pptx","pretty_type":"PowerPoint Presentation","user":"U0XR6J961","editable":false,"size":43941,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1U9QHRUH\/arch.pptx?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1U9QHRUH\/download\/arch.pptx?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/simon\/F1U9QHRUH\/arch.pptx","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F1U9QHRUH-b0d0ad824b","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0XR6J961","upload":true,"display_as_bot":false,"username":"<@U0XR6J961|simon>","bot_id":null,"ts":"1469202546.000431"},{"type":"message","user":"U0XR6J961","text":"how about this?","ts":"1469202549.000432"},{"type":"message","user":"U0XR6J961","text":"ignore the first slide","ts":"1469202552.000433"},{"type":"message","user":"U0XR6J961","text":"ah i see","ts":"1469202582.000434"},{"type":"message","subtype":"file_share","text":"<@U0XR6J961|simon> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/simon\/F1U9M1S8P\/arch.pptx|arch.pptx>","file":{"id":"F1U9M1S8P","created":1469202891,"timestamp":1469202891,"name":"arch.pptx","title":"arch.pptx","mimetype":"application\/vnd.openxmlformats-officedocument.presentationml.presentation","filetype":"pptx","pretty_type":"PowerPoint Presentation","user":"U0XR6J961","editable":false,"size":44890,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1U9M1S8P\/arch.pptx?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1U9M1S8P\/download\/arch.pptx?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/simon\/F1U9M1S8P\/arch.pptx","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F1U9M1S8P-3ebda1f1c8","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0XR6J961","upload":true,"display_as_bot":false,"username":"<@U0XR6J961|simon>","bot_id":null,"ts":"1469202891.000435"},{"type":"message","user":"U0XR6J961","text":"what about now?","ts":"1469202893.000436"},{"type":"message","user":"U0XPR4NP4","text":"I don't see 2?","ts":"1469202953.000437"},{"type":"message","user":"U0XPR4NP4","text":"I would think 4 returns a block","ts":"1469202979.000438"},{"type":"message","user":"U0XR6J961","text":"ah yes","ts":"1469202982.000439"},{"type":"message","user":"U0XR6J961","text":"renumbering -_-","ts":"1469202987.000440"},{"type":"message","user":"U0XPR4NP4","text":"5 is a gossip net between validators, which you could do, but I thought since we needed sigs for ab and blocks for PoW, we wanted it attached to the plugin","ts":"1469203017.000441"},{"type":"message","user":"U0XR6J961","text":"well","ts":"1469203069.000442"},{"type":"message","user":"U0XR6J961","text":"that's why it is between validators","ts":"1469203075.000443"},{"type":"message","user":"U0XPR4NP4","text":"And between 5\/6 I would say there's a plugin validation step as to whether the signature threshold has been reached","ts":"1469203083.000444"},{"type":"message","user":"U0XR6J961","text":"because it is a common function","ts":"1469203083.000445"},{"type":"message","user":"U0XPR4NP4","text":"I agree, it could go either place.  My issue with your very first picture was that it was both.","ts":"1469203121.000446"},{"type":"message","subtype":"file_share","text":"<@U0XR6J961|simon> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/simon\/F1U9ZN801\/arch.pptx|arch.pptx>","file":{"id":"F1U9ZN801","created":1469203894,"timestamp":1469203894,"name":"arch.pptx","title":"arch.pptx","mimetype":"application\/vnd.openxmlformats-officedocument.presentationml.presentation","filetype":"pptx","pretty_type":"PowerPoint Presentation","user":"U0XR6J961","editable":false,"size":45050,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1U9ZN801\/arch.pptx?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1U9ZN801\/download\/arch.pptx?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/simon\/F1U9ZN801\/arch.pptx","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F1U9ZN801-e116e9ef69","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0XR6J961","upload":true,"display_as_bot":false,"username":"<@U0XR6J961|simon>","bot_id":null,"ts":"1469203895.000447"},{"type":"message","user":"U0XR6J961","text":"how about now?","ts":"1469203897.000448"},{"type":"message","user":"U0XR6J961","text":"we can also move (6) gossip down","ts":"1469203935.000449"},{"type":"message","user":"U0XR6J961","text":"and make it consensus implementation specific","ts":"1469203943.000450"},{"type":"message","user":"U0XR6J961","text":"clearly (6) can be implemented by consensus anyways","ts":"1469203967.000451"},{"type":"message","user":"U0XPR4NP4","text":"2. CreateBlock should be 5.","ts":"1469203967.000452"},{"type":"message","user":"U0XR6J961","text":"sorry, copy+paste to get a nice ODC compliant slide","ts":"1469203988.000453"},{"type":"message","user":"U0XPR4NP4","text":"And there's an extra 8, but otherwise I think it's looking pretty good","ts":"1469203995.000454"},{"type":"message","user":"U0XR6J961","text":"aaand libreoffice threw away a slide","ts":"1469204190.000455"},{"type":"message","user":"U0XPR4NP4","text":"I was wondering why it was pptx.... thought you were on Linux","ts":"1469204409.000456"},{"type":"message","user":"U0XPR4NP4","text":"(why I kept posting pdfs instead of odps)","ts":"1469204419.000457"},{"type":"message","user":"U0XR6J961","text":"i figured windows people could use pptx better","ts":"1469204447.000458"},{"type":"message","subtype":"file_share","text":"<@U0XR6J961|simon> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/simon\/F1U9M8UQ4\/arch.pptx|arch.pptx>","file":{"id":"F1U9M8UQ4","created":1469204454,"timestamp":1469204454,"name":"arch.pptx","title":"arch.pptx","mimetype":"application\/vnd.openxmlformats-officedocument.presentationml.presentation","filetype":"pptx","pretty_type":"PowerPoint Presentation","user":"U0XR6J961","editable":false,"size":45132,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1U9M8UQ4\/arch.pptx?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1U9M8UQ4\/download\/arch.pptx?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/simon\/F1U9M8UQ4\/arch.pptx","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F1U9M8UQ4-7fcb762d80","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0XR6J961","upload":true,"display_as_bot":false,"username":"<@U0XR6J961|simon>","bot_id":null,"ts":"1469204455.000459"},{"type":"message","user":"U0XR6J961","text":"you see that validateblock is gone","ts":"1469204469.000460"},{"type":"message","user":"U0XR6J961","text":"okay, i'll head out for a bit","ts":"1469204507.000461"},{"type":"message","user":"U0XPR4NP4","text":"Yeah, that looks good to me now, thanks Simon","ts":"1469204789.000462"},{"type":"message","user":"U0XR6J961","text":"cool","ts":"1469210111.000463"},{"type":"message","user":"U115YGEH1","text":"Is PBFT Sieve a part of the hyperledger fabric distribution, or was it removed in the transition from openblockchain to fabric?","ts":"1469274950.000464"},{"type":"message","user":"U0UGH3X7X","text":"sieve was part of fabric but we decided to concentrate on batch pbft in the current codebase. We're also working with a new architecture to decouple consensus from the other components and allow for plugin of other consensus protocols. <https:\/\/github.com\/hyperledger\/fabric\/wiki\/Next-Consensus-Architecture-Proposal>","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/wiki\/Next-Consensus-Architecture-Proposal","text":"fabric - Fabric is a blockchain project in Incubation proposed to the community and documented at <https:\/\/goo.gl\/RYQZ5N>. Information on what Incubation entails can be found in the Hyperledger Proj...","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/wiki\/Next-Consensus-Architecture-Proposal","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1469295117.000465"},{"type":"message","user":"U115YGEH1","text":"What is the difference between Batch PBFT and Sieve? Did the fabric implementation of Sieve only work with one operation at a time?","ts":"1469404007.000467"},{"type":"message","user":"U0UGH3X7X","text":"in batch bpft,  fabric will batch ( batch size set in hyperledger\/fabric\/consensus\/pbft\/core.yaml ) transactions before sending the batch through consensus.  Sieve works on one transaction at a time and adds an extra step to verify the result of the transaction.","ts":"1469410257.000468"},{"type":"message","user":"U115YGEH1","text":"Okay, that makes sense now","ts":"1469414829.000469"},{"user":"U1JBVRNQ3","text":"<@U1JBVRNQ3|virajkamat> has joined the channel","type":"message","subtype":"channel_join","ts":"1469420338.000470"},{"user":"U1JHMKC8H","text":"<@U1JHMKC8H|huxd> has joined the channel","type":"message","subtype":"channel_join","ts":"1469443643.000471"},{"type":"message","user":"U0XR6J961","text":"<@U0XPR4NP4>, <@U0XQ35CDD>: i think we overlooked one aspect: the `ValidateBlock(block) block` function looks like it is stateless, but it can't be","ts":"1469450629.000472"},{"type":"message","user":"U0XQ35CDD","text":"Right. I made that point (w\/o being aware that statelessness was implied previously) during the meeting on Friday.","ts":"1469451938.000473"},{"type":"message","user":"U0XQ35CDD","text":"Since you couldn't make Friday's meeting: We concluded that the validation-via-gossip function is the one part we may want to keep from last week's discussions.","ts":"1469451976.000474"},{"type":"message","user":"U0XQ35CDD","text":"So it's NCAP with this optional module built either on the consenter or the committer level. Binh will be presenting these options to the community for further discussion.","ts":"1469451980.000475"},{"type":"message","user":"U0XR6J961","text":"what is NCAP?","ts":"1469452045.000476"},{"type":"message","user":"U0XQ35CDD","text":"It is the acronym Marko uses for the new consensus architecture proposed in the Wiki.","ts":"1469452083.000477"},{"type":"message","user":"U0XR6J961","text":"oh","ts":"1469452086.000478"},{"type":"message","user":"U0XR6J961","text":"so how does the architecture look now?","ts":"1469452095.000479"},{"type":"message","user":"U0XR6J961","text":"different from my pptx?","ts":"1469452105.000480"},{"type":"message","user":"U0XQ35CDD","text":"Will have to load your PPTX when I'm on the laptop and will get back to you. (About to leave for work now.)","ts":"1469452333.000481"},{"type":"message","user":"U0XR6J961","text":"ok","ts":"1469452338.000482"},{"type":"message","user":"U0XR6J961","text":"was that meeting some time late?","ts":"1469452358.000483"},{"type":"message","user":"U0XQ35CDD","text":"<@U0KN2SSKE> Can we post the slides with the suggested designs here?","ts":"1469452377.000484"},{"type":"message","user":"U0KN2SSKE","text":"i simplified the chart as follow (more on architecture side) to talk with the community","ts":"1469452399.000485"},{"type":"message","subtype":"file_share","text":"<@U0KN2SSKE|binhn> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/binhn\/F1UQKGYJD\/pasted_image_at_2016_07_25_09_13_am.png|Pasted image at 2016-07-25, 9:13 AM>","file":{"id":"F1UQKGYJD","created":1469452403,"timestamp":1469452403,"name":"Pasted image at 2016_07_25 09_13 AM.png","title":"Pasted image at 2016-07-25, 9:13 AM","mimetype":"image\/png","filetype":"png","pretty_type":"PNG","user":"U0KN2SSKE","editable":false,"size":107948,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1UQKGYJD\/pasted_image_at_2016_07_25_09_13_am.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1UQKGYJD\/download\/pasted_image_at_2016_07_25_09_13_am.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_64":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1UQKGYJD-ebb3e26b5c\/pasted_image_at_2016_07_25_09_13_am_64.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_80":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1UQKGYJD-ebb3e26b5c\/pasted_image_at_2016_07_25_09_13_am_80.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1UQKGYJD-ebb3e26b5c\/pasted_image_at_2016_07_25_09_13_am_360.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360_w":360,"thumb_360_h":204,"thumb_480":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1UQKGYJD-ebb3e26b5c\/pasted_image_at_2016_07_25_09_13_am_480.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_480_w":480,"thumb_480_h":272,"thumb_160":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1UQKGYJD-ebb3e26b5c\/pasted_image_at_2016_07_25_09_13_am_160.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1UQKGYJD-ebb3e26b5c\/pasted_image_at_2016_07_25_09_13_am_720.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720_w":720,"thumb_720_h":408,"image_exif_rotation":1,"original_w":812,"original_h":460,"permalink":"https:\/\/hyperledgerproject.slack.com\/files\/binhn\/F1UQKGYJD\/pasted_image_at_2016_07_25_09_13_am.png","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F1UQKGYJD-23d53c4646","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0KN2SSKE","upload":true,"display_as_bot":false,"username":"<@U0KN2SSKE|binhn>","bot_id":null,"ts":"1469452405.000486"},{"type":"message","user":"U0XQ35CDD","text":"(@simon: 1pm-5pm EDT IIRC, we had the dial-in on for you.)","ts":"1469452406.000487"},{"type":"message","user":"U0KN2SSKE","text":"and the tx flow becomes","ts":"1469452434.000488"},{"type":"message","subtype":"file_share","text":"<@U0KN2SSKE|binhn> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/binhn\/F1UQ40FNY\/pasted_image_at_2016_07_25_09_13_am.png|Pasted image at 2016-07-25, 9:13 AM>","file":{"id":"F1UQ40FNY","created":1469452438,"timestamp":1469452438,"name":"Pasted image at 2016_07_25 09_13 AM.png","title":"Pasted image at 2016-07-25, 9:13 AM","mimetype":"image\/png","filetype":"png","pretty_type":"PNG","user":"U0KN2SSKE","editable":false,"size":69833,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1UQ40FNY\/pasted_image_at_2016_07_25_09_13_am.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1UQ40FNY\/download\/pasted_image_at_2016_07_25_09_13_am.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_64":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1UQ40FNY-9c9ba0586e\/pasted_image_at_2016_07_25_09_13_am_64.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_80":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1UQ40FNY-9c9ba0586e\/pasted_image_at_2016_07_25_09_13_am_80.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1UQ40FNY-9c9ba0586e\/pasted_image_at_2016_07_25_09_13_am_360.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360_w":360,"thumb_360_h":210,"thumb_480":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1UQ40FNY-9c9ba0586e\/pasted_image_at_2016_07_25_09_13_am_480.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_480_w":480,"thumb_480_h":280,"thumb_160":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1UQ40FNY-9c9ba0586e\/pasted_image_at_2016_07_25_09_13_am_160.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1UQ40FNY-9c9ba0586e\/pasted_image_at_2016_07_25_09_13_am_720.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720_w":720,"thumb_720_h":420,"image_exif_rotation":1,"original_w":798,"original_h":466,"permalink":"https:\/\/hyperledgerproject.slack.com\/files\/binhn\/F1UQ40FNY\/pasted_image_at_2016_07_25_09_13_am.png","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F1UQ40FNY-9ab14033c7","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0KN2SSKE","upload":true,"display_as_bot":false,"username":"<@U0KN2SSKE|binhn>","bot_id":null,"ts":"1469452440.000489"},{"type":"message","user":"U0XR6J961","text":"so why did we throw away what he had been discussing the days before?","ts":"1469452547.000490"},{"type":"message","user":"U0XR6J961","text":"how does this work with PoW?","ts":"1469452578.000491"},{"type":"message","user":"U0XQ35CDD","text":"This question I never quite got during that discussion last week. With the current NCAP design (w\/ zero modifications), what prevents the consenters from picking up the next block to go via PoW?","attachments":[{"fallback":"[July 25th, 2016 9:16 AM] simon: how does this work with PoW?","author_subname":"simon","ts":"1469452578.000491","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"how does this work with PoW?","author_name":"Simon Schubert","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/simon","author_icon":"https:\/\/secure.gravatar.com\/avatar\/676aeb5acbd353b77e077be1b7bd1a6e.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0016-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1469452578000491","is_share":true,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1469453034.000492"},{"type":"message","user":"U0XQ35CDD","text":"Or let's consider PoET. The consenters receive transactions from the submitting peers, the PoET wizardry kicks in, one of them wakes up first and pushes the batch it has collected to the consenters.","ts":"1469453148.000493"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> The biggest piece I think, was whether to deal with validation in the 'c-service'.  It was eventually concluded that that's a non-starter, so the validation split didn't make sense.  For those who would like an extra layer of consensus on the block output, we can do that between peers via gossiped signatures or whatnot.","ts":"1469454657.000494"},{"type":"message","user":"U0XPR4NP4","text":"Per <@U0XQ35CDD> it also simplifies things drastically, if we simply have PoW or PoET output batches and _not_ blocks.  Then it behaves exactly like all the other ordering services, and there's no need to modify the gossiped signatures etc.","ts":"1469454701.000495"},{"type":"message","user":"U0XPR4NP4","text":"Certainly for something like bitcoin, it makes sense to have the miners operate on only 'valid transactions', because of the economic incentive, but, since we do not require a currency transaction here, it makes no sense here.  I'd also argue it's shockingly like the bitcoin model, because for those applications which push a hash onto the chain, absolutely 'invalid hashes' may make it onto the chain.","ts":"1469454883.000496"},{"type":"message","user":"U0XR6J961","text":"so what's the plan - what should i work on now?","ts":"1469460962.000497"},{"type":"message","user":"U0XR6J961","text":"i somehow wanted to implement the proposed API, but it is unclear whether this is a waste of time or not","ts":"1469460988.000498"},{"type":"message","user":"U0XPR4NP4","text":"I think regardless of what we end up doing, the separated 'ordering' interface is something that's in every picture?","ts":"1469461023.000499"},{"type":"message","user":"U0XPR4NP4","text":"(the thing that brings in txs, and outputs batches)","ts":"1469461037.000500"},{"type":"message","user":"U0XPR4NP4","text":"Have you already done that?","ts":"1469461046.000501"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1469461130.000502"},{"type":"message","subtype":"file_share","text":"<@U0XR6J961|simon> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/simon\/F1USD6FCH\/consensus.proto|consensus.proto>","file":{"id":"F1USD6FCH","created":1469461633,"timestamp":1469461633,"name":"consensus.proto","title":"consensus.proto","mimetype":"text\/plain","filetype":"text","pretty_type":"Plain Text","user":"U0XR6J961","editable":true,"size":1739,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1USD6FCH\/consensus.proto?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1USD6FCH\/download\/consensus.proto?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/simon\/F1USD6FCH\/consensus.proto","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F1USD6FCH-a6ca1ff29d","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/simon\/F1USD6FCH\/consensus.proto\/edit","preview":"\/*\nCopyright IBM Corp. 2016 All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>\/*<\/pre><\/div>\n<div><pre>Copyright IBM Corp. 2016 All Rights Reserved.<\/pre><\/div>\n<div><pre><\/pre><\/div>\n<div><pre>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<\/pre><\/div>\n<div><pre>you may not use this file except in compliance with the License.<\/pre><\/div>\n<\/div>\n<\/div>\n","lines":73,"lines_more":68,"preview_is_truncated":true,"channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0XR6J961","upload":true,"display_as_bot":false,"username":"<@U0XR6J961|simon>","bot_id":null,"ts":"1469461633.000503"},{"type":"message","user":"U0UKTPMG8","text":"<@U0XR6J961> is this proto in a branch?","ts":"1469462268.000504"},{"type":"message","user":"U0XR6J961","text":"no","ts":"1469462275.000505"},{"type":"message","user":"U0XR6J961","text":"just hacked it so that we can talk about it","ts":"1469462284.000506"},{"type":"message","user":"U0UKTPMG8","text":"no worries, will load manually","ts":"1469462290.000507"},{"type":"message","user":"U0XR6J961","text":"i didn't check whether it actually compiles","ts":"1469462306.000508"},{"type":"message","user":"U0UKTPMG8","text":"understood","ts":"1469462314.000509"},{"type":"message","user":"U0UKTPMG8","text":"will get the gist","ts":"1469462319.000510"},{"type":"message","user":"U0UKTPMG8","text":"<@U0XR6J961>: <@U0XPR4NP4> Any way we could discuss this in a hangout ?","ts":"1469462693.000511"},{"type":"message","user":"U0UKTPMG8","text":"if we feel prepared to","ts":"1469462703.000512"},{"type":"message","user":"U0XPR4NP4","text":"I'm sitting on a mostly vacant line waiting for the weekly consensus\/security meeting to start","ts":"1469462713.000513","reactions":[{"name":"+1","users":["U0UGH3X7X"],"count":1}]},{"type":"message","user":"U0UKTPMG8","text":"ohhhh","ts":"1469462720.000514"},{"type":"message","user":"U0UKTPMG8","text":":slightly_smiling_face:","ts":"1469462722.000515"},{"type":"message","user":"U0XR6J961","text":"jyellick: i don't have an invite for that?","ts":"1469462728.000516"},{"type":"message","user":"U0XPR4NP4","text":"But would love to after","ts":"1469462728.000517"},{"type":"message","user":"U0XPR4NP4","text":"You are listed as optional for it in mine (<@U0XR6J961>)","edited":{"user":"U0XPR4NP4","ts":"1469462755.000000"},"ts":"1469462740.000518"},{"type":"message","user":"U0XR6J961","text":"aha!","ts":"1469462756.000520"},{"type":"message","user":"U0XPR4NP4","text":"But it's just <@U0UGH3X7X> and I waiting, thinking it is not happening","ts":"1469462775.000521"},{"type":"message","user":"U0UKTPMG8","text":"if you shoot to me, I can join if you wish to discuss it there","ts":"1469462780.000522"},{"type":"message","subtype":"file_share","text":"<@U0XR6J961|simon> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/simon\/F1US8PFAS\/arch.pptx|arch.pptx>","file":{"id":"F1US8PFAS","created":1469462958,"timestamp":1469462958,"name":"arch.pptx","title":"arch.pptx","mimetype":"application\/vnd.openxmlformats-officedocument.presentationml.presentation","filetype":"pptx","pretty_type":"PowerPoint Presentation","user":"U0XR6J961","editable":false,"size":45110,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1US8PFAS\/arch.pptx?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1US8PFAS\/download\/arch.pptx?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/simon\/F1US8PFAS\/arch.pptx","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F1US8PFAS-2662e0086b","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0XR6J961","upload":true,"display_as_bot":false,"username":"<@U0XR6J961|simon>","bot_id":null,"ts":"1469462960.000523"},{"type":"message","user":"U0KM61BCP","text":"someone please correct me if I am mistaken but didn\u2019t we deprecate pbft-classic?","ts":"1469465006.000524"},{"type":"message","user":"U0XR6J961","text":"we did","ts":"1469466303.000525"},{"type":"message","user":"U0XR6J961","text":"issue with this model: - how does the (atomic broadcast) consenter know that its validator is caught up with the blockchain?","ts":"1469466916.000526"},{"type":"message","user":"U0KN2SSKE","text":"ok, here is the very early draft of what we talked about this morning.  Obviously I ll continue to work on this and with community tomorrow, but appreciate any comments","edited":{"user":"U0KN2SSKE","ts":"1469469363.000000"},"ts":"1469469035.000527"},{"type":"message","subtype":"file_share","text":"<@U0KN2SSKE|binhn> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/binhn\/F1UTVE0FK\/fabricnext-community.pptx|FabricNext-Community.pptx>","file":{"id":"F1UTVE0FK","created":1469469044,"timestamp":1469469044,"name":"FabricNext-Community.pptx","title":"FabricNext-Community.pptx","mimetype":"application\/vnd.openxmlformats-officedocument.presentationml.presentation","filetype":"pptx","pretty_type":"PowerPoint Presentation","user":"U0KN2SSKE","editable":false,"size":151924,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1UTVE0FK\/fabricnext-community.pptx?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1UTVE0FK\/download\/fabricnext-community.pptx?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/binhn\/F1UTVE0FK\/fabricnext-community.pptx","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F1UTVE0FK-73ace0a34c","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0,"num_stars":1},"user":"U0KN2SSKE","upload":true,"display_as_bot":false,"username":"<@U0KN2SSKE|binhn>","bot_id":null,"ts":"1469469045.000528"},{"type":"message","user":"U0KN2SSKE","text":"say, after block validation, the peer decided to discard the block, i think the peer wouldn\u2019t  have to communicate that with the consenters since they are stateless \u2014 agreed ?","ts":"1469471426.000530"},{"type":"message","user":"U0XPR4NP4","text":"I think we are re-evaluating this, but not done.  The goal is for a stateless consenter, but I'm not entirely sure if it's possible.  The problem is that if the consenter does not know the state of the blockchain, it cannot make some decisions.  If the network is in lockstep, things are fine, but if the consenter is new, or was offline for some period of time, it will likely need some 'where is the chain now' data to bootstrap.","ts":"1469471671.000531"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> <@U0KN2SSKE> <@U0XQ35CDD> <@U0UGH3X7X> <@U0UKTPMG8> <@U0TFEHX8E> What is the downside to making the validator\/consenter in the picture be a single entity? They seem to be necessarily tightly coupled to me.  We would have ordering of transactions broken out separately via the ordering service, we would have execution of chaincode separately via the endorsers, The middle piece 'peer\/validator\/consenter' would then be all the logic for manipulating and maintaining the chain.  There's no need for information to leak to the ordering service, so put the 'as a service' boundary there. By trying to split them, it seems like we're introducing a lot of headaches and unwanted\/unneeded complexity.  We could preserve a 'consensus plugin' API boundary as we do today, which abstracts the ledger details and network implementations away, but the more I look, actually keeping the consenter and validator in separate processes seems to have more downsides than up.","edited":{"user":"U0XPR4NP4","ts":"1469476271.000000"},"ts":"1469476243.000532"},{"type":"message","user":"U0KN2SSKE","text":"i am ok merging them together - as long as we keep the orderrers separate \u2014 btw, the terminology becomes so confusing at this point:  the wiki doc calls consenter as orderrer, and now we intro validator\/consenter, which to me could all be functions of a committer","ts":"1469476660.000534"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I think the orderer boundary is a clean one we should definitely maintain.  The ability to plug in other ordering mechanisms like Kafka is a must have.  And I'd maintain it's a semantic distinction; that \"Consensus as a service\" isn't actually what people want, it's \"Ordering as a service\", where the actual consensus with knowledge of content is done locally.  I'm worried that trying to gRPC the consenter\/validator boundary is going to produce a large and brittle interface, with 1-1 network topology, and I'm just not sure who really wants to plug in here? For PoW\/PoET, this can be plugged in at the 'ordering as a service' layer.","edited":{"user":"U0XPR4NP4","ts":"1469477283.000000"},"ts":"1469477145.000535"},{"type":"message","user":"U0XQ35CDD","text":"As I pointed out privately, my main concern is keeping the orderers (the bottom layer in Simon's branch) separate and it seems like we're good here; this is being addressed both in NCAP and in the detailed designs we're considering now. I don't see a need to keep the validation and consenters (as shown below) as separate processes.","ts":"1469478410.000537"},{"type":"message","subtype":"file_share","text":"<@U0XQ35CDD|kostas> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/kostas\/F1V06UCL9\/screen_shot_2016-07-25_at_15.32.43.png|Screen Shot 2016-07-25 at 15.32.43.png> and commented: This is from Simon","file":{"id":"F1V06UCL9","created":1469478419,"timestamp":1469478419,"name":"Screen Shot 2016-07-25 at 15.32.43.png","title":"Screen Shot 2016-07-25 at 15.32.43.png","mimetype":"image\/png","filetype":"png","pretty_type":"PNG","user":"U0XQ35CDD","editable":false,"size":53342,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1V06UCL9\/screen_shot_2016-07-25_at_15.32.43.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1V06UCL9\/download\/screen_shot_2016-07-25_at_15.32.43.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_64":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1V06UCL9-8595384dab\/screen_shot_2016-07-25_at_15.32.43_64.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_80":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1V06UCL9-8595384dab\/screen_shot_2016-07-25_at_15.32.43_80.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1V06UCL9-8595384dab\/screen_shot_2016-07-25_at_15.32.43_360.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360_w":360,"thumb_360_h":268,"thumb_480":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1V06UCL9-8595384dab\/screen_shot_2016-07-25_at_15.32.43_480.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_480_w":480,"thumb_480_h":358,"thumb_160":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1V06UCL9-8595384dab\/screen_shot_2016-07-25_at_15.32.43_160.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","image_exif_rotation":1,"original_w":550,"original_h":410,"permalink":"https:\/\/hyperledgerproject.slack.com\/files\/kostas\/F1V06UCL9\/screen_shot_2016-07-25_at_15.32.43.png","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F1V06UCL9-71be7fb135","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":1,"initial_comment":{"id":"Fc1UV6TBRC","created":1469478419,"timestamp":1469478419,"user":"U0XQ35CDD","is_intro":true,"comment":"This is from Simon","channel":""}},"user":"U0XQ35CDD","upload":true,"display_as_bot":false,"username":"<@U0XQ35CDD|kostas>","bot_id":null,"ts":"1469478423.000538"},{"type":"message","user":"U0XQ35CDD","text":"Could we maybe argue that this separation is necessary if we want to experiment with a design where consensus is entirely optional?","ts":"1469478446.000539"},{"type":"message","user":"U0XPR4NP4","text":"What do you mean \"where consensus is entirely optional\"?","ts":"1469478491.000540"},{"type":"message","user":"U0XQ35CDD","text":"(If you think that's out of the question, I'd like to point out that this is what NCAP proposed up until now. And still does actually.)","edited":{"user":"U0XQ35CDD","ts":"1469478590.000000"},"ts":"1469478504.000541"},{"type":"message","user":"U0XQ35CDD","text":"As per the NCAP document: no gossiping on whether you and I have the exact same chain, because we trust in the deterministic, local filtering process.","ts":"1469478550.000542"},{"type":"message","user":"U0XPR4NP4","text":"I guess I am not suggesting that we would not still have multiple 'consensus plugins', including 'noops 2.0' which would simply write the unvalidated block to the chain (or maybe optionally the validated block) [though this I would argue is more of a validation policy than a different plugin].  But I don't see why this makes a different process necessary.","edited":{"user":"U0XPR4NP4","ts":"1469478841.000000"},"ts":"1469478629.000544"},{"type":"message","user":"U0XQ35CDD","text":"(You deleted the sentence I was about to object to :grin:)","ts":"1469478887.000549"},{"type":"message","user":"U0XPR4NP4","text":"Yes, sorry, hit send a little quickly.","ts":"1469478900.000550"},{"type":"message","user":"U0KN2SSKE","text":"if ordering  is optional, then we would just not call it \u2014 noops and neither gossiping on block","ts":"1469478946.000551"},{"type":"message","user":"U0KN2SSKE","text":"so i don\u2019t have a reason to keep consenter and validator separate either","ts":"1469478995.000552"},{"type":"message","user":"U0XR6J961","text":"i'm fine with merging validator and consensus into one process","ts":"1469520770.000553"},{"type":"message","user":"U0XR6J961","text":"in that case we're talking about defining the internal API","ts":"1469520785.000554"},{"type":"message","user":"U0XR6J961","text":"it needs to be a concise API so that we can at least have two implementations for atomic broadcast and for PoW","ts":"1469520820.000555"},{"user":"U10E1PFEH","text":"<@U10E1PFEH|mgk> has joined the channel","type":"message","subtype":"channel_join","ts":"1469526878.000556"},{"type":"message","user":"U0XR6J961","text":"hi","ts":"1469534096.000557"},{"type":"message","user":"U0XR6J961","text":"what's our answer to lost transactions in v0.5?","ts":"1469534272.000558"},{"type":"message","user":"U0XR6J961","text":"can happen, won'tfix?","ts":"1469534280.000559"},{"type":"message","user":"U0UGH3X7X","text":"is there an issue opened for that ? I would agree that we just document for 0.5 and see what we should do with the new arch","ts":"1469538147.000560"},{"type":"message","user":"U0XR6J961","text":"there are several","ts":"1469538843.000561"},{"type":"message","user":"U0UGH3X7X","text":"aha,  i'm supposed to talk to scottz today about some issues ... must be these","ts":"1469538950.000562"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1469538963.000563"},{"type":"message","user":"U0XR6J961","text":"if you're okay with closing those then i will","ts":"1469538974.000564"},{"type":"message","user":"U0XR6J961","text":"because now i can :slightly_smiling_face:","ts":"1469538978.000565"},{"type":"message","user":"U0UGH3X7X","text":"hahahaha   :slightly_smiling_face:  let me talk to him first. I'll get him to close","ts":"1469539016.000566"},{"type":"message","user":"U0UKTPMG8","text":"<@U0XPR4NP4>: <@U0XR6J961> when Jason comes back online I will ask if he has time to continue discussion","ts":"1469539042.000567"},{"type":"message","user":"U0UGH3X7X","text":"btw,  can you label issues now ?","ts":"1469539058.000568"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1469539063.000569"},{"type":"message","user":"U0XR6J961","text":"jeffgarratt: great","ts":"1469539075.000570"},{"type":"message","user":"U0XR6J961","text":"vita: ^^","ts":"1469539151.000571"},{"type":"message","user":"U0XR6J961","text":"<@U0YMACQSW>: ^","ts":"1469539168.000572"},{"type":"message","user":"U0XPR4NP4","text":"<@U0UKTPMG8>: <@U0XR6J961> I'm online","ts":"1469539221.000573"},{"type":"message","user":"U0UKTPMG8","text":"k, I need about 10 mins.","ts":"1469539439.000574"},{"type":"message","user":"U0XR6J961","text":"can we do a telco?  not sure if i can do hangouts when transiting","ts":"1469539701.000575"},{"type":"message","user":"U0XR6J961","text":"tho","ts":"1469539711.000576"},{"type":"message","user":"U0XPR4NP4","text":"Sure","ts":"1469539713.000577"},{"type":"message","user":"U0XR6J961","text":"i can try","ts":"1469539714.000578"},{"type":"message","user":"U0XPR4NP4","text":"I'll send you guys the PC out of band","ts":"1469539724.000579"},{"type":"message","user":"U0XR6J961","text":"ah no, i think hangout will work","ts":"1469539745.000580"},{"type":"message","user":"U0XR6J961","text":"that's good","ts":"1469539750.000581"},{"type":"message","user":"U0YM41HA5","text":"I'll be happy to join in Vita's place (she can't join at the moment). Please let me know when and how to connect","ts":"1469542296.000582"},{"type":"message","subtype":"file_share","text":"<@U0KN2SSKE|binhn> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/binhn\/F1VDNHG4E\/fabricnext-community.pptx|FabricNext-Community.pptx> and commented: Deck I discussed with community today","file":{"id":"F1VDNHG4E","created":1469579537,"timestamp":1469579537,"name":"FabricNext-Community.pptx","title":"FabricNext-Community.pptx","mimetype":"application\/vnd.openxmlformats-officedocument.presentationml.presentation","filetype":"pptx","pretty_type":"PowerPoint Presentation","user":"U0KN2SSKE","editable":false,"size":94235,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1VDNHG4E\/fabricnext-community.pptx?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1VDNHG4E\/download\/fabricnext-community.pptx?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/binhn\/F1VDNHG4E\/fabricnext-community.pptx","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F1VDNHG4E-54e5ba4975","channels":["C0J02NU1E","C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":2,"initial_comment":{"id":"Fc1VDLV7RS","created":1469579537,"timestamp":1469579537,"user":"U0KN2SSKE","is_intro":true,"comment":"Deck I discussed with community today","channel":""},"num_stars":2,"pinned_to":["D1KKNBZ5W"]},"user":"U0KN2SSKE","upload":true,"display_as_bot":false,"username":"<@U0KN2SSKE|binhn>","bot_id":null,"ts":"1469579538.000583"},{"type":"message","user":"U0XR6J961","text":"so we're going to use jira for issue tracking?","ts":"1469610632.000584"},{"type":"message","user":"U0XR6J961","text":"in my experience that's the slowest interface ever","ts":"1469610643.000585"},{"type":"message","user":"U0UGH3X7X","text":"ok, so can someone summarize what jason\/simon\/jeff discussed yesterday ?  or is there code to look at ?","ts":"1469623722.000586"},{"type":"message","user":"U0XR6J961","text":"we decided to start writing code","ts":"1469623737.000587"},{"type":"message","user":"U0XR6J961","text":"prototyping the new architecture","ts":"1469623745.000588"},{"type":"message","user":"U0UGH3X7X","text":"ah, ok . your branch ?","ts":"1469623766.000589"},{"type":"message","user":"U0XR6J961","text":"sort of, but now we have that whole gerrit thing going","ts":"1469623892.000590"},{"type":"message","user":"U0XR6J961","text":"so i don't know how that will work","ts":"1469623898.000591"},{"type":"message","user":"U0UGH3X7X","text":"ya ,  i've got to set that up today","ts":"1469623928.000592"},{"type":"message","user":"U0XR6J961","text":"well, there is no code in gerrit yet","ts":"1469623937.000593"},{"type":"message","user":"U0XR6J961","text":"my hope is that we will start from 0","ts":"1469623952.000594"},{"type":"message","user":"U0XR6J961","text":"but probably not","ts":"1469623956.000595"},{"type":"message","user":"U0XQ35CDD","text":"We also drew out yet another diagram with APIs to make the flow a bit clearer, and roughly sketched out how the most basic Behave test will look like for the new prototype.","ts":"1469624240.000596"},{"type":"message","user":"U0UGH3X7X","text":"post the diagram here ?","ts":"1469624346.000597"},{"type":"message","user":"U0XQ35CDD","text":"Jeff has a picture of it handy, I don't.","ts":"1469624481.000598"},{"type":"message","user":"U0UGH3X7X","text":"ok mr Garratt <@U0UKTPMG8>  :slightly_smiling_face:","ts":"1469624529.000599"},{"type":"message","user":"U0XR6J961","text":"<@U0UKTPMG8>, <@U0XQ35CDD>, <@U0XPR4NP4>: what happened yesterday?","ts":"1469629082.000600"},{"type":"message","user":"U0XR6J961","text":"i'm in the code, trying to extract changesets from transactions","ts":"1469629095.000601"},{"type":"message","user":"U0XQ35CDD","text":"<@U0XR6J961>: We took another stub at drawing out the APIs. Not a rewrite of your effort per se, but mostly an exercise to make sure we (Jeff, Jason, and I) are on the same page. (And as such, I think the drawing would make little sense when shared outside the group. Jeff has it though.)","ts":"1469630067.000602"},{"type":"message","user":"U0XQ35CDD","text":"We also worked on the minimum network configuration needed (in terms of endorsing peers, committing peers) and the simplest behave scenario for the new architecture. Jeff will chime in with an update on this.","ts":"1469630074.000603"},{"type":"message","user":"U0XQ35CDD","text":"It may also be wise for us to sync up and do a rough task assignment of sorts.","ts":"1469630083.000604"},{"type":"message","user":"U0XR6J961","text":"okay, i'll just hack code","ts":"1469630173.000605"},{"type":"message","user":"U0XR6J961","text":"can't stand not hacking code","ts":"1469630178.000606"},{"type":"message","user":"U0UKTPMG8","text":"gonna grab a coffee and back in 10 mins","ts":"1469630227.000607"},{"type":"message","user":"U0UKTPMG8","text":"will shoot message and see if we can't sync","ts":"1469630241.000608"},{"type":"message","user":"U0UKTPMG8","text":"<@U0XR6J961>: <@U0XQ35CDD> <@U0XPR4NP4> <@U0UGH3X7X> ^^","ts":"1469630261.000609"},{"type":"message","user":"U0YM41HA5","text":"We (HRL) came up with a proposal for a gossip network for the new architecture, to accommodate different communication \/ dissemination needs among the different entities.\nI'll post a short document with the main ideas. \nI'd be happy to get your feedback on that, and discuss further.","ts":"1469634468.000610"},{"type":"message","subtype":"file_share","text":"<@U0YM41HA5|mandler> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/mandler\/F1VL9LP0U\/hl_comm.v2.short.docx|gossip.network.docx>","file":{"id":"F1VL9LP0U","created":1469634537,"timestamp":1469634537,"name":"hl_comm.V2.short.docx","title":"gossip.network.docx","mimetype":"application\/vnd.openxmlformats-officedocument.wordprocessingml.document","filetype":"docx","pretty_type":"Word Document","user":"U0YM41HA5","editable":false,"size":51045,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1VL9LP0U\/hl_comm.v2.short.docx?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1VL9LP0U\/download\/hl_comm.v2.short.docx?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/mandler\/F1VL9LP0U\/hl_comm.v2.short.docx","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F1VL9LP0U-85ab0bf748","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0,"pinned_to":["D1KKNBZ5W"]},"user":"U0YM41HA5","upload":true,"display_as_bot":false,"username":"<@U0YM41HA5|mandler>","bot_id":null,"ts":"1469634537.000611"},{"type":"message","user":"U0XR6J961","text":"<https:\/\/github.com\/corecode\/fabric\/commits\/separate-consensus-config>","attachments":[{"service_name":"GitHub","title":"corecode\/fabric","title_link":"https:\/\/github.com\/corecode\/fabric\/commits\/separate-consensus-config","text":"Blockchain fabric code","fallback":"GitHub: corecode\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400","from_url":"https:\/\/github.com\/corecode\/fabric\/commits\/separate-consensus-config","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1469637201.000612"},{"user":"U15C5RM7F","text":"<@U15C5RM7F|nishi> has joined the channel","type":"message","subtype":"channel_join","ts":"1469655675.000614"},{"type":"message","user":"U0XV1HDL3","text":"<@U0XR6J961>, <@U0XQ35CDD>: do you have the result of sketching the APIs shared here?","ts":"1469656818.000615"},{"type":"message","subtype":"file_share","text":"<@U0XQ35CDD|kostas> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/kostas\/F1VSLK996\/slack_for_ios_upload.jpg|Slack for iOS Upload>","file":{"id":"F1VSLK996","created":1469674822,"timestamp":1469674822,"name":"Slack for iOS Upload.jpg","title":"Slack for iOS Upload","mimetype":"image\/jpeg","filetype":"jpg","pretty_type":"JPEG","user":"U0XQ35CDD","editable":false,"size":700064,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1VSLK996\/slack_for_ios_upload.jpg?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1VSLK996\/download\/slack_for_ios_upload.jpg?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_64":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1VSLK996-bb2b720d0b\/slack_for_ios_upload_64.jpg?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_80":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1VSLK996-bb2b720d0b\/slack_for_ios_upload_80.jpg?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1VSLK996-bb2b720d0b\/slack_for_ios_upload_360.jpg?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360_w":360,"thumb_360_h":360,"thumb_480":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1VSLK996-bb2b720d0b\/slack_for_ios_upload_480.jpg?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_480_w":480,"thumb_480_h":480,"thumb_160":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1VSLK996-bb2b720d0b\/slack_for_ios_upload_160.jpg?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1VSLK996-bb2b720d0b\/slack_for_ios_upload_720.jpg?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720_w":720,"thumb_720_h":720,"thumb_960":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1VSLK996-bb2b720d0b\/slack_for_ios_upload_960.jpg?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_960_w":960,"thumb_960_h":960,"thumb_1024":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F1VSLK996-bb2b720d0b\/slack_for_ios_upload_1024.jpg?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_1024_w":1024,"thumb_1024_h":1024,"image_exif_rotation":1,"original_w":2048,"original_h":2048,"permalink":"https:\/\/hyperledgerproject.slack.com\/files\/kostas\/F1VSLK996\/slack_for_ios_upload.jpg","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F1VSLK996-87b6ab885f","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0XQ35CDD","upload":true,"display_as_bot":false,"username":"<@U0XQ35CDD|kostas>","bot_id":null,"ts":"1469674825.000616"},{"type":"message","user":"U0XQ35CDD","text":"<@U0XV1HDL3>: (^^ as requested)","ts":"1469674879.000617"},{"user":"U0ZJZBJLF","text":"<@U0ZJZBJLF|yacovm> has joined the channel","type":"message","subtype":"channel_join","ts":"1469701469.000618"},{"type":"message","user":"U0XV1HDL3","text":":slightly_smiling_face:","ts":"1469767403.000619"},{"user":"U1K869J4W","text":"<@U1K869J4W|mihaig> has joined the channel","type":"message","subtype":"channel_join","ts":"1469789676.000620"},{"user":"U1KDAMDJ7","text":"<@U1KDAMDJ7|sanchezl> has joined the channel","type":"message","subtype":"channel_join","ts":"1469802303.000621"},{"type":"message","user":"U12AHQ3NK","text":"How is XFT different from PBFT??","ts":"1470238421.000622"},{"type":"message","user":"U0XPR4NP4","text":"<@U12AHQ3NK>: I am not an XFT expert, but my understanding is that XFT makes different assumptions about the behavior of the network, in particular that byzantine nodes and byzantine network behavior do not happen at the same time. <@U0Y14MWA2> or <@U0XV1HDL3> might have a better answer","ts":"1470240823.000623"},{"type":"message","user":"U0XQ35CDD","text":"Section 3 in the XFT paper should get you covered. It's short and easy to parse: <http:\/\/arxiv.org\/pdf\/1502.05831v2.pdf>","ts":"1470241031.000624"},{"user":"U1NBM7NHH","text":"<@U1NBM7NHH|louisw> has joined the channel","type":"message","subtype":"channel_join","ts":"1470243301.000625"},{"type":"message","user":"U0Y14MWA2","text":"As <@U0XQ35CDD> mentioned Section 3 of the paper is a good start","ts":"1470256917.000626"},{"type":"message","user":"U0Y14MWA2","text":"there is a neat similarity between XFT and PBFT in that they are both OSDI papers :wink:","ts":"1470256957.000627"},{"type":"message","user":"U12AHQ3NK","text":"<@U0XPR4NP4>:  thanks... ","ts":"1470278450.000628"},{"type":"message","user":"U12AHQ3NK","text":" the current PBFT is not not tolerating crash faults??","ts":"1470278684.000629"},{"type":"message","user":"U0XPR4NP4","text":"<@U12AHQ3NK>:  The current PBFT implementation should be crash fault tolerant, do you have a scenario which is failing?","ts":"1470278832.000630"},{"type":"message","user":"U12AHQ3NK","text":"ohh.. I didn't noticed yet any. I am just trying to know how XFT will benefit and what impacts will it have on the network as compared to current PBFT","ts":"1470279366.000631"},{"type":"message","user":"U12AHQ3NK","text":"<@U0XPR4NP4>:  could you please explain me the system anarchy..","ts":"1470280874.000632"},{"type":"message","user":"U1751P7U4","text":"Hi ! I had a doubt on new consensus architecture. If i have network with 2 submitting peers and 2 endorsing peers. if SP1 deploys the chaincode with EP1 and EP2 in the ccEndorserSet then after the consensus service, the proposal says that the  consenters will commit to the peers. So my question is to which peers will they send commit ?","ts":"1470281993.000633"},{"type":"message","user":"U0XR6J961","text":"shubhamvrkr: all nodes that maintain a ledger will receive the block and commit","ts":"1470303321.000634"},{"type":"message","user":"U1751P7U4","text":"ohh okay","ts":"1470304403.000635"},{"type":"message","user":"U1751P7U4","text":"thanks:)","ts":"1470304408.000636"},{"type":"message","user":"U0XR6J961","text":"shubhamvrkr: what problem did you have in mind?","ts":"1470305479.000637"},{"type":"message","user":"U1751P7U4","text":"Actually i want only those peers who are executing the transactions to have blocks received. Rest peers should not receive  the blocks","ts":"1470306488.000638"},{"type":"message","user":"U0XR6J961","text":"why?","ts":"1470306725.000639"},{"type":"message","user":"U0XR6J961","text":"then it is no more a blockchain","ts":"1470306730.000640"},{"type":"message","user":"U0XR6J961","text":"but multiple blockchains","ts":"1470306738.000641"},{"type":"message","user":"U1751P7U4","text":"yes..something similar","ts":"1470308779.000642"},{"type":"message","user":"U0XR6J961","text":"why do you want this arrangement?","ts":"1470308838.000643"},{"type":"message","user":"U1751P7U4","text":"if a party is not interested in some transactions that does'nt involve  him then y he should have those transactions?....isnt his storage is simply getting wasted with irrelevant transaction","ts":"1470392341.000644"},{"type":"message","user":"U0XR6J961","text":"that's the whole point of blockchain","ts":"1470396955.000645"},{"type":"message","user":"U0XR6J961","text":"that everybody sees the same data","ts":"1470396963.000646"},{"type":"message","user":"U0XR6J961","text":"should we work on a variation of our pbft, without watermarks, and simplified operation?","ts":"1470403601.000647"},{"type":"message","user":"U0XPR4NP4","text":"I think ultimately it would be valuable, though this goes back to my belief that we should commit to supporting transports without ordering (and then use one), or commit to using ordering, and simplify the code.","ts":"1470405818.000648"},{"type":"message","user":"U0XPR4NP4","text":"The assumptions are sufficiently different, I'm not convinced they can be easily maintained in parallel (maybe you disagree?)","ts":"1470405859.000649"},{"type":"message","user":"U0N0GDVJ5","text":"hi everyone. is there some kind of documentation for the new endorser committer model for consensus?","ts":"1470434704.000650"},{"type":"message","user":"U0UGH3X7X","text":"<@U0N0GDVJ5> current documentation is what's on the wiki page describing the new architecture","ts":"1470437028.000651"},{"type":"message","user":"U0N0GDVJ5","text":"<@U0UGH3X7X>. thanks. got it.","ts":"1470439342.000652"},{"user":"U1MJ9SRF0","text":"<@U1MJ9SRF0|alexho> has joined the channel","type":"message","subtype":"channel_join","ts":"1470584985.000653"},{"type":"message","user":"U0XR6J961","text":"<@U0XPR4NP4>: i realized that we're building an outside \"byzantine\" consensus if we're doing the commiter-signature gossip thing","ts":"1470644289.000654"},{"type":"message","user":"U1751P7U4","text":"i am using PBFT with N=4 and f=1. What will happen if one node is Byzantine and the other node is crashed. will the system still remain stable ?","ts":"1470647687.000655"},{"type":"message","user":"U0XR6J961","text":"it will stop processing transactions","ts":"1470647722.000656"},{"type":"message","user":"U0XR6J961","text":"once the crashed node comes back up, it will continue","ts":"1470647735.000657"},{"type":"message","user":"U1751P7U4","text":"i was going through the XFT paper and it said that it can handle both non crash and crash faults but with limited resources.i.e. n=2f+1. How is XFT acheiving this?","ts":"1470647838.000658"},{"type":"message","user":"U0XR6J961","text":"i believe it works by assuming that network faults and byzantine nodes do not happen at the same time","ts":"1470647886.000659"},{"type":"message","user":"U1751P7U4","text":"oh and what about the PBFT?  then why pbft requires 3f+1 nodes?","ts":"1470647998.000660"},{"type":"message","user":"U0XR6J961","text":"because that's what you need in the face of concurrent network outage and byzantine nodes","edited":{"user":"U0XR6J961","ts":"1470648278.000000"},"ts":"1470648253.000661"},{"type":"message","user":"U0XR6J961","text":"do you have any specific questions about pbft?","ts":"1470648293.000663"},{"type":"message","user":"U1751P7U4","text":"so in pbft when crash and non crash fault happens at a same time (in case f =1 and n=4 ),then the system will be consistent (i.e state of remaining correct 2 nodes is guranteed to be same )but the system will only have to wait till the crashed node comes up to continue with the consesus ?","ts":"1470648693.000664"},{"type":"message","user":"U1751P7U4","text":"and in case of XFT the cosistency might not be guranteed (in case f=1 and n = 3)?","ts":"1470648739.000665"},{"type":"message","user":"U1751P7U4","text":"correct me if m wrong","ts":"1470648749.000666"},{"type":"message","user":"U0XR6J961","text":"yes for pbft","ts":"1470649231.000667"},{"type":"message","user":"U0XR6J961","text":"i can't answer for XFT","ts":"1470649237.000668"},{"type":"message","user":"U1751P7U4","text":"ohh okay","ts":"1470649261.000669"},{"type":"message","user":"U1751P7U4","text":"on what basis is that independent events assumptions made? Any proof on this?","ts":"1470649471.000670"},{"type":"message","user":"U0XR6J961","text":"it's assumptions","ts":"1470649557.000671"},{"type":"message","user":"U0XR6J961","text":"did you read the XFT paper?","ts":"1470649566.000672"},{"type":"message","user":"U1751P7U4","text":"yes i read... it says that the faults occurs independently which is very reasonable in practice.. so if in the system using XFT , if both occurs at the same time then the whole  system will crash right?","ts":"1470649724.000673"},{"type":"message","user":"U0XR6J961","text":"<@U0Y14MWA2>: ^^","ts":"1470650046.000674"},{"type":"message","user":"U0Y14MWA2","text":"<@U1751P7U4>: in XFT, if the count of Byzantine replicas is &gt;0 then one counts BOTH Byzantine and CORRECT but partitioned replicas towards the threshold t","ts":"1470650209.000675"},{"type":"message","user":"U0Y14MWA2","text":"in this case, below the threshold t (inclusive) - both availability and consistency are preserved","ts":"1470650240.000676"},{"type":"message","user":"U0Y14MWA2","text":"if the count goes above t there are no guarantees","ts":"1470650251.000677"},{"type":"message","user":"U0Y14MWA2","text":"additionally, if you DO NOT have Byzantine replicas then you get the same guarantees as Paxos\/Raft\/ZAB","ts":"1470650272.000678"},{"type":"message","user":"U0Y14MWA2","text":"hope this helps","ts":"1470650279.000679"},{"type":"message","user":"U1751P7U4","text":"ohh okay","ts":"1470650292.000680"},{"type":"message","user":"U1751P7U4","text":"got it","ts":"1470650301.000681"},{"type":"message","user":"U1751P7U4","text":"<@U0Y14MWA2>:@simon:thanks","ts":"1470650334.000682"},{"type":"message","user":"U0PB67X4K","text":"<@U0XR6J961> - where's the latest prototype code for the new architecture?  still in your fabric fork?","ts":"1470650956.000685"},{"type":"message","user":"U0XR6J961","text":"hi gari!","ts":"1470651061.000686"},{"type":"message","user":"U0XR6J961","text":"yes, there is a hacked version that implements the new flow","ts":"1470651077.000687"},{"type":"message","user":"U0XR6J961","text":"transaction -&gt; rest -&gt; devops -&gt; peer -&gt; chaincode simulation &amp; collect changeset; changeset -&gt; engine -&gt; atomic broadcast network -&gt; engine -&gt; ledger applies changeset","ts":"1470651173.000688"},{"type":"message","user":"U0PB67X4K","text":"cool - which branch should I look at?  I saw 2 with similar names","ts":"1470651264.000689"},{"type":"message","user":"U0XR6J961","text":"separate-consensus","ts":"1470651419.000690"},{"type":"message","user":"U0XR6J961","text":"maybe just browse the commits","ts":"1470651431.000691"},{"type":"message","user":"U0PB67X4K","text":"cool - I was actually looking at the right stuff then.  just wanted to make sure","ts":"1470651669.000692"},{"type":"message","user":"U0XR6J961","text":"right","ts":"1470651681.000693"},{"type":"message","user":"U0XR6J961","text":"what's not implemented is endorser flow","ts":"1470651695.000694"},{"type":"message","user":"U0XR6J961","text":"nor signature\/changeset validation","ts":"1470651705.000695"},{"type":"message","user":"U12AHQ3NK","text":"<@U0Y14MWA2>:  are the passive replicas in XFT part of the synchronous group?","ts":"1470652231.000696"},{"type":"message","user":"U1751P7U4","text":"<@U0Y14MWA2>:  why is prepare phase required in common-case when t&gt;=2.?","ts":"1470653444.000697"},{"type":"message","user":"U0Y14MWA2","text":"<@U12AHQ3NK>: no <@U1751P7U4> the answer would be very long :slightly_smiling_face:","ts":"1470653564.000698"},{"type":"message","user":"U0Y14MWA2","text":"let's just say it is necessary always, but optimizations are possible for t=1","ts":"1470653640.000699"},{"type":"message","user":"U1751P7U4","text":"ohh okay","ts":"1470653647.000700"},{"type":"message","user":"U1751P7U4","text":"is it because of some blocking of resources issue ?like in 2 phase commit protocol?","ts":"1470653734.000701"},{"type":"message","user":"U0Y14MWA2","text":"it is essentially because, when t=1, the first message from the primary acts as a PREPARE msg as well, so no need to send that one in the 2nd phase","ts":"1470653878.000702"},{"type":"message","user":"U1751P7U4","text":"oh okay","ts":"1470653902.000703"},{"type":"message","user":"U1751P7U4","text":"and when t=1 the primary sends his and followers reply to  reply to client  or just the followers reply?","ts":"1470654135.000704"},{"type":"message","user":"U1751P7U4","text":"i.e. m1 to c accoding to the paper","ts":"1470654161.000705"},{"type":"message","user":"U0Y14MWA2","text":"yes (the primary sends his and followers reply to  reply to client )","ts":"1470654381.000706"},{"type":"message","user":"U0XR6J961","text":"t=1 is boring","ts":"1470654402.000707"},{"type":"message","user":"U0Y14MWA2","text":"it is - but it shows drastic difference wrt. PBFT t=1","ts":"1470654438.000708"},{"type":"message","user":"U0Y14MWA2","text":"the fact it is boring is beautiful :slightly_smiling_face:","edited":{"user":"U0Y14MWA2","ts":"1470654458.000000"},"ts":"1470654449.000709"},{"type":"message","user":"U1751P7U4","text":":smile: that is true <@U0Y14MWA2>","ts":"1470654473.000711"},{"type":"message","user":"U0XR6J961","text":"i mean, there is an optimization for t=1, but you also only have very few nodes","ts":"1470654504.000712"},{"type":"message","user":"U0Y14MWA2","text":"for more nodes - what needs to be improved in that protocol is rotation across synchronous groups","ts":"1470654549.000713"},{"type":"message","user":"U0Y14MWA2","text":"combinatorial rotation is ok for t=1 and t=2 but for large values of n and t won't do it","ts":"1470654582.000714"},{"type":"message","user":"U0Y14MWA2","text":"the protocol was invented 4 years ago w\/o blockchain in mind at that moment","ts":"1470654654.000715"},{"type":"message","user":"U0Y14MWA2","text":"when one had to convince people of the very need of Byz fault tolerant protocols - let alone the need for those that scale well","ts":"1470654757.000716"},{"type":"message","user":"U1751P7U4","text":"<@U0Y14MWA2>:  how will the view change take place when primary turn byzantine when t=1?","ts":"1470659533.000717"},{"type":"message","user":"U0Y14MWA2","text":"<@U1751P7U4>: let's please not abuse this channel too much - I suggest you carefully read the whole paper (<http:\/\/arxiv.org\/pdf\/1502.05831v2.pdf>) esp Sec 4.2 and contact me on private or email in case of particular questions","ts":"1470659641.000718"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> To your comment much earlier:\n&gt; i  realized that we're building an outside \"byzantine\" consensus if we're doing the commiter-signature gossip thing\nI completely agree.  We are leveraging atomic broadcast to build this external byzantine tolerant consensus.  We may choose to re-use the signatures from PBFT nodes if we wish to perform no validation, but ultimately, consensus occurs at the peer, while atomic broadcast ordering (which requires its own internal consensus) is a separate piece.","ts":"1470664763.000719"},{"type":"message","user":"U0XR6J961","text":"right, it will only be byzantine tolerant if we know N and configure the required signatures to be appropriate","ts":"1470664826.000720"},{"type":"message","user":"U0XPR4NP4","text":"Correct","ts":"1470664833.000721"},{"type":"message","user":"U0XR6J961","text":"right","ts":"1470664851.000722"},{"type":"message","user":"U0YMACQSW","text":"<@U0XPR4NP4>: <@U0XR6J961> To your discussion about: \"commiter-signature gossip thing\". can you please give more details? we had some discussions last week with Marko <@U0Y14MWA2> at Haifa about signatures from consenters to commiters","ts":"1470666323.000723"},{"type":"message","user":"U0XR6J961","text":"i don't quite know, i guess one design idea is to have committers sign blocks and exchange signatures","ts":"1470666416.000724"},{"type":"message","user":"U0YMACQSW","text":"We were more focused on propagation from consenters to commmiters and how to sign this messages","ts":"1470666493.000725"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1470666558.000726"},{"type":"message","user":"U0XPR4NP4","text":"<@U0YMACQSW> Yes, I believe the idea was to have a 'block validation system chaincode', which would define a policy for bringing a block into the chain.  Something like \"It has k signatures from the following n public keys\"","ts":"1470666718.000727"},{"type":"message","user":"U0XPR4NP4","text":"The nice\/elegant thing about defining block acceptance through such mechanism, is that you can update it simply by adding a new block with a new policy, so if you want to bring other public keys in, or blacklist others, it's relatively simple.  Similarly, the validation policy is tied to the chain, so that as the policy changes, it's possible to verify that older blocks still matched whatever the policy was at their time of inclusion.","ts":"1470667221.000728"},{"type":"message","user":"U0N0GDVJ5","text":"<@U0XR6J961> I am trying to look at the code for the new flow. i see that you have mentioned its under the name separate-consensus. where is this exactly?","ts":"1470676634.000729"},{"type":"message","user":"U0N0GDVJ5","text":"I should have been a little bit more clear. When I say new flow, I mean the consensus flow based on the new consensus architecture","ts":"1470676881.000730"},{"type":"message","user":"U0XQ35CDD","text":"<https:\/\/github.com\/corecode\/fabric\/tree\/separate-consensus>","attachments":[{"service_name":"GitHub","title":"corecode\/fabric","title_link":"https:\/\/github.com\/corecode\/fabric\/tree\/separate-consensus","text":"Blockchain fabric code","fallback":"GitHub: corecode\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400","from_url":"https:\/\/github.com\/corecode\/fabric\/tree\/separate-consensus","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1470676921.000731"},{"type":"message","user":"U0XQ35CDD","text":"For this: <https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1470651173000688>","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1470651173000688","fallback":"[August 8th, 2016 3:12 AM] simon: transaction -&gt; rest -&gt; devops -&gt; peer -&gt; chaincode simulation &amp; collect changeset; changeset -&gt; engine -&gt; atomic broadcast network -&gt; engine -&gt; ledger applies changeset","ts":"1470651173.000688","author_subname":"simon","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"transaction -&gt; rest -&gt; devops -&gt; peer -&gt; chaincode simulation &amp; collect changeset; changeset -&gt; engine -&gt; atomic broadcast network -&gt; engine -&gt; ledger applies changeset","author_name":"Simon Schubert","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/simon","author_icon":"https:\/\/secure.gravatar.com\/avatar\/676aeb5acbd353b77e077be1b7bd1a6e.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0016-48.png","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1470676924.000733"},{"type":"message","user":"U0N0GDVJ5","text":"<@U0XQ35CDD>.. Thank you!","ts":"1470677143.000735"},{"user":"U0MRY2LKY","text":"<@U0MRY2LKY|troyronda> has joined the channel","type":"message","subtype":"channel_join","ts":"1471000141.000736"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> <https:\/\/github.com\/jyellick\/fabric\/commit\/babe257fb6fe2f571559aa8de51e0b244da3579f>\n\nStill work pending, in particular tests, but there is a first pass implementation of 'solo' using the new offset\/history aware proto api for the orderer.  I ended up excluding the security stuff for now as it wasn't necessary for this first pass.  If you wish to give it a test drive, you can build an 'orderer' 'reader' and 'submitter' binary by simply typing `go build` in their respective directories.  The reader just dumps blocks out to stdout as they are created, and 'submitter' submits a single new transaction blob to the orderer.  It should be safe to run multiple readers and submitters, though obviously only one solo orderer.  All of the configuration is simply hard coded in go for the moment and something else can be plugged in later.","ts":"1471031869.000737","reactions":[{"name":"+1","users":["U0PB67X4K"],"count":1}]},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1471249845.000738"},{"type":"message","user":"U0XR6J961","text":"i'll have a look","ts":"1471249849.000739"},{"user":"U21ECMHL4","text":"<@U21ECMHL4|lefkok> has joined the channel","type":"message","subtype":"channel_join","ts":"1471274806.000740"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> <@U0UKTPMG8> <@U0XQ35CDD> Discuss orderer bdd here?","ts":"1471357526.000741"},{"type":"message","user":"U0UKTPMG8","text":"got it","ts":"1471357529.000742"},{"type":"message","user":"U0UKTPMG8","text":"yes","ts":"1471357532.000743"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1471358059.000744"},{"type":"message","user":"U0XR6J961","text":"when we say bdd, does it always mean behave with docker containers, etc.","ts":"1471358099.000745"},{"type":"message","user":"U0XR6J961","text":"or can it also mean writing a go test that captures the behavior?","ts":"1471358117.000746"},{"type":"message","user":"U0UKTPMG8","text":"either","ts":"1471358340.000747"},{"type":"message","user":"U0XQ35CDD","text":"<@U0XPR4NP4>: I'm here and good to go. ","ts":"1471358364.000748"},{"type":"message","user":"U0UKTPMG8","text":"I was considering porting the python BDD to ginkgo or similar","ts":"1471358371.000749"},{"type":"message","user":"U0UKTPMG8","text":"want to hangout?","ts":"1471358402.000750"},{"type":"message","user":"U0XQ35CDD","text":"<@U0UKTPMG8>: I'm a fan of <http:\/\/goconvey.co\/>","attachments":[{"title":"GoConvey - Go testing in the browser","title_link":"http:\/\/goconvey.co\/","text":"GoConvey is better testing for Go. Write behavioral tests and watch live results in your browser.","fallback":"GoConvey - Go testing in the browser","from_url":"http:\/\/goconvey.co\/","service_icon":"http:\/\/goconvey.co\/favicon.ico","service_name":"goconvey.co","id":1}],"ts":"1471358424.000751"},{"type":"message","user":"U0UKTPMG8","text":"saw it :slightly_smiling_face:","ts":"1471358429.000753"},{"type":"message","user":"U0UKTPMG8","text":"that was the 'similar'","ts":"1471358435.000754"},{"type":"message","user":"U0XQ35CDD","text":"ACK","ts":"1471358460.000755"},{"type":"message","user":"U0XPR4NP4","text":"I am hugely in favor of _not_ doing the dockerized stuff","ts":"1471358468.000756"},{"type":"message","user":"U0XPR4NP4","text":"Tests that don't run quickly are significantly less useful","ts":"1471358485.000757"},{"type":"message","user":"U0XQ35CDD","text":"I agree, I am working on a way to drop the Docker dependency for Kafka as well.","ts":"1471358517.000758"},{"type":"message","user":"U0UKTPMG8","text":"I would advise caution","ts":"1471358532.000759"},{"type":"message","user":"U0UKTPMG8","text":"can we hangout to discuss?","ts":"1471358537.000760"},{"type":"message","user":"U0UKTPMG8","text":"my concern is that these discussions are useless in time as the scroll from our history","ts":"1471358597.000761"},{"type":"message","user":"U0UKTPMG8","text":"thus making hangouts more efficient","ts":"1471358608.000762"},{"type":"message","user":"U0XPR4NP4","text":"I am fine with hangouts, not sure if that works for everyone else","ts":"1471358633.000763"},{"type":"message","user":"U0UKTPMG8","text":"or phone call, whatever is best for all","ts":"1471358646.000764"},{"type":"message","user":"U0XQ35CDD","text":"The less we use this Slack (which doesn't record messages) the better off we are. I barely take the time to write here anything any more. ","ts":"1471358651.000765"},{"type":"message","user":"U0XQ35CDD","text":"Let's do Hangouts. ","ts":"1471358658.000766"},{"type":"message","user":"U0UKTPMG8","text":"starting...","ts":"1471358663.000767"},{"text":"<@U0UKTPMG8|jeffgarratt> has started a Google+ Hangout for this channel. <https:\/\/hangouts.google.com\/hangouts\/_\/45uywkzfhbgunbyclfbvncbeyme|Join Hangout>.","username":"hangouts","bot_id":"B0UKUAJ0Y","type":"message","subtype":"bot_message","ts":"1471358672.000768"},{"type":"message","user":"U0XR6J961","text":"how does the hangouts preserve the conversation?","ts":"1471358724.000769"},{"type":"message","user":"U0XR6J961","text":"does it keep the videos?","ts":"1471358731.000770"},{"type":"message","user":"U0XPR4NP4","text":"I think the argument is that slack is as ephemeral as hangouts, so why not use hangouts as it's faster","ts":"1471364034.000771"},{"type":"message","user":"U0UKTPMG8","text":"exactly","ts":"1471364039.000772"},{"type":"message","subtype":"file_share","text":"<@U0UKTPMG8|jeffgarratt> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/jeffgarratt\/F21T8612S\/orderer.feature|orderer.feature>","file":{"id":"F21T8612S","created":1471364495,"timestamp":1471364495,"name":"orderer.feature","title":"orderer.feature","mimetype":"text\/plain","filetype":"text","pretty_type":"Plain Text","user":"U0UKTPMG8","editable":true,"size":3970,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F21T8612S\/orderer.feature?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F21T8612S\/download\/orderer.feature?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/jeffgarratt\/F21T8612S\/orderer.feature","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F21T8612S-07a373cec3","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/jeffgarratt\/F21T8612S\/orderer.feature\/edit","preview":"#\r\n# Test Orderer\r\n#\r\n# Tags that can be used and will affect test internals:\r\n#  @doNotDecompose will NOT decompose the named compose_yaml after scenario ends.  Useful for setting up environment and reviewing after scenario.\r","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>#<\/pre><\/div>\n<div><pre># Test Orderer<\/pre><\/div>\n<div><pre>#<\/pre><\/div>\n<div><pre># Tags that can be used and will affect test internals:<\/pre><\/div>\n<div><pre>#  @doNotDecompose will NOT decompose the named compose_yaml after scenario ends.  Useful for setting up environment and reviewing after scenario.<\/pre><\/div>\n<div><pre><\/pre><\/div>\n<\/div>\n<\/div>\n","lines":80,"lines_more":75,"preview_is_truncated":true,"channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0UKTPMG8","upload":true,"display_as_bot":false,"username":"<@U0UKTPMG8|jeffgarratt>","bot_id":null,"ts":"1471364495.000773"},{"type":"message","user":"U0UKTPMG8","text":"<@U0XR6J961>: <@U0XQ35CDD> <@U0XPR4NP4> <@U0UGH3X7X> <@U0KN2SSKE> ^^^ orderer.feature above","ts":"1471364522.000774","reactions":[{"name":"+1","users":["U0XPR4NP4","U0XQ35CDD"],"count":2}]},{"type":"message","user":"U0XPR4NP4","text":"<https:\/\/jira.hyperledger.org\/browse\/FAB-43>\n\nPosted the proto and the above BDD to this issue","ts":"1471366966.000775"},{"type":"message","user":"U0XPR4NP4","text":"Don't really know how to work Jira yet.... so, not sure if you guys get notified because of being tagged or not","ts":"1471366984.000776"},{"type":"message","user":"U0UGH3X7X","text":"i got the notification","ts":"1471367010.000777"},{"type":"message","user":"U0XPR4NP4","text":"Oh okay, do you know how to reference other issues in a comment? On github it was as easy as \"Issue #&lt;xxxx&gt;\" but I'm not seeing anything obviously similar","ts":"1471367096.000778"},{"type":"message","user":"U0UGH3X7X","text":"i haven't tried that","ts":"1471367178.000779"},{"type":"message","user":"U0PB67X4K","text":"just use #&lt;xxxx&gt;","ts":"1471367269.000780"},{"type":"message","user":"U0XPR4NP4","text":"Interesting, finally figured out where I can preview and I see the highlighting, I guess it does not show up in the editor.  With #&lt;xxxx&gt; I get the '#' in front, it seems to link correctly just to '&lt;xxxx&gt;'","ts":"1471367393.000781"},{"type":"message","user":"U0XPR4NP4","text":"I guess my confusion came from expecting a list of potential choices to autocomplete like github","ts":"1471367427.000782"},{"user":"U0YJUECE8","text":"<@U0YJUECE8|silliman> has joined the channel","type":"message","subtype":"channel_join","ts":"1471370857.000783"},{"user":"U1NQXK3JT","text":"<@U1NQXK3JT|somashekar> has joined the channel","type":"message","subtype":"channel_join","ts":"1471412303.000784"},{"type":"message","user":"U0XR6J961","text":"you can just say FAB-123","ts":"1471427127.000785"},{"type":"message","user":"U0XR6J961","text":"and it will link","ts":"1471427132.000786"},{"type":"message","user":"U0XPR4NP4","text":"<@U0UKTPMG8>: <@U0XR6J961> <@U0XQ35CDD> Just uploaded a new ab.proto with some name changes, see <https:\/\/jira.hyperledger.org\/browse\/FAB-43> for details, would appreciate feedback","ts":"1471441957.000787"},{"type":"message","user":"U0UKTPMG8","text":"k, will look shortly","ts":"1471441970.000788"},{"type":"message","user":"U0UKTPMG8","text":"and regen","ts":"1471441974.000789"},{"type":"message","user":"U0XPR4NP4","text":"You'll also notice per discussion with Kostas yesterday the semantics of the old 'update' now 'deliver_update' has changed to be the protobuf 'oneof' which is likely the more disruptive change, the others should be search and replace","ts":"1471442036.000790"},{"type":"message","user":"U0XQ35CDD","text":"Just had a look, these are more expressive names indeed. :+1:","edited":{"user":"U0XQ35CDD","ts":"1471442150.000000"},"ts":"1471442144.000791"},{"type":"message","user":"U0XR6J961","text":"hi","ts":"1471442235.000793"},{"type":"message","user":"U0XR6J961","text":"will join the call in a sec","ts":"1471442494.000794"},{"user":"U1XL70KHB","text":"<@U1XL70KHB|gemsiva> has joined the channel","type":"message","subtype":"channel_join","ts":"1471447003.000795"},{"user":"U11HH3P7Y","text":"<@U11HH3P7Y|ramesh> has joined the channel","type":"message","subtype":"channel_join","ts":"1471467911.000796"},{"user":"U1QA06MJR","text":"<@U1QA06MJR|ittaia> has joined the channel","type":"message","subtype":"channel_join","ts":"1471529351.000797"},{"user":"U1LDFR1LJ","text":"<@U1LDFR1LJ|sri_narayanan> has joined the channel","type":"message","subtype":"channel_join","ts":"1471559777.000798"},{"type":"message","user":"U0XR6J961","text":"i'm trying to figure out the right behavior of replicas that announce different views in view change","ts":"1471607070.000799"},{"type":"message","user":"U0XR6J961","text":"how does pbft handle replicas diverging their idea of what view should be next?","ts":"1471607190.000800"},{"type":"message","user":"U0XR6J961","text":"<@U0Y14MWA2>: any suggestions?","ts":"1471607256.000801"},{"type":"message","user":"U0XR6J961","text":"is this just handled by the exponential increase in view change timeouts?","ts":"1471607273.000802"},{"type":"message","user":"U0Y14MWA2","text":"Exponential increase in timeouts is typically used","ts":"1471607416.000803"},{"type":"message","user":"U0Y14MWA2","text":"Id say this is to be used only until a successful view change","ts":"1471607438.000804"},{"type":"message","user":"U0Y14MWA2","text":"When the timeouts should be reset\n","ts":"1471607459.000805"},{"type":"message","user":"U0XR6J961","text":"is that enough to guarantee that they will all \"find\" each other again, with a view-change for the same view?","ts":"1471608865.000806"},{"type":"message","user":"U0Y14MWA2","text":"it should be if the system becomes synchronous so that initial timeout makes sense.","ts":"1471612294.000807"},{"type":"message","user":"U0Y14MWA2","text":"What you may also do is amplify view changes","ts":"1471612303.000808"},{"type":"message","user":"U0Y14MWA2","text":"e.g., whenever I hear about f+1 view change messages for view n and higher - I could send a view change message for that view","ts":"1471612338.000809"},{"type":"message","user":"U0Y14MWA2","text":"if I am not yet there","ts":"1471612350.000810"},{"type":"message","user":"U0XQ35CDD","text":"Just a note that we do this already: we send a view-change for the smallest view in that set even if our timer hasn't expired","ts":"1471612398.000811"},{"type":"message","user":"U0Y14MWA2","text":"very good","ts":"1471612415.000812"},{"type":"message","user":"U0Y14MWA2","text":"Simon you may want to keep that in the re-write","ts":"1471612423.000813"},{"type":"message","user":"U0Y14MWA2","text":"for exponential increase - view change timeout could be reset to \"normal\" on checkpoints","ts":"1471612462.000814"},{"type":"message","user":"U0Y14MWA2","text":"so replicas do this \"at the same time\"","ts":"1471612471.000815"},{"type":"message","user":"U0XR6J961","text":"breaks my brain","ts":"1471612573.000816"},{"user":"U0YK3KKCY","text":"<@U0YK3KKCY|harrijk> has joined the channel","type":"message","subtype":"channel_join","ts":"1471613354.000817"},{"user":"U1SLE9PJN","text":"<@U1SLE9PJN|mohan> has joined the channel","type":"message","subtype":"channel_join","ts":"1471615613.000818"},{"type":"message","user":"U0N1D1UAE","text":"With all of the recent shuffling of code and issues, I may have lost track of the new architecture discussion. I see that the \u201cNext Consensus Architecture Proposal\u201d on the old github Wiki has not been updated for about a month (same for the associated issue). Has this conversation been moved elsewhere?  I gather that people are working on the new architecture - where can I find the specification that is being implemented?","ts":"1471616524.000819"},{"type":"message","user":"U0XR6J961","text":"no spec anymore","ts":"1471616569.000820"},{"type":"message","user":"U0UGH3X7X","text":"<@U0KN2SSKE>: ^^^","ts":"1471616572.000821"},{"type":"message","user":"U0N1D1UAE","text":"<@U0XR6J961> - What do you mean by \u201canymore\u201d?","ts":"1471616640.000822"},{"type":"message","user":"U0KN2SSKE","text":"<@U0N1D1UAE> it is on the fabric mailing list archive, but i will start a jira entry next week to deposit the new material","ts":"1471616750.000823"},{"type":"message","user":"U0N1D1UAE","text":"<@U0KN2SSKE> - Thank you","ts":"1471616802.000824"},{"type":"message","user":"U0XR6J961","text":"<@U0XQ35CDD>: you around?","ts":"1471621471.000825"},{"type":"message","user":"U0XQ35CDD","text":"<@U0XR6J961>: Yes, was actually just messaging you on view-changes in the other Slack with some notes.","ts":"1471621499.000826"},{"user":"U21TE1Q9E","text":"<@U21TE1Q9E|obernin> has joined the channel","type":"message","subtype":"channel_join","ts":"1471626407.000827"},{"type":"message","user":"U0N0GDVJ5","text":"hi. I am seeing the following error when I try to setup fabric dev environment in Ubuntu.","ts":"1471757776.000828"},{"type":"message","user":"U0N0GDVJ5","text":"==&gt; default: Setting up openjdk-8-jdk:amd64 (8u91-b14-0ubuntu4~14.04) ...\n==&gt; default: update-alternatives: using \/usr\/lib\/jvm\/java-8-openjdk-amd64\/bin\/appletviewer to provide \/usr\/bin\/appletviewer (appletviewer) in auto mode\n==&gt; default: update-alternatives: using \/usr\/lib\/jvm\/java-8-openjdk-amd64\/bin\/jconsole to provide \/usr\/bin\/jconsole (jconsole) in auto mode\n==&gt; default: Processing triggers for libc-bin (2.19-0ubuntu6.8) ...\n==&gt; default: update-alternatives: error: no alternatives for mozilla-javaplugin.so\n==&gt; default: update-java-alternatives: plugin alternative does not exist: \/usr\/lib\/jvm\/java-8-openjdk-amd64\/jre\/lib\/amd64\/IcedTeaPlugin.so\n==&gt; default: docker rmi -f hyperledger\/fabric-baseimage\n==&gt; default: Error response from daemon: No such image: hyperledger\/fabric-baseimage:latest\n==&gt; default: make: [base-image-clean] Error 1 (ignored)\n==&gt; default: docker rmi -f hyperledger\/fabric-src\n==&gt; default: Error response from daemon: No such image: hyperledger\/fabric-src:latest\n==&gt; default: make: [src-image-clean] Error 1 (ignored)\n==&gt; default: docker rmi -f hyperledger\/fabric-ccenv\n==&gt; default: Error response from daemon: No such image: hyperledger\/fabric-ccenv:latest\n==&gt; default: make: \n==&gt; default: [ccenv-image-clean] Error 1 (ignored)\n==&gt; default: docker rmi -f hyperledger\/fabric-peer\n==&gt; default: Error response from daemon: No such image: hyperledger\/fabric-peer:latest\n==&gt; default: make: [peer-image-clean] Error 1 (ignored)\n==&gt; default: docker rmi -f hyperledger\/fabric-membersrvc\n==&gt; default: Error response from daemon: No such image: hyperledger\/fabric-membersrvc:latest\n==&gt; default: make: \n==&gt; default: [membersrvc-image-clean] Error 1 (ignored)\n==&gt; default: cd sdk\/node &amp;&amp; make clean\n==&gt; default: make[1]: Entering directory `\/opt\/gopath\/src\/github.com\/hyperledger\/fabric\/sdk\/node'\n==&gt; default: make[1]: Nothing to be done for `clean'.","ts":"1471757777.000829"},{"type":"message","user":"U0N0GDVJ5","text":"I have been using fabric dev env in Windows and I am now trying to install in Ubuntu 14.04","ts":"1471757830.000830"},{"type":"message","user":"U0N0GDVJ5","text":"has anyone seen this before?","ts":"1471757851.000831"},{"type":"message","user":"U0UGH3X7X","text":"<@U0N0GDVJ5>: can you repost in <#C0YQ1NHGD> ? ","ts":"1471783781.000834"},{"type":"message","user":"U0N0GDVJ5","text":"hi tuand. sure . thanks..","ts":"1471790235.000835"},{"user":"U23GLSTS4","text":"<@U23GLSTS4|jlamiel> has joined the channel","type":"message","subtype":"channel_join","ts":"1471854624.000836"},{"type":"message","user":"U0KM61BCP","text":"<@U0XR6J961>: pls see my response to your ? <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/583\/>","ts":"1471869103.000837"},{"type":"message","user":"U0XR6J961","text":"<@U0KM61BCP>: yea, i had opened an issue on github a long time ago.  december or so","ts":"1471870306.000838"},{"type":"message","user":"U0XR6J961","text":"about error handling","ts":"1471870310.000839"},{"type":"message","user":"U0XR6J961","text":"i don't think that non-transient errors should be returned","ts":"1471870319.000840"},{"type":"message","user":"U0XR6J961","text":"the system should log + panic","ts":"1471870323.000841"},{"type":"message","user":"U0KM61BCP","text":"ok, fair enough can you point to the GH issue?","ts":"1471870350.000842"},{"type":"message","user":"U0XR6J961","text":"sure","ts":"1471870354.000843"},{"type":"message","user":"U0KM61BCP","text":"I can address","ts":"1471870355.000844"},{"type":"message","user":"U0KM61BCP","text":"thanks","ts":"1471870356.000845"},{"type":"message","user":"U0XR6J961","text":"i mean, this is not limited to consensus","ts":"1471870372.000846"},{"type":"message","user":"U0XR6J961","text":"but everywhere","ts":"1471870373.000847"},{"type":"message","user":"U0XR6J961","text":"like the whole `ledger, err := ledger.GetLedger()` dance","ts":"1471870394.000848"},{"type":"message","user":"U0KM61BCP","text":"should I remove returned error then to align signature with others in the interface?","ts":"1471870396.000849"},{"type":"message","user":"U0XR6J961","text":"i think your change is good","ts":"1471870410.000850"},{"type":"message","user":"U0KM61BCP","text":"but you\u2019d like it to Panic, yes?","ts":"1471870427.000851"},{"type":"message","user":"U0XR6J961","text":"but there is a more fundamental issue with  permanent errors","ts":"1471870431.000852"},{"type":"message","user":"U0XR6J961","text":"well, the database should, if it can't write","ts":"1471870444.000853"},{"type":"message","user":"U0XR6J961","text":"or turn itself read only","ts":"1471870492.000854"},{"type":"message","user":"U0XR6J961","text":"<@U0KM61BCP>: <https:\/\/github.com\/hyperledger\/fabric\/issues\/752>","attachments":[{"service_name":"GitHub","title":"Error handling and panics \u00b7 Issue #752 \u00b7 hyperledger\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger\/fabric\/issues\/752","text":"This started out as an email thread but I'm creating an issue so we can discuss some of the design questions that came up.","fallback":"GitHub: Error handling and panics \u00b7 Issue #752 \u00b7 hyperledger\/fabric","thumb_url":"https:\/\/avatars1.githubusercontent.com\/u\/11295979?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/issues\/752","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1471870580.000855"},{"type":"message","user":"U0KM61BCP","text":"I\u2019ll create a Jira for this one","ts":"1471870676.000857"},{"type":"message","user":"U0XR6J961","text":"thanks","ts":"1471870797.000858"},{"type":"message","user":"U0KM61BCP","text":"<https:\/\/jira.hyperledger.org\/browse\/FAB-216>","ts":"1471875803.000859"},{"type":"message","user":"U1B5DPRLG","text":"I realize that you guys are pretty focused on 1.0, but I'm looking into an issue that I'm seeing from 0.5 on the zACI env. After so many consensus runs, I get locked out of a peer (or 2 or 3). I have finally been able to go through the logs to try to see what's going on and I'm seeing this: \n```Received duplicate connection from &lt;nil&gt;, switching to new connection```\nfollowed by numerous instances of \n```grpc: ClientConn.resetTransport failed to create client transport: connection error: desc = \"transport: dial tcp 19\n2.168.122.43:30303: getsockopt: connection refused\"; Reconnecting to \"824d0533-5f1f-4481-b079-01ffe2fa06fc_vp1-discovery.zone.blockchai\n<http:\/\/n.ibm.com:30303|n.ibm.com:30303>\"\n2016\/08\/22 22:11:52 transport: http2Client.notifyError got notified that the client transport was broken EOF.\nESC[31m22:11:52.882 [peer] handleChat -&gt; ERRO 029ESC[0m Error during Chat, stopping handler: rpc error: code = 13 desc = \"transport is \nclosing\"\nESC[31m22:11:52.882 [peer] chatWithPeer -&gt; ERRO 02aESC[0m Ending Chat with peer address <http:\/\/824d0533-5f1f-4481-b079-01ffe2fa06fc_vp2-discovery.zone.blockchain.ibm.com:30303|824d0533-5f1f-4481-b079-01ffe2fa06fc_vp2-discovery.zone.blockchain.ibm.com:30303> due to error: Error during Chat, stopping handler: rpc error: code = 13 desc = \"transport is closing\"\n```\nAny ideas?","edited":{"user":"U1B5DPRLG","ts":"1471898591.000000"},"ts":"1471898513.000860"},{"type":"message","user":"U0UGH3X7X","text":"the `duplicate connection from &lt;nil&gt;`  is more of an informational thing . I think it resolves itself pretty quickly ...  the other errors look like tcp or network issues.  What do the z admin folks say ?  Anything in the system z logs pointing to network problems ?","ts":"1471898844.000864"},{"type":"message","user":"U1B5DPRLG","text":"I'll share this additional info with them. They initially thought the problem was due to ssh, but I've eliminated the use of ssh to run on their network and am still seeing the issue. I thought I'd run it by you all just in case something jumped out at you since there are some errors in peer log file about chatting between peers.","ts":"1471899110.000865"},{"type":"message","user":"U0XR6J961","text":"lhaskins: this is jeff's area - consensus doesn't create connections","ts":"1471944498.000866"},{"type":"message","user":"U0ULK2JPP","text":"<@U1B5DPRLG>: _\"transport: dial tcp 192.168.122.43:30303: getsockopt: connection refused\u201d_ sounds like you could be running out of resources ? we need to understand the end to end scenario (creating a lot of connections ? is the client on the same box as the peer ?)","ts":"1471949871.000867"},{"type":"message","user":"U0XR6J961","text":"connection refused = port not open","ts":"1471950137.000868"},{"type":"message","user":"U0XR6J961","text":"meaning, other side isn't running any fabric peer","ts":"1471950148.000869"},{"type":"message","user":"U1B5DPRLG","text":"<@U0ULK2JPP>: I looked at that a bit as well. Nishi opened a similar bug a few weeks ago, but the open file limit is set to 64k as recommended.  While I can see that the peer VM is up and running. I'm not able to connect with it in any way nor can any of the other peers. I'm going to break it down and hone in on it... Thanks!","ts":"1471960520.000870"},{"type":"message","user":"U0XR6J961","text":"lhaskins is that possibly a VM that you send a lot of REST requests to?","ts":"1471960653.000871"},{"type":"message","user":"U1B5DPRLG","text":"yes, it is","ts":"1471960711.000872"},{"type":"message","user":"U1B5DPRLG","text":"do you have any ideas where I should focus my attention?","ts":"1471960782.000873"},{"type":"message","user":"U0ULK2JPP","text":"<@U1B5DPRLG>: the open file limit was the reason for my original question \u2026. but looks like you have addressed that","edited":{"user":"U0ULK2JPP","ts":"1471960833.000000"},"ts":"1471960819.000874"},{"type":"message","user":"U0XR6J961","text":"last time i saw that was that the process ran out of open files, because there were many lingering REST calls","ts":"1471960835.000876"},{"type":"message","user":"U0XR6J961","text":"i hacked that in my tree by 1. setting the request http to Connection: close, and 2. setting a timeout on the rest http service","ts":"1471960886.000877"},{"type":"message","user":"U1B5DPRLG","text":"I'll be sure to explicitly close the connections, but I did verify that the open file limit was increased to 64K.. Thanks for the pointer","ts":"1471960986.000878"},{"type":"message","user":"U1SLE9PJN","text":"Hi,\n      I was trying to understand consensus, and I came across this new architecture <https:\/\/github.com\/hyperledger\/fabric\/wiki\/Next-Consensus-Architecture-Proposal>    . Is this architecture already part of current fabric code?","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/wiki\/Next-Consensus-Architecture-Proposal","text":"THIS IS A READ-ONLY historic repository. Current development is at <https:\/\/gerrit.hyperledger.org\/r\/#\/admin\/projects\/fabric> . pull requests not accepted","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/wiki\/Next-Consensus-Architecture-Proposal","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1471963305.000879"},{"type":"message","user":"U0UGH3X7X","text":"<@U1SLE9PJN>:  this architecture is not implemented yet.  Look at hyperledger\/fabric\/docs\/protocol-specs.md for more info on current code","ts":"1471963497.000881"},{"type":"message","user":"U1SLE9PJN","text":"<@U0UGH3X7X> Thanks, I will check upon the protocol-specs.md.","ts":"1471966511.000882"},{"type":"message","user":"U0XR6J961","text":"i just had an epiphany","ts":"1472038698.000883"},{"type":"message","user":"U0XR6J961","text":"with only one outstanding batch, i don't think we need more than an \"implicit watermark\" of 1","ts":"1472038742.000884"},{"type":"message","user":"U0XPR4NP4","text":"I don't know that I agree","ts":"1472042215.000885"},{"type":"message","user":"U0XPR4NP4","text":"Because although you have ordering within a single stream, you don't have it across streams, it's perfectly possible that you could receive prepares for 10 seqNos from a backup before ever receiving the first pre-prepare from the primary","ts":"1472042272.000886"},{"type":"message","user":"U0XR6J961","text":"hmm","ts":"1472043051.000887"},{"type":"message","user":"U0XR6J961","text":"so you're telling me that you can only do any sort of BFT with watermarks?","ts":"1472043078.000888"},{"type":"message","user":"U0XR6J961","text":"i agree that we should buffer messages that refer to the future","ts":"1472043107.000889"},{"type":"message","user":"U0XR6J961","text":"but that's at each replica's discretion","ts":"1472043121.000890"},{"type":"message","user":"U0XPR4NP4","text":"If you are going to buffer things in a bounded way, it seems like you have no choice but to implement a sort of watermarks","ts":"1472043414.000891"},{"type":"message","user":"U0XPR4NP4","text":"And, for garbage collection purposes, unless you want to change the view change substantially (or set K=1) then they also seem useful","ts":"1472043453.000892"},{"type":"message","user":"U0XR6J961","text":"i want that a new request will only be pre-prepared when the previous request committed","ts":"1472043458.000893"},{"type":"message","user":"U0XR6J961","text":"did you have a chance to look at my new code?","ts":"1472043473.000894"},{"type":"message","user":"U0XPR4NP4","text":"I have not","ts":"1472043482.000895"},{"type":"message","user":"U0XR6J961","text":"i'm trying to make it easier to read","ts":"1472043482.000896"},{"type":"message","user":"U0XR6J961","text":"<https:\/\/github.com\/corecode\/fabric\/tree\/master\/consensus\/simplebft>","attachments":[{"service_name":"GitHub","title":"corecode\/fabric","title_link":"https:\/\/github.com\/corecode\/fabric\/tree\/master\/consensus\/simplebft","text":"Blockchain fabric code","fallback":"GitHub: corecode\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400","from_url":"https:\/\/github.com\/corecode\/fabric\/tree\/master\/consensus\/simplebft","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1472043512.000897"},{"type":"message","user":"U0XR6J961","text":"i'd appreciate feedback","ts":"1472043521.000899"},{"type":"message","user":"U0XPR4NP4","text":"Okay, not positive if I'll get a chance to review today, but will try to tomorrow","ts":"1472043561.000900"},{"type":"message","user":"U0XR6J961","text":"and one property is that there is just one request in flight at a time","ts":"1472043562.000901"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1472043568.000902"},{"type":"message","user":"U0XR6J961","text":"i'll be out from tomorrow including tuesday","ts":"1472043577.000903"},{"type":"message","user":"U0XPR4NP4","text":"Oh okay, enjoy your vacation","ts":"1472043635.000904"},{"type":"message","user":"U0XR6J961","text":"moving stuff from berlin :confused:","ts":"1472043643.000905"},{"type":"message","user":"U0XR6J961","text":"no vacation","ts":"1472043645.000906"},{"type":"message","user":"U0XPR4NP4","text":"Oh, that is noticeably less fun","ts":"1472043656.000907"},{"type":"message","user":"U0XR6J961","text":"dealing with a guy who used my bed and wants rent from me for taking up space...","ts":"1472043695.000908"},{"type":"message","user":"U0XPR4NP4","text":"Oh, that's unfortunate, good luck","ts":"1472043779.000909"},{"type":"message","user":"U0XR6J961","text":"thanks","ts":"1472043783.000910"},{"type":"message","user":"U0XR6J961","text":"so, if the primary is only allowed to pre-prepare after a request commits","ts":"1472043814.000911"},{"type":"message","user":"U0XR6J961","text":"that means that a quorum of correct replicas must have committed the previous request","ts":"1472043867.000912"},{"type":"message","user":"U0XR6J961","text":"and they won't send a prepare for the next unless the previous request committed","ts":"1472043893.000913"},{"type":"message","user":"U0XR6J961","text":"now if i'm correct but lagged asymmetrically, i might receive some sequence numbers before the commits of the previous request","ts":"1472043944.000914"},{"type":"message","user":"U0XPR4NP4","text":"Right","ts":"1472043968.000915"},{"type":"message","user":"U0XR6J961","text":"i'm trying to figure out, is it sufficient to just talk about a maximum of 2 requests in a new-view message?","ts":"1472043984.000916"},{"type":"message","user":"U0XR6J961","text":"the most recently committed request, and the most recently prepared one?","ts":"1472044008.000917"},{"type":"message","user":"U0XR6J961","text":"the terminology always confuses me","ts":"1472044087.000918"},{"type":"message","user":"U0XR6J961","text":"the most recent one that a quorum received prepare messages and sent commit messages","ts":"1472044132.000919"},{"type":"message","user":"U0XR6J961","text":"and the most recent one that a quorum received pre-prepare messages and send prepare messages","ts":"1472044152.000920"},{"type":"message","user":"U0XR6J961","text":"i wish there was a simple bft protocol without this complicated watermark business","ts":"1472044202.000921"},{"type":"message","user":"U0XPR4NP4","text":"You could set K=1","ts":"1472044371.000922"},{"type":"message","user":"U0XPR4NP4","text":"Then you would never have to talk about prepared and committed stuff","ts":"1472044405.000923"},{"type":"message","user":"U0XPR4NP4","text":"Just pick the initial checkpoint, and work from there","ts":"1472044424.000924"},{"type":"message","user":"U0XR6J961","text":"yea, that's what i thought","ts":"1472044466.000925"},{"type":"message","user":"U0XPR4NP4","text":"Maybe you would have to deal with one prepared","ts":"1472044467.000926"},{"type":"message","user":"U0XR6J961","text":"but it isn't sufficient","ts":"1472044475.000927"},{"type":"message","user":"U0XR6J961","text":"i think","ts":"1472044490.000928"},{"type":"message","user":"U0XR6J961","text":"because in pbft, there can be multiple outstanding checkpoints","ts":"1472044514.000929"},{"type":"message","user":"U0XR6J961","text":"so L=1 too?","ts":"1472044519.000930"},{"type":"message","user":"U0XPR4NP4","text":"I think you could potentially come up with a 'correct' protocol that way, but I think it's only going to exacerbate the problem of only 2f+1 correct nodes ever being in sync","ts":"1472044589.000931"},{"type":"message","user":"U0XR6J961","text":"the question is: do i implement all the watermark stuff etc","ts":"1472044607.000932"},{"type":"message","user":"U0XR6J961","text":"or is there a simpler way","ts":"1472044613.000933"},{"type":"message","user":"U0XR6J961","text":"if we require synchrony for every request","ts":"1472044634.000934"},{"type":"message","user":"U0XPR4NP4","text":"I think the complicated piece is view change, otherwise the watermarks are pretty simple?","ts":"1472044636.000935"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1472044641.000936"},{"type":"message","user":"U0XPR4NP4","text":"So, I'd be inclined to say \"Keep watermarks, but set K=1\"","ts":"1472044658.000937"},{"type":"message","user":"U0XR6J961","text":"i looked at viewchange.go","ts":"1472044662.000938"},{"type":"message","user":"U0XR6J961","text":"and boy it is complicated and confusing","ts":"1472044672.000939"},{"type":"message","user":"U0XPR4NP4","text":"So your view change should be very simple, and the watermarks for checkpoint garbage collection aren't that bad","ts":"1472044676.000940"},{"type":"message","user":"U0XPR4NP4","text":"Yes, viewchange.go is a dense piece of code","ts":"1472044694.000941"},{"type":"message","user":"U0XR6J961","text":"i wanted to hardcode K=1, but marko wants to be able to checkpoint less often","ts":"1472044751.000942"},{"type":"message","user":"U0XR6J961","text":"but i think independent of that, in pbft, there can be multiple in flight checkpoints","ts":"1472044768.000943"},{"type":"message","user":"U0XR6J961","text":"even with K=1","ts":"1472044770.000944"},{"type":"message","user":"U0XPR4NP4","text":"Definitely there can be","ts":"1472044775.000945"},{"type":"message","user":"U0XPR4NP4","text":"But, the view change gets very simple, because you only operate on sequence numbers in the impending checkpoint window, which means you only have 1 seqNo to operate on","ts":"1472044810.000946"},{"type":"message","user":"U0XR6J961","text":"so the new-view becomes complicated, because suddenly there are multiple requests being \"pre-prepared\" at once","ts":"1472044817.000947"},{"type":"message","user":"U0XR6J961","text":"no, i don't think so","ts":"1472044836.000948"},{"type":"message","user":"U0XR6J961","text":"i think you're talking about L=1?","ts":"1472044844.000949"},{"type":"message","user":"U0XPR4NP4","text":"No","ts":"1472044853.000950"},{"type":"message","user":"U0XPR4NP4","text":"The only way a checkpoint stable cert happens is if 2f+1 have committed for that sequence number","ts":"1472044884.000951"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1472044890.000952"},{"type":"message","user":"U0XPR4NP4","text":"And the only way you prepare, is if you've committed the previous seqNo","ts":"1472044910.000953"},{"type":"message","user":"U0XR6J961","text":"that makes it L=1?","ts":"1472044925.000954"},{"type":"message","user":"U0XPR4NP4","text":"Oh, I was just following the rule you'd suggested earlier","ts":"1472044962.000955"},{"type":"message","user":"U0XR6J961","text":"ok","ts":"1472044966.000956"},{"type":"message","user":"U0XR6J961","text":"go on","ts":"1472044968.000957"},{"type":"message","user":"U0XPR4NP4","text":"So, assume that a request has prepared","ts":"1472044982.000958"},{"type":"message","user":"U0XPR4NP4","text":"Then there are 2f+1 checkpoints for the previous sequence number","ts":"1472045005.000959"},{"type":"message","user":"U0XR6J961","text":"ok, so i will only send a prepare if the previous seq did not only commit, but also reach a stable checkpoint?","ts":"1472045033.000960"},{"type":"message","user":"U0XPR4NP4","text":"I'd have to work through the corner cases, but I don't think that's necessary.  On view change, everyone sends their own checkpoint store, and if there are f+1 checkpoints for a given sequence number, that's (mostly) sufficient to pick it","ts":"1472045104.000961"},{"type":"message","user":"U0XPR4NP4","text":"So my proposition is, that on view change, we would always end up picking the highest valid checkpoint which existed, which would ensure that there was only ever 1 prepared request with higher sequence number","ts":"1472045157.000962"},{"type":"message","user":"U0XR6J961","text":"ah, and the reason is that because i send a checkpoint after a request commits","ts":"1472045204.000963"},{"type":"message","user":"U0XR6J961","text":"and i also send a prepare only after a request commits","ts":"1472045224.000964"},{"type":"message","user":"U0XR6J961","text":"it implies that (short of message loss?) a checkpoint message must have been sent (and received) before the prepare?","ts":"1472045299.000965"},{"type":"message","user":"U0XR6J961","text":"unless we do something asynchronous that might send the checkpoint message any time later","ts":"1472045339.000966"},{"type":"message","user":"U0XPR4NP4","text":"Sent yes, received I don't think is necessary","ts":"1472045344.000967"},{"type":"message","user":"U0XPR4NP4","text":"Because on view change, the checkpoint store is sent","ts":"1472045364.000968"},{"type":"message","user":"U0XR6J961","text":"i'm wondering whether it is possible that there are multiple checkpoints outstanding","ts":"1472045379.000969"},{"type":"message","user":"U0XPR4NP4","text":"So, if 2f+1 have sent the checkpoint, it's in their store, and so in order to achieve 2f+1 view change messages, at least f+1 of them must include that checkpoint","ts":"1472045406.000970"},{"type":"message","user":"U0XR6J961","text":"2f+1 correct?","ts":"1472045430.000971"},{"type":"message","user":"U0XR6J961","text":"or any 2f+1","ts":"1472045434.000972"},{"type":"message","user":"U0XR6J961","text":"hmmm","ts":"1472045489.000973"},{"type":"message","user":"U0XR6J961","text":"no, i don't get it","ts":"1472045503.000974"},{"type":"message","user":"U0XR6J961","text":"or do i?","ts":"1472045547.000975"},{"type":"message","user":"U0XR6J961","text":"ah, i include the latest checkpoint (for my latest executed request) in the view-change message","ts":"1472045629.000976"},{"type":"message","user":"U0XR6J961","text":"and short of stragglers, 2f+1 must have either committed seq N or seq N+1","ts":"1472045666.000977"},{"type":"message","user":"U0XPR4NP4","text":"Now I'm second guessing the original view change protocol.  In a network of 3f+1 with K=1, say f non-byzantine nodes are slow because that happens, and have their last seqNo=4 and no prepare\/preprepare, the rest of the network of 2f+1, including f byzantine just wrote a checkpoint for seqNo=5.  Suddenly a view change starts, but those f who are at seqNo=4 send their checkpoint store and no p-set or q-set, and the f byzantine see this, so pile on and copy them, and only 1 non-behind non-byzantine node sends in a view change message with seqNo=5 and that checkpoint.","ts":"1472046239.000978"},{"type":"message","user":"U0XPR4NP4","text":"So the view change contains 2f matching attestations that the last checkpoint was at seqNo=4, and one claiming it was at seqNo=5.  I guess it's fine, the network can settle on the wrong checkpoint, because nothing will preprepare\/prepare because f+1 guys are at seqNo=5","ts":"1472046418.000979"},{"type":"message","user":"U0XPR4NP4","text":"And eventually it will view change again, and hopefully eventually get a set of f+1 correct checkpoints? Really need to go reread the view change section of the paper I suppose","ts":"1472046458.000980"},{"type":"message","user":"U0XR6J961","text":"i think that's where L comes in","ts":"1472046468.000981"},{"type":"message","user":"U0XR6J961","text":"seqno=5 does not have a stable checkpoint in the view-change messages","ts":"1472046491.000982"},{"type":"message","user":"U0XR6J961","text":"so seqno=4 it is","ts":"1472046496.000983"},{"type":"message","user":"U0XR6J961","text":"so new primary then assigns seqno=5 to that request, and everybody does the prepare\/commit cycle for 5","ts":"1472046545.000984"},{"type":"message","user":"U0XR6J961","text":"no?","ts":"1472046547.000985"},{"type":"message","user":"U0XPR4NP4","text":"But f+1 non-byzantine guys have already committed a request at seqNo=5","ts":"1472046592.000986"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1472046597.000987"},{"type":"message","user":"U0XPR4NP4","text":"So I would say the new primary assigns seqNo=5, and it cannot possibly prepare\/commit","ts":"1472046605.000988"},{"type":"message","user":"U0XR6J961","text":"the same request will be prepared","ts":"1472046605.000989"},{"type":"message","user":"U0XPR4NP4","text":"Those f+1 won't send a prepare","ts":"1472046624.000990"},{"type":"message","user":"U0XR6J961","text":"they will","ts":"1472046631.000991"},{"type":"message","user":"U0XR6J961","text":"independent of whether they already executed it or not","ts":"1472046645.000992"},{"type":"message","user":"U0XPR4NP4","text":"How do they know it's the same request they already prepared?","ts":"1472046648.000993"},{"type":"message","user":"U0XPR4NP4","text":"They've already garbage collected that, because they hit a stable checkpoint","ts":"1472046661.000994"},{"type":"message","user":"U0XR6J961","text":"hum","ts":"1472046677.000995"},{"type":"message","user":"U0XPR4NP4","text":"seqNo=5 is under their watermark","ts":"1472046694.000996"},{"type":"message","user":"U0XR6J961","text":"yes i see","ts":"1472046700.000997"},{"type":"message","user":"U0XR6J961","text":"that view change protocol always was sketchy to me","ts":"1472046714.000998"},{"type":"message","user":"U0XR6J961","text":"or i just don't get it","ts":"1472046720.000999"},{"type":"message","user":"U0XPR4NP4","text":"I strongly suspect this is handled, but it's so complicated I have to reread and re convince myself every so often, and I guess it's that time","ts":"1472046782.001000"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1472046814.001001"},{"type":"message","user":"U0XR6J961","text":"and that makes it essentially impossible to implement without errors","ts":"1472046834.001002"},{"type":"message","user":"U0XPR4NP4","text":"We also implemented the unbounded memory growth version, which always troubled me","ts":"1472046859.001003"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1472046867.001004"},{"type":"message","user":"U0XR6J961","text":"so let's talk about simplified","ts":"1472046877.001005"},{"type":"message","user":"U0XR6J961","text":"conceptually, the view change should be the same as all nodes crash and come back up","ts":"1472046955.001006"},{"type":"message","user":"U0XR6J961","text":"right?","ts":"1472046956.001007"},{"type":"message","user":"U0XPR4NP4","text":"Sure","ts":"1472047014.001008"},{"type":"message","user":"U0XR6J961","text":"so if everything is sequential, we have (a) the last request we executed","ts":"1472047055.001009"},{"type":"message","user":"U0XR6J961","text":"and possibly (b) a subsequent request that we sent a commit for (because we received a quorum of prepares)","ts":"1472047099.001010"},{"type":"message","user":"U0XR6J961","text":"and then there is (c) we sent a prepare for because we received a pre-prepare","ts":"1472047134.001011"},{"type":"message","user":"U0XR6J961","text":"either there are 2f+1 for (a) and seqno=X","ts":"1472047206.001012"},{"type":"message","user":"U0XR6J961","text":"or there are 2f+1 for (a) and seqno=X and seqno=X+1","edited":{"user":"U0XR6J961","ts":"1472047241.000000"},"ts":"1472047221.001013"},{"type":"message","user":"U0XR6J961","text":"right?","ts":"1472047228.001014"},{"type":"message","user":"U0XPR4NP4","text":"So (a) is equivalent to \"we have a quorum of commits\"","ts":"1472047275.001016"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1472047293.001017"},{"type":"message","user":"U0XR6J961","text":"well no","ts":"1472047305.001018"},{"type":"message","user":"U0XR6J961","text":"even more","ts":"1472047308.001019"},{"type":"message","user":"U0XR6J961","text":"a quorum of checkpoints","ts":"1472047315.001020"},{"type":"message","user":"U0XR6J961","text":"it implies a quorum of commits, and a quorum of prepares","ts":"1472047340.001021"},{"type":"message","user":"U0XPR4NP4","text":"Ah, okay.  Moving on then:\n\n&gt; either there are 2f+1 for (a) and seqno=X\nThere are 2f+1 what's? What is  X? \n\n&gt; or there are 2f+1 for (a) and seqno=X and seqno=X+1\nAgain, 2f+1 whats? and how can seqNo=X and X+1","ts":"1472047378.001022"},{"type":"message","user":"U0XR6J961","text":"2f+1 nodes claim that they have executed seqno=X","ts":"1472047404.001023"},{"type":"message","user":"U0XR6J961","text":"some might claim they executed seqno=X+1","ts":"1472047427.001024"},{"type":"message","user":"U0XPR4NP4","text":"Well, you have to subtract f, no? Because f of your 2f+1 may be byzantine","ts":"1472047442.001025"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1472047452.001026"},{"type":"message","user":"U0XR6J961","text":"hm","ts":"1472047458.001027"},{"type":"message","user":"U0XR6J961","text":"but that's fine","ts":"1472047525.001028"},{"type":"message","user":"U0XR6J961","text":"because that still leaves at least f+1 correct replicas to have executed seqno=X","ts":"1472047542.001029"},{"type":"message","user":"U0XPR4NP4","text":"Yes","ts":"1472047584.001030"},{"type":"message","user":"U0XR6J961","text":"so some of these 2f+1 may talk about having executed X+1","ts":"1472047611.001031"},{"type":"message","user":"U0XR6J961","text":"and that can include correct replicas","ts":"1472047636.001032"},{"type":"message","user":"U0XR6J961","text":"but for that to be true, 2f+1 must talk about having sent a commit for X+1","ts":"1472047665.001033"},{"type":"message","user":"U0XR6J961","text":"right?","ts":"1472047672.001034"},{"type":"message","user":"U0XR6J961","text":"so, that's (b)","ts":"1472047685.001035"},{"type":"message","user":"U0XPR4NP4","text":"But the part that seems really tricky to me","ts":"1472047761.001036"},{"type":"message","user":"U0XPR4NP4","text":"Is that traditionally you can only wait for 2f+1 replies","ts":"1472047778.001037"},{"type":"message","user":"U0XR6J961","text":"not during new-view","ts":"1472047788.001038"},{"type":"message","user":"U0XPR4NP4","text":"So, if f are byzantine, and f are behind","ts":"1472047790.001039"},{"type":"message","user":"U0XR6J961","text":"the paper says that you may have to wait for more than n-f view-change messages","ts":"1472047802.001040"},{"type":"message","user":"U0XR6J961","text":"hm i see","ts":"1472047820.001041"},{"type":"message","user":"U0XR6J961","text":"yes, so it is f+1 that are actually sufficient?","ts":"1472047831.001042"},{"type":"message","user":"U0XR6J961","text":"and that dense fig. 4 in the pbft paper doesn't help either","ts":"1472047953.001043"},{"type":"message","user":"U0XPR4NP4","text":"I don't know that f+1 is actually sufficient, for risk of getting to a valid but old point","ts":"1472048544.001044"},{"type":"message","user":"U0XPR4NP4","text":"This is why you need 2f+1 agreement on some things, low watermarks maybe?","ts":"1472048568.001045"},{"type":"message","user":"U0XR6J961","text":"so i think first, f+1 correct replicas have to be at state X or state X+1","ts":"1472048573.001046"},{"type":"message","user":"U0XR6J961","text":"right?","ts":"1472048577.001047"},{"type":"message","user":"U0XPR4NP4","text":"I think 2f+1 need to agree that the lowest state is X, which should be able to happen","ts":"1472048605.001048"},{"type":"message","user":"U0XR6J961","text":"so we send current state and previous state in the view-change message?","ts":"1472048768.001049"},{"type":"message","user":"U0XR6J961","text":"that seems reasonable","ts":"1472048777.001050"},{"type":"message","user":"U0XR6J961","text":"and aligns well with the block chain thing","ts":"1472048788.001051"},{"type":"message","user":"U0XPR4NP4","text":"So, f+1 attesting to a state at or above what the highest state 2f+1 are aware of","ts":"1472048922.001052"},{"type":"message","user":"U0XPR4NP4","text":"I think works","ts":"1472048923.001053"},{"type":"message","user":"U0XR6J961","text":"i don't understand that sentence","ts":"1472049058.001054"},{"type":"message","user":"U0XR6J961","text":"if there are more than f at a state X, then X is the new starting point","ts":"1472049103.001055"},{"type":"message","user":"U0XPR4NP4","text":"I don't think that's valid","ts":"1472049229.001056"},{"type":"message","user":"U0XPR4NP4","text":"If there are more than f at state X, then X is a valid state, but may be old","ts":"1472049243.001057"},{"type":"message","user":"U0XPR4NP4","text":"I think first, you need 2f+1 to agree that state X is not an outdated state","ts":"1472049264.001058"},{"type":"message","user":"U0XR6J961","text":"by being in that state or in the state after it?","ts":"1472049281.001059"},{"type":"message","user":"U0XPR4NP4","text":"By being in that state or in a state before it","ts":"1472049290.001060"},{"type":"message","user":"U0XR6J961","text":"ok, same thing","ts":"1472049295.001061"},{"type":"message","user":"U0XR6J961","text":":slightly_smiling_face:","ts":"1472049296.001062"},{"type":"message","user":"U0XR6J961","text":"a state?","ts":"1472049301.001063"},{"type":"message","user":"U0XR6J961","text":"or the state before it?","ts":"1472049304.001064"},{"type":"message","user":"U0XPR4NP4","text":"So if f+1 assert that seqNo=10, with checkpoint of foo, then we need 2f+1 (including those f+1, so f additional) to assert that they are not past seqNo=10","ts":"1472049365.001065"},{"type":"message","user":"U0XPR4NP4","text":"f+1 gives you correctness, and 2f+1 gives you that there are not f+1 with a newer correct state","ts":"1472049394.001066"},{"type":"message","user":"U0XR6J961","text":"so what if some assert seqno=11","ts":"1472049461.001067"},{"type":"message","user":"U0XR6J961","text":"correct replicas","ts":"1472049466.001068"},{"type":"message","user":"U0XPR4NP4","text":"Well, if there are f+1 correct replicas asserting seqno=11, then we will not get 2f+1 asserting that 10 is a current state, so, we will not produce a valid view starting from 10","ts":"1472049549.001069"},{"type":"message","user":"U0XPR4NP4","text":"Instead, the view change messages will continue to collect until those f+1 correct replicas vouch for seqNo=11, and that will be chosen as the starting point","ts":"1472049571.001070"},{"type":"message","user":"U0XR6J961","text":"what if &lt;f+1 replicas are qt seqno=11?","ts":"1472049609.001071"},{"type":"message","user":"U0XR6J961","text":"correct ones","ts":"1472049622.001072"},{"type":"message","user":"U0XPR4NP4","text":"That's not possible?","ts":"1472049653.001073"},{"type":"message","user":"U0XR6J961","text":"why?","ts":"1472049678.001074"},{"type":"message","user":"U0XR6J961","text":"couldn't it that seqno=11 prepared, but then some network outage prevented commits from reaching everybody?","ts":"1472049738.001075"},{"type":"message","user":"U0XPR4NP4","text":"Oh, so yes, that is possible","ts":"1472049738.001076"},{"type":"message","user":"U0XPR4NP4","text":"Right","ts":"1472049741.001077"},{"type":"message","user":"U0XR6J961","text":"wow, the brain gymnastics","ts":"1472049749.001078"},{"type":"message","user":"U0XPR4NP4","text":"Which is why you still have to contend with the that single prepared possibility for that sequence number","ts":"1472049761.001079"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1472049783.001080"},{"type":"message","user":"U0XPR4NP4","text":"However, in that case, since it did not commit everywhere, you would have f+1 asserting seqNo=10, and only f asserting that 11 was the current state, so you could successfully view change to seqNo=10, but, in order for anyone to have committed, it must have prepared at at least f+1 correct replicas, so it should be included in the view change.  This gets back to my original question though, of if f are byzantine and lie about that prepare, and f are not included in the view change message, that only leaves one person attesting to the prepare, which I didn't think was enough to include it","ts":"1472049936.001081"},{"type":"message","user":"U0XPR4NP4","text":"But, I suppose since f+1 valid replicas did prepare it, that nothing else should prepare for that sequence number","ts":"1472049983.001082"},{"type":"message","user":"U0XR6J961","text":"why f+1 valid?","ts":"1472050025.001083"},{"type":"message","user":"U0XR6J961","text":"ah yes","ts":"1472050032.001084"},{"type":"message","user":"U0XR6J961","text":"but if f assert that 11 was current state, that doesn't say anything","ts":"1472050052.001085"},{"type":"message","user":"U0XR6J961","text":"but &gt;=f+1 assert that 11 prepared (i.e. they sent commit messages)","ts":"1472050090.001086"},{"type":"message","user":"U0XR6J961","text":"actually 2f+1","ts":"1472050106.001087"},{"type":"message","user":"U0XR6J961","text":"well, f+1 is sufficient","ts":"1472050126.001088"},{"type":"message","user":"U0XR6J961","text":"to pre-prepare 11 again","ts":"1472050142.001089"},{"type":"message","user":"U0XR6J961","text":"my feeling is that a replica that restarts should do the same","ts":"1472050410.001090"},{"type":"message","user":"U0XR6J961","text":"and send a view-change","ts":"1472050413.001091"},{"type":"message","user":"U0XR6J961","text":"or very similar","ts":"1472050423.001092"},{"type":"message","user":"U0XR6J961","text":"to do state transfer","ts":"1472050438.001093"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I think restarting should basically initiate a view change","ts":"1472050496.001094"},{"type":"message","user":"U0XR6J961","text":"or a state transfer","ts":"1472050689.001095"},{"type":"message","user":"U0XPR4NP4","text":"Well, by view-change I mean to have the network sync with the new replica on a starting point","ts":"1472050815.001096"},{"type":"message","user":"U0XPR4NP4","text":"In an ideal world, the view change would not even need to change leaders","ts":"1472050839.001097"},{"type":"message","user":"U0XPR4NP4","text":"Just have everyone on the network compute and send a view change message to the new replica, and it should be able to compute a starting point","ts":"1472050868.001098"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1472050880.001099"},{"type":"message","user":"U0XPR4NP4","text":"More of a 'current-view' than a 'view-change'","ts":"1472050883.001100"},{"type":"message","user":"U0XR6J961","text":"although they might refer to different commits","ts":"1472050892.001101"},{"type":"message","user":"U0XR6J961","text":"but then there would be a commit certificate for that replica to pick up on","ts":"1472050913.001102"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I suppose the reason why view-change works, is because the network halts during it","ts":"1472050920.001103"},{"type":"message","user":"U0XR6J961","text":"okay, i'll have to let that sink in","ts":"1472051225.001104"},{"type":"message","user":"U0XR6J961","text":"would be great if you could give some comments on the code i wrote","ts":"1472051238.001105"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I'll try to get to that tomorrow, or at the very least before Tuesday","ts":"1472051267.001106"},{"type":"message","user":"U0XPR4NP4","text":"(Since I assume you'll not be doing work until your return then?)","ts":"1472051287.001107"},{"type":"message","user":"U0XR6J961","text":"yep","ts":"1472051440.001108"},{"user":"U24M29R4G","text":"<@U24M29R4G|nikileshsa> has joined the channel","type":"message","subtype":"channel_join","ts":"1472075739.001109"},{"user":"U1WUAQJVC","text":"<@U1WUAQJVC|pushpalatha> has joined the channel","type":"message","subtype":"channel_join","ts":"1472108389.001110"},{"type":"message","subtype":"file_comment","text":"<@U1CLP9CQ4|poly> commented on <@U0KN2SSKE|binhn>\u2019s file <https:\/\/hyperledgerproject.slack.com\/files\/binhn\/F1VDNHG4E\/fabricnext-community.pptx|FabricNext-Community.pptx>: Hi binhn, how is this going, is there any newer plan? I'm concerned more on membership HA and 3rd party integration. Thanks!","file":{"id":"F1VDNHG4E","created":1469579537,"timestamp":1469579537,"name":"FabricNext-Community.pptx","title":"FabricNext-Community.pptx","mimetype":"application\/vnd.openxmlformats-officedocument.presentationml.presentation","filetype":"pptx","pretty_type":"PowerPoint Presentation","user":"U0KN2SSKE","editable":false,"size":94235,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1VDNHG4E\/fabricnext-community.pptx?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F1VDNHG4E\/download\/fabricnext-community.pptx?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/binhn\/F1VDNHG4E\/fabricnext-community.pptx","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F1VDNHG4E-54e5ba4975","channels":["C0J02NU1E","C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":2,"initial_comment":{"id":"Fc1VDLV7RS","created":1469579537,"timestamp":1469579537,"user":"U0KN2SSKE","is_intro":true,"comment":"Deck I discussed with community today","channel":""},"num_stars":2,"pinned_to":["D1KKNBZ5W"]},"comment":{"id":"Fc25R01SJ2","created":1472443449,"timestamp":1472443449,"user":"U1CLP9CQ4","is_intro":false,"comment":"Hi binhn, how is this going, is there any newer plan? I'm concerned more on membership HA and 3rd party integration. Thanks!","channel":""},"is_intro":false,"ts":"1472443450.000003"},{"user":"U1P1ZV6RF","text":"<@U1P1ZV6RF|matanyahu> has joined the channel","type":"message","subtype":"channel_join","ts":"1472500306.000005"},{"type":"message","user":"U1P1ZV6RF","text":"Hi - I was curious what recommended deployment topology would you implement for a scenario of a federated blockchain where two parties are in equal terms with each other. Would you deploy 2 * 4 validating peers and two certificate authorities on two physical sites?","ts":"1472500384.000006"},{"type":"message","user":"U1SLE9PJN","text":"Hi,\n   I am currently trying to understand how consensus works underneath. I created 4 node peer and a memersrvc and set the consensus to pbft in batch mode.  I deployed the chaincodeexample002, ran few queries, verified that after every transaction a new block being created. I also stopped two peers and found that even the when transaction is done, new blocks are not being added. Once there are 3 peers those pending transaction will be written to the ledger.\n\n\n I want to understand more on the low level details of consensus on how these transaction blocks are appended\/created. How the message exchange between the peer node happens? How the group of transactions(blocks) are exchanged and arrive at consensus? Is there a way for me to know about it or enable logs or to pause in between to view the transaction or blocks or messages?","ts":"1472500479.000009"},{"type":"message","user":"U1P1ZV6RF","text":"Otherwise, I still do not get how to avoid a SPOF in case of certificate authorities signing eCerts and tCerts into the blockchain, like in a scenario where a CA infrastructure is in one physical site which is suddenly disconnected from another site. That would implicitly cease that second site from being capable of creating new transactions or adding new users into the network","ts":"1472500480.000010"},{"type":"message","user":"U1P1ZV6RF","text":"<@U1SLE9PJN> : isn't it the premise of PBFT, that f=(N-1)\/3 always has to equal &lt;1 ?","ts":"1472500529.000011"},{"type":"message","user":"U1SLE9PJN","text":"<@U1P1ZV6RF>  Yes, you are right. In case of 4 node peer there should be atleast  3 online peers.  I am trying to understand low level working. Do you have any idea on how the message exchange happens and consensus are reached?","ts":"1472500667.000012"},{"type":"message","user":"U1P1ZV6RF","text":"<@U1SLE9PJN> : nothing more than what you can read on Bluemix documentation :slightly_smiling_face: <https:\/\/console.ng.bluemix.net\/docs\/services\/blockchain\/etn_pbft.html>","ts":"1472500807.000013"},{"type":"message","user":"U0UGH3X7X","text":"PBFT protocol is described in the paper by Castro and Liskov: Practical Byzantine fault tolerance and proactive recovery","ts":"1472500878.000014"},{"type":"message","user":"U1P1ZV6RF","text":"<@U0UGH3X7X> : I have it on my reading list :slightly_smiling_face:","ts":"1472500932.000015"},{"type":"message","user":"U0UGH3X7X","text":"in a nutshell,  a network of N nodes can function even if there are f  failing ( or byzantine) nodes  , where f = (N-1)\/3","ts":"1472500951.000016"},{"type":"message","user":"U0UGH3X7X","text":"so in this case N=4, f =1 ,  network still works when 1 node is out. but if 2 nodes are out, we cannot get to  consensus","ts":"1472501000.000017"},{"type":"message","user":"U1P1ZV6RF","text":"I was curious what would happen if we have a federation\/consortium network deployed in two sites, each having 4 approval peers, and suddenly a connection between the two would be cut. How does PBFT behave in split brain scenario and afterwards, when a reconciliation has to happen?","ts":"1472501038.000018"},{"type":"message","user":"U0UGH3X7X","text":"the fabric pbft implementation pretty much follows the protocol described in Castro and Liskov","ts":"1472501054.000019"},{"type":"message","user":"U0UGH3X7X","text":"I don't think you can have a split like you describe  ...  you have to think of it as a 8 peer network  ... and yes membersrvc is a single point of failure.  There's work on doing in that in an HA way","ts":"1472501220.000020"},{"type":"message","user":"U0UGH3X7X","text":"maybe <@U11MANG9G> can chime in on membersrvc","ts":"1472501279.000021"},{"type":"message","user":"U1P1ZV6RF","text":"<@U0UGH3X7X> : if i think of it as an 8 peer network then I basically get a temporary fork into two world states","ts":"1472501298.000022"},{"type":"message","user":"U0UGH3X7X","text":"you don't have consensus unless you have 2f+1 commit messages","ts":"1472501407.000023"},{"type":"message","user":"U1P1ZV6RF","text":"you mean, if there were initially 8 peers then it is assumed that in case of a lost connectivity the whole network is going to cease to function because all 8 validating peers know that there is 8 of then in the network?","ts":"1472501478.000024"},{"type":"message","user":"U0UGH3X7X","text":"pbft is a sequence of 3 messages  1 pre-prepare followed by 2f prepares followed by 2f+1 commits","ts":"1472501481.000025"},{"type":"message","user":"U0XPR4NP4","text":"<@U1P1ZV6RF> An 8 node network can tolerate at most f=2, so, in your case, in an 8 node network, split in two, each half would be experiencing f=4, so the network would halt until connectivity returned","ts":"1472501527.000026"},{"type":"message","user":"U1P1ZV6RF","text":"ok, got it","ts":"1472501540.000027"},{"type":"message","user":"U1P1ZV6RF","text":"that is why it is not possible to dynamically add new nodes","ts":"1472501549.000028"},{"type":"message","user":"U0UGH3X7X","text":"yes,  N is fixed.   we're looking at dynamic addition of nodes but we can use all the help we can get :slightly_smiling_face:","ts":"1472501551.000029"},{"type":"message","user":"U1P1ZV6RF","text":"got it","ts":"1472501558.000030"},{"type":"message","user":"U1P1ZV6RF","text":"hopefully this option will be available in GA version of fabric because this is what IBM promises to the clients :wink:","ts":"1472501648.000031"},{"type":"message","user":"U0XPR4NP4","text":"<@U1P1ZV6RF> If you look carefully at the next architecture, you'll see that we already allow dynamic addition of endorsing peers, and of validating peers.  We have plans to allow dynamic addition of PBFT ordering replicas eventually, but you might find your use case is already handled by the other options.","ts":"1472501752.000032"},{"type":"message","user":"U1P1ZV6RF","text":"I will be making a presentation abour hyperledger fabric architecture tomorrow, I would like to know of known limitation to the current release and what <@U0UGH3X7X> mentioned is really important.","ts":"1472501790.000033"},{"type":"message","user":"U1P1ZV6RF","text":"<@U0XPR4NP4> : will read it again. I looked at it couple of days ago but I think I had to concentrate too much on peer differentiation topic","ts":"1472501839.000034"},{"type":"message","user":"U0XPR4NP4","text":"<@U1P1ZV6RF> In the 0.5 release, you can think that the concepts of endorsement (execution of chaincode), ordering (pbft), and validation (removal of invalid transactions and updating of DB) were all stuck together in one package.  These three have been broken out into separate concepts. The validation and endorsement pieces scale horizontally with relative ease, as they leverage the log replication facility of the ordering.  To dynamically add ordering nodes in a BFT way is challenging.  Although we intend to handle this, we don't want to do this in a haphazard way, as there is considerable academic rigor surrounding the PBFT protocol and we want to make sure we don't lose any of its proven guarantees (such as liveliness).","ts":"1472502109.000035"},{"type":"message","user":"U1SLE9PJN","text":"<@U0XPR4NP4> So when the network has more (N-1)\/3 failing nodes, the network would halt.  What would happen to transactions that are being carried on the peers which are online. Will those be added back once the network is online?","attachments":[{"fallback":"[August 29th, 2016 1:12 PM] jyellick: <@U1P1ZV6RF> An 8 node network can tolerate at most f=2, so, in your case, in an 8 node network, split in two, each half would be experiencing f=4, so the network would halt until connectivity returned","ts":"1472501527.000026","author_subname":"jyellick","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"<@U1P1ZV6RF> An 8 node network can tolerate at most f=2, so, in your case, in an 8 node network, split in two, each half would be experiencing f=4, so the network would halt until connectivity returned","author_name":"Jason Yellick","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/jyellick","author_icon":"https:\/\/secure.gravatar.com\/avatar\/80fccad690b283483c3b5418b8b82b5b.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F272a%2Fimg%2Favatars%2Fava_0026-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1472501527000026","is_share":true,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1472502165.000036"},{"type":"message","user":"U0XPR4NP4","text":"So, in cases of extreme failure, it cannot be guaranteed that a transaction is not lost","ts":"1472502343.000037"},{"type":"message","user":"U0XPR4NP4","text":"However, assuming those nodes are online and healthy, then yes, once the network is re-established, pending transactions should process normally","ts":"1472502365.000038"},{"type":"message","user":"U0XPR4NP4","text":"(As an example of extreme failure, a transaction comes into a PBFT node, who tries to broadcast it to the network, but is experiencing a network failure, and then crashes)","ts":"1472502488.000039"},{"type":"message","user":"U0XPR4NP4","text":"And, as a nitpick, usually f=floor((N-1)\/3), but nothing prevents someone from running a network of N=10 nodes, with f=1, although this would be an unusual configuration.","edited":{"user":"U0XPR4NP4","ts":"1472502635.000000"},"ts":"1472502622.000040"},{"type":"message","user":"U0XPR4NP4","text":"[And note, I would not recommend running a network of N=10, f=1, as this would allow for the network to bifurcate in the situation you described.  Since each half of the bifurcated network has 2f+1 participating nodes, they can proceed.  When f=floor((n-1)\/3) we have that 2f+1 = 2*floor((n-1)\/3) +1 &gt; 2*((n-1)\/3-1\/2)+1 = 2\/3*n - 2\/3 - 1 + 1 =  2\/3*n - 2\/3 = 1\/2*n + 1\/6*n - 2\/3 &gt;= 1\/2 * n for n &gt;= 4.  So, by setting f=floor((n-1)\/3) your network is protected from network partitions causing forks, because a partition must have more than half the network present.]","edited":{"user":"U0XPR4NP4","ts":"1472503777.000000"},"ts":"1472503771.000042","reactions":[{"name":"+1","users":["U1SLE9PJN","U0UGH3X7X","U1P1ZV6RF"],"count":3}]},{"type":"message","user":"U0XQ35CDD","text":"Alternatively, if you _must_ insist on picking a total number N that's &gt; 3f, you need (N+f)\/2 messages rounded up before preparing or committing a request (versus 2f+1, as described in the Castro paper). This is described by <@U0XV1HDL3> in his Yet Another Visit to Paxos paper: <https:\/\/www.zurich.ibm.com\/%7Ecca\/papers\/pax.pdf>","ts":"1472513137.000044"},{"type":"message","user":"U0XQ35CDD","text":"And Chapter 5 of his book: <http:\/\/www.springer.com\/us\/book\/9783642152597>","ts":"1472513153.000045"},{"user":"U1T95QCUE","text":"<@U1T95QCUE|stylix> has joined the channel","type":"message","subtype":"channel_join","ts":"1472514920.000046"},{"type":"message","user":"U0XPR4NP4","text":"Perhaps <@U0XQ35CDD> can correct me, but I believe he meant\n&gt; a total number N that's &gt; 3f *+ 1*","ts":"1472562380.000047"},{"user":"U268EB76W","text":"<@U268EB76W|chainsaw> has joined the channel","type":"message","subtype":"channel_join","ts":"1472573726.000048"},{"type":"message","user":"U0XQ35CDD","text":"<@U0XPR4NP4>: Yes, thx for catching this.","ts":"1472585710.000049"},{"user":"U138W4A1F","text":"<@U138W4A1F|hfeeki> has joined the channel","type":"message","subtype":"channel_join","ts":"1472609688.000050"},{"type":"message","user":"U0XR6J961","text":"<@U0Y14MWA2>: what is the q set used for (if i only have one outstanding request ever)?","ts":"1472722091.000051"},{"type":"message","user":"U0XR6J961","text":"i understand that the p set records \"I sent a commit message\", and so if f+1 (or more) replicas claim to have sent a commit message, it is possible that some correct replica executed the request, therefore requiring this request to be executed at its sequence number in the new view.","ts":"1472722172.000052"},{"type":"message","user":"U0XR6J961","text":"but what function does the q set serve? something about the new primary censoring the request?","ts":"1472722226.000053"},{"type":"message","user":"U0Y14MWA2","text":"it is about Byzantine replicas lying about the P set when you do not have signatures","ts":"1472722807.000054"},{"type":"message","user":"U0Y14MWA2","text":"imagine you ahve the case when you had a committed request","ts":"1472722822.000055"},{"type":"message","user":"U0Y14MWA2","text":"but one replica reports the correct p value","ts":"1472722833.000056"},{"type":"message","user":"U0Y14MWA2","text":"and the other does not","ts":"1472722837.000057"},{"type":"message","user":"U0Y14MWA2","text":"how will you know is by the f+1 Q set appearences of the value that was actually (potentially) committed","ts":"1472722870.000058"},{"type":"message","user":"U0Y14MWA2","text":"if one had signatures then signed P set w\/o Q set would do it","ts":"1472722892.000059"},{"type":"message","user":"U0XR6J961","text":"you mean signatures on viewchange?","ts":"1472722910.000060"},{"type":"message","user":"U0XR6J961","text":"because that's what we have","ts":"1472722945.000061"},{"type":"message","user":"U0XR6J961","text":"i think a lot of confusion just lifted","ts":"1472722966.000062"},{"type":"message","user":"U0Y14MWA2","text":"no signatures on PREPARE","ts":"1472722972.000063"},{"type":"message","user":"U0Y14MWA2","text":"if you had them you would not need Q set","ts":"1472722981.000064"},{"type":"message","user":"U0Y14MWA2","text":"without them - you need them because of Byzantine replica, just making up the P set as it wishes","ts":"1472722999.000065"},{"type":"message","user":"U0Y14MWA2","text":"of course we do not test for this - so it is really an algorithmic attack","ts":"1472723013.000066"},{"type":"message","user":"U0Y14MWA2","text":"that one well-versed in PBFT could pull out","ts":"1472723032.000067"},{"type":"message","user":"U0Y14MWA2","text":"with a lot of network control","ts":"1472723040.000068"},{"type":"message","user":"U0XR6J961","text":"but only f byz replicas can make up their P set","ts":"1472723044.000069"},{"type":"message","user":"U0Y14MWA2","text":"yes but you r view change reacts on 1 P set","ts":"1472723061.000070"},{"type":"message","user":"U0Y14MWA2","text":"if 1 replica reports a P set you react on it","ts":"1472723069.000071"},{"type":"message","user":"U0Y14MWA2","text":"if 1 replica reports P1 and other P2","ts":"1472723078.000072"},{"type":"message","user":"U0Y14MWA2","text":"without Q set you would not know what to do","ts":"1472723085.000073"},{"type":"message","user":"U0XR6J961","text":"oh!","ts":"1472723088.000074"},{"type":"message","user":"U0XR6J961","text":"you mean a single byzantine replica sends two different P-sets?","ts":"1472723098.000075"},{"type":"message","user":"U0Y14MWA2","text":"no","ts":"1472723102.000076"},{"type":"message","user":"U0Y14MWA2","text":"1 sends P1","ts":"1472723106.000077"},{"type":"message","user":"U0Y14MWA2","text":"the other P2","ts":"1472723110.000078"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1472723112.000079"},{"type":"message","user":"U0Y14MWA2","text":"others do not send anythin","ts":"1472723116.000080"},{"type":"message","user":"U0Y14MWA2","text":"what do you do?","ts":"1472723118.000081"},{"type":"message","user":"U0XR6J961","text":"i wait until i have at least N-f P-sets","ts":"1472723133.000082"},{"type":"message","user":"U0Y14MWA2","text":"let's say they are all empty","ts":"1472723152.000083"},{"type":"message","user":"U0Y14MWA2","text":"all others","ts":"1472723155.000084"},{"type":"message","user":"U0Y14MWA2","text":"so you have 3 replicas","ts":"1472723163.000085"},{"type":"message","user":"U0Y14MWA2","text":"1 reports P1","ts":"1472723167.000086"},{"type":"message","user":"U0Y14MWA2","text":"2nd P2","ts":"1472723171.000087"},{"type":"message","user":"U0Y14MWA2","text":"3rd nothing","ts":"1472723174.000088"},{"type":"message","user":"U0Y14MWA2","text":"what do you do?","ts":"1472723178.000089"},{"type":"message","user":"U0Y14MWA2","text":"yiou can wait for 4th","ts":"1472723210.000090"},{"type":"message","user":"U0Y14MWA2","text":"4th reports nothing","ts":"1472723215.000091"},{"type":"message","user":"U0XR6J961","text":"i'd say this is against the assumptions","ts":"1472723244.000092"},{"type":"message","user":"U0XR6J961","text":"how can 1 report p1, 2 report p2, and 3, 4 report nothing?","ts":"1472723259.000093"},{"type":"message","user":"U0Y14MWA2","text":"it could but maybe I am not making the right example","ts":"1472723277.000094"},{"type":"message","user":"U0XR6J961","text":"hmm","ts":"1472723280.000095"},{"type":"message","user":"U0XR6J961","text":"no you're right","ts":"1472723283.000096"},{"type":"message","user":"U0XR6J961","text":"it could happen","ts":"1472723287.000097"},{"type":"message","user":"U0Y14MWA2","text":"it could happen but in this particular case you could tell that the answer was there was no request committed","ts":"1472723313.000098"},{"type":"message","user":"U0XR6J961","text":"1 is byzantine, 2 received enough prepare messages to send a commit, but 3 and 4 didn't send commits yet","ts":"1472723313.000099"},{"type":"message","user":"U0XR6J961","text":"yes right","ts":"1472723319.000100"},{"type":"message","user":"U0XR6J961","text":"only if f+1 (or more) report that they sent a commit message (P-set), the request can have been committed","ts":"1472723350.000101"},{"type":"message","user":"U0Y14MWA2","text":"let me check sth","ts":"1472723388.000102"},{"type":"message","user":"U0XR6J961","text":"ok","ts":"1472723391.000103"},{"type":"message","user":"U0Y14MWA2","text":"ok the above should be the example","ts":"1472723581.000104"},{"type":"message","user":"U0Y14MWA2","text":"but the views reported by P1 and P2 should be different","ts":"1472723590.000105"},{"type":"message","user":"U0Y14MWA2","text":"and values should be different","ts":"1472723601.000106"},{"type":"message","user":"U0Y14MWA2","text":"so P1 could have prepared (v1,view1)","ts":"1472723645.000107"},{"type":"message","user":"U0XR6J961","text":"so P1:&lt;v:2,seq:5,digest:123&gt;, P2:&lt;v:3,seq:5,digest:abc&gt;","ts":"1472723646.000108"},{"type":"message","user":"U0Y14MWA2","text":"yes","ts":"1472723658.000109"},{"type":"message","user":"U0XR6J961","text":"and we're changing to view 4?","ts":"1472723676.000110"},{"type":"message","user":"U0Y14MWA2","text":"no because P2 might have been committed","ts":"1472723700.000111"},{"type":"message","user":"U0Y14MWA2","text":"ok so it go like this","ts":"1472723705.000112"},{"type":"message","user":"U0Y14MWA2","text":"view change for view 4","ts":"1472723715.000113"},{"type":"message","user":"U0Y14MWA2","text":"VP0: nothing","ts":"1472723727.000114"},{"type":"message","user":"U0Y14MWA2","text":"VP1: P1:&lt;v:2,seq:5,digest:123&gt;,","ts":"1472723734.000115"},{"type":"message","user":"U0Y14MWA2","text":"VP2: P2:&lt;v:3,seq:5,digest:abc&gt;","ts":"1472723741.000116"},{"type":"message","user":"U0Y14MWA2","text":"notice that VP0 saying nothing","ts":"1472723774.000117"},{"type":"message","user":"U0Y14MWA2","text":"does not mean it did not send PREPARE","ts":"1472723780.000118"},{"type":"message","user":"U0Y14MWA2","text":"it might but since you do not want Q set you cannot tell here","ts":"1472723791.000119"},{"type":"message","user":"U0Y14MWA2","text":"so","ts":"1472723799.000120"},{"type":"message","user":"U0Y14MWA2","text":"you cannot wait for VP3 - might have crashed","ts":"1472723811.000121"},{"type":"message","user":"U0Y14MWA2","text":"and there is an execution like this in which there is no Byzantine VP","ts":"1472723823.000122"},{"type":"message","user":"U0Y14MWA2","text":"now you cannot just select P2 because VP2 might be lying","ts":"1472723838.000123"},{"type":"message","user":"U0Y14MWA2","text":"going for lunch :slightly_smiling_face:","ts":"1472723893.000124"},{"type":"message","user":"U0XR6J961","text":"okay :slightly_smiling_face:","ts":"1472723902.000125"},{"text":"<@U0UKTPMG8|jeffgarratt> has started a Google+ Hangout for this channel. <https:\/\/hangouts.google.com\/hangouts\/_\/r2yict7hmveczewfaqrry2bdwae|Join Hangout>.","username":"hangouts","bot_id":"B0UKUAJ0Y","type":"message","subtype":"bot_message","ts":"1472739693.000128"},{"type":"message","user":"U0XQ35CDD","text":"The way we implement P sets today, I cannot quite see how signed PREPAREs (<https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1472722972000063>) would help.","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1472722972000063","fallback":"[September 1st, 2016 2:42 AM] vukolic: no signatures on PREPARE","ts":"1472722972.000063","author_subname":"vukolic","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"no signatures on PREPARE","author_name":"Marko Vukolic","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/vukolic","author_icon":"https:\/\/secure.gravatar.com\/avatar\/a52edd136bbd07ca069b9393ac60f675.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0006-48.png","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1472739695.000129"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> Do you think you could try to get your simplebft stuff into convergence? That way I can try to hook it into the orderer interface?","ts":"1472744200.000131"},{"type":"message","user":"U0XPR4NP4","text":"Also, not sure if you've followed <https:\/\/jira.hyperledger.org\/browse\/FAB-50> , but the latest updates to Viper allow errors on spurious config options, so I think that it's a good solution to our config problems.","ts":"1472744260.000132"},{"type":"message","user":"U0XQ35CDD","text":"I reviewed the simplebft branch a couple of days ago, and it's still WIP. (Unless work has been done in the interim which hasn't been pushed.)","ts":"1472744346.000133"},{"type":"message","user":"U0XPR4NP4","text":"I think WIP is fine? Especially as we have this feature branch, I think we should be more on the 'commit early, commit often' strategy?","ts":"1472744386.000134"},{"type":"message","user":"U0XPR4NP4","text":"And, <@U0XQ35CDD> how far from pushing to Gerrit are you on Kafka?","ts":"1472744421.000135"},{"type":"message","user":"U0XQ35CDD","text":"Works for me. Was more of a heads up that it's not ready yet, in case you hadn't looked at the code.","ts":"1472744443.000136"},{"type":"message","user":"U0XPR4NP4","text":"I have looked at the code, saw a lot was unhandled, thought maybe happy path was working though","ts":"1472744471.000137"},{"type":"message","user":"U0XQ35CDD","text":"I got back today, I'll write tests during the next couple of days and then I'll push.","ts":"1472744577.000138"},{"type":"message","user":"U0XR6J961","text":"i pushed a first version of view change","ts":"1472824087.000139"},{"type":"message","user":"U0XR6J961","text":"it's always the most ugly code","ts":"1472824103.000140"},{"type":"message","user":"U0XR6J961","text":"but overall it is in a state that we can now add a lot of tests to make sure that it works","ts":"1472824482.000141"},{"type":"message","user":"U0XR6J961","text":"deterministic tests!","ts":"1472824490.000142"},{"type":"message","user":"U0XR6J961","text":"yey","ts":"1472824491.000143"},{"type":"message","user":"U0XR6J961","text":"<@U0XPR4NP4> right now i let the new primary forfeit its position if it doesn't have a request that would be proposed in the new-view","ts":"1472824554.000144"},{"type":"message","user":"U0XR6J961","text":"i figured that would be easier than doing a fetch-and-retry","ts":"1472824565.000145"},{"type":"message","user":"U0XPR4NP4","text":"Seems sensible, especially for now.  Would need to think on potential attacks via that for a byzantine node to sieze leadership at will","edited":{"user":"U0XPR4NP4","ts":"1472824670.000000"},"ts":"1472824663.000146"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1472824673.000148"},{"type":"message","user":"U0XR6J961","text":"i think i'll switch to test writing now","ts":"1472824699.000149"},{"type":"message","user":"U0XR6J961","text":"i wonder what happens if the primary sends an invalid pre-prepare","ts":"1472824741.000150"},{"type":"message","user":"U0XR6J961","text":"say the primary sent pp for 3, now sends one for 5","ts":"1472824796.000151"},{"type":"message","user":"U0XR6J961","text":"how do i tell the difference to network outage","ts":"1472824822.000152"},{"type":"message","user":"U0XR6J961","text":"i think i need some transport layer information","ts":"1472824839.000153"},{"type":"message","user":"U0XR6J961","text":"no, i don't think that would help","ts":"1472824861.000154"},{"type":"message","user":"U0XR6J961","text":"i could be disconnected, and reconnect without losing any messages","ts":"1472824872.000155"},{"type":"message","user":"U0XR6J961","text":"so how do i tell that the primary is faulty","ts":"1472824882.000156"},{"type":"message","user":"U0XR6J961","text":"i guess timeout?","ts":"1472824921.000157"},{"type":"message","user":"U0XPR4NP4","text":"On reconnect, I think you would need to do timeout","ts":"1472825071.000158"},{"type":"message","user":"U0XPR4NP4","text":"Although, I still think ultimately we should come up with a network handshake","ts":"1472825082.000159"},{"type":"message","user":"U0XR6J961","text":"i guess that primary fault would be handled by a request timeout","ts":"1472825109.000160"},{"type":"message","user":"U0XPR4NP4","text":"Yes","edited":{"user":"U0XPR4NP4","ts":"1472825136.000000"},"ts":"1472825131.000161"},{"type":"message","user":"U0XR6J961","text":"hm, right now i just have a timeout starting from preprepare","ts":"1472825344.000163"},{"type":"message","user":"U0XR6J961","text":"i guess i should remove that and instead have individual timeouts for all requests received","ts":"1472825364.000164"},{"type":"message","user":"U0XR6J961","text":"i.e. not per batch, but per request","ts":"1472825370.000165"},{"type":"message","user":"U0XR6J961","text":"again, the big question, is the view change timer reset when a correct new view message is received, or when the next request commits?","ts":"1472825479.000166"},{"type":"message","user":"U0XPR4NP4","text":"I never liked the need to commit a request after the new view.  I would say the view change timer resets when a correct new view message is received.  Then, if there are outstanding requests, the outstanding request timer starts.","ts":"1472826433.000167"},{"type":"message","user":"U0XPR4NP4","text":"Since we are exploiting ordering, I can go dig up my old work on the request queue stuff.  I think the answer is to have a per client (in our case, replica) request timer","ts":"1472826511.000168"},{"type":"message","user":"U0XR6J961","text":"ah i see","ts":"1472826572.000169"},{"type":"message","user":"U12452RAP","text":"hi, i have a question about new architecture. Currently coNsensus service delivery peers will use gossip, right?","ts":"1473082363.000002"},{"type":"message","user":"U12452RAP","text":"whatever endorse peer, submitting peer, commtting peer?","ts":"1473082505.000003"},{"type":"message","user":"U0ULK2JPP","text":"<@U12452RAP> how about we deal with the question on fabric-peer-dev that was created for the purpose of dealing with endorsement\/commitment so we can give that channel some advertisement ?","ts":"1473085174.000004"},{"type":"message","user":"U12452RAP","text":"oh","ts":"1473085403.000005"},{"type":"message","user":"U12452RAP","text":"i have not know that channel","ts":"1473085444.000006"},{"type":"message","user":"U0ULK2JPP","text":"the topic is relevant here too\u2026fabric-peer-dev was created recently for discussing new architectures non-consensus peers (endorsement\/commitment). Just wanted to give it some airtime  :slightly_smiling_face:","ts":"1473085511.000007"},{"type":"message","user":"U0XR6J961","text":"why are there so many channels?","ts":"1473085531.000008"},{"type":"message","user":"U1AU8DRQR","text":"the more the better","ts":"1473086458.000009"},{"type":"message","user":"U0ULK2JPP","text":"why indeed \u2026 I think categorizing is good in general","ts":"1473086475.000010"},{"type":"message","user":"U0ULK2JPP","text":"not sure about more the better  :slightly_smiling_face:","ts":"1473086488.000011"},{"type":"message","user":"U0XR6J961","text":"but we're like 10 developers","ts":"1473086489.000012"},{"type":"message","user":"U1AU8DRQR","text":"<@U0ULK2JPP> in general you are right but 5-8 categories would be enough :slightly_smiling_face: I always write into dev-env and CI if I have a problem, then into testing... and then fabric-dev remains :smile:","ts":"1473086583.000013"},{"type":"message","user":"U0XR6J961","text":"we just need one place where everybody is and evereything gets coordinated","ts":"1473086592.000014"},{"type":"message","user":"U0XR6J961","text":"yea good luck phasing out all of these channels","ts":"1473086608.000015"},{"user":"U0NLP5909","text":"<@U0NLP5909|hanhzf> has joined the channel","type":"message","subtype":"channel_join","ts":"1473138742.000016"},{"user":"U23JFU108","text":"<@U23JFU108|csehd> has joined the channel","type":"message","subtype":"channel_join","ts":"1473151011.000017"},{"type":"message","user":"U1AU8DRQR","text":"<@U23JFU108> has some interesting errors when bombing fabric with transactions","ts":"1473151389.000018"},{"type":"message","user":"U23JFU108","text":"Moment pls. I'm trying to reproduce the phenomenon","ts":"1473151444.000019"},{"type":"message","user":"U23JFU108","text":"Hy everyone. I have a bug, maybe related with pbft consensus.","ts":"1473154124.000020"},{"type":"message","user":"U23JFU108","text":"I have 4 validating peer with pbft consensus","ts":"1473154144.000021"},{"type":"message","user":"U0XR6J961","text":"which code version?","ts":"1473154151.000022"},{"type":"message","user":"U23JFU108","text":"aug 19","ts":"1473154159.000023"},{"type":"message","user":"U23JFU108","text":"<https:\/\/gerrit.hyperledger.org\/r\/gitweb?p=fabric.git;a=commit;h=ef8351d345e36a17c5ca10df386fb2a708823153>","ts":"1473154167.000024"},{"type":"message","user":"U23JFU108","text":"I will try it with the latest master version as well","ts":"1473154205.000025"},{"type":"message","user":"U23JFU108","text":"I have a workload generator, which stress all peer at the same time at a constant 50 invokes\/sec\/peer via REST API chaincode endpoint","edited":{"user":"U23JFU108","ts":"1473154361.000000"},"ts":"1473154295.000026"},{"type":"message","user":"U0XR6J961","text":"with or without security?","ts":"1473154356.000027"},{"type":"message","user":"U23JFU108","text":"without security","ts":"1473154366.000029"},{"type":"message","user":"U0XR6J961","text":"what's your batch size set to?","ts":"1473154375.000030"},{"type":"message","user":"U23JFU108","text":"500","ts":"1473154381.000031"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1473154383.000032"},{"type":"message","user":"U0XR6J961","text":"so what happens?","ts":"1473154387.000033"},{"type":"message","user":"U23JFU108","text":"oh. I'm using the example02 chaincode","ts":"1473154414.000034"},{"type":"message","user":"U23JFU108","text":"At the end of the measurement, The ledger has duplicate transactions","ts":"1473154446.000035"},{"type":"message","user":"U23JFU108","text":"so the ledger state shows the future","ts":"1473154454.000036"},{"type":"message","user":"U0XR6J961","text":"yea, the example02 chaincode does not protect against replays","ts":"1473154478.000037"},{"type":"message","user":"U23JFU108","text":"is it the chancode's role to protect from the duplicates?","ts":"1473154508.000038"},{"type":"message","user":"U0XR6J961","text":"that's debatable","ts":"1473154613.000039"},{"type":"message","user":"U0XR6J961","text":"something needs to protect against replays","ts":"1473154640.000040"},{"user":"U17HK4VQR","text":"<@U17HK4VQR|ikocsis> has joined the channel","type":"message","subtype":"channel_join","ts":"1473154661.000041"},{"type":"message","user":"U17HK4VQR","text":"hi all","ts":"1473154668.000042"},{"type":"message","user":"U17HK4VQR","text":"Simon, that means then that the fabric is \"allowed\" to retry requests and it is the express duty of the chaincode to recognize whether a duplicated attempt is being made?","ts":"1473154740.000043"},{"type":"message","user":"U17HK4VQR","text":"Or am I misunderstanding what you are saying?","ts":"1473154750.000044"},{"type":"message","user":"U0XR6J961","text":"i don't think this is defined anywhere","ts":"1473154764.000045"},{"type":"message","user":"U0XR6J961","text":"so it is wild west","ts":"1473154771.000046"},{"type":"message","user":"U0XR6J961","text":"if you use utxo, there are no successful replay attacks","ts":"1473154793.000047"},{"type":"message","user":"U0XR6J961","text":"if you don't - you better think about which replay attacks you want to prevent","ts":"1473154816.000048"},{"type":"message","user":"U17HK4VQR","text":"The weird thing is - I think we don't do replays; bunch of requests go in (each getting an ID and we record these), but no duplication and still we see duplicated instances of these txIDs in the ledgers","ts":"1473154944.000049"},{"type":"message","user":"U17HK4VQR","text":"So the \"replay attack\", if you like, is a courtesy of the consensus","ts":"1473154964.000050"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1473154970.000051"},{"type":"message","user":"U17HK4VQR","text":"Nice","ts":"1473154974.000052"},{"type":"message","user":"U0XR6J961","text":"but you will have to protect against it anyways","ts":"1473154989.000053"},{"type":"message","user":"U17HK4VQR","text":"Well, that is true, now that I think about it","ts":"1473155014.000054"},{"type":"message","user":"U0XR6J961","text":"let's say consensus was completely correct","ts":"1473155020.000055"},{"type":"message","user":"U0XR6J961","text":"but one of the peers was byzantine","ts":"1473155024.000056"},{"type":"message","user":"U0XR6J961","text":"it could just duplicate your request","ts":"1473155031.000057"},{"type":"message","user":"U17HK4VQR","text":"yep, right","ts":"1473155040.000058"},{"type":"message","user":"U1AU8DRQR","text":"in this case these where non-byzantine peers, and <@U23JFU108> sent in every tx just once. isn't it a bug this way?","ts":"1473155097.000059"},{"type":"message","user":"U17HK4VQR","text":"hgabor, yes, it would be still nice to know that what the heck happens in this specific case consensus-wise","ts":"1473155178.000060"},{"type":"message","user":"U0XR6J961","text":"yes, there are bugs","ts":"1473155187.000061"},{"user":"U1GLPP8QN","text":"<@U1GLPP8QN|deeflorian> has joined the channel","type":"message","subtype":"channel_join","ts":"1473155201.000062"},{"type":"message","user":"U0XR6J961","text":"the problem is that in the original pbft, the client waits until its request is processed","ts":"1473155229.000063"},{"type":"message","user":"U17HK4VQR","text":"but this means that right now we are not working against the assumptions that fabric makes wrt the chaincode","ts":"1473155230.000064"},{"type":"message","user":"U0XR6J961","text":"and then sends another one, sequentially","ts":"1473155236.000065"},{"type":"message","user":"U0XR6J961","text":"and if it takes too long, it probably re-sends its request, under the assumption that the network lost it","ts":"1473155261.000066"},{"type":"message","user":"U0XR6J961","text":"the protocol prevents this replay from being accepted by means of a sequence number per client","ts":"1473155297.000067"},{"type":"message","user":"U0XR6J961","text":"in fabric, the peers act as \"client\"","ts":"1473155309.000068"},{"type":"message","user":"U0XR6J961","text":"so then you have the choice between sending one request per peer, sequentially","ts":"1473155329.000069"},{"type":"message","user":"U0XR6J961","text":"effectively ruining performance","ts":"1473155336.000070"},{"type":"message","user":"U0XR6J961","text":"or hoping that requests will be processed sequentially (optimistically sending in multiple)","ts":"1473155372.000071"},{"type":"message","user":"U0XR6J961","text":"which leads to requests being skipped because of message reordering","ts":"1473155387.000072"},{"type":"message","user":"U0XR6J961","text":"or accepting that some requests duplicate by mistake","ts":"1473155416.000073"},{"type":"message","user":"U0XR6J961","text":"we have an idea of how to address this, by introducing virtual clients for every peer","ts":"1473155435.000074"},{"type":"message","user":"U0XR6J961","text":"but that has not been implemented, and likely won't be implemented in the current code","ts":"1473155449.000075"},{"type":"message","user":"U17HK4VQR","text":"Simon, thanks - personally I have to process this it a bit; the takeaway is that chaincode02 has to be fixed for protection against replay.","ts":"1473155652.000076"},{"type":"message","user":"U1AU8DRQR","text":"as I remember none of the examples is replay protected","ts":"1473155696.000077"},{"type":"message","user":"U1AU8DRQR","text":"they are just toys","ts":"1473155702.000078"},{"type":"message","user":"U17HK4VQR","text":"Is there any documentation that summarizes such requirements on the chaincode? (And maybe patterns for fulfilling them.)","ts":"1473155729.000079"},{"type":"message","user":"U0XR6J961","text":"no","ts":"1473155783.000080"},{"type":"message","user":"U17HK4VQR","text":"It's no problem that they are toys, but a big warning sign that \"weird things will happen if you use this\" would be nice :slightly_smiling_face:","edited":{"user":"U17HK4VQR","ts":"1473155808.000000"},"ts":"1473155793.000081"},{"type":"message","user":"U1AU8DRQR","text":"we should add one","ts":"1473155851.000083"},{"type":"message","user":"U0XR6J961","text":"haha","ts":"1473155874.000084"},{"type":"message","user":"U1AU8DRQR","text":"btw one can use GetTxByTxID or something to check if the txid is already used","edited":{"user":"U1AU8DRQR","ts":"1473155908.000000"},"ts":"1473155880.000085"},{"type":"message","user":"U0XR6J961","text":"this whole project doesn't have defined behaviour or design","ts":"1473155997.000087"},{"type":"message","user":"U1GLPP8QN","text":"still i think we can agree that it'd be weird if a request dropped in through the rest api got duplicatied","ts":"1473156089.000088"},{"type":"message","user":"U1AU8DRQR","text":"but somehow one got duplicated :slightly_smiling_face:","ts":"1473156139.000089"},{"type":"message","user":"U1GLPP8QN","text":"and mitigating the responsibility of TxID checks to the chaincodes themselves seems a bit hackish","ts":"1473156192.000090"},{"type":"message","user":"U1GLPP8QN","text":"...i'm not that up to date on the current status on the TxID generation, but there was a few mails on the list that the TxID should be generated from the hash of the payload","ts":"1473156264.000091"},{"type":"message","user":"U1AU8DRQR","text":"yes and it can be generated from it","ts":"1473156283.000092"},{"type":"message","user":"U1AU8DRQR","text":"I mean from the payload","ts":"1473156292.000093"},{"type":"message","user":"U1GLPP8QN","text":"that'd contain the TS too?","ts":"1473156293.000094"},{"type":"message","user":"U1AU8DRQR","text":"TS?","ts":"1473156311.000095"},{"type":"message","user":"U23JFU108","text":"timestamp","ts":"1473156317.000096"},{"type":"message","user":"U1GLPP8QN","text":"(timestamp on the api receiver end)","ts":"1473156320.000097"},{"type":"message","user":"U1AU8DRQR","text":"currently not","ts":"1473156331.000098"},{"type":"message","user":"U1AU8DRQR","text":"currently it does not contain that","ts":"1473156339.000099"},{"type":"message","user":"U17HK4VQR","text":"<@U0XR6J961>, we see that (<@U1GLPP8QN> spent quite a bit of quality time with the code base and our as of now in-house model is still far from complete)","edited":{"user":"U17HK4VQR","ts":"1473156385.000000"},"ts":"1473156351.000100"},{"type":"message","user":"U1GLPP8QN","text":"yepp, but if it's a feature in a work-in-progress or a to-be-done state, then the \"bug\" will resolve itself","edited":{"user":"U1GLPP8QN","ts":"1473156456.000000"},"ts":"1473156416.000102"},{"type":"message","user":"U1AU8DRQR","text":"there was a debate on the list about what we should include in that hash. and some people said we should include a timestamp and\/or a nounce. so yes, if we make that happen then it will be ok","ts":"1473156551.000104"},{"type":"message","user":"U1GLPP8QN","text":"though if i'm wrong, the _big warning sign_ is a nice temporary fix but further discussion might be needed","ts":"1473156554.000105"},{"type":"message","user":"U1AU8DRQR","text":"but as I remember we agreed that hashing will only be modified in fabric new architecture","ts":"1473156586.000106"},{"type":"message","user":"U0XR6J961","text":"i'm happy to discuss possible solutions","ts":"1473156691.000107"},{"type":"message","user":"U1GLPP8QN","text":"that'd still mean that this is just a temporary feature in a pre-1.0 release... kind of a relief :slightly_smiling_face:","ts":"1473156696.000108"},{"type":"message","user":"U1AU8DRQR","text":"<@U1GLPP8QN> what do you thing about including a nounce?","ts":"1473156728.000109"},{"type":"message","user":"U0XR6J961","text":"and this needs to be part of the architecture discussion","ts":"1473156746.000110"},{"type":"message","user":"U23JFU108","text":"calculate with the clock-drift between peers","edited":{"user":"U23JFU108","ts":"1473156828.000000"},"ts":"1473156782.000111"},{"type":"message","user":"U0XR6J961","text":"what are we talking about?","ts":"1473156845.000113"},{"type":"message","user":"U23JFU108","text":"I'm talking about including the nounce in the txid generation.","ts":"1473156891.000114"},{"type":"message","user":"U0XR6J961","text":"well but how does that help","ts":"1473156933.000115"},{"type":"message","user":"U0XR6J961","text":"you'd need a O(1) database to check for existing transactions","ts":"1473156961.000116"},{"type":"message","user":"U0XR6J961","text":"which needs quite some space","ts":"1473156981.000117"},{"type":"message","user":"U1AU8DRQR","text":"<@U0XR6J961> how do we define if two transactions are the same?","ts":"1473157010.000118"},{"type":"message","user":"U0XR6J961","text":"yes :slightly_smiling_face:, that's how it starts","ts":"1473157043.000119"},{"type":"message","user":"U0XR6J961","text":"which replays do you want to prevent","ts":"1473157055.000120"},{"type":"message","user":"U1GLPP8QN","text":"would give it a thumbs up on my part, but i think this is something that should be discussed on an architectural meeting? (and checking the generated nounces for possible duplicate messages should then be implemented on the consensus level?)","ts":"1473157066.000121"},{"type":"message","user":"U17HK4VQR","text":"guys, I have to bail (something urgent came up) - <@U23JFU108>, <@U1GLPP8QN>: I am happy with any true solution, however hackish it may be","ts":"1473157087.000122"},{"type":"message","user":"U1GLPP8QN","text":"...based on the last comments, this might even involve the requirements wg :smile:","ts":"1473157171.000123"},{"type":"message","user":"U1AU8DRQR","text":"<@U1GLPP8QN> I just realized some minutes ago that the duplication happens on consensus level so the issue may be harder, or am I wrong?","ts":"1473157197.000124"},{"type":"message","user":"U23JFU108","text":"<@U1AU8DRQR> You are right. In my case, it is on Consensus level","edited":{"user":"U23JFU108","ts":"1473157299.000000"},"ts":"1473157269.000125"},{"type":"message","user":"U1AU8DRQR","text":"<@U0XR6J961> case1: I only want to filter duplicated that arise from the multiple invocation of chaincodes with the same parameters (or... is that a duplicate?) case2: I also want to filter consensus level duplicates. what can I do?","ts":"1473157306.000128"},{"type":"message","user":"U0XR6J961","text":"well, case1 includes case2","ts":"1473157379.000129"},{"type":"message","user":"U1GLPP8QN","text":"i'd guess so (duplication in the execution queue or further down that pipe would affect other peers a lot more difficultly)","ts":"1473157412.000130"},{"type":"message","user":"U1AU8DRQR","text":"<@U0XR6J961> it includes, because if it comes from the consensus, that will generate a call to the chancode, right?","ts":"1473157431.000131"},{"type":"message","user":"U1GLPP8QN","text":"<@U1AU8DRQR> on case1, I'd say that unless the CC also requires a unique id \/ ts from the client (which would be weird), the same parameters are quite probable","ts":"1473157516.000132"},{"type":"message","user":"U1GLPP8QN","text":"(tx from A to B in a bank, same amount, same comment)","ts":"1473157550.000133"},{"type":"message","user":"U1AU8DRQR","text":"<@U1GLPP8QN> yes they are, and others say the some. however I\/we think that in a production system it is much more likely that the bitcoin technique will be used: inputs. those will easily stop having duplicates","ts":"1473157707.000134"},{"type":"message","user":"U1AU8DRQR","text":"inputs and outputs, some kind of chain, you know what I mean","ts":"1473157724.000135"},{"type":"message","user":"U0XR6J961","text":"well, but if you do utxo, you already have replay protection","ts":"1473157799.000136"},{"type":"message","user":"U1AU8DRQR","text":"yes that is what I say :smile:","ts":"1473157816.000137"},{"type":"message","user":"U1AU8DRQR","text":"and you keep it lightweight","ts":"1473157828.000138"},{"type":"message","user":"U1AU8DRQR","text":"no need for general protection, you have a domain specific one","ts":"1473157841.000139"},{"type":"message","user":"U0XR6J961","text":"also with the new architecture, the chaincode is executed first","ts":"1473157858.000140"},{"type":"message","user":"U0XR6J961","text":"and then the result goes through consensus","ts":"1473157866.000141"},{"type":"message","user":"U1AU8DRQR","text":"and the changeset is obtained","edited":{"user":"U1AU8DRQR","ts":"1473157878.000000"},"ts":"1473157870.000142"},{"type":"message","user":"U0XR6J961","text":"and that one will have replay protection just by using MVCC","ts":"1473157894.000144"},{"type":"message","user":"U1AU8DRQR","text":"is it an option not to use the mvcc?","ts":"1473157941.000145"},{"type":"message","user":"U0XR6J961","text":"no","ts":"1473157962.000146"},{"type":"message","user":"U1AU8DRQR","text":"<@U1GLPP8QN> <@U23JFU108>  I don't want to hijack the topic :slightly_smiling_face:","ts":"1473157969.000147"},{"type":"message","user":"U0XR6J961","text":"so that reduces the problem to \"proposal\" replays before going to the endorser","ts":"1473157996.000148"},{"type":"message","user":"U1GLPP8QN","text":"not a problem :slightly_smiling_face: what matters is that consensus level duplicates should not affect the ledger state, and this is just a temporary bug which will be then fixed as a side effect of the new architecture","ts":"1473158155.000149"},{"type":"message","user":"U1AU8DRQR","text":"by that you mean that a tx is proposed multiple times (and endorsed)?","ts":"1473158177.000150"},{"type":"message","user":"U1GLPP8QN","text":"nope, that part of the sentence was related to the current state","ts":"1473158217.000151"},{"type":"message","user":"U1GLPP8QN","text":"if it's proposed _and_ endorsed multiple times...","ts":"1473158289.000152"},{"type":"message","user":"U1AU8DRQR","text":"I mean simon's question :slightly_smiling_face:","ts":"1473158332.000153"},{"type":"message","user":"U1GLPP8QN","text":"the reduction to proposal replay? i think that was a statement :smile:","ts":"1473158522.000154"},{"type":"message","user":"U1AU8DRQR","text":"how can such a proposal replay be prevented?","ts":"1473158604.000155"},{"type":"message","user":"U1GLPP8QN","text":"not sure yet, i'll jump to the sidelines on the topic and dig a bit deeper into the new arch","ts":"1473158649.000156"},{"type":"message","user":"U0XR6J961","text":"hgabor: yes","ts":"1473159164.000157"},{"user":"U0NK7T8SH","text":"<@U0NK7T8SH|bryan-huang> has joined the channel","type":"message","subtype":"channel_join","ts":"1473159175.000158"},{"type":"message","user":"U0XR6J961","text":"hgabor: well, i don't know.  the crypto people have been asking about this","ts":"1473159187.000159"},{"type":"message","user":"U0XR6J961","text":"you can easily protect against it using utxo in the chaincode, or something similar","ts":"1473159201.000160"},{"type":"message","user":"U0XR6J961","text":":slightly_smiling_face:","ts":"1473159203.000161"},{"type":"message","user":"U1GLPP8QN","text":"just as a sidenote -- we've discussed the possible solutions for functionally correct measurements and will go with a custom CC that filters the duplicates, for the time being (much like the marbles example)","ts":"1473160911.000162"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1473164201.000163"},{"type":"message","user":"U0XR6J961","text":"oh our scrum now is an hour early","ts":"1473172474.000164"},{"type":"message","user":"U0UGH3X7X","text":"cancelled today","ts":"1473172508.000165"},{"type":"message","user":"U0XR6J961","text":"oh","ts":"1473172535.000166"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1473172538.000167"},{"type":"message","user":"U0XR6J961","text":"jyellick: around?","ts":"1473177559.000168"},{"type":"message","user":"U0XR6J961","text":"or <@U0XQ35CDD>","ts":"1473177569.000169"},{"type":"message","user":"U0XPR4NP4","text":"I am","ts":"1473177575.000170"},{"type":"message","user":"U0XPR4NP4","text":"Kostas should be available later, but is busy at the moment (<@U0XR6J961>)","ts":"1473177593.000171"},{"type":"message","user":"U0XR6J961","text":"hi","ts":"1473177601.000172"},{"type":"message","user":"U0XR6J961","text":"so i got view change working sufficiently well","ts":"1473177617.000173"},{"type":"message","user":"U0XR6J961","text":"and i'd like to move on to retaining state and state transfer","ts":"1473177637.000174"},{"type":"message","user":"U0XR6J961","text":"also, i really like the tendermint bft","ts":"1473177649.000175"},{"type":"message","user":"U0XPR4NP4","text":"With regards to retaining state, I'm currently working on a 'rawledger' interface","ts":"1473177718.000176"},{"type":"message","user":"U0XPR4NP4","text":"As a first step, I've factored out the simple ram based ledger I did for Solo, and am wrapping it in more sane interfaces, the thought being once it is there, I can quickly hack something with actual data persistence (though ultimately, we should come up with a non-hacky solution)","ts":"1473177780.000177"},{"type":"message","user":"U0XPR4NP4","text":"Then, I figured I could take the new rawledger stuff and hook it into your simplebft work","ts":"1473177849.000178"},{"type":"message","user":"U0XPR4NP4","text":"Last week when I'd looked, it seemed like it wasn't quite ready for it, so I figured hacking off something that already existed and I was familiar with (solo) made sense","edited":{"user":"U0XPR4NP4","ts":"1473177877.000000"},"ts":"1473177870.000179"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1473178481.000181"},{"type":"message","user":"U0XR6J961","text":"man that stupid raw ledger","ts":"1473178488.000182"},{"type":"message","user":"U0XR6J961","text":"i still feel it is the wrong interface","ts":"1473178497.000183"},{"type":"message","user":"U0XR6J961","text":"but oh well","ts":"1473178501.000184"},{"type":"message","user":"U0XR6J961","text":"i'd validate transactions during consensus, and reject invalid ones","ts":"1473178523.000185"},{"type":"message","user":"U0XPR4NP4","text":"It all really comes down to semantics.  We say there's an unvalidated ledger, and a validated one, but in reality, we just have two blockchains, with different validity constructs.  We've chosen to create one chain, and use it to build another, but, you could do this an arbitrary number of times.  It's really just arbitrary transformations of one chain into another.  It so happens the first chain is very stupid\/simple and contains arbitrary bytes, while the second chain deals with MVCC stuff and other validity hooks.","ts":"1473179133.000186"},{"type":"message","user":"U0XR6J961","text":"yes exactly","ts":"1473179144.000187"},{"type":"message","user":"U0XQ35CDD","text":"<@U0XR6J961>: are you clear on the need for Q sets now?","edited":{"user":"U0XQ35CDD","ts":"1473180377.000000"},"ts":"1473180289.000188"},{"type":"message","user":"U0XQ35CDD","text":"(Going back to last week's convo with Marko.)","ts":"1473180304.000189"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1473180472.000191"},{"type":"message","user":"U0XR6J961","text":"right now i can explain the need for them","ts":"1473180483.000192"},{"type":"message","user":"U0XR6J961","text":"but i think it is no longer a set, but a single item","ts":"1473180492.000193"},{"type":"message","user":"U0XQ35CDD","text":"Do you want take a crack at an example that shows the need for them?","ts":"1473180538.000194"},{"type":"message","user":"U0XR6J961","text":"yes, there is a unit test for it","ts":"1473180719.000195"},{"type":"message","user":"U0XR6J961","text":"brb to tell you how it works","ts":"1473180737.000196"},{"type":"message","user":"U0XR6J961","text":"ok","ts":"1473181099.000197"},{"type":"message","user":"U0XR6J961","text":"<https:\/\/github.com\/corecode\/fabric\/blob\/master\/consensus\/simplebft\/newview_test.go#L24>","attachments":[{"service_name":"GitHub","title":"corecode\/fabric","title_link":"https:\/\/github.com\/corecode\/fabric\/blob\/master\/consensus\/simplebft\/newview_test.go#L24","text":"Blockchain fabric code","fallback":"GitHub: corecode\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400","from_url":"https:\/\/github.com\/corecode\/fabric\/blob\/master\/consensus\/simplebft\/newview_test.go#L24","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1473181127.000198"},{"type":"message","user":"U0XR6J961","text":"kostas so there are are 3 scenarios, where R1 is prepared for seqno 1, then a view change occurs, and then another primary who didn't hear about this pre-prepare (or did), will act differently","ts":"1473181209.000200"},{"type":"message","user":"U0XQ35CDD","text":"Alright, so I'm looking at all of the tests in that file then?","edited":{"user":"U0XQ35CDD","ts":"1473181290.000000"},"ts":"1473181264.000201"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1473181816.000203"},{"type":"message","user":"U0XR6J961","text":"and you can see that the p-sets are the same, but the q-sets are different","ts":"1473182206.000204"},{"type":"message","user":"U0XQ35CDD","text":"Roger, will review.","ts":"1473182308.000205"},{"type":"message","user":"U0XR6J961","text":"ok","ts":"1473182699.000206"},{"type":"message","user":"U0XR6J961","text":"so now i have a queue of \"future\" messages (not limited yet), which allows nodes that have a slow link to still succeed","ts":"1473257687.000207"},{"type":"message","user":"U0XR6J961","text":"it is a bit crude tho, subject to DoS","ts":"1473257726.000208"},{"user":"U0N4P17ND","text":"<@U0N4P17ND|oiakovlev> has joined the channel","type":"message","subtype":"channel_join","ts":"1473274112.000209"},{"user":"U11BD9FA7","text":"<@U11BD9FA7|ynamiki> has joined the channel","type":"message","subtype":"channel_join","ts":"1473298794.000210"},{"user":"U1PT9H68Z","text":"<@U1PT9H68Z|lin> has joined the channel","type":"message","subtype":"channel_join","ts":"1473308804.000211"},{"user":"U1MNES6NR","text":"<@U1MNES6NR|lbonniot> has joined the channel","type":"message","subtype":"channel_join","ts":"1473319265.000212"},{"type":"message","user":"U0UGH3X7X","text":"all ... fyi ... <https:\/\/jira.hyperledger.org\/browse\/FAB-319?jql=issuetype%20%3D%20%22New%20Feature%22%20AND%20text%20~%20consensus>","ts":"1473339584.000213"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> The reason why I do not support signing checkpoints, and therefore only periodically signing batches\/blocks is that the intermediate batches\/blocks have absolutely no value until the checkpoint comes through","ts":"1473344499.000214"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1473344520.000215"},{"type":"message","user":"U0XR6J961","text":"i agree","ts":"1473344521.000216"},{"type":"message","user":"U0XPR4NP4","text":"If we only sign checkpoints, then I think checkpoint should equal batch\/block, which I actually like.","ts":"1473344554.000217"},{"type":"message","user":"U0XPR4NP4","text":"It seems like commits would still have value, if each commit carried up to batchSize\/K messages","ts":"1473344645.000218"},{"type":"message","user":"U0XR6J961","text":"but then i have the problem that if i catch up to a checkpoint, i might be out of date and cannot continue","ts":"1473344657.000219"},{"type":"message","user":"U0XR6J961","text":"i need to wait for the next upcoming checkpoint","ts":"1473344665.000220"},{"type":"message","user":"U0XPR4NP4","text":"Certainly it adds complexity to the protocol, no doubt about it.  Since we are building a hash chain anyway, checkpointing is basically free.  We could simply combine commit\/checkpoint into a single message and sign that.","ts":"1473344751.000221"},{"type":"message","user":"U0XPR4NP4","text":"The advantage to keeping them as distinct messages, is that a checkpoint message today guarantees that the block has actually been committed, whereas a commit says nothing of the sort.","ts":"1473344787.000222"},{"type":"message","user":"U0XPR4NP4","text":"But it obviously requires the 4th phase","ts":"1473344797.000223"},{"type":"message","user":"U0XR6J961","text":"yea, you only need f+1 checkpoints","ts":"1473344825.000224"},{"type":"message","user":"U0XR6J961","text":"signed checkpoints","ts":"1473344832.000225"},{"type":"message","user":"U0XPR4NP4","text":"I am more thinking of the problem we had with Sieve.  The primary would send out a message with signed proof (essentially commit messages) from 2f+1 replicas.  For a replica which needed to do state transfer, it had to gamble as to whether or not the replica it chose had actually committed that block yet or not.","ts":"1473345206.000226"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1473345878.000227"},{"type":"message","user":"U0XR6J961","text":"indeed","ts":"1473345884.000228"},{"type":"message","user":"U0XR6J961","text":"so we keep the 4th phase","ts":"1473345892.000229"},{"type":"message","user":"U0XR6J961","text":"so i guess i need to modify my batch definition to include the prev batch hash","ts":"1473346043.000230"},{"type":"message","user":"U0XR6J961","text":"and then if a primary proposes a batch with incorrect prev batch hash, it is considered byzantine","ts":"1473346063.000231"},{"type":"message","user":"U0XPR4NP4","text":"Sounds correct to me","ts":"1473346140.000232"},{"user":"U29QVFW22","text":"<@U29QVFW22|shiseki> has joined the channel","type":"message","subtype":"channel_join","ts":"1473397458.000233"},{"type":"message","user":"U0XR6J961","text":"sorry guys, i got sick last night - can't concentrate or work today","ts":"1473418505.000234"},{"type":"message","user":"U1AU8DRQR","text":"get well soon :slightly_smiling_face:","ts":"1473418780.000235"},{"type":"message","user":"U1GLPP8QN","text":"ehm... guys... any major changes happened to consensus lately? we've put together a CC that protect against self-made \"replay attacks\" (essentially it simulates users A and B, A has a giant deck of cards, and transactions are actions where a single card is given to B). we use a heavier workload (few hundred tx\/s\/peer), and at a given time, things look like this in the pbft module:","ts":"1473430641.000236"},{"type":"message","subtype":"file_share","text":"<@U1GLPP8QN|deeflorian> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/deeflorian\/F2A18H8TB\/-.txt|Untitled>","file":{"id":"F2A18H8TB","created":1473430655,"timestamp":1473430655,"name":"-.txt","title":"Untitled","mimetype":"text\/plain","filetype":"text","pretty_type":"Plain Text","user":"U1GLPP8QN","editable":true,"size":165,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2A18H8TB\/-.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2A18H8TB\/download\/-.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/deeflorian\/F2A18H8TB\/-.txt","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2A18H8TB-05425df999","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/deeflorian\/F2A18H8TB\/-.txt\/edit","preview":"    primaryID isActiveView viewNo\r\nvp0     1         false      17\r\nvp1     0         true       16\r\nvp2     0         true       16\r\nvp3     0         true       16","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>    primaryID isActiveView viewNo<\/pre><\/div>\n<div><pre>vp0     1         false      17<\/pre><\/div>\n<div><pre>vp1     0         true       16<\/pre><\/div>\n<div><pre>vp2     0         true       16<\/pre><\/div>\n<div><pre>vp3     0         true       16<\/pre><\/div>\n<\/div>\n<\/div>\n","lines":5,"lines_more":0,"preview_is_truncated":false,"channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U1GLPP8QN","upload":true,"display_as_bot":false,"username":"<@U1GLPP8QN|deeflorian>","bot_id":null,"ts":"1473430655.000237"},{"type":"message","user":"U1GLPP8QN","text":"after a view change:","ts":"1473430664.000238"},{"type":"message","subtype":"file_share","text":"<@U1GLPP8QN|deeflorian> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/deeflorian\/F2A0VA1U4\/-.txt|Untitled>","file":{"id":"F2A0VA1U4","created":1473430673,"timestamp":1473430673,"name":"-.txt","title":"Untitled","mimetype":"text\/plain","filetype":"text","pretty_type":"Plain Text","user":"U1GLPP8QN","editable":true,"size":165,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2A0VA1U4\/-.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2A0VA1U4\/download\/-.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/deeflorian\/F2A0VA1U4\/-.txt","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2A0VA1U4-a5c844a422","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/deeflorian\/F2A0VA1U4\/-.txt\/edit","preview":"    primaryID isActiveView viewNo\r\nvp0     1         true       17\r\nvp1     2         false      18\r\nvp2     1         true       17\r\nvp3     1         true       17","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>    primaryID isActiveView viewNo<\/pre><\/div>\n<div><pre>vp0     1         true       17<\/pre><\/div>\n<div><pre>vp1     2         false      18<\/pre><\/div>\n<div><pre>vp2     1         true       17<\/pre><\/div>\n<div><pre>vp3     1         true       17<\/pre><\/div>\n<\/div>\n<\/div>\n","lines":5,"lines_more":0,"preview_is_truncated":false,"channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U1GLPP8QN","upload":true,"display_as_bot":false,"username":"<@U1GLPP8QN|deeflorian>","bot_id":null,"ts":"1473430674.000239"},{"type":"message","user":"U1GLPP8QN","text":"which looks like a scenario where the primary is already in the next view, but it looks like it's still performing it's tasks (small number of rejects, many transactions are written to the ledger). and this happens during the entirety of the experiment... kind of dazzled at the moment... and what's more, the CC on the core peer is dormant during the period where the other peers think it's the primary (~0% CPU usage from a CC that generates a quite heavy workload)","ts":"1473430874.000240"},{"type":"message","user":"U1GLPP8QN","text":"not saying that a change _has_ happened, but this seems like a fascinating phenomenon :smile:","edited":{"user":"U1GLPP8QN","ts":"1473431009.000000"},"ts":"1473430950.000241"},{"type":"message","user":"U0XPR4NP4","text":"<@U1GLPP8QN> No real changes to PBFT have made it in lately.  That is pretty baffling behavior.  In general, all leader batch sends are wrapped at the very least in a check against `isActiveView`.  Would love to see some logs with PBFT debugging enabled if you are able to reproduce.","ts":"1473431961.000243"},{"type":"message","user":"U0XPR4NP4","text":"My best guess would be that vp1 successfully sent the new view message, but the other peers were not able to process it quickly enough, leading `vp1` to view change again.  You would see some transactions processed, and then it would sit in this state until there were new outstanding transactions, which should cause another view change.  If this is the case, then I would expect that the view change timeout and perhaps request timeout should be tuned up.","ts":"1473432057.000244"},{"type":"message","user":"U1GLPP8QN","text":"thanks a lot, that's reassuring and constructive :slightly_smiling_face: maybe we're just overloading the execution\/chaincode part of the system too heavily (with the CC, could go a lot higher with other CCs, just we used that with a few week old version)... based on what you said, i'd _guess_ that the outstanding queue might be too large and cause the primary to request a view change almost instantly, while the others \"catch up\" and process the sent out batches. will do a few experiments and report what's found, but this is might be too much of a Friday afternoon to explore all of the options now. this is definitely reproducible though, so I'll link the log when available","ts":"1473433916.000245"},{"type":"message","user":"U0XPR4NP4","text":"Great, thanks <@U1GLPP8QN> !","ts":"1473434088.000246"},{"type":"message","user":"U1GLPP8QN","text":"<@U0XPR4NP4> looks like this is only the result of melting down the pbft with requests :smile: didn't look at the outstanding queue size previously, but using the same stress level with a slower CC is too much. still, this means that longer CC execution times can lead to quite strange behaviour, observable in the pbft variables... interesting :slightly_smiling_face:","ts":"1473437941.000247"},{"type":"message","user":"U0XPR4NP4","text":"<@U1GLPP8QN> Ah, yes, that could definitely have an effect.  If your executions are taking a long time, then I would recommend increasing the request timeout from the default of 2s to something like, maybe 10s.","ts":"1473441103.000248"},{"user":"U269P9D8W","text":"<@U269P9D8W|rajeshsubhankar> has joined the channel","type":"message","subtype":"channel_join","ts":"1473486083.000249"},{"user":"U23CGEC7N","text":"<@U23CGEC7N|rafael> has joined the channel","type":"message","subtype":"channel_join","ts":"1473525884.000250"},{"user":"U2ABYPVGC","text":"<@U2ABYPVGC|vikas.singh> has joined the channel","type":"message","subtype":"channel_join","ts":"1473573454.000251"},{"type":"message","user":"U0XR6J961","text":"still sick today :confused:","ts":"1473671466.000252"},{"type":"message","user":"U0PB67X4K","text":"sorry <@U0XR6J961> .  get better soon","ts":"1473674060.000253"},{"type":"message","user":"U0UGH3X7X","text":"<@U0Y14MWA2>  <@U0XV1HDL3>  and others  ... <https:\/\/hyperledgerproject.slack.com\/archives\/consensus\/p1473672442000011>","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/consensus\/p1473672442000011","fallback":"[September 12th, 2016 2:27 AM] buhrmi: not really related to hyperledger, but ... <http:\/\/buhrmi.de\/post\/150299260509\/quest-for-consensus-open-source-hashgraph>","ts":"1473672442.000011","author_subname":"buhrmi","channel_id":"C0XR102AJ","channel_name":"consensus","is_msg_unfurl":true,"text":"not really related to hyperledger, but ... <http:\/\/buhrmi.de\/post\/150299260509\/quest-for-consensus-open-source-hashgraph>","author_name":"Stefan Buhrmester","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/buhrmi","author_icon":"https:\/\/secure.gravatar.com\/avatar\/ded7f3c3ea13d264a23176bd9a9ab44e.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0014-48.png","mrkdwn_in":["text"],"id":1,"footer":"Posted in #consensus"}],"ts":"1473685709.000254"},{"type":"message","user":"U0Y14MWA2","text":"another shiny consensus protocol?","ts":"1473686639.000256"},{"type":"message","user":"U0Y14MWA2","text":"I'd like to see all these new protocols published properly in appropiate research venues","ts":"1473686924.000257"},{"type":"message","user":"U0Y14MWA2","text":"just like is the case with Paxos, Raft, PBFT and others","ts":"1473686938.000258"},{"type":"message","user":"U0XV1HDL3","text":"<@U0UGH3X7X> This and many others remind me a lot of past discussions on crypto \"snake oil\" (read Schneier's post, it has a longer version of what I'm writing here, <https:\/\/www.schneier.com\/crypto-gram\/archives\/1999\/0215.html>):\n\nSomeone claims to have a superb new algorithm but fails to explain or formally demonstrate how it is superior to the experts in the field. There is a common theme: cryptography and resilient protocols have to withstand a class of attacks, the protocol or my cryptosystem may run *much* faster if there is no attack, but it's hard to demonstrate which attacks\/situations it survives. Essentially this requires mathematical arguments. Unlike, say, designing a faster network, which demonstrates its feature by operation and measuring the speed. In crypto and consensus protocols you can only demonstrate the *failure* of achieving a claimed goal, and such an attack is hard work. Therefore the protocol has to be peer-reviewed just like a cryptosystem. Othewise just don't bother.","ts":"1473693315.000259"},{"user":"U2AKT6YS1","text":"<@U2AKT6YS1|ganesh47> has joined the channel","type":"message","subtype":"channel_join","ts":"1473700105.000260"},{"type":"message","subtype":"file_share","text":"<@U12452RAP|grapebaba> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/grapebaba\/F2B33EWKG\/fabricnext-community.pdf|FabricNext-Community.pdf> and commented: hi, i found <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/proposals\/r1\/Next-Consensus-Architecture-Proposal.md>","file":{"id":"F2B33EWKG","created":1473768350,"timestamp":1473768350,"name":"FabricNext-Community.pdf","title":"FabricNext-Community.pdf","mimetype":"application\/pdf","filetype":"pdf","pretty_type":"PDF","user":"U12452RAP","editable":false,"size":459989,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2B33EWKG\/fabricnext-community.pdf?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2B33EWKG\/download\/fabricnext-community.pdf?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/grapebaba\/F2B33EWKG\/fabricnext-community.pdf","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2B33EWKG-95dce72ea5","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":1,"initial_comment":{"id":"Fc2B30LGHJ","created":1473768350,"timestamp":1473768350,"user":"U12452RAP","is_intro":true,"comment":"hi, i found <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/proposals\/r1\/Next-Consensus-Architecture-Proposal.md>","channel":""},"num_stars":1},"user":"U12452RAP","upload":true,"display_as_bot":false,"username":"<@U12452RAP|grapebaba>","bot_id":null,"ts":"1473768351.000261"},{"type":"message","user":"U12452RAP","text":"these two documents has some inconsistence","ts":"1473768378.000262"},{"type":"message","user":"U12452RAP","text":"the diagram in the pdf not have submitting peer","ts":"1473768411.000263"},{"type":"message","user":"U12452RAP","text":"which one is the latest design","ts":"1473768423.000264"},{"type":"message","subtype":"file_share","text":"<@U12452RAP|grapebaba> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/grapebaba\/F2B32L70C\/gossip_fabric_v4.pptx|Gossip_fabric_v4.pptx> and commented: also in the Next-Consensus-Architecture-Proposal.md seems not display the gossip communication in","file":{"id":"F2B32L70C","created":1473768770,"timestamp":1473768770,"name":"Gossip_fabric_v4.pptx","title":"Gossip_fabric_v4.pptx","mimetype":"application\/vnd.openxmlformats-officedocument.presentationml.presentation","filetype":"pptx","pretty_type":"PowerPoint Presentation","user":"U12452RAP","editable":false,"size":462774,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2B32L70C\/gossip_fabric_v4.pptx?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2B32L70C\/download\/gossip_fabric_v4.pptx?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/grapebaba\/F2B32L70C\/gossip_fabric_v4.pptx","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2B32L70C-4e65dd53e4","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":1,"initial_comment":{"id":"Fc2B3FD7GF","created":1473768770,"timestamp":1473768770,"user":"U12452RAP","is_intro":true,"comment":"also in the Next-Consensus-Architecture-Proposal.md seems not display the gossip communication in","channel":""},"num_stars":1},"user":"U12452RAP","upload":true,"display_as_bot":false,"username":"<@U12452RAP|grapebaba>","bot_id":null,"ts":"1473768771.000265"},{"type":"message","user":"U12452RAP","text":"can we have these design in one guide?","ts":"1473768904.000266"},{"type":"message","user":"U0Y14MWA2","text":"<@U12452RAP> good point - synchronization of these two documents is on the way - will post here (and elsewhere) as soon as the consolidated design is available","ts":"1473772389.000267","reactions":[{"name":"+1","users":["U12452RAP"],"count":1}]},{"type":"message","user":"U0Y14MWA2","text":"thanks for the patience","ts":"1473772393.000268"},{"type":"message","user":"U0PB67X4K","text":"<@U0XPR4NP4>  - you around?","ts":"1473784314.000269"},{"type":"message","user":"U0XPR4NP4","text":"I am","ts":"1473784323.000270"},{"type":"message","user":"U0PB67X4K","text":"so trying to figure out getting the change sets you posted for solo and selecting ledger interface reviewed and merged","ts":"1473784365.000271"},{"type":"message","user":"U0XPR4NP4","text":"I saw Kostas had some comments, was going to address them","ts":"1473784390.000272"},{"type":"message","user":"U0XPR4NP4","text":"But need to get those fixes from over the weekend into 0.5 and master for 0.6 today","ts":"1473784405.000273"},{"type":"message","user":"U0PB67X4K","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/957\/>   seems to conflict with <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/957\/3>","ts":"1473784414.000274"},{"type":"message","user":"U0PB67X4K","text":"okay - makes sense","ts":"1473784418.000275"},{"type":"message","user":"U0XPR4NP4","text":"Ah, damn, I thought gerrit was smarter than that","ts":"1473784446.000276"},{"type":"message","user":"U0XPR4NP4","text":"I can rebase the patch series","ts":"1473784450.000277"},{"type":"message","user":"U0PB67X4K","text":"no rush - but looked like interesting code for people to start using  :wink:","ts":"1473784519.000278"},{"type":"message","user":"U0XPR4NP4","text":"Thanks, at least the very first blush solo stuff is in there, so people can at least explore an implementation of the proto api, but splitting out the ledger implementations should ultimately help us hook in the work the ledger crew is doing as well as give us something for pbft to hook into now that it's no longer in the peer","ts":"1473784607.000279"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XQ35CDD> <@U0PB67X4K> <@U0UGH3X7X> <@U0XR6J961> <@U1KDAMDJ7> <@U0UKTPMG8> I've submitted the fixes found this weekend to master to hopefully get in before the 0.6 cut, <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1039\/> <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1041\/>\n\nThe patches didn't apply as cleanly as I'd hoped, so please review carefully","ts":"1473790733.000280"},{"type":"message","user":"U0PB67X4K","text":"sketchy code   hehe","ts":"1473791484.000281"},{"type":"message","user":"U0XPR4NP4","text":"(Just posted an update to patch 2 which substantially cleans up the behave stuff)","edited":{"user":"U0XPR4NP4","ts":"1473794677.000000"},"ts":"1473794663.000282"},{"type":"message","user":"U0XR6J961","text":"so i wanted to work on the persistence code for sbft","ts":"1473858028.000284"},{"type":"message","user":"U0XR6J961","text":"but i can't really concentrate","ts":"1473858033.000285"},{"type":"message","user":"U0XR6J961","text":"just blankly staring at the screen","ts":"1473858046.000286"},{"type":"message","user":"U0PB67X4K","text":"is it staring back?","edited":{"user":"U0PB67X4K","ts":"1473858418.000000"},"ts":"1473858408.000287","reactions":[{"name":"+1","users":["U0KM61BCP"],"count":1}]},{"user":"U1L24390X","text":"<@U1L24390X|wlahti> has joined the channel","type":"message","subtype":"channel_join","ts":"1473860542.000289"},{"type":"message","user":"U0XR6J961","text":"this got stuck in a private chat:","ts":"1474017054.000290"},{"type":"message","user":"U0XR6J961","text":"so i think we need to persist: 1. last checkpoint certificate, 2. last request, 3. last fact we sent prepare, 4. last fact we sent commit, 5. most recent \"execute\", i.e. persisted block.\n\ni don't know whether we need 6. last checkpoint message we sent ourselves because we can always reproduce the checkpoint message\nso (1) allows to sync others to us\n(2) allows the network to restart after crash during a round\n(3) is Q set\n(4) is P set\n(5) is blockchain\/app state","edited":{"user":"U0XR6J961","ts":"1474017099.000000"},"ts":"1474017080.000291"},{"type":"message","user":"U0XR6J961","text":"2+3 is actually last sent\/received pre-prepare","ts":"1474019870.000293"},{"type":"message","user":"U0PB67X4K","text":"<@U0XR6J961> - is this for the \"ordering\" nodes?   (Might have missed the beginning of the chat)","ts":"1474020528.000294"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1474020536.000295"},{"type":"message","user":"U0XR6J961","text":"for the simplified pbft rewrite","ts":"1474020547.000296"},{"type":"message","user":"U0XR6J961","text":"<https:\/\/github.com\/corecode\/fabric\/tree\/master\/consensus\/simplebft>","attachments":[{"service_name":"GitHub","title":"corecode\/fabric","title_link":"https:\/\/github.com\/corecode\/fabric\/tree\/master\/consensus\/simplebft","text":"Blockchain fabric code","fallback":"GitHub: corecode\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/177979?v=3&s=400","from_url":"https:\/\/github.com\/corecode\/fabric\/tree\/master\/consensus\/simplebft","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1474020563.000297"},{"type":"message","user":"U0XR6J961","text":"this","ts":"1474020564.000299"},{"type":"message","user":"U0PB67X4K","text":"so would 5) really be the last thing that the ordering node \"broadcast\"?","ts":"1474020587.000300"},{"type":"message","user":"U0XR6J961","text":"oh this numbering is arbitrary and just refers to state that the replica needs to persist across restarts","ts":"1474020620.000301"},{"type":"message","user":"U0XR6J961","text":"the sequence is","ts":"1474020638.000302"},{"type":"message","user":"U0XR6J961","text":"request -&gt; primary","ts":"1474020645.000303"},{"type":"message","user":"U0XR6J961","text":"primary: preprepare","ts":"1474020654.000304"},{"type":"message","user":"U0XR6J961","text":"everybody else: prepare","ts":"1474020660.000305"},{"type":"message","user":"U0XR6J961","text":"everybody: commit","ts":"1474020664.000306"},{"type":"message","user":"U0XR6J961","text":"everybody: checkpoint","ts":"1474020674.000307"},{"type":"message","user":"U0XR6J961","text":"repeat","ts":"1474020684.000308"},{"type":"message","user":"U0XR6J961","text":"so it is a 4 phase protocol with one signed message","ts":"1474020695.000309"},{"type":"message","user":"U0PB67X4K","text":"right - so 1), 2), 3), 4) in your list make sense.  I just was not sure what you meant by \"most recent execute\"","ts":"1474020722.000310"},{"type":"message","user":"U0XR6J961","text":"so after i receive a quorum of commits (or checkpoints, to be debated), i \"execute\", i.e. add the block to the local chain (app state)","ts":"1474020761.000311"},{"type":"message","user":"U0PB67X4K","text":"okay - cool.  makes sense.","ts":"1474020794.000312"},{"type":"message","user":"U0XR6J961","text":"most recent execute is the same as \"highest block\"","ts":"1474020800.000313"},{"type":"message","user":"U0PB67X4K","text":"and would we store this separate to storing whatever block history we decide?  So that if I simply backed up these pieces of information (for example if the actual hardware running the node died) I could restart the node on another machine with this info and rejoin?","ts":"1474021077.000314"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1474021244.000315"},{"type":"message","user":"U0XQ35CDD","text":"(By the way, I'm still investigating this. I'm not getting the proper block height upon restarting  with the transferred state, so I'm checking with Manish whether there is a proper way to shutdown the good peer so that its memory contents are captured to disk.)","ts":"1474021282.000316"},{"type":"message","user":"U0XR6J961","text":"although backup is difficult, because different files are backed up at different times","ts":"1474021284.000317"},{"type":"message","user":"U0XR6J961","text":"hi kostas - early morning?","ts":"1474021291.000318"},{"type":"message","user":"U0XR6J961","text":"kostas: of the peer?","ts":"1474021310.000319"},{"type":"message","user":"U0XQ35CDD","text":"Hello - yes.","ts":"1474021314.000320"},{"type":"message","user":"U0XQ35CDD","text":"Yes, I'm basically trying out this manual state transfer scenario that Gari alludes to. ","ts":"1474021340.000321"},{"type":"message","user":"U0XQ35CDD","text":"But the lastExec that the resurrected peer reports is not right. ","ts":"1474021367.000322"},{"type":"message","user":"U0XR6J961","text":"is this different from killing the process and restarting?","ts":"1474021371.000323"},{"type":"message","user":"U0XQ35CDD","text":"That's what I do but it doesn't work. ","ts":"1474021384.000324"},{"type":"message","user":"U0XR6J961","text":"kostas: is that with pbft or with kafka?","ts":"1474021396.000325"},{"type":"message","user":"U0XQ35CDD","text":"With PBFT. We're talking about the 0.5 (now: 0.6) branch.","ts":"1474021438.000326"},{"type":"message","user":"U0XQ35CDD","text":"So in pbft-persist, we restore lastSeqNo and that info is not what I wanted it to be for VP3 (the peer that received the state of VP2).","edited":{"user":"U0XQ35CDD","ts":"1474021583.000000"},"ts":"1474021505.000327"},{"type":"message","user":"U0XQ35CDD","text":"But if you stop and restart VP2, the right lastSeqNo is reported. So that means that the peer is shutdown properly.","ts":"1474021559.000328"},{"type":"message","user":"U0XR6J961","text":"ah","ts":"1474021824.000330"},{"type":"message","user":"U0XR6J961","text":"yes, it is entirely possible that there is a bug in that code path","ts":"1474021835.000331"},{"type":"message","user":"U0XR6J961","text":"how do you stop vp2?","ts":"1474021906.000332"},{"type":"message","user":"U0XR6J961","text":"is there a graceful stop option?","ts":"1474021916.000333"},{"type":"message","user":"U0XQ35CDD","text":"There is and I'm trying this now.","ts":"1474021966.000334"},{"type":"message","user":"U0XR6J961","text":"lastSeqNo should come from the consensusmetadata field of the block?","ts":"1474022137.000335"},{"type":"message","user":"U0XQ35CDD","text":"Correct.","ts":"1474022511.000336"},{"type":"message","user":"U0XQ35CDD","text":"As for your earlier points w\/r\/t what needs to be persisted in your simplified BFT work, are you sure about #3? (Qset = _last_ fact we sent prepare)?","edited":{"user":"U0XQ35CDD","ts":"1474022699.000000"},"ts":"1474022684.000337"},{"type":"message","user":"U0XQ35CDD","text":"That would imply that the Qset is a single-item list, whereas Figure 3 in the original Castro paper suggests you may well have &lt;10, bar, 3&gt; and &lt;10, baz, 4&gt;, in addition to your most recent &lt;10, foo, 5&gt; prepare. (&lt;n, d, v&gt; notation)","edited":{"user":"U0XQ35CDD","ts":"1474028048.000000"},"ts":"1474022686.000338"},{"type":"message","user":"U0XR6J961","text":"yes, but you asked me whether this applied","ts":"1474022797.000343"},{"type":"message","user":"U0XQ35CDD","text":"Correct, and I concluded that this does apply.","ts":"1474022815.000344"},{"type":"message","user":"U0XR6J961","text":"right now we don't send more than one preprepare anyways","ts":"1474022823.000345"},{"type":"message","user":"U0XR6J961","text":"in the view change","ts":"1474022829.000346"},{"type":"message","user":"U0XR6J961","text":"|Q| &lt;= 1","ts":"1474022841.000347"},{"type":"message","user":"U0XR6J961","text":"certainly there must be a bug in there","ts":"1474022882.000348"},{"type":"message","user":"U0XQ35CDD","text":"Right now, as in the new sBFT work?","ts":"1474022920.000349"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1474022923.000350"},{"type":"message","user":"U0XQ35CDD","text":"OK, I'm suggesting that this might need to be reconsidered.","ts":"1474022938.000351"},{"type":"message","user":"U0XR6J961","text":"can you define a scenario where this is required?","ts":"1474022960.000352"},{"type":"message","user":"U0XR6J961","text":"that would help a lot","ts":"1474022963.000353"},{"type":"message","user":"U0XR6J961","text":"my intuition is that it doesn't apply","ts":"1474022986.000354"},{"type":"message","user":"U0XR6J961","text":"because a view change resolves all requests","ts":"1474022997.000355"},{"type":"message","user":"U0XR6J961","text":"because there is just one","ts":"1474023022.000356"},{"type":"message","user":"U0XQ35CDD","text":"I am going through the paper, and I think you're right. Condition A1 ensures that the primary selects a request (for pre-prepare in the new view) that some replica in a quorum claims to have prepared in the latest view, or it's a null-request. Following that logic, you cannot have &lt;10, bar&gt; prepared in view 4 and &lt;10, foo&gt; pre-prepared in view 5; the latter implies that &lt;10, foo&gt; prepared in view 4 which contradicts with &lt;10, bar, 4&gt; preparing.","ts":"1474028741.000358"},{"type":"message","user":"U0XR6J961","text":"maybe <@U0Y14MWA2> has a better explanation","ts":"1474030713.000359"},{"type":"message","user":"U0Y14MWA2","text":"guys","ts":"1474030873.000360"},{"type":"message","user":"U0Y14MWA2","text":"I read","ts":"1474030875.000361"},{"type":"message","user":"U0Y14MWA2","text":"but failed to get a TL DR","ts":"1474030882.000362"},{"type":"message","user":"U0Y14MWA2","text":"can smbd pls summarize?","ts":"1474030908.000363"},{"type":"message","user":"U0Y14MWA2","text":"as for  \"ou cannot have &lt;10, bar&gt; prepared in view 4 and &lt;10, foo&gt; pre-prepared in view 5\"","ts":"1474030993.000364"},{"type":"message","user":"U0Y14MWA2","text":"actually you can","ts":"1474030999.000365"},{"type":"message","user":"U0XQ35CDD","text":"Can you give me a sequence that would result in this?","ts":"1474031018.000366"},{"type":"message","user":"U0Y14MWA2","text":"sure","ts":"1474031024.000367"},{"type":"message","user":"U0Y14MWA2","text":"primary sends &lt;PRE-PREPARE,10,bar&gt; to all","ts":"1474031043.000368"},{"type":"message","user":"U0XQ35CDD","text":"I was about to write: \"...which brings up the question, why on earth do we keep a list of items in the Qset in the original PBFT paper.\" (There must be something I'm missing.)","ts":"1474031050.000369"},{"type":"message","user":"U0Y14MWA2","text":"all send &lt;PREPARE,10,bar&gt;to all","ts":"1474031060.000370"},{"type":"message","user":"U0Y14MWA2","text":"but only primary receives PREPARES","ts":"1474031067.000371"},{"type":"message","user":"U0Y14MWA2","text":"so primary prepares &lt;10,bar&gt;","ts":"1474031079.000372"},{"type":"message","user":"U0Y14MWA2","text":"after a complete network breakdown","ts":"1474031087.000373"},{"type":"message","user":"U0Y14MWA2","text":"new leader is elected","ts":"1474031091.000374"},{"type":"message","user":"U0Y14MWA2","text":"vp1","ts":"1474031094.000375"},{"type":"message","user":"U0Y14MWA2","text":"but now old leader (say vp0) is partitioned","ts":"1474031103.000376"},{"type":"message","user":"U0Y14MWA2","text":"it cannot report 10,bar from view 4","ts":"1474031116.000377"},{"type":"message","user":"U0Y14MWA2","text":"and new primary proposes whatever he wants","ts":"1474031124.000378"},{"type":"message","user":"U0Y14MWA2","text":"which is 10,foo in view 5","ts":"1474031136.000379"},{"type":"message","user":"U0Y14MWA2","text":"QED :slightly_smiling_face:","ts":"1474031142.000380"},{"type":"message","user":"U0Y14MWA2","text":"as for Qsets","ts":"1474031228.000381"},{"type":"message","user":"U0XQ35CDD","text":"Do we agree that all the other nodes, participating in view 5 have &lt;10, bar, 4&gt; in their Qset?","edited":{"user":"U0XQ35CDD","ts":"1474031247.000000"},"ts":"1474031230.000382"},{"type":"message","user":"U0Y14MWA2","text":"yes in this example","ts":"1474031259.000384"},{"type":"message","user":"U0Y14MWA2","text":"I could have a simpler one","ts":"1474031268.000385"},{"type":"message","user":"U0Y14MWA2","text":"in which they don't","ts":"1474031276.000386"},{"type":"message","user":"U0Y14MWA2","text":"at least not all of them","ts":"1474031287.000387"},{"type":"message","user":"U0XQ35CDD","text":"In your example above, wouldn't the new leader then assign the null-request to seqNo 5?","ts":"1474031304.000388"},{"type":"message","user":"U0Y14MWA2","text":"but only one","ts":"1474031313.000389"},{"type":"message","user":"U0Y14MWA2","text":"remind me - are null requests coming from PBFT paper or is this our own invention?","ts":"1474031355.000390"},{"type":"message","user":"U0XQ35CDD","text":"PBFT paper.","ts":"1474031363.000391"},{"type":"message","user":"U0Y14MWA2","text":"pointer?","ts":"1474031376.000392"},{"type":"message","user":"U0XQ35CDD","text":"Sure, pg. 412 of the TOCS version, last paragraph. (pg. 15 of the PDF)","ts":"1474031427.000393"},{"type":"message","user":"U0Y14MWA2","text":"conf call starting will come back","ts":"1474031681.000394"},{"type":"message","user":"U0Y14MWA2","text":"ok so yes - there is null in this version","ts":"1474031756.000395"},{"type":"message","user":"U0Y14MWA2","text":"you are right so &lt;10,foo&gt; is not possible but &lt;10,no-op&gt; is","ts":"1474031780.000396"},{"type":"message","user":"U0XQ35CDD","text":"Exactly, thanks.","ts":"1474031795.000397"},{"type":"message","user":"U0Y14MWA2","text":"so what is the optimization you propose?","ts":"1474031851.000398"},{"type":"message","user":"U0XQ35CDD","text":"So if Simon is doing the no-op thing in his SBFT work, then can we claim that he doesn't need a list for the Qset? He'll only be storing a single item there.","ts":"1474031881.000399"},{"type":"message","user":"U0Y14MWA2","text":"was the list because of watermarks?","ts":"1474031908.000400"},{"type":"message","user":"U0XQ35CDD","text":"(Basically, there's no point in keeping &lt;10, bar, 3&gt; and &lt;10, baz, 4&gt; around.)","attachments":[{"fallback":"[September 16th, 2016 6:44 AM] kostas: That would imply that the Qset is a single-item list, whereas Figure 3 in the original Castro paper suggests you may well have &lt;10, bar, 3&gt; and &lt;10, baz, 4&gt;, in addition to your most recent &lt;10, foo, 5&gt; prepare. (&lt;n, d, v&gt; notation)","ts":"1474022686.000338","author_subname":"kostas","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"That would imply that the Qset is a single-item list, whereas Figure 3 in the original Castro paper suggests you may well have &lt;10, bar, 3&gt; and &lt;10, baz, 4&gt;, in addition to your most recent &lt;10, foo, 5&gt; prepare. (&lt;n, d, v&gt; notation)","author_name":"Kostas Christidis","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/kostas","author_icon":"https:\/\/avatars.slack-edge.com\/2016-04-05\/31983107923_80db5353e9278df980c7_48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1474022686000338","is_share":true,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1474031938.000401"},{"type":"message","user":"U0XQ35CDD","text":"To answer that, I'll have to be convinced of the use of a list for the Qset in the PBFT paper to begin with. (Short answer right now: I don't really know.)","attachments":[{"fallback":"[September 16th, 2016 9:18 AM] vukolic: was the list because of watermarks?","ts":"1474031908.000400","author_subname":"vukolic","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"was the list because of watermarks?","author_name":"Marko Vukolic","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/vukolic","author_icon":"https:\/\/secure.gravatar.com\/avatar\/a52edd136bbd07ca069b9393ac60f675.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0006-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1474031908000400","is_share":true,"footer":"Posted in #fabric-consensus-dev"}],"edited":{"user":"U0XQ35CDD","ts":"1474032108.000000"},"ts":"1474032027.000402"},{"type":"message","user":"U0XQ35CDD","text":"I remember your conversation with Simon here a couple of weeks ago, but I don't think that example was fully worked through; at least it didn't make sense to me.","edited":{"user":"U0XQ35CDD","ts":"1474032065.000000"},"ts":"1474032056.000403"},{"type":"message","user":"U0Y14MWA2","text":"ok","ts":"1474033172.000406"},{"type":"message","user":"U0Y14MWA2","text":"back","ts":"1474033173.000407"},{"type":"message","user":"U0Y14MWA2","text":"is the question is should without watermarks Q set be a single value?","ts":"1474033241.000408"},{"type":"message","user":"U0Y14MWA2","text":"and not a set?","ts":"1474033247.000409"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1474033294.000410"},{"type":"message","user":"U0XR6J961","text":"correct","ts":"1474033297.000411"},{"type":"message","user":"U0XQ35CDD","text":"I claim that if you do the null-request thing, it's definitely a single value.","edited":{"user":"U0XQ35CDD","ts":"1474033324.000000"},"ts":"1474033299.000412"},{"type":"message","user":"U0Y14MWA2","text":"ok so there are two things","ts":"1474033304.000413"},{"type":"message","user":"U0Y14MWA2","text":"even without watermarks","ts":"1474033313.000414"},{"type":"message","user":"U0Y14MWA2","text":"one could have sth called pipelining","ts":"1474033318.000415"},{"type":"message","user":"U0Y14MWA2","text":"in which I as a leader","ts":"1474033329.000417"},{"type":"message","user":"U0Y14MWA2","text":"send PRE_PREPARE for seqno=10","ts":"1474033338.000418"},{"type":"message","user":"U0Y14MWA2","text":"but I do not wait for that to commit to start seqno=11","ts":"1474033353.000419"},{"type":"message","user":"U0Y14MWA2","text":"I just send the PRE-PREPARE for seqno=11","ts":"1474033365.000420"},{"type":"message","user":"U0Y14MWA2","text":"and so on","ts":"1474033369.000421"},{"type":"message","user":"U0Y14MWA2","text":"(this looks like watermarks - but t is not)","ts":"1474033389.000422"},{"type":"message","user":"U0Y14MWA2","text":"namely","ts":"1474033396.000423"},{"type":"message","user":"U0Y14MWA2","text":"on the reception side - pipelining mandates that followers process requests in order","ts":"1474033423.000424"},{"type":"message","user":"U0Y14MWA2","text":"but also in pipeline","ts":"1474033436.000425"},{"type":"message","user":"U0Y14MWA2","text":"like to send PREPARE for seqno=12","ts":"1474033451.000426"},{"type":"message","user":"U0Y14MWA2","text":"replcia would need to send PREPARE for seqno=11","ts":"1474033463.000427"},{"type":"message","user":"U0Y14MWA2","text":"but not commit seqno=11","ts":"1474033470.000428"},{"type":"message","user":"U0Y14MWA2","text":"you see what I mean","ts":"1474033476.000429"},{"type":"message","user":"U0Y14MWA2","text":"so you eliminate watermarks","ts":"1474033483.000430"},{"type":"message","user":"U0XQ35CDD","text":"(With you so far.)","ts":"1474033485.000431"},{"type":"message","user":"U0Y14MWA2","text":"but still have \"full pipe\"","ts":"1474033498.000432"},{"type":"message","user":"U0Y14MWA2","text":"in this case you would still need Q to be a set","ts":"1474033512.000433"},{"type":"message","user":"U0Y14MWA2","text":"but the set is there only because there are multiple requests in flight (albeit pipelining is diff from watermarks)","ts":"1474033532.000434"},{"type":"message","user":"U0Y14MWA2","text":"now","ts":"1474033537.000435"},{"type":"message","user":"U0Y14MWA2","text":"if the question is","ts":"1474033544.000436"},{"type":"message","user":"U0Y14MWA2","text":"how many values are ther in the Q set that have the same sequence number and replica ID","ts":"1474033560.000437"},{"type":"message","user":"U0Y14MWA2","text":"the answer is always - at most one","ts":"1474033577.000438"},{"type":"message","user":"U0Y14MWA2","text":"if the question is","ts":"1474033587.000439"},{"type":"message","user":"U0Y14MWA2","text":"how many values are there in the Q set that have the same sequence number - the answer is again a set","ts":"1474033606.000440"},{"type":"message","user":"U0Y14MWA2","text":"because due to Byzantine leader","ts":"1474033613.000441"},{"type":"message","user":"U0XQ35CDD","text":"Are these answers pipeline-specific only?","ts":"1474033622.000442"},{"type":"message","user":"U0Y14MWA2","text":"different replicas can have different values","ts":"1474033622.000443"},{"type":"message","user":"U0Y14MWA2","text":"no","ts":"1474033631.000444"},{"type":"message","user":"U0Y14MWA2","text":"after \"now\" there is nothing pipeline specific","ts":"1474033642.000445"},{"type":"message","user":"U0Y14MWA2","text":"so strictly speaking","ts":"1474033673.000446"},{"type":"message","user":"U0Y14MWA2","text":"Q set at the leader","ts":"1474033679.000447"},{"type":"message","user":"U0Y14MWA2","text":"when it decides how to select a value for given seqNo must be a set because of you can report &lt;kostas, 10, foo&gt; and me &lt;marko,10,bar&gt;","ts":"1474033723.000448"},{"type":"message","user":"U0Y14MWA2","text":"and both of us are correct","ts":"1474033728.000449"},{"type":"message","user":"U0Y14MWA2","text":"because the leader was Byz","ts":"1474033733.000450"},{"type":"message","user":"U0Y14MWA2","text":"I realize now that pipeline does not matter for this argument - but it is good we had it because I anyway wanted to actually tell you guys that this is diff from watermarks","ts":"1474033781.000451"},{"type":"message","user":"U0Y14MWA2","text":":slightly_smiling_face:","ts":"1474033783.000452"},{"type":"message","user":"U0XR6J961","text":"ah yes","ts":"1474033871.000453"},{"type":"message","user":"U0XR6J961","text":"so the Qset in the viewchange is a single item","ts":"1474033896.000454"},{"type":"message","user":"U0XQ35CDD","text":"Right, do we agree on that?","ts":"1474033908.000455"},{"type":"message","user":"U0Y14MWA2","text":"in viewchange msg","ts":"1474033910.000456"},{"type":"message","user":"U0XR6J961","text":"but the new primary needs to be able to deal with Qsets that refer to different digests","ts":"1474033913.000457"},{"type":"message","user":"U0Y14MWA2","text":"yes","ts":"1474033918.000458"},{"type":"message","user":"U0XQ35CDD","text":"Exactly.","edited":{"user":"U0XQ35CDD","ts":"1474033969.000000"},"ts":"1474033921.000459"},{"type":"message","user":"U0XR6J961","text":"yep, we have that","ts":"1474033922.000460"},{"type":"message","user":"U0Y14MWA2","text":"but only w\/o pipelining and w\/o watermarks","ts":"1474033930.000461"},{"type":"message","user":"U0XR6J961","text":"yep","ts":"1474033937.000462"},{"type":"message","user":"U0Y14MWA2","text":"if you have pipelining","ts":"1474033939.000463"},{"type":"message","user":"U0Y14MWA2","text":"it is again a set","ts":"1474033940.000464"},{"type":"message","user":"U0XR6J961","text":"i think we need to have a simple working bft first","ts":"1474033947.000465"},{"type":"message","user":"U0Y14MWA2","text":"but with no two values being the same for the same seqno","ts":"1474033958.000466"},{"type":"message","user":"U0Y14MWA2","text":"we are talking about VIEW-CHANGE msg only","ts":"1474033985.000468"},{"type":"message","user":"U0Y14MWA2","text":"for Fig 3 logic at the leader","ts":"1474033992.000469"},{"type":"message","user":"U0Y14MWA2","text":"it is always a set","ts":"1474033994.000470"},{"type":"message","user":"U0XR6J961","text":"and my expectation is that batching helps so much, and the rest of the system is so slow anyways","ts":"1474034070.000471"},{"type":"message","user":"U0Y14MWA2","text":"you can do things without pipelining if you want testing first","ts":"1474034279.000472"},{"type":"message","user":"U0Y14MWA2","text":"but eventually we will want pipelining (but not watermarks) - so just have that in the back of the mind","ts":"1474034304.000473"},{"type":"message","user":"U0XR6J961","text":"every extra conditional makes it so much harder to reason about","edited":{"user":"U0XR6J961","ts":"1474034324.000000"},"ts":"1474034321.000474"},{"type":"message","user":"U0Y14MWA2","text":"pipelining should not be difficult - it is just not blocking on the commit","ts":"1474034353.000476"},{"type":"message","user":"U0Y14MWA2","text":"but you have two sequence numbers","ts":"1474034361.000477"},{"type":"message","user":"U0Y14MWA2","text":"commit","ts":"1474034366.000478"},{"type":"message","user":"U0Y14MWA2","text":"and process","ts":"1474034370.000479"},{"type":"message","user":"U0Y14MWA2","text":"you always process process seqno+1","ts":"1474034384.000480"},{"type":"message","user":"U0Y14MWA2","text":"but process seqno does not have to be commit seq no + 1","ts":"1474034393.000481"},{"type":"message","user":"U0XR6J961","text":"well let's leave that for later :slightly_smiling_face:","ts":"1474034579.000482"},{"type":"message","user":"U0XR6J961","text":"my basic persistence stuff seems to be sort of working","ts":"1474034591.000483"},{"type":"message","user":"U0XR6J961","text":"at least in my tests i can restart a node and it can participate in the network again","ts":"1474034635.000484"},{"type":"message","user":"U0N4P17ND","text":"Some silly question, which was partially raised in general (by other person) but after re-thinking want to re-ask it here. What consensus actually means or guaranty us: that all peers will have the same world state, right? But can we imagine that chaincode just store random number let's say using the parameter as a key. Question here: I believe that different peers will try to store different values to KVS (as they are random), right? but actually transactions are valid for all peers, so they will be accepted by consensus. On other hand different peers have different values in KVS. I realize that this is very corner case example but... still where I'm wrong?) I mean am I wrong saying that world state should be the same on all nodes and this is guarantied by consensus or consensus will handle such cases somehow? \nAnd even more such transactions means that they are not deterministic - so now this is responsible of developer to write deterministic one or there is some 'protection'?","ts":"1474050814.000485"},{"type":"message","user":"U0PB67X4K","text":"currently the responsibility of the developer to write deterministic code","ts":"1474050882.000486"},{"type":"message","user":"U0N4P17ND","text":"make sense, just double checking.. if we use some sort of Oracle to get some data from the 'external world' and result from Oracle can be date\/time dependent (exchange rates, for example) than replaying the ledger might lead to different results... \nAt least if HL has some sort of such service usage of them should be deterministic as well - for example pass date\/time or whatever makes it deterministic..\nSorry for thinking in loud...","ts":"1474051090.000487"},{"type":"message","user":"U0Y14MWA2","text":"<@U0N4P17ND> you may want to check out the architectural direction that fabric is taking","ts":"1474073439.000488"},{"type":"message","user":"U0Y14MWA2","text":"<https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/proposals\/r1\/Next-Consensus-Architecture-Proposal.md>","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/proposals\/r1\/Next-Consensus-Architecture-Proposal.md","text":"Read-only mirror of <https:\/\/gerrit.hyperledger.org\/r\/#\/admin\/projects\/fabric>","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/proposals\/r1\/Next-Consensus-Architecture-Proposal.md","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1474073442.000489"},{"type":"message","user":"U0Y14MWA2","text":"that architecture has a different approach to non-detemrinistic code","ts":"1474073457.000491"},{"type":"message","user":"U0Y14MWA2","text":"but it would still be expected from developer to code deterministic chaincode","ts":"1474073488.000492"},{"type":"message","user":"U0Y14MWA2","text":"although fabric will give some protection","ts":"1474073501.000493"},{"type":"message","user":"U0Y14MWA2","text":"against the effects of non-deterministic chaincode","ts":"1474073523.000494"},{"user":"U2BGFAHC7","text":"<@U2BGFAHC7|donovanhide> has joined the channel","type":"message","subtype":"channel_join","ts":"1474213233.000495"},{"type":"message","user":"U2BGFAHC7","text":"Re-posting from <#C0Y4PEU22|fabric>:\nHave just been reading through the consensus docs, specifically the endorsement stage :\n<https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/proposals\/r1\/Next-Consensus-Architecture-Proposal.md#23-an-endorser-receives-and-endorses-a-transaction>\nGiven that the transaction simulation stage runs on both the submitting peer and the endorsing peers and transactions are not broadcast as a batch, I\u2019m wondering how this design will deal with highly contended keys in the value store. For example, say the ledger is used by the chaincode to hold an orderbook, with offers constantly changing at high frequency. It is likely that clients will be submitting to different peers at around the same time transactions that will modify the tip of the orderbook. My reading of the design document is that this will frequently lead to the `STALE_VERSION` endorsement being returned. \nRipple\u2019s approach to this issue is to group a set of transactions into a batch which are processed in a hard to predict determinisitc order and loose time constraints dictate which transactions get into which batch. I\u2019d be very interested to hear any views on this potential issue :slightly_smiling_face: \n<https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/proposals\/r1\/Next-Consensus-Architecture-Proposal.md#41-batch-and-block-formation> discusses this a little, but it seems that the batching occurs after endorsement?","edited":{"user":"U2BGFAHC7","ts":"1474227105.000000"},"ts":"1474227100.000496"},{"user":"U1F1J97H7","text":"<@U1F1J97H7|zhuang.wei.ming> has joined the channel","type":"message","subtype":"channel_join","ts":"1474242586.000499"},{"type":"message","user":"U0XR6J961","text":"donovanhide: correct","ts":"1474273038.000500"},{"type":"message","user":"U0XR6J961","text":"donovanhide: i think contention is contention.  short of implementing field calls, this is unavoidable","ts":"1474273066.000501"},{"type":"message","user":"U2BGFAHC7","text":"<@U0XR6J961> Thanks for the response! Can you define what you mean by field calls? \nMy question revolves around whether batching transactions together, and the batch itself is endorsed, would mean the probability of contention is reduced. Are you saying that hyperledger consensus would theoretically perform badly for use cases like shared orderbooks?","ts":"1474277123.000502"},{"type":"message","user":"U0XR6J961","text":"not inherently","ts":"1474277165.000503"},{"type":"message","user":"U0XR6J961","text":"you just need to write your code so that you don't stomp on the state of parallel transactions","ts":"1474277183.000504"},{"type":"message","user":"U0XR6J961","text":"field calls is if you tell your database \"add 5 to this field\", instead of doing the adding yourself","ts":"1474277218.000505"},{"type":"message","user":"U2BGFAHC7","text":"Do you have any ideas for an orderbook data structure that could handle that kind of parallel mutation?","ts":"1474277229.000506"},{"type":"message","user":"U0XR6J961","text":"what is an orderbook?","ts":"1474277237.000507"},{"type":"message","user":"U2BGFAHC7","text":"An orderbook is a set of offers made by accounts to buy or sell an asset. It typically sees lots of activity at the best price as traders contend to be the best offer. So if you had offers as data type in the ledger, you\u2019d probably also need an index to order them by price and time created.","ts":"1474277318.000508"},{"type":"message","user":"U2BGFAHC7","text":"The index would see a lot of contention on popular orderbooks.","ts":"1474277340.000509"},{"type":"message","user":"U0XR6J961","text":"i don't think you should maintain an index","ts":"1474277394.000510"},{"type":"message","user":"U2BGFAHC7","text":"How would you iterate the orderbook when a crossing offer comes in without one?","ts":"1474277423.000511"},{"type":"message","user":"U0XR6J961","text":"yes, that's difficult","ts":"1474277445.000512"},{"type":"message","user":"U0XR6J961","text":"you could do a database query","ts":"1474277455.000513"},{"type":"message","user":"U0XR6J961","text":"but a scan of the table means that you produce a readset","ts":"1474277476.000514"},{"type":"message","user":"U0XR6J961","text":"maybe <@U0XRC0KLH> has a good idea","ts":"1474277484.000515"},{"type":"message","user":"U2BGFAHC7","text":"It\u2019s probably worth researching Ripple a bit to get some ideas of potential issues:\n<https:\/\/ripple.com\/build\/ledger-format\/#offer>\nRipple has a Directory node type in the ledger which is a linked list of pointers to offers. Contention on them is reduced by processing\/endorsing multiple transactions at a time.","edited":{"user":"U2BGFAHC7","ts":"1474277667.000000"},"ts":"1474277660.000516"},{"type":"message","user":"U2BGFAHC7","text":"One possible solution is that if indexes are stored externally to the ledger and don\u2019t alter the world state hash, but are automatically updated when a qualifying data type changes, then you could have a very efficient system. General purpose indexes are hard though :slightly_smiling_face:","ts":"1474277802.000519"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1474277973.000520"},{"type":"message","user":"U2BGFAHC7","text":"The index would also have to be accessible from chaincode.","ts":"1474277975.000521"},{"type":"message","user":"U0XR6J961","text":"i think as little as possible should be part of the chaincode","ts":"1474277993.000522"},{"type":"message","user":"U0XR6J961","text":"no, it doesn't","ts":"1474277996.000523"},{"type":"message","user":"U0XR6J961","text":"imagine this:","ts":"1474278000.000524"},{"type":"message","user":"U0XR6J961","text":"you have an application, and it consumes the incoming list of (purchase\/sell) offers","ts":"1474278024.000525"},{"type":"message","user":"U0XR6J961","text":"now you want to perform a purchase","ts":"1474278038.000526"},{"type":"message","user":"U0XR6J961","text":"so you pick a matching sell that you like (maybe you don't want to trade with specific entities)","ts":"1474278052.000527"},{"type":"message","user":"U0XR6J961","text":"and then you formulate a \"match existing sell with this purchase\" transaction","ts":"1474278082.000528"},{"type":"message","user":"U0XR6J961","text":"the chaincode just checks whether that sell is still available, and endorses the transaction","ts":"1474278100.000529"},{"type":"message","user":"U0XR6J961","text":"or, if the sell expired or was consumed by somebody else, the chaincode does not endorse, you receive an error (basically you lost a race), and then you retry","ts":"1474278146.000530"},{"type":"message","user":"U0XR6J961","text":"no contention","ts":"1474278153.000531"},{"type":"message","user":"U0XR6J961","text":"does that make sense?","ts":"1474278162.000532"},{"type":"message","user":"U2BGFAHC7","text":"So you are suggesting storing the set of buy and sell offers as an unordered bag in the ledger, and the event stream feeds additions and deletions to that set, the client maintains the ordering and selects specific offers to attempt to consume?","ts":"1474278209.000533"},{"type":"message","user":"U2BGFAHC7","text":"That works until a buy offer is submitted which is higher than an existing sell offer. Also offers may consume one *or more* existing offers. So it does get complicated quickly.","ts":"1474278270.000534"},{"type":"message","user":"U2BGFAHC7","text":"The question fundamentally boils down to random access vs sequential access of entities in the ledger. If sequential access is required an index will be contended due to concurrent, but one by one, transaction processing.","edited":{"user":"U2BGFAHC7","ts":"1474278429.000000"},"ts":"1474278427.000535"},{"type":"message","user":"U2BGFAHC7","text":"Maybe it\u2019s not a huge issue if all nodes are close to each other on a network, but if they are geo-disparate the network latency will amplify the contention.","ts":"1474278490.000537"},{"type":"message","user":"U0XR6J961","text":"no, don't maintain an index","ts":"1474278646.000538"},{"type":"message","user":"U0XR6J961","text":"imagine how you would do this on bitcoin","ts":"1474278653.000539"},{"type":"message","user":"U0XR6J961","text":"you'd parse specific transactions to see which ones are sell or buy offers, and then you'd create a transaction that matches","ts":"1474278692.000540"},{"type":"message","user":"U0XR6J961","text":"what you are describing is an inherently contending application","ts":"1474278732.000541"},{"type":"message","user":"U2BGFAHC7","text":"I think what you are saying is just do the trade settlement in hyperledger and store the orderbook externally?","ts":"1474278778.000542"},{"type":"message","user":"U0XR6J961","text":"no, you can store the orderbook in hyperledger","ts":"1474278799.000543"},{"type":"message","user":"U0XR6J961","text":"oh, maybe you could do this:","ts":"1474278817.000544"},{"type":"message","user":"U0XR6J961","text":"you partition offers and matching","ts":"1474278827.000545"},{"type":"message","user":"U0XR6J961","text":"you have one chaincode (or a section), which records the sequence of offers (buy and sell)","ts":"1474278855.000546"},{"type":"message","user":"U0XR6J961","text":"hm, sequence is a problem with the current architecture","ts":"1474278888.000547"},{"type":"message","user":"U0XR6J961","text":"which means that we need to reify a primitive that exposes the total order broadcast nature of consensus","ts":"1474278933.000548"},{"type":"message","user":"U0XR6J961","text":"if that primitive existed, you would have a defined order, and you could deterministically perform the matching","ts":"1474278971.000549"},{"type":"message","user":"U0XR6J961","text":"and then run this matching through another chaincode transaction","ts":"1474278996.000550"},{"type":"message","user":"U2BGFAHC7","text":"Well, just skimmed your paper, I think \"Execute-then-order\u201d with speculative execution might not perform well on contended resources, compare to \"Order-then-execute\u201d. Ripple chooses the latter. I strongly think that an orderbook example would be a great benchmarking testcase for hyperledger. It\u2019s a fun, but difficult problem :slightly_smiling_face:","ts":"1474279064.000551"},{"type":"message","user":"U0XR6J961","text":"order-then-execute is what we have right now","ts":"1474279100.000552"},{"type":"message","user":"U2BGFAHC7","text":"External indexes is one possible solution. Ripple made the mistake of internalising them, which uses a huge amount of data storage.","ts":"1474279118.000553"},{"type":"message","user":"U2BGFAHC7","text":"I read this document:\n<https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/proposals\/r1\/Next-Consensus-Architecture-Proposal.md#23-an-endorser-receives-and-endorses-a-transaction>\nWhich suggested \u201cExecute then order\"","edited":{"user":"U2BGFAHC7","ts":"1474279158.000000"},"ts":"1474279149.000554"},{"type":"message","user":"U0XR6J961","text":"the problem is that hyperledger uses go as implementation language for chaincode","ts":"1474279151.000556"},{"type":"message","user":"U0XR6J961","text":"which means people keep implementing non-deterministic code","ts":"1474279177.000558"},{"type":"message","user":"U0XR6J961","text":"which just breaks order-then-execute systems","ts":"1474279192.000559"},{"type":"message","user":"U2BGFAHC7","text":"You can write deterministic code in Go, just have to make sure all your inputs are deterministic :slightly_smiling_face:","ts":"1474279223.000560"},{"type":"message","user":"U0XR6J961","text":"nope","ts":"1474279228.000561"},{"type":"message","user":"U2BGFAHC7","text":"Really?","ts":"1474279232.000562"},{"type":"message","user":"U0XR6J961","text":"not only that","ts":"1474279234.000563"},{"type":"message","user":"U0XR6J961","text":"maps are non-deterministic","ts":"1474279237.000564"},{"type":"message","user":"U0XR6J961","text":"memory addresses are non-deterministic","ts":"1474279245.000565"},{"type":"message","user":"U2BGFAHC7","text":"Don\u2019t use maps :slightly_smiling_face:","ts":"1474279245.000566"},{"type":"message","user":"U0XR6J961","text":"it is easy to have global state","ts":"1474279261.000567"},{"type":"message","user":"U2BGFAHC7","text":"Ordered slices!","ts":"1474279262.000568"},{"type":"message","user":"U0XR6J961","text":"my experience is that in 100% of the cases where people said \"something is wrong with consensus, the network just stops\", it actually was caused by non-deterministic chaincode","ts":"1474279302.000569"},{"type":"message","user":"U0XR6J961","text":"you need to be an expert programmer to do it right","ts":"1474279316.000570"},{"type":"message","user":"U0XR6J961","text":"and still you might get it wrong","ts":"1474279321.000571"},{"type":"message","user":"U0XR6J961","text":"and then your whole network stops","ts":"1474279325.000572"},{"type":"message","user":"U0XR6J961","text":"it's a terrible DoS vector","ts":"1474279334.000573"},{"type":"message","user":"U2BGFAHC7","text":"Well, maybe drawing up some coding guidelines and providing some deterministic random access data structures (OrderedSet and OrderedMap) would help.","ts":"1474279403.000574"},{"type":"message","user":"U0XR6J961","text":"but it wouldn't be able to rule out the problems","ts":"1474279433.000575"},{"type":"message","user":"U2BGFAHC7","text":"Are you suggesting using a functional language instead? Or something more locked down like Solidity?","ts":"1474279459.000576"},{"type":"message","user":"U0XR6J961","text":"something designed to be deterministic","ts":"1474279472.000577"},{"type":"message","user":"U2BGFAHC7","text":"Sounds like a research paper :slightly_smiling_face:","ts":"1474279505.000578"},{"type":"message","user":"U0XR6J961","text":"sounds like a solved problem","ts":"1474279514.000579"},{"type":"message","user":"U0XR6J961","text":"because, solidity","ts":"1474279521.000580"},{"type":"message","user":"U2BGFAHC7","text":"But then, you are just rewriting Ethereum :slightly_smiling_face:","ts":"1474279543.000581"},{"type":"message","user":"U0XR6J961","text":"oh didn't you notice that hyperledger is just a copy of ethereum?","ts":"1474279563.000582"},{"type":"message","user":"U2BGFAHC7","text":":slightly_smiling_face:","ts":"1474279569.000583"},{"type":"message","user":"U2BGFAHC7","text":"Still a bit confused by \"order-then-execute\u201d in current implementation. Is that linked document saying that the next version will be \u201cexecute-then-order\u201d?","ts":"1474279626.000584"},{"type":"message","user":"U2BGFAHC7","text":"Also, no one has successfully yet written a working distributed orderbook in Ethereum.","ts":"1474279720.000585"},{"type":"message","user":"U0XR6J961","text":"yes, you read the design of the next architecture","ts":"1474279828.000586"},{"type":"message","user":"U0XR6J961","text":"currently transactions come in, are ordered, and then every validating peer executes them in the same order","ts":"1474279864.000587"},{"type":"message","user":"U2BGFAHC7","text":"There\u2019s currently no checking of previous key values in the endorsement step?","ts":"1474279913.000588"},{"type":"message","user":"U2BGFAHC7","text":"It\u2019s difficult to summarise this, but I think the design choice of processing transactions individually and checking world state hashes and changed key\/values after each execution, rather than grouping transactions by submission time and updating the world state hash after successful transactions have executed, will lead to some difficult contention issues.","ts":"1474280170.000589"},{"type":"message","user":"U2BGFAHC7","text":"I\u2019m not saying Ripple has done everything right, it\u2019s just a question of whether similar use cases to Ripple can be served by hyperledger.","ts":"1474280238.000590"},{"type":"message","user":"U0XR6J961","text":"i think you're raising an interesting use case","ts":"1474280509.000591"},{"type":"message","user":"U2BGFAHC7","text":"Well, banks like orderbooks :slightly_smiling_face:","ts":"1474280532.000592"},{"type":"message","user":"U0XR6J961","text":"they do?","ts":"1474280539.000593"},{"type":"message","user":"U2BGFAHC7","text":"It\u2019s the truth :slightly_smiling_face:","ts":"1474280548.000594"},{"type":"message","user":"U0XR6J961","text":"so far what i heard was that banks want to do the settlement","ts":"1474280564.000595"},{"type":"message","user":"U0XR6J961","text":"but the order matching happens elsewhere","ts":"1474280574.000596"},{"type":"message","user":"U2BGFAHC7","text":"Well, there is a huge market for corporate client cash pooling, which involves moving funds, cross-currency from subsidiary accounts to primary accounts. For the cross-currency exchange to occur, an orderbook is needed. If the orderbook can be in the same system as the bank account balances, it can all run at the same tick and be atomic. Can\u2019t be too detailed, but happy to discuss privately :slightly_smiling_face:","ts":"1474280680.000597"},{"type":"message","user":"U0XR6J961","text":"so this involves buy\/sell offer matching?","ts":"1474280783.000598"},{"type":"message","user":"U0XR6J961","text":"or just keeping record of transactions","ts":"1474280793.000599"},{"type":"message","user":"U2BGFAHC7","text":"Both.","ts":"1474280801.000600"},{"type":"message","user":"U2BGFAHC7","text":"Basically, we have used Ripple extensively for testing, it has some major issues we\u2019d like to address. Hyperledger is potentially a useful platform for authoring an alternative.","ts":"1474280873.000601"},{"type":"message","user":"U0KM0C3M3","text":"I have a golang orderbook library - pretty small but performant.  double auction market\/price time priority.  I havent decide how I want to license it yet though","ts":"1474280876.000602"},{"type":"message","user":"U0XR6J961","text":"what major issues?","ts":"1474280888.000603"},{"type":"message","user":"U2BGFAHC7","text":"Ability to submit a complete ladder of offers and to be able to update them in a reasonable amount of time. Hyperledger would allow us to write custom transactions, such as UpdateLadder, rather than submit 20 separate offers individually.","ts":"1474280955.000604"},{"type":"message","user":"U0XR6J961","text":"i see","ts":"1474280978.000605"},{"type":"message","user":"U2BGFAHC7","text":"<@U0KM0C3M3> Would be interested in looking at what you\u2019ve got!","ts":"1474280982.000606"},{"type":"message","user":"U0XR6J961","text":"would you say that if you had a way to order offers through one chaincode, the system wouldn't suffer from contention?","ts":"1474281027.000607"},{"type":"message","user":"U0KM0C3M3","text":"I wrote it a while back - I doubt I'd be able to sell it as is -will think on it tonight.","ts":"1474281041.000608"},{"type":"message","user":"U0XR6J961","text":"i think it would have to percolate through the system twice","ts":"1474281045.000609"},{"type":"message","user":"U0XR6J961","text":"once to order, and a second time to confirm the matches","ts":"1474281069.000610"},{"type":"message","user":"U0KM0C3M3","text":"in my experience, the matches can be returned from a call to process the order.  the orderbook itself can be threadsafe using locks, but the order of entering the orders absolutely matters.","ts":"1474281172.000611"},{"type":"message","user":"U2BGFAHC7","text":"Basically, what will happen is that you have multiple market makers all submitting offers to an orderbook as external prices change. If they do so at the same time, the contention will kick in and retries might dominate.","ts":"1474281183.000612"},{"type":"message","user":"U2BGFAHC7","text":"<@U0KM0C3M3> are we talking about an orderbook running in hyperledger?","ts":"1474281226.000613"},{"type":"message","user":"U0KM0C3M3","text":"I disagree - you should use a lock on the orderbook state, and just deal with contention that way","ts":"1474281229.000614"},{"type":"message","user":"U0KM0C3M3","text":"the orderbook - in hyperledger or elsewhere - will need to process orders in order to achieve the same state.  so if it's being run in shared state, the ordering of transactions needs to be determined prior to processing those orders","ts":"1474281306.000615"},{"type":"message","user":"U0KM0C3M3","text":"the contention i am referring to is actually more about the case where multiple threads are dropping orders into the book.  that may or may not apply in this situation.","ts":"1474281355.000616"},{"type":"message","user":"U0XR6J961","text":"byzantine distributed systems can't use locks","ts":"1474281357.000617"},{"type":"message","user":"U0XR6J961","text":"that just moves the contention elsewhere","ts":"1474281367.000618"},{"type":"message","user":"U0KM0C3M3","text":"if you can guarantee ordering of transactions, you dont need the lock","ts":"1474281396.000619"},{"type":"message","user":"U2BGFAHC7","text":"I think we\u2019re talking about different things. This discussion is about how to implement an orderbook in hyperledger and index the offers without contending updates.","ts":"1474281396.000620"},{"type":"message","user":"U0KM0C3M3","text":"I designed for different use case, but it should still work","ts":"1474281408.000621"},{"type":"message","user":"U0XR6J961","text":"i still maintain that indexing should happen elsewhere","ts":"1474281413.000622"},{"type":"message","user":"U0KM0C3M3","text":"I don't understand the problem of indexing and contention?","ts":"1474281505.000623"},{"type":"message","user":"U2BGFAHC7","text":"<@U0XR6J961> I agree that the index is the nub of the problem. If it was possible to have a peer provide a API calls to update and range scan external indexes, that would be one possible solution.","ts":"1474281510.000624"},{"type":"message","user":"U2BGFAHC7","text":"<@U0KM0C3M3> hyperledger consensus (at least the next version) intends to check previous key values during the endorsement stage. If multiple clients are submitting offer transactions at the same time to different peers, each peer might have different key values and mark the transaction as stale. The endorsement happens before the total order is created. That is my understanding anyway...","ts":"1474281599.000625"},{"type":"message","user":"U0XR6J961","text":"external = non-deterministic","ts":"1474281613.000626"},{"type":"message","user":"U0XR6J961","text":"index is just a performance thing","ts":"1474281631.000627"},{"type":"message","user":"U2BGFAHC7","text":"not if the peer is responsible for the indexing?","ts":"1474281631.000628"},{"type":"message","user":"U0XR6J961","text":"why not perform the indexing and matchmaking in an outside application?","ts":"1474281657.000629"},{"type":"message","user":"U0XR6J961","text":"and use a chaincode to validate the matchmaking","ts":"1474281675.000630"},{"type":"message","user":"U2BGFAHC7","text":"<@U0XR6J961> how do you then ensure atomicity between the orderbook and the balances? You\u2019re in interledger territory then :slightly_smiling_face:","ts":"1474281698.000631"},{"type":"message","user":"U0KM0C3M3","text":"If multiple clients are submitting offer transactions at the same time to different peers, the order of those transactions certainly must be decided, prior to placing them in the orderbook.","ts":"1474281699.000632"},{"type":"message","user":"U2BGFAHC7","text":"<@U0KM0C3M3> Read this first:\n<https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/proposals\/r1\/Next-Consensus-Architecture-Proposal.md#23-an-endorser-receives-and-endorses-a-transaction>","ts":"1474281728.000633"},{"type":"message","user":"U0KM0C3M3","text":"If I am understanding that correctly, it seems like the endorser is meant to execute the transaction right away against it's own state before relaying it to other peers?","ts":"1474281923.000634"},{"type":"message","user":"U2BGFAHC7","text":"<@U0XR6J961> to validate external match-making, you\u2019d still need to be able to range over the offers.","ts":"1474281924.000635"},{"type":"message","user":"U2BGFAHC7","text":"<@U0KM0C3M3> That\u2019s my understanding.","ts":"1474281936.000636"},{"type":"message","user":"U0KM0C3M3","text":"that wont work","ts":"1474281942.000637"},{"type":"message","user":"U2BGFAHC7","text":"Hence the discussion :slightly_smiling_face:","ts":"1474281952.000638"},{"type":"message","user":"U0KM0C3M3","text":"the transactions need to be ordered by the consensus protocol - surely that's something it already provides for, no?","ts":"1474281995.000639"},{"type":"message","user":"U2BGFAHC7","text":"*After* the endorsement(s).","edited":{"user":"U2BGFAHC7","ts":"1474282045.000000"},"ts":"1474282010.000640"},{"type":"message","user":"U0KM0C3M3","text":"if that's not possible to change, then the actual state update should only occur after correct order is established.","ts":"1474282063.000642"},{"type":"message","user":"U0KM0C3M3","text":"I dont think this problem is unique to orderbooks - it is basically the double spending problem, with more complicated state","ts":"1474282092.000643"},{"type":"message","user":"U0XR6J961","text":"donovanhide: i guess...","ts":"1474282148.000644"},{"type":"message","user":"U2BGFAHC7","text":"Once transactions are endorsed, they can still fail during execution, as I understand it. It\u2019s just the endorsement is a kind of \u201cpre-filter\"","ts":"1474282149.000645"},{"type":"message","user":"U2BGFAHC7","text":"but one that won\u2019t work well with contended resources.","ts":"1474282180.000646"},{"type":"message","user":"U0KM0C3M3","text":"tendermint works this way too - it's not more useful than a spam filter","ts":"1474282184.000647"},{"type":"message","user":"U0XR6J961","text":"the endorsement 1) shows that the chaincode executed correctly, and 2) proves that the stakeholders agree with the transaction","ts":"1474282220.000648"},{"type":"message","user":"U0XR6J961","text":"yes, i agree that this design is not good","ts":"1474282260.000649"},{"type":"message","user":"U2BGFAHC7","text":"Well, that\u2019s progress :slightly_smiling_face: Good to identify issues early :slightly_smiling_face:","ts":"1474282286.000650"},{"type":"message","user":"U0XR6J961","text":"but i can't do anything about it","ts":"1474282296.000651"},{"type":"message","user":"U2BGFAHC7","text":"<@U0XR6J961> because the design is fixed?","ts":"1474282401.000652"},{"type":"message","user":"U0XR6J961","text":"yes, and my opinions do not influence the design","ts":"1474282442.000653"},{"type":"message","user":"U2BGFAHC7","text":"Who is the design lead? Can I make a case to that person?","ts":"1474282468.000654"},{"type":"message","user":"U0XR6J961","text":"there is <@U0PB67X4K> and <@U0KN2SSKE>","ts":"1474282684.000655"},{"type":"message","user":"U2BGFAHC7","text":"Cool, thanks! Will try and engender some further discussion.","ts":"1474282763.000656"},{"type":"message","user":"U0XR6J961","text":"great","ts":"1474282822.000657"},{"type":"message","user":"U0KM0C3M3","text":"as an example of the problem: I have $100.  I make two, otherwise completely valid transactions sending the whole amount - one to Bob, and one to Alice.  I send them at the same time to different peers.  Each executes them against their local state before socializing them.  Hilarity does not ensue.","ts":"1474282907.000658"},{"type":"message","user":"U2BGFAHC7","text":"<@U0KM0C3M3> I believe those transactions might succeed in the transaction simulation stage, but will fail in the ordered execution stage. It\u2019s ok if some payments fail as they happen much less frequently than offer updates, which will happen all the time by multiple parties.","ts":"1474283033.000659"},{"type":"message","user":"U0XR6J961","text":"correct","ts":"1474283070.000660"},{"type":"message","user":"U0XR6J961","text":"one is a double spend attack","ts":"1474283078.000661"},{"type":"message","user":"U0KM0C3M3","text":"more precisely, one of them will fail in ordered execution.","ts":"1474283082.000662"},{"type":"message","user":"U0XR6J961","text":"yes, one has to fail","ts":"1474283099.000663"},{"type":"message","user":"U0KM0C3M3","text":"and one should succeed.  if that's the case, why could the same procedure not apply to an orderbook?","ts":"1474283129.000664"},{"type":"message","user":"U0KM0C3M3","text":"it's just more complicated state - but state that depends on order, all the same","ts":"1474283148.000665"},{"type":"message","user":"U0XR6J961","text":"because your example is an application bug or a try to exploit something","ts":"1474283166.000666"},{"type":"message","user":"U0XR6J961","text":"while an orderbook is defined by this behavior","ts":"1474283178.000667"},{"type":"message","user":"U2BGFAHC7","text":"<@U0KM0C3M3> Because for an orderbook to be meaningful, it requires the offers are ordered. To maintain that ordered state, you need an index. If multiple offers affect the same orderbook at the same time, the index is a contended resource.","edited":{"user":"U2BGFAHC7","ts":"1474283239.000000"},"ts":"1474283226.000668"},{"type":"message","user":"U0KM0C3M3","text":"i dont understand what you mean by index?","ts":"1474283246.000670"},{"type":"message","user":"U2BGFAHC7","text":"Offer A 200 USD\/EUR @ 1.3\nOffer B 100 USD\/EUR @ 1.31\nIndex maintains that Offer A is a better price than Offer B","ts":"1474283298.000671"},{"type":"message","user":"U0KM0C3M3","text":"oh.  I see.  so you mean A's index is 0 and B's is 1","ts":"1474283327.000672"},{"type":"message","user":"U0KM0C3M3","text":"or something","ts":"1474283331.000673"},{"type":"message","user":"U2BGFAHC7","text":"Yep, the world state is just a big map of buckets. To put an orderbook in there, you need an index that points to all the offers in a useful order.","ts":"1474283375.000674"},{"type":"message","user":"U0KM0C3M3","text":"I would suggest using a different data structure.  I dont think a map or array is the best.  I used a B-tree which has O(log n) inserts, and easy access to the top of the stack","ts":"1474283425.000675"},{"type":"message","user":"U0KM0C3M3","text":"and maintains order","ts":"1474283435.000676"},{"type":"message","user":"U2BGFAHC7","text":"Well, if you have a btree that can be serialised into the hyperledger key value store, that would be interesting :slightly_smiling_face:","ts":"1474283458.000677"},{"type":"message","user":"U0KM0C3M3","text":"the index is pretty irrelevant, as long as inserts are done in the correct order","ts":"1474283459.000678"},{"type":"message","user":"U0KM0C3M3","text":"hmmm","ts":"1474283477.000679"},{"type":"message","user":"U2BGFAHC7","text":"Perhaps we need a Merkle-B-Tree :slightly_smiling_face:","ts":"1474283504.000680"},{"type":"message","user":"U0XR6J961","text":"the index is just for quick access","ts":"1474283515.000681"},{"type":"message","user":"U0KM0C3M3","text":"thing is you never actually need to know the index - you only ever need the best order (when executing) plus a guarantee that the stack remains ordered correctly when you are not (menaing just adding an order)","edited":{"user":"U0KM0C3M3","ts":"1474283578.000000"},"ts":"1474283562.000682"},{"type":"message","user":"U2BGFAHC7","text":"You might need the second and third best offer if the incoming offer crosses and consumes more than one existing offer.","edited":{"user":"U2BGFAHC7","ts":"1474283610.000000"},"ts":"1474283596.000684"},{"type":"message","user":"U0KM0C3M3","text":"after the first is consumed, the second best becomes the first","ts":"1474283611.000686"},{"type":"message","user":"U0KM0C3M3","text":"so no","ts":"1474283613.000687"},{"type":"message","user":"U2BGFAHC7","text":"So you are saying a linked-list?","ts":"1474283633.000688"},{"type":"message","user":"U0KM0C3M3","text":"I also looked at using a skip list - but decided on the b-tree as ideal (in my opinion).  linked lists have O(n) inserts","ts":"1474283675.000689"},{"type":"message","user":"U2BGFAHC7","text":"Yep, there is all the theoretical data structure knowledge :slightly_smiling_face: The test is how to apply it to a merkle tree for efficient access and updating.","ts":"1474283736.000690"},{"type":"message","user":"U0KM0C3M3","text":"i used <https:\/\/github.com\/google\/btree>","attachments":[{"service_name":"GitHub","title":"google\/btree","title_link":"https:\/\/github.com\/google\/btree","text":"Contribute to btree development by creating an account on GitHub.","fallback":"GitHub: google\/btree","thumb_url":"https:\/\/avatars2.githubusercontent.com\/u\/1342004?v=3&s=400","from_url":"https:\/\/github.com\/google\/btree","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1474283753.000691"},{"type":"message","user":"U2BGFAHC7","text":"I have also used that package :slightly_smiling_face: How would you serialise it into the merkle tree so that is uncontended? If you put it into a single key, it would have terrible contention :slightly_smiling_face:","edited":{"user":"U2BGFAHC7","ts":"1474283901.000000"},"ts":"1474283801.000693"},{"type":"message","user":"U0KM0C3M3","text":"I have thought about putting an orderbook in a consensus based system a fair bit, and unfortunately my conclusion is that because the state of the art in real financial systems pushes the boundaries of what is possible in centralized systems, we are probably already around the bend on being able to do it via consensus.  Still, to answer your question, I would not even try to serialize the whole structure.  why not just run consensus on the new state?","ts":"1474283990.000695"},{"type":"message","user":"U2BGFAHC7","text":"Well, it is possible, because Ripple. You should examine the hoops jumped through to make it work. The key entity is the DirectoryNode LedgerEntry type:\n<https:\/\/ripple.com\/build\/ledger-format\/#directorynode>","edited":{"user":"U2BGFAHC7","ts":"1474284080.000000"},"ts":"1474284070.000696"},{"type":"message","user":"U2BGFAHC7","text":"If this was mapped to hyperledger, the DirectoryNode updates would be highly contended. Which is my key point.","ts":"1474284128.000700"},{"type":"message","user":"U2BGFAHC7","text":"What is more, all DirectoryNode updates are persisted in the log of changed nodes, so it uses an insane amount of storage.","ts":"1474284180.000701"},{"type":"message","user":"U0KM0C3M3","text":"why is it necessary though?","ts":"1474284245.000702"},{"type":"message","user":"U2BGFAHC7","text":"An ephemeral and external index of ledger entries would be a cool feature.","ts":"1474284253.000703"},{"type":"message","user":"U2BGFAHC7","text":"<@U0KM0C3M3> Because an orderbook needs to be ordered :slightly_smiling_face: Unless you can prove to me otherwise, I\u2019ll leave the burden of proof with you :slightly_smiling_face:","ts":"1474284296.000704"},{"type":"message","user":"U0KM0C3M3","text":"If I understand the argument correctly, you are saying that the entire orderbook state needs to be serialized and stored as a part of a merkle tree because it is otherwise difficult (impossible?) to maintain consensus about the order of elements within that orderbook state.","ts":"1474284472.000705"},{"type":"message","user":"U0KM0C3M3","text":"I certainly agree that if you tried to store that whole structure as a value of a single key, it will end in tears","ts":"1474284577.000706"},{"type":"message","user":"U2BGFAHC7","text":"<@U0KM0C3M3> Think about how you\u2019d write the chaincode to process an incoming offer. You need to examine the existing offers on the other side of the book to see if it crosses. If it does you need to iterate that side of the book and remove the crossing offers and update the appropriate balances. If it doesn\u2019t, you need to work out which position it takes on this side of the orderbook. Both operations require ranging over orderbooks. Without an index, or maybe a linked list, you\u2019d have to range scan over the whole merkle tree.","ts":"1474284715.000707"},{"type":"message","user":"U0KM0C3M3","text":"I have no experience writing chaincode for hyperledger.  I have written the exact code you describe, however, did not use any index (other than 0) to do so.  I think the real question is \"where is the state relating to open orders persisted?\"  If the orders are persisted in the merkle tree, that can be done with something that helps order them (which would allow the correct state to be (re)constructed).  Once the orderbook state is constructed, and as long as it can be reconstructed via individual transactions (orders) that have been stored in the merkle treet, I don't see that updating the actual state in a persistent fashion on the merkle tree is something that needs to be done.","ts":"1474285117.000708"},{"type":"message","user":"U0KM0C3M3","text":"sure, it means old (filled) orders are there, but who cares - if you reconstruct the state correctly, you have the set of currently open orders","ts":"1474285167.000709"},{"type":"message","user":"U0KM0C3M3","text":"and anyway you need the audit trail of what happened, which can also be constructed","ts":"1474285182.000710"},{"type":"message","user":"U2BGFAHC7","text":"Well, there are a myriad of issues that come up when you start trying to map things into a merkle tree. Persistence (as in Bagwell) does mean that previous states are maintained forever. In Ripple this is done by hashing the contents of a value and using that as a key, and then using a radix tree to map those keys to actual indexes. In hyperledger, key versioning is used. An index (like the DirectoryNode) reduces access reads required. Say you want to change the worst offer of a large orderbook. It will be very slow using your method\u2026 It\u2019s not simple. Intelligent people have suffered greatly trying to solve these problems :slightly_smiling_face:","edited":{"user":"U2BGFAHC7","ts":"1474285492.000000"},"ts":"1474285439.000711"},{"type":"message","user":"U0KM0C3M3","text":"\"Say you want to change the worst offer of a large orderbook.\"  cancel and replace (you lose your place in line) is the standard procedure in many markets - though admittedly not government bonds, in which I have some experience. I chose not to assume it was required in my (toy) library.  Point being, it's open for debate as to wether the state of an order should be allowed to change - apart from cancellation.  That said, either deletion or update in a decent implementation must have a separate time associated with it, and I see no reason why processing it couldn't be O(log n), since you should always be able to find a given open order based on price\/time using the insertion algorithm, because if it has a different price or time, it is, by definition, a different order.  I don't have much knowledge of the ripple approach, but I'm interested, and will look into it more.","edited":{"user":"U0KM0C3M3","ts":"1474285988.000000"},"ts":"1474285964.000713"},{"type":"message","user":"U2BGFAHC7","text":"Well, it has been an interesting discussion :slightly_smiling_face: In summary, unless someone can author a world-changing, merkle-tree friendly, DOS-proof orderbook data structure, it seems like the next hyperledger consensus design might have issues with index contention which it would be great to discuss further with <@U0PB67X4K> and others. Thanks for everyone\u2019s time!","edited":{"user":"U2BGFAHC7","ts":"1474286355.000000"},"ts":"1474286316.000715"},{"type":"message","user":"U0XR6J961","text":"<@U0XPR4NP4>, <@U0Y14MWA2>: so with ecdsa signatures, one sbft cycle takes ~0.8ms for a one node network, ~4ms for a 4-node nework, and 640ms for a 80-node network","ts":"1474286693.000717"},{"type":"message","user":"U2BGFAHC7","text":"Have you considered ed25519?","ts":"1474286733.000718"},{"type":"message","user":"U2BGFAHC7","text":"<https:\/\/godoc.org\/github.com\/golang\/crypto\/ed25519>","edited":{"user":"U2BGFAHC7","ts":"1474286798.000000"},"ts":"1474286794.000719"},{"type":"message","user":"U0XR6J961","text":"i'm just adding a test","ts":"1474286833.000722"},{"type":"message","user":"U0XR6J961","text":"i'd like to use ed25519, but my guess is other forces would want to use NIST stuff","ts":"1474286870.000723"},{"type":"message","user":"U2BGFAHC7","text":"I know a chap from Intel made ECDSA a lot faster recently for Go 1.7 (I think). I had a lot of fun helping speed up ed25519 :slightly_smiling_face:\n<https:\/\/github.com\/agl\/ed25519\/commits\/master>","edited":{"user":"U2BGFAHC7","ts":"1474286926.000000"},"ts":"1474286919.000724"},{"type":"message","user":"U0XR6J961","text":"how much did that gain?","ts":"1474286999.000727"},{"type":"message","user":"U0XR6J961","text":"i gotta check out for a while - need to eat","ts":"1474287090.000728"},{"type":"message","user":"U2BGFAHC7","text":"Can\u2019t find the old benchmarks\u2026 Seem to remember it was nearly 2.5x faster and not far off the C implementation. djb\u2019s assemby version was 2x faster than the C\u2026 Long time ago :slightly_smiling_face:","ts":"1474287114.000729"},{"type":"message","user":"U0KM0C3M3","text":"I compared that implementation to P256 from go standard lib recently - seem to recall it was impressively quick.","ts":"1474288356.000730"},{"type":"message","user":"U0XR6J961","text":"<@U0XPR4NP4>, <@U1AU8DRQR>: do you think we should augment the `Deliver` function between sbft and app to include a sequence number?","ts":"1474296105.000731"},{"type":"message","user":"U0XR6J961","text":"it's not going to be the batch number, unless we can skip it","ts":"1474296133.000732"},{"type":"message","user":"U1AU8DRQR","text":"how will we generate the seq number?","ts":"1474296199.000733"},{"type":"message","user":"U0XR6J961","text":"sbft has an internal seq number","ts":"1474297092.000734"},{"type":"message","user":"U1AU8DRQR","text":"the advantage of this is not clear for me","ts":"1474297213.000735"},{"type":"message","user":"U0XR6J961","text":"crash restart","ts":"1474297493.000736"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> We need to talk about how we do config, whether it's part of the `Deliver` chain or not","ts":"1474297543.000737"},{"type":"message","user":"U0XPR4NP4","text":"If it is, then we need to either a) modify the block structure, or b) define some sort of wrapping data structure for the data in the block","ts":"1474297569.000738"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1474297591.000739"},{"type":"message","user":"U0XPR4NP4","text":"The other thing that gets to be really tricky is pruning","ts":"1474297592.000740"},{"type":"message","user":"U0XPR4NP4","text":"What seems far easier would be to instead have a second chain only for config","ts":"1474297605.000741"},{"type":"message","user":"U0XR6J961","text":"i think it should use request and deliver","ts":"1474297608.000742"},{"type":"message","user":"U0XPR4NP4","text":"And checkpoint on both of them","ts":"1474297609.000743"},{"type":"message","user":"U0XPR4NP4","text":"That way, we never need to worry about pruning config, and, we don't have to modify the block or wrap the binary blobs","ts":"1474297633.000744"},{"type":"message","user":"U0XPR4NP4","text":"It would grow the checkpoint message slightly, but minimally relative to the overall message sizes","ts":"1474297665.000745"},{"type":"message","user":"U0XR6J961","text":"ah i see","ts":"1474297675.000746"},{"type":"message","user":"U0XR6J961","text":"but would you still use request\/deliver?","ts":"1474297695.000747"},{"type":"message","user":"U0XPR4NP4","text":"Do you mean `Broadcast`\/`Deliver`?","ts":"1474297711.000748"},{"type":"message","user":"U0XR6J961","text":"no","ts":"1474297714.000749"},{"type":"message","user":"U0XR6J961","text":"this is consensus internal","ts":"1474297721.000750"},{"type":"message","user":"U0XPR4NP4","text":"Ah, so `request` is an internal function to grab a batch?","ts":"1474297754.000751"},{"type":"message","user":"U0XR6J961","text":"sec","ts":"1474297758.000752"},{"type":"message","user":"U0XPR4NP4","text":"(And I would say, yes)","ts":"1474297758.000753"},{"type":"message","user":"U0XR6J961","text":"```type Receiver interface {\n\tReceive(msg *Msg, src uint64)\n}\n\ntype System interface {\n\tSend(msg *Msg, dest uint64)\n\tTimer(d time.Duration, t timerFunc) Canceller\n\tDeliver(batch [][]byte)\n\tSetReceiver(receiver Receiver)\n\tPersist(key string, data proto.Message)\n\tRestore(key string, out proto.Message) bool\n\tSign(data []byte) []byte\n\tCheckSig(data []byte, src uint64, sig []byte) error\n}\n```","ts":"1474297771.000754"},{"type":"message","user":"U0XR6J961","text":"actually, it also implements Request","ts":"1474297811.000755"},{"type":"message","user":"U0XR6J961","text":"so that's missing info","ts":"1474297822.000756"},{"type":"message","user":"U0XPR4NP4","text":"Presumably `Request` is for state transfer?","ts":"1474297848.000757"},{"type":"message","user":"U0XR6J961","text":"func (s *SBFT) Request(req []byte) {\n\ts.broadcast(&amp;Msg{&amp;Msg_Request{&amp;Request{req}}})\n}","ts":"1474297867.000758"},{"type":"message","user":"U0XR6J961","text":"atomic `Broadcast` -&gt; sbft `Request`","ts":"1474297896.000759"},{"type":"message","user":"U0XPR4NP4","text":"Ah, okay","ts":"1474297900.000760"},{"type":"message","user":"U0XPR4NP4","text":"So very much the `Request` from obcpbft","ts":"1474297925.000761"},{"type":"message","user":"U0XR6J961","text":"later, sbft calls `sys.Deliver`, which persists the raw chain and itself does the atomic `Deliver`","ts":"1474297929.000762"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1474297932.000763"},{"type":"message","user":"U0XPR4NP4","text":"So the basic problem is we want `Deliver` and persisting the sequence number to be atomic","ts":"1474298021.000764"},{"type":"message","user":"U0XR6J961","text":"i think we should use Request\/Deliver from sbft to sequence the config","ts":"1474298027.000765"},{"type":"message","user":"U0XR6J961","text":"my feeling is that we need to change Deliver to pass out the signatures as well","ts":"1474298086.000766"},{"type":"message","user":"U0XPR4NP4","text":"I agree we could use `Request` to sequence the config, but I think it is dependent on how would want to store the config","ts":"1474298105.000767"},{"type":"message","user":"U0XR6J961","text":"we could pass in a config flag with request","ts":"1474298135.000768"},{"type":"message","user":"U0XR6J961","text":"or some metadata","ts":"1474298147.000769"},{"type":"message","user":"U0XPR4NP4","text":"We could make the message use `oneof`","ts":"1474298154.000770"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1474298175.000771"},{"type":"message","user":"U0XR6J961","text":"we can even do that from the outside","ts":"1474298181.000772"},{"type":"message","user":"U0XR6J961","text":"and to sbft it is completely opaque","ts":"1474298189.000773"},{"type":"message","user":"U0XPR4NP4","text":"I am backtracking on this second chain in my head now, we should encode validation policy in the chain, and if we need to handle pruning and that, it would not be that much harder to handle it for the rest of config","ts":"1474298480.000774"},{"type":"message","user":"U0XR6J961","text":"i think i agree, but i'm not sure what you are saying","ts":"1474298669.000775"},{"type":"message","user":"U0XPR4NP4","text":"Sorry if I am scattered, in a room of about 20 people right now who are talking about bootstrapping","ts":"1474298764.000776"},{"type":"message","user":"U0XPR4NP4","text":"Basically, I am thinking that the bft network is going to need to retain some amount of the 'rawledger' thing that gets sent via `Deliver`","ts":"1474298798.000777"},{"type":"message","user":"U0XR6J961","text":"yes, for state transfer","ts":"1474298829.000778"},{"type":"message","user":"U0XR6J961","text":"and config","ts":"1474298837.000779"},{"type":"message","user":"U0XPR4NP4","text":"We should make sure we support pruning of this chain","ts":"1474298839.000780"},{"type":"message","user":"U0XPR4NP4","text":"This chain should be self validating, which means it should encode a validation policy (set of keys) into it","ts":"1474298854.000781"},{"type":"message","user":"U0XR6J961","text":"in the config","ts":"1474298882.000782"},{"type":"message","user":"U0XPR4NP4","text":"This means, if we want to support pruning, and retain the validation policy (and config), we're going to need to do something clever.  Either periodically re-asserting it at a frequency greater than the pruning, or, something else?","ts":"1474298911.000783"},{"type":"message","user":"U0XR6J961","text":"why?","ts":"1474298959.000784"},{"type":"message","user":"U0XPR4NP4","text":"Well, if the config\/validation is encoded in the chain, and we only retain... 10k blocks, after 10k blocks since the config changed, how do we do the validation? How do we know our config?","ts":"1474298999.000785"},{"type":"message","user":"U0XR6J961","text":"we write the config out separately as well","ts":"1474299018.000786"},{"type":"message","user":"U0XR6J961","text":"so that we don't have to parse the whole chain to find the latest config","ts":"1474299028.000787"},{"type":"message","user":"U0XPR4NP4","text":"But how do we validate the config? How do we know it hasn't changed since we were last up?","ts":"1474299051.000788"},{"type":"message","user":"U0XR6J961","text":"it's valid because it is stored in our store","ts":"1474299080.000789"},{"type":"message","user":"U0XR6J961","text":"we don't know whether it changed until we contact the network","ts":"1474299092.000790"},{"type":"message","user":"U0XR6J961","text":"the network can tell us the latest config","ts":"1474299122.000791"},{"type":"message","user":"U0XPR4NP4","text":"So this is some extra process of consenting on config?","ts":"1474299150.000792"},{"type":"message","user":"U0XR6J961","text":"no","ts":"1474299156.000793"},{"type":"message","user":"U0XR6J961","text":"when i come up, i say \"hey, i just restarted.  what's the last batch we're at, and what's the last config?\"","edited":{"user":"U0XR6J961","ts":"1474299190.000000"},"ts":"1474299186.000794"},{"type":"message","user":"U0XPR4NP4","text":"And you require f+1 same config responses?","ts":"1474299212.000796"},{"type":"message","user":"U0XPR4NP4","text":"(I'd argue that is an extra process of consenting on config)","ts":"1474299241.000797"},{"type":"message","user":"U0XR6J961","text":"no, you only require one, because it contains the signatures required for config change","ts":"1474299286.000798"},{"type":"message","user":"U0XPR4NP4","text":"But you don't know if that's stale config","ts":"1474299303.000799"},{"type":"message","user":"U0XR6J961","text":"fine, then wait for f+1","ts":"1474299313.000800"},{"type":"message","user":"U0XR6J961","text":"all this complication would go away if we co-located consensus and committer, and just maintained one single blockchain","ts":"1474299361.000801"},{"type":"message","user":"U0XR6J961","text":"there wouldn't be 3 copies of the data","ts":"1474299370.000802"},{"type":"message","user":"U0XR6J961","text":"nor pruning","ts":"1474299373.000803"},{"type":"message","user":"U0XPR4NP4","text":"Why would pruning go away?","ts":"1474299382.000804"},{"type":"message","user":"U0XR6J961","text":"because you always maintain the one blockchain","ts":"1474299398.000805"},{"type":"message","user":"U0XR6J961","text":"or your history is lost","ts":"1474299428.000806"},{"type":"message","user":"U0XR6J961","text":"for all kinds of regulatory reasons that's not allowed anyways","ts":"1474299439.000807"},{"type":"message","user":"U0XPR4NP4","text":"I think there will likely still be some notion of pruning\/archiving","ts":"1474299440.000808"},{"type":"message","user":"U0XR6J961","text":"but since that design won't happen anyways, we don't have to talk about it","ts":"1474299576.000809"},{"type":"message","user":"U0XPR4NP4","text":"One solution would be if we have some notion of encoding a more total policy on the chain, something like; \"This is the set of valid public keys for signing, we require signatures for k of them, in order to validate this chain, you should not prune this block until a new config is written, which will be in at most L blocks.\", but I'm not certain I like this.  Sticking everything on one chain drastically simplifies things by not having to coordinate between chain state and config, but makes supporting pruning very tricky.  Splitting them into two chains of course has the exact opposite problem.","ts":"1474299874.000810"},{"type":"message","user":"U0XR6J961","text":"then let's not prune","ts":"1474299934.000811"},{"type":"message","user":"U0XPR4NP4","text":"That is what I was about to say \"Maybe we say screw pruning\"","ts":"1474299948.000812"},{"type":"message","user":"U0XR6J961","text":"we should advise that the design as it is is space inefficient and pruning is very difficult","ts":"1474299975.000813"},{"type":"message","user":"U0XR6J961","text":"maybe you can bring that up during the meetings this week","ts":"1474300000.000814"},{"type":"message","user":"U0XPR4NP4","text":"I know it is on the agenda for later, I'd like to know how the validated ledger side sees pruning working <@U1KFCPFQA>","ts":"1474300009.000815"},{"type":"message","user":"U0XR6J961","text":"i won't be able to join on account of sickness","ts":"1474300011.000816"},{"type":"message","user":"U0XPR4NP4","text":"Yes, sorry you are still not feeling well, hope you get better soon","ts":"1474300029.000817"},{"user":"U1KFCPFQA","inviter":"U0XPR4NP4","text":"<@U1KFCPFQA|dave.enyeart> has joined the channel","type":"message","subtype":"channel_join","ts":"1474300033.000818"},{"type":"message","user":"U0XR6J961","text":"so do i - i keep getting sick on the weekend, which is very frustrating","ts":"1474300049.000819"},{"type":"message","user":"U0XR6J961","text":"yea, how would the validated ledger be pruned?","ts":"1474300075.000820"},{"type":"message","user":"U0XR6J961","text":"how do you build your world state?","ts":"1474300083.000821"},{"type":"message","user":"U0XR6J961","text":"you need a full copy","ts":"1474300102.000822"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I feel like maybe some sort of special transaction, possibly specifying the set of data for archiving, but it seems hard, much harder even than in the sbft config case","ts":"1474300176.000823"},{"type":"message","user":"U0XR6J961","text":"bitcoin doesn't do that","ts":"1474300234.000824"},{"type":"message","user":"U0XR6J961","text":"i don't think any ad hoc solution will work out right","ts":"1474300251.000825"},{"type":"message","user":"U0XR6J961","text":"well anyways, what's on the agenda to hack for me?","ts":"1474300286.000826"},{"type":"message","user":"U0XR6J961","text":"i thought about implementing the application state (chain) interface, and then go to state transfer","ts":"1474300327.000827"},{"type":"message","user":"U0XR6J961","text":"so the `Deliver`  API will have to change a bit","ts":"1474300400.000828"},{"type":"message","user":"U0XR6J961","text":"include a sequence number, and signatures","ts":"1474300417.000829"},{"type":"message","user":"U0XR6J961","text":"maybe deliver a block directly?","ts":"1474300429.000830"},{"type":"message","user":"U0XR6J961","text":"in case we decided on that format","ts":"1474300440.000831"},{"type":"message","user":"U0XR6J961","text":"but how does the consensus config fit in there","ts":"1474300473.000832"},{"type":"message","user":"U0XR6J961","text":"probably deliver from sbft won't provide a block","ts":"1474300489.000833"},{"type":"message","user":"U0XR6J961","text":"that's what the application would do","ts":"1474300493.000834"},{"type":"message","user":"U0XPR4NP4","text":"Bitcoin has no real remedy to unbounded growth, right? Presumably in 500 years someone will reference one of the early bitcoins that hasn't been touched and everyone will need the beginning of the chain?","ts":"1474300501.000835"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1474300509.000836"},{"type":"message","user":"U0XR6J961","text":"i think they say that storage will grow faster","ts":"1474300523.000837"},{"type":"message","user":"U0XR6J961","text":"anyways, does that seem like a reasonable thing to do next?","ts":"1474300540.000838"},{"type":"message","user":"U0XPR4NP4","text":"I was hoping to get around to hacking on the state transfer stuff, but with everyone visiting this week, that seems like an unlikely dream","ts":"1474300624.000839"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1474300630.000840"},{"type":"message","user":"U0XPR4NP4","text":"I don't think I saw any comments from you on the rawledger interface?","ts":"1474300634.000841"},{"type":"message","user":"U0XR6J961","text":"you mean the block interface?","ts":"1474300647.000842"},{"type":"message","user":"U0XPR4NP4","text":"<https:\/\/gerrit.hyperledger.org\/r\/gitweb?p=fabric.git;a=blob;f=orderer\/rawledger\/rawledger.go;h=2bb1eec2862fe56e452b184a029ee8b94b9a3338;hb=refs\/heads\/feature\/convergence>","ts":"1474300694.000843"},{"type":"message","user":"U0XR6J961","text":"ok i gotta run","ts":"1474300718.000844"},{"type":"message","user":"U0XR6J961","text":"say hi to everybody","ts":"1474300724.000845"},{"type":"message","user":"U0XPR4NP4","text":"Bye Simon, get well soon","ts":"1474300767.000846"},{"type":"message","user":"U0XR6J961","text":"ha, that sped up cycle time","ts":"1474368703.000847"},{"type":"message","user":"U0XR6J961","text":"if you only look at f+1 checkpoints, and check their signatures only once","ts":"1474368724.000848"},{"type":"message","user":"U0XR6J961","text":"22ms cycle time for an 80 node network","ts":"1474368737.000849"},{"type":"message","user":"U0XR6J961","text":"i think that's quite acceptable for a general purpose simple implementation","ts":"1474369611.000850","reactions":[{"name":"+1","users":["U0PB67X4K"],"count":1}]},{"type":"message","user":"U0PB67X4K","text":"feeling better <@U0XR6J961>?","ts":"1474372764.000851"},{"type":"message","user":"U0XR6J961","text":"slowly","ts":"1474373000.000852"},{"type":"message","user":"U0XR6J961","text":"not recovered by a long shot","ts":"1474373014.000853"},{"type":"message","user":"U0XR6J961","text":"but hacking some code","ts":"1474373021.000854"},{"type":"message","user":"U0XR6J961","text":"meaning i'm doing good enough","ts":"1474373029.000855"},{"type":"message","user":"U0XR6J961","text":"<@U0PB67X4K> did you see my discussion with <@U2BGFAHC7> yesterday?","ts":"1474373096.000856"},{"type":"message","user":"U0PB67X4K","text":"hacking code better than hacking lungs  :wink:","ts":"1474373144.000857"},{"type":"message","user":"U0PB67X4K","text":"let me look back at that exchange","ts":"1474373158.000858"},{"type":"message","user":"U2BGFAHC7","text":"<@U0XR6J961> <@U0PB67X4K> Here if it is a good time to discuss :slightly_smiling_face:","ts":"1474373188.000859"},{"type":"message","user":"U0PB67X4K","text":"<@U2BGFAHC7> - are you stalking us ?  :wink:","ts":"1474373226.000860"},{"type":"message","user":"U2BGFAHC7","text":"I\u2019m just omnipresent :slightly_smiling_face: Plus slack makes a noise when someone says my name :slightly_smiling_face:","ts":"1474373250.000861"},{"type":"message","user":"U0PB67X4K","text":"I think this actually made it into Go 1.6  - they finally got over licensing and added in some nice assembly for this","attachments":[{"fallback":"[September 19th, 2016 8:08 AM] donovanhide: I know a chap from Intel made ECDSA a lot faster recently for Go 1.7 (I think). I had a lot of fun helping speed up ed25519 :slightly_smiling_face:\n<https:\/\/github.com\/agl\/ed25519\/commits\/master>","ts":"1474286919.000724","author_subname":"donovanhide","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"I know a chap from Intel made ECDSA a lot faster recently for Go 1.7 (I think). I had a lot of fun helping speed up ed25519 :slightly_smiling_face:\n<https:\/\/github.com\/agl\/ed25519\/commits\/master>","author_name":"Donovan Hide","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/donovanhide","author_icon":"https:\/\/secure.gravatar.com\/avatar\/a5957d9ec4b55caaaf760fea5c0c2005.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0016-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1474286919000724","is_share":true,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1474373293.000862"},{"type":"message","user":"U2BGFAHC7","text":"Yep, Intel and Cloudflare started throwing some amazing resources at Go!","ts":"1474373329.000863"},{"type":"message","user":"U2BGFAHC7","text":"IBM too :slightly_smiling_face:","ts":"1474373365.000864"},{"type":"message","user":"U2BGFAHC7","text":"<@U0PB67X4K> Not sure how far you might have scrolled back, but the main issue discussed was how well the next design for consensus could deal with highly contended resources, such as an index for an orderbook.","ts":"1474374065.000865"},{"type":"message","user":"U2BGFAHC7","text":"Oh, I just scrolled back as well. Looks like Slack might have removed a substantial amount of the conversation :disappointed:","ts":"1474374347.000866"},{"type":"message","user":"U2BGFAHC7","text":"Maybe you need to get the paid-for Slack..","ts":"1474374381.000867"},{"type":"message","user":"U2BGFAHC7","text":"Strange, the history comes back when I reload Slack\u2026 Who knows :slightly_smiling_face:","ts":"1474374763.000868"},{"type":"message","user":"U0PB67X4K","text":"I was able to read the whole history - I see what you are saying.   I gotta run for a bit (actually working out some of these things), but I'll get back to you.  There are actually some things that we have thought about in terms of plug points and I also think that we can look at other state machine models in addition to the MVCC default model","ts":"1474376916.000869"},{"type":"message","user":"U0PB67X4K","text":"all good points and worth discussing.  I have some ideas on how to deal with some of the things you brought up","ts":"1474376954.000870"},{"type":"message","user":"U2BGFAHC7","text":"Great, thanks for taking the time to look!","ts":"1474378592.000871"},{"user":"U2CSLPV1Q","text":"<@U2CSLPV1Q|hhadass> has joined the channel","type":"message","subtype":"channel_join","ts":"1474492183.000872"},{"type":"message","user":"U0XR6J961","text":"so i'm moving to state transfer, and i need to define an interface between sbft and system","ts":"1474544480.000873"},{"type":"message","user":"U0XR6J961","text":"`GetBatch(uint64) (*Batch, err)` seems the first idea","ts":"1474544538.000874"},{"type":"message","user":"U0XR6J961","text":"some of these batches don't exist","ts":"1474544568.000875"},{"type":"message","user":"U0XR6J961","text":"because of null requests","ts":"1474544575.000876"},{"type":"message","user":"U0XR6J961","text":"so hm","ts":"1474544577.000877"},{"type":"message","user":"U0XPR4NP4","text":"Also presumably pruning","ts":"1474549622.000878"},{"type":"message","user":"U0XR6J961","text":"no pruning","ts":"1474549700.000879"},{"type":"message","user":"U0XR6J961","text":"i'm not going to implement pruning","ts":"1474549707.000880"},{"type":"message","user":"U0XPR4NP4","text":"I am hoping we can finally nail down the actual block format today, I'm not certain how we can hope to support configuration on the chain until the block format is finalized","ts":"1474549822.000881"},{"type":"message","user":"U0XR6J961","text":"i still don't quite know how config changes should run through","ts":"1474549851.000882"},{"type":"message","user":"U0XPR4NP4","text":"We discussed this some with Marko","ts":"1474549906.000883"},{"type":"message","user":"U0XPR4NP4","text":"The most obvious place is to do so during a view change, but I am wary of adding complexity to that process","ts":"1474549935.000884"},{"type":"message","user":"U0XR6J961","text":"i mean, how does it get communicated first?","ts":"1474549955.000885"},{"type":"message","user":"U0XPR4NP4","text":"(Especially considering the scenario where f=1, n=6 -&gt; f=2, n=7)","ts":"1474549959.000886"},{"type":"message","user":"U0XPR4NP4","text":"Presumably a special transaction? Piggy backed on the normal Request mechanism","ts":"1474549973.000887"},{"type":"message","user":"U0XR6J961","text":"so it is part of a batch?","ts":"1474549988.000888"},{"type":"message","user":"U0XPR4NP4","text":"I would think so","ts":"1474549999.000889"},{"type":"message","user":"U0UGH3X7X","text":"the bluemix and z admin folks are looking for ways to monitor that a v0.5 or v0.6 pbft replica is not  participating ?  they have machine status (how long   up\/down) and chain height ...  can't really say check for replica chain height since there's always someone lagging ...  maybe monitor input rate versus block chain height increase ?","ts":"1474549999.000890"},{"type":"message","user":"U0XR6J961","text":"jyellick: so it gets delivered to the committers are well","ts":"1474550023.000891"},{"type":"message","user":"U0XPR4NP4","text":"simon: Yes.  The committers need to know what the validity conditions are","ts":"1474550055.000892"},{"type":"message","user":"U0XPR4NP4","text":"Whether they are validating via signatures or via 2f+1 connections","ts":"1474550067.000893"},{"type":"message","user":"U0XPR4NP4","text":"They need to know that the old threshold is no longer valid for validation","ts":"1474550078.000894"},{"type":"message","user":"U0XR6J961","text":"so this needs to be a defined format that is shared between committers and consensus","ts":"1474550087.000895"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I believe so","ts":"1474550093.000896"},{"type":"message","user":"U0XR6J961","text":"ok","ts":"1474550095.000897"},{"type":"message","user":"U0XPR4NP4","text":"I really like the idea of self validating chains, keeping the policy on the chain.  My only concern with this is if we must support many many chains, that this configuration could end up duplicated many many times","ts":"1474550182.000898"},{"type":"message","user":"U0XPR4NP4","text":"The alternative would be to keep some sort of side chain, and inject a special \"The configuration has changed\" event into all the chains to go look up the new configuration, but I'm not sure the complexity is worth the gain.","ts":"1474550227.000899"},{"type":"message","user":"U0XPR4NP4","text":"Things seem to be in flux as to whether we will be supporting 'channels' where the transactions for the subchain go through ordering, or whether we will simply provide an interface to allow the easy construction of side chains (point to point n out of n agreement, then pushing a transaction+signatures+salt hash onto the main chain when they want finality)","ts":"1474550322.000900"},{"type":"message","user":"U0XPR4NP4","text":"Marko was pushing the latter method, and I think it certainly makes the implementation more straightforward and probably more scalable","ts":"1474550405.000901"},{"type":"message","user":"U0XPR4NP4","text":"In pretty much every other blockchain system, this is the solution for high throughput confidential stuff","ts":"1474550446.000902"},{"type":"message","user":"U0XPR4NP4","text":"<@U0UGH3X7X> I'm not sure what the difference between machine status chain height and replica chain height.  If the chain height matches, and queries are not rejected due to 'inconsistent state', then the replica should be up to date","ts":"1474550773.000903"},{"type":"message","user":"U0UGH3X7X","text":"sorry, not being clear,  they have 2 bits of info ... current machine status and chain height","ts":"1474550857.000904"},{"type":"message","user":"U0UGH3X7X","text":"i think the worry is ... given we see a replica lagging,  is that condition indicative of some issue ?","ts":"1474550956.000905"},{"type":"message","user":"U0XPR4NP4","text":"PBFT allows (and arguably encourages) f nodes not to participate in the network","ts":"1474551464.000906"},{"type":"message","user":"U0XPR4NP4","text":"So, lagging isn't really indicative of anything going wrong","ts":"1474551511.000907"},{"type":"message","user":"U0UGH3X7X","text":"exactly","ts":"1474551526.000908"},{"type":"message","user":"U0XPR4NP4","text":"However, if the lagging continues under low load, then it seems possible that there is something wrong with timeouts for state transfer","ts":"1474551542.000909"},{"type":"message","user":"U0XPR4NP4","text":"With the new default logging in place, this should be detectable (or, anytime statetransfer logs at warning or better)","edited":{"user":"U0XPR4NP4","ts":"1474551584.000000"},"ts":"1474551555.000910"},{"type":"message","user":"U0UGH3X7X","text":"right ... so they might want to monitor logs in real time rather than monitor  chain height","ts":"1474551659.000913"},{"type":"message","user":"U0XPR4NP4","text":"Statetransfer warnings would probably be the best indication that something is going wrong","ts":"1474551783.000914"},{"type":"message","user":"U0XPR4NP4","text":"(They are just warnings, and do not necessarily indicate that the system will never recover)","ts":"1474551800.000915"},{"type":"message","user":"U0UGH3X7X","text":"agreed ... just to flag someone to take a more in-depth look","ts":"1474551920.000916"},{"type":"message","user":"U0UGH3X7X","text":"btw,  did the discussion get to detection of byzantine nodes yesterday ?","ts":"1474552000.000917"},{"type":"message","user":"U0ZJZBJLF","text":"hey \\@channel, I understood that in the new architecture, the peers would gossip among themselves in order to create the same validated blocks (out of the raw blocks). \n1) Is that correct? \n2) How is this going to be done? How will the peers know who to chat with and how many, when to create the validated blocks, who to tell about this, etc? \n3) Is this going to be an autonomous effort or a group-effort? because... a group effort sounds a bit like a consensus type problem","ts":"1474552761.000918"},{"type":"message","user":"U0XPR4NP4","text":"<@U0UGH3X7X> It did, with the simple answer of \"We can target specific scenarios, but a general solution is pretty much impossible\"","ts":"1474552791.000919"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZJZBJLF> \n1) The creation of the same block should be possible purely by having the same raw ledger, the gossip is confirmation thereof, depending on policy.  \n2) The (very loose) idea is that there will be a global peer membership list, hopefully embedded in the chain, but maybe not, and then each peer will pick a subset of all peers to gossip with, randomly selecting at each round to probabilistically beat byzantine nodes\n3) I'm not sure what this means.  Because the block generation can actually be done via the raw ledger, and it is only validation\/confirmation of the correctness, we get to eliminate the requirement of order, so it is at least a drastically simplified consensus problem","ts":"1474553009.000920"},{"type":"message","user":"U0ZJZBJLF","text":"Thanks, I understand more clearly now <@U0XPR4NP4> . \n1) OK\n2) our gossip component can provide membership information, maybe we could use that? I think its better than storing membership in the chain because membership is something that changes pretty dynamically and some nodes are alive now and offline in the next hour, etc.\n3) your answer to (1) answers this, its autonomous because the validated block is only a function of the raw block, and input of peers isn't needed IIUC. I was concerned that it was something like: \"peer A tries to suggest to peers B, C, and D a certain validated block, and they can accept or reject, etc. etc. until they all reach the same result\"","edited":{"user":"U0ZJZBJLF","ts":"1474554716.000000"},"ts":"1474553345.000921"},{"type":"message","user":"U0XV1HDL3","text":"<@U0ZJZBJLF>  -  re 3) the output from the \"consensus service\" defines the tip of a hash chain; a peer needs to receive this directly from the consensus service, or the consensus service has signed this. afterwards the construction of the chain is only about getting the right blocks, because the blocks form a hashchain, and this is unique given the tip. this holds for raw blocks as well as for validated blocks.  what you state as your concern should not arise.","ts":"1474556912.000924"},{"type":"message","user":"U0XR6J961","text":"<@U0Y14MWA2> told me that there will not be gossip?","ts":"1474557364.000925"},{"type":"message","user":"U0ZJZBJLF","text":"<@U0XV1HDL3>  wait, I thought it also feeds the blocks to the peers doesn't it?","ts":"1474557874.000926"},{"type":"message","user":"U0Y14MWA2","text":"No gossip for new blocks ","ts":"1474559077.000927"},{"type":"message","user":"U0Y14MWA2","text":"For filling the gap we may still want to use p2p communication","ts":"1474559105.000928"},{"type":"message","user":"U0Y14MWA2","text":"If you call that gossip - then it is still a possible option","ts":"1474559131.000929"},{"type":"message","user":"U0Y14MWA2","text":"To complement fill-in-the-gap from consensus","ts":"1474559149.000930"},{"type":"message","user":"U0XV1HDL3","text":"dont understand \"no gossip for new blocks\" - how are these blocks disseminated? shouldnt there be a mechanism to inform 1000s of peers what the 10s (max) of consenters decided? i thought this was the goal of having that","ts":"1474559714.000931"},{"type":"message","user":"U0ZJZBJLF","text":"yeah <@U0Y14MWA2> , how are the blocks going to get from the consensus to the peers if not via our gossip network?","ts":"1474561816.000932"},{"type":"message","user":"U0Y14MWA2","text":"in v1 via direct connection of peer to consensus","ts":"1474563756.000933"},{"type":"message","user":"U0Y14MWA2","text":"every peer","ts":"1474563758.000934"},{"type":"message","user":"U0Y14MWA2","text":"post v1 we may plug in gossip","ts":"1474563768.000935"},{"type":"message","user":"U0Y14MWA2","text":"(not my choice - I am just relaying)","ts":"1474563782.000936"},{"type":"message","user":"U0Y14MWA2","text":"I presume once gossip solution was ready we could try to bring it back for v1","ts":"1474563862.000937"},{"type":"message","user":"U0Y14MWA2","text":"but it is my own view","ts":"1474563871.000938"},{"type":"message","user":"U0ZJZBJLF","text":"I hope there will be a view change then","ts":"1474563883.000939"},{"type":"message","user":"U1P1ZV6RF","text":"in the current version of Fabric, is it possible to dynamically add new peers (vps\/nvps) into an already running network?","ts":"1474578661.000940"},{"type":"message","user":"U1P1ZV6RF","text":"from my understanding this is not possible right now when PBFT consensus is used","ts":"1474578721.000941"},{"type":"message","user":"U0UGH3X7X","text":"for v0.5, v0.6 of hyperledger fabric, the number of peers is statically set at startup","ts":"1474578818.000942"},{"type":"message","user":"U0ZJZBJLF","text":"I don't think so, there is that parameter- N in the pbft config","ts":"1474578826.000943"},{"type":"message","user":"U0ZJZBJLF","text":"in order for this to work, the file somehow needs to be reloaded and the PBFT module needs to be \"refreshed\"","ts":"1474578847.000944"},{"type":"message","user":"U1P1ZV6RF","text":"which equals to restarting the network","ts":"1474578877.000945"},{"type":"message","user":"U0UGH3X7X","text":"for the next architecture, we've broken things out into endorser\/orderer\/commiter components","ts":"1474578903.000946"},{"type":"message","user":"U0UGH3X7X","text":"so question on adding a peer becomes adding an endorser or adding a committer","ts":"1474579012.000947"},{"type":"message","user":"U1P1ZV6RF","text":"but I assume that the Fabric GA will be capable of dynamically extending network with new peers","ts":"1474579061.000948"},{"type":"message","user":"U1P1ZV6RF","text":"and now it's a question of editing yml files and restarting docker-compose","ts":"1474579087.000949"},{"type":"message","user":"U1P1ZV6RF","text":"right?","ts":"1474579099.000950"},{"type":"message","user":"U0UGH3X7X","text":"can't tell you about fabric GA since I'm not privy to IBM's plans","ts":"1474579237.000951"},{"type":"message","user":"U1P1ZV6RF","text":"but that's the goal","ts":"1474579271.000952"},{"type":"message","user":"U0UGH3X7X","text":"don't think restarting docker-compose is equivalent to dynamically adding peers","ts":"1474579296.000953"},{"type":"message","user":"U1P1ZV6RF","text":"redoing docker-compose will reload yml files which will effectively launch new peers if these files were edited beforehand. But this means the network will be interrupted","ts":"1474579355.000954"},{"type":"message","user":"U1P1ZV6RF","text":"that's my understanding of the current status","ts":"1474579369.000955"},{"type":"message","user":"U0UGH3X7X","text":"there's discussion on boostrapping a new endorser\/committer so those can be added to a running network","ts":"1474579448.000956"},{"type":"message","user":"U0UGH3X7X","text":"dynamically adding an orderer depends on the specific consensus protocol being used, how to notify the peers, when to checkpoint and so on ... longer term  discussion I think","ts":"1474579565.000957"},{"type":"message","user":"U1P1ZV6RF","text":"so now it's safer to define the final number of peers before the network will be deployed","ts":"1474579631.000958"},{"type":"message","user":"U1P1ZV6RF","text":"and then just assign a given peer to a new member of an existing business network which joined after the private blockchain service was already deployed","ts":"1474579713.000959"},{"type":"message","user":"U1P1ZV6RF","text":"if for business reasons a new member will accept joining the network on a condition that it will receive VP capabilities","ts":"1474579751.000960"},{"type":"message","user":"U1P1ZV6RF","text":"or any kind of capabilities that require direct participation in the maintenance of consensus","ts":"1474579771.000961"},{"type":"message","user":"U1P1ZV6RF","text":"a contractual question, not a technical one","ts":"1474579787.000962"},{"user":"U1S01QY6L","text":"<@U1S01QY6L|smartyalgo> has joined the channel","type":"message","subtype":"channel_join","ts":"1474579928.000963"},{"type":"message","user":"U0UGH3X7X","text":"i'll let others chime in on this","ts":"1474579936.000964"},{"type":"message","user":"U1P1ZV6RF","text":"thanks anyway :slightly_smiling_face:","ts":"1474579998.000965"},{"type":"message","user":"U1P1ZV6RF","text":"otherwise, what is the current optimal number of peers that can be running in a network without impacting network and pbft-based consensus performance?","ts":"1474580038.000966"},{"type":"message","user":"U0UGH3X7X","text":"turns out that for the existing code, the bottleneck is starting\/running the docker container for the chaincode","ts":"1474580129.000967"},{"type":"message","user":"U0UGH3X7X","text":"more discussion over on <#C113WK2A1|performance-benchmark> ... most people are running 4 peers+membersrvc  at this point but that's probably because we're all developers exploring how to do chaincode","ts":"1474580197.000968"},{"type":"message","user":"U1P1ZV6RF","text":"in Vukolic's paper \"The Quest for Scalable Blockchain Fabric: Proof-of-Work vs. BFT Replication\" it is claimed that &gt;=20 nodes is optimal for BFT but this is not HL-specific.","ts":"1474580257.000969"},{"type":"message","user":"U1P1ZV6RF","text":"thanks, I will pop-in there","ts":"1474580288.000970"},{"type":"message","user":"U0ZJZBJLF","text":"is there a proof why?","ts":"1474580334.000971"},{"type":"message","user":"U0UGH3X7X","text":"<@U0Y14MWA2> ^^^","ts":"1474580487.000972"},{"type":"message","user":"U0ZJZBJLF","text":"i asked matanyahu since he's already here and i'm curious enough to ask, but too lazy to download the paper and read it.","ts":"1474581007.000973"},{"type":"message","user":"U1P1ZV6RF","text":"<@U0ZJZBJLF> : \"However, having been invented in the context of replicating traditional appli-\ncations, such as databases, for fault-tolerance, BFT protocols were never really\ntested thoroughly for their scalability beyond, say, n = 10 or n = 20 nodes,\nin particular in the light of the fairly modest performance targets of many\nblockchain applications.\"","ts":"1474583834.000974"},{"type":"message","user":"U1P1ZV6RF","text":"\"As we\nhave already discussed, the major challenge for BFT protocols that prevents\ntheir wider adoption in blockchain is their scalability in terms of the number of\nnodes. Stellar [44] is an ongoing effort aimed at removing unanimously accepted\nmembership lists from BFT protocols, while maintaining the other BFT advan-\ntages over PoW. Other approaches target the BFT scalability without changing membership assumptions. These include optimistic BFT protocols [52, 3] which\nfeature linear communication complexity in the \u201ccommon case\u201d and resort to ex-\npensive O(n 2 ) communication among nodes featured by classical protocols such\nas PBFT [10] only if the network and the process fault pattern are particularly\ninfavorable. However, even optimistic BFT have a resource and communication\noverhead when compared to crash-tolerant replication protocols (e.g., [37, 31,\n50]), which are better proven in practice and may serve as a baseline for BFT.\"","ts":"1474584012.000975"},{"type":"message","subtype":"file_share","text":"<@U1P1ZV6RF|matanyahu> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/matanyahu\/F2EV9EWRE\/selection_072.png|Selection_072.png> and commented: Node Scalability - as per Vukolic's paper","file":{"id":"F2EV9EWRE","created":1474584185,"timestamp":1474584185,"name":"Selection_072.png","title":"Selection_072.png","mimetype":"image\/png","filetype":"png","pretty_type":"PNG","user":"U1P1ZV6RF","editable":false,"size":31592,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2EV9EWRE\/selection_072.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2EV9EWRE\/download\/selection_072.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_64":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2EV9EWRE-611b6f8949\/selection_072_64.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_80":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2EV9EWRE-611b6f8949\/selection_072_80.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2EV9EWRE-611b6f8949\/selection_072_360.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360_w":360,"thumb_360_h":237,"thumb_480":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2EV9EWRE-611b6f8949\/selection_072_480.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_480_w":480,"thumb_480_h":316,"thumb_160":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2EV9EWRE-611b6f8949\/selection_072_160.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","image_exif_rotation":1,"original_w":552,"original_h":363,"permalink":"https:\/\/hyperledgerproject.slack.com\/files\/matanyahu\/F2EV9EWRE\/selection_072.png","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2EV9EWRE-975cb978db","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":1,"initial_comment":{"id":"Fc2ETTRYLB","created":1474584185,"timestamp":1474584185,"user":"U1P1ZV6RF","is_intro":true,"comment":"Node Scalability - as per Vukolic's paper","channel":""}},"user":"U1P1ZV6RF","upload":true,"display_as_bot":false,"username":"<@U1P1ZV6RF|matanyahu>","bot_id":null,"ts":"1474584187.000976"},{"type":"message","user":"U0XR6J961","text":"where does it say that &gt;= 20 is optimal?","ts":"1474617381.000977","reactions":[{"name":"heavy_plus_sign","users":["U0ZJZBJLF"],"count":1}]},{"type":"message","user":"U0XR6J961","text":"should we expose null requests to the \"application\"?","ts":"1474630559.000978"},{"type":"message","user":"U0XR6J961","text":"i.e. should null requests be empty batches, or no batch at all","ts":"1474630582.000979"},{"type":"message","user":"U0XR6J961","text":"if they are no batch, we somehow need to persist all data related to it outside of the chain","ts":"1474630608.000980"},{"type":"message","user":"U0XR6J961","text":"basically a batch with signatures, just without hash chain","ts":"1474630630.000981"},{"type":"message","user":"U0XR6J961","text":"might as well just use an empty batch instead?","ts":"1474630644.000982"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XR6J961>  - what do we do for censorship of requests (i.e., request liveness) currently in sBFT?","ts":"1474631436.000983"},{"type":"message","user":"U0XR6J961","text":"nothing","ts":"1474632917.000984"},{"type":"message","user":"U0XR6J961","text":"we could hook up the request timer","ts":"1474632940.000985"},{"type":"message","user":"U0XR6J961","text":"but then we limit ourselves to one outstanding request at a time","ts":"1474632953.000986"},{"type":"message","user":"U0Y14MWA2","text":"I thought about this on the plane a lot","ts":"1474633119.000987"},{"type":"message","user":"U0Y14MWA2","text":"we need a mechanism that is essentially independent of a BFT\/XFT protocol","ts":"1474633132.000988"},{"type":"message","user":"U0Y14MWA2","text":"for: 1) reliable broadcast of client's request, 2) liveness\/termination, and possibly 3) elimination of (some) duplicate requests","ts":"1474633200.000989"},{"type":"message","user":"U0Y14MWA2","text":"I have an idea how to design such a thing - but let's discuss first in person it is easier","ts":"1474633236.000990"},{"type":"message","user":"U0XR6J961","text":"also filtering invalid requests","ts":"1474633590.000991"},{"type":"message","user":"U0Y14MWA2","text":"that is also needed but is separate from this","ts":"1474633646.000992"},{"type":"message","user":"U0Y14MWA2","text":"BTW - I spoke to folks from a company very interested in using HL","ts":"1474633679.000993"},{"type":"message","user":"U0Y14MWA2","text":"they do not want to know invalid transactions that appear on RL","ts":"1474633701.000994"},{"type":"message","user":"U0Y14MWA2","text":"they MUST know about them","ts":"1474633710.000995"},{"type":"message","user":"U0Y14MWA2","text":"so for example they have a requirement that consensus does not \"swallow\" invalid tx","ts":"1474633742.000996"},{"type":"message","user":"U0XR6J961","text":"but only those that are signed?","ts":"1474633747.000997"},{"type":"message","user":"U0Y14MWA2","text":"sure - malformed requests could\/should be dropped","ts":"1474633768.000998"},{"type":"message","user":"U0Y14MWA2","text":"but semantically invalid transactions - they need to know about","ts":"1474633799.000999"},{"type":"message","user":"U0Y14MWA2","text":"BTW - that mechanism for reliable\/broadcast and request liveness should also incorporate flow control","ts":"1474633971.001000"},{"type":"message","user":"U0Y14MWA2","text":"and then","ts":"1474633978.001001"},{"type":"message","user":"U0Y14MWA2","text":"one can easily change protocols - but this thing would stay - hopefully irrespective of the protocol","ts":"1474634003.001002"},{"type":"message","user":"U0XR6J961","text":"what do you mean by flow control?","ts":"1474634155.001003"},{"type":"message","user":"U0Y14MWA2","text":"among other things - avoiding DoS from clients drowning the consenters\/primary with requests","ts":"1474634222.001004"},{"type":"message","user":"U0Y14MWA2","text":"I wonder can this even be a library that is called by consensus protocols","ts":"1474634363.001005"},{"type":"message","user":"U0Y14MWA2","text":"that would require more design...","ts":"1474634373.001006"},{"type":"message","user":"U0XR6J961","text":"yea, that would be nice","ts":"1474634680.001007"},{"type":"message","user":"U0Y14MWA2","text":"in that case a consensus protocol does not communicate with clients at all","ts":"1474634729.001008"},{"type":"message","user":"U0Y14MWA2","text":"but fetches requests from the flow control component","ts":"1474634741.001009"},{"type":"message","user":"U0Y14MWA2","text":"(obviously every replica runs locally the flow control component)","ts":"1474634762.001010"},{"type":"message","user":"U0Y14MWA2","text":"and on commit from the consensus protocol - there is an event to flow control component which does with committed requests what it needs to do","ts":"1474634790.001011"},{"type":"message","user":"U0Y14MWA2","text":"view change interaction is less obvious and maybe protocol dependent","ts":"1474634807.001012"},{"type":"message","user":"U0Y14MWA2","text":"but I'd like we eventually have such a component","ts":"1474634820.001013"},{"type":"message","user":"U0Y14MWA2","text":"and doing this for every protocol specifically is a nonsense","ts":"1474634964.001014"},{"type":"message","user":"U0Y14MWA2","text":"it must be as generic as possible","ts":"1474634972.001015"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1474634998.001016"},{"type":"message","user":"U0XR6J961","text":"how do you intend to flow control clients?","ts":"1474635009.001017"},{"type":"message","user":"U0XR6J961","text":"it needs to be deterministic","ts":"1474635017.001018"},{"type":"message","user":"U0Y14MWA2","text":"let's discuss over whiteboard and then later forward here if meaningful","ts":"1474635037.001019"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1474635130.001020"},{"type":"message","user":"U0UGH3X7X","text":"<@U0Y14MWA2> <@U0XPR4NP4> <@U0XQ35CDD> <@U1KDAMDJ7>  are you guys in building 500 today ?  should we try for a consensus face to face before marko has to fly away ?","ts":"1474636397.001021"},{"type":"message","user":"U0Y14MWA2","text":"marko is already in zurich...","ts":"1474636530.001022"},{"type":"message","user":"U0Y14MWA2","text":"had to fly away yesterday evening","ts":"1474636543.001023"},{"type":"message","user":"U0UGH3X7X","text":"what !? didn't even have a chance to say bye ... oh well, back to virtual mode","ts":"1474636592.001024"},{"type":"message","user":"U0XR6J961","text":"hm, how do i detect that i am out of date?","ts":"1474636604.001025"},{"type":"message","user":"U0XR6J961","text":"i could collect all checkpoints","ts":"1474636613.001026"},{"type":"message","user":"U0XR6J961","text":"the problem is that i might have N-1 checkpoints for different seqnos from N-1 replicas","ts":"1474636858.001027"},{"type":"message","user":"U0XR6J961","text":"so i think the better solution is:","ts":"1474636880.001028"},{"type":"message","user":"U0XR6J961","text":"if i receive a seqno i think is wrong, i drop the connection","ts":"1474636900.001029"},{"type":"message","user":"U0XR6J961","text":"when i reconnect, there is a handshake, and the other side gives me a set of signatures for its last checkpointed batch","ts":"1474636964.001030"},{"type":"message","user":"U0XR6J961","text":"then i do a state transfer","ts":"1474636994.001031"},{"type":"message","user":"U0XR6J961","text":"and i continue","ts":"1474636999.001032"},{"type":"message","user":"U0Y14MWA2","text":"I am not following","ts":"1474637139.001033"},{"type":"message","user":"U0Y14MWA2","text":"in general (not PBFT specific) one could always take f+1st highest (per block height) checkpoint message","ts":"1474637234.001034"},{"type":"message","user":"U0Y14MWA2","text":"and figure out one is late","ts":"1474637242.001035"},{"type":"message","user":"U0Y14MWA2","text":"this means at least one correct replica has a commit at that height","ts":"1474637275.001036"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1474637285.001037"},{"type":"message","user":"U0Y14MWA2","text":"if you are (sufficiently) behind","ts":"1474637291.001038"},{"type":"message","user":"U0Y14MWA2","text":"you can start looking for state transfer","ts":"1474637298.001039"},{"type":"message","user":"U0Y14MWA2","text":"other policies are imaginable...","ts":"1474637335.001040"},{"type":"message","user":"U0Y14MWA2","text":"but this is one example","ts":"1474637340.001041"},{"type":"message","user":"U1P1ZV6RF","text":"<@U0XR6J961> : this is what I assumed from the paper. I am simply curious, where are we with regards to limits of PBFT-driven network scalability which would not affect residual performance in terms of tx\/s.","ts":"1474637580.001042"},{"type":"message","user":"U0XR6J961","text":"the less replicas the higher performance","ts":"1474637600.001043"},{"type":"message","user":"U1P1ZV6RF","text":"obviously but this is a technical explanation. From business perspective, I can imagine that over time founding members of the business network allow newcomers to join and for different reasons, these would like to become qualified members (NVPs\/VPs). If a functional requirement of members is to maintain 100s tx\/s then at some point this will hit a wall due to a growing number of replicas. Therefore, an architectural decision would assume that new participants to the network would not be qualified to become full members but rather consume blockchain indirectly, through APIs.","ts":"1474638128.001044"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1474638451.001045"},{"type":"message","user":"U0ZJZBJLF","text":"anyone here? I have a question regarding the block commit validation policy","ts":"1474646241.001046"},{"type":"message","user":"U0ZJZBJLF","text":"(next arch, of course)","ts":"1474646250.001047"},{"type":"message","user":"U0KPFAZNF","text":"one of the things that are interesting here and in other distributed networks (thinking dynamo) is they often have the desirable performance properties that they converge on the fastest nodes in the network (rather than the slowest)","edited":{"user":"U0KPFAZNF","ts":"1474646304.000000"},"ts":"1474646289.001048"},{"type":"message","user":"U0ZJZBJLF","text":"isn't dynamo using sharding\/consistent hashing?","ts":"1474646340.001050"},{"type":"message","user":"U0KPFAZNF","text":"so, you absolutely want to use discretion in the admittance policy, but the good news is a small degree if mistakes can be tolerated","ts":"1474646357.001051"},{"type":"message","user":"U0KPFAZNF","text":"<@U0ZJZBJLF>  i am not referring to that aspect of the system","ts":"1474646384.001052"},{"type":"message","user":"U0KPFAZNF","text":"purely that something like PBFT or dynamo protocol tend to operate at the speed of the faster portion of the network that meets minimum quorum","ts":"1474646423.001053"},{"type":"message","user":"U0KPFAZNF","text":"rather than the weakest link","ts":"1474646433.001054"},{"type":"message","user":"U0ZJZBJLF","text":"you mean the speed of progress is the speed of the fastest write-quorum available","ts":"1474646456.001055"},{"type":"message","user":"U0KPFAZNF","text":"(or read, in the case of dynamo at least)","ts":"1474646473.001056"},{"type":"message","user":"U0KPFAZNF","text":"but yes","ts":"1474646477.001057"},{"type":"message","user":"U0KPFAZNF","text":"though I suppose that is likely also true elsewhere","ts":"1474646490.001058"},{"type":"message","user":"U0KPFAZNF","text":"what i mean is the admittance risk is reduced by the virtue of admitting one node (or a small number of nodes) doesn\u2019t necessarily expose the network to an unanticipated reduction in throughput per se","ts":"1474646598.001059"},{"type":"message","user":"U0KPFAZNF","text":"the slow nodes will be the ones disregrarded","ts":"1474646606.001060"},{"type":"message","user":"U0KPFAZNF","text":"doesn\u2019t mean you shouldn\u2019t be concerned, monitor, and\/or enforce","ts":"1474646628.001061"},{"user":"U1RLZ5729","text":"<@U1RLZ5729|abhishekseth> has joined the channel","type":"message","subtype":"channel_join","ts":"1474875069.001062"},{"user":"U2B3A70TX","text":"<@U2B3A70TX|soldat> has joined the channel","type":"message","subtype":"channel_join","ts":"1474900900.001063"},{"user":"U1MA81VBK","text":"<@U1MA81VBK|g_alexander> has joined the channel","type":"message","subtype":"channel_join","ts":"1474967619.001064"},{"user":"U2FR6FUJV","text":"<@U2FR6FUJV|niubwang> has joined the channel","type":"message","subtype":"channel_join","ts":"1474980846.001065"},{"type":"message","user":"U2FR6FUJV","text":"hi guys,  when i add a new validator peer (using PBFT),  the new peer can't sync  blocks from the others,  who can help me?","ts":"1474980863.001066"},{"type":"message","user":"U0XR6J961","text":"hi","ts":"1474980899.001067"},{"type":"message","user":"U0XR6J961","text":"you cannot do that dynamically","ts":"1474980912.001068"},{"type":"message","user":"U0XR6J961","text":"you will have to shut down the whole network, configure all for the new number of validators, then restart","ts":"1474980954.001069"},{"type":"message","user":"U0XR6J961","text":"then use the network as usual, and the new peer should sync up eventually","ts":"1474980978.001070"},{"type":"message","user":"U2FR6FUJV","text":"<@U0XR6J961>  hi, is this by design?  i want to dynamically add  new peers with not shut down the whole network","ts":"1474981419.001071"},{"type":"message","user":"U0XR6J961","text":"not implemented at the moment","ts":"1474981475.001072"},{"type":"message","user":"U0XR6J961","text":"will come in 1.0","ts":"1474981477.001073"},{"type":"message","user":"U0XR6J961","text":"i think","ts":"1474981479.001074"},{"type":"message","user":"U0PB67X4K","text":"eventually in 1.0 - yes","ts":"1474981489.001075"},{"type":"message","user":"U2FR6FUJV","text":"i want use the fabric for business, is that mean now i can't use this? when the 1.0  will come?","ts":"1474981651.001076"},{"type":"message","user":"U0XR6J961","text":"you can, you just can't change the set of validators without stopping the network for a moment","ts":"1474981962.001077"},{"type":"message","user":"U2FR6FUJV","text":"<@U0XR6J961>  for example, if i run 5 validators, then one of them is shut dowm for a moment, if this peer is restarted,  can it sync blocks form others?","ts":"1474982354.001078"},{"type":"message","user":"U0XR6J961","text":"if it is just shut down and restarted, yes","ts":"1474982389.001079"},{"type":"message","user":"U0XR6J961","text":"but 5 validators is usually not as good as 4","ts":"1474982412.001080"},{"type":"message","user":"U2FR6FUJV","text":"<@U0XR6J961>  what i want to do, is i want to run some validators in my server , and i want to the other guest users to run some validators, so they can get the block data <http:\/\/too.as|too.as> you mean, now i can't add validators for  new guest users","ts":"1474983076.001081"},{"type":"message","user":"U0XR6J961","text":"i think you want non-validator peers","ts":"1474983165.001082"},{"type":"message","user":"U0XR6J961","text":"which never really worked, i think","ts":"1474983172.001083"},{"type":"message","user":"U2FR6FUJV","text":"i think the non-validator peers now can't sync blocks too","ts":"1474983275.001084"},{"type":"message","user":"U2FR6FUJV","text":"i want the guest user can save the block data locally","ts":"1474983599.001085"},{"user":"U1KDHJT6H","text":"<@U1KDHJT6H|claytonsims> has joined the channel","type":"message","subtype":"channel_join","ts":"1475003516.001086"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ULK2JPP> <@U1KFCPFQA> I've created an epic around supporting embedding orderer configuration in the raw ledger <https:\/\/jira.hyperledger.org\/browse\/FAB-495> if you would like to take a look","ts":"1475010003.001087"},{"type":"message","user":"U0XPR4NP4","text":"<@U1BC5A0F9> You might also have an opinion","ts":"1475010152.001088"},{"user":"U1BC5A0F9","inviter":"U0XPR4NP4","text":"<@U1BC5A0F9|elli> has joined the channel","type":"message","subtype":"channel_join","ts":"1475010164.001089"},{"type":"message","user":"U1KFCPFQA","text":"Jason, these would be transactions on the \u2018main\u2019 ledger right?  As opposed to a side ledger for orderer config","ts":"1475010415.001090"},{"type":"message","user":"U0XPR4NP4","text":"Correct","ts":"1475010420.001091"},{"type":"message","user":"U0XPR4NP4","text":"There could be a side ledger to help orchestrate for an ordering network, but this needs to be per chain I believe","ts":"1475010441.001092"},{"type":"message","user":"U1KFCPFQA","text":"and i assume ordering service would need to read the ledger state right","ts":"1475010450.001093"},{"type":"message","user":"U0XPR4NP4","text":"Well, that is the question","ts":"1475010651.001094"},{"type":"message","user":"U0XPR4NP4","text":"You'll notice in FAB-499 I was intentionally non-specific","ts":"1475010669.001095"},{"type":"message","user":"U0XPR4NP4","text":"If we pull in the ledger, and do real MVCC parsing, then we'll need to bring some amount of stuff along","edited":{"user":"U0XPR4NP4","ts":"1475010701.000000"},"ts":"1475010689.001096"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> I'd especially like your input in regards to FAB-499.  If the orderer is going to need to understand how to apply a fabric type transaction (or least pieces of it), what is your opinion of simply pulling in the peer support for it, vs trying to build something lighter and more ad-hoc?  Basically, the idea would be that the ordering service would be a stripped down version of the 0.5 framework (with determinism), where the only transaction type which actually executes is a reconfiguration transaction, but we re-use the peer code for doing validation of endorsement, updating the database, MVCC etc.  This seems a bit heavy handed and maybe more than we really want the ordering service to do.  On the other hand, it seems like it could really lend itself well to code re-use, so that we are not solving the same problems twice.","ts":"1475010798.001098"},{"type":"message","user":"U1KFCPFQA","text":"With a naive approach we\u2019d push the entire state database to raw ledger side\u2026 we hadn\u2019t planned on that previously, and i don\u2019t think you want the entire state database actually. Maybe a subledger with state database for orderer config that everybody shares?  And for the main system ledger, ordering service doesn\u2019t keep the state database?","ts":"1475010853.001099"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XQ35CDD> <@U0UGH3X7X> <@U1KDAMDJ7> Your opinions also welcome","ts":"1475010857.001100"},{"type":"message","user":"U0XPR4NP4","text":"I would say absolutely no to pushing the entire state database to the raw ledger side","ts":"1475010882.001101"},{"type":"message","user":"U0XPR4NP4","text":"If by that you mean to the orderer","ts":"1475010895.001102"},{"type":"message","user":"U0XPR4NP4","text":"We would just want the ledger for the orderer configuration system chaincode","ts":"1475010915.001103"},{"type":"message","user":"U1KFCPFQA","text":"right, that would be the naive approach, which i agree we wouldn\u2019t want","ts":"1475010916.001104"},{"type":"message","user":"U0XPR4NP4","text":"Which seems easy enough if we only 'execute' the orderer configuration transactions","ts":"1475010943.001105"},{"type":"message","user":"U0PB67X4K","text":"<@U0XPR4NP4>  -  while I think on one side you are saying reuse some \"fabric\" mechanisms for the PBFT ordering service in order to provide the ability to update the \"config\" (membership, etc) of the PBFT ordering service, it also sounds like you are proposing a very tight coupling of the ordering service and the fabric","ts":"1475011318.001106"},{"type":"message","user":"U0PB67X4K","text":"which is not what we want IMHO.  But hey - what do I know?","ts":"1475011346.001107"},{"type":"message","user":"U0PB67X4K","text":"To me, I should be able to use any ordering service without consuming it from the fabric","ts":"1475011400.001108"},{"type":"message","user":"U0XPR4NP4","text":"<@U0PB67X4K> The fabric and the ordering service need to agree on the orderer configuration.  And, in order to synchronize it with the chain, it most likely needs to be embedded in the chain","ts":"1475011414.001109"},{"type":"message","user":"U0XPR4NP4","text":"My initial thought was, embed some binary blob, which we describe the format of, and done","ts":"1475011443.001110"},{"type":"message","user":"U0XPR4NP4","text":"But as we talked about it, things like \"Well, we'll need to validate that the right signatures are here\" and so forth, it sounded a lot like endorsement","ts":"1475011468.001111"},{"type":"message","user":"U0PB67X4K","text":"So I am not saying that an implementation of the ordering service could not choose to use pieces of the fabric, but what I am saying is that I should be able to use that ordering service from something other than the fabric","ts":"1475011540.001112"},{"type":"message","user":"U0XPR4NP4","text":"Ah, yes, absolutely.  I am not suggesting you could not do that","ts":"1475011565.001113"},{"type":"message","user":"U0XPR4NP4","text":"Maybe, the fabric transaction format is too complicated to reasonably expect a non-fabric application to support","ts":"1475011589.001114"},{"type":"message","user":"U0XPR4NP4","text":"As I was trying to come up with a way of generating this fabric-type-transaction, I realized it was going to be quite a pain, which why I started thinking about pulling the common code bits in","ts":"1475011665.001115"},{"type":"message","user":"U0XPR4NP4","text":"But ultimately, the ordering service takes in blobs, and spits out batches\/blocks of blobs","ts":"1475011700.001116"},{"type":"message","user":"U0XPR4NP4","text":"Just in the case that that blob happened to be the special configuration transaction type blob, it would do some other stuff","ts":"1475011718.001117"},{"type":"message","user":"U0XPR4NP4","text":"(I'm also a little concerned with the overhead of inspecting every blob to see if it's a special type.  However, since we're already going to have to be hashing and checking signatures, it seems like not a lot of additional overhead)","ts":"1475011826.001118"},{"type":"message","user":"U0PB67X4K","text":"well you could avoid that by having a special \"channel\" for config transactions","ts":"1475011860.001119"},{"type":"message","user":"U0PB67X4K","text":"that's what lots of messaging servers do","ts":"1475011871.001120"},{"type":"message","user":"U0PB67X4K","text":"they have \"system\" topics and queues","ts":"1475011880.001121"},{"type":"message","user":"U0XPR4NP4","text":"Right","ts":"1475011885.001122"},{"type":"message","user":"U0XPR4NP4","text":"The question is synchronizing that configuration to the other chains","ts":"1475011901.001123"},{"user":"U1TMQDYKE","text":"<@U1TMQDYKE|wil.pannell> has joined the channel","type":"message","subtype":"channel_join","ts":"1475011911.001124"},{"type":"message","user":"U0XPR4NP4","text":"How do you know that at block 30 that you should be looking for a different set of signatures?","ts":"1475011921.001125"},{"type":"message","user":"U0XPR4NP4","text":"You could embed which block the configuration change applies to in the special system chain, but how do you know you have an up to date enough copy of the system chain?","ts":"1475011959.001126"},{"type":"message","user":"U0XPR4NP4","text":"Having it within the same message stream solves a lot of problems, though I admit, it creates some too.  I'm certainly open to other approaches.","ts":"1475012011.001127"},{"type":"message","user":"U0PB67X4K","text":"and doesn't the problem become worse with multiple channels?   we would be guaranteeing order per channel but not total order across channels","ts":"1475012020.001128"},{"type":"message","user":"U0XPR4NP4","text":"Yes, every channel would need to get a 'reconfiguration transaction' when the configuration changed","ts":"1475012055.001129"},{"type":"message","user":"U0XPR4NP4","text":"I would expect for reconfiguration events to be pretty rare, but it's a concern","ts":"1475012082.001130"},{"type":"message","user":"U0PB67X4K","text":"so for example, if for PBFT we decide that you need to receive f+1 of the same message before \"delivering\" to the raw ledger and then at some point you increase the number of ordering nodes, how do you handle that?","ts":"1475012093.001131"},{"type":"message","user":"U0PB67X4K","text":"okay - so you insert a tx in the stream of every channel?","ts":"1475012129.001132"},{"type":"message","user":"U0XPR4NP4","text":"Right","ts":"1475012133.001133"},{"type":"message","user":"U0XPR4NP4","text":"I don't see any way around that, especially if you decide you want to scale your ordering service.  You might have a single service hosting 10k channels, and you decide you want to move half of the channels to a new set of nodes.  Not sure how else you do it.","ts":"1475012202.001134"},{"type":"message","user":"U0PB67X4K","text":"and I guess it does not have to be \"atomic\" across all channels - it just has to make it into all channels","ts":"1475012205.001135"},{"type":"message","user":"U0XPR4NP4","text":"Right","ts":"1475012210.001136"},{"type":"message","user":"U0PB67X4K","text":"but this makes the consumer side logic a bit complex in some cases - for example I can listen for multiple channels on the same physical connection, but now my handlers for each channel might have a different policy for a short period of time.    On the other hand, from the consuming \/ committing peer, they really should not be aware of any of this if we handle it in the \"ordering service client\" piece","ts":"1475012356.001137"},{"type":"message","user":"U0XPR4NP4","text":"Right.  And, I would argue, absolutely your ordering configuration might deliberately be different for different channels.","ts":"1475012391.001138"},{"type":"message","user":"U0PB67X4K","text":"and I guess these config transactions would be a block with a single tran?","ts":"1475012397.001139"},{"type":"message","user":"U0XPR4NP4","text":"You could implement them that way, though I see no immediate harm in including them in a batch with other trans","ts":"1475012426.001140"},{"type":"message","user":"U0PB67X4K","text":"true enough.  although kind of nice to treat them a bit special","ts":"1475012470.001141"},{"type":"message","user":"U0XPR4NP4","text":"Yes, making them easy to spot is a plus","ts":"1475012492.001142"},{"type":"message","user":"U0XPR4NP4","text":"At the end of the day, the fabric and the ordering service both need to have the same view of \"who's ordering\" for the same blocks.  How we synchronize this data is up in the air to me.  I think it make sense to send it across as part of the chain.  It looks a whole lot like a fabric transaction, because we will want to ultimately validate it with signatures etc., but really, the fabric transaction format is probably more complex than necessary for it.  I'd also be open to making a new transaction type (the data structure already supports this) which is much simpler just for config.  But, then we have to re-invent some stuff which is already handled by the existing transaction.  I'd really love to be persuaded one way or the other.","ts":"1475012650.001143"},{"type":"message","user":"U0XPR4NP4","text":"In discussions last Thursday I think <@U0UKTPMG8> was a big proponent of re-using the fabric transaction, maybe he wants to voice his opinion here too.","ts":"1475012737.001144"},{"type":"message","user":"U0UKTPMG8","text":"<@U0XPR4NP4> <@U0PB67X4K> yes, I think we can use transaction now as I would in the future like the option to have the consensus service request a change through endorsement of the associated channel","ts":"1475014322.001145"},{"type":"message","user":"U0XV1HDL3","text":"<@U0XPR4NP4> , this \"orderer\" component\/service, is this the same as consensus service? ie., those nodes that run a distributed atomic broadcast \/ consensus protocol?","ts":"1475047836.001146"},{"type":"message","user":"U0XV1HDL3","text":"if yes: every implementation of this will have to come with a \"stub\" library to be run by the other peers that receive the output from the consensus service; this component is specific to the choice (whether solo or pbft, say) and will know how to parse these special tx that contain re-configuration info; so that it can update its list of N signing node keys, say.","ts":"1475047971.001147"},{"type":"message","user":"U0XR6J961","text":"i think that whole new design is way complicated and not layered properly anymore","ts":"1475055191.001156","reactions":[{"name":"+1","users":["U0XQ35CDD"],"count":1}]},{"type":"message","user":"U0XR6J961","text":"it started out as a quest to layer components and isolate them","ts":"1475055205.001157"},{"type":"message","user":"U0XR6J961","text":"and now, during implementation phase, we're again adding requirements last minute","ts":"1475055231.001158"},{"type":"message","user":"U0XR6J961","text":"channels only makes sense as a (de)multiplex part right at ordering ingress\/egress.  everything inside should treat all of these as blobs, no matter which channel they came in.","ts":"1475055300.001159"},{"type":"message","user":"U0XR6J961","text":"given that we have all these requirements replicating the work of a fabric peer, i'd say throw away the design and integrate the consensus service back into the fabric peer","ts":"1475055489.001160"},{"type":"message","user":"U0XR6J961","text":"this time with better abstraction","ts":"1475055501.001161"},{"type":"message","user":"U0XR6J961","text":"then we save on the raw ledger on consensus side, raw ledger on fabric peer side, we only have a validated ledger, we don't have to validate signatures in the orderer, because the peer already does so, and reconfiguration is just a headache once and not twice","ts":"1475055610.001162"},{"type":"message","user":"U0XR6J961","text":"and retain the submitting peer so that you don't have to propagate the configuration change to all clients (sdk) as well","ts":"1475055654.001163"},{"type":"message","user":"U0XR6J961","text":"and i don't know what these channels are supposed to be.  are they sidechains?","ts":"1475055724.001164"},{"type":"message","user":"U0XQ35CDD","text":"Effectively, yes.","ts":"1475055761.001165"},{"type":"message","user":"U0XR6J961","text":"but they're not being hooked into the main chain?","ts":"1475055786.001166"},{"type":"message","user":"U0XR6J961","text":"and they're also not designed from first principles","ts":"1475055799.001167"},{"type":"message","user":"U0PB67X4K","text":"once again, maybe we need to go back and define the purpose of the ordering service and basic features it needs to support - aka first principles","ts":"1475056854.001168"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1475056876.001169"},{"type":"message","user":"U0XR6J961","text":"because right now it looks like the ordering service is its own blockchain, and then there is a second blockchain that interprets the first one","ts":"1475056920.001170"},{"type":"message","user":"U0PB67X4K","text":"What is the ordering service?\nWhat features does it need to support?\nHow do \"clients\" interact with it?\netc\n\nRIGHT - and I do not like that part one bit","ts":"1475056949.001171"},{"type":"message","user":"U0XR6J961","text":"but they're not in the same process, yet they need to share a lot of configuration","ts":"1475056950.001172"},{"type":"message","user":"U0PB67X4K","text":"personally I don't think that they need to have this tight coupling of sharing","ts":"1475056973.001173"},{"type":"message","user":"U0XR6J961","text":"it may be better to follow what everybody else seems to be doing, which is combine app+consensus+storage in one process","ts":"1475057012.001174"},{"type":"message","user":"U0PB67X4K","text":"I think that the ordering service needs to provide \"meta information\" for its \"clients\" to use and those clients can decide what they want to do with that information","ts":"1475057019.001175"},{"type":"message","user":"U0XR6J961","text":"look at reliable delivery, for example","ts":"1475057046.001176"},{"type":"message","user":"U0PB67X4K","text":"actually, more people are moving away from that - Tendermint, Axoni, etc","ts":"1475057053.001177"},{"type":"message","user":"U0XR6J961","text":"as a client submitting something to bft, i need to connect to at least f+1 consensus nodes","ts":"1475057101.001178"},{"type":"message","user":"U0PB67X4K","text":"agreed","ts":"1475057113.001179"},{"type":"message","user":"U0XR6J961","text":"so i need to know the whole set of consensus nodes (which can change)","ts":"1475057117.001180"},{"type":"message","user":"U0PB67X4K","text":"agreed","ts":"1475057123.001181"},{"type":"message","user":"U0XR6J961","text":"so how do i do this?","ts":"1475057127.001182"},{"type":"message","user":"U0XR6J961","text":"i can't go and ask one bootstrap node \"what other nodes are there?\"","ts":"1475057142.001183"},{"type":"message","user":"U0PB67X4K","text":"BTW - that's exactly what we do today  :disappointed:","ts":"1475057206.001184"},{"type":"message","user":"U0PB67X4K","text":"in the current fabric","ts":"1475057214.001185"},{"type":"message","user":"U0XR6J961","text":"yep","ts":"1475057251.001186"},{"type":"message","user":"U0XR6J961","text":"i know","ts":"1475057254.001187"},{"type":"message","user":"U0XR6J961","text":"<@U0PB67X4K>: i just talked with <@U0Y14MWA2>","edited":{"user":"U0XR6J961","ts":"1475068730.000000"},"ts":"1475068720.001188"},{"type":"message","user":"U0XR6J961","text":"it seems to me that the ordering service is really *the* blockchain implementation","ts":"1475068750.001190"},{"type":"message","user":"U0XR6J961","text":"and the fabric peer is an application server that uses this blockchain","ts":"1475068765.001191"},{"type":"message","user":"U0XR6J961","text":"i think that is important to realize","ts":"1475069963.001192"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> Completely agree with that assessment","ts":"1475072410.001193"},{"type":"message","user":"U0XPR4NP4","text":"Ordering service builds a blockchain, peer network runs application logic which uses the blockchain in some interesting way.  It so happens they may also choose to write this application logic output into another blockchain structure (the validated chain), but as we've pointed out before, that's not strictly necessary and is really only a tool to help with auditing","ts":"1475072862.001194"},{"type":"message","user":"U0XPR4NP4","text":"Assuming there's agreement that the orderer network configuration should be on the chain, and that the users of the orderer network should read this data to know how to validate what is returned from the ordering service.  How do we specifically convey this information (ie, what datastructure)?  The three options I see:\n\n1. Use some orderer specific crafted data structure, modifying the peer to understand this new type\n2. Define a new fabric transaction type, and embed some orderer specific data structure, modifying the peer to understand this new type\n3. Utilize the existing fabric transaction type, modifying the orderer to understand this existing type","ts":"1475073827.001195"},{"type":"message","user":"U0XPR4NP4","text":"As I see the pros\/cons\n\n1. The type will be minimally complex, will require no knowledge of the fabric introduced into the orderer, but will push complexity into the peer and any tools which want to consume the chain, concepts like versioning and signatures would need to be re-invented\n2. The type will be nearly minimally complex, will require very limited knowledge of the fabric introduced into the orderer, complexity is pushed into the peer, but it's more obvious for tools as the type is at least defined, concepts like versioning and signatures would need to be re-invented\n3. The type is very complex, requires some implementation specific  knowledge of the fabric introduced into the orderer, but complexity is very low at the peer and simple for tools operating on the chain, the format is already well thought out to be cryptographically correct, supports versioning, already has a signature scheme","ts":"1475074335.001196"},{"type":"message","user":"U0XPR4NP4","text":"Also open to opinions that my assumptions are entirely invalid.  Or other options I failed to include.\n\n<@U0XV1HDL3> <@U0XR6J961> <@U0Y14MWA2> <@U0PB67X4K> <@U0UKTPMG8> <@U1KDAMDJ7> <@U0UGH3X7X> <@U1BC5A0F9> <@U0XQ35CDD> ^^^","ts":"1475074673.001197"},{"type":"message","user":"U1BC5A0F9","text":"Hi, for either option i would say that such transactions would need to be authenticated (through signatures coming from a threshold of orderers or some ordering service administrator), no?","ts":"1475074954.001198"},{"type":"message","user":"U0XPR4NP4","text":"The ordering service should never deliver an invalid configuration transaction, so I actually think it's okay to punt on this for now.","ts":"1475075008.001199"},{"type":"message","user":"U1BC5A0F9","text":"That is if such ordering service messages have to do with changes in the configuration of the orderers, including adding\/deleting members, the transactions that cause this to happen should be authenticated as an ordering service policy imposes, no?","ts":"1475075028.001200"},{"type":"message","user":"U0XPR4NP4","text":"Ultimately though, the ordering service will need to be able to authenticate a valid reconfiguration transaction, which would require signature validation.  The key distinction being if the peer sees a reconfiguration transaction on the raw chain, it knows the consensus service agrees with it.  If the consensus service sees a reconfiguration transaction, it can simply discard it, for now (aside from genesis).","ts":"1475075076.001201"},{"type":"message","user":"U0XPR4NP4","text":"Right, I think you have it absolutely correct <@U1BC5A0F9> the signature scheme is for the orderers to validate it, not the peers.","ts":"1475075112.001202"},{"type":"message","user":"U1BC5A0F9","text":"Let me rephrase the justification of why signatures may be needed.","edited":{"user":"U1BC5A0F9","ts":"1475075158.000000"},"ts":"1475075134.001203"},{"type":"message","user":"U1BC5A0F9","text":"To my understanding there should be some entity or entities that are authorized to reconfigure the network.","ts":"1475075202.001205"},{"type":"message","user":"U1BC5A0F9","text":"That is either an ordering service admin, or the orderers jointly. Now in the first case, the first one who submits a transaction to the orderers needs to be authenticated. No? Meaning that orderers should not accept such transactions if they come from anyone.","ts":"1475075293.001206"},{"type":"message","user":"U1BC5A0F9","text":"Or i should ask, how would you see the reconfiguration taking place?","ts":"1475075347.001207"},{"type":"message","user":"U1BC5A0F9","text":"is it the case that the admin reconfigures all peers that a change CHANGE should take place, and each orderer tries to submit a transaction that reflects that CHANGE","ts":"1475075380.001208"},{"type":"message","user":"U1BC5A0F9","text":"then if CHANGE is in the queue of tasks to be done by the other orderers then they all agree. Is this how it would be done?","ts":"1475075413.001209"},{"type":"message","user":"U0XPR4NP4","text":"Orderers must all start with the same configuration, or they cannot form a network.  This configuration is encoded as a transaction and embedded in the genesis block, and because this configuration was manually propagated by an administrator to each orderer, no signature check is really needed.  If the administrator wanted to be malicious, they could change keys etc.  Eventually, a live orderer network will need to be able to reconfigure, and in this case, yes, there must be some way to validate that the instruction is valid according to whatever policy the orderer service wants.  I would think a threshold of signatures from whatever entities control the network.  However, since we don't need to support reconfiguration out of the gate, we can simply have a policy of \"no new reconfiguration transaction is valid\", in order to simply get the network up and running.  This prevents a malicious peer from forcing a reconfiguration of the network.","edited":{"user":"U0XPR4NP4","ts":"1475075457.000000"},"ts":"1475075416.001210"},{"type":"message","user":"U1BC5A0F9","text":"Aha, ok","ts":"1475075471.001212"},{"type":"message","user":"U1BC5A0F9","text":"then agreed :slightly_smiling_face:","ts":"1475075477.001213"},{"type":"message","user":"U1BC5A0F9","text":"But then why would you need the options 1-3?","ts":"1475075515.001214"},{"type":"message","user":"U1BC5A0F9","text":"Is it only to say \"how would we express this static configuration\"?","ts":"1475075537.001215"},{"type":"message","user":"U0XPR4NP4","text":"Correct.  Today it would be to express static configuration, however, because we anticipate dynamic configuration in the future, I thought we should pick or design the datastructure in anticipation of that","ts":"1475075596.001216"},{"type":"message","user":"U0XPR4NP4","text":"It seems odd and arbitrary to have different datastructures for initial (static) and later dynamic configuration specification","ts":"1475075619.001217"},{"type":"message","user":"U1BC5A0F9","text":"Ah then, for dynamic reconf you would need authenticated messages no?","ts":"1475075623.001218"},{"type":"message","user":"U0XPR4NP4","text":"Yes","ts":"1475075627.001219"},{"type":"message","user":"U1BC5A0F9","text":"So, i would just add that for (1) and (2) one would need to do a lot of the work already done on (3)","ts":"1475075703.001220"},{"type":"message","user":"U0XPR4NP4","text":"Yes, the thing that I like about (3) is exactly that we don't have to do that work.  The thing I do not like about (3) is that it pulls in a lot of other fabric artifacts, like the MVCC+Postimage data model","ts":"1475075752.001221"},{"type":"message","user":"U1BC5A0F9","text":"Also addition and\/or removal of CAs of the endorsement network (if this is still valid statement) would need to be communicated ot the orderers, and changes to the orderer config would need to be understood by the committers no?","ts":"1475075759.001222"},{"type":"message","user":"U1BC5A0F9","text":"aha","ts":"1475075772.001223"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I was not including those in this scope, but maybe it makes sense to.","ts":"1475075835.001224"},{"type":"message","user":"U0XPR4NP4","text":"The feeling I am getting is that maybe we need to modify our transaction definition, to allow transactions without the strict MVCC+Postimage data model, so that we can retain the signature validation, versioning, crypto correctness, etc., but not have to pull all of the fabric pieces in","ts":"1475075910.001225"},{"type":"message","user":"U1BC5A0F9","text":"for the ESCC and VSCC of the ordering service","ts":"1475075914.001226"},{"type":"message","user":"U1BC5A0F9","text":"cant it be something that requires only one signature, e.g., client signature?","ts":"1475075929.001227"},{"type":"message","user":"U1BC5A0F9","text":"client in this case would be the admin","ts":"1475075938.001228"},{"type":"message","user":"U0XPR4NP4","text":"Today the ordering service has no *SCC, because that would be pulling in pieces of the fabric we were hoping not to","ts":"1475075952.001229"},{"type":"message","user":"U1BC5A0F9","text":"and move all the execution to the vscc side?","ts":"1475075956.001230"},{"type":"message","user":"U1BC5A0F9","text":"would it make sense to run a client only?","ts":"1475075999.001231"},{"type":"message","user":"U1BC5A0F9","text":"on the ordering service (admin side)","ts":"1475076013.001232"},{"type":"message","user":"U1BC5A0F9","text":"that talks to the endorser nodes of the blockchain the ones that endorse system transactions","ts":"1475076040.001233"},{"type":"message","user":"U1BC5A0F9","text":"understand the issue","ts":"1475076054.001234"},{"type":"message","user":"U1BC5A0F9","text":"However, i do see, that even if you dont want to call it vscc, there has to be some small piece of code that would parse the tx-s meant for the ordering service, and which would decide if these tx-s are valid or not","ts":"1475076216.001235"},{"type":"message","user":"U1BC5A0F9","text":"updates of certificates of the admin, or of orderer certificate validity are all operations that need to take place at the same logical time for all orderers no?","ts":"1475076272.001236"},{"type":"message","user":"U0XPR4NP4","text":"Yes, that is the thing, it all looks very much like VSCC and assorted other *SCC tasks.  Same logical time yes, but that is easy since they are doing consensus","ts":"1475076294.001237"},{"type":"message","user":"U1BC5A0F9","text":"So if you have some sort of super light weight VSCC that would still work right, and no ESCC","ts":"1475076335.001238"},{"type":"message","user":"U1BC5A0F9","text":"specifically for these transactions (the only ones processed by orderers)","ts":"1475076387.001239"},{"type":"message","user":"U0XPR4NP4","text":"Right","ts":"1475076524.001240"},{"type":"message","user":"U0XPR4NP4","text":"Do you think it would be possible to modify the transaction type so that it it preserves the aspects you are concerned about without pulling in the fabric details?","ts":"1475076641.001241"},{"type":"message","user":"U1BC5A0F9","text":"could be yes","ts":"1475076781.001242"},{"type":"message","user":"U0XR6J961","text":"seems we're doing everything twice","ts":"1475076833.001243"},{"type":"message","user":"U0XR6J961","text":"if the orderer was part of the peer, would you just look at some system table for consensus?","ts":"1475076879.001244"},{"type":"message","user":"U0XR6J961","text":"i don't quite understand the difference between (1) and (2)","ts":"1475076911.001245"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I too am concerned we are doing everything twice.","ts":"1475077042.001246"},{"type":"message","user":"U0XPR4NP4","text":"The difference between (1) and (2) is basically that the fabric defines a `Transaction` which basically has two fields: `type int` and `contents []byte` (names might be wrong, but this is the idea)","ts":"1475077089.001247"},{"type":"message","user":"U0XPR4NP4","text":"Today, the fabric only supports `type = 0` but it is there if we ever wanted to support a radically different transaction type","ts":"1475077109.001248"},{"type":"message","user":"U0XPR4NP4","text":"So, we could define a new `type = 1` with a different payload which is not the `endorsed proposal`","ts":"1475077133.001249"},{"type":"message","user":"U0XPR4NP4","text":"So (1) would be, we define a new data type which is not a type of `Transaction`, and (2) would be we define a new `Transaction` type.  They are extremely similar, just whether we reuse the exiting envelope","ts":"1475077196.001250"},{"type":"message","user":"U0XR6J961","text":"right, but a consensus-admin-endorsed consensus configuration setting","ts":"1475077204.001251"},{"type":"message","user":"U0XR6J961","text":"which has a transparent part: peers (addresses, certificates), byz F, and it has an opaque part which is specific to the consensus implementation","ts":"1475077276.001252"},{"type":"message","user":"U0XPR4NP4","text":"Right","ts":"1475077296.001253"},{"type":"message","user":"U0XR6J961","text":"seems fine","ts":"1475077324.001254"},{"type":"message","user":"U0XR6J961","text":"and the correctness of this is authenticated towards the peer because consensus signed off on it","ts":"1475077349.001255"},{"type":"message","user":"U0XR6J961","text":"jyellick: i just talked with <@U0Y14MWA2> about state transfer in sbft","ts":"1475077369.001256"},{"type":"message","user":"U0XR6J961","text":"and how it probably can be implemented via consensus client","ts":"1475077389.001257"},{"type":"message","user":"U0XPR4NP4","text":"<@U0UKTPMG8> Really believes that the peer network is going to want to see endorsements from its endorsers on the orderer reconfiguration.  I think that's not realistic, but, be aware that there is support for this.","ts":"1475077393.001258"},{"type":"message","user":"U1BC5A0F9","text":"Additional note: for enforcing access control over different channels, e.g., adding or removing listeners on a specific channel, orderers would still need to process some form of transactions that the fabric undersrtands no?","ts":"1475077393.001259"},{"type":"message","user":"U0XR6J961","text":"i.e. connect to other atomicbroadcast server to retrieve missing blocks","ts":"1475077408.001260"},{"type":"message","user":"U0XPR4NP4","text":"Agreed","ts":"1475077430.001261"},{"type":"message","user":"U0XPR4NP4","text":"That would have been my first instnct","ts":"1475077437.001262"},{"type":"message","user":"U0XPR4NP4","text":"instinct*","ts":"1475077440.001263"},{"type":"message","user":"U0XR6J961","text":"jyellick: then just add their signatures into the multisig","ts":"1475077440.001264"},{"type":"message","user":"U0XPR4NP4","text":"But I still don't have a literal data structure and ingress method for reconfiguration.  Maybe you can just answer some questions....\n\n1. Does reconfiguration come in as a broadcast message?","ts":"1475077543.001265"},{"type":"message","user":"U0XR6J961","text":"i gotta run, so i'll revisit this later","ts":"1475077565.001266"},{"type":"message","user":"U0XR6J961","text":"i guess in the model yes","ts":"1475077594.001267"},{"type":"message","user":"U0XR6J961","text":"when we share it with the peer","ts":"1475077600.001268"},{"type":"message","user":"U0XPR4NP4","text":"Okay, understand you need to run.  Please think on this.  I will try to think on what you've said as well and we can pick this up tomorrow?","ts":"1475077662.001269"},{"type":"message","user":"U0XPR4NP4","text":"<@U1BC5A0F9> I have been doing my best to push channels out of my head, but yes, there will need to be some mechanism for reconfiguring them.  I don't know whether we should bulid support for channels into the atomicbroadcast api, or whether we should simply create a new service which wraps it and handles those details.  Channels is a sudden piece of significant additional complexity at the ordering side","ts":"1475077925.001270"},{"type":"message","user":"U1BC5A0F9","text":"Indeed :slightly_smiling_face:","ts":"1475077968.001271"},{"type":"message","user":"U0Y14MWA2","text":"I am inclined to avoiding state transfer in sbft","ts":"1475079161.001272"},{"type":"message","user":"U0Y14MWA2","text":"We do not need it as there is no state that cannot br tetrivef from a single block","ts":"1475079205.001273"},{"type":"message","user":"U0Y14MWA2","text":"I should not drive and slack... Leads to typos","ts":"1475079247.001274","reactions":[{"name":"+1","users":["U0PB67X4K"],"count":1}]},{"type":"message","user":"U0Y14MWA2","text":"Catching up boils down to obtaining a weak checkpoint certificate and picking up view number and sequence number from there","ts":"1475079538.001275"},{"type":"message","user":"U0Y14MWA2","text":"From that point on filling in the gap can be done lazily, in the background","ts":"1475079621.001276"},{"type":"message","user":"U0Y14MWA2","text":"Sort of a 'lazy state transfer'","ts":"1475079656.001277"},{"type":"message","subtype":"file_share","text":"<@U0ZJZBJLF|yacovm> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/yacovm\/F2H5ABA58\/-.go|Untitled>","file":{"id":"F2H5ABA58","created":1475083058,"timestamp":1475083058,"name":"-.go","title":"Untitled","mimetype":"text\/plain","filetype":"go","pretty_type":"Go","user":"U0ZJZBJLF","editable":true,"size":1536,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2H5ABA58\/-.go?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2H5ABA58\/download\/-.go?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/yacovm\/F2H5ABA58\/-.go","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2H5ABA58-3db3ea85c8","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/yacovm\/F2H5ABA58\/-.go\/edit","preview":"16:44:45 --- FAIL: TestClassicBackToBackStateTransfer (60.20s)\r\n16:44:45 2016\/09\/28 16:44:45 Halting timer\r\n16:44:45 panic: Test network took more than 60 seconds to resolve requests, this usually indicates a hang [recovered]\r\n16:44:45 \tpanic: Test network took more than 60 seconds to resolve requests, this usually indicates a hang\r\n16:44:45 \r","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre><span class=\"cm-number\">16<\/span>:<span class=\"cm-number\">44<\/span>:<span class=\"cm-number\">45<\/span> <span class=\"cm-operator\">---<\/span> <span class=\"cm-variable\">FAIL<\/span>: <span class=\"cm-variable\">TestClassicBackToBackStateTransfer<\/span> (<span class=\"cm-number\">60.20<\/span><span class=\"cm-variable\">s<\/span>)<\/pre><\/div>\n<div><pre><span class=\"cm-number\">16<\/span>:<span class=\"cm-number\">44<\/span>:<span class=\"cm-number\">45<\/span> <span class=\"cm-number\">2016<\/span><span class=\"cm-operator\">\/<\/span><span class=\"cm-number\">0<\/span><span class=\"cm-number\">9<\/span><span class=\"cm-operator\">\/<\/span><span class=\"cm-number\">28<\/span> <span class=\"cm-number\">16<\/span>:<span class=\"cm-number\">44<\/span>:<span class=\"cm-number\">45<\/span> <span class=\"cm-variable\">Halting<\/span> <span class=\"cm-variable\">timer<\/span><\/pre><\/div>\n<div><pre><span class=\"cm-number\">16<\/span>:<span class=\"cm-number\">44<\/span>:<span class=\"cm-number\">45<\/span> <span class=\"cm-atom\">panic<\/span>: <span class=\"cm-variable\">Test<\/span> <span class=\"cm-variable\">network<\/span> <span class=\"cm-variable\">took<\/span> <span class=\"cm-variable\">more<\/span> <span class=\"cm-variable\">than<\/span> <span class=\"cm-number\">60<\/span> <span class=\"cm-variable\">seconds<\/span> <span class=\"cm-variable\">to<\/span> <span class=\"cm-variable\">resolve<\/span> <span class=\"cm-variable\">requests<\/span>, <span class=\"cm-variable\">this<\/span> <span class=\"cm-variable\">usually<\/span> <span class=\"cm-variable\">indicates<\/span> <span class=\"cm-variable\">a<\/span> <span class=\"cm-variable\">hang<\/span> [<span class=\"cm-variable\">recovered<\/span>]<\/pre><\/div>\n<div><pre><span class=\"cm-number\">16<\/span>:<span class=\"cm-number\">44<\/span>:<span class=\"cm-number\">45<\/span> \t<span class=\"cm-atom\">panic<\/span>: <span class=\"cm-variable\">Test<\/span> <span class=\"cm-variable\">network<\/span> <span class=\"cm-variable\">took<\/span> <span class=\"cm-variable\">more<\/span> <span class=\"cm-variable\">than<\/span> <span class=\"cm-number\">60<\/span> <span class=\"cm-variable\">seconds<\/span> <span class=\"cm-variable\">to<\/span> <span class=\"cm-variable\">resolve<\/span> <span class=\"cm-variable\">requests<\/span>, <span class=\"cm-variable\">this<\/span> <span class=\"cm-variable\">usually<\/span> <span class=\"cm-variable\">indicates<\/span> <span class=\"cm-variable\">a<\/span> <span class=\"cm-variable\">hang<\/span><\/pre><\/div>\n<div><pre><span class=\"cm-number\">16<\/span>:<span class=\"cm-number\">44<\/span>:<span class=\"cm-number\">45<\/span> <\/pre><\/div>\n<\/div>\n<\/div>\n","lines":24,"lines_more":19,"preview_is_truncated":true,"channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0ZJZBJLF","upload":true,"display_as_bot":false,"username":"<@U0ZJZBJLF|yacovm>","bot_id":null,"ts":"1475083059.001278"},{"type":"message","user":"U0ZJZBJLF","text":"In case someone from zurich wants to take a look at it","ts":"1475083129.001279"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZJZBJLF> This code path should be dying in v1, hopefully not worth looking at, we can add a `t.Skip` if it is causing problems","ts":"1475088700.001280"},{"type":"message","user":"U0ZJZBJLF","text":"ok. It failed my build so I was just playing a concerned fabric citizen","ts":"1475089165.001281"},{"type":"message","user":"U0XV1HDL3","text":"<@U0XPR4NP4>: let me disregard \"channels\" for now, only look at what is in Next-Consensus-Arch doc: different chaincodes. \nThere can be a \"system chaincode\" that interprets such reconfig transactions. Yes they need to be somehow signed or otherwise conform to the endorsement policy of that system chaincode.\nThis is not the first system that has this, I invite everyone to look at those that did it before: \nZookeeper (<https:\/\/zookeeper.apache.org\/doc\/trunk\/zookeeperReconfig.html>) with a paper here (<https:\/\/www.usenix.org\/system\/files\/conference\/atc12\/atc12-final74.pdf>) , not security-conscious, but otherwise similar.\nOr BFT-SMaRT (<http:\/\/www.di.fc.ul.pt\/~bessani\/publications\/dsn14-bftsmart.pdf|www.di.fc.ul.pt\/~bessani\/publications\/dsn14-bftsmart.pdf> and  <http:\/\/bft-smart.github.io\/library\/>) in BFT-land.","ts":"1475091042.001282"},{"type":"message","user":"U0XV1HDL3","text":"BTW, the adapter that \"receives\" ordered tx at the peers outside consensus will also need to understand dynamic consenter node changes, otherwise, how could it trust this output? (= know which consenter nodes to trust). This should not be exposed to the peer because it is really specific to the impl. of consenters.","ts":"1475091178.001283","reactions":[{"name":"+1","users":["U0PB67X4K"],"count":1}]},{"type":"message","user":"U0XV1HDL3","text":"(And here is a 10-year old PhD thesis, in which I was a bit involved, where reconfiguration is also described: <https:\/\/www.ideals.illinois.edu\/handle\/2142\/11121>  then click on PDF, see Chapter 5.)","ts":"1475091468.001285"},{"type":"message","user":"U0PB67X4K","text":"```\nBTW, the adapter that \"receives\" ordered tx at the peers outside consensus will also need to understand dynamic consenter node changes, otherwise, how could it trust this output? (= know which consenter nodes to trust). This should not be exposed to the peer because it is really specific to the impl. of consenters.\n```\n\nSo the question is whether or not this info needs to be written to the raw ledger on the peer side.  If it does, I am fine with that - but it should look like just another raw ledger \"block\" \/ whatever we call it.   The \"adapter\" should receive the update, not process any more delivers until it reconfigures itself and updates the raw ledger with this new info.  That's why I think that the config info should be delivered in a batch by itself","ts":"1475092135.001287"},{"type":"message","user":"U0PB67X4K","text":"this way you know the point in time when the new config went into effect but basically the peer does not care anything about it","ts":"1475092177.001288"},{"type":"message","user":"U2BGFAHC7","text":"Just following along out of interest and don\u2019t want to distract, but is the idea that all changes to the list of trusted peers by a single peer is logged for eternity in the blockchain and all other peers can inspect those selections? If so, it\u2019s an interesting approach, differing from Ripple, where their equivalent (the Unique Node List) is a private matter.","edited":{"user":"U2BGFAHC7","ts":"1475092456.000000"},"ts":"1475092331.001289"},{"type":"message","user":"U0PB67X4K","text":"<@U2BGFAHC7> - I think what is in that config would depend on the ordering service implementation.  For example, with a PBFT-based ordering service, if we want to provide some type of BFT broadcast, each peer would need to connect to at least f+1 ordering nodes to make sure it was getting the correct info.  So to do that, it needs to get this info from somewhere.  Initially, this would likely be a bootstrap config, but if the ordering service adds additional nodes, then f+1 might be different and the peers would need to know that","ts":"1475092528.001291"},{"type":"message","user":"U2BGFAHC7","text":"Interesting\u2026 just to share some other ideas from Ripple, the bootstrap stage happens via round-robin DNS:\n```host <http:\/\/r.ripple.com|r.ripple.com>\n<http:\/\/r.ripple.com|r.ripple.com> has address 169.53.155.44\n<http:\/\/r.ripple.com|r.ripple.com> has address 54.186.248.91\n<http:\/\/r.ripple.com|r.ripple.com> has address 174.37.225.50\n<http:\/\/r.ripple.com|r.ripple.com> has address 54.86.175.122\n<http:\/\/r.ripple.com|r.ripple.com> has address 169.55.164.22\n<http:\/\/r.ripple.com|r.ripple.com> has address 54.186.73.52\n<http:\/\/r.ripple.com|r.ripple.com> has address 54.84.21.230\n<http:\/\/r.ripple.com|r.ripple.com> has address 184.173.45.44```\nand the protocol has means for a peer to share the peers it knows about.\n<https:\/\/github.com\/ripple\/rippled\/blob\/906ef761bab95f80b0a7e0cab3b4c594b226cf57\/src\/ripple\/proto\/ripple.proto#L220-L255>","edited":{"user":"U2BGFAHC7","ts":"1475092728.000000"},"ts":"1475092705.001292"},{"type":"message","user":"U2BGFAHC7","text":"Co-incidentally, the very same problem is being addressed concurrently:\n<https:\/\/github.com\/ripple\/rippled\/pull\/1842>","edited":{"user":"U2BGFAHC7","ts":"1475092826.000000"},"ts":"1475092818.001296"},{"type":"message","user":"U0PB67X4K","text":"we can do that as well - but the question is how can you trust that a single peer provides you with the right list?   :wink:","ts":"1475092819.001297"},{"type":"message","user":"U0KM61BCP","text":"bwahahaha","ts":"1475092837.001300"},{"type":"message","user":"U0PB67X4K","text":"but I hear ya","ts":"1475092841.001301"},{"type":"message","user":"U0PB67X4K","text":"I don't think we need to solve world hunger the first time around","ts":"1475092858.001302"},{"type":"message","user":"U0PB67X4K","text":"with permissioned networks honestly there is a level of trust","ts":"1475092875.001303"},{"type":"message","user":"U2BGFAHC7","text":"Well, the Ripple approach initially used the Anonymous Diffie Hellman cipher in openssl to stop sybil attacks, but I don\u2019t think I\u2019ve got the stomach to go into the detail of all that :slightly_smiling_face:","ts":"1475092933.001304","reactions":[{"name":"joy","users":["U0PB67X4K"],"count":1}]},{"type":"message","user":"U2BGFAHC7","text":"I like the idea of making public which peers trust which peers, and cementing it though. Makes for a very transparent system.","ts":"1475093021.001305"},{"type":"message","user":"U0ZJZBJLF","text":"how can you have a sybil attack? we have the membership service that everyone subscribes to","ts":"1475093035.001306"},{"type":"message","user":"U2BGFAHC7","text":"How do you know the membership service is who you think it is? :slightly_smiling_face:","ts":"1475093066.001307"},{"type":"message","user":"U0ZJZBJLF","text":"it's a CA","ts":"1475093072.001308"},{"type":"message","user":"U0ZJZBJLF","text":"the same way your browser trusts verisign","ts":"1475093086.001309"},{"type":"message","user":"U2BGFAHC7","text":"Just one?","ts":"1475093087.001310"},{"type":"message","user":"U0ZJZBJLF","text":"browsers work in the same way don't they? they have pre-installed certificates","ts":"1475093109.001311"},{"type":"message","user":"U0ZJZBJLF","text":"and you have a chain of trust from some \"important CA\" down to other smaller CAs","ts":"1475093123.001312"},{"type":"message","user":"U2BGFAHC7","text":"The point, I guess, is if you have just one certificate sitting in one place, then that could be a SPOF. But I was really more interested in following along the consensus discussion :slightly_smiling_face:","ts":"1475093170.001313"},{"type":"message","user":"U0ZJZBJLF","text":"consensus or membership?","ts":"1475093280.001314"},{"type":"message","user":"U2BGFAHC7","text":"Well, the dynamic nature of the peers\u2019 trusts involved in consensus.","ts":"1475093333.001315"},{"type":"message","user":"U0ZJZBJLF","text":"but why is that? if you have a membership service (you do, in HL) that gives peers signed public\/private key pairs that can't be forged, you can't impersonate a peer and you can't also spoof a peer that isn't registered. \nWhere does the trust of the peers come to play here?","ts":"1475093427.001316"},{"type":"message","user":"U0XQ35CDD","text":"I trust peer A when it says C and D are in the list, when it's B and E. ","ts":"1475093479.001317"},{"type":"message","user":"U0ZJZBJLF","text":"in the list of what?","ts":"1475093494.001318"},{"type":"message","user":"U2BGFAHC7","text":"Well, say I\u2019m Bank A, and Bank B has started doing something shady, and I want to stop them doing shady stuff on our shared network as soon as possible.","ts":"1475093510.001319"},{"type":"message","user":"U0XQ35CDD","text":"In the list of orderers.","ts":"1475093524.001320"},{"type":"message","user":"U0ZJZBJLF","text":"oh, you mean membership information about roles of entities?","ts":"1475093539.001321"},{"type":"message","user":"U0ZJZBJLF","text":"who's a conensus peer and who's not?","ts":"1475093552.001322"},{"type":"message","user":"U0XQ35CDD","text":"Basically this list: <https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1475092819001297>","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1475092819001297","fallback":"[September 28th, 2016 1:00 PM] garisingh: we can do that as well - but the question is how can you trust that a single peer provides you with the right list?   :wink:","ts":"1475092819.001297","author_subname":"garisingh","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"we can do that as well - but the question is how can you trust that a single peer provides you with the right list?   :wink:","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/garisingh","author_icon":"https:\/\/avatars.slack-edge.com\/2016-09-10\/78323915894_521dc680194c08b166e0_48.jpg","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1475093607.001323"},{"type":"message","user":"U0ZJZBJLF","text":"I didn't think about it for too long but I'd go the following approach:\nYou have a consensus service which consists of membership set S_0.\nA peer comes and asks to join.\nThe peers of S_0 run a consensus algorithm that results in the \"next\" membership set S_1. \nAnd in induction, for S_i, etc. etc.\nif the consensus is byzantine tolerant, you've solved the problem. \nThe only problem with that is bootstrapping which needs to be addressed in another way","ts":"1475093708.001325"},{"type":"message","user":"U0ZJZBJLF","text":"oh that's what Gari said (the bootstrapping)","edited":{"user":"U0ZJZBJLF","ts":"1475093741.000000"},"ts":"1475093725.001326"},{"type":"message","user":"U2BGFAHC7","text":"I guess the fun question occurs when a peer only wants to trust a subset of the other peers. That\u2019s the problem that Ripple and Stellar tried to solve on a public network, but maybe that doesn\u2019t apply here...","ts":"1475093823.001328"},{"type":"message","user":"U0XQ35CDD","text":"I honestly don't see the big problem but then again I am fine with relaxing our assumptions and being practical. (As you have pointed out we have a CA in here already.) Bake that bootstrap list in the peers, and ship a new binary\/genesis block when this list needs to be updated. (For any *new* nodes that want to join, and when the original bootstrap set has zero overlap with the new one.)","ts":"1475093953.001329","reactions":[{"name":"+1","users":["U0ZJZBJLF"],"count":1}]},{"type":"message","user":"U0ZJZBJLF","text":"I think that hyperledger is \"complicated\" enough as it is without having to tackle bootstrapping trust issues","ts":"1475094029.001330"},{"type":"message","user":"U0XQ35CDD","text":"It's not like these entities transacting on the network meet once in 2016 and never ever again talk to each other, or have lost the ability to coordinate manually if need be.","edited":{"user":"U0XQ35CDD","ts":"1475094221.000000"},"ts":"1475094089.001331","reactions":[{"name":"+1","users":["U0PB67X4K"],"count":1}]},{"type":"message","user":"U0PB67X4K","text":"they probably won't meet until 2017  :wink:","ts":"1475094917.001333"},{"type":"message","user":"U0PB67X4K","text":"maybe around March?","ts":"1475094923.001334","reactions":[{"name":"simple_smile","users":["U0XQ35CDD"],"count":1}]},{"type":"message","user":"U2BGFAHC7","text":"Can a user have more than one Transaction Certificate active at the same time?","ts":"1475095610.001335"},{"type":"message","user":"U0Y14MWA2","text":"<@U0PB67X4K> yes - once we have the consensus reconfiguration the membership change will be written to raw ledger","ts":"1475103813.001336"},{"type":"message","user":"U0Y14MWA2","text":"As for the initial consensus service discovery - I always imagined a genesis block in which initial set of consenters (and other bootstrap) info is written","ts":"1475103900.001337"},{"type":"message","user":"U0Y14MWA2","text":"this genesis block has a hash","ts":"1475103906.001338"},{"type":"message","user":"U0Y14MWA2","text":"which is the identifier of the blockchain instance","ts":"1475103920.001339"},{"type":"message","user":"U0Y14MWA2","text":"so nodes join a specific blockchain by downloading (from anywhere) a genesis block and comparing its hash to the blockchain identifier","ts":"1475104022.001340"},{"type":"message","user":"U0PB67X4K","text":"<@U2BGFAHC7>:  Yes.  You can request transaction certificates in batches.  You can choose to use a different one for every transaction or you could keep a few in flight.  Of course they will expire at some point as well","ts":"1475109430.001341"},{"type":"message","user":"U12452RAP","text":"seems most like Kafka's architecture, producer,consumer,broker all distributed separate","ts":"1475118891.001342"},{"type":"message","user":"U0XQ35CDD","text":"Right but keep in mind that we are working on a different set of trust assumptions here. For instance in Kafka, as long as one of the brokers you are connected to is up and running, you're good to go, even if the other brokers in your config have died. (That one broker will let you know of the new broker set.) This won't fly in the BFT case.","ts":"1475119328.001343"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XQ35CDD> if we map Kafka nodes to consenters - what is the mapping","ts":"1475150424.001344"},{"type":"message","user":"U0Y14MWA2","text":"1 ZK server per consenter that I suppose will be the case","ts":"1475150438.001345"},{"type":"message","user":"U0Y14MWA2","text":"but what about brokers?","ts":"1475150442.001346"},{"type":"message","user":"U0XR6J961","text":"<@U0XPR4NP4>: <https:\/\/jira.hyperledger.org\/browse\/FAB-472>","ts":"1475156441.001347"},{"type":"message","user":"U0XQ35CDD","text":"<@U0Y14MWA2>: The set of nodes in our ordering service maps to the set of Kafka brokers that are replicating a partition (that partition's leader and that partition's followers). Producers of this system should do `acks=all`, `unclean.leader.election.enable` for the broker should be set to `false`, and `min.insync.replica` for the broker should definitely be &gt; 1 as well.)","edited":{"user":"U0XQ35CDD","ts":"1475468252.000000"},"ts":"1475157233.001348"},{"type":"message","user":"U0XQ35CDD","text":"&gt; 1 ZK server per consenter that I suppose will be the case","ts":"1475157249.001349"},{"type":"message","user":"U0XQ35CDD","text":"The number of ZooKeeper servers is not (does not\/should not be) equal to the number of brokers. 3\/5\/7 ZK servers nodes is all you need depending on the fault tolerance you wish to have.","edited":{"user":"U0XQ35CDD","ts":"1475158285.000000"},"ts":"1475157366.001350"},{"type":"message","user":"U0XQ35CDD","text":"That said, each broker creates a ZK _ephemeral_ node when it's created.","ts":"1475157382.001351"},{"type":"message","user":"U0XQ35CDD","text":"Let me know if there are any more questions.","ts":"1475157389.001352"},{"type":"message","user":"U0XR6J961","text":"i have no idea what any of this means","ts":"1475157544.001353"},{"type":"message","user":"U0XR6J961","text":"but i'm happy that we have support for a well tested system","ts":"1475157563.001354"},{"type":"message","user":"U0XR6J961","text":"do we have a scrum today?","ts":"1475157680.001355"},{"type":"message","user":"U0XQ35CDD","text":"Dialing in to the scrum now.","ts":"1475157779.001356"},{"type":"message","user":"U0ZJZBJLF","text":"seems so","ts":"1475157780.001357"},{"type":"message","user":"U0XQ35CDD","text":"Someone who's better in Docker-land than I am (<@U0UKTPMG8>?). Is it unrealistic for me to expect the `ORDERER_KAFKA_BROKERS` ENV var for `orderer0` to be parsed as `IP of Kafka:9092` in the snippet below?","ts":"1475163986.001360"},{"type":"message","subtype":"file_share","text":"<@U0XQ35CDD|kostas> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/kostas\/F2HK4F7L5\/dockerfile.dockerfile|Dockerfile>","file":{"id":"F2HK4F7L5","created":1475164000,"timestamp":1475164000,"name":"Dockerfile.dockerfile","title":"Dockerfile","mimetype":"text\/plain","filetype":"dockerfile","pretty_type":"Docker","user":"U0XQ35CDD","editable":true,"size":531,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2HK4F7L5\/dockerfile.dockerfile?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2HK4F7L5\/download\/dockerfile.dockerfile?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/kostas\/F2HK4F7L5\/dockerfile.dockerfile","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2HK4F7L5-49a981f6f7","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/kostas\/F2HK4F7L5\/dockerfile.dockerfile\/edit","preview":"kafka0:\r\n    image: kchristidis\/kafka\r\n    environment:\r\n        - ADVERTISED_HOST=0.0.0.0\r\n        - ADVERTISED_PORT=9092\r","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>kafka0:<\/pre><\/div>\n<div><pre>    image: kchristidis\/kafka<\/pre><\/div>\n<div><pre>    environment:<\/pre><\/div>\n<div><pre>        - ADVERTISED_HOST=0.0.0.0<\/pre><\/div>\n<div><pre>        - ADVERTISED_PORT=9092<\/pre><\/div>\n<\/div>\n<\/div>\n","lines":21,"lines_more":16,"preview_is_truncated":false,"channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0XQ35CDD","upload":true,"display_as_bot":false,"username":"<@U0XQ35CDD|kostas>","bot_id":null,"ts":"1475164001.001361"},{"type":"message","user":"U0XQ35CDD","text":"Note that the ORDERER_KAFKA_BROKERS ENV var is meant to be a slice, which is why it's written that way.","ts":"1475164033.001362"},{"type":"message","user":"U0UKTPMG8","text":"<@U0XQ35CDD> yes, it will be read as is","ts":"1475164294.001363"},{"type":"message","user":"U0UKTPMG8","text":"but that host should resolve to the proper IP","ts":"1475164316.001364"},{"type":"message","user":"U0UKTPMG8","text":"can you hear me?","ts":"1475170809.001365"},{"type":"message","user":"U0UGH3X7X","text":"what <@U0UKTPMG8>  ?","ts":"1475170857.001366"},{"type":"message","user":"U0UKTPMG8","text":"sorry, wrong channel :slightly_smiling_face:","ts":"1475170874.001367"},{"user":"U2HSGUNP3","text":"<@U2HSGUNP3|lory> has joined the channel","type":"message","subtype":"channel_join","ts":"1475205444.001368"},{"user":"U2HSRQXGQ","text":"<@U2HSRQXGQ|shannon_wie> has joined the channel","type":"message","subtype":"channel_join","ts":"1475214965.001369"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XQ35CDD> if this is the case (not every ZK server is consenter) - we have to be careful about how we \"sell\" the scalability of Kafka-orderer","ts":"1475227503.001370"},{"type":"message","user":"U0Y14MWA2","text":"strictly speaking if you have 100 brokers but only 5 ZK servers","ts":"1475227525.001371"},{"type":"message","user":"U0Y14MWA2","text":"your kafka-orderer will not be live with 3 consenter faults","ts":"1475227543.001372"},{"type":"message","user":"U0Y14MWA2","text":"if that happen to be ZK server faults","ts":"1475227563.001373"},{"type":"message","user":"U0Y14MWA2","text":"perhaps not a huge problem but just mentioning","ts":"1475227587.001374"},{"user":"U0UL07VSL","text":"<@U0UL07VSL|frankyclu> has joined the channel","type":"message","subtype":"channel_join","ts":"1475314321.001375"},{"type":"message","user":"U0UL07VSL","text":"hey guys, not sure if this is already known, this error is fairly easy to create in PBFT part of fabric 0.6","ts":"1475314656.001376"},{"type":"message","subtype":"file_share","text":"<@U0UL07VSL|frankyclu> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/frankyclu\/F2J8L5DPH\/-.txt|Untitled>","file":{"id":"F2J8L5DPH","created":1475315046,"timestamp":1475315046,"name":"-.txt","title":"Untitled","mimetype":"text\/plain","filetype":"text","pretty_type":"Plain Text","user":"U0UL07VSL","editable":true,"size":2198,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2J8L5DPH\/-.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2J8L5DPH\/download\/-.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/frankyclu\/F2J8L5DPH\/-.txt","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2J8L5DPH-df9c3e1b40","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/frankyclu\/F2J8L5DPH\/-.txt\/edit","preview":"~'''cT0fiqg7QJbsDOiF70K0k3gOEIxb\/w2GftdyqUZklSPoaQOT+2FAoTD49ZYjRO+YK2Zr8PQwBY\/fkwbP6dF9BXyt\/Xf3mlSYNMzFaag9O3eSsbZ7d0xv2R3pwLfbpYwWwf+w=) different from weak checkpoint certificate (CAcSQDOemvN7Rf8BISMEmt7DztD3bOaU\/DgCuPN5oEopl8Pl\/qU\/Hpjo5UJwVhQQ+kifZOIIVGkbn0AknSi\/TmnHtLIaQHBejXT\/y5NAmPQuQElCoJMwqqaghnIMG2tnI55F7YaXuiYknJ+JrJgRHldLh2c5SAUxZQsZf3nmOAK53jUVlT4=)\npanic: Own checkpoint for seqNo 6 (CAcSQK4qfUrKeSaFA8nH5wsc6\/XalIW5zeUt10AG2BNAVCycT0fiqg7QJbsDOiF70K0k3gOEIxb\/w2GftdyqUZklSPoaQOT+2FAoTD49ZYjRO+YK2Zr8PQwBY\/fkwbP6dF9BXyt\/Xf3mlSYNMzFaag9O3eSsbZ7d0xv2R3pwLfbpYwWwf+w=) different from weak checkpoint certificate (CAcSQDOemvN7Rf8BISMEmt7DztD3bOaU\/DgCuPN5oEopl8Pl\/qU\/Hpjo5UJwVhQQ+kifZOIIVGkbn0AknSi\/TmnHtLIaQHBejXT\/y5NAmPQuQElCoJMwqqaghnIMG2tnI55F7YaXuiYknJ+JrJgRHldLh2c5SAUxZQsZf3nmOAK53jUVlT4=)\n\ngoroutine 52 [running]:\npanic(0xc11400, 0xc8203c8500)","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>~'''cT0fiqg7QJbsDOiF70K0k3gOEIxb\/w2GftdyqUZklSPoaQOT+2FAoTD49ZYjRO+YK2Zr8PQwBY\/fkwbP6dF9BXyt\/Xf3mlSYNMzFaag9O3eSsbZ7d0xv2R3pwLfbpYwWwf+w=) different from weak checkpoint certificate (CAcSQDOemvN7Rf8BISMEmt7DztD3bOaU\/DgCuPN5oEopl8Pl\/qU\/Hpjo5UJwVhQQ+kifZOIIVGkbn0AknSi\/TmnHtLIaQHBejXT\/y5NAmPQuQElCoJMwqqaghnIMG2tnI55F7YaXuiYknJ+JrJgRHldLh2c5SAUxZQsZf3nmOAK53jUVlT4=)<\/pre><\/div>\n<div><pre>panic: Own checkpoint for seqNo 6 (CAcSQK4qfUrKeSaFA8nH5wsc6\/XalIW5zeUt10AG2BNAVCycT0fiqg7QJbsDOiF70K0k3gOEIxb\/w2GftdyqUZklSPoaQOT+2FAoTD49ZYjRO+YK2Zr8PQwBY\/fkwbP6dF9BXyt\/Xf3mlSYNMzFaag9O3eSsbZ7d0xv2R3pwLfbpYwWwf+w=) different from weak checkpoint certificate (CAcSQDOemvN7Rf8BISMEmt7DztD3bOaU\/DgCuPN5oEopl8Pl\/qU\/Hpjo5UJwVhQQ+kifZOIIVGkbn0AknSi\/TmnHtLIaQHBejXT\/y5NAmPQuQElCoJMwqqaghnIMG2tnI55F7YaXuiYknJ+JrJgRHldLh2c5SAUxZQsZf3nmOAK53jUVlT4=)<\/pre><\/div>\n<div><pre><\/pre><\/div>\n<div><pre>goroutine 52 [running]:<\/pre><\/div>\n<div><pre>panic(0xc11400, 0xc8203c8500)<\/pre><\/div>\n<\/div>\n<\/div>\n","lines":18,"lines_more":13,"preview_is_truncated":true,"channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0UL07VSL","upload":true,"display_as_bot":false,"username":"<@U0UL07VSL|frankyclu>","bot_id":null,"ts":"1475315046.001380"},{"type":"message","user":"U0PB67X4K","text":"Hi <@U0UL07VSL>  - do you mean it is fairly easy to force a peer to be out of sync?","ts":"1475316071.001381"},{"type":"message","user":"U0UL07VSL","text":"sorry I was gonna to add more detail but I didn't know you get up this early :slightly_smiling_face:","ts":"1475318453.001382"},{"type":"message","user":"U0UL07VSL","text":"the panic happens (which will basically shut down the node)  after this sequence: one peer get out of sync due to network connection error, then as the peer try to sync up (at this point rest of the network has already exceeded the peer's high watermark), it will also get chat messages from the bootstrap peer (which it will then generate: error : *Peer FSM cannot handle message (DISC_GET_PEERS) with payload size (0) while in state: created_* every few seconds). If I stop and start the peer (which will usually get ride of \"FSM cannot find message error\"), the network will then attempting a view change request because they think the problem peer is faulty, however it will just keep on attempting  for several minutes w\/o any results","edited":{"user":"U0UL07VSL","ts":"1475325880.000000"},"ts":"1475318632.001383"},{"type":"message","user":"U0UL07VSL","text":"at this point if you start another wave of transactions, the problem peer will go panic <@U0PB67X4K>","edited":{"user":"U0UL07VSL","ts":"1475321620.000000"},"ts":"1475319559.001389"},{"type":"message","user":"U0UL07VSL","text":"I think this problem will be common once the peers get deployed into physically separated VMs","ts":"1475319669.001390"},{"type":"message","user":"U0ZJZBJLF","text":"Panic? Can you put here the stack trace?","ts":"1475322726.001395"},{"type":"message","user":"U0UL07VSL","text":"<@U0ZJZBJLF> it's pasted above","ts":"1475324514.001396"},{"user":"U1P52TCE4","text":"<@U1P52TCE4|yoshihara> has joined the channel","type":"message","subtype":"channel_join","ts":"1475324984.001399"},{"type":"message","user":"U0ZJZBJLF","text":"oh, didn't notice (was using slack on android)","ts":"1475325613.001400"},{"type":"message","user":"U0PB67X4K","text":"sorry - had to run out this morning","ts":"1475345999.001403"},{"type":"message","user":"U0PB67X4K","text":"the code actually exits with a panic - so this is intentional from that perspective.  The peer has found itself in a state where it should not continue to participate.  But I would think that if you then restart that peer, it should detect that it's out of sync and then initiate state transfer","ts":"1475346078.001404"},{"type":"message","user":"U0XQ35CDD","text":"&gt; the network will then attempting a view change request because they think the problem peer is faulty, however it will just keep on attempting  for several minutes w\/o any results","ts":"1475356546.001405"},{"type":"message","user":"U0XQ35CDD","text":"This should probably \"the peer will then attempt a view-change request\" right?","ts":"1475356570.001406"},{"type":"message","user":"U0XQ35CDD","text":"If that's the case, note that the peer won't actually join and actively participate the network until the network (eventually) switches its view to the one that this complaining peer wanted to all along. (It may take a while, or even forever.)","ts":"1475356706.001407"},{"type":"message","user":"U0XQ35CDD","text":"Until that happens however, note that this complaining peer will have its state synced even though it doesn't participate in ordering. (Long and somewhat convoluted explanation of how that happens: It will be able to identify any weak checkpoint sets above its high watermark, mark itself as out of date, and move its low watermark accordingly. Then, upon receiving the next weak checkpoint cert, it will state transfer to it. This process will repeat periodically, assuming the rest of the network progresses normally.)","ts":"1475358058.001408"},{"type":"message","user":"U0XQ35CDD","text":"<@U0Y14MWA2> I had missed this message, sorry. Yes, this is a good observation. If you no longer have a majority quorum in your ZK ensemble and, say, the partition leader crashes, you'd be in trouble.","attachments":[{"fallback":"[September 30th, 2016 5:26 AM] vukolic: perhaps not a huge problem but just mentioning","ts":"1475227587.001374","author_subname":"vukolic","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"perhaps not a huge problem but just mentioning","author_name":"Marko Vukolic","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/vukolic","author_icon":"https:\/\/secure.gravatar.com\/avatar\/a52edd136bbd07ca069b9393ac60f675.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0006-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1475227587001374","is_share":true,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1475480988.001410"},{"user":"U1WTREFUK","text":"<@U1WTREFUK|ckeyer> has joined the channel","type":"message","subtype":"channel_join","ts":"1475481232.001411"},{"type":"message","user":"U0XQ35CDD","text":"Given that we're asked to post updates here --","ts":"1475486225.001412"},{"type":"message","user":"U0XQ35CDD","text":"I finished the work on the kafka-orderer this past Friday <https:\/\/github.com\/kchristidis\/fabric\/tree\/kafka-orderer-complete\/orderer> (<https:\/\/jira.hyperledger.org\/browse\/FAB-32?focusedCommentId=19084> - will post the changeset once the Vagrant image gets upgraded to Go 1.7)","edited":{"user":"U0XQ35CDD","ts":"1475486891.000000"},"ts":"1475486246.001413"},{"type":"message","user":"U0XQ35CDD","text":"Was also asked how Kafka deals with reconfiguration, I posted about this here: <https:\/\/jira.hyperledger.org\/browse\/FAB-496?focusedCommentId=19092>","ts":"1475486259.001415"},{"type":"message","user":"U0XQ35CDD","text":"Up next: review the SBFT changeset","ts":"1475486265.001416"},{"type":"message","user":"U0XR6J961","text":"yey","ts":"1475486318.001417"},{"type":"message","user":"U0XR6J961","text":"\\o\/ i get a review","ts":"1475486330.001418"},{"type":"message","user":"U0XQ35CDD","text":"Sorry, yeah, I was planning to get to it last week but I bumped into some misconfiguration issues with the Kafka\/ZooKeeper images (that only manifested themselves after I tried to test via Docker Compose in Vagrant)","ts":"1475486594.001419"},{"type":"message","user":"U0XR6J961","text":"no worries","ts":"1475487928.001422"},{"type":"message","user":"U0XR6J961","text":"i'm trying to figure out what to do with backlog messages and reconnect events","ts":"1475488044.001423"},{"type":"message","user":"U0XR6J961","text":"ah suddenly it seems to make sense","ts":"1475488063.001424"},{"type":"message","user":"U0XR6J961","text":"<@U1BC5A0F9>: right now i store a list of blobs to represent the signatures on a block","ts":"1475493245.001425"},{"type":"message","user":"U0XR6J961","text":"<@U1BC5A0F9>: do i also have to store some kind of identification for the signature, so that you can test it against a key?","ts":"1475493268.001426"},{"type":"message","user":"U0XR6J961","text":"how is this done usually?","ts":"1475493274.001427"},{"type":"message","user":"U1BC5A0F9","text":"Hi, <@U0XR6J961> : yes, this is correct; one would need to include the certs (or references to the certs) of the users who are signing.","ts":"1475493562.001428"},{"type":"message","user":"U1BC5A0F9","text":"users\/nodes.","ts":"1475493566.001429"},{"type":"message","user":"U0XR6J961","text":"the consenter, in this case","ts":"1475493874.001430"},{"type":"message","user":"U0XR6J961","text":"thanks, somehow i missed that","ts":"1475493880.001431"},{"type":"message","user":"U0XR6J961","text":"what is a customary way of doing this?","ts":"1475493889.001432"},{"type":"message","user":"U0XR6J961","text":"attach the cert or the cert fingerprint?","ts":"1475493902.001433"},{"type":"message","user":"U0XR6J961","text":"do you prefer protobuf or asn1?","ts":"1475493923.001434"},{"type":"message","user":"U1BC5A0F9","text":"So it depends. Cert fingerprint could suffice if every peer who is supposed to evaluate the signatures is already in posession of the Certs.","ts":"1475498059.001435"},{"type":"message","user":"U0XR6J961","text":"ah i see","ts":"1475498083.001436"},{"type":"message","user":"U1BC5A0F9","text":"If e.g., certs of valid orderers are announced through the blockchain (since i am guessing you refer to orderer signatures) , then a fingerprint would suffice.","ts":"1475498096.001437"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1475498104.001438"},{"type":"message","user":"U0XR6J961","text":"yea they have to be announced","ts":"1475498113.001439"},{"type":"message","user":"U1BC5A0F9","text":"re: protobuf or asn1 i would invite <@U0ZR63HLK>  to the discussion.","edited":{"user":"U1BC5A0F9","ts":"1475498237.000000"},"ts":"1475498216.001440"},{"user":"U0ZR63HLK","inviter":"U1BC5A0F9","text":"<@U0ZR63HLK|adc> has joined the channel","type":"message","subtype":"channel_join","ts":"1475498241.001442"},{"type":"message","user":"U1BC5A0F9","text":"I would say ASN1 but it makes sense that we are consistent with the rest of signatures produced.","ts":"1475498322.001443"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1475498332.001444"},{"type":"message","user":"U0XR6J961","text":"probably all structures that should be stored would be better in ASN1","ts":"1475498346.001445"},{"type":"message","user":"U0XR6J961","text":"but not my decision","ts":"1475498360.001446"},{"user":"U2JK6JCTZ","text":"<@U2JK6JCTZ|alankhlim> has joined the channel","type":"message","subtype":"channel_join","ts":"1475500476.001447"},{"type":"message","user":"U0XR6J961","text":"<@U0XPR4NP4>: so that's the difference between batch and block: batch refers to replica ids, block contains replica certificates\/fingerprints","ts":"1475502424.001448"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> I think that depends on which 'batch' you're referring to, the batches emitted from the ordering service are blocks (only called batches to differentiate them from the validated blocks), it could be we want additional data around a PBFT batch, though if we could avoid additional fields reusing the block structure seems preferable","ts":"1475504425.001449"},{"type":"message","user":"U0XPR4NP4","text":"FYI, I tagged you on this, <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1361\/>  but have not seen any feedback from you on it.  It seems many people do not want to use a Merkle tree for the block contents hash, which is fine by me, but I know you picked Merkle tree for your impl, so wasn't sure if you had some other reason for it","ts":"1475504524.001450"},{"type":"message","user":"U0UGH3X7X","text":"posting my updates as Kostas is doing earlier today ...  added default endorser and validator system chaincodes to feature\/convergence ... these don't do much right now except to help get the end-to-end skeleton going ... we will be adding more capabilities as we get v1 going  <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1367\/>","ts":"1475504785.001451"},{"type":"message","user":"U0XV1HDL3","text":"<@U0XR6J961>, @mvu, <@U0UGH3X7X>, <@U0XQ35CDD>, everyone: Have a look at the message formats posted here -- <https:\/\/hyperledgerproject.slack.com\/files\/adc\/F2JKXGXEU\/protobufmessagesandflow.pdf>","ts":"1475507278.001452"},{"type":"message","subtype":"file_mention","text":"<@U0XV1HDL3|cca> mentioned a file: <https:\/\/hyperledgerproject.slack.com\/files\/adc\/F2JKXGXEU\/protobufmessagesandflow.pdf|ProtobufMessagesAndFlow.pdf>.","file":{"id":"F2JKXGXEU","created":1475506254,"timestamp":1475506254,"name":"ProtobufMessagesAndFlow.pdf","title":"ProtobufMessagesAndFlow.pdf","mimetype":"application\/pdf","filetype":"pdf","pretty_type":"PDF","user":"U0ZR63HLK","editable":false,"size":824792,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2JKXGXEU\/protobufmessagesandflow.pdf?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2JKXGXEU\/download\/protobufmessagesandflow.pdf?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/adc\/F2JKXGXEU\/protobufmessagesandflow.pdf","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2JKXGXEU-66a1d1cac6","channels":["C2GE7GXM1"],"groups":[],"ims":[],"comments_count":1,"initial_comment":{"id":"Fc2JJF8RPV","created":1475506254,"timestamp":1475506254,"user":"U0ZR63HLK","is_intro":true,"comment":"Hi All, this file contains the protobuf messages and the relative flow with the security checks to put in place. This a joint effort with <@U1BC5A0F9> and <@U26T99AQ4>.","channel":""},"reactions":[{"name":"+1","users":["U1GN670VD"],"count":1}]},"user":"U0XV1HDL3","ts":"1475507278.001453"},{"type":"message","user":"U0UGH3X7X","text":"<@U0XV1HDL3> `@mvu` did not resolve to a slack user","ts":"1475508582.001454"},{"type":"message","user":"U0XV1HDL3","text":"<@U0Y14MWA2>","ts":"1475509842.001455"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XV1HDL3> I've been looking at those as they have been in development, <@U1BC5A0F9> I do not see a date, is that newer than what I have last seen?","ts":"1475511046.001456"},{"type":"message","user":"U1BC5A0F9","text":"Hi, <@U0Y14MWA2>: it should be, as we just completed it today :slightly_smiling_face:","ts":"1475512622.001457"},{"type":"message","user":"U0XPR4NP4","text":"<@U1BC5A0F9> is there a place we can provide feedback on them?","ts":"1475512694.001458"},{"type":"message","user":"U0Y14MWA2","text":"There should be a JIRA issue IMO","ts":"1475512737.001459"},{"type":"message","user":"U1BC5A0F9","text":"fabric-crypo channel?","ts":"1475513034.001460"},{"type":"message","user":"U1BC5A0F9","text":"crypto*","ts":"1475513042.001461"},{"type":"message","user":"U1BC5A0F9","text":"there is also a jira item indeed, but i think the fabric-crypto channel is easier if you want more ppl seeing it.","ts":"1475513099.001462"},{"user":"U1VG8LNP3","text":"<@U1VG8LNP3|yaoguo> has joined the channel","type":"message","subtype":"channel_join","ts":"1475513535.001463"},{"type":"message","user":"U0XR6J961","text":"elli: in short, what validation steps does the orderer have to perform?","ts":"1475513855.001464"},{"type":"message","user":"U0XR6J961","text":"and over what is the signature","ts":"1475513880.001465"},{"type":"message","user":"U1BC5A0F9","text":"How would you define short? :smile:","ts":"1475513932.001466"},{"type":"message","user":"U0XR6J961","text":"which fields have to be validated","ts":"1475513953.001467"},{"type":"message","user":"U0XR6J961","text":"more than just check the signature?","ts":"1475513963.001468"},{"type":"message","user":"U0XR6J961","text":"does this signature field opaquely contain the signing identity (cert)?","ts":"1475513991.001469"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> my very rough understanding from <@U1BC5A0F9> is that that signature field is the signature of the identity contained in the proposalheader, assuming all proposal headers have the same identity, and potentially some more complicated scheme if they differ.  I hope I am wrong, because that seems very expensive to check and complicated to me","ts":"1475514469.001470"},{"type":"message","user":"U0XPR4NP4","text":"In some ways, I actually think that what we need is a higher level crypto primitive message, something which embeds an identity and signature, as well as whatever things are required to prevent replay (timestamp\/nonce\/ttl, whatever), a type, and a payload","ts":"1475514577.001471"},{"type":"message","user":"U1BC5A0F9","text":"So do you mean what is checked by VSCC (assuming the default one)","ts":"1475514604.001472"},{"type":"message","user":"U1BC5A0F9","text":"?","ts":"1475514608.001473"},{"type":"message","user":"U0XPR4NP4","text":"For the orderer, which remember does not have a VSCC","ts":"1475514626.001474"},{"type":"message","user":"U1BC5A0F9","text":"ok, i see","ts":"1475514647.001475"},{"type":"message","user":"U0XPR4NP4","text":"The orderer is going to get a message from a client, presumably today that is a transaction, and the orderer needs to be able to tell \"is this actually from a client who is allowed to submit messages\"","ts":"1475514656.001476"},{"type":"message","user":"U1BC5A0F9","text":"and the purpose of the orderer to check signature is which exactly?","ts":"1475514667.001477"},{"type":"message","user":"U1BC5A0F9","text":"is it DoS related?","ts":"1475514673.001478"},{"type":"message","user":"U0XPR4NP4","text":"Because each orderer can validate the connections from clients via TLS easily enough","ts":"1475514681.001479"},{"type":"message","user":"U0XPR4NP4","text":"However, because we allow for byzantine orderers, one orderer (say the primary) might lie and say \"Yes, this transaction came from a client who's TLS cert is authorized\" but instead make up transactions","edited":{"user":"U0XPR4NP4","ts":"1475514761.000000"},"ts":"1475514713.001480"},{"type":"message","user":"U0XPR4NP4","text":"Of course they would be filtered out at the peer side, but the byzantine primary could essentially stop network progress by making up nonsense","ts":"1475514736.001481"},{"type":"message","user":"U1BC5A0F9","text":"aha","ts":"1475514784.001483"},{"type":"message","user":"U0XV1HDL3","text":"<@U0XPR4NP4>: that risk of a faulty primary could exist, but for the usecases we look at mostly (consortium), it seems irrelevant. that is, building in a defense against it that is always executed slows down unnecessarily","ts":"1475514795.001484"},{"type":"message","user":"U1BC5A0F9","text":"but then one could add in the transaction message the certificate of the client, that would enable the orderer to do the check easily","edited":{"user":"U1BC5A0F9","ts":"1475514812.000000"},"ts":"1475514800.001485"},{"type":"message","user":"U1BC5A0F9","text":"but VSCC would need to do the comprehensive checks","ts":"1475514822.001487"},{"type":"message","user":"U1BC5A0F9","text":"that we discuss in the charts","ts":"1475514827.001488"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XV1HDL3> This was a concern from <@U0Y14MWA2> I just replied to a note where he said that we need to do this check","ts":"1475514850.001489"},{"type":"message","user":"U0XV1HDL3","text":"... putting all of this together gives an overly complex result, it seems to me.","ts":"1475514878.001490"},{"type":"message","user":"U0XV1HDL3","text":"his note may not have considered the existence of TLS certs and the closed group","ts":"1475514894.001491"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XV1HDL3> Another reason I thought having the messages be signed is, imagine a byzantine client of the ordering service injects malformed non-sense, but has a validated TLS cert","ts":"1475514983.001492"},{"type":"message","user":"U0Y14MWA2","text":"Orderers could check tcert which prevents primary to issue an arbitrary bogus request","ts":"1475514988.001493"},{"type":"message","user":"U0Y14MWA2","text":"Hovewer tcerts do not prevent primary from replaying old legitimate requests","ts":"1475515024.001494"},{"type":"message","user":"U0Y14MWA2","text":"If we had clients sign with ecerts this is a non issue","ts":"1475515050.001495"},{"type":"message","user":"U0Y14MWA2","text":"But tcerts inherently prevent tra cking clients","ts":"1475515067.001496"},{"type":"message","user":"U0Y14MWA2","text":"And we cannot store all past requests to prevent Replay","ts":"1475515095.001497"},{"type":"message","user":"U0XPR4NP4","text":"<@U0Y14MWA2> <@U0XV1HDL3> I can see how the primary could make the chain increase in size rapidly, but even with replay or forgery, won't it be voted out from primary if it is not including the pending requests of the other backups?","ts":"1475515107.001498"},{"type":"message","user":"U0Y14MWA2","text":"Yes but it could do that","ts":"1475515200.001499"},{"type":"message","user":"U0Y14MWA2","text":"Plus replay","ts":"1475515208.001500"},{"type":"message","user":"U0Y14MWA2","text":"Preventing replay with tcerts is  difficult","ts":"1475515261.001501"},{"type":"message","user":"U0Y14MWA2","text":"We may reason about time","ts":"1475515290.001502"},{"type":"message","user":"U0Y14MWA2","text":"Either logical or \"real\"","ts":"1475515312.001503"},{"type":"message","user":"U0Y14MWA2","text":"That may help...","ts":"1475515321.001504"},{"type":"message","user":"U0XPR4NP4","text":"There is the notion of time embedded within the proposalheader I believe","ts":"1475515344.001505"},{"type":"message","user":"U0XPR4NP4","text":"<@U1BC5A0F9> What is the purpose of having multiple proposals embedded within one transaction? What happens if some of the proposals are valid and some are not?","ts":"1475515443.001506"},{"type":"message","user":"U0XR6J961","text":"i don't quite care about this transaction format","ts":"1475515465.001507"},{"type":"message","user":"U0XR6J961","text":"i think we should just add signature field in the atomic broadcast `Broadcast` ingress call","ts":"1475515500.001508"},{"type":"message","user":"U0XR6J961","text":"field or argument","ts":"1475515507.001509"},{"type":"message","user":"U0XPR4NP4","text":"That does not handle replay","ts":"1475515520.001510"},{"type":"message","user":"U0XR6J961","text":"the orderer should not know anything about what it is ordering","ts":"1475515521.001511"},{"type":"message","user":"U0XR6J961","text":"then add a sequence number","ts":"1475515550.001512"},{"type":"message","user":"U0Y14MWA2","text":"If we add some time notion","ts":"1475515557.001513"},{"type":"message","user":"U0Y14MWA2","text":"Like a sequence number","ts":"1475515564.001514"},{"type":"message","user":"U0Y14MWA2","text":"That helps","ts":"1475515568.001515"},{"type":"message","user":"U0XPR4NP4","text":"Sequence number per client?","ts":"1475515569.001516"},{"type":"message","user":"U0Y14MWA2","text":"No","ts":"1475515574.001517"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1475515574.001518"},{"type":"message","user":"U0XR6J961","text":"no?","ts":"1475515578.001519"},{"type":"message","user":"U0Y14MWA2","text":"With tcerts that does not work","ts":"1475515585.001520"},{"type":"message","user":"U0Y14MWA2","text":"Woth ecerts that works","ts":"1475515593.001521"},{"type":"message","user":"U0XR6J961","text":"ah","ts":"1475515593.001522"},{"type":"message","user":"U0XR6J961","text":"why do we need that whole tcert business?","ts":"1475515605.001523"},{"type":"message","user":"U0Y14MWA2","text":"Anonymity...","ts":"1475515613.001524"},{"type":"message","user":"U0Y14MWA2","text":"Unlinkability","ts":"1475515620.001525"},{"type":"message","user":"U0XPR4NP4","text":"So a client will need to connect to the ordering service... using the t-cert?","ts":"1475515622.001526"},{"type":"message","user":"U0Y14MWA2","text":"N stuff","ts":"1475515624.001527"},{"type":"message","user":"U0XPR4NP4","text":"And will need to disconnect and reconnect between to attempt to prevent linking?","ts":"1475515643.001528"},{"type":"message","user":"U0Y14MWA2","text":"No clue","ts":"1475515660.001529"},{"type":"message","user":"U0Y14MWA2","text":"Previously","ts":"1475515663.001530"},{"type":"message","user":"U0XR6J961","text":"yea, that's all silly","ts":"1475515665.001531"},{"type":"message","user":"U0Y14MWA2","text":"When we had a submitting peer","ts":"1475515673.001532"},{"type":"message","user":"U0Y14MWA2","text":"This was less pronounced","ts":"1475515679.001533"},{"type":"message","user":"U0XR6J961","text":"should the peer also connect via TOR?","ts":"1475515696.001534"},{"type":"message","user":"U0Y14MWA2","text":"On a dial up","ts":"1475515705.001535"},{"type":"message","user":"U0XPR4NP4","text":"If you don't want a byzantine orderer to associate all the transactions from a single address with a single identity... probably","ts":"1475515720.001536"},{"type":"message","user":"U0XQ35CDD","text":"For the reason you listed below (we'd still need to keep a giant list of all past TXs), it would still be an issue right?","attachments":[{"fallback":"[October 3rd, 2016 1:17 PM] vukolic: If we had clients sign with ecerts this is a non issue","ts":"1475515050.001495","author_subname":"vukolic","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"If we had clients sign with ecerts this is a non issue","author_name":"Marko Vukolic","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/vukolic","author_icon":"https:\/\/secure.gravatar.com\/avatar\/a52edd136bbd07ca069b9393ac60f675.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0006-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1475515050001495","is_share":true,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1475515732.001537"},{"type":"message","user":"U0Y14MWA2","text":"From public phone booth","ts":"1475515734.001538"},{"type":"message","user":"U0Y14MWA2","text":"1 per client <@U0XQ35CDD>","ts":"1475515756.001539"},{"type":"message","user":"U0Y14MWA2","text":"Not that huge","ts":"1475515764.001540"},{"type":"message","user":"U0Y14MWA2","text":"In real life","ts":"1475515772.001541"},{"type":"message","user":"U0XPR4NP4","text":"Yes, this is what the original Castro paper suggests if I recall","ts":"1475515790.001542"},{"type":"message","user":"U0Y14MWA2","text":"Yes this is the classical approach","ts":"1475515813.001543"},{"type":"message","user":"U0XPR4NP4","text":"Then do we require that the TLS cert for the connection and the TLS signature for the message match?","ts":"1475515849.001544"},{"type":"message","user":"U0XR6J961","text":"not for clients at the moment","ts":"1475515961.001545"},{"type":"message","user":"U0XR6J961","text":"for replicas yes","ts":"1475515966.001546"},{"type":"message","user":"U0XR6J961","text":"we can still do replay protection for tcerts","ts":"1475516024.001547"},{"type":"message","user":"U0XR6J961","text":"we discard the state when the tcert expires","ts":"1475516032.001548"},{"type":"message","user":"U0XR6J961","text":"or we require a client to submit a new request directly to 2f+1 correct replicas (i.e. send it to 3f+1)","ts":"1475516084.001549"},{"type":"message","user":"U0XQ35CDD","text":"(<@U0Y14MWA2>: FWIW, I think we're dealing with the same complexity in any case. Whether you deal with 100 tcert'd TXs (that you can place in 10 buckets) versus 10 clients with 10 ecert'd TXs each, it still the same accessing cost, if you do the mapping and splitting to buckets right.)","attachments":[{"fallback":"[October 3rd, 2016 1:29 PM] vukolic: Not that huge","ts":"1475515764.001540","author_subname":"vukolic","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"Not that huge","author_name":"Marko Vukolic","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/vukolic","author_icon":"https:\/\/secure.gravatar.com\/avatar\/a52edd136bbd07ca069b9393ac60f675.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0006-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1475515764001540","is_share":true,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1475516091.001550"},{"type":"message","user":"U0XR6J961","text":"and we occasionally inform the primary which request (hashes) we have outstanding","ts":"1475516148.001551"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> I really like the idea of the orderer being totally agnostic to the message contents, but am struggling with how this can mesh with reconfiguration.  If the orderer configuration must be on the chain, how can the orderer treat all messages as opaque bytes?","ts":"1475516159.001552"},{"type":"message","user":"U0XR6J961","text":"that's the only message type it knows","ts":"1475516207.001553"},{"type":"message","user":"U0XPR4NP4","text":"So the orderer does inspect every message, and check whether it's a reconfiguration one or not (and if it's a reconfiguration one, it might choose to discard it if it is not valid)","ts":"1475516239.001554"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1475516265.001555"},{"type":"message","user":"U0XQ35CDD","text":"That's how I thought it would work as well.","ts":"1475516269.001556"},{"type":"message","user":"U0XPR4NP4","text":"Okay, that was what I was thinking, but to me that is not 'totally opaque'","ts":"1475516316.001557"},{"type":"message","user":"U0XQ35CDD","text":"It is not. The only other way is a side-channel specific for reconfiguration, but we don't want this for the reasons we have mentioned several times.","ts":"1475516362.001558"},{"type":"message","user":"U0XPR4NP4","text":"Because the peer needs to understand the reconfiguration as well, would you agree it makes sense to try to re-use the fabric transaction format for the reconfiguration message?","ts":"1475516366.001559"},{"type":"message","user":"U0XR6J961","text":"i disagree","ts":"1475516481.001560"},{"type":"message","user":"U0XR6J961","text":"that format is way complicated","ts":"1475516487.001561"},{"type":"message","user":"U0XPR4NP4","text":"This is why I would like to see the format simplified","ts":"1475516542.001562"},{"type":"message","user":"U0XR6J961","text":"also the protobufs don't look like they've been created with signing in mind","ts":"1475516573.001563"},{"type":"message","user":"U0XPR4NP4","text":"The problem I see, is that the peer wants to define all of its ledger interfaces to expect something of type fabric transaction for every slice of bytes in the block","ts":"1475516582.001564"},{"type":"message","user":"U0XR6J961","text":"i'd prefer stable pieces of data (i.e. what gets stored, not rpc messages) to be in ASN1","ts":"1475516610.001565"},{"type":"message","user":"U0XPR4NP4","text":"Which I think seems perfectly reasonable, I think it's odd to say \"Everything will be of type fabric transaction, except for those that are of type orderer transaction\"","ts":"1475516618.001566"},{"type":"message","user":"U0XQ35CDD","text":"What exactly prevents the peer from doing a type switch on the received messages?","ts":"1475516624.001567"},{"type":"message","user":"U0XQ35CDD","text":"Receive bytes, unpack, type switch.","ts":"1475516636.001568"},{"type":"message","user":"U0XPR4NP4","text":"You could, but that switch then propagates throughout the rest of the ledger interfaces","ts":"1475516671.001569"},{"type":"message","user":"U0XR6J961","text":"so AB block payloads need to contain a type field","ts":"1475516698.001570"},{"type":"message","user":"U0XPR4NP4","text":"At the end of the day, they are both transactions, and actually very similar, they both require a proposed change, and a set of signatures from those who are allowed to permit the change","ts":"1475516708.001571"},{"type":"message","user":"U0XR6J961","text":"which probably makes sense","ts":"1475516709.001572"},{"type":"message","user":"U0XR6J961","text":"because it allows you to multiplex different applications over the blockchain","ts":"1475516724.001573"},{"type":"message","user":"U0XR6J961","text":"well, i'm out","ts":"1475516742.001574"},{"type":"message","user":"U0XPR4NP4","text":"Block payloads need to contain a type field?","ts":"1475516748.001575"},{"type":"message","user":"U0XPR4NP4","text":"IE, the block gets a type? Or each of the block contents get a type?","ts":"1475516762.001576"},{"type":"message","user":"U0XQ35CDD","text":"A block-level type is\/seems less expensive. If the orderer creates a reconfig message, it ships it on its own block whose type is set to \"config\", otherwise it batches a bunch of TXs and sets the type of the block to \"tran\".","ts":"1475516915.001577"},{"type":"message","user":"U0XPR4NP4","text":"Interesting","ts":"1475516935.001578"},{"type":"message","user":"U0XQ35CDD","text":"This is also in-line with Gari's suggestion to keep things simple and devote an entire block\/batch to the reconfiguration.","ts":"1475516941.001579"},{"type":"message","user":"U0XPR4NP4","text":"To me, it seems far more natural to have a higher level Transaction message which contains a type field, and a bare minimum of security stuff and some bytes","ts":"1475516980.001580"},{"type":"message","user":"U0XPR4NP4","text":"The problem I see, is that if we go and invent a new 'reconfiguration' format, that we're going to have to re-invent the security","ts":"1475517059.001581"},{"type":"message","user":"U0XPR4NP4","text":"Maybe it's a worthwhile cost, I certainly do not like the idea of trying to generate the fabric transaction format as is, it is just too complicated","ts":"1475517089.001582"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XQ35CDD> with tcerts preventing replay is O(no of reqs) and with ecerts O(no clients)","ts":"1475517130.001583"},{"type":"message","user":"U0Y14MWA2","text":"Not the same","ts":"1475517138.001584"},{"type":"message","user":"U0XPR4NP4","text":"O(no of reqs in the epoch) which at least bounds it somewhat","ts":"1475517173.001585"},{"type":"message","user":"U0Y14MWA2","text":"Whats an epoch","ts":"1475517186.001586"},{"type":"message","user":"U0XQ35CDD","text":"<@U0Y14MWA2>: I may well be missing something but in the end, whether you sign with an ecert or a tcert, it's an individual transaction you need to keep track of right?","ts":"1475517204.001587"},{"type":"message","user":"U0Y14MWA2","text":"No","ts":"1475517215.001588"},{"type":"message","user":"U0XPR4NP4","text":"I know they talked about adding an explicit epoch field, but here I am meaning it to be the window of time for which the t-cert is valid","ts":"1475517226.001589"},{"type":"message","user":"U0XQ35CDD","text":"eCerts dictate how you do buckets (one bucket per client) but nothing prevents you from having an efficient scheme for tCerts as well.","ts":"1475517232.001590"},{"type":"message","user":"U0Y14MWA2","text":"With ecerts you keep the last one for each client","ts":"1475517236.001591"},{"type":"message","user":"U0XQ35CDD","text":"Ah, let me know what I'm missing then.","ts":"1475517238.001592"},{"type":"message","user":"U0Y14MWA2","text":"You keep a ts per client","ts":"1475517256.001593"},{"type":"message","user":"U0XPR4NP4","text":"(Assuming t-certs expire after 4 hours, you only need to search over however many t-certs have not expired)","edited":{"user":"U0XPR4NP4","ts":"1475517277.000000"},"ts":"1475517260.001594"},{"type":"message","user":"U0Y14MWA2","text":"That is diff <@U0XPR4NP4> ","ts":"1475517286.001596"},{"type":"message","user":"U0Y14MWA2","text":"With time we can simplify replay","ts":"1475517310.001597"},{"type":"message","user":"U0Y14MWA2","text":"At the expense of introducing time","ts":"1475517324.001598"},{"type":"message","user":"U0XQ35CDD","text":"If I send you TX `foo` signed with my ecert, and then TX `bar` signed with my ecert, why do you only have to keep track of `bar`? Someone may well re-introduce `foo`?","edited":{"user":"U0XQ35CDD","ts":"1475517368.000000"},"ts":"1475517333.001599"},{"type":"message","user":"U0Y14MWA2","text":"There is a logical ts with both of those","ts":"1475517358.001601"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XQ35CDD> because `foo` was seqNo=7 and `bar` was seqNo=8","ts":"1475517360.001602"},{"type":"message","user":"U0XQ35CDD","text":"Got it now, yup. Thanks.","ts":"1475517427.001604"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XQ35CDD> So your suggestion would be we add a `Type` field to the block header which scopes the `Data` section of the block? Then what format would we use for the reconfiguration transaction?","ts":"1475517502.001605"},{"type":"message","user":"U0XQ35CDD","text":"I was processing your earlier point before Marko chimed in with the eCert clarification. I see the concern.","ts":"1475517558.001606"},{"type":"message","user":"U0XQ35CDD","text":"My response would be \"a much simpler format\", but then your response would be \"but then we'll have to re-invent security\", correct?","ts":"1475517644.001607"},{"type":"message","user":"U0XPR4NP4","text":"Exactly","ts":"1475517651.001608"},{"type":"message","user":"U0XQ35CDD","text":"Alright so --","ts":"1475517804.001609"},{"type":"message","user":"U0XV1HDL3","text":"... re-joining for a minute ... you've summarized all points","ts":"1475517852.001610"},{"type":"message","user":"U0XV1HDL3","text":"now make sure to get that across to the fabric-crypto channel!","ts":"1475517864.001611"},{"type":"message","user":"U0XQ35CDD","text":"If we agree that the reconfigs will eventually have to go through the same kind of verification checks as standard transactions, I can see why it makes sense to make the reconfig work within the current schema.","ts":"1475517888.001612"},{"type":"message","user":"U0XQ35CDD","text":"The concern here is:","ts":"1475518012.001618"},{"type":"message","user":"U0XQ35CDD","text":"An inexpensive way for the peers\/orderers to realize they're dealing with a reconfig.","ts":"1475518034.001619"},{"user":"U24PWBB97","text":"<@U24PWBB97|vkandy> has joined the channel","type":"message","subtype":"channel_join","ts":"1475518042.001621"},{"type":"message","user":"U0XQ35CDD","text":"Then, regardless of whether reconfigs use the same schema as standard TXs, would you agree that labeling the AB block as of type \"reconfig\" (and having it only include this single \"tx\") would make filtering less expensive?","edited":{"user":"U0XQ35CDD","ts":"1475518166.000000"},"ts":"1475518115.001622"},{"type":"message","user":"U0XPR4NP4","text":"Okay, I would not agree with \"easier\", but in your rephrased \"less expensive\", yes.","ts":"1475518212.001625"},{"type":"message","user":"U0XPR4NP4","text":"However, the idea of a type scoping the contents of the block does not sit well with me","ts":"1475518226.001626"},{"type":"message","user":"U0XQ35CDD","text":"Yes, that's why I edited it. \"Easier\" was wrong.","edited":{"user":"U0XQ35CDD","ts":"1475518235.000000"},"ts":"1475518228.001627"},{"type":"message","user":"U0XPR4NP4","text":"Especially as it is being set by the orderer.  What happens if we wish to add support for yet another transaction type.  Say UTXO?","ts":"1475518255.001629"},{"type":"message","user":"U0XQ35CDD","text":"Nothing will change. UTXO will be treated as current standard TXs are now.","ts":"1475518293.001630"},{"type":"message","user":"U0XQ35CDD","text":"Meaning that your type switch will always be:","ts":"1475518319.001631"},{"type":"message","user":"U0XQ35CDD","text":"`select { case \"reconfig\": doFoo(); default: doBar() }`","ts":"1475518343.001632"},{"type":"message","user":"U0XPR4NP4","text":"I don't believe having to check the type of every transaction is going to be especially expensive though, considering there is a signature verification taking place already","ts":"1475518358.001633"},{"type":"message","user":"U0XQ35CDD","text":"(Where `doBar()` is where the UTXO processing would take place.)","ts":"1475518364.001634"},{"type":"message","user":"U0XPR4NP4","text":"Less expensive yes, meaningfully so? I'm not so sure","ts":"1475518368.001635"},{"type":"message","user":"U0XQ35CDD","text":"I believe the only way to test this accurately is by running benchmarks.","ts":"1475518380.001636"},{"type":"message","user":"U0XQ35CDD","text":"Anything else is cheap hypotheses.","ts":"1475518391.001637"},{"type":"message","user":"U0XQ35CDD","text":"Let's narrow down a couple of our best proposals and I'll be happy to write these benchmarks.","ts":"1475518421.001638"},{"type":"message","user":"U0XPR4NP4","text":"Okay, so as I see it, there are basically 3 options:\n\n1. Re-use the fabric transaction format (hopefully a simplified version that doesn't yet exist, but the current one will do for now) and use the proposalheader type field as the type switch\n2. Create a transaction wrapper with basic security on it, with a type switch, and embed the transaction with one type, or the reconfiguration with another\n3. Add the block type header","ts":"1475518514.001639"},{"type":"message","user":"U24PWBB97","text":"Hello I asked this in <#C0XR102AJ|consensus> channel but was advised to ask here. I am trying to understand *when* a block is created. The spec (<https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/protocol-spec.md#3473-committing-and-rolling-back-transactions>) talks about `CommitTxBatch` but it's not clear at what point transactions are bundled to create a block. Also, what prevents a same node from creating blocks always?","edited":{"user":"U24PWBB97","ts":"1475518615.000000"},"ts":"1475518609.001640"},{"type":"message","user":"U0XQ35CDD","text":"I'm not entirely clear on #2, but we can write the protobufs tomorrow to iron the details out and then I can benchmark.","edited":{"user":"U0XQ35CDD","ts":"1475528263.000000"},"ts":"1475518612.001642"},{"type":"message","user":"U0XPR4NP4","text":"<@U24PWBB97> It sounds like you are talking about the existing 0.6 release, if not the answer will be different.  When using the PBFT consensus algorithm, there is a leader election process which designates one of the nodes as the primary, who picks the contents of the next block.  The primary sends out the contents, and after a three phase protocol, the network has come to consensus about what the contents of the next block will be.  This block is now committed.","ts":"1475518726.001645"},{"type":"message","user":"U0XPR4NP4","text":"I'm not sure what you mean about a 'same node from creating blocks always'.  The guarantee with PBFT (under the fault assumptions) is that all nodes which are following the protocol will all produce the same sequence of blocks (with the same ordered contents).","ts":"1475518821.001646"},{"type":"message","user":"U24PWBB97","text":"<@U0XPR4NP4> thank you - that clears up some confusion I had. I was looking at this file (<https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/consensus\/executor\/executor.go>) \nRegarding the second part I guess what I am asking is can the same node be elected as a leader always therefore a single node produces blocks always. Also, if you could point me in the right direction - how often is a leader elected?","edited":{"user":"U24PWBB97","ts":"1475519258.000000"},"ts":"1475519255.001647"},{"type":"message","user":"U0XPR4NP4","text":"<@U24PWBB97> You're quite welcome, and I'm happy to answer any more questions you might have.  The `executor.go` file you linked to is used to coordinate execution and state transfer, and is called asynchronously from the `pbft` package.  With classical PBFT, the leader is elected in round robin fashion.  Once a leader is chosen, the other network members watch the leader for incorrect behavior, and if they believe the leader is not acting appropriately, vote to move to the next leader.  \"Inappropriately\" can be defined especially as failing to make progress, censoring requests, or otherwise not following the protocol correctly.  Because the rest of the network is monitoring the primary's behavior, the primary may stay the leader indefinitely, so long as it behaves correctly.  Although it is not classically defined in the protocol, there is a flag in the `pbft\/config.yaml` regarding periodic view change, this causes the network to switch leaders at some multiple of every `K` blocks, regardless of the leader's integrity.   This will slow network throughput, but might be considered more 'fair' by some.","ts":"1475519567.001650"},{"type":"message","user":"U24PWBB97","text":"ah! that makes sense. So I guess the primary remaining leader indefinitely isn't an issue in a permissioned chain and given that rest of the nodes are monitoring leaders action. I was looking for a way to force each node to become a leader or at least have equal chance of becoming a leader. Thanks a bunch for this information. I'll browse the pbft package.","ts":"1475520263.001651"},{"type":"message","user":"U0XPR4NP4","text":"You're welcome, we are always here to help","ts":"1475520432.001652"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XQ35CDD> <@U0XR6J961> <@U1KDAMDJ7>  <@U0UGH3X7X> <@U0UKTPMG8>  <@U0PB67X4K> <@U0KN2SSKE> <@U0S5KF44D>  Just finished a long chat with Keith about the bootstrapping issues.  I did my best to try and summarize in <https:\/\/jira.hyperledger.org\/browse\/FAB-359>","edited":{"user":"U0XPR4NP4","ts":"1475526035.000000"},"ts":"1475525986.001653"},{"type":"message","user":"U0XR6J961","text":"why was this never discussed with the consensus squad?","ts":"1475580611.001657"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> I'm not sure.  I first heard about this last Friday.  I believe it was discussed while Marko was visiting, but in a different 'breakout session' than I attended.","ts":"1475586629.001658"},{"type":"message","user":"U0XR6J961","text":"<@U0S5KF44D> would have been beneficial to check with us","ts":"1475586964.001659"},{"user":"U29TSCRQU","text":"<@U29TSCRQU|a.klenik> has joined the channel","type":"message","subtype":"channel_join","ts":"1475588267.001660"},{"user":"U2K3VT40G","text":"<@U2K3VT40G|john.mccloskey> has joined the channel","type":"message","subtype":"channel_join","ts":"1475589881.001661"},{"type":"message","user":"U0XR6J961","text":"so i'll be on vacation until the 26th","ts":"1475661072.001662"},{"type":"message","user":"U0XR6J961","text":"i'd appreciate if somebody could take on the sbft integration","ts":"1475661092.001663"},{"type":"message","user":"U1AU8DRQR","text":"I can do it or drive it, if needed","ts":"1475661941.001664"},{"type":"message","user":"U0XR6J961","text":"go for it!","ts":"1475662212.001665"},{"type":"message","user":"U1AU8DRQR","text":"by sbft integration do we mean the merge of the 4 commits related to sbft and the management of corresponding JIRAs?","ts":"1475663958.001666"},{"type":"message","user":"U1AU8DRQR","text":"btw consensus people, please have a look: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1315\/>","ts":"1475664103.001667"},{"type":"message","user":"U0XR6J961","text":"yes, i mean that","ts":"1475664118.001668"},{"type":"message","user":"U1AU8DRQR","text":"okay I will do that","ts":"1475664124.001669"},{"type":"message","user":"U0XR6J961","text":"thanks!","ts":"1475664127.001670"},{"text":"hands over baton","type":"message","subtype":"me_message","user":"U0XR6J961","ts":"1475664132.001671"},{"type":"message","user":"U1AU8DRQR","text":"welcome","ts":"1475664144.001672"},{"type":"message","user":"U0XR6J961","text":"there are also some things that still need to be addressed","ts":"1475664158.001673"},{"type":"message","user":"U0XR6J961","text":"there are some TODOs in the code","ts":"1475664163.001674"},{"type":"message","user":"U0XR6J961","text":"for which i will create jira issues","ts":"1475664169.001675"},{"type":"message","user":"U1AU8DRQR","text":"yeah I think we don't have to fix all of them in the current changesets","ts":"1475664222.001676"},{"type":"message","user":"U0XR6J961","text":"what we have should go in","ts":"1475664395.001677"},{"type":"message","user":"U1AU8DRQR","text":"yes","ts":"1475664411.001678"},{"type":"message","user":"U0UGH3X7X","text":"jira issues reassign to Gabor <@U0XR6J961> ?  I glanced at the dashboard and didn't see gabor's name yet","ts":"1475672736.001679"},{"user":"U2KJHTPQT","text":"<@U2KJHTPQT|stevenroose> has joined the channel","type":"message","subtype":"channel_join","ts":"1475677618.001680"},{"type":"message","user":"U0UL07VSL","text":"<@U0XQ35CDD> <@U0PB67X4K> thanks for the earlier explanation, the \"panic\" problem is actually pretty easy to duplicate (probably likely to happen in prod too) in high volume environments where 1 or some of the nodes have network problems. I probably need to test it more to get more details, what I believe I saw was the node with bad network will first find itself out of sync, then the weak certs it receives are out of its high watermark, then it will initiate view change request. However, if the network is again bombarded with txs during view change request, the problem node will go panic (I am gonna see if increasing the log size will get better luck).....anyways, a node shouldn't go panic due to network problem","edited":{"user":"U0UL07VSL","ts":"1475747384.000000"},"ts":"1475678646.001681"},{"type":"message","user":"U0UL07VSL","text":"there is also another minor problem when restarting the bad node:","ts":"1475678751.001682"},{"type":"message","subtype":"file_share","text":"<@U0UL07VSL|frankyclu> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/frankyclu\/F2KLCHAR2\/-.txt|Untitled>","file":{"id":"F2KLCHAR2","created":1475678789,"timestamp":1475678789,"name":"-.txt","title":"Untitled","mimetype":"text\/plain","filetype":"text","pretty_type":"Plain Text","user":"U0UL07VSL","editable":true,"size":2103,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2KLCHAR2\/-.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2KLCHAR2\/download\/-.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/frankyclu\/F2KLCHAR2\/-.txt","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2KLCHAR2-c4044a5380","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/frankyclu\/F2KLCHAR2\/-.txt\/edit","preview":"16:51:31.560 [consensus\/util] RegisterChannel -> WARN 027 Received duplicate connection from <nil>, switching to new connection\r\n16:51:48.118 [consensus\/util] RegisterChannel -> WARN 028 Received duplicate connection from <nil>, switching to new connection\r\n16:52:08.119 [consensus\/util] RegisterChannel -> WARN 029 Received duplicate connection from <nil>, switching to new connection\r\n16:52:08.158 [consensus\/util] RegisterChannel -> WARN 02a Received duplicate connection from <nil>, switching to new connection\r\n16:52:08.170 [peer] handleChat -> ERRO 02b Error handling message: Peer FSM failed while handling message (DISC_HELLO): current state: created, error: transition canceled with error: Error registering Handler: Duplicate Handler error: {name:\"vp4\"  30.4.18.119:7051 VALIDATOR \u951f?c+\u951f\u65a4\u62f7\u951f\u7d49H\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u7d52\u5374\u951f\u7d43QT\u951f?g\u951f\u7d6c\u951f\u7d4e}\r","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>16:51:31.560 [consensus\/util] RegisterChannel -&gt; WARN 027 Received duplicate connection from &lt;nil&gt;, switching to new connection<\/pre><\/div>\n<div><pre>16:51:48.118 [consensus\/util] RegisterChannel -&gt; WARN 028 Received duplicate connection from &lt;nil&gt;, switching to new connection<\/pre><\/div>\n<div><pre>16:52:08.119 [consensus\/util] RegisterChannel -&gt; WARN 029 Received duplicate connection from &lt;nil&gt;, switching to new connection<\/pre><\/div>\n<div><pre>16:52:08.158 [consensus\/util] RegisterChannel -&gt; WARN 02a Received duplicate connection from &lt;nil&gt;, switching to new connection<\/pre><\/div>\n<div><pre>16:52:08.170 [peer] handleChat -&gt; ERRO 02b Error handling message: Peer FSM failed while handling message (DISC_HELLO): current state: created, error: transition canceled with error: Error registering Handler: Duplicate Handler error: {name:&quot;vp4&quot;  30.4.18.119:7051 VALIDATOR \u951f?c+\u951f\u65a4\u62f7\u951f\u7d49H\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u7d52\u5374\u951f\u7d43QT\u951f?g\u951f\u7d6c\u951f\u7d4e}<\/pre><\/div>\n<div><pre><\/pre><\/div>\n<\/div>\n<\/div>\n","lines":14,"lines_more":9,"preview_is_truncated":true,"channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0UL07VSL","upload":true,"display_as_bot":false,"username":"<@U0UL07VSL|frankyclu>","bot_id":null,"ts":"1475678790.001683"},{"type":"message","user":"U0UL07VSL","text":"I believe it is caused by restarting the bad node too soon (before each of the other nodes has detected lost connection ).  I believe it is because the good nodes still keeps the old connection handler so it will continue to send get_peer messages,, while at the sametime the restarting node will try to send hello  to the good node, and then get duplicate handler exception that leads to never ending get_peer messages. <@U0UKTPMG8> <@U0KN2SSKE> you may have better ideas.... what I can do now is wait longer before restarting to ensure all nodes on the network have detected lost connection","edited":{"user":"U0UL07VSL","ts":"1475680196.000000"},"ts":"1475679726.001685"},{"type":"message","user":"U0XR6J961","text":"tuand: i think as soon as somebody starts working on an issue, they will assign it to themselves?","ts":"1475679765.001687"},{"type":"message","user":"U0XR6J961","text":"meh, iterating over maps","ts":"1475680586.001694"},{"type":"message","user":"U0XR6J961","text":"yey nondeterminism","ts":"1475680590.001695"},{"type":"message","user":"U0UGH3X7X","text":"agreed simon ... all yours <@U1AU8DRQR>","ts":"1475680598.001696"},{"type":"message","user":"U0XR6J961","text":"i just found a nondeterministic piece of code in my test system","ts":"1475680608.001697"},{"type":"message","user":"U0XR6J961","text":"-_-","ts":"1475680613.001698"},{"type":"message","user":"U0XPR4NP4","text":"For those who are interested, I've pushed a commit to Gerrit which implements a tiny little DSL via protobuf for specifying signature validation policies <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1487\/>","ts":"1475692151.001700"},{"type":"message","user":"U0XR6J961","text":"if somebody could fix my `connectAll()` in `simplebft_test.go` that would be wonderful","ts":"1475703988.001701"},{"type":"message","user":"U0XR6J961","text":"it is nondeterministic and occasionally breaks a test (because there is a bug in the startup code in that the request timer is not reset after `sendCheckpoint` is called in `New()`.  that's a second bug that needs love <@U1AU8DRQR>","ts":"1475704057.001702"},{"type":"message","user":"U0XR6J961","text":"ok, off to vacation","ts":"1475704066.001703"},{"type":"message","user":"U0XQ35CDD","text":"<@U1AU8DRQR>: related to your work in FAB-473, when you find some time, can you please tell me whether you can see it being useful for FAB-469? It would be nice to have something that's re-usable. <https:\/\/jira.hyperledger.org\/browse\/FAB-469>","ts":"1475716427.001705"},{"type":"message","user":"U0XQ35CDD","text":"By the way, I've added two issues in JIRA for what I think are the logical next steps for the Kafka orderer:","edited":{"user":"U0XQ35CDD","ts":"1475716568.000000"},"ts":"1475716493.001706"},{"type":"message","user":"U0XQ35CDD","text":"<https:\/\/jira.hyperledger.org\/browse\/FAB-469>","ts":"1475716499.001707"},{"type":"message","user":"U0XQ35CDD","text":"<https:\/\/jira.hyperledger.org\/browse\/FAB-613>","ts":"1475716504.001708"},{"type":"message","user":"U0XQ35CDD","text":"I'll wait until Monday, and then I'll also share with the mailing list along with the rest of the consensus backlog.","ts":"1475716618.001710"},{"type":"message","user":"U1AU8DRQR","text":"<@U0XQ35CDD> I will check it. <@U0XR6J961> I will fix it ","ts":"1475731893.001711"},{"user":"U11NUTP4L","text":"<@U11NUTP4L|srirama_sharma> has joined the channel","type":"message","subtype":"channel_join","ts":"1475733378.001712"},{"type":"message","user":"U0ZJZBJLF","text":"Does anyone know whether the blocks coming from the consensus layer are now going to be signed by every consenter (multi-signature) or each block is going to be signed only be one of them? <@U0Y14MWA2>  <@U0XR6J961>  ?","edited":{"user":"U0ZJZBJLF","ts":"1475734751.000000"},"ts":"1475734722.001713"},{"type":"message","user":"U0Y14MWA2","text":"<@U0ZJZBJLF> in any solution between f+1 and 2f+1 sigs per batch make sense","ts":"1475735432.001715"},{"type":"message","user":"U0ZJZBJLF","text":"Ok so multi sig","ts":"1475735470.001716"},{"type":"message","user":"U0Y14MWA2","text":"1 does not as does not guarantee much and all does not fly due to fault tolerance","ts":"1475735482.001717"},{"type":"message","user":"U0Y14MWA2","text":"Yes 1 would fly with threshold sigs but crypto is not yet there","ts":"1475735514.001718"},{"type":"message","user":"U0ZJZBJLF","text":"Ok just making sure","ts":"1475735514.001719"},{"type":"message","user":"U0ZR63HLK","text":"<@U0XPR4NP4>, regarding <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1487\/>, is it possible to have a policy that says: check the signature against all the identities. This might be useful in case one wants to use ring signature. Actually, I like a lot your approach. It looks like it can be generalized and used also in other contexts, i.e. endorsement","ts":"1475743117.001720"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZR63HLK> Thanks for the feedback, I'd love to add support for ring signatures if possible.  It sounds like in order to support this, instead of returning a `bool` for \"Signature is valid\" we could return a `[]int` inndicating \"Which valid signatures\", then validate that `N` of the signatures out of the identities have signed?","ts":"1475760178.001722"},{"type":"message","user":"U0ZR63HLK","text":"<@U0XPR4NP4>, actually it is more like this. The verification algorithm takes in input the signature, the message and all the public key in the ring group, and returns yes or no","ts":"1475760244.001723"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZR63HLK> Oh, I see, I can think on how to support this, unless you have an idea off the top of your head?","ts":"1475760302.001724"},{"type":"message","user":"U0ZR63HLK","text":"actually, this was more a sanity check to verify that the framework is generic enough. I think it can be accommodated in multiple ways, actually","ts":"1475760369.001725"},{"type":"message","user":"U0ZR63HLK","text":"for instance, one can pass to the crypto helper the concatenation of all the public keys","ts":"1475760407.001726"},{"type":"message","user":"U0ZR63HLK","text":"so no interface needs to be changed","ts":"1475760419.001727"},{"type":"message","user":"U0ZR63HLK","text":"anyway, it is really cool that you can do this with protobuf :slightly_smiling_face:","ts":"1475760445.001728"},{"type":"message","user":"U0XPR4NP4","text":"Great, thanks! I thought it was a cute idea... let protobuf do the schema validation to make sure the thing is well formed, then 'execute'","ts":"1475760533.001729"},{"type":"message","user":"U0ZR63HLK","text":"indeed :slightly_smiling_face:","ts":"1475760545.001730"},{"type":"message","user":"U0UGH3X7X","text":"I'm finding that multiple people are working on bootstrapping , whether peer or orderer, for example <https:\/\/jira.hyperledger.org\/browse\/FAB-423>, <https:\/\/jira.hyperledger.org\/browse\/FAB-430>, <https:\/\/jira.hyperledger.org\/browse\/FAB-423>, <https:\/\/jira.hyperledger.org\/browse\/FAB-29>, <https:\/\/jira.hyperledger.org\/browse\/FAB-359>","ts":"1475764360.001731"},{"type":"message","user":"U0UGH3X7X","text":"can one of you guys describe where we are at ? and what other things we need to put on the table ?","ts":"1475764412.001732"},{"type":"message","user":"U0UGH3X7X","text":"<@U0XPR4NP4>  ?  <@U0S5KF44D>  ?","ts":"1475764442.001733"},{"type":"message","user":"U0UGH3X7X","text":"or perhaps orderer service should go its own way and figure out just bootstrapping for orderers only ?","ts":"1475764485.001734"},{"type":"message","user":"U0XPR4NP4","text":"<@U0UGH3X7X> Totally agree, we have far too many people working in isolation on this","ts":"1475764526.001735"},{"type":"message","user":"U0XPR4NP4","text":"I'm working with <@U0ULK2JPP> today trying to make some more concrete progress.  and was also just talking with <@U1AU8DRQR>, I'll paste what I told him here:\n\nIn brief, for bootstrapping, we should push a 'special transaction' into the genesis block which contains the configuration info\nThat way we can re-use the same mechanism for reconfiguration down the line\nWe'll need of course the PBFT identities and config, but also the client CA certs,\nThat's what started me down the path to <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1487\/>\nSo, assuming we can get a transaction format which is easy for non-fabric stuff to produce and consume, then we need to define hopefully some sort of generic config proto, and then some pbft specific extensions to it\nOr at least that's the plan of attack in my head","ts":"1475764609.001736"},{"type":"message","user":"U0UGH3X7X","text":"ok,  pull me when you talk to <@U0ULK2JPP>  ?  maybe I can work up a flow diagram ...","ts":"1475764750.001737"},{"type":"message","user":"U0UGH3X7X","text":"and I don't know where <@U0UKTPMG8> stands on this either ... I know he mentioned a few concerns on FAB-359","ts":"1475764804.001738"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I've talked with <@U0UKTPMG8> a bit about this, he was actually the first one to point me to FAB-359, I'm hoping that my comments are helping to address his concerns.","ts":"1475764858.001739"},{"type":"message","user":"U0UKTPMG8","text":"<@U0XPR4NP4> <@U0UGH3X7X> <@U0ULK2JPP> I think we should focus like a laser on bootstrap","edited":{"user":"U0UKTPMG8","ts":"1475767557.000000"},"ts":"1475767547.001740"},{"text":"<@U0XPR4NP4|jyellick> has started a Google+ Hangout for this channel. <https:\/\/hangouts.google.com\/hangouts\/_\/avqbsligmjgkbf3ckq35ldokbqe|Join Hangout>.","username":"hangouts","bot_id":"B0UKUAJ0Y","type":"message","subtype":"bot_message","ts":"1475768493.001742"},{"type":"message","user":"U0XPR4NP4","text":"Ongoing discussion of bootstrapping and endorsement policies ^above","edited":{"user":"U0XPR4NP4","ts":"1475768515.000000"},"ts":"1475768506.001743"},{"type":"message","user":"U0S5KF44D","text":"Regarding bootstrapping, I just updated the description of <https:\/\/jira.hyperledger.org\/browse\/FAB-359> so pls comment","ts":"1475776073.001745"},{"type":"message","user":"U0XPR4NP4","text":"Commented, we have been using the hangout above to discuss the bootstrapping flow but broke for lunch","ts":"1475777018.001746"},{"type":"message","user":"U0XPR4NP4","text":"We'll be resuming in a bit if you'd like to join","ts":"1475777026.001747"},{"type":"message","user":"U0XPR4NP4","text":"To summarize the results thusfar, the flow was envisioned as follows:\n\n1. Entities create CA certs for peer network\n2. Entities create Self-signed certs for orderer network\n3. Certs are sent to the bootstrap administrator\n4. Bootstrap administrator uses bootstrapping tool to generate genesis block\n  * Bootstrap administrator sets ordering ingress validation policy\n  * Bootstrap administrator sets ordering egress validation policy\n  * Bootstrap administrator sets ordering opaque config (for instance specifics of PBFT f\/K\/L\/etc.)\n  * Bootstrap administrator sets peer opaque config (VSCC policies, etc.)\n9. Bootstrap administrator distributes the genesis block to other administrators\n10. After inspection and approval, administrator installs block at orderer node and starts (orderer network now functional)\n11. Admin supplies genesis hash and ordering service to peers, they connect and receive genesis block to bootstrap their configuration","edited":{"user":"U0XPR4NP4","ts":"1475777550.000000"},"ts":"1475777412.001748"},{"type":"message","user":"U0XPR4NP4","text":"<@U0S5KF44D>  ^","ts":"1475777513.001749"},{"type":"message","user":"U0S5KF44D","text":"OK, given the above, I think the only differences to what I have in FAB-359 are:","ts":"1475777745.001751"},{"type":"message","user":"U0S5KF44D","text":"1) The way in which the COP APIs are used at startup since you\u2019re gen\u2019ing the genesis block thru tooling rather than 1st start","ts":"1475777801.001752"},{"type":"message","user":"U0S5KF44D","text":"2) You\u2019re saying that you use self-signed certs for orderers.  I don\u2019t think you have to require that, but certainly is the easiest to to start with from a test perspective","ts":"1475777876.001753"},{"type":"message","user":"U0XPR4NP4","text":"The other distinction I see is that COP contains membership services","ts":"1475777924.001754"},{"type":"message","user":"U0XPR4NP4","text":"And I don't think we need that embedded in the orderer or most peers","ts":"1475777941.001755"},{"type":"message","user":"U0S5KF44D","text":"COP is just a library in this case \u2026 and a CLI tool","ts":"1475777945.001756"},{"type":"message","user":"U0XPR4NP4","text":"They need to be able to validate policies, which is fine","ts":"1475777959.001757"},{"type":"message","user":"U0XPR4NP4","text":"But I'm wary of bringing in function like issuing certificates to something like the orderer which simply doesn't need that","ts":"1475777986.001758"},{"type":"message","user":"U0XPR4NP4","text":"It should be given a certificate at bootstrap","ts":"1475777993.001759"},{"type":"message","user":"U0S5KF44D","text":"You don\u2019t have to run a cop server in an orderer.  I think there is confusion.","ts":"1475778093.001760"},{"type":"message","user":"U0XV1HDL3","text":"<@U0XPR4NP4> - i hope that not all 11 steps require manual typing, instead there should be a way to give the minimal info and some tool does the steps and installs all files!","ts":"1475786899.001761"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XV1HDL3> Absolutely there will be a tool which packages this nicely, but we need to know ultimately what the tool will be doing under the covers, I would say a simplified list is:\n\n1. All parties generated keys\/certs as needed\n2. Admin feeds public keys and some initial config info into a bootstrapping tool, which produces the genesis block\n3. Admin gives the genesis block back to the interested parties, who confirm they are happy with it\n4. Orderer network starts and peers connect to bootstrap\n\nI think (1) is unavoidable because you do not want someone else generating your private key.  (2) is more effectively 'the bootstrapping', (3) diseminates, and (4) executes.  Assuming some lack of trust between the admin and the components, I'm not sure it can get much simpler","ts":"1475789202.001762"},{"type":"message","user":"U0XPR4NP4","text":"And of course for POC or trusted networks with a single admin, this can be simplified still.  I see no reason we could not support deploying a network with a single point of trust in a single command.","ts":"1475789332.001763"},{"type":"message","user":"U1AU8DRQR","text":"There is a bug in the sbft implementation. Any help is welcome.","ts":"1475823130.001764"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XR6J961> ^^^","ts":"1475835183.001765"},{"type":"message","user":"U0Y14MWA2","text":"<@U1AU8DRQR> can you pls be more specific? are you posting the issue to JIRA?","ts":"1475835201.001766"},{"type":"message","user":"U1AU8DRQR","text":"<@U0Y14MWA2> Simon is on vacation. I am trying to deal with it. Do we need a JIRA for it? if yes, I can open one or write to the existing ones. I meant this implementation: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1315\/>","ts":"1475835400.001767"},{"type":"message","user":"U0Y14MWA2","text":"I am only on my mobile today so gerrit does not render nicely","ts":"1475835690.001768"},{"type":"message","user":"U0Y14MWA2","text":"The code i was looking at with simon about a week ago was on his github fork","ts":"1475835726.001769"},{"type":"message","user":"U0Y14MWA2","text":"Did he integrate back to gerrit in the meantime","ts":"1475835753.001770"},{"type":"message","user":"U1AU8DRQR","text":"yes he did","ts":"1475836529.001771"},{"type":"message","user":"U0XQ35CDD","text":"<@U1AU8DRQR>: Open up an issue for it with details, and -2 the SBFT changesets. My plan moving forward is to split my time between the Kafka work and SBFT, so I could look into it.","ts":"1475840732.001772"},{"type":"message","user":"U0N4P17ND","text":"Have asked this question in <#C1J0BM448|membership-services> but will probably re-ask here as well as it is some sort of question about consensus in case of `bad` mbrsvc node:\nHi, question regarding mbrsvc architecture in v1: what will happen if somebody gain control over one of the meberservcies instance? Theoretically it can start issue new certificates and new peers will join network, which can take a control over the network? This was an issue in v.05 - considering mbrsvc as single place of failure, right? but now we mbrsvc is distributed so how this case is prevented is there any use case description for such scenario? Which architecture should Customer use to prevent such scenario?","ts":"1475842508.001773"},{"type":"message","user":"U0N4P17ND","text":"Also I have read <https:\/\/docs.google.com\/document\/d\/1TRYHcaT8yMn8MZlDtreqzkDcXx0WI50AV2JpAcvAM5w\/edit#> and discussions in <https:\/\/jira.hyperledger.org\/browse\/FAB-361> maybe some other doc exist which will help me to understand the behavior here?","ts":"1475842560.001774"},{"type":"message","subtype":"file_share","text":"<@U0UGH3X7X|tuand> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/tuand\/F2LLK1NFJ\/20161006_141659.jpg|Bootstrap discussion Oct 6>","file":{"id":"F2LLK1NFJ","created":1475846103,"timestamp":1475846103,"name":"20161006_141659.jpg","title":"Bootstrap discussion Oct 6","mimetype":"image\/jpeg","filetype":"jpg","pretty_type":"JPEG","user":"U0UGH3X7X","editable":false,"size":2583535,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2LLK1NFJ\/20161006_141659.jpg?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2LLK1NFJ\/download\/20161006_141659.jpg?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_64":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2LLK1NFJ-87b612dfbb\/20161006_141659_64.jpg?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_80":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2LLK1NFJ-87b612dfbb\/20161006_141659_80.jpg?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2LLK1NFJ-87b612dfbb\/20161006_141659_360.jpg?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360_w":360,"thumb_360_h":203,"thumb_480":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2LLK1NFJ-87b612dfbb\/20161006_141659_480.jpg?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_480_w":480,"thumb_480_h":270,"thumb_160":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2LLK1NFJ-87b612dfbb\/20161006_141659_160.jpg?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2LLK1NFJ-87b612dfbb\/20161006_141659_720.jpg?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720_w":720,"thumb_720_h":405,"thumb_960":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2LLK1NFJ-87b612dfbb\/20161006_141659_960.jpg?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_960_w":960,"thumb_960_h":540,"thumb_1024":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2LLK1NFJ-87b612dfbb\/20161006_141659_1024.jpg?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_1024_w":1024,"thumb_1024_h":576,"image_exif_rotation":1,"original_w":4160,"original_h":2340,"permalink":"https:\/\/hyperledgerproject.slack.com\/files\/tuand\/F2LLK1NFJ\/20161006_141659.jpg","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2LLK1NFJ-20b9a7963d","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0UGH3X7X","upload":true,"display_as_bot":false,"username":"<@U0UGH3X7X|tuand>","bot_id":null,"ts":"1475846110.001775"},{"type":"message","user":"U0UGH3X7X","text":"what <@U0XPR4NP4> <@U0ULK2JPP> <@U0S5KF44D> <@U1KDAMDJ7>  <@U0UKTPMG8>  <@U0UGH3X7X> spent the day discussing ^^^","edited":{"user":"U0UGH3X7X","ts":"1475847136.000000"},"ts":"1475846222.001776"},{"type":"message","user":"U0UGH3X7X","text":"I'll format and put this and above comments into jira <https:\/\/jira.hyperledger.org\/browse\/FAB-359>","edited":{"user":"U0UGH3X7X","ts":"1475851159.000000"},"ts":"1475846258.001777"},{"type":"message","user":"U1AU8DRQR","text":"<https:\/\/jira.hyperledger.org\/browse\/FAB-624>","ts":"1475846929.001778"},{"type":"message","user":"U0XPR4NP4","text":"<@U0N4P17ND> If someone takes control over the membership services \/ private keys of an entity in the network, they can transact as that entity.  I think this is unavoidable.  However, in v1, we allow multiple roots of trust, so usually (depending on the configuration), one corrupted root of trust would not be sufficient to take over the entire network.","ts":"1475849496.001780"},{"type":"message","user":"U0N4P17ND","text":"but why? If I have cert entity can I spin up as many peers as I want?","ts":"1475849552.001781"},{"type":"message","user":"U0N4P17ND","text":"as I mentioned I have read some docs on future changes but guess that still don't have the whole picture here","ts":"1475849581.001782"},{"type":"message","user":"U0XPR4NP4","text":"So, in v1 having more peers does not necessarily give any more power.","ts":"1475849638.001783"},{"type":"message","user":"U0XPR4NP4","text":"The endorsement policies, and other policies specify which certificate roots need to sign off on something.","ts":"1475849704.001784"},{"type":"message","user":"U0XPR4NP4","text":"So, controlling entity A only partially fulfills a policy that says it requires a signature from A, B, and C","edited":{"user":"U0XPR4NP4","ts":"1475849780.000000"},"ts":"1475849733.001785"},{"type":"message","user":"U0N4P17ND","text":"ah, true, it is separate services now... make more sense now...","ts":"1475849830.001787"},{"type":"message","user":"U0N4P17ND","text":"thanks <@U0XPR4NP4>! \nAnother question which documents for security scenarios\/membership service exist right now except <https:\/\/docs.google.com\/document\/d\/1TRYHcaT8yMn8MZlDtreqzkDcXx0WI50AV2JpAcvAM5w\/edit#> and discussions in <https:\/\/jira.hyperledger.org\/browse\/FAB-361> and presentations from <https:\/\/jira.hyperledger.org\/browse\/FAB-37>?","ts":"1475850295.001788"},{"type":"message","user":"U0XPR4NP4","text":"Although it's more focused on bootstrapping, you might find some illuminating information in <https:\/\/jira.hyperledger.org\/browse\/FAB-359>","ts":"1475850544.001789"},{"type":"message","user":"U0N4P17ND","text":"yeah it is linked to FAB-361, so read all of them","ts":"1475850576.001790"},{"type":"message","user":"U0N4P17ND","text":"if I got it correctly- there are still some ongoing discussions, so some detailed technical specification can't exist right now... am I correct?","ts":"1475850637.001791"},{"user":"U1CTBUNEN","text":"<@U1CTBUNEN|mart0nix> has joined the channel","type":"message","subtype":"channel_join","ts":"1475850690.001792"},{"type":"message","user":"U0XPR4NP4","text":"Yes, things are still evolving, but reading JIRA and slack is probably the way to get the best picture, so looks like you're on your way","ts":"1475850970.001793"},{"type":"message","user":"U0N4P17ND","text":":slightly_smiling_face: thanks again!","ts":"1475851008.001794"},{"type":"message","user":"U0XPR4NP4","text":"You're welcome, will be here if you have any other questions","ts":"1475851240.001796"},{"user":"U2M4L4XEY","text":"<@U2M4L4XEY|phyrex> has joined the channel","type":"message","subtype":"channel_join","ts":"1476097361.001797"},{"user":"U1W210996","text":"<@U1W210996|zemtsov> has joined the channel","type":"message","subtype":"channel_join","ts":"1476105536.001798"},{"user":"U2MCH9EEB","text":"<@U2MCH9EEB|crazybit> has joined the channel","type":"message","subtype":"channel_join","ts":"1476106658.001799"},{"user":"U2DHRR4TE","text":"<@U2DHRR4TE|tom.appleyard> has joined the channel","type":"message","subtype":"channel_join","ts":"1476110630.001800"},{"type":"message","user":"U2DHRR4TE","text":"Quick question about PBFT - would anyone be able to explain on what grounds the validating leader is changed? (i.e. is it every block, after a certain number of TXs etc.)\n\nFollowing from this how is the new leader chosen?\n\nI'm told this happens through an election of some kind - what kicks this off, what decides how votes are cast?","ts":"1476110668.001801"},{"type":"message","user":"U0XPR4NP4","text":"<@U2DHRR4TE> There are a number of conditions which can cause a change in leadership, but in general they can be boiled down to 'not allowing the network to make progress'","ts":"1476110768.001802"},{"type":"message","user":"U0XPR4NP4","text":"So, for instance if the primary is refusing to order a message from another replica, or the primary is skipping sequence numbers, etc., this would be grounds for the other replicas to issue view changes, to cause leadership to change","ts":"1476110821.001803"},{"type":"message","user":"U0XPR4NP4","text":"Leadership changes in a round-robin fashion, you can compute the leader as the `view % N` where `N` is the number of replicas in the network.","ts":"1476110854.001804"},{"type":"message","user":"U0XPR4NP4","text":"Essentially, if the new leader does its job correctly, then it will stay the leader, otherwise the rest of the network will send view-changes to move on to the next","ts":"1476110897.001805"},{"type":"message","user":"U2DHRR4TE","text":"ah right cool - thanks!\n\nanother quick question - when an node that is out of date wants to get up to date it as I understand it, it gets deltas\/blocks\/a snapshot - how does it decide which to get? Can it measure it's out-of-dateness?","ts":"1476110995.001806"},{"type":"message","user":"U0XPR4NP4","text":"Yes, it sounds like you are referring to the 0.5\/0.6 release.  In this case, there is a configuration variable you can see in the `peer\/core.yaml` `statetranfser.maxdeltas`.  If the peer's block height is within that variable number of blocks of the network block height, then it will attempt to transfer via state deltas.  If it is further out of date than that, then it will attempt to recover via the state snapshot.  Note that the number of state deltas retained by a peer (to send to others) is controlled in that same file by `ledger.state.deltaHistorySize`, and you should be sure to keep `maxdeltas &lt; deltaHistorySize`","edited":{"user":"U0XPR4NP4","ts":"1476111270.000000"},"ts":"1476111213.001807"},{"type":"message","user":"U2DHRR4TE","text":"brill - thanks! :slightly_smiling_face:","ts":"1476111329.001810","reactions":[{"name":"+1","users":["U0XPR4NP4"],"count":1}]},{"type":"message","user":"U0XQ35CDD","text":"<@U0ZJZBJLF>: I just watched the demo video for gossip, nice. Can you provide a few more details on the bootstrap peer? Who will maintain\/own this one in a network?","ts":"1476114037.001811"},{"type":"message","user":"U0XQ35CDD","text":"Is there any overlap with the bootstrap server presented in FAB-359?","ts":"1476114063.001812"},{"type":"message","user":"U0XQ35CDD","text":"And should we maybe make it so that every peer that joins the network has to announce themselves via a transaction on the ledger (I believe <@U0UKTPMG8> goes one step ahead and says that this transactions needs to be endorsed), so that this bootstrap peer is no longer needed?","ts":"1476114133.001813"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XQ35CDD> My impression from the video was that all peers are capable of being bootstrapping peers, but that one\/some must be selected for initial config, <@U0ZJZBJLF> please correct me if I am wrong","ts":"1476115842.001814"},{"type":"message","user":"U0ZJZBJLF","text":"^ exactly","ts":"1476115874.001815"},{"type":"message","user":"U0ZJZBJLF","text":"you can have any number of them as your bootstrap peers","ts":"1476115885.001816"},{"type":"message","user":"U0ZJZBJLF","text":"about 359- I dunno if there is overlap, generally- the gossip component doesn't have any \"reference\" of roles of nodes in fabric.","ts":"1476115993.001817"},{"type":"message","user":"U0ZJZBJLF","text":"our discovery API simply lets you somehow \"know\" about all the nodes in the network and the metadata that these nodes publish, you can leverage the metadata ([]bytes) to determine the role of the specific node in the world","ts":"1476116057.001818"},{"type":"message","user":"U0XQ35CDD","text":"Understood. I figured that was an option, just wasn't sure if there were other assumptions here I wasn't aware of. Thanks. ","ts":"1476117035.001819"},{"type":"message","user":"U0XQ35CDD","text":"And the address of this bootstrapping peer (or peers) that is to be put into the config file is acquired how? ","edited":{"user":"U0XQ35CDD","ts":"1476117100.000000"},"ts":"1476117085.001820"},{"type":"message","user":"U0PB67X4K","text":"<@U0XQ35CDD> - endorsement seems pretty meaningless (other than its the normal course of checking to make sure that a proposal meets seem type of criteria) when it comes to things like \"membership\" (for lack of a better term).   Endorsement is not equivalent to \"approval\"  - meaning if a peer endorses a proposal to add another peer, what does that actually mean?  I would think that there still needs to be some type of out of band process which actually collected a bunch of signatures which would actually be part of the proposal.  Endorsement would check the fact that the proposal actually had enough signatures (for example)","ts":"1476117166.001822"},{"type":"message","user":"U0PB67X4K","text":"the same holds true for orderers as well.  maybe this was obvious to people but it seems we sometimes forget that actual approval to add anything happens out of band unless we plan on introducing some type of interactive \/ workflow flow (meaning there can be some type of intervention before automatically endorsing)\n\nI do see this mentioned in some of <@U0XPR4NP4> 's comments","edited":{"user":"U0PB67X4K","ts":"1476117309.000000"},"ts":"1476117256.001823"},{"type":"message","user":"U0PB67X4K","text":"(not picking on you BTW)","ts":"1476117318.001826"},{"type":"message","user":"U0ZJZBJLF","text":"the address is to be acquired in any manner you want, i guess. It can be like fabric 0.5 in the core.yaml file, or any other way (dns? multicast? I don't know)","ts":"1476117993.001827"},{"type":"message","user":"U0ZJZBJLF","text":"Gari- I think there is *some* overlapping between endorsements and membership though- which peers can be endorsers of a chaincode","ts":"1476118073.001828"},{"type":"message","user":"U0PB67X4K","text":"agreed - I just wanted to say that endorsement is not the same as approval (well at least by default).","ts":"1476118213.001829"},{"type":"message","user":"U0ULK2JPP","text":"<@U0PB67X4K>  `...actual approval to add anything happens out of band \u2026` this is specifically for things like adding a peer correct ?","ts":"1476118330.001830"},{"type":"message","user":"U0ULK2JPP","text":"ie, not a general statement for typical proposal flows","ts":"1476118347.001831"},{"type":"message","user":"U0PB67X4K","text":"correct.  but I think people sometimes get confused with endorsement and signature-based workflow \/ approval.  That's not to say some could not implement chaincode which actually did some type of real approval (e.g. check for some entry, etc), but they are not equivalent","ts":"1476118616.001832"},{"type":"message","user":"U0XQ35CDD","text":"<@U0PB67X4K>: Yeah, I was fuzzy on this and didn't quite get it when I heard it - hence the parenthesis and the reference to Jeff. Thanks for clarifying.","ts":"1476139924.001833"},{"type":"message","user":"U0XQ35CDD","text":"<@U0ZJZBJLF> My question is a bit more practical (I think): how do I know which IP I'm going to add to the file? How do we imagine this playing out in a real-world scenario?","attachments":[{"fallback":"[October 10th, 2016 12:46 PM] yacovm: the address is to be acquired in any manner you want, i guess. It can be like fabric 0.5 in the core.yaml file, or any other way (dns? multicast? I don't know)","ts":"1476117993.001827","author_subname":"yacovm","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"the address is to be acquired in any manner you want, i guess. It can be like fabric 0.5 in the core.yaml file, or any other way (dns? multicast? I don't know)","author_name":"Yacov Manevich","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/yacovm","author_icon":"https:\/\/avatars.slack-edge.com\/2016-09-30\/85916865123_74ecb5d18535acea44aa_48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1476117993001827","is_share":true,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1476174843.001834"},{"type":"message","user":"U0ZJZBJLF","text":"Kostas, I'm really not sure why you're asking this now. This is essentially the way fabric works...","ts":"1476174887.001835"},{"type":"message","user":"U0XQ35CDD","text":"Well, for one - just because 0.5 made some assumptions doesn't mean they have to necessarily carry over to v1.","ts":"1476175016.001836"},{"type":"message","user":"U0ZJZBJLF","text":"okay- this is a fair point","ts":"1476175045.001837"},{"type":"message","user":"U0ZJZBJLF","text":"but let me ask you something then- how does discovery works in the real world?","ts":"1476175067.001838"},{"type":"message","user":"U0ZJZBJLF","text":"you *always* need some bootstrapping endpoint","ts":"1476175076.001839"},{"type":"message","user":"U0ZJZBJLF","text":"either it's your DNS server, or your preconfigured files","ts":"1476175088.001840"},{"type":"message","user":"U0ZJZBJLF","text":"or maybe sometimes your address is known to someone else and it contacts you (i.e - ip multicast)","edited":{"user":"U0ZJZBJLF","ts":"1476175123.000000"},"ts":"1476175104.001841"},{"type":"message","user":"U0XQ35CDD","text":"I am asking this however because it's a genuine question. For instance for the orderers, it's a given that these guys that run the ordering network will need to call\/email\/fax each other before they come online, so that's how they know who's who.","edited":{"user":"U0XQ35CDD","ts":"1476175500.000000"},"ts":"1476175141.001843"},{"type":"message","user":"U0ZJZBJLF","text":"depends on what type of orderers they are","ts":"1476175162.001844"},{"type":"message","user":"U0ZJZBJLF","text":"if its a SOLO then its alone","ts":"1476175169.001845"},{"type":"message","user":"U0ZJZBJLF","text":"if it's KAFKA, then they need to know their brothers (Zookeeper is statically configured AFAIK)","edited":{"user":"U0ZJZBJLF","ts":"1476175222.000000"},"ts":"1476175179.001846"},{"type":"message","user":"U0ZJZBJLF","text":"but this has nothing to do with the gossip bootstrapping","ts":"1476175186.001847"},{"type":"message","user":"U0XQ35CDD","text":"The solo work is a stopgap measure.","ts":"1476175187.001848"},{"type":"message","user":"U0XQ35CDD","text":"Again, I understand this.","ts":"1476175194.001849"},{"type":"message","user":"U0XQ35CDD","text":"What I am simply asking: you expect then, that a peer who joins the network knows the address of another peer already and will use that as the bootstrapping peer address?","ts":"1476175261.001851"},{"type":"message","user":"U0ZJZBJLF","text":"yes","ts":"1476175271.001852"},{"type":"message","user":"U0ZJZBJLF","text":"it can be btw not a peer but someone else like the membership service, or the consensus itself","ts":"1476175375.001853"},{"type":"message","user":"U0ZJZBJLF","text":"essentially the only thing that entity needs is to be able to answer to a certain protobuf stream object:\n```\nmessage MembershipRequest {\n    AliveMessage selfInformation = 1;\n    repeated string        known = 2;\n}\n```\nWith:\n```\nmessage MembershipResponse {\n    repeated AliveMessage alive = 1;\n    repeated AliveMessage dead  = 2;\n}\n``` \nSo if any entity embeds inside itself a gossip component it'll work.","ts":"1476175483.001854"},{"type":"message","user":"U0ZJZBJLF","text":"currently from what I know- when a peer needs to know the certificate of another peer to verify messages signed by it, it contacts the membership service via a gRPC call.","ts":"1476175532.001856"},{"type":"message","user":"U0ZJZBJLF","text":"so, if security is enabled - the membership service needs to be up all the time, or else messages won't be verified in new peers (that have joined lately)","edited":{"user":"U0ZJZBJLF","ts":"1476175578.000000"},"ts":"1476175564.001857"},{"type":"message","user":"U0ZJZBJLF","text":"and, of course- if you have further questions feel free to ask me here or in private or in <#C2HHHJCSU|fabric-gossip-dev>","edited":{"user":"U0ZJZBJLF","ts":"1476175723.000000"},"ts":"1476175707.001859"},{"type":"message","user":"U0ZJZBJLF","text":"and btw it obviously can be a list of bootstrapping peers, not only 1...","ts":"1476175766.001861"},{"user":"U231RFLFP","text":"<@U231RFLFP|bala.vellanki> has joined the channel","type":"message","subtype":"channel_join","ts":"1476201088.001862"},{"type":"message","user":"U0XPR4NP4","text":"<https:\/\/hangouts.google.com\/hangouts\/_\/nkqa6vwc6jeo3j4wsrp2shgi3qe> &lt;- Writing a bootstrapping feature file for a single chain","ts":"1476201241.001863"},{"type":"message","user":"U0ZJZBJLF","text":"hey, can anyone explain to me something regarding to what <@U0XQ35CDD>  wrote?\n```\nThe orderer configuration needs to be embedded within the raw ledger.\n\nThis is for two reasons:\n```\n```\n1. The orderer service needs to be able to convey initial configuration and configuration changes to the peer service so that the peer knows how to properly validate the raw ledger being returned (this may be different per orderer implementation, and may as simple as verifying a public key, or as complicated as a PBFT f+1 out of N signatures or connections)\n```\nObviously I understand that the \"block validating policy\" differs between types of orderers, but isn't the type of orderer in the network a static thing? if it doesn't change, why can't we have several \"strategies(policies)\" (like the strategy design pattern) pre-implemented in the peer, and the confugration of the peer will select which policy to use?\n```\n2. The orderer service must agree to an initial configuration as without a common initial configuration (and common points of time for changing the configuration) the correctness of the orderer service may not be guaranteed.\n```\nI don't understand how this backs up the claim. The orderer doesn't need to agree on its configuration with the peers, only with other orderers.","edited":{"user":"U0ZJZBJLF","ts":"1476208128.000000"},"ts":"1476208086.001864"},{"type":"message","user":"U0XQ35CDD","text":"I didn't write the above, but I can answer your questions.","ts":"1476209399.001866"},{"type":"message","user":"U0XQ35CDD","text":"How would the configuration of the peer would select which policy to use?","ts":"1476209410.001867"},{"type":"message","user":"U0ZJZBJLF","text":"I thought that email was from you, sorry","ts":"1476209425.001868"},{"type":"message","user":"U0ZJZBJLF","text":"oh, oops","ts":"1476209468.001869"},{"type":"message","user":"U0ZJZBJLF","text":"the email is but the jira issue isn't :slightly_smiling_face:","ts":"1476209478.001870"},{"type":"message","user":"U0ZJZBJLF","text":"let's say we have in the yaml file a string that maps to a certain struct type","ts":"1476209558.001871"},{"type":"message","user":"U0ZJZBJLF","text":"and that struct type has an implementation of \"what to do with a block\"","ts":"1476209572.001872"},{"type":"message","user":"U0ZJZBJLF","text":"(how to validate, and when)","ts":"1476209581.001873"},{"type":"message","user":"U0XQ35CDD","text":"No, as was the case with the bootstrapping node question earlier, I'm almost never referring to the low-level how-do-we-code-it issue. That's clear. What I'm asking is: how do you decide whether you should connect to say, at least, 3 orderers instead of 2?","ts":"1476209718.001874"},{"type":"message","user":"U0ZJZBJLF","text":"isn't the number of orderers static?","ts":"1476209755.001875"},{"type":"message","user":"U0XQ35CDD","text":"No.","ts":"1476209759.001876"},{"type":"message","user":"U0XQ35CDD","text":"While the type of orderer (i.e. consensus) may be static, the orderer network's configuration is not. It may also be the case that you, as a connected peer, cannot deduce which policy applies just by counting the number of orderers in the network, which I guess is what you imply. Consider for example an orderer network where you added X more orderers, and a higher amount of faults can be tolerated, but the orderer network doesn't switch to these thresholds right away. The peers need to receive a signal from the ordering service that specifies exactly when the new ordering rule applies.","ts":"1476209780.001877"},{"type":"message","user":"U0ZJZBJLF","text":"I see, like a consensus service re-configuration","ts":"1476209818.001878"},{"type":"message","user":"U0ZJZBJLF","text":"get a consensus on the new view","ts":"1476209824.001879"},{"type":"message","user":"U0ZJZBJLF","text":"and then move to it, or something like that","ts":"1476209830.001880"},{"type":"message","user":"U0XQ35CDD","text":"The point is that the network needs to have a concrete reference in time on when to switch to a new policy. (Given that the orderer reconfig is valid and passes all the checks.)","ts":"1476209896.001881"},{"type":"message","user":"U0XQ35CDD","text":"&gt; The orderer doesn't need to agree on its configuration with the peers, only with other orderers.","ts":"1476209905.001882"},{"type":"message","user":"U0XQ35CDD","text":"So this hopefully addresses this statement as well.","ts":"1476209916.001883"},{"type":"message","user":"U0ZJZBJLF","text":"I still don't understand why this needs to be written in the ledger","ts":"1476209948.001884"},{"type":"message","user":"U0ZJZBJLF","text":"isn't there another way?","ts":"1476209976.001885"},{"type":"message","user":"U0ZJZBJLF","text":"how about something like- the configuration (orderers endpoints) is hashed and submitted in each block","ts":"1476210023.001886"},{"type":"message","user":"U0ZJZBJLF","text":"when a peer receives a block with an odd hash, it contacts the orderers and asks them \"what's up?\"","ts":"1476210057.001887"},{"type":"message","user":"U0XQ35CDD","text":"I guess you can come up with several variations that could work, but what does this proposal bring that the original one doesn't?","ts":"1476210113.001888"},{"type":"message","user":"U0XQ35CDD","text":"Insert a block that says \"config\/policy is now `foo`\", and assume this is the policy going forward until a new such block.","ts":"1476210142.001889"},{"type":"message","user":"U0XQ35CDD","text":"How is appending a hash of `foo` in every block better? (Genuine question.)","ts":"1476210167.001890"},{"type":"message","user":"U0ZJZBJLF","text":"isn't it a race condition?","ts":"1476210236.001891"},{"type":"message","user":"U0ZJZBJLF","text":"lets say the ordering service now went up from 4 to 10 instances","ts":"1476210256.001892"},{"type":"message","user":"U0XQ35CDD","text":"How is it a race condition? Everything is ordered.","ts":"1476210265.001893"},{"type":"message","user":"U0ZJZBJLF","text":"i'm a peer and I get a signed block from 2 byzantine peers","ts":"1476210282.001894"},{"type":"message","user":"U0ZJZBJLF","text":"that block says, the configuration now is from 4 to 5 instances","ts":"1476210300.001895"},{"type":"message","user":"U0ZJZBJLF","text":"I believe that block is valid because 2&gt;1=f (out of 4) signed it","ts":"1476210335.001896"},{"type":"message","user":"U0ZJZBJLF","text":"and I reconfigure myself to the new (false) configuration","ts":"1476210356.001897"},{"type":"message","user":"U0XQ35CDD","text":"You don't establish any connections to the new orderers (and don't receive anything from them) until you get the block that says \"hey we're switching to 10 nodes and this is your new `f`\" which is still sent by the network of 4 instances.","ts":"1476210438.001898"},{"type":"message","user":"U0ZJZBJLF","text":"oh, I see","ts":"1476210458.001899"},{"type":"message","user":"U0XQ35CDD","text":"In your scenario, you imply that the new orderers can jump in and start shooting blocks right away.","ts":"1476210470.001900"},{"type":"message","user":"U0XQ35CDD","text":"But that is not the case.","ts":"1476210475.001901"},{"type":"message","user":"U0ZJZBJLF","text":"hmm wait","ts":"1476210483.001902"},{"type":"message","user":"U0ZJZBJLF","text":"you said that *any* peer doesn't establish connections to the new orderers before *all* peers successfully received the \"checkpoint\" block saying \"from now on, we're the new view\" - doesn't that imply that byzantine peers would be able to slow down that move? (like, read from the socket really really slow)","ts":"1476210581.001903"},{"type":"message","user":"U0ZJZBJLF","text":"i'm just raising a concern of course, not saying this is inherently flawed. just making a point","ts":"1476210604.001904"},{"type":"message","user":"U0XQ35CDD","text":"Where did I say \"all peers\"?","ts":"1476210618.001905"},{"type":"message","user":"U0ZJZBJLF","text":"you didn't but isn't that what is derived? or is it a majority of peers then?","ts":"1476210647.001906"},{"type":"message","user":"U0XQ35CDD","text":"It's whatever the policy dictates. And the policy would probably say something along the lines of \"if X out of Y certs have signed this, I will accept it\".","edited":{"user":"U0XQ35CDD","ts":"1476210773.000000"},"ts":"1476210768.001907"},{"type":"message","user":"U0ZJZBJLF","text":"so, how did you (in plural) decide to bootstrap then? an \"admin\" entity is creating the genesis block and sending it to the orderers?","ts":"1476210931.001909"},{"type":"message","user":"U0XQ35CDD","text":"Correct. A bootstrap admin entity collects the relevant info (among other stuff, what's relevant for this conversation: orderer certs, orderer addresses, and consensus config), creates it a genesis block that the orderers receive, inspect, and launch with (if they approve what they see in there).","ts":"1476211310.001910","reactions":[{"name":"+1","users":["U0ZJZBJLF"],"count":1}]},{"type":"message","user":"U0ZJZBJLF","text":"got it, thanks. but what did you mean in \"change sets are welcome\"?","ts":"1476211375.001911"},{"type":"message","user":"U0ZJZBJLF","text":"it's not coded yet?","ts":"1476211388.001912"},{"type":"message","user":"U0XQ35CDD","text":"We welcome code contributions?","ts":"1476211403.001913"},{"type":"message","user":"U0ZJZBJLF","text":"lol yeah I mean- I thought people are assigned to it, and all","ts":"1476211423.001914"},{"type":"message","user":"U0XQ35CDD","text":"Folks are assigned to it, and in fact we just completed the writing of the feature file that (hopefully) has everyone on the same page (see the Hangout link above). Some pieces are coded already, but we're definitely not all done.","edited":{"user":"U0XQ35CDD","ts":"1476211585.000000"},"ts":"1476211509.001915"},{"type":"message","user":"U0ZJZBJLF","text":"the link to the feature file is in the hangout?","ts":"1476211613.001917"},{"type":"message","user":"U0XQ35CDD","text":"The Hangout is where we are (or rather: were) still chatting about the feature file. Jeff is posting the feature file now.","edited":{"user":"U0XQ35CDD","ts":"1476211672.000000"},"ts":"1476211638.001918"},{"type":"message","user":"U0ZJZBJLF","text":"ok thanks","ts":"1476211700.001920"},{"type":"message","user":"U0UKTPMG8","text":"<@U0KN2SSKE> <@U0S5KF44D> <@U0PB67X4K> <@U0XQ35CDD> <@U0UGH3X7X> <@U0XPR4NP4> <@U1KDAMDJ7> Here is a shot at the feature file for bootstrap","ts":"1476211735.001921"},{"type":"message","subtype":"file_share","text":"<@U0UKTPMG8|jeffgarratt> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/jeffgarratt\/F2N3JHRJN\/bootstrap.feature|bootstrap.feature>","file":{"id":"F2N3JHRJN","created":1476211743,"timestamp":1476211743,"name":"bootstrap.feature","title":"bootstrap.feature","mimetype":"text\/plain","filetype":"text","pretty_type":"Plain Text","user":"U0UKTPMG8","editable":true,"size":3525,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2N3JHRJN\/bootstrap.feature?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2N3JHRJN\/download\/bootstrap.feature?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/jeffgarratt\/F2N3JHRJN\/bootstrap.feature","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2N3JHRJN-814b0b6fae","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/jeffgarratt\/F2N3JHRJN\/bootstrap.feature\/edit","preview":"#\r\n# Test Bootstrap function\r\n#\r\n# Tags that can be used and will affect test internals:\r\n#  @doNotDecompose will NOT decompose the named compose_yaml after scenario ends.  Useful for setting up environment and reviewing after scenario.\r","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>#<\/pre><\/div>\n<div><pre># Test Bootstrap function<\/pre><\/div>\n<div><pre>#<\/pre><\/div>\n<div><pre># Tags that can be used and will affect test internals:<\/pre><\/div>\n<div><pre>#  @doNotDecompose will NOT decompose the named compose_yaml after scenario ends.  Useful for setting up environment and reviewing after scenario.<\/pre><\/div>\n<div><pre><\/pre><\/div>\n<\/div>\n<\/div>\n","lines":66,"lines_more":61,"preview_is_truncated":true,"channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0UKTPMG8","upload":true,"display_as_bot":false,"username":"<@U0UKTPMG8|jeffgarratt>","bot_id":null,"ts":"1476211743.001922"},{"user":"U0W7D64LC","text":"<@U0W7D64LC|markparz> has joined the channel","type":"message","subtype":"channel_join","ts":"1476212242.001923"},{"type":"message","user":"U0UGH3X7X","text":"just so we don't lose all comments when slack scrolls off in a few hours,  can we put the feature file in a gerrit change set and comment there ? <@U0UKTPMG8>  ?","ts":"1476213223.001924"},{"type":"message","user":"U0UKTPMG8","text":"<@U0UGH3X7X> sure thing","ts":"1476216631.001925"},{"type":"message","user":"U0UKTPMG8","text":"we can comment on Jira also","ts":"1476216644.001926"},{"type":"message","user":"U1B5DPRLG","text":"OK, I have a question: how many invokes or how much time does it take for a peer to \"catch\" up with it's query values after it is out of sync and it is needed in order to reach consensus?  \n\nIn other words, is the following behave scenario valid? (I thought it was, but vp2 isn't \"catching\" back up when I expect it to)","ts":"1476224909.001927"},{"type":"message","subtype":"file_share","text":"<@U1B5DPRLG|lhaskins> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/lhaskins\/F2N5JNDL7\/-.txt|Untitled>","file":{"id":"F2N5JNDL7","created":1476225084,"timestamp":1476225084,"name":"-.txt","title":"Untitled","mimetype":"text\/plain","filetype":"text","pretty_type":"Plain Text","user":"U1B5DPRLG","editable":true,"size":4925,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2N5JNDL7\/-.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2N5JNDL7\/download\/-.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/lhaskins\/F2N5JNDL7\/-.txt","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2N5JNDL7-26b4627af9","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/lhaskins\/F2N5JNDL7\/-.txt\/edit","preview":" Scenario: Peers catch up only when necessary\r\n    Given we compose \"docker-compose-4-consensus-upgrade.yml\"\r\n    And I register with CA supplying username \"binhn\" and secret \"7avZQLwcUe9q\" on peers:\r\n                                 | vp0  |\r\n    And I use the following credentials for querying peers:\r","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre> Scenario: Peers catch up only when necessary<\/pre><\/div>\n<div><pre>    Given we compose &quot;docker-compose-4-consensus-upgrade.yml&quot;<\/pre><\/div>\n<div><pre>    And I register with CA supplying username &quot;binhn&quot; and secret &quot;7avZQLwcUe9q&quot; on peers:<\/pre><\/div>\n<div><pre>                                 | vp0  |<\/pre><\/div>\n<div><pre>    And I use the following credentials for querying peers:<\/pre><\/div>\n<div><pre><\/pre><\/div>\n<\/div>\n<\/div>\n","lines":91,"lines_more":86,"preview_is_truncated":true,"channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U1B5DPRLG","upload":true,"display_as_bot":false,"username":"<@U1B5DPRLG|lhaskins>","bot_id":null,"ts":"1476225087.001928"},{"user":"U1WAADD4N","text":"<@U1WAADD4N|akihikot> has joined the channel","type":"message","subtype":"channel_join","ts":"1476254115.001929"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XQ35CDD> as discussed a few times before this solution to reconfiguring consenters needs to clearly spell out that assumptions on the trust\/availability of an old configuration need to be maintained until the last peer transitions to the next configuration","ts":"1476258919.001930"},{"type":"message","user":"U0XQ35CDD","text":"<@U0Y14MWA2> Yes. (And IIRC, last time we discussed this, we also talked about a possible transition period that would allow us to move to a new view with a clean slate - i.e. no transactions from the old regime and the new regime.) How do you deal with the case that Yacov points out when a peer is slow on purpose and takes forever to transition on purpose?","ts":"1476274558.001931"},{"type":"message","user":"U0Y14MWA2","text":"We may not have guarantees for very slow peers","ts":"1476274619.001932"},{"type":"message","user":"U0XQ35CDD","text":"So it is not \"all\" peers then, right?","ts":"1476274665.001933"},{"type":"message","user":"U0Y14MWA2","text":"In that case my wording above needs to be modified to hold for any correct and \"reasonably fast\" peer for some conservative def of reasonably fast","ts":"1476274680.001934"},{"type":"message","user":"U0Y14MWA2","text":"It is never all peers","ts":"1476274689.001935"},{"type":"message","user":"U0Y14MWA2","text":"Just all correct peers :slightly_smiling_face: ","ts":"1476274721.001936"},{"type":"message","user":"U0XQ35CDD","text":"Wonderful, that's what I have in mind as well. As an ordering service you give a sufficient warning for all \"reasonably fast\" peers to catch up.","ts":"1476274766.001937"},{"type":"message","user":"U0XQ35CDD","text":"<@U1B5DPRLG> What is your checkpoint period `K` set to in this scenario?","ts":"1476274771.001938"},{"type":"message","user":"U0XQ35CDD","text":"Even without that knowledge, I'd note that the scenario seems asymmetric, i.e. for an earlier identical case you expect `vp1` @ transaction 40+10 to have the same value as the rest of the network @ transaction 40, but for `vp2` you expect it to have the same value @ transaction 60+10, as the rest of the network @ transaction 50 (not 60). So if it were symmetric, you should be looking for a response of `200` on value `a`. ","edited":{"user":"U0XQ35CDD","ts":"1476276612.000000"},"ts":"1476274974.001939"},{"type":"message","user":"U0XQ35CDD","text":"But let's start with the checkpoint period value. Then we can use the algorithm to figure out exactly what the expected value should be.","ts":"1476275033.001940"},{"type":"message","user":"U1B5DPRLG","text":"K=2 in this scenario. I expected that vp1 would catch up to vp0 and vp3 when vp2 was stopped. Instead I receive `200` from vp0 and vp3 and `210` from vp1 on line 71 of executing this scenario.","ts":"1476282648.001944"},{"type":"message","user":"U0XQ35CDD","text":"I'm working on this with <@U1B5DPRLG>. With these parameters, the expectations from the BDD test need to be adjusted, we'll post an update.","ts":"1476293385.001945","reactions":[{"name":"+1","users":["U1B5DPRLG"],"count":1}]},{"type":"message","user":"U0PB67X4K","text":"I must say, that BDD test is one convoluted way to show that someday  \/ some way peers will catch up  :wink:","ts":"1476293826.001946"},{"type":"message","user":"U0XQ35CDD","text":"Correct, the test may well end at line 59 (with a different expectation) to show that. I trust that the team has its reasons for doing a second pass during lines 60-90.","ts":"1476294174.001947"},{"type":"message","user":"U0XPR4NP4","text":"I have been working with <@U1AU8DRQR> on debugging some sbft problems.  The root cause of one is an interesting one that perhaps we can get broader comments on.  The bug is arising in a test where the primary crashes and restarts before it has received a checkpoint certificate for seqNo=3.  When it restarts, the network connections establish, and the backup replicas report that their last checkpoint cert was seqNo=2 (which is correct at the time), however, in flight on the wire are checkpoint messages for seqNo=3, which the backups then receive, and complete their execution for seqNo=3.  Now the network is in a state where the primary has only executed to 2, and the backups have all executed to 3, and despite the Hello, the primary does not know it is behind.","ts":"1476296197.001948"},{"type":"message","user":"U13TWBRBL","text":"<@U0XPR4NP4> getting the following error from the SOLO orderer after sending a broadcast: Error: {\"created\":\"@1476296174.715561000\",\"description\":\"EOF\",\"file\":\"..\/src\/core\/lib\/iomgr\/tcp_posix.c\",\"file_line\":235,\"grpc_status\":14}","ts":"1476296253.001949"},{"type":"message","user":"U13TWBRBL","text":"any idea what might be causing it?","ts":"1476296257.001950"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I've spoken with <@U0Z81GL6S> about this","ts":"1476296313.001951"},{"type":"message","user":"U0XPR4NP4","text":"This is happening when the sdk is hanging up on the gRPC connection, but the orderer is trying to read a new message from that client stream","ts":"1476296337.001952"},{"type":"message","user":"U0XPR4NP4","text":"To clarify, is this error making it back to the client, or is it simply being emitted in the orderer log?","ts":"1476296420.001953"},{"type":"message","user":"U13TWBRBL","text":"the client is being notified via the \u201cerror\u201d event","ts":"1476296443.001954"},{"type":"message","user":"U0XPR4NP4","text":"So an error of \"EOF\" just means there was a connection hangup, is this a problem?","ts":"1476296600.001955"},{"type":"message","user":"U0XPR4NP4","text":"(A hangup in response to the hangup sent to the orderer)","ts":"1476296613.001956"},{"type":"message","user":"U13TWBRBL","text":"ok, i see. likely not a problem.","ts":"1476296668.001957"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XPR4NP4> what's a higher level problem here","ts":"1476296675.001958"},{"type":"message","user":"U0Y14MWA2","text":"primary should be changed in the worst case","ts":"1476296692.001959"},{"type":"message","user":"U0XPR4NP4","text":"[And, as a side note, if you are running solo, I'd recommend pulling from <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1479\/> as it has a bug fix in it around empty transactions (also thanks to <@U0Z81GL6S> for pointing it out to me)]","ts":"1476296694.001960"},{"type":"message","user":"U0XPR4NP4","text":"<@U0Y14MWA2> The thing that made us turn to look at this, was that a test was failing non-deterministically.  This occurred because sometimes the in flight messages were delivered before the hello (passes) and sometimes after (fails).  If we are designing a Hello mechanism in order to allow a node rejoining the network to properly catch up, if it fails whenever there is traffic on the network (ie, almost always) then this seems like a problem.","ts":"1476296781.001961"},{"type":"message","user":"U0Y14MWA2","text":"so can you shed some light on \"hello\" mechanism?","ts":"1476296832.001962"},{"type":"message","user":"U0XPR4NP4","text":"This was <@U0XR6J961>'s invention, but essentially, whenever a new connection is made between two replicas, they exchange the last (weak? strong? I need to check) checkpoint they have.  In this way, the joining replica can immediately know if it needs to state transfer, or if it can execute from where it is currently at.","ts":"1476296932.001963"},{"type":"message","user":"U0Y14MWA2","text":"(BTW I consider what you outlined so far - as nothing to be fixed :slightly_smiling_face: )","ts":"1476296935.001964"},{"type":"message","user":"U0XPR4NP4","text":"(Yes, I realize, having f failed nodes is not against protocol)","ts":"1476296952.001965"},{"type":"message","user":"U0Y14MWA2","text":"I told simon this is only optimistic","ts":"1476296956.001966"},{"type":"message","user":"U0Y14MWA2","text":"and suggested a different way of catching up","ts":"1476296967.001967"},{"type":"message","user":"U0Y14MWA2","text":"which is, in fact, rather straightforward","ts":"1476296976.001968"},{"type":"message","user":"U0Y14MWA2","text":"a replica could do that hello on restart - but this is only optimistic","ts":"1476296991.001969"},{"type":"message","user":"U0Y14MWA2","text":"to try to catch up without incurring much traffic it should simply adopt the sequence number and the view number when it gets a weak checkpoint cert that is ahead of its own time","ts":"1476297036.001970"},{"type":"message","user":"U0Y14MWA2","text":"there is no state transfer here","ts":"1476297053.001971"},{"type":"message","user":"U0Y14MWA2","text":"as there is no state to transfer","ts":"1476297060.001972"},{"type":"message","user":"U0Y14MWA2","text":"and the log replication (to serve the clients) can be done lazily","ts":"1476297075.001973"},{"type":"message","user":"U0Y14MWA2","text":"now","ts":"1476297077.001974"},{"type":"message","user":"U0Y14MWA2","text":"this is when we do not have consenter reconfig - with consenter reconfig things do get more involved","ts":"1476297096.001975"},{"type":"message","user":"U0Y14MWA2","text":"so example","ts":"1476297132.001976"},{"type":"message","user":"U0Y14MWA2","text":"I am in view number 5, seqno 9","ts":"1476297140.001977"},{"type":"message","user":"U0Y14MWA2","text":"I hear about veak checkpoint cert for view number 7 seqno =11","ts":"1476297156.001978"},{"type":"message","user":"U0Y14MWA2","text":"I immediatelly go there","ts":"1476297160.001979"},{"type":"message","user":"U0Y14MWA2","text":"you may ask the question how bug us the buffer for future checkpoint msgs","ts":"1476297239.001980"},{"type":"message","user":"U0XPR4NP4","text":"FYI, I do think we're going to need 'consenter reconfig' to a limited extent out of the box.  But it is the easy sort of reconfig, namely changing the membership of what certs are allowed to inject traffic (ie, peer CA membership) .  I don't think this should happen often, and I think we can include a \"the config changed last at seqNo=X\" in the hello so that the replica knows whether it actually does need to state transfer before resuming, or if it can be lazy as you indicated.","ts":"1476297267.001981"},{"type":"message","user":"U0Y14MWA2","text":"and this is where we can have some sort of watermark but we can discuss this later on","ts":"1476297280.001982"},{"type":"message","user":"U0Y14MWA2","text":"so you see - this reconfig info is the only state of our service except view number seqno and prevhash","ts":"1476297327.001983"},{"type":"message","user":"U0XPR4NP4","text":"Right, in order to support unordered-ness across streams, we will still need some limited watermarking, but not as sophisticated as true pbft.","ts":"1476297330.001984"},{"type":"message","user":"U0Y14MWA2","text":"exactly","ts":"1476297337.001985"},{"type":"message","user":"U0Y14MWA2","text":"so what I strongly argue for","ts":"1476297357.001986"},{"type":"message","user":"U0Y14MWA2","text":"in order for simple bft to be really simple","ts":"1476297365.001987"},{"type":"message","user":"U0Y14MWA2","text":"it should leverage the fact that the state is lightweight","ts":"1476297381.001988"},{"type":"message","user":"U0Y14MWA2","text":"so once we hear (by eavesdropping) that a checkpoint weak cert says: this is the state (prevhash, seqno, viewno)","ts":"1476297417.001989"},{"type":"message","user":"U0Y14MWA2","text":"we just adopt it","ts":"1476297420.001990"},{"type":"message","user":"U0Y14MWA2","text":"modulo reconfig - you can start processing the very next preprepare","ts":"1476297439.001991"},{"type":"message","user":"U0Y14MWA2","text":"there will be of course some reordering fun here - but the point is it can never be worse then saying stop I am going to transfer the RL before I actually start ordering next requests","ts":"1476297490.001992"},{"type":"message","user":"U0Y14MWA2","text":"no need to do that","ts":"1476297494.001993"},{"type":"message","user":"U0Y14MWA2","text":"this should be done lazily","ts":"1476297498.001994"},{"type":"message","user":"U0XPR4NP4","text":"Right, exactly, so long as the state is sufficiently light (and changes sufficiently infrequently) it becomes a non-issue in almost all cases","ts":"1476297547.001995"},{"type":"message","user":"U0Y14MWA2","text":"this does not mean that you cannot pull here and there this info","ts":"1476297555.001996"},{"type":"message","user":"U0Y14MWA2","text":"but doing this too often would just drown the network and in the presence of traffic a replica will just never catch up","ts":"1476297575.001997"},{"type":"message","user":"U0Y14MWA2","text":"with a pull based method","ts":"1476297581.001998"},{"type":"message","user":"U0Y14MWA2","text":"<@U1AU8DRQR> ^^^ gabor pls see if this makes sense to you?","ts":"1476297810.001999"},{"type":"message","user":"U0UGH3X7X","text":"now in <https:\/\/jira.hyperledger.org\/browse\/FAB-359>  ... <https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1476211735001921>","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1476211735001921","fallback":"[October 11th, 2016 11:48 AM] jeffgarratt: <@U0KN2SSKE> <@U0S5KF44D> <@U0PB67X4K> <@U0XQ35CDD> <@U0UGH3X7X> <@U0XPR4NP4> <@U1KDAMDJ7> Here is a shot at the feature file for bootstrap","ts":"1476211735.001921","author_subname":"jeffgarratt","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"<@U0KN2SSKE> <@U0S5KF44D> <@U0PB67X4K> <@U0XQ35CDD> <@U0UGH3X7X> <@U0XPR4NP4> <@U1KDAMDJ7> Here is a shot at the feature file for bootstrap","author_name":"Jeff Garratt","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/jeffgarratt","author_icon":"https:\/\/secure.gravatar.com\/avatar\/9804aef51ff2b9a2166d0383f2cf81ea.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0005-48.png","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1476299688.002000"},{"type":"message","user":"U1AU8DRQR","text":"<@U0Y14MWA2> sorry I am from mobile and not such an expert of the protocol as you. :) so not sure I totally get it. Do you mean using a hello on restart and taking weak checkpoints?","ts":"1476302125.002002"},{"type":"message","user":"U0Y14MWA2","text":"ok this is a TL;DR","ts":"1476302188.002003"},{"type":"message","user":"U0Y14MWA2","text":"- the hello mechanism is a nice to have (maybe) - but it cannot solve the problem of catching up","ts":"1476302222.002004"},{"type":"message","user":"U0Y14MWA2","text":"- catching up by pull (hello-like) in cases with lot of load will incur traffic and cannot be guaranteed to make the replica catch up","ts":"1476302263.002005"},{"type":"message","user":"U0Y14MWA2","text":"- cacthing up should be done by eavesdropping a weak checkpoint  cert and lazily replicating the raw ledger hole afterwards","edited":{"user":"U0Y14MWA2","ts":"1476302314.000000"},"ts":"1476302280.002006"},{"type":"message","user":"U0Y14MWA2","text":"------","ts":"1476302284.002007"},{"type":"message","user":"U1AU8DRQR","text":"Now, there is no functionality in sbft for such replication so I will have to implement one, I guess ","ts":"1476302385.002009"},{"type":"message","user":"U0Y14MWA2","text":"this is another thing who implements it but we are just trying to get to the same page","ts":"1476302417.002010"},{"type":"message","user":"U0Y14MWA2","text":"on implementation pls sync with <@U0XPR4NP4> but let me know what's your decision there as I'd like to be following that more closely","ts":"1476302468.002011"},{"type":"message","user":"U1AU8DRQR","text":"Will this eavesdropping thing always work?  Can't there be such a situation where we see no weak certs? Just thinking ","ts":"1476302608.002012"},{"type":"message","user":"U0Y14MWA2","text":"if you are cut of from the network (partitioned replica) it might temporarily not work","ts":"1476302636.002013"},{"type":"message","user":"U0Y14MWA2","text":"but then a replica is rightfully behind","ts":"1476302644.002014"},{"type":"message","user":"U0Y14MWA2","text":"I will try to write this eavesdropping more precisely","ts":"1476302734.002015"},{"type":"message","user":"U0Y14MWA2","text":"so we are on the same page","ts":"1476302739.002016"},{"type":"message","user":"U0Y14MWA2","text":"(pseudocode)","ts":"1476302748.002017"},{"type":"message","user":"U0Y14MWA2","text":"I need to look at the code to see how sbft currently increments seqnos","ts":"1476302797.002018"},{"type":"message","user":"U0Y14MWA2","text":"let me try to address that tmw","ts":"1476302810.002019"},{"type":"message","user":"U1AU8DRQR","text":"Yes we are :relaxed: btw thanks for the help ","ts":"1476302982.002020"},{"type":"message","user":"U0Y14MWA2","text":"<@U0YMACQSW> <@U0ZJZBJLF> <@U1AU8DRQR> <@U0XPR4NP4> I was discussing with <@U1AU8DRQR> how do we get to the following feature","ts":"1476346474.002021"},{"type":"message","user":"U0Y14MWA2","text":"if the network is synchronous and there are no further updates - then the state is eventually the same at all correct consenters","ts":"1476346524.002022"},{"type":"message","user":"U0Y14MWA2","text":"the question is how do we get there in a simple and efficient way","ts":"1476346548.002023"},{"type":"message","user":"U0ZJZBJLF","text":"consenters?","ts":"1476346553.002024"},{"type":"message","user":"U0ZJZBJLF","text":"or peers?","ts":"1476346557.002025"},{"type":"message","user":"U0Y14MWA2","text":"consenters","ts":"1476346564.002026"},{"type":"message","user":"U0Y14MWA2","text":"state = raw ledger height","ts":"1476346573.002027"},{"type":"message","user":"U0ZJZBJLF","text":"but, isn't that dependant on the type of consenter?","edited":{"user":"U0ZJZBJLF","ts":"1476346605.000000"},"ts":"1476346597.002028"},{"type":"message","user":"U0Y14MWA2","text":"what's a type of the consenter?","ts":"1476346613.002030"},{"type":"message","user":"U0ZJZBJLF","text":"for example- is it kafka, or is it SOLO, or pbft or whatever?","ts":"1476346635.002031"},{"type":"message","user":"U0Y14MWA2","text":"ah","ts":"1476346640.002032"},{"type":"message","user":"U0Y14MWA2","text":"ok","ts":"1476346641.002033"},{"type":"message","user":"U0Y14MWA2","text":"we are discussing a variant of pbft","ts":"1476346650.002034"},{"type":"message","user":"U0ZJZBJLF","text":"sbft?","edited":{"user":"U0ZJZBJLF","ts":"1476346674.000000"},"ts":"1476346667.002035"},{"type":"message","user":"U0Y14MWA2","text":"so we are in the bft world (in this simpleBFT which tends to be simplified PBFT that we are developing)","ts":"1476346671.002036"},{"type":"message","user":"U0Y14MWA2","text":"yes sBFT","ts":"1476346673.002037"},{"type":"message","user":"U0ZJZBJLF","text":"you're discussing a scenario in which p&lt;f nodes are falling behind?","ts":"1476346717.002039"},{"type":"message","user":"U0Y14MWA2","text":"p \\le f - yes","ts":"1476346727.002040"},{"type":"message","user":"U0ZJZBJLF","text":"\\leq, yeah","ts":"1476346735.002041"},{"type":"message","user":"U0Y14MWA2","text":"ok, so","ts":"1476346739.002042"},{"type":"message","user":"U0Y14MWA2","text":"the idea is we do this in a simplest way possible but not simpler","ts":"1476346759.002043"},{"type":"message","user":"U0Y14MWA2","text":"so one idea is to have consenters periodically say hello to other consenters and ask them about their latest provable raw ledger batch  height","edited":{"user":"U0Y14MWA2","ts":"1476346816.000000"},"ts":"1476346800.002044"},{"type":"message","user":"U0Y14MWA2","text":"proof comes from the signatures that we now have in sBFT so just assume we have it","ts":"1476346833.002046"},{"type":"message","user":"U0Y14MWA2","text":"the question is - and this goes for you gossip folks out there <@U0YMACQSW> <@U0ZJZBJLF> <@U0YM41HA5> and others","ts":"1476346875.002047"},{"type":"message","user":"U0Y14MWA2","text":"1) shall this be pull based or push based and why?","ts":"1476346890.002048"},{"type":"message","user":"U0Y14MWA2","text":"2) to how many other consenters should a consenter do such pull\/push","ts":"1476346916.002049"},{"type":"message","user":"U0ZJZBJLF","text":"I don't understand why this is needed- let's assume a consenter peer has failed and came up again and is D blocks behind and it re-connects to all the rest of the nodes.\nIt'll get a transaction\/block\/whatever, right? Won't it see that the sequence number on that block is much higher than its own and will figure it out by itself?","ts":"1476346951.002050"},{"type":"message","user":"U0Y14MWA2","text":"so if you get partitioned (not crashed) and then get reconnected again - your last seqno was 5 but others are at seqno 100","ts":"1476347014.002051"},{"type":"message","user":"U0Y14MWA2","text":"there are no further requests","ts":"1476347019.002052"},{"type":"message","user":"U0Y14MWA2","text":"how do you get to seqno=100","ts":"1476347027.002053"},{"type":"message","user":"U0Y14MWA2","text":"is the problem","ts":"1476347036.002054"},{"type":"message","user":"U0ZJZBJLF","text":"i see","ts":"1476347040.002055"},{"type":"message","user":"U0Y14MWA2","text":"that needs to be solved in a very lightweight manner :slightly_smiling_face:","ts":"1476347047.002056"},{"type":"message","user":"U0Y14MWA2","text":"so - my take is - do a periodic pull-based hello to anywhere between 1 to log(N) consenters","ts":"1476347081.002057"},{"type":"message","user":"U0ZJZBJLF","text":"well I personally think that the best thing to employ here is a combination of what you suggested and what I talked about- if X time has passed and no new requests, ask all peers for their height","ts":"1476347086.002058"},{"type":"message","user":"U0Y14MWA2","text":"where consenters are chosen randomly","ts":"1476347096.002059"},{"type":"message","user":"U0ZJZBJLF","text":"Why log(N)? we're talking about consenters","ts":"1476347098.002060"},{"type":"message","user":"U0ZJZBJLF","text":"they're not many","ts":"1476347100.002061"},{"type":"message","user":"U0Y14MWA2","text":"probably 1 is just goof enough","ts":"1476347104.002062"},{"type":"message","user":"U0Y14MWA2","text":"(well we will get there :)","ts":"1476347112.002063"},{"type":"message","user":"U0Y14MWA2","text":"but 1 is ok to start with","ts":"1476347118.002064"},{"type":"message","user":"U0Y14MWA2","text":"but it should be random","ts":"1476347122.002065"},{"type":"message","user":"U0Y14MWA2","text":"so periodic pull from one random consenter","ts":"1476347135.002066"},{"type":"message","user":"U0Y14MWA2","text":"or periodic push to - how many consenters?","ts":"1476347145.002067"},{"type":"message","user":"U0ZJZBJLF","text":"I think it *should* be pull from a consenter that detected a period of inactivity","ts":"1476347172.002068"},{"type":"message","user":"U0ZJZBJLF","text":"But I don't understand why you need to ask log(N). What scale are you talking about here?","ts":"1476347206.002069"},{"type":"message","user":"U0ZJZBJLF","text":"I thought RSM doesn't scale well to lots of nodes","ts":"1476347231.002070"},{"type":"message","user":"U0Y14MWA2","text":"eventually, say later on in 2017,  I want we run this sBFT with 100 consenters","ts":"1476347246.002071"},{"type":"message","user":"U0Y14MWA2","text":"well - define \"doesn't scale\" :slightly_smiling_face:","ts":"1476347259.002072"},{"type":"message","user":"U0YM41HA5","text":"In such a case I'd go for periodic (or even based) pull from a random set of neighbors (log(N) seems to be a reasonable choice","ts":"1476347264.002073"},{"type":"message","user":"U0Y14MWA2","text":"ok, so we have consensus on pull","ts":"1476347282.002074"},{"type":"message","user":"U0Y14MWA2","text":"for smallnetworks pull from random single consenter is ok","ts":"1476347297.002075"},{"type":"message","user":"U0Y14MWA2","text":"for larger we may want to pull from more, eventually?","ts":"1476347307.002076"},{"type":"message","user":"U0ZJZBJLF","text":"yeah of course it should be pull, think of it- it's much more efficient because you know you are inactive, VS \"all other nodes try and see are *everyone* ok\"","ts":"1476347320.002077"},{"type":"message","user":"U0Y14MWA2","text":"yes I thought so - just a) sanity checking, b) informing you guys of our discussions","ts":"1476347348.002078"},{"type":"message","user":"U0ZJZBJLF","text":"does sBFT work in decent performance with 100 nodes?","ts":"1476347369.002079"},{"type":"message","user":"U0Y14MWA2","text":"it does not work yet period","ts":"1476347377.002080"},{"type":"message","user":"U0ZJZBJLF","text":"Marko, I think that when we get to 100 nodes of *consenters* we'll have a much bigger problem with the scale of the peers :wink:","ts":"1476347406.002081"},{"type":"message","user":"U0YM41HA5","text":"I'd go for the general case of log(N) from the beginning, to make it ready for future scalability.","ts":"1476347409.002082"},{"type":"message","user":"U0ZJZBJLF","text":"I think it's better to have something custom like Max(Log(N) , 10)","ts":"1476347444.002083"},{"type":"message","user":"U0Y14MWA2","text":"but some other protocols I know of work with trhoughputs of say 500 bitcoin like tx per second with 100 nodes over geographically distant location with 100Mbps netwokring, where one could through more bandwidth and have linear scalability","ts":"1476347459.002084"},{"type":"message","user":"U0Y14MWA2","text":"but stability will be the challenge","ts":"1476347474.002085"},{"type":"message","user":"U0Y14MWA2","text":"anyway","ts":"1476347496.002086"},{"type":"message","user":"U0Y14MWA2","text":"there are strong reasons to suspect that decent performance is achievable with 100 nodes","ts":"1476347514.002087"},{"type":"message","user":"U0Y14MWA2","text":"more to come on that soon","ts":"1476347527.002088"},{"type":"message","user":"U0ZJZBJLF","text":"I'm not much of an expert but I've never heard of like- ZooKeeper clusters with 100 nodes","ts":"1476347567.002089"},{"type":"message","user":"U0ZJZBJLF","text":"So what's the trick with sBFT?","ts":"1476347575.002090"},{"type":"message","user":"U0ZJZBJLF","text":"I have deja-voo now, I think I asked you this when you were visiting Haifa","ts":"1476347595.002091"},{"type":"message","user":"U0Y14MWA2","text":"we are conducting some experiments incl Zoookeeper","ts":"1476347698.002092"},{"type":"message","user":"U0Y14MWA2","text":"we should have shareable results soon","ts":"1476347707.002093"},{"type":"message","user":"U0ZJZBJLF","text":"cool that'd be interesting to see","ts":"1476347717.002094"},{"type":"message","user":"U0Y14MWA2","text":"we can go even much better than that in common case without issues we discuss here - depending on how much latency we want to trade in","ts":"1476347756.002095"},{"type":"message","user":"U0Y14MWA2","text":"as Chain and Ring patterns have nice features such as","ts":"1476347774.002096"},{"type":"message","user":"U0Y14MWA2","text":"- throughput is the best it can be (in a network with homogenous bandwidth)","ts":"1476347793.002097"},{"type":"message","user":"U0Y14MWA2","text":"- nobody falls back behind by definition","ts":"1476347804.002098"},{"type":"message","user":"U0Y14MWA2","text":"the only issue is latency","ts":"1476347810.002099"},{"type":"message","user":"U0Y14MWA2","text":"but that may be not a huge issue - depending onthe use case","ts":"1476347824.002100"},{"type":"message","user":"U0Y14MWA2","text":"but this is now for <#C113WK2A1|performance-benchmark>","ts":"1476347838.002101"},{"type":"message","user":"U0ZJZBJLF","text":"what is the benefit of having 100 consensus nodes, besides high availability and increasing `f`?","ts":"1476347955.002102"},{"type":"message","user":"U0Y14MWA2","text":"I'd say psychology and \"fairness\"","ts":"1476348037.002103"},{"type":"message","user":"U0Y14MWA2","text":"\"every\" participant in the blockchain network gets to have a piece of control at the heart of the system","ts":"1476348070.002104"},{"type":"message","user":"U0ZJZBJLF","text":"hmm ok. Although isn't that a bit dangerous? as you introduce new participants, you also increase the chance of the system being stuck\/compromised due to participants being offline\/byzantine","edited":{"user":"U0ZJZBJLF","ts":"1476348230.000000"},"ts":"1476348213.002105"},{"type":"message","user":"U1HFNJB50","text":"I\u2019m just wondering what should be a write throughput of ZK cluster w\/ 100 nodes? \/cc <@U0Y14MWA2> <@U0ZJZBJLF>","ts":"1476348528.002107"},{"type":"message","user":"U0Y14MWA2","text":"<@U1HFNJB50> I expect we will have a paper in 10 days on this.  Just a bit of patience pls - I will be posting the pointers here and <#C113WK2A1|performance-benchmark> once this is ready","ts":"1476348634.002108"},{"type":"message","user":"U1HFNJB50","text":"<@U0Y14MWA2> looking forward for it :slightly_smiling_face:","ts":"1476348799.002109"},{"user":"U2GR5RHQT","text":"<@U2GR5RHQT|zanejia> has joined the channel","type":"message","subtype":"channel_join","ts":"1476363992.002110"},{"type":"message","user":"U0YMACQSW","text":"<@U0Y14MWA2> What state are currently kept in the consenters and when do we prune the transcations. Is this something that was agreed on?","ts":"1476371041.002111"},{"type":"message","user":"U1AU8DRQR","text":"guys, with <@U0Y14MWA2> and <@U0XPR4NP4> (thanks for their great help) I am still looking into an unidentified SBFT bug. it started with <https:\/\/jira.hyperledger.org\/browse\/FAB-624> but we will also have another one for it as there seem to be multiple missing parts and bugs.","ts":"1476371295.002112"},{"type":"message","user":"U1AU8DRQR","text":"In a specific test case, the primary node is restarted and it does not catch up to the others. We implemented a simple pull based update protocol for this, but using that it receives one additional batch that is not needed and the others don't have (duplicate).","ts":"1476371378.002113"},{"type":"message","user":"U1KDAMDJ7","text":"I will be taking a look at TLS w\/ pinned self signed certificates over the next few days (see <https:\/\/jira.hyperledger.org\/browse\/FAB-708>)","ts":"1476381217.002114"},{"type":"message","user":"U0XPR4NP4","text":"For those who are interested, I've pushed out a first pass at a policy manager (which leverages the signature validation dsl) <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1721\/>","ts":"1476381427.002115"},{"user":"U193ZSYK0","text":"<@U193ZSYK0|chanderg> has joined the channel","type":"message","subtype":"channel_join","ts":"1476424924.002116"},{"type":"message","user":"U1P1ZV6RF","text":"Can someone confirm if SIEVE consensus is still on the agenda? Many presentations and documents quote it as being one of 3 pluggable consensus protocols available in Fabric but I cannot find any further details on it.","ts":"1476429711.002117"},{"type":"message","user":"U0XV1HDL3","text":"SIEVE is not a proper consensus protocol but a filter for preventing non-deterministic chaincode to disrupt the operation of the system. Sieve exists in prototype stage in V0.5\/V0.6. The V1.0 architecture does not rely on it, as it provides the same filtering function in a different way.","ts":"1476431204.002118"},{"user":"U2PAB405S","text":"<@U2PAB405S|benjamin> has joined the channel","type":"message","subtype":"channel_join","ts":"1476431547.002119"},{"type":"message","user":"U1AU8DRQR","text":"one big step forward, it seems that the bug is solved:\n1) some small modifications in the bootup process of the starting (restarting) node (1-2 missing lines setting the state properly)\n2) new view timer instead of a timer producing view changes (if anyone interested: see the last comment from <https:\/\/jira.hyperledger.org\/browse\/FAB-624>)\n3) added a pull based synch protocol (parts of it). a pull is sent to a random node, which sends back its last batch","ts":"1476441363.002120"},{"type":"message","user":"U1AU8DRQR","text":"problem: the pull protocol was meant to be periodical, node has to periodically send a pull to one of its random neighbours. now only a 'one shot' version is implemented (after node start). this solves the problem (not just the testcase but the root cause, a specific situation) I had and does no harm to other test cases. BUT if the protocol would be periodical, the test would never terminate.","ts":"1476441537.002121"},{"type":"message","user":"U1AU8DRQR","text":"reason: tests use (sbft tests) a queue for message passing and if it is empty then the system terminates. but in case of a periodical pull it will be never empty as a new pull will always be queued.","ts":"1476441632.002122"},{"type":"message","user":"U1AU8DRQR","text":"something like this: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1737\/>","ts":"1476445428.002123"},{"type":"message","user":"U0Y14MWA2","text":"<@U0YMACQSW> consenter state is basically pbft protocol state - in that sense it is well understood.","edited":{"user":"U0Y14MWA2","ts":"1476451451.000000"},"ts":"1476451393.002124"},{"type":"message","user":"U0Y14MWA2","text":"this includes sequence number, view number, p set q set (optionally)","ts":"1476451420.002125"},{"type":"message","user":"U0Y14MWA2","text":"what we add, specific to fabric, is previous batch hash","ts":"1476451435.002126"},{"type":"message","user":"U0Y14MWA2","text":"that's about it","ts":"1476451437.002127"},{"type":"message","user":"U0Y14MWA2","text":"there is other auxiliary state (like list of pending requests)","ts":"1476451520.002129"},{"user":"U2PE37K3J","text":"<@U2PE37K3J|n.ohagan> has joined the channel","type":"message","subtype":"channel_join","ts":"1476453322.002130"},{"type":"message","subtype":"file_share","text":"<@U0UGH3X7X|tuand> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/tuand\/F2PFCBHMM\/draft_genesis_block.txt|draft genesis block> and commented: <@U0XPR4NP4>  <@U0UKTPMG8>  ... working on the tool that's creating the genesis block.  thinking of using JSON file for input to tool  ... what fields do we need for the modification policies ?","file":{"id":"F2PFCBHMM","created":1476456382,"timestamp":1476456382,"name":"draft_genesis_block.txt","title":"draft genesis block","mimetype":"text\/plain","filetype":"text","pretty_type":"Plain Text","user":"U0UGH3X7X","editable":true,"size":650,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2PFCBHMM\/draft_genesis_block.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2PFCBHMM\/download\/draft_genesis_block.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/tuand\/F2PFCBHMM\/draft_genesis_block.txt","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2PFCBHMM-b07892d5a2","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/tuand\/F2PFCBHMM\/draft_genesis_block.txt\/edit","preview":"{\r\n   \"thisorderernode\": {\r\n      \"address\": \"ip:port\",\r\n      \"cert\": \"filename or content of .pem\"\r\n   },\r","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>{<\/pre><\/div>\n<div><pre>   &quot;thisorderernode&quot;: {<\/pre><\/div>\n<div><pre>      &quot;address&quot;: &quot;ip:port&quot;,<\/pre><\/div>\n<div><pre>      &quot;cert&quot;: &quot;filename or content of .pem&quot;<\/pre><\/div>\n<div><pre>   },<\/pre><\/div>\n<div><pre><\/pre><\/div>\n<\/div>\n<\/div>\n","lines":28,"lines_more":23,"preview_is_truncated":false,"channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":1,"initial_comment":{"id":"Fc2PFCBRFH","created":1476456382,"timestamp":1476456382,"user":"U0UGH3X7X","is_intro":true,"comment":"<@U0XPR4NP4>  <@U0UKTPMG8>  ... working on the tool that's creating the genesis block.  thinking of using JSON file for input to tool  ... what fields do we need for the modification policies ?","channel":""}},"user":"U0UGH3X7X","upload":true,"display_as_bot":false,"username":"<@U0UGH3X7X|tuand>","bot_id":null,"ts":"1476456383.002131"},{"type":"message","user":"U0UKTPMG8","text":"I think that is a form of the Policy struct defined in ab.proto","ts":"1476456425.002132"},{"type":"message","user":"U0UGH3X7X","text":"... and any other fields that I'm missing ?  I'm following what we have in FAB-359 and FAB-665","ts":"1476456425.002133"},{"type":"message","user":"U0UKTPMG8","text":"<@U0XPR4NP4> may be able to provide a more specific answer","ts":"1476456470.002134"},{"type":"message","user":"U0XPR4NP4","text":"<@U0UGH3X7X> Maybe simpler is better for the tool, but think about whether we want to allow different orderer or peer entity policies","ts":"1476456663.002135"},{"type":"message","user":"U0XPR4NP4","text":"For instance, what if the orderer service is not BFT and we want to support an orderer CA","ts":"1476456685.002136"},{"type":"message","user":"U0XPR4NP4","text":"Or, what if we want 2 signatures from peer entities for transaction ingress","ts":"1476456708.002137"},{"type":"message","user":"U0XPR4NP4","text":"Right now I'm working the other end of this problem, creating the genesis block statically with the necessary embedded policy.  There is a changeset out there, but shortly after pushing it, I decided I hated it, so am really reworking both the messages and the implementation, so it may be of limited value to reference now","ts":"1476456755.002138"},{"type":"message","user":"U0UGH3X7X","text":"so i'm working my way through the flow like this \n1.admin gathers certs\/policies\/addresses:ports","ts":"1476457086.002139"},{"type":"message","user":"U0UGH3X7X","text":"2. admin creates this json file and inputs to tool","ts":"1476457107.002140"},{"type":"message","user":"U0UGH3X7X","text":"3.tool munges on input json file and creates a serialized genesis block to disk","ts":"1476457167.002141"},{"type":"message","user":"U0UGH3X7X","text":"4.orderer starts, reads, unmarshalls and writes to system ledger","ts":"1476457215.002142"},{"type":"message","user":"U0UGH3X7X","text":"i think you're working on 4. ?  or parts of 3. as well ?","ts":"1476457270.002143"},{"type":"message","user":"U0UGH3X7X","text":"at this point, i'm trying to see if i can describe the policy in json so that i can map to protobuf ... i'll go look at ab again","ts":"1476457371.002144"},{"type":"message","user":"U0UKTPMG8","text":"<@U0XPR4NP4>  <@U0UGH3X7X>  fyi I am working on the bootstrap BDD","ts":"1476457697.002145"},{"type":"message","user":"U0UKTPMG8","text":"I will ping as soon as I get to that point","ts":"1476457714.002146"},{"type":"message","user":"U0UKTPMG8","text":"ie the gen block","ts":"1476457719.002147"},{"type":"message","user":"U0XPR4NP4","text":"<@U0UGH3X7X> You can generate JSON from protobuf, FYI, and unmarshal JSON into protobuf objects","ts":"1476457761.002148"},{"type":"message","user":"U0XPR4NP4","text":"With respect to 4, I am handling the bit where the startup consumes a genesis block, and creating a genesis block statically in code","ts":"1476457820.002149"},{"type":"message","user":"U0XPR4NP4","text":"The piece I am working on at this instant, is taking a config transaction, validating that it matches all of the existing policies, then generating a new configuration with new policies","ts":"1476457857.002150"},{"type":"message","user":"U0XPR4NP4","text":"In order to generate the genesis block, you will ultimately need the proto I am working on for the configuration, but it is not ready yet","ts":"1476457890.002151"},{"type":"message","user":"U0UGH3X7X","text":"jason, what's keeping you :smile:  good deal.  I'm going to play around a bit more with json &lt;-&gt; protobuf","ts":"1476457964.002152"},{"user":"U2PE37K3J","text":"<@U2PE37K3J|n.ohagan> has left the channel","type":"message","subtype":"channel_leave","ts":"1476458755.002153"},{"type":"message","user":"U0XPR4NP4","text":"<@U1AU8DRQR> From earlier you said:\n\n&gt; problem: the pull protocol was meant to be periodical, node has to periodically send a pull to one of its random neighbours. now only a 'one shot' version is implemented (after node start). this solves the problem (not just the testcase but the root cause, a specific situation) I had and does no harm to other test cases. BUT if the protocol would be periodical, the test would never terminate.\n\nI have been thinking about this.  Because we have a stateful network protocol, we can tell when a connection is established\/ended.  All online nodes have come to an agreement on the world state, would it be safe to stop this timer? It could always be restarted once someone joins.  I dislike the idea of the network operating in a 'special' mode for tests (like having a limited number of times this timer can pop, or disabling it for some tests) so a solution like that would preferable to me.","ts":"1476502749.002154"},{"user":"U28DBE65P","text":"<@U28DBE65P|mcampora> has joined the channel","type":"message","subtype":"channel_join","ts":"1476599800.002155"},{"type":"message","user":"U1AU8DRQR","text":"&gt; All online nodes have come to an agreement on the world state, would it be safe to stop this timer?","ts":"1476633954.002156"},{"type":"message","user":"U1AU8DRQR","text":"sounds good but from implementation point of view I am not sure (YET) how would he do it","ts":"1476633973.002157"},{"type":"message","user":"U1P1ZV6RF","text":"<@U0XV1HDL3> : thanks for your answer on SIEVE","ts":"1476648906.002158"},{"user":"U2NNLN56V","text":"<@U2NNLN56V|conghonglei> has joined the channel","type":"message","subtype":"channel_join","ts":"1476667780.002159"},{"type":"message","user":"U1AU8DRQR","text":"guys, today we are having some long internal meetings but I will try to join the scrum if I can. this week, I will have to work on some internal tasks but will try to have a look at SBFT bug fix and take care of the comments there (<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1737\/>). <@U0XPR4NP4> please see my answer for you from Oct 15th :slightly_smiling_face:","ts":"1476693492.002160"},{"user":"U2GEGKXJA","text":"<@U2GEGKXJA|stchrysa> has joined the channel","type":"message","subtype":"channel_join","ts":"1476702786.002161"},{"type":"message","user":"U0KM0C3M3","text":"Hi I have a question about the interaction between chaincode and transactions that are processed when interacting with chaincode:  \nA) I understand that consensus is applied to new chaincode that is being added - if i add new chaincode, and then interact with it, say to add a new transaction type that is handled by that new chaincode, does the transaction itself get validated according to PBFT?\nB) on what basis do validating nodes decide if new chaincode is valid\/safe?","edited":{"user":"U0KM0C3M3","ts":"1476707853.000000"},"ts":"1476707837.002162"},{"type":"message","user":"U0UGH3X7X","text":"anyone able to join the hangout ?","ts":"1476712991.002164"},{"type":"message","user":"U0XPR4NP4","text":"<@U0KM0C3M3> I think that <@U0ULK2JPP> is a better person to answer this, but I will do my best\n\nA) In v0.5\/v0.6 a chaincode deployment goes through PBFT consensus just like an invocation.  In the v1 architecture, chaincode deployment is managed through the lifecycle chain code, someone who wishes to deploy a chaincode follows the normal invocation path of sending it to the desired endorsers for endorsement, then sends it through ordering and once the transaction makes it onto the chain, the chaincode is finally deployed.\nB) In general, validity\/safety is assured by virtue of the deployer being trusted with deployment privileges.","ts":"1476713003.002165"},{"type":"message","user":"U0XPR4NP4","text":"<@U0UGH3X7X> post it here?","ts":"1476713009.002166"},{"type":"message","user":"U0UGH3X7X","text":"<https:\/\/hangouts.google.com\/call\/y5a5k7qcs5fchmzrkhc7n3yteqe>","attachments":[{"title":"Google Hangouts","title_link":"https:\/\/hangouts.google.com\/call\/y5a5k7qcs5fchmzrkhc7n3yteqe","text":"Click to join now. If the call is over, start a new one with up to 10 friends.","fallback":"Google Hangouts","thumb_url":"https:\/\/www.gstatic.com\/images\/icons\/material\/product\/2x\/hangouts_64dp.png","from_url":"https:\/\/hangouts.google.com\/call\/y5a5k7qcs5fchmzrkhc7n3yteqe","thumb_width":128,"thumb_height":128,"service_icon":"https:\/\/hangouts.google.com\/favicon.ico","service_name":"hangouts.google.com","id":1}],"ts":"1476713030.002167"},{"type":"message","user":"U0UGH3X7X","text":"forget that one ... let's use this  <https:\/\/hangouts.google.com\/hangouts\/_\/miica46hq5be7epnl3d5vmz5dqe>","ts":"1476713066.002169"},{"type":"message","user":"U0UGH3X7X","text":"<@U1KDAMDJ7>  <@U0XQ35CDD> add your 1-liner scrum summary here","ts":"1476713507.002170"},{"type":"message","user":"U1KDAMDJ7","text":"I will continue looking into FAB-708 today.","ts":"1476714368.002171"},{"type":"message","user":"U1AU8DRQR","text":"<https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1476502749002154> <@U0XPR4NP4> I think I misunderstood your comment. how does a node know if \"All online nodes have come to an agreement on the world state\" to stop its 'periodical pull synch protocol timer'?","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1476502749002154","fallback":"[October 14th, 2016 8:39 PM] jyellick: <@U1AU8DRQR> From earlier you said:\n\n&gt; problem: the pull protocol was meant to be periodical, node has to periodically send a pull to one of its random neighbours. now only a 'one shot' version is implemented (after node start). this solves the problem (not just the testcase but the root cause, a specific situation) I had and does no harm to other test cases. BUT if the protocol would be periodical, the test would never terminate.\n\nI have been thinking about this.  Because we have a stateful network protocol, we can tell when a connection is established\/ended.  All online nodes have come to an agreement on the world state, would it be safe to stop this timer? It could always be restarted once someone joins.  I dislike the idea of the network operating in a 'special' mode for tests (like having a limited number of times this timer can pop, or disabling it for some tests) so a solution like that would preferable to me.","ts":"1476502749.002154","author_subname":"jyellick","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"<@U1AU8DRQR> From earlier you said:\n\n&gt; problem: the pull protocol was meant to be periodical, node has to periodically send a pull to one of its random neighbours. now only a 'one shot' version is implemented (after node start). this solves the problem (not just the testcase but the root cause, a specific situation) I had and does no harm to other test cases. BUT if the protocol would be periodical, the test would never terminate.\n\nI have been thinking about this.  Because we have a stateful network protocol, we can tell when a connection is established\/ended.  All online nodes have come to an agreement on the world state, would it be safe to stop this timer? It could always be restarted once someone joins.  I dislike the idea of the network operating in a 'special' mode for tests (like having a limited number of times this timer can pop, or disabling it for some tests) so a solution like that would preferable to me.","author_name":"Jason Yellick","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/jyellick","author_icon":"https:\/\/secure.gravatar.com\/avatar\/80fccad690b283483c3b5418b8b82b5b.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F272a%2Fimg%2Favatars%2Fava_0026-48.png","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1476716782.002172"},{"type":"message","user":"U0XPR4NP4","text":"Well, presumably, all nodes report the same sequence number and associated hashes?","ts":"1476716818.002174"},{"type":"message","user":"U0XPR4NP4","text":"(Note, this may never be the case under byzantine conditions, but usually would be the end state of our tests)","ts":"1476716860.002175"},{"type":"message","user":"U1AU8DRQR","text":"So e.g. I am node i and all the other nodes seem to have the same last batch when I pull. That's why I decide to stop my timer.. Do you think of this? ","ts":"1476717789.002176"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I think that sounds right, that it should stop when you have no outstanding requests, and everyone is reporting the same last batch on the pull","ts":"1476718162.002177"},{"type":"message","user":"U1AU8DRQR","text":"Btw pull synchronization uses random nodes. I am not sure we can suppose that everyone has the same batches ","ts":"1476718751.002178"},{"user":"U184J2R7S","text":"<@U184J2R7S|weeds> has joined the channel","type":"message","subtype":"channel_join","ts":"1476719525.002179"},{"type":"message","user":"U0XPR4NP4","text":"<@U0UGH3X7X> Please see <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1817\/> for static genesis block generation","ts":"1476719700.002180"},{"type":"message","user":"U0XPR4NP4","text":"<@U1AU8DRQR> Could you not track the last pulled state from each node in the network?","ts":"1476719735.002181"},{"type":"message","user":"U1AU8DRQR","text":"I could but that would but a lot of messaging ","ts":"1476719766.002182"},{"type":"message","user":"U0XPR4NP4","text":"It's not that there is an urgency for this timer to stop though? Just that we would like for it to eventually terminate in our tests?","ts":"1476719808.002183"},{"type":"message","user":"U0XPR4NP4","text":"Maybe this is the wrong approach, maybe we should do a special deviation for the tests","ts":"1476719845.002184"},{"type":"message","user":"U0XPR4NP4","text":"We obviously do not want to complicate the real code path unnecessarily just to simplify our tests","ts":"1476719863.002185"},{"type":"message","user":"U1AU8DRQR","text":"Yes, but then what to do in the tests? That is what I said, that the test's System implementation could terminate after it thinks it is only receiving pull and hello messages ","ts":"1476723783.002186"},{"user":"U234U0A5U","text":"<@U234U0A5U|ruslan.ardashev> has joined the channel","type":"message","subtype":"channel_join","ts":"1476728335.002187"},{"type":"message","user":"U1AU8DRQR","text":"<@U0XPR4NP4> ?","ts":"1476800469.002188"},{"type":"message","user":"U0XPR4NP4","text":"<@U1AU8DRQR> Am here.","ts":"1476800487.002189"},{"type":"message","user":"U1AU8DRQR","text":"<https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1476723783002186> :slightly_smiling_face:","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1476723783002186","fallback":"[October 17th, 2016 10:03 AM] hgabor: Yes, but then what to do in the tests? That is what I said, that the test's System implementation could terminate after it thinks it is only receiving pull and hello messages ","ts":"1476723783.002186","author_subname":"hgabor","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"Yes, but then what to do in the tests? That is what I said, that the test's System implementation could terminate after it thinks it is only receiving pull and hello messages ","author_name":"Gabor Hosszu","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/hgabor","author_icon":"https:\/\/secure.gravatar.com\/avatar\/00f4290e36c198abb7d4f0ea586245db.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0012-48.png","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1476800506.002190"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I've been thinking on that, trying to come up with a good solution.  Especially how to differentiate the case where \"Now there are only pulls scheduled, but one of them will cause more work to happen\" from \"Now there are only pulls scheduled and nothing will happen\"","ts":"1476800718.002192"},{"type":"message","user":"U0XPR4NP4","text":"The most elegant way I can come up with is essentially to set a flag for testing, which tracks the last pull from every replica, and, if all the pulls match, and the pull timer fires again, to stop the pull timer.  I don't like it, but struggling to come up with a better way to handle it","ts":"1476801084.002193"},{"type":"message","user":"U1AU8DRQR","text":"Yeah but that way it will be needed to change the sbft implementation, as I see","ts":"1476801430.002194"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I'm certainly open to other ideas, not wild about that solution, just the cleanest that comes to mind","ts":"1476801503.002195"},{"type":"message","user":"U1AU8DRQR","text":"I meant changing it and hack some logic into it only used for testing","ts":"1476801523.002196"},{"type":"message","user":"U1AU8DRQR","text":"My idea was \"checking if there are only pulls\" but as you said the case \"Now there are only pulls scheduled, but one of them will cause more work to happen\" will break it","ts":"1476801603.002197"},{"type":"message","user":"U0XPR4NP4","text":"Right","ts":"1476802328.002198"},{"type":"message","user":"U0XQ35CDD","text":"So, I'm working on adding support for channels on the Kafka orderer. For reference, you have Alice, Bob interacting with two different Kafka orderers\/shims, and the Kafka cluster \/ ZK ensemble standing behind that.","ts":"1476806366.002199"},{"type":"message","user":"U0XQ35CDD","text":"(Client - &gt; Shim -&gt; Kafka Cluster | ZK Ensemble)","ts":"1476806398.002200"},{"type":"message","user":"U0XQ35CDD","text":"What you want to do is have Alice send a transaction that says \"I want a channel where only Bob and I can transact on\",   and in the end get a partition that only you two can read to\/write from. (We of course assume that all shims play nicely, and conform to that partition's ACL. No byzantine faults here.)","ts":"1476806583.002201"},{"type":"message","user":"U0XQ35CDD","text":"I looked at the relevant KIPs, etc. and I think my options come down to these.","ts":"1476806651.002202"},{"type":"message","user":"U0XQ35CDD","text":"1. The ACL is maintained by the shim. You need some custom form of consensus among the shims to establish order. (Congratulations, you've added yet another headache.)","edited":{"user":"U0XQ35CDD","ts":"1476807430.000000"},"ts":"1476806735.002203"},{"type":"message","user":"U0XQ35CDD","text":"2. The ACL is handled by Kafka, which in turns posts it to ZK. This is the native way that Kafka does ACLs but it presents a few issues. One, there's no API for this yet, as the underlying protocol is still at KIP\/RFC level. We would get this by literally having the shim call the authorizer CLI. Two, even if that solves the ACL issue for channels (since Kafka can handle it natively), there will always be ordering-related metadata that we want to use at the shim level that is not already covered by Kafka, whether it's at KIP-level or not.","ts":"1476806995.002204"},{"type":"message","user":"U0XQ35CDD","text":"3. Taking a cue from the above, have the shims interact _directly_ with the ZK ensemble. (This is essentially config info that you wish to persist in a distributed manner, think etcd.) This means we don't use Kafka's ACL feature, and instead enforce ACL on the shim level.","ts":"1476807105.002205"},{"type":"message","user":"U0XQ35CDD","text":"4. Have the shims maintain the ACL (and all other related config metadata), but don't go with ZK, etcd, or any custom consensus mechanism between them. Instead, use a special Kafka topic for such kind of config metadata. The shims write to a special Kafka topic\/partition, and apply the ACL once they've read it back from the partition.","ts":"1476807224.002206"},{"type":"message","user":"U0XQ35CDD","text":"I like Option 4 more. (3 is nice as well, but probably adds more overhead.)","ts":"1476807273.002207"},{"type":"message","user":"U0ZJZBJLF","text":"I don't know how Kafka works, but I have some experience with ZK and I think that option 3 is cool because it gives you:\n- a notification to Alice (Bob) when Bob (Alive) has selected a channel for them (in case they come up at the same time) you can register everyone under a shared path and set a watcher, or maybe decide some other method.\nBut now when I think of it- why did you think only of alive and bob? is there something special for pairs or is this just an example for any K? because, if it's only for pairs- you can simply always decide that for each A,B the channel will be something like A &lt; B? AB : BA or something like that","edited":{"user":"U0ZJZBJLF","ts":"1476808636.000000"},"ts":"1476808541.002209"},{"type":"message","user":"U0XPR4NP4","text":"So, to offer dissenting opinion, I'll postulate that it is (1) that is the best answer.  And, it can be accomplished with no _additional_ consensus.","ts":"1476811050.002212"},{"type":"message","user":"U0XQ35CDD","text":"<@U0ZJZBJLF> Alice and Bob is just a simplification. It can and should work with multiple participants.","ts":"1476811080.002213"},{"type":"message","user":"U0ZJZBJLF","text":"So if the set is A1,A2,A3... Ak why not arrange then lexically and define the shared channel to be the concatenation of the A_i's?","ts":"1476811124.002214"},{"type":"message","user":"U0XQ35CDD","text":"The problem is not the naming of the channel. Imagine you wish to add or remove participants from it. These changes need to be ordered.","ts":"1476811225.002215"},{"type":"message","user":"U0XPR4NP4","text":"Each shim must be able to interpret the output from kafka for a partition as a blockchain, otherwise, it cannot fulfill the ab.proto definition.  Additionally, there must be some consensus on the contents of a block, assuming the batch size is greater than one.  So, there is a blockchain, which embeds the ACL, the contents of which are already consensed on, so each shim can evaluate requests against the ACL, I don't see the problem.","ts":"1476811254.002216"},{"type":"message","user":"U0XQ35CDD","text":"This is essentially option 4.","ts":"1476811322.002217"},{"type":"message","user":"U0XPR4NP4","text":"How are blocks cut?","ts":"1476811366.002218"},{"type":"message","user":"U0XQ35CDD","text":"By passing all the messages in a partition and cutting every, say, 100 messages you get back on that partition. Same underlying logic.","ts":"1476811420.002219"},{"type":"message","user":"U0XPR4NP4","text":"But what if I want to create a channel\/partition and send 3 transactions on it?","ts":"1476811440.002220"},{"type":"message","user":"U0ZJZBJLF","text":"kostas, regarding 4- what is the retention for the topic? it needs to be preserved for ever because if Alice joins next month she should be able to read that ACL, right?","ts":"1476811495.002221"},{"type":"message","user":"U0XQ35CDD","text":"<@U0ZJZBJLF>: For now, yes.","ts":"1476811568.002222"},{"type":"message","user":"U0XQ35CDD","text":"<@U0XPR4NP4>: What about it?","ts":"1476811596.002223"},{"type":"message","user":"U0XPR4NP4","text":"Well, no block would ever be created?  Because there were not 100 messages, only 3?  What I am driving at, is that I think in order to cut blocks, that there must be some sort of leader election among the shims.  Whether this is done through ZK, a special topic, or whatnot.  And at this point, it seems like the ACL problem sort of 'goes away'","ts":"1476811688.002224"},{"type":"message","user":"U0XQ35CDD","text":"Right, there is a timeout after which a \"time-to-cut\" message is sent, and when you read it back you know you can cut.","ts":"1476811756.002225"},{"type":"message","user":"U0XQ35CDD","text":"It's the same logic as in Option 4. You are describing option 4.","ts":"1476811777.002226"},{"type":"message","user":"U0XQ35CDD","text":"Option 4 is build on top of Kafka. Option 1 is have comms between the shims, leaving Kafka and ZK out of it.","ts":"1476811969.002227"},{"type":"message","user":"U0XPR4NP4","text":"Ah, okay, great, then yes, I don't really want (1).  To me, (2),(3),(4) implied building some additional consensus for ACL support, and that struck me as unnecessary.","ts":"1476812024.002228"},{"type":"message","user":"U0ZJZBJLF","text":"correct me if I'm wrong, I don't know much about kafka but if you have information messages `m1, m2, m3` sent on that option 4 kafka topic in that order and you decide to delete `m2` (from the disk), you can't, right? you need to \"wait\" until its \"cleaned\", but you can't have kafka clean only `m2`, so in the long term won't there be a space problem if you need `m1` but you want to delete `m2, ... m10000`? you'll need to \"move\" `m1` to the head of the topic or something? isn't it a management overhead? That's why I think (3) is better, because you can also \"update\" a node and not only \"append\".","edited":{"user":"U0ZJZBJLF","ts":"1476812708.000000"},"ts":"1476812689.002229"},{"type":"message","user":"U0XQ35CDD","text":"<@U0ZJZBJLF>: You send a message that says \"members are now X, Y, Z\", once the shims read this, they enforce this ACL. Even if the old message that said \"members are now X, Y\" is still available on the broker it doesn't matter because it has a smaller offset.","ts":"1476813117.002231"},{"type":"message","user":"U0ZJZBJLF","text":"members of what are now X,Y,Z? I thought you have many channels, so you need for *each* channel to say: members of channel *C* are: X, Y, Z, and send that on that shared topic, or am I missing something?","edited":{"user":"U0ZJZBJLF","ts":"1476813214.000000"},"ts":"1476813204.002232"},{"type":"message","user":"U0ZJZBJLF","text":"so I'm asking- if I understand correctly and you have 1 kafka topic in which you send *everything*, then if there is a channel *C'* for which there is no update in its membership, it can't be deleted, otherwise it'll disappear. am I wrong?","ts":"1476813390.002234"},{"type":"message","user":"U0XQ35CDD","text":"Members of a channel 'C' are now X, Y, Z.","ts":"1476813520.002235"},{"type":"message","user":"U0XQ35CDD","text":"The first statement is correct.","ts":"1476813537.002236"},{"type":"message","user":"U0XQ35CDD","text":"The second statement is also correct. We've discussed the option of closing a channel if there hasn't been any activity on it for a while, so I guess at this point you would also post on the same topic, but nothing concrete yet. At any rate, if the Kafka partition is to be pruned, you would have to re-persist the channel memberships periodically.","ts":"1476813681.002237"},{"type":"message","user":"U0ZJZBJLF","text":"and who does the re-persistence? don't you need consensus on that?","edited":{"user":"U0ZJZBJLF","ts":"1476813798.000000"},"ts":"1476813765.002238"},{"type":"message","user":"U0ZJZBJLF","text":"how does a shim know he's the re-persister?","edited":{"user":"U0ZJZBJLF","ts":"1476813804.000000"},"ts":"1476813773.002239"},{"type":"message","user":"U0XQ35CDD","text":"The pruning of a Kafka topic is actually a config setting in Kafka, it happens w\/ no interaction from the shims.","ts":"1476813837.002242"},{"type":"message","user":"U0XQ35CDD","text":"Ah, you deleted the Q :simple_smile:","ts":"1476813851.002243"},{"type":"message","user":"U0ZJZBJLF","text":"yeah I sometimes type something and think of another thing","ts":"1476813862.002244"},{"type":"message","user":"U0XQ35CDD","text":"No problem, I do that a lot as well.","ts":"1476813872.002245"},{"type":"message","user":"U0XQ35CDD","text":"As for the rest of the questions, this goes back to the \"how do we cut a block\" discussion. Introduce a random amount of delay to each shim, and have them all post to the topic. (So: if X, Y, see Z's message on the delivery stream first, and it matches what they were to send, they cancel their own transmission.) This not the cleanest of solutions, and a case where Option 3 would help (by setting a watch, etc.).","edited":{"user":"U0XQ35CDD","ts":"1476815976.000000"},"ts":"1476814300.002246"},{"type":"message","user":"U0ZJZBJLF","text":"yeah, that's all I wanted to bring up (well, I *am* a fan of ZK so maybe its biased)","ts":"1476814359.002247"},{"type":"message","user":"U0XQ35CDD","text":"Yes, I hear you. Thanks for the feedback. I haven't discounted Option 3 entirely yet, and depending on what my tests show I may bring it up again.","ts":"1476814456.002248"},{"type":"message","user":"U0XV1HDL3","text":"<@U0XQ35CDD> : good discussion! Your 3 would look silly given that there is already such a coordination tool, which is option 4. overall, i would not make it overly complex: start with a static configuration,  topics remain there forever (cannot be closed), just like their ledgers would remain, and so on.","ts":"1476818327.002250"},{"user":"U1SHFS1Q9","text":"<@U1SHFS1Q9|umasuthan> has joined the channel","type":"message","subtype":"channel_join","ts":"1476868703.002251"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XQ35CDD> - I need to catch up on the above discussion on Kafka ACL - but at some point it would be great you sync with Elli\/Angelo whom are working on ACL for channels - so this should not be independent :slightly_smiling_face: <@U1BC5A0F9> <@U0ZR63HLK>","ts":"1476882284.002252"},{"type":"message","user":"U0ZR63HLK","text":"Indeed, great :slightly_smiling_face:","ts":"1476882368.002253"},{"type":"message","user":"U1CTBUNEN","text":"how is the merge coming along","ts":"1476882771.002254"},{"type":"message","user":"U1CTBUNEN","text":"I'm eager to start using some new features in the convergence branch","ts":"1476882783.002255"},{"type":"message","user":"U0UGH3X7X","text":"<@U1CTBUNEN>  the maintainers are using  <#C2NESEYV9|fabric-reconcile>","ts":"1476882828.002256"},{"type":"message","user":"U1CTBUNEN","text":"<@U0UGH3X7X> thanks : ))","ts":"1476883022.002257"},{"type":"message","user":"U1CTBUNEN","text":"<@U0UGH3X7X> are you part of the IBM dev team ?","ts":"1476883104.002258"},{"type":"message","user":"U0UGH3X7X","text":"a small cog of the team, yes :slightly_smiling_face:","ts":"1476883145.002259"},{"type":"message","user":"U1BC5A0F9","text":"<@U0XQ35CDD>, it would be great if we could talk indeed.","ts":"1476893020.002260"},{"type":"message","user":"U1BC5A0F9","text":"Thanks <@U0Y14MWA2>!","ts":"1476893031.002261"},{"type":"message","user":"U0XPR4NP4","text":"<@U1BC5A0F9> I would also like to be involved in the channel ACL discussion.  In order to support configuration\/reconfiguration I've already done some ACL work around this, and would love to generalize it to handle the channel needs","ts":"1476896915.002262"},{"type":"message","user":"U0XQ35CDD","text":"<@U0XV1HDL3>: Maybe it's not entirely silly, as it could give us a clear leader in operations such as cutting a block, or periodic persisting of channel config that we know address with some redundancy and extra noise, but yes, I get your point and I'll keep it simple.","ts":"1476901336.002263"},{"type":"message","user":"U0XQ35CDD","text":"<@U0Y14MWA2> <@U0ZR63HLK> <@U1BC5A0F9> Will do, working on a very simple prototype now to test out the Kafka APIs, and whatever overlaps with your domain will be rewritten. I'll touch base with you next week when it's ready.","ts":"1476901340.002264"},{"type":"message","user":"U0XQ35CDD","text":"<@U0XPR4NP4> I want to use the work you're doing on policy implementations, so we'll tie everything together.","ts":"1476901347.002265"},{"type":"message","user":"U0XV1HDL3","text":"well, i understand little of Kafka, but i do not see why the shims should interact directly with the ZK inside kafka, this seems non-modular.","ts":"1476905041.002266"},{"type":"message","user":"U0XV1HDL3","text":"instead, it would be nice to use the kafka API for this. something like this: before any message is sent on the channel, the creator sends the ACLs, the shims filter this out and enforce it.  (wasnt this the genesys block?)","ts":"1476905150.002267"},{"type":"message","user":"U0XV1HDL3","text":"btw, how does a \"channel\" map to kafka?  channel &lt;=&gt; kafka topic ?","ts":"1476905187.002268"},{"type":"message","user":"U0XQ35CDD","text":"<@U0XV1HDL3>: Point taken on overloading Kafka's ZK. Your second statement is more-or-less correct. As to your question, based on the APIs that I see available so far, we're looking at a new topic with a single partition. (A new partition in an existing topic could also work of course, but the API is not there.)","edited":{"user":"U0XQ35CDD","ts":"1476906529.000000"},"ts":"1476906438.002269"},{"type":"message","user":"U0ZR63HLK","text":"<@U0XQ35CDD> thanks :slightly_smiling_face:","ts":"1476949446.002272"},{"type":"message","user":"U0ZR63HLK","text":"There is an IBM page (<https:\/\/developer.ibm.com\/hadoop\/2016\/07\/20\/kafka-acls\/>) that describes ACLs in Kafka. Really nice. For topics, ACLs can configured on the following operations: CREATE\/READ\/WRITE\/DESCRIBE.","attachments":[{"service_name":"Hadoop Dev","title":"Kafka ACLs - Hadoop Dev","title_link":"https:\/\/developer.ibm.com\/hadoop\/2016\/07\/20\/kafka-acls\/","text":"Kafka ACLs when SSL and Kerberos are enabled","fallback":"Hadoop Dev: Kafka ACLs - Hadoop Dev","image_url":"https:\/\/developer.ibm.com\/hadoop\/wp-content\/uploads\/sites\/28\/2016\/06\/kafka-broker.jpg","ts":1469023544,"from_url":"https:\/\/developer.ibm.com\/hadoop\/2016\/07\/20\/kafka-acls\/","image_width":839,"image_height":250,"image_bytes":27994,"service_icon":"https:\/\/developer.ibm.com\/hadoop\/wp-content\/themes\/projectnext\/css\/favicon.ico","id":1}],"ts":"1476953605.002273"},{"type":"message","user":"U0ZR63HLK","text":"So, the Kafka cluster administrator can decide who is allowed to create topics. Nice!","ts":"1476953632.002275"},{"type":"message","user":"U0PB67X4K","text":"Just catching up on this conversation as I was trapped in meetings yesterday.","ts":"1476959930.002276"},{"type":"message","user":"U0PB67X4K","text":"I assume that you do know that it is possible to right your own authorization plugin for Kafka (the default simple authorizer does store ACLs in ZK)?","edited":{"user":"U0PB67X4K","ts":"1476959997.000000"},"ts":"1476959976.002277"},{"type":"message","user":"U0PB67X4K","text":"and just to double-check, the plan is that each channel maps to a Kafka topic?","ts":"1476960104.002279"},{"type":"message","user":"U0ZR63HLK","text":"yes, I have the same understanding","ts":"1476961679.002280"},{"type":"message","user":"U1AU8DRQR","text":"guys, I am on sick leave today so I won't participate in the daily scrum. the SBFT thing was merged and my patch for it: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1737\/> it only adds one time pull synchronization. <@U0UGH3X7X> <@U0XQ35CDD> <@U0Y14MWA2> <@U0XPR4NP4>","edited":{"user":"U1AU8DRQR","ts":"1476967197.000000"},"ts":"1476966768.002281"},{"type":"message","user":"U0XQ35CDD","text":"<@U0PB67X4K> I am well aware of that, and had also posted the relevant links for this in the crypto channel.","ts":"1476967030.002282"},{"type":"message","user":"U0XQ35CDD","text":"RE: channel mapping to a Kafka topic - yes.","ts":"1476967061.002283"},{"type":"message","user":"U0XQ35CDD","text":"( <@U0PB67X4K>: This is Option 2 in my write-up above.) ","edited":{"user":"U0XQ35CDD","ts":"1476967552.000000"},"ts":"1476967538.002285"},{"type":"message","user":"U1KDAMDJ7","text":"Is there an recommended convention for naming orderer nodes?","ts":"1476970729.002287"},{"type":"message","user":"U0UGH3X7X","text":"for 0.6 yes , required naming vp0,vp1, etc ...  for v1.0 no, we should be able to map from certs","ts":"1476971041.002288"},{"type":"message","user":"U0XPR4NP4","text":"<@U0UGH3X7X> post the hangout link here in case others want to join? ","ts":"1476972043.002289"},{"type":"message","user":"U0UGH3X7X","text":"worked earlier today but not now !","ts":"1476972070.002290"},{"text":"<@U0UGH3X7X|tuand> has started a Google+ Hangout for this channel. <https:\/\/hangouts.google.com\/hangouts\/_\/qdazmwzqg5apdlfx3suuutlutie|Join Hangout>.","username":"hangouts","bot_id":"B0UKUAJ0Y","type":"message","subtype":"bot_message","ts":"1476972093.002291"},{"type":"message","user":"U0ZR63HLK","text":"<@U0XQ35CDD>, may you clarify me what is the shim in the context of Kafka? Sorry :disappointed:","ts":"1476972137.002292"},{"type":"message","user":"U0XQ35CDD","text":"<@U0ZR63HLK>: Sure. It's essentially the middleman between the peers and the Kafka cluster. The peers issue Broadcast and Deliver RPCs and the shim turns them into the proper API calls for the Kafka cluster. See: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1627\/>","ts":"1476972911.002293"},{"type":"message","user":"U0ZR63HLK","text":"ah, perfet. Got it. Thanks :slightly_smiling_face:","ts":"1476973138.002294"},{"type":"message","user":"U0XQ35CDD","text":"Sure thing.","ts":"1476973236.002295"},{"type":"message","user":"U0UGH3X7X","text":"working on FAB-665 (<https:\/\/jira.hyperledger.org\/browse\/FAB-665>)  which is a tool for admins to create the genesis block as defined for bootstrapping in FAB-359.  Also seeing how I can generate this block according to <@U0XPR4NP4> 's proposed ab.proto changeset ( <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1795\/1> )","ts":"1476973261.002296"},{"type":"message","user":"U0XPR4NP4","text":"<@U0UGH3X7X> You are likely better off refering to <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1817\/>  as this generates a simple genesis block using those protos (statically, in code)","ts":"1476973372.002297"},{"type":"message","user":"U0UGH3X7X","text":"thanks jason ! 1817 is on a tab somewhere on my desktop :slightly_smiling_face:","ts":"1476973443.002298"},{"type":"message","user":"U1BC5A0F9","text":"Hi, so <@U0XQ35CDD>, does it mean that shim is able to update the ACLs? If so, would it be responsible for processing a specific type of transaction, e.g., configuration one?","ts":"1476973801.002299"},{"type":"message","user":"U1BC5A0F9","text":"For example if a channel is owned be two parties, it may be that both of them need to \"agree\" to have  the ACL extended by one party or have the ACL reduced by one or more parties.","ts":"1476973851.002300"},{"type":"message","user":"U0XQ35CDD","text":"<@U1BC5A0F9>: The shim should be able to update the ACLs, and it would be responsible for processing the CONFIG tx, yes.","ts":"1476979063.002301"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XQ35CDD> I've heard it proposed that the Kafka shim will need to maintain a copy of the rawledger (to support (re)configuration, and to allow the possibility of infinite block retention).  If this is the case, then it seems like each channel would have one consumer, writing to the rawledger, and then clients would read from this rawledger (not spawning a consumer per client).  I know you have (understandably) expressed an interest to try to keep the kafka mappings as 1-1 and not re-invent functionality, so I wanted to check to see if you agree this is the plan or if you propose some alternative?","edited":{"user":"U0XPR4NP4","ts":"1476990614.000000"},"ts":"1476990603.002302"},{"type":"message","user":"U0XQ35CDD","text":"<@U0XPR4NP4> I'm not sure I agree with this, but maybe I'm missing something.","ts":"1476991640.002304"},{"type":"message","user":"U0XQ35CDD","text":"For infinite block retention, my intention was to simply set `log.retention.hours=2147483647` in Kafka itself. This is approx. 250,000 years.","ts":"1476991726.002305"},{"type":"message","user":"U0XQ35CDD","text":"&gt; If this is the case, then it seems like each channel would have one consumer, writing to the rawledger, and then clients would read from this rawledger (not spawning a consumer per client).","ts":"1476991771.002306"},{"type":"message","user":"U0XQ35CDD","text":"Can you expand on this explanation? If a channel has one consumer, then this is one of the shim-carrying nodes. Which one? And doesn't this mean you have to worry about this node crashing, etc. (basically recreate the problem that the cluster was set to solve)?","ts":"1476991888.002307"},{"type":"message","user":"U0XPR4NP4","text":"Ah, yes, so, careless wording.  I should have said \"seems like each channel would have one consumer _per shim_, writing to the rawledger\".  I would correspondingly assume that there would be one producer per channel, per shim, rather than spawning a new one per client.","ts":"1476992030.002308"},{"type":"message","user":"U0XPR4NP4","text":"The piece which seems most problematic trying to keep the 1-1 mapping of broadcaster&lt;-&gt;producer and deliverer&lt;-&gt;consumer is that because the blockstream contains configuration, it must be parsed.  The producers and consumers are not truly independent, the current block height may affect the behavior of them both.  (The particular problem I am thinking of, is who is allowed to broadcast\/deliver to a chain) <@U0XQ35CDD>","edited":{"user":"U0XPR4NP4","ts":"1476992557.000000"},"ts":"1476992323.002309"},{"type":"message","user":"U0XPR4NP4","text":"I suppose just as the plan is for block cutting, the shims could share a channel where they post chain\/channel reconfigurations, this could be dodged.","ts":"1476992750.002313"},{"type":"message","user":"U0XPR4NP4","text":"I think I will backtrack and say the more I think about this, the more I am convinced that we should keep the 1-1 passthrough.","ts":"1476992789.002314"},{"type":"message","user":"U0XQ35CDD","text":"&gt; I suppose just as the plan is for block cutting, the shims could share a channel where they post chain\/channel reconfigurations, this could be dodged.","ts":"1476993560.002316"},{"type":"message","user":"U0XQ35CDD","text":"Right, if you look at Option 4 (<https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1476807224002206>) that's the thinking.","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1476807224002206","fallback":"[October 18th, 2016 9:13 AM] kostas: 4. Have the shims maintain the ACL (and all other related config metadata), but don't go with ZK, etcd, or any custom consensus mechanism between them. Instead, use a special Kafka topic for such kind of config metadata. The shims write to a special Kafka topic\/partition, and apply the ACL once they've read it back from the partition.","ts":"1476807224.002206","author_subname":"kostas","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"4. Have the shims maintain the ACL (and all other related config metadata), but don't go with ZK, etcd, or any custom consensus mechanism between them. Instead, use a special Kafka topic for such kind of config metadata. The shims write to a special Kafka topic\/partition, and apply the ACL once they've read it back from the partition.","author_name":"Kostas Christidis","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/kostas","author_icon":"https:\/\/avatars.slack-edge.com\/2016-04-05\/31983107923_80db5353e9278df980c7_48.png","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1476993580.002317"},{"type":"message","user":"U0XQ35CDD","text":"I'm still not sure we've addressed the concern though?","ts":"1476993792.002319"},{"type":"message","user":"U0XPR4NP4","text":"Perhaps not entirely.  I think maybe what I need to see is exactly how block cutting is going to work.","ts":"1476993841.002321"},{"type":"message","user":"U0XPR4NP4","text":"The reason why I started this conversation is I was thinking trying to unify the Kafka\/Solo common components into a single codebase would be a good idea.  Where the Kafka shim is simply populating a local rawledger, this would be a trivial exercise, however, after some thought, I'm inclined to agree with you, that that's the wrong way to do this.","ts":"1476994054.002322"},{"type":"message","user":"U0XQ35CDD","text":"So, right, in Kafka mode, is there any reason not have the rawledger reside in a partition? Think of a topic with 2 partitions. In partition A you push all the transactions as you receive them by the clients, and then the timeout triggers (or the batch size threshold) and you send a message to cut for block X. When you read it back, you know which messages comprise block X and you can push block X to partition B, effectively making partition B your raw ledger. Of course the problem is the usual one: how do you prevent other shims from pushing the same block to partition B and thus ruining your chain. We can add some logic to the shins for this (and hey, option 3 would be nice) but we need to do it right.","ts":"1476994552.002323"},{"type":"message","user":"U0XQ35CDD","text":"Maybe we should have the shim populate a rawledger after all? (Great, now you agree with my first thought, and now I agree with your first thought.)","ts":"1476994644.002324"},{"type":"message","user":"U0XQ35CDD","text":"The problem is that whereas multiple \"let's cut for block X\" messages in partition A are harmless, that's not the case for partition B.","ts":"1476994690.002325"},{"type":"message","user":"U0XPR4NP4","text":"&gt; and then the timeout triggers (or the batch size threshold) and you\n\nWho's timer? Who is you? (Assuming multiple shims)\n\n&gt; and you send a message to cut for block X. \n\nIs this to a special topic? Or the same channel?","ts":"1476994721.002326"},{"type":"message","user":"U0XQ35CDD","text":"You are a shim.","ts":"1476994760.002327"},{"type":"message","user":"U0XQ35CDD","text":"Has to be the same partition where the messages flow.","ts":"1476994779.002328"},{"type":"message","user":"U0XPR4NP4","text":"So you have a partition for a channel, and shims broadcast messages to this partition, not blocks.","edited":{"user":"U0XPR4NP4","ts":"1476994901.000000"},"ts":"1476994881.002329"},{"type":"message","user":"U0XPR4NP4","text":"When a shim broadcasts a message to a partition, it starts a timer for when to cut the batch.","ts":"1476994974.002331"},{"type":"message","user":"U0XPR4NP4","text":"Now, does the shim track to see whether that batch is cut? Or does it send the cut message regardless?","ts":"1476995008.002332"},{"type":"message","user":"U0XPR4NP4","text":"Or does the timer start when a batch is cut?","ts":"1476995080.002333"},{"type":"message","user":"U0XQ35CDD","text":"If it reads a cut message, before it sends its own I would expect it to stay silent.","ts":"1476995102.002334"},{"type":"message","user":"U0XPR4NP4","text":"So then, the shim must have a consumer for every topic it broadcasts to?","ts":"1476995126.002335"},{"type":"message","user":"U0XQ35CDD","text":"Yes.","ts":"1476995151.002336"},{"type":"message","user":"U0XPR4NP4","text":"Okay, so there's a special dedicated per topic consumer for each shim, and then additional consumers are spawned per deliver call?","ts":"1476995196.002337"},{"type":"message","user":"U0XPR4NP4","text":"Ah, wait, but deliver does not consume from that topic, it must be a different one, with the blocks?","ts":"1476995273.002338"},{"type":"message","user":"U0XQ35CDD","text":"The special consumers are for the shim to figure out when certain changes (ACL, blocks) take effect. The normal consumers are spawned to serve Deliver RPCs.","ts":"1476995300.002339"},{"type":"message","user":"U0XQ35CDD","text":"It must be the one with the blocks, yes.","ts":"1476995315.002340"},{"type":"message","user":"U0XQ35CDD","text":"This can be easily be a partition on the same topic by the way. ","ts":"1476995339.002341"},{"type":"message","user":"U0XPR4NP4","text":"Okay, so, then does the shim need a consumer for _every_ partition, regardless of whether it is broadcasting to it at this time? Or is there a dedicated topic which maintains the config across channels?","ts":"1476995382.002342"},{"type":"message","user":"U0XPR4NP4","text":"And who's responsibility is it to put the block onto the block channel?","ts":"1476995407.002343"},{"type":"message","user":"U0XQ35CDD","text":"So that last question brings me to this observation\/problem:","ts":"1476995447.002344"},{"type":"message","user":"U0ZJZBJLF","text":"Hey, sorry for barging in while you're discussing kafka stuff, but I have a question regarding multiChannels and I assume this is the best channel (pun intended) to ask - is there anyone here that knows more about the plan of how multi-channels will be implemented, besides what's written in Binh's google doc (which I've read)","ts":"1476995448.002345"},{"type":"message","user":"U0ZJZBJLF","text":"something doesn't add up :neutral_face:","ts":"1476995482.002346"},{"type":"message","user":"U0XQ35CDD","text":"What's the specific question?","ts":"1476995491.002347"},{"type":"message","user":"U0XQ35CDD","text":"(Jason, will resume.)","ts":"1476995505.002348"},{"type":"message","user":"U0ZJZBJLF","text":"well- where is the replication support, how can it be done?","ts":"1476995509.002349"},{"type":"message","user":"U0ZJZBJLF","text":"we decided long ago that peers that join or were offline for a while, get data from fellow peers","ts":"1476995529.002350"},{"type":"message","user":"U0XPR4NP4","text":"Ah, in short, it was decided that tracking which peers were to subscribe to which channel is a function of the app.  So the only piece of code which knows which peers are active on which channels would be the app","ts":"1476995644.002351"},{"type":"message","user":"U0ZJZBJLF","text":"It is also said:\n```\nIf the channel already exists, the list of Participants is the replacement of the existing list. The Orderers automatically replace the subscribers and eventually deliver the transaction together with other transactions on this channel.\n```\nThis sounds like a problem. If I'm a peer and I didn't get a participant update about a *removal* of a peer from a channel I may replicate information to it","ts":"1476995676.002352"},{"type":"message","user":"U0XPR4NP4","text":"It could be that we need to add some other information when a peer is bootstrapped to a chain, indicating which other peers it is allowed to discuss this chain\/channel with","ts":"1476995687.002353"},{"type":"message","user":"U0ZJZBJLF","text":"what app? the chaincode?","ts":"1476995701.002354"},{"type":"message","user":"U0XPR4NP4","text":"No, the application, the thing using the chaincode","ts":"1476995710.002355"},{"type":"message","user":"U0XPR4NP4","text":"Channel membership is done at a participant\/org level, not a peer level","ts":"1476995719.002356"},{"type":"message","user":"U0ZJZBJLF","text":"the node SDK then","ts":"1476995729.002357"},{"type":"message","user":"U0XQ35CDD","text":"The app using the node SDK. ","ts":"1476995744.002358"},{"type":"message","user":"U0ZJZBJLF","text":"yeah","ts":"1476995752.002359"},{"type":"message","user":"U0XPR4NP4","text":"Any peer with a chain of trust to a participant CA is allowed to broadcast\/deliver on that channel","ts":"1476995762.002360"},{"type":"message","user":"U0XPR4NP4","text":"But not every peer will want to transact on every channel","ts":"1476995776.002361"},{"type":"message","user":"U0XPR4NP4","text":"So, it is the application (built on the SDK) which decides which peers will have a copy of the contents of which channels","ts":"1476995795.002362"},{"type":"message","user":"U0ZJZBJLF","text":"I'm asking only regarding data replication between peers","ts":"1476995795.002363"},{"type":"message","user":"U0XPR4NP4","text":"Right","ts":"1476995801.002364"},{"type":"message","user":"U0ZJZBJLF","text":"I'm a peer and a peer asks a block from me. how do I know i'm allowed to send it to him?","ts":"1476995831.002365"},{"type":"message","user":"U0XPR4NP4","text":"I think there may be a shortcoming in the design from this respect, that there should be an API for the app to inform the peer of possible sync sources and destinations","edited":{"user":"U0XPR4NP4","ts":"1476995851.000000"},"ts":"1476995836.002366"},{"type":"message","user":"U0ZJZBJLF","text":"(a block from a chain of a channel)","ts":"1476995840.002367"},{"type":"message","user":"U0ZJZBJLF","text":"but, the only way of distributing such information has to be via a transaction, right?","ts":"1476995876.002369"},{"type":"message","user":"U0XPR4NP4","text":"Why?","ts":"1476995882.002370"},{"type":"message","user":"U0ZJZBJLF","text":"how else you suppose to do that then?","ts":"1476995890.002371"},{"type":"message","user":"U0XPR4NP4","text":"The app must inform a peer to subscribe to a channel","ts":"1476995904.002372"},{"type":"message","user":"U0XPR4NP4","text":"This expressly cannot be done via another chain, because it would leak that information via that chain","ts":"1476995917.002373"},{"type":"message","user":"U0ZJZBJLF","text":"you can't have an app contact peers and tell them about membership, it won't work.","ts":"1476995941.002374"},{"type":"message","user":"U0ZJZBJLF","text":"and not a good idea- what about peers that are unavailable at that moment?","ts":"1476995951.002375"},{"type":"message","user":"U0ZJZBJLF","text":"but are part of the channel?","ts":"1476995955.002376"},{"type":"message","user":"U0XPR4NP4","text":"What is the problem with that?","ts":"1476995962.002377"},{"type":"message","user":"U0ZJZBJLF","text":"maybe I should bring these question up in the google doc or something","ts":"1476995970.002378"},{"type":"message","user":"U0ZJZBJLF","text":"I was just checking maybe I didn't understand something","ts":"1476995979.002379"},{"type":"message","user":"U0XQ35CDD","text":"Wait, what's the counter-argument for posting the reconfig in the channel again?","ts":"1476995998.002380"},{"type":"message","user":"U0ZJZBJLF","text":"the counter argument is that I claim that the membership set *cannot* reduce in size, only extend","ts":"1476996026.002381"},{"type":"message","user":"U0ZJZBJLF","text":"wait, I mean- that's not a counter argument, but that's what I'm saying","ts":"1476996067.002382"},{"type":"message","user":"U0XPR4NP4","text":"There is nothing which prevents the peers from maintaining a list of peers on the chain who are transacting there.","ts":"1476996103.002383"},{"type":"message","user":"U0XPR4NP4","text":"I meant that you could not maintain the membership on a different chain","ts":"1476996116.002384"},{"type":"message","user":"U0ZJZBJLF","text":"you're right but I'm saying the list cannot throw nodes out of it, only grow","ts":"1476996166.002385"},{"type":"message","user":"U0XQ35CDD","text":"<@U0ZJZBJLF>: Because you may be lagging behind and when you reconnect you communicate with peers that may be removed from that channel?","ts":"1476996173.002386"},{"type":"message","user":"U0ZJZBJLF","text":"yes","ts":"1476996180.002387"},{"type":"message","user":"U0XPR4NP4","text":"My concern is making the configuration too large.  Especially if the list cannot shrink, then with tens of thousands of peers over time, this could make the configuration transaction quite bloated, possibly problematically so","ts":"1476996290.002388"},{"type":"message","user":"U0ZJZBJLF","text":"lol tens of thousands of peers? we'll retire by that time","ts":"1476996324.002389"},{"type":"message","user":"U0ZJZBJLF","text":"I don't think 10s of thousands is something anyone should worry about now","ts":"1476996364.002390"},{"type":"message","user":"U0XPR4NP4","text":"If we are not architecting for that number, why are we even concerned about fetching older blocks peer to peer?","edited":{"user":"U0XPR4NP4","ts":"1476996392.000000"},"ts":"1476996379.002391"},{"type":"message","user":"U0ZJZBJLF","text":"because a peer can join the network of any size, even of size 10","ts":"1476996402.002393"},{"type":"message","user":"U0ZJZBJLF","text":"and the consensus cannot bring that information to a new peer","ts":"1476996424.002394"},{"type":"message","user":"U0ZJZBJLF","text":"only fellow peers","ts":"1476996426.002395"},{"type":"message","user":"U0ZJZBJLF","text":"at least that's what I've been told will happen in v1.0, and since our team are taking care of the synchronization part and Binh told me we shouldn't send information to a peer that isn't authorized I'm concerned here","ts":"1476996465.002396"},{"type":"message","user":"U0XPR4NP4","text":"Here is a gut proposal which may have problems, but hear it out.  What if a peer could post a transaction to the chain, with its address\/identity, requesting that other peers contact it supply state transfer?","edited":{"user":"U0XPR4NP4","ts":"1476996515.000000"},"ts":"1476996498.002397"},{"type":"message","user":"U0ZJZBJLF","text":"I don't understand, can you elaborate?","ts":"1476996532.002399"},{"type":"message","user":"U0XQ35CDD","text":"Hmm, clever. ","ts":"1476996534.002400"},{"type":"message","user":"U0XPR4NP4","text":"So, the fact that a peer is authorized to transact on a channel implies that it is authorized to receive the chain for that channel","ts":"1476996552.002401"},{"type":"message","user":"U0ZJZBJLF","text":"wait, that's a problem","ts":"1476996567.002402"},{"type":"message","user":"U0ZJZBJLF","text":"who decides which peer will fill the gaps to that peer that joined?","ts":"1476996586.002403"},{"type":"message","user":"U0ZJZBJLF","text":"it's either everyone, or you have a bystander effect","ts":"1476996597.002404"},{"type":"message","user":"U0ZJZBJLF","text":"(no one will)","ts":"1476996605.002405"},{"type":"message","user":"U0XQ35CDD","text":"The peer gets offers and takes up one of the other peers on their offer?","ts":"1476996638.002406"},{"type":"message","user":"U0XPR4NP4","text":"They would certainly not all have to send the blocks.  Just say \"Hi, ask me for blocks if you need them\"","edited":{"user":"U0XPR4NP4","ts":"1476996691.000000"},"ts":"1476996657.002407"},{"type":"message","user":"U0XQ35CDD","text":"Exactly.","ts":"1476996680.002408"},{"type":"message","user":"U0ZJZBJLF","text":"so all peers gang up on him when he joins? doesn't sound very scalable, but now when I think of it- maybe I have an idea","ts":"1476996707.002410"},{"type":"message","user":"U0ZJZBJLF","text":"when you submit a block, that block is related to a channel right?","ts":"1476996735.002411"},{"type":"message","user":"U0ZJZBJLF","text":"I mean, you don't mix transactions from different channels in the same block","ts":"1476996747.002412"},{"type":"message","user":"U0XPR4NP4","text":"Correct","ts":"1476996755.002413"},{"type":"message","user":"U0ZJZBJLF","text":"\"multi-ledger\"","ts":"1476996757.002414"},{"type":"message","user":"U0ZJZBJLF","text":"so... why not simply append the membership information with each block?","ts":"1476996769.002415"},{"type":"message","user":"U0XPR4NP4","text":"Every transaction on a chain must contain the same chain ID (and each channel has a unique chain ID)","ts":"1476996781.002416"},{"type":"message","user":"U0ZJZBJLF","text":"for example, the hash of all participant's PKI-ids","ts":"1476996783.002417"},{"type":"message","user":"U0ZJZBJLF","text":"by the consensus","ts":"1476996791.002418"},{"type":"message","user":"U0ZJZBJLF","text":"this solves it","ts":"1476996805.002419"},{"type":"message","user":"U0XPR4NP4","text":"I'm not sure I follow","ts":"1476996816.002420"},{"type":"message","user":"U0XQ35CDD","text":"Unless the reconfig message is posted to the chain, it doesn't. ","ts":"1476996834.002421"},{"type":"message","user":"U0ZJZBJLF","text":"it is.","ts":"1476996842.002422"},{"type":"message","user":"U0ZJZBJLF","text":"I'll explain why","ts":"1476996845.002423"},{"type":"message","user":"U0XQ35CDD","text":"And actually even then it doesn't I think.","ts":"1476996846.002424"},{"type":"message","user":"U0XQ35CDD","text":"Go for it. ","ts":"1476996851.002425"},{"type":"message","user":"U0ZJZBJLF","text":"let's say you're peer p0 and you're allowed to be in the channel until time T, ok?\nStarting from time T+epsilon, you're not allowed.","ts":"1476996879.002426"},{"type":"message","user":"U0ZJZBJLF","text":"each block sent after T, is sent without you in the membership of that block, and each block sent prior to time T, includes you in the block as an authorized peer","ts":"1476996909.002427"},{"type":"message","user":"U0ZJZBJLF","text":"let's say p1 is always part of the channel and p0 contacts p1 after T","ts":"1476996927.002428"},{"type":"message","user":"U0ZJZBJLF","text":"p0 should've received all block before T if he was alive at that time","ts":"1476996944.002429"},{"type":"message","user":"U0ZJZBJLF","text":"so it's \"safe\" to send blocks that were created before T to p0","ts":"1476996956.002430"},{"type":"message","user":"U0ZJZBJLF","text":"blocks that were created after T, won't be sent because the peer (p1) checks the list of the block he's about to send to p0 and sees p0 isn't found there","ts":"1476996979.002431"},{"type":"message","user":"U0ZJZBJLF","text":"I think that it doesn't impact heavily the size of the block , as long as we have like, up to hundreds of peers","ts":"1476997014.002432"},{"type":"message","user":"U0XPR4NP4","text":"Is it the hash of the set of peers, or a set of hashes of the peers?","ts":"1476997046.002433"},{"type":"message","user":"U0ZJZBJLF","text":"the set of hashes","ts":"1476997051.002434"},{"type":"message","user":"U0ZJZBJLF","text":"else it doesn't give you any information","ts":"1476997060.002435"},{"type":"message","user":"U0XPR4NP4","text":"Why not simply embed it in the configuration and not in every block?","ts":"1476997076.002436"},{"type":"message","user":"U0ZJZBJLF","text":"because you can't send the new configuration to p1 in time","ts":"1476997095.002437"},{"type":"message","user":"U0XQ35CDD","text":"Right, I thought you were referring to a different problem. ","ts":"1476997106.002438"},{"type":"message","user":"U0ZJZBJLF","text":"p1 might *also* get the block that is created after T, from a fellow peer, who did get the configuration but sent it to p1 as it's allowed to","edited":{"user":"U0ZJZBJLF","ts":"1476997158.000000"},"ts":"1476997143.002439"},{"type":"message","user":"U0XPR4NP4","text":"I'm not sure I follow:\n\n&gt; because you can't send the new configuration to p1 in time\n\nThe configuration is in a block? You must have it before you can send future blocks","ts":"1476997206.002441"},{"type":"message","user":"U0XQ35CDD","text":"Exactly. In your original problem statement, didn't you refer to a node that comes back online and doesn't know whether it can reach out to another peer for a specific channel?","ts":"1476997236.002442"},{"type":"message","user":"U0ZJZBJLF","text":"you're saying that if p1 got a block that is created after time T, is must have gotten that configuration block?","ts":"1476997286.002443"},{"type":"message","user":"U0XQ35CDD","text":"Yes. ","ts":"1476997295.002444"},{"type":"message","user":"U0ZJZBJLF","text":"that's only if it gets it from the consensus, what if the state replication isn't in-order?","ts":"1476997314.002445"},{"type":"message","user":"U0ZJZBJLF","text":"and p1 got it from a peer p2 ?","ts":"1476997322.002446"},{"type":"message","user":"U0ZJZBJLF","text":"oh","ts":"1476997328.002447"},{"type":"message","user":"U0ZJZBJLF","text":"hmmm... I see","ts":"1476997342.002448"},{"type":"message","user":"U0ZJZBJLF","text":"all blocks are part of the same chain","ts":"1476997348.002449"},{"type":"message","user":"U0ZJZBJLF","text":"so it can't commit the block until it \"committed\" the configuration block, right?","edited":{"user":"U0ZJZBJLF","ts":"1476997389.000000"},"ts":"1476997357.002450"},{"type":"message","user":"U0XQ35CDD","text":"Unless everything is ordered and verified in a chain you don't act. ","ts":"1476997359.002451"},{"type":"message","user":"U0XPR4NP4","text":"Exactly.  This vastly simplifies state transfer, as you play state forward, rather than backwards then forwards.","ts":"1476997421.002453"},{"type":"message","user":"U0ZJZBJLF","text":"yep. Thanks for the clarifications!","ts":"1476997456.002454"},{"type":"message","user":"U0ZJZBJLF","text":"carry on with kafka","ts":"1476997461.002455"},{"type":"message","user":"U0XQ35CDD","text":"So, we left it here: <https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1476995407002343>","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1476995407002343","fallback":"[October 20th, 2016 1:30 PM] jyellick: And who's responsibility is it to put the block onto the block channel?","ts":"1476995407.002343","author_subname":"jyellick","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"And who's responsibility is it to put the block onto the block channel?","author_name":"Jason Yellick","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/jyellick","author_icon":"https:\/\/secure.gravatar.com\/avatar\/80fccad690b283483c3b5418b8b82b5b.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F272a%2Fimg%2Favatars%2Fava_0026-48.png","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1476997517.002456"},{"type":"message","user":"U0XQ35CDD","text":"And my response to that is --","ts":"1476997544.002458"},{"type":"message","user":"U0XQ35CDD","text":"This is exactly why I wrote: <https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1476994690002325>","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1476994690002325","fallback":"[October 20th, 2016 1:18 PM] kostas: The problem is that whereas multiple \"let's cut for block X\" messages in partition A are harmless, that's not the case for partition B.","ts":"1476994690.002325","author_subname":"kostas","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"The problem is that whereas multiple \"let's cut for block X\" messages in partition A are harmless, that's not the case for partition B.","author_name":"Kostas Christidis","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/kostas","author_icon":"https:\/\/avatars.slack-edge.com\/2016-04-05\/31983107923_80db5353e9278df980c7_48.png","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1476997552.002459"},{"type":"message","user":"U0XQ35CDD","text":"And why I'm thinking that a raw ledger (as to your original suggestion) might be inevitable.","ts":"1476997576.002461"},{"type":"message","user":"U0XPR4NP4","text":"Okay, now I'm following you","ts":"1476997629.002462"},{"type":"message","user":"U0XPR4NP4","text":"So, the reason why I reversed position on the raw ledger, is that in order to maintain a raw ledger, every shim must maintain a copy of every blockchain.  So whereas Kafka allows you to take 20 kafka nodes to spread out 10k partitions (at maybe 1000 partitions per broker), this would force the shims to maintain 10k chains, regardless.","ts":"1476997751.002463"},{"type":"message","user":"U0XQ35CDD","text":"Good point.","ts":"1476997782.002464"},{"type":"message","user":"U0XQ35CDD","text":"I think inevitably we'll get down to option 3 (maybe with a different ZK ensemble) as a clearly elected leader could save us from all of these problems. Let's try to approach it like option 4 for now, and see if some simple logic from the shim side (\"the shim who sent the first 'cut block' is supposed to put the block?\" that can also fail in a ton of ways, e.g. that shim can crash but that's the example of logic that I'm talking about) can take us all the way there.","edited":{"user":"U0XQ35CDD","ts":"1476997982.000000"},"ts":"1476997964.002465"},{"type":"message","user":"U0XPR4NP4","text":"I was typing something similar.  Option (3) seems somewhat inevitable.  Or rather, each channel needs a leader to do the actual block cutting, and leveraging ZK seems like a natural fit.  We can definitely use 4 to mimic some leader election, and that may be the path of least resistance for now, but, I would be wary of sinking too much effort into hacking on a 'leader election over Kafka', when there are obviously purpose built tools (like ZK) out there for just such a thing.","edited":{"user":"U0XPR4NP4","ts":"1476998217.000000"},"ts":"1476998197.002467"},{"type":"message","user":"U2BGFAHC7","text":"Why not just raft?","ts":"1476998275.002469"},{"type":"message","user":"U0XPR4NP4","text":"<@U2BGFAHC7> RAFT would certainly be a solution, or etcd, or any of these other canned consensus options.  But, since we are working with Kafka and must have a ZK deployment already, it seems like a good option.","ts":"1476998330.002470"},{"type":"message","user":"U0XQ35CDD","text":"<@U2BGFAHC7> Option 3 would entail etcd (so Raft), or a ZK ensemble.","ts":"1476998349.002471"},{"type":"message","user":"U2BGFAHC7","text":"Thanks for the answer :slightly_smiling_face:","ts":"1476998369.002472"},{"type":"message","user":"U0XPR4NP4","text":"Sure thing","ts":"1476998404.002473"},{"type":"message","subtype":"pinned_item","user":"U0XQ35CDD","item_type":"C","attachments":[{"fallback":"[October 18th, 2016 9:04 AM] kostas: I looked at the relevant KIPs, etc. and I think my options come down to these.","ts":"1476806651.002202","author_subname":"kostas","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"I looked at the relevant KIPs, etc. and I think my options come down to these.","author_name":"Kostas Christidis","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/kostas","author_icon":"https:\/\/avatars.slack-edge.com\/2016-04-05\/31983107923_80db5353e9278df980c7_48.png","mrkdwn_in":["text"]}],"text":"<@U0XQ35CDD|kostas> pinned a message to this channel.","ts":"1476998512.002474"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XQ35CDD> So I am thinking maybe the common components across Kafka\/Solo (and ultimately SBFT), is going to be the incoming broadcast filtering, block cutting based on some stream of messages (not only the incoming broadcast messages), and then block stream consumption (for reconfiguration)","ts":"1476998567.002475"},{"type":"message","user":"U0XQ35CDD","text":"This sounds right to me.","ts":"1476998729.002476"},{"user":"U2NPXKPQ8","text":"<@U2NPXKPQ8|qq> has joined the channel","type":"message","subtype":"channel_join","ts":"1477014067.002477"},{"type":"message","user":"U0XV1HDL3","text":"regarding the above discussion about when to \"cut\" a block: if this is the only reason to introduce some non-modular addon to the kafka system, then we should not do blocks. after all, the block in blockchain is an artefact of bitcoin's protocol. \nkafka uses a stream or sequence of messages, and logically that is what we need. fundamentally there is no need for blocks other than to keep a superficial similarity with the PoW consensus.","ts":"1477035141.002478"},{"type":"message","user":"U0XQ35CDD","text":"Well, and on top of that, Kafka thrives performance-wise when it's dealing with small messages (in the single kB range -- not that it's bad otherwise, it'll probably still outperform whatever custom mechanism out there).","ts":"1477055482.002479"},{"type":"message","user":"U0XQ35CDD","text":"But then the model between the two cases (CFT and BFT) becomes considerably different. In the BFT case we deal with blocks\/batches on purpose, for performance reasons.","ts":"1477055582.002480"},{"type":"message","user":"U1KDAMDJ7","text":"If I start a peer directly in the vagrant dev env vm, where is it\u2019s state saved?","ts":"1477057036.002481"},{"type":"message","user":"U0XQ35CDD","text":"<@U1KDAMDJ7> `\/var\/hyperledger\/production`. This is also shown in the `core.yaml` file.","ts":"1477057174.002482"},{"type":"message","user":"U1KDAMDJ7","text":"thanks","ts":"1477057237.002483"},{"type":"message","user":"U13TWBRBL","text":"<@U0XPR4NP4> <@U0XQ35CDD> stupid question: what\u2019s the future work on pbft like? isn\u2019t that orthogonal to v1.0 architecture, other than maybe refactoring it to comply to the new orderer interface, which is just two methods: broadcast() and deliver()","ts":"1477058655.002484"},{"type":"message","user":"U13TWBRBL","text":"i know part of it is adopting gossip","ts":"1477058723.002485"},{"type":"message","user":"U0XPR4NP4","text":"<@U13TWBRBL> That's correct.  <@U0XR6J961> has actually produced a sort of next gen pbft called sbft (simple bft) which we intend to use for v1","ts":"1477058726.002486"},{"type":"message","user":"U13TWBRBL","text":"right?","ts":"1477058728.002487"},{"type":"message","user":"U13TWBRBL","text":"ah ok","ts":"1477058736.002488"},{"type":"message","user":"U0XPR4NP4","text":"Hardening it is a lower priority item than getting the end to end flow solid via Kafka, so although it may be an experimental option, I would not expect for sbft to be 'production ready' anytime soon","ts":"1477058800.002489"},{"type":"message","user":"U0XPR4NP4","text":"Gossip I think is orthogonal to pbft\/sbft, those will still rely on point to point links.  Gossip is intended to help the peer network scale","ts":"1477058854.002490"},{"type":"message","user":"U13TWBRBL","text":"Gossip is intended to help the peer network scale, meaning \u201ccommitters\u201d right? the consenters won\u2019t be using gossip?","ts":"1477058968.002491"},{"type":"message","user":"U0XPR4NP4","text":"Referring to committers, yes.  In the terminology that seems to be used most frequently, 'peers' are anything which has a copy of the validated \/ evaluated ledger.  'orderers' are the nodes which provide the ordering service.  The ordering network runs some form of consensus.  The peers may also choose to run some consensus on the validated ledger via the gossip network.  So, we try not to use the word 'consenter' as this is an ambiguous term.","ts":"1477059109.002492"},{"type":"message","user":"U13TWBRBL","text":"ok, fair enough, so the consensus network\/cloud won\u2019t be using gossip?","ts":"1477059248.002493"},{"type":"message","user":"U0XQ35CDD","text":"Correct.","ts":"1477059255.002494"},{"type":"message","user":"U13TWBRBL","text":"and the reason is? (just curious)","ts":"1477059281.002495"},{"type":"message","user":"U0XQ35CDD","text":"I think the question should be reversed: why would it have to use gossip? For one, the cardinality of the orderer set is much smaller than the peer set.","ts":"1477059342.002496"},{"type":"message","user":"U13TWBRBL","text":"interesting, i thought the opposite was true: the size of the consensus network (in terms of # of nodes) should be much larger compared to # of peers","ts":"1477059469.002497"},{"type":"message","user":"U13TWBRBL","text":"i understand that peer nodes number is open ended","ts":"1477059499.002498"},{"type":"message","user":"U0XPR4NP4","text":"There is nothing which prevents an ordering network from using gossip, but for pbft\/sbft the integrity of the point to point link between nodes is critical to the design\/security of the protocol.  For other ordering networks like Kafka, they seem to have chosen point to point as well, which makes sense, because gossip is great for large numbers of nodes, but bad for latency.","ts":"1477059533.002499"},{"type":"message","user":"U0XPR4NP4","text":"I would expect the ordering network to have comparatively few nodes to the peer network","ts":"1477059576.002500"},{"type":"message","user":"U0XQ35CDD","text":"I can see no reason why would you want the number of nodes participating in the orderer network being larger than the peer network.","ts":"1477059584.002501"},{"type":"message","user":"U0XPR4NP4","text":"The ordering network runs nearly zero business logic, it simply orders transactions.  It must, to allow for ACL management and a few other things process a very minimal 'configuration transaction' periodically, but this should be low overhead and rare.","ts":"1477059632.002502"},{"type":"message","user":"U13TWBRBL","text":"<@U0XPR4NP4> thanks for that on latency, makes sense","ts":"1477059639.002503"},{"type":"message","user":"U0XPR4NP4","text":"It is the peer network which actually maintains the complicated world state, generates and evaluates proposals, etc.  The peer network should need larger numbers in order to effectively scale.","ts":"1477059683.002504"},{"type":"message","user":"U0XQ35CDD","text":"A better way to put it: there is zero relationship between the size of the orderer set and the peer set.","ts":"1477059701.002505"},{"type":"message","user":"U13TWBRBL","text":"<@U0XQ35CDD> <@U0XPR4NP4> if i were to set up a network, i want the consensus cloud to be as large as i can afford so as to maximize the cost of collusion","ts":"1477059726.002506"},{"type":"message","user":"U0XQ35CDD","text":"No, you want the nodes of the consensus network to be picked in such a way that the possibilities for collusion are minimized.","ts":"1477059776.002507","reactions":[{"name":"+1","users":["U0PB67X4K"],"count":1}]},{"type":"message","user":"U13TWBRBL","text":"ok","ts":"1477059803.002508"},{"type":"message","user":"U0PB67X4K","text":"<@U0XPR4NP4> <@U0XQ35CDD>  - for the comms between the orderers and the peers, would it make sense to use the same gossip protocol that may be used between peers?   Or do we still go with a point to point link for peers to orderers  (and then in the future for peers which can't contact ordering nodes directly rely on the peer gossip protocol)?","edited":{"user":"U0PB67X4K","ts":"1477060133.000000"},"ts":"1477060092.002509"},{"type":"message","user":"U0XQ35CDD","text":"The latter is what I have in mind.","ts":"1477060126.002511"},{"type":"message","user":"U0PB67X4K","text":"I assumed as much and I think everyone is on the same page there but just wanted to check","ts":"1477060182.002513"},{"type":"message","user":"U0XPR4NP4","text":"That was also my assumption.  I would think for gossip to be effective, both sides need to be able initiate connections, but I would expect in most cases, a network link initiated from the ordering service would not be able to contact a peer directly","ts":"1477060276.002514"},{"type":"message","user":"U0ZJZBJLF","text":"isn't it basically a question of scalability + network conditions? If you have a lot of peers (1000) and only a small amount of orderers (i.e BFT) and maybe lots of network hiccups (bad WAN lines), I think gossip can be used even for consenters &lt;---&gt; peers.","edited":{"user":"U0ZJZBJLF","ts":"1477060835.000000"},"ts":"1477060421.002515"},{"type":"message","user":"U0PB67X4K","text":"<@U0ZJZBJLF> - I would assume that you will ALWAYS need some number of peers to be directly connected to the ordering service.  We could then use gossip for those peers to \"re-broadcast\" to nodes which cannot directly reach the ordering service.   As I think I once stated, I thought that one of the assumptions for atomic broadcast was that you actually rebroadcast to other peers you know about the first time you see a message.  I know we are not there yet, but that's how I would see gossip playing in terms of relaying","edited":{"user":"U0PB67X4K","ts":"1477060862.000000"},"ts":"1477060836.002517"},{"type":"message","user":"U0ZJZBJLF","text":"I assume you're saying this only because the consenters don't keep the state, and sending via gossip isn't \"atomic broadcast\"","edited":{"user":"U0ZJZBJLF","ts":"1477061283.000000"},"ts":"1477060900.002519"},{"user":"U13P6TLER","text":"<@U13P6TLER|ozzyatwork> has joined the channel","type":"message","subtype":"channel_join","ts":"1477066805.002523"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZJZBJLF> I always like to go back to 'ordering as a service'.  In this case, I would assume that the peer admin has a peer network on some LAN\/VPN behind firewalls and other access control to keep random people from being able to attack it.  Then, the peer admin punches an outgoing hole in the peer network firewall to the ordering service, so that the peers can connect to it.  It doesn't seem realistic to me to expect the ordering service to be able to connect to the peers in this scenario, in which case the point to point style connections to the orderer with gossip among the peers makes much more sense to me.","edited":{"user":"U0XPR4NP4","ts":"1477069377.000000"},"ts":"1477069350.002524"},{"type":"message","user":"U0ZJZBJLF","text":"well, empirically speaking, if you embed our gossip component in an orderer, it's only a matter of time until the probability-based gossip phase will make the peer connect to the orderer, and then the orderer can gossip to it because the gRPC stream is bidi.","ts":"1477069475.002526"},{"type":"message","user":"U0ZJZBJLF","text":"our communication layer considers a remote peer \"responsive\" if you are connected to it or it is connected to you","edited":{"user":"U0ZJZBJLF","ts":"1477070442.000000"},"ts":"1477069516.002527"},{"type":"message","user":"U0XPR4NP4","text":"I guess I am just not sure what the advantage to gossip is in this scenario?  How is this better than having the a peer probabilistically determine whether it connects point to point to the ordering service, then disseminates via gossip?","ts":"1477070446.002529"},{"type":"message","user":"U0ZJZBJLF","text":"oh, hmmm... I actually really like this idea you just proposed","ts":"1477070522.002530"},{"type":"message","user":"U0ZJZBJLF","text":"wait, isn't that dangerous?","ts":"1477070564.002531"},{"type":"message","user":"U0ZJZBJLF","text":"I assume your \"direct connection to the orderer\" code is the one that ensures atomic broadcast, right?","ts":"1477070605.002532"},{"type":"message","user":"U0XPR4NP4","text":"I'm not following","ts":"1477070646.002533"},{"type":"message","user":"U0ZJZBJLF","text":"what if we're really unlucky, and only 1 peer connected directly (bad coin tosses)? that means everything goes through him","ts":"1477070650.002534"},{"type":"message","user":"U0ZJZBJLF","text":"lets say you have a PBFT orderer","ts":"1477070666.002535"},{"type":"message","user":"U0XPR4NP4","text":"Okay","ts":"1477070676.002536"},{"type":"message","user":"U0ZJZBJLF","text":"and 10 peers and 9 of them said \"I'll connect via gossip\" and only 1 of them connected directly","ts":"1477070698.002537"},{"type":"message","user":"U0ZJZBJLF","text":"when the PBFT sends a transaction, it ensures that 1 peer got it, right? atomic broadcast","edited":{"user":"U0ZJZBJLF","ts":"1477070757.000000"},"ts":"1477070745.002538"},{"type":"message","user":"U0XPR4NP4","text":"No, I think you may be misunderstanding atomic broadcast","ts":"1477070762.002540"},{"type":"message","user":"U0XPR4NP4","text":"Ignore PBFT, because it doesn't really matter.  For an atomic broadcast service, clients can connect in and call `Broadcast` to cause a message to enter the service for ordering.  Other (or the same) clients may call `Deliver` with a specified offset, and receive a stream of ordered messages (in our case, in blocks) starting from that offset, and continuing as they are produced.  The contract from the ordering service, is that everyone gets the same `Deliver` messages, in the same order, regardless of which ordering node the client connected to.","ts":"1477070916.002541"},{"type":"message","user":"U0XPR4NP4","text":"So, in this case, if you have 10 peers, an 9 of them decide to gossip, and only 1 of them decides to connect to the ordering service, if that one has a problem, or decides not to forward things, after some period of time, the 9 would recompute their 'do I connect' logic, and connect to the ordering service with the offset of the first block they don't have, and pull down the stream of blocks, and everything would be fine.","ts":"1477070989.002542"},{"type":"message","user":"U0XPR4NP4","text":"The only real 'danger' would be if the ordering service prunes after some period of time, but given a sufficiently long pruning window, and sufficiently frequent recomputation of 'do I connect' at the peer side, this should be fine.","ts":"1477071031.002543"},{"type":"message","user":"U0ZJZBJLF","text":"\"after some period of time\" - I thought consenters don't keep the ledger inside, how can you be sure that the consensus service kept the parts that were not delivered?","ts":"1477071068.002544"},{"type":"message","user":"U0ZJZBJLF","text":"and, how can the other peers even \"know\" they were supposed to get blocks?","ts":"1477071082.002545"},{"type":"message","user":"U0XPR4NP4","text":"Out of the gate, the ordering service will likely retain the ledger indefinitely.","ts":"1477071093.002546"},{"type":"message","user":"U0ZJZBJLF","text":"oh...I didn't know that.","ts":"1477071110.002547"},{"type":"message","user":"U0XPR4NP4","text":"Eventually, pruning will need to happen, but I would expect for the pruning interval to be weeks or months","ts":"1477071115.002548"},{"type":"message","user":"U0XPR4NP4","text":"Sufficiently long, that the peer network should notice the problem and correct it.","ts":"1477071150.002549"},{"type":"message","user":"U0ZJZBJLF","text":"ok, then all is good. I thought only Kafka has that capability (because it comes with it) and that PBFT won't have the ledger","edited":{"user":"U0ZJZBJLF","ts":"1477071180.000000"},"ts":"1477071164.002550"},{"type":"message","user":"U0XPR4NP4","text":"No, PBFT will definitely have a ledger, and allow seeking","ts":"1477071178.002551"},{"type":"message","user":"U0XPR4NP4","text":"We considered having some rule for \"once it's been delivered, it's okay to prune\"","ts":"1477071188.002553"},{"type":"message","user":"U0XPR4NP4","text":"But that gets very tricky, because that depends on how many faults you want to tolerate at the peer side","ts":"1477071202.002554"},{"type":"message","user":"U0XPR4NP4","text":"And then the orderers must consense about who has delivered what","ts":"1477071218.002555"},{"type":"message","user":"U0XPR4NP4","text":"At the end of the day 'retain it for a long time' is much simpler, and I think much more practical","ts":"1477071233.002556"},{"type":"message","user":"U0ZJZBJLF","text":"ok so what about my other question:\n```\nand, how can the other peers even \"know\" they were supposed to get blocks?\n```","ts":"1477071244.002557"},{"type":"message","user":"U0XPR4NP4","text":"That's a valid question, and one that you could try to solve probabilistically, but  I think the simple answer would be, if I were a peer admin, I would want to ensure that at least one of my peers is connected to the ordering network at all times.","ts":"1477071477.002558"},{"type":"message","user":"U0XPR4NP4","text":"In fact, as you design the gossip network, I wonder if specifying the ability to select 'mandatory peers' would be a good idea","ts":"1477071523.002559"},{"type":"message","user":"U0XPR4NP4","text":"If I administer 10 peers, on a network of 1000 peers.  I want to make sure that each peer is connected to 10 other peers, including 2 of my 10.  For instance.","ts":"1477071556.002560"},{"type":"message","user":"U0ZJZBJLF","text":"I also think that \"privileged peers\" that are always connected to the ordering service and \"peripheral peers\" that are connected via gossip is the way to go","ts":"1477071587.002561"},{"type":"message","user":"U0ZJZBJLF","text":"i.e it can be passed in the configuration","ts":"1477071606.002562"},{"type":"message","user":"U0ZJZBJLF","text":"oh, you're saying that you're trying to minimize the hop count, right? I think what's needed is actually the opposite-  that peers that are connected directly to the ordering service don't pick to disseminate to peers that announce that they are also connected to the ordering service, that way they only forward to peripheral peers. It's actually really easy to incorporate into the existing code :slightly_smiling_face:","edited":{"user":"U0ZJZBJLF","ts":"1477071813.000000"},"ts":"1477071639.002563"},{"type":"message","user":"U0XPR4NP4","text":"Oh, more, that I want to make sure that my peers have up to date information.  And the only way to be sure of this is to ask the orderer.  So, I want to make sure I can ask someone I trust (ie one of my peers) if I missed anything.","ts":"1477071825.002566"},{"type":"message","user":"U0ZJZBJLF","text":"Ok, I got it.","ts":"1477071898.002567"},{"type":"message","user":"U0XPR4NP4","text":"It makes less sense for a large network, but in the 10 node network you describe, I would want to make sure one of my peers is privileged","ts":"1477071901.002568"},{"type":"message","user":"U0ZJZBJLF","text":"what makes less sense? I'd say in a 10 node network, make them all connect to the orderer...","ts":"1477071941.002569"},{"type":"message","user":"U0ZJZBJLF","text":"by the way, I did some thinking about multi-channel support and wrote something in <#C2HHHJCSU|fabric-gossip-dev> , you're more than welcome to take a look and comment if you have the time.","ts":"1477071993.002570"},{"type":"message","user":"U0XPR4NP4","text":"The larger the network, the more I can 'trust it', because there are so many more interests at stake, and therefore it's much harder to censor information to my peers.  In a 10 node network, as you point out, if only 1 peer ends up connecting to the ordering service, and decides to not tell, then we have a problem. [Edit: That is why requiring one of my peers talk to the orderer directly makes less sense in a large network]","edited":{"user":"U0XPR4NP4","ts":"1477072081.000000"},"ts":"1477072011.002571","reactions":[{"name":"white_check_mark","users":["U0ZJZBJLF"],"count":1}]},{"type":"message","user":"U0XPR4NP4","text":"Ah, thanks, so many channels, hard to keep up","ts":"1477072032.002572"},{"type":"message","user":"U0XPR4NP4","text":"And agreed, in a 10 peer network, everyone should simply connect to ordering","ts":"1477072113.002574"},{"type":"message","user":"U0UGH3X7X","text":"and who asked yacov to create <#C2HHHJCSU|fabric-gossip-dev> ?  hmmm ? :innocent:","ts":"1477072161.002575","reactions":[{"name":"upside_down_face","users":["U0ZJZBJLF"],"count":1}]},{"type":"message","user":"U13TWBRBL","text":"<@U0XR6J961> <@U0PB67X4K> <@U0XPR4NP4> <@U0ZJZBJLF> this is somewhat related to discussions above but from slightly different angle. the application would need to make contact with the consensus cloud on the broadcast side (just like peers on the deliver side), for trustworthiness purposes it\u2019d also want to connect to more than one consensus node, preferably f+1. is that accurate?","edited":{"user":"U13TWBRBL","ts":"1477076230.000000"},"ts":"1477076178.002576"},{"type":"message","user":"U13TWBRBL","text":"if so, does it make sense for each org\/enterprise to set up a proxy node to the consensus cloud which will communicate to f+1 consensus nodes and leaves the applications shielded from these concerns?","ts":"1477076196.002577"},{"type":"message","user":"U13TWBRBL","text":"question originated from <https:\/\/jira.hyperledger.org\/browse\/FAB-476>","ts":"1477076217.002578"},{"type":"message","user":"U0PB67X4K","text":"I think you need to be aware of multiple ordering nodes from an availability perspective but don't necessarily need to be connected to a specific number of them.  You of course maintain a list a round robin between them as well.  I think you would want to keep track of whether or not your transactions made it through though - for example if you used one ordering node and detected that some number of transactions were never processed you would want to switch to another node ","ts":"1477076488.002580"},{"type":"message","user":"U0PB67X4K","text":"Well that's my opinion.  I like the idea of round robin approach tho","ts":"1477076536.002581"},{"type":"message","user":"U13TWBRBL","text":"yes, a lot of logic like this sounds like middleware instead of having each application do that","ts":"1477076548.002582"},{"type":"message","user":"U13TWBRBL","text":"such logic (round robin, rotating list) can be built into a proxy node that serves all apps against a consensus cloud for that org\/enterprise","ts":"1477076599.002583"},{"type":"message","user":"U13TWBRBL","text":"(I had the same round-robin idea in my discussion in FAB-476)","ts":"1477076630.002584"},{"type":"message","user":"U0PB67X4K","text":"I guess it would depend on how many apps an enterprise had.  ","ts":"1477076713.002585"},{"type":"message","user":"U0XPR4NP4","text":"With respect to the byzantine attacks, as you point it, our primary concern is censorship, either in not forwarding transactions for ordering, or in not delivering blocks as they are created.  Both of these should be pretty detectable from the client side.  If a peer has not received a block in some amount of time from the consensus service, or if it learns that it's behind relative to other peers, it should try another ordering node.  If a client submits trans to be broadcast and after some period of time, some percentage of them were never processed, it should switch nodes as well.","ts":"1477077034.002586"},{"type":"message","user":"U0MRY2LKY","text":"<@U0XPR4NP4> which ledger would be retained indefinitely? Context being where subledgers are being employed for confidentiality (and whose contents shouldn\u2019t be retained by an orderer service).","attachments":[{"fallback":"[October 21st, 2016 1:31 PM] jyellick: Out of the gate, the ordering service will likely retain the ledger indefinitely.","ts":"1477071093.002546","author_subname":"jyellick","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"Out of the gate, the ordering service will likely retain the ledger indefinitely.","author_name":"Jason Yellick","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/jyellick","author_icon":"https:\/\/secure.gravatar.com\/avatar\/80fccad690b283483c3b5418b8b82b5b.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F272a%2Fimg%2Favatars%2Fava_0026-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1477071093002546","is_share":true,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1477182662.002587"},{"type":"message","user":"U0XPR4NP4","text":"<@U0MRY2LKY> because the subledger goes through ordering, it is like any other chain, and the ordering service must retain it, at the very least until enough peers have received it. Ultimately, we will implement pruning at the orderer, but this is a pending item (and why I say out of the gate, above). Do keep in mind that the ordering service is only retaining the raw blocks, it does not interrogate the block contents to build any sort of state (beyond configuration transactions) ","ts":"1477184723.002588"},{"type":"message","user":"U1AU8DRQR","text":"<@U0XPR4NP4> <@U0XQ35CDD> <@U0Y14MWA2> I just updated this: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1737\/>","edited":{"user":"U1AU8DRQR","ts":"1477298334.000000"},"ts":"1477298317.002589"},{"type":"message","user":"U0UGH3X7X","text":"still having problems re-using a hangout link .... creating a new one here for today's scrum","ts":"1477317681.002591"},{"type":"message","user":"U0XPR4NP4","text":"<@U0UGH3X7X> I think we should be posting the link here regardless","ts":"1477317693.002592"},{"type":"message","user":"U0ZJZBJLF","text":"lol every single time","ts":"1477317696.002593"},{"text":"<@U0XQ35CDD|kostas> has started a Google+ Hangout for this channel. <https:\/\/hangouts.google.com\/hangouts\/_\/2loizp2ln5h4tgrescmnf6r63me|Join Hangout>.","username":"hangouts","bot_id":"B0UKUAJ0Y","type":"message","subtype":"bot_message","ts":"1477317706.002594"},{"text":"<@U0UGH3X7X|tuand> has started a Google+ Hangout for this channel. <https:\/\/hangouts.google.com\/hangouts\/_\/egafrpefmng35dfwqppay2epaqe|Join Hangout>.","username":"hangouts","bot_id":"B0UKUAJ0Y","type":"message","subtype":"bot_message","ts":"1477317707.002595"},{"type":"message","user":"U0XPR4NP4","text":"No point in re-using the link, and we want to make sure anyone who wants to join us is free to","ts":"1477317714.002596"},{"type":"message","user":"U0ZJZBJLF","text":"there are 2 different scrums now","ts":"1477317723.002597"},{"type":"message","user":"U0ZJZBJLF","text":"which one do I join to","ts":"1477317736.002598"},{"type":"message","user":"U0XQ35CDD","text":"Go with Tuan's.","ts":"1477317746.002599"},{"type":"message","user":"U0ZJZBJLF","text":"do you guys see Tuan's hangout link 2nd and kostas's first?","ts":"1477317774.002600"},{"type":"message","user":"U0ZJZBJLF","text":"maybe we can use slack as an ordering service?","ts":"1477317781.002601","reactions":[{"name":"woo","users":["U1AU8DRQR"],"count":1}]},{"type":"message","user":"U0UGH3X7X","text":"ha !","ts":"1477317788.002602"},{"type":"message","user":"U0XQ35CDD","text":"<@U1KDAMDJ7> can you join?","ts":"1477317839.002603"},{"type":"message","user":"U1KDAMDJ7","text":"BRT","ts":"1477317901.002604"},{"type":"message","user":"U0UGH3X7X","text":"FYI ... <https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F2TCND1FY\/move_convergence_changeset_to_master.txt>","ts":"1477327159.002605"},{"type":"message","subtype":"file_mention","text":"<@U0UGH3X7X|tuand> mentioned a file: <https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F2TCND1FY\/move_convergence_changeset_to_master.txt|move_convergence_changeset_to_master.txt>.","file":{"id":"F2TCND1FY","created":1477324156,"timestamp":1477324156,"name":"move_convergence_changeset_to_master.txt","title":"move_convergence_changeset_to_master.txt","mimetype":"text\/plain","filetype":"text","pretty_type":"Plain Text","user":"U0ULK2JPP","editable":true,"size":1091,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2TCND1FY\/move_convergence_changeset_to_master.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2TCND1FY\/download\/move_convergence_changeset_to_master.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F2TCND1FY\/move_convergence_changeset_to_master.txt","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2TCND1FY-8157f21f73","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F2TCND1FY\/move_convergence_changeset_to_master.txt\/edit","preview":"Cheat sheet for moving changes sets from convergence to master\n==============================================================\n\nExample changeset in convergence to be moved to master \n    - https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1633\/ ","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>Cheat sheet for moving changes sets from convergence to master<\/pre><\/div>\n<div><pre>==============================================================<\/pre><\/div>\n<div><pre><\/pre><\/div>\n<div><pre>Example changeset in convergence to be moved to master <\/pre><\/div>\n<div><pre>    - https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1633\/ <\/pre><\/div>\n<\/div>\n<\/div>\n","lines":23,"lines_more":18,"preview_is_truncated":true,"channels":["C0Y4PEU22"],"groups":[],"ims":[],"comments_count":1,"initial_comment":{"id":"Fc2TCYTVGF","created":1477324156,"timestamp":1477324156,"user":"U0ULK2JPP","is_intro":true,"comment":"cheat sheet for bringing changesets from convergence to master <@U0KPFAZNF> <@U0UHG4VP1>","channel":""}},"user":"U0UGH3X7X","ts":"1477327160.002606"},{"type":"message","user":"U1KDAMDJ7","text":"help is needed to verify this change set on a Windows developer workstation: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1935>","ts":"1477328797.002607"},{"type":"message","user":"U0UGH3X7X","text":"luis,  post on <#C0Y4PEU22|fabric> or <#C0YPYBVJM|fabric-dev> ?  I've seen a couple folks ask about couchDB on those channels","ts":"1477328925.002608"},{"type":"message","user":"U0KPFAZNF","text":"<@U1KDAMDJ7>: FYI, if you add a comment \"reverify\" to 1935, it will kick the CI system to run again. ","ts":"1477340470.002609"},{"type":"message","user":"U0KPFAZNF","text":"This particular patch is a candidate for \"ci-skip\" also","ts":"1477340505.002610"},{"type":"message","user":"U0KPFAZNF","text":"That facility works via the commit message","ts":"1477340522.002611"},{"type":"message","user":"U2BGFAHC7","text":"Hi, I\u2019m trying to get a five peer PBFT test rig running. When I do a `peer chaincode deploy` command on `peer-1` I get this in my logs:\n```11:39:19.874 [consensus\/pbft] ProcessEvent -&gt; INFO 02a Replica 0 batch timer expired\n11:39:19.874 [consensus\/pbft] sendBatch -&gt; INFO 02b Creating batch with 1 requests\n11:39:28.853 [consensus\/pbft] ProcessEvent -&gt; INFO 02c Replica 0 view change timer expired, sending view change: new request batch pt7Y3\/r6NmEbFMcknejbmQjcMRbI+3XOPhTN0KqNEf4Xy+\/+yMpKsGW7Xp7VEijXGZDj9gC\/WGUlDwNmCERwSA==\n11:39:28.854 [consensus\/pbft] sendViewChange -&gt; INFO 02d Replica 0 sending view-change, v:1, h:0, |C|:1, |P|:0, |Q|:1\n11:39:28.860 [consensus\/pbft] recvViewChange -&gt; INFO 02e Replica 0 received view-change from replica 0, v:1, h:0, |C|:1, |P|:0, |Q|:1\n11:39:30.860 [consensus\/pbft] sendViewChange -&gt; INFO 02f Replica 0 sending view-change, v:1, h:0, |C|:1, |P|:0, |Q|:1\n11:39:30.861 [consensus\/pbft] recvViewChange -&gt; INFO 030 Replica 0 received view-change from replica 0, v:1, h:0, |C|:1, |P|:0, |Q|:1\n11:39:30.861 [consensus\/pbft] recvViewChange -&gt; WARN 031 Replica 0 already has a view change message for view 1 from replica 0\n11:39:32.861 [consensus\/pbft] sendViewChange -&gt; INFO 032 Replica 0 sending view-change, v:1, h:0, |C|:1, |P|:0, |Q|:1\n11:39:32.862 [consensus\/pbft] recvViewChange -&gt; INFO 033 Replica 0 received view-change from replica 0, v:1, h:0, |C|:1, |P|:0, |Q|:1\n11:39:32.862 [consensus\/pbft] recvViewChange -&gt; WARN 034 Replica 0 already has a view change message for view 1 from replica 0\n11:39:34.863 [consensus\/pbft] sendViewChange -&gt; INFO 035 Replica 0 sending view-change, v:1, h:0, |C|:1, |P|:0, |Q|:1```\nBut no other peer seems to be receiving any view-changes and their logs are empty. Does it look like this peer is sending view-changes to itself?","ts":"1477395924.002612"},{"type":"message","user":"U0ULK2JPP","text":"<@U0XQ35CDD> <https:\/\/jenkins.hyperledger.org\/job\/fabric-verify-x86_64\/2014\/console> not sure if this a one time thing but thought you might want to know...","ts":"1477401476.002613"},{"type":"message","user":"U0ULK2JPP","text":"from <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1977\/>","ts":"1477401519.002614"},{"type":"message","user":"U0XQ35CDD","text":"<@U2BGFAHC7>: The output makes sense, i.e. when counting view-change messages we also consider the one we sent. I am curious though as to why the peer is sending a view-change to vote off itself. How are you naming your peers?","ts":"1477401667.002615"},{"type":"message","user":"U0XQ35CDD","text":"<@U0ULK2JPP>: Thanks for the heads up, will investigate right away. sarama's mock package is not the greatest. ","ts":"1477401715.002616"},{"type":"message","user":"U0XPR4NP4","text":"<@U2BGFAHC7> This looks like <https:\/\/jira.hyperledger.org\/browse\/FAB-707> which is odd looking behavior, but normal [edit: actually, I'm not so convinced, but it's probably still worth reading]","edited":{"user":"U0XPR4NP4","ts":"1477401776.000000"},"ts":"1477401726.002617"},{"type":"message","user":"U2BGFAHC7","text":"``` kubectl get pods\nNAME      READY     STATUS    RESTARTS   AGE\npeer-0    2\/2       Running   0          1h\npeer-1    2\/2       Running   0          1h\npeer-2    2\/2       Running   0          1h\npeer-3    2\/2       Running   0          1h\npeer-4    2\/2       Running   0          1h```\nPeers have a hostname of `peer-0` but a DNS name of peer-0.peer.default.svc.cluster.local","ts":"1477401776.002619"},{"type":"message","user":"U0PB67X4K","text":"what's the peer.id for each?","ts":"1477401800.002620"},{"type":"message","user":"U0XQ35CDD","text":"<@U2BGFAHC7>: I figured. You need to do a vpX name for all.","ts":"1477401812.002621"},{"type":"message","user":"U2BGFAHC7","text":"I\u2019m doing:\n```command: [\"sh\",\"-c\",\"sleep 10;CORE_PEER_ID=$(hostname) CORE_PEER_ADDRESS=$(hostname).peer.default.svc.cluster.local:7051 peer node start\u201d]```","ts":"1477401843.002622"},{"type":"message","user":"U0ZJZBJLF","text":"kostas, you're serious? vp-i is enforced?","ts":"1477401843.002623"},{"type":"message","user":"U0XQ35CDD","text":"i.e.  vp0, vp1, etc.","ts":"1477401853.002624"},{"type":"message","user":"U0PB67X4K","text":"this has been known for a while - this is for v0.6.x","ts":"1477401865.002625"},{"type":"message","user":"U2BGFAHC7","text":"Kubernetes Petsets enforces the hyphen, unfortunately...","ts":"1477401875.002626"},{"type":"message","user":"U0XQ35CDD","text":"<@U0ZJZBJLF>: Yes. A known weakness. ","ts":"1477401882.002627"},{"type":"message","user":"U2BGFAHC7","text":"Wish someone had told me this a week ago :slightly_smiling_face:","ts":"1477401897.002628"},{"type":"message","user":"U0PB67X4K","text":"but its just the peer.id not necessarily is crypto id","ts":"1477401900.002629"},{"type":"message","user":"U0PB67X4K","text":"<@U2BGFAHC7>  - I think I might have a while back - sorry if it was not clear  :wink:","ts":"1477401921.002630"},{"type":"message","user":"U0XQ35CDD","text":"<@U2BGFAHC7>: I can point you to the point in the code where you can maybe play around with the naming scheme and get it to work. ","ts":"1477401928.002631"},{"type":"message","user":"U2BGFAHC7","text":"<@U0XQ35CDD> that would be great :slightly_smiling_face:","ts":"1477401940.002632"},{"type":"message","user":"U0ZJZBJLF","text":"can't you just set CORE_PEER_ID to something else?","ts":"1477401941.002633"},{"type":"message","user":"U0ZJZBJLF","text":"you can derive the name from the hostname","ts":"1477401953.002634"},{"type":"message","user":"U2BGFAHC7","text":"It has to be derived from the hostname, but could maybe do some `sed`-ing.","ts":"1477401963.002635"},{"type":"message","user":"U0ZJZBJLF","text":"yep","ts":"1477401969.002636"},{"type":"message","user":"U0ZJZBJLF","text":"it's better IMO than doing a hacky code change in your stuff that will later might be over-written","ts":"1477401990.002637"},{"type":"message","user":"U0PB67X4K","text":"we just end all our hostnames with -vpX","ts":"1477401997.002638"},{"type":"message","user":"U0PB67X4K","text":"in BMX","ts":"1477401999.002639"},{"type":"message","user":"U2BGFAHC7","text":"So I could have `peer-1-vp1`?","ts":"1477402046.002640"},{"type":"message","user":"U0XQ35CDD","text":"(A sec, while I reboot the laptop.)","ts":"1477402109.002641"},{"type":"message","user":"U0XQ35CDD","text":"<@U2BGFAHC7>: <https:\/\/gerrit.hyperledger.org\/r\/gitweb?p=fabric.git;a=blob;f=consensus\/pbft\/pbft.go;hb=fa02382ab2fde8f767d525a21bbc9fe297f6303e#l91>","ts":"1477402289.002642"},{"type":"message","user":"U0XQ35CDD","text":"You'll notice that it just strips away the first two characters from the handle, expect a `vpX` naming scheme. (lines 94-95)","edited":{"user":"U0XQ35CDD","ts":"1477402358.000000"},"ts":"1477402346.002643"},{"type":"message","user":"U0XQ35CDD","text":"And `getValidatorHandle()` right below will have to be edited accordingly. Let me know if you any help editing those.","ts":"1477402436.002645"},{"type":"message","user":"U2BGFAHC7","text":"<@U0XQ35CDD> Ok, thanks. I can probably munge my peer.id to match that expectation. Made the point in the other channel, that the id scheme is abusable via collisions, maliciously or accidentally. An id derived from some entropy (private key would be best) and a signed HELLO message which contains both the id and a node type probably seems a bit more secure and less prone to mistakes like I\u2019ve been making :slightly_smiling_face:","ts":"1477402556.002646"},{"type":"message","user":"U0XQ35CDD","text":"I agree. This current scheme is a terrible hack, I'm glad it's going away.","ts":"1477402606.002647"},{"type":"message","user":"U2BGFAHC7","text":"I think we have reached consensus :slightly_smiling_face:","ts":"1477402622.002648","reactions":[{"name":"simple_smile","users":["U0XQ35CDD"],"count":1},{"name":"joy","users":["U0PB67X4K"],"count":1}]},{"type":"message","user":"U0XPR4NP4","text":"<@U0UGH3X7X> I just pointed <@U0S5KF44D> to you to talk about the composition of the configuration in the genesis block (and at reconfiguration) so that you guys can coordinate on names and encodings etc.  I think it would be a great idea if you wanted to start a document which describes the assorted configuration objects which will be embedded (both their names and encodings)","ts":"1477404417.002649"},{"type":"message","user":"U0UGH3X7X","text":"thanks Jason !","ts":"1477404464.002650"},{"type":"message","user":"U0UGH3X7X","text":"I started the description in FAB-665 as well","ts":"1477404498.002651"},{"user":"U11RW82PM","text":"<@U11RW82PM|david.acton> has joined the channel","type":"message","subtype":"channel_join","ts":"1477408394.002652"},{"type":"message","user":"U2BGFAHC7","text":"<@U0XQ35CDD> Got it working with:\n```CORE_PEER_ID=$(hostname|sed 's\/peer-\/vp\/\u2018)```\nThanks!\nNext bug :slightly_smiling_face: I\u2019m using remote github urls to test deploying chaincode:\n```peer chaincode deploy -p <https:\/\/github.com\/donovanhide\/chaincode>  -c '{\"Function\":\"init\", \"Args\": []}\u2019```\nBut am getting this in my logs:\n```\n16:13:37.713 [consensus\/pbft] sendBatch -&gt; INFO 028 Creating batch with 1 requests\n16:13:37.959 [consensus\/pbft] executeOne -&gt; INFO 029 Replica 0 executing\/committing request batch for view=0\/seqNo=1 and digest 8h4lIhV7Q1ZHBO1gMN\/Z+dmkscCaDanPNxU9d0J5kC\/XVwgoO9x9BU70Mc2NidVO+akGuPbTKoCeA5Q\/DkZiyw==\n16:13:41.961 [dockercontroller] deployImage -&gt; ERRO 02a Error building images: Tag latest not found in repository <http:\/\/docker.io\/hyperledger\/fabric-baseimage|docker.io\/hyperledger\/fabric-baseimage>\n16:13:41.962 [dockercontroller] deployImage -&gt; ERRO 02b Image Output:\n********************\nStep 1 : FROM hyperledger\/fabric-baseimage\nPulling repository <http:\/\/docker.io\/hyperledger\/fabric-baseimage|docker.io\/hyperledger\/fabric-baseimage>\n\n********************```\nDoes this mean I need to prepare my Docker VM\u2019s for each peer with that image?","edited":{"user":"U2BGFAHC7","ts":"1477412441.000000"},"ts":"1477412426.002653"},{"type":"message","user":"U0XQ35CDD","text":"<@U2BGFAHC7>: Cool, glad you got that one working. That second error is outside my area of expertise unfortunately. Paging <@U0ULK2JPP>.","ts":"1477412502.002656"},{"type":"message","user":"U0XPR4NP4","text":"<@U2BGFAHC7> My understanding is that this image is deliberately not tagged as 'latest' remotely so that older builds do not accidentally grab it.  Instead, the image is tagged as such locally during dev env construction.  <@U0KPFAZNF> I think has limited availability, but I believe he might be the best person to ask.\n\nIf you look at `.\/devenv\/setup.sh` you'll see references to `BASEIMAGE_RELEASE` which I think gets used in the `Makefile` to pick the image source.  (Sorry, this is also not my area of expertise) you might also find some help in <#C0YQ1NHGD|fabric-dev-env>","ts":"1477412999.002657"},{"type":"message","user":"U2BGFAHC7","text":"<@U0XQ35CDD> <@U0XPR4NP4> Thanks! I\u2019ll wait for any other replies here rather than spamming all the channels :slightly_smiling_face:","ts":"1477413065.002658"},{"user":"U294C6FDW","text":"<@U294C6FDW|echenrunner> has joined the channel","type":"message","subtype":"channel_join","ts":"1477413134.002659"},{"type":"message","user":"U0ULK2JPP","text":"<@U2BGFAHC7> how did you build the peer and how are you running it ?","ts":"1477413398.002660"},{"type":"message","subtype":"file_share","text":"<@U2BGFAHC7|donovanhide> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/donovanhide\/F2U12F8P3\/Untitled.yaml|Untitled>","file":{"id":"F2U12F8P3","created":1477413471,"timestamp":1477413471,"name":"Untitled.yaml","title":"Untitled","mimetype":"text\/plain","filetype":"yaml","pretty_type":"YAML","user":"U2BGFAHC7","editable":true,"size":2180,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2U12F8P3\/Untitled.yaml?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2U12F8P3\/download\/Untitled.yaml?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/donovanhide\/F2U12F8P3\/Untitled.yaml","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2U12F8P3-07d225e1e2","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/donovanhide\/F2U12F8P3\/Untitled.yaml\/edit","preview":"# A headless service to create DNS records\r\napiVersion: v1\r\nkind: Service\r\nmetadata:\r\n  name: peer\r","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre><span class=\"cm-comment\"># A headless service to create DNS records<\/span><\/pre><\/div>\n<div><pre><span class=\"cm-atom\">apiVersion<\/span><span class=\"cm-meta\">: <\/span>v1<\/pre><\/div>\n<div><pre><span class=\"cm-atom\">kind<\/span><span class=\"cm-meta\">: <\/span>Service<\/pre><\/div>\n<div><pre><span class=\"cm-atom\">metadata<\/span><span class=\"cm-meta\">:<\/span><\/pre><\/div>\n<div><pre><span class=\"cm-atom\">  name<\/span><span class=\"cm-meta\">: <\/span>peer<\/pre><\/div>\n<\/div>\n<\/div>\n","lines":80,"lines_more":75,"preview_is_truncated":true,"channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U2BGFAHC7","upload":true,"display_as_bot":false,"username":"<@U2BGFAHC7|donovanhide>","bot_id":null,"ts":"1477413472.002661"},{"type":"message","user":"U2BGFAHC7","text":"Each peer is pulling `hyperledger\/fabric-peer:latest` on kubernetes and just running the peer binary","edited":{"user":"U2BGFAHC7","ts":"1477413505.000000"},"ts":"1477413487.002663"},{"type":"message","user":"U0ZJZBJLF","text":"where is it pulling it from?","ts":"1477413554.002665"},{"type":"message","user":"U2BGFAHC7","text":"So when I deploy some chaincode, it is trying to build the docker image on each peer and run it on it\u2019s own docker container that is local. It\u2019s pulling it from <http:\/\/hub.docker.com|hub.docker.com>.","ts":"1477413570.002666"},{"type":"message","user":"U2BGFAHC7","text":"Each petset generates a peer container and a docker container within a \u201cpod\".","ts":"1477413604.002667"},{"type":"message","user":"U2BGFAHC7","text":"Trying to simulate how a topology might work in real life.","ts":"1477413618.002668"},{"type":"message","user":"U294C6FDW","text":"I'm assuming you're running a PBFT network of at least 4 peers ... are you sending transactions to the network after you restarted your peer ? that peer won't know it is lagging unless it is receiving checkpoint messages from the other peers ... we can continue the discussion to <#C0Z4NBUN6|fabric-consensus-dev>","ts":"1477413675.002669"},{"type":"message","user":"U2BGFAHC7","text":"I\u2019m running a PBFT network of 5 peers.","ts":"1477413698.002670"},{"type":"message","user":"U294C6FDW","text":"How do I sent a checkpoint message?   are you testing DR in an event of Validating peer goes down?","ts":"1477413755.002671"},{"type":"message","user":"U2BGFAHC7","text":"<@U294C6FDW> are you addressing me? :slightly_smiling_face:","ts":"1477413781.002672"},{"type":"message","user":"U294C6FDW","text":"yes..","ts":"1477413795.002673"},{"type":"message","user":"U2BGFAHC7","text":"<@U294C6FDW> I have a working PBFT network. I just can\u2019t deploy chaincode, because of the error listed above. The <http:\/\/hub.docker.com|hub.docker.com> image doesn\u2019t have the correct tag, not sure how to work with that.","ts":"1477413912.002674"},{"type":"message","user":"U0XQ35CDD","text":"(<@U294C6FDW>: A checkpoint message is sent automatically every K blocks, where K can be edited in the PBFT `config.yaml`.)","edited":{"user":"U0XQ35CDD","ts":"1477413994.000000"},"ts":"1477413940.002675"},{"type":"message","user":"U2BGFAHC7","text":"The above petset configuration might be unfamiliar. To explain, it starts up 5 pods, each of which has a docker VM container and a fabric peer container. When it tries to build the chaincode docker image on each peer container, I get that error.","ts":"1477414057.002677"},{"type":"message","user":"U294C6FDW","text":"if I change   form    viewchangeperiod: 0   to  1  what impact does it have?","ts":"1477414136.002678"},{"type":"message","user":"U2BGFAHC7","text":"<@U294C6FDW> Is that a question for me?","ts":"1477414213.002679"},{"type":"message","user":"U0ULK2JPP","text":"<@U2BGFAHC7> I ran into issues with building peer due to tagging but rather give you my (homegrown) solution, let us check with <@U1AU8DRQR>","ts":"1477414280.002680"},{"type":"message","user":"U294C6FDW","text":"anybody... thanks","ts":"1477414282.002681"},{"type":"message","user":"U0ULK2JPP","text":"(or <@U11HH3P7Y> \u2026 see you typing)","ts":"1477414328.002682"},{"type":"message","user":"U0XQ35CDD","text":"<@U294C6FDW>: As the instructions in the `config.yaml` state, that means that every K blocks all validating peers will send a view-change request so that they proceed with a new primary\/leader.","ts":"1477414531.002683"},{"type":"message","user":"U0XQ35CDD","text":"You are then effectively rolling with a new primary per K blocks. (Assuming no Byzantine faults in between.)","ts":"1477414585.002684"},{"type":"message","user":"U11HH3P7Y","text":"<@U2BGFAHC7> you should have fabric-baseimage:latest","ts":"1477415033.002685"},{"type":"message","user":"U2BGFAHC7","text":"<@U11HH3P7Y> where? In each of my docker containers? By pulling and then tagging the <http:\/\/hub.docker.com|hub.docker.com> image?","ts":"1477415088.002686"},{"type":"message","user":"U2BGFAHC7","text":"Should explain, I\u2019m using Docker In Docker as a test.","ts":"1477415137.002687"},{"type":"message","user":"U11HH3P7Y","text":"yes","ts":"1477415138.002688"},{"type":"message","user":"U2BGFAHC7","text":"Ok, I can do that. Just wondering why you don\u2019t just tag the <http:\/\/hub.docker.com|hub.docker.com> image? Given the default in the deploy logic is to use `:latest`","edited":{"user":"U2BGFAHC7","ts":"1477415220.000000"},"ts":"1477415193.002689"},{"type":"message","user":"U11HH3P7Y","text":"docker pull hyperledger\/fabric-baseimage:x86_64-0.2.0 or other version tagged in <https:\/\/hub.docker.com\/r\/hyperledger\/fabric-baseimage\/tags\/> and tag with hyperledger\/fabric-baseimage:latest","ts":"1477415225.002691"},{"type":"message","user":"U2BGFAHC7","text":"Just to share some information, <@U1AU8DRQR> pointed to this config line which is probably causing the issue:\n<https:\/\/github.com\/hyperledger\/fabric\/blob\/v0.6\/peer\/core.yaml#L289>","edited":{"user":"U2BGFAHC7","ts":"1477415696.000000"},"ts":"1477415692.002692"},{"type":"message","user":"U11HH3P7Y","text":"could be the reason.. we are not pushing baseimage latest tag to hyperledger docker hub account..","ts":"1477415794.002695"},{"type":"message","user":"U11HH3P7Y","text":"so you pull the baseimage with the tag we have and re-tag with latest","ts":"1477415845.002696"},{"type":"message","user":"U2BGFAHC7","text":"It seems like this is a Go peculiarity though as Java and CAR seem to use explicit tags:\n<https:\/\/github.com\/hyperledger\/fabric\/blob\/v0.6\/peer\/core.yaml#L299>\n<https:\/\/github.com\/hyperledger\/fabric\/blob\/v0.6\/peer\/core.yaml#L307>","edited":{"user":"U2BGFAHC7","ts":"1477415913.000000"},"ts":"1477415908.002697"},{"type":"message","user":"U1AU8DRQR","text":"maybe we should use that arch-... tag for go too","ts":"1477415979.002700"},{"type":"message","user":"U1AU8DRQR","text":"as it seems to be the same as the tags pushed to hub","ts":"1477415990.002701"},{"type":"message","user":"U0XQ35CDD","text":"<@U0ULK2JPP> (I figured out what the issue is by the way, working on a fix now.)","ts":"1477417270.002702"},{"type":"message","user":"U0ULK2JPP","text":"<@U0XQ35CDD> thanks much","ts":"1477417293.002703"},{"user":"U2HG2LQH4","text":"<@U2HG2LQH4|grbulat> has joined the channel","type":"message","subtype":"channel_join","ts":"1477417472.002704"},{"user":"U2U1GAVL3","text":"<@U2U1GAVL3|senthil> has joined the channel","type":"message","subtype":"channel_join","ts":"1477421297.002705"},{"type":"message","user":"U2BGFAHC7","text":"Anyone had issues with the building of chaincode being incredibly slow?\n```19:43:58.136 [consensus\/pbft] ProcessEvent -&gt; INFO 027 Replica 0 batch timer expired\n19:43:58.136 [consensus\/pbft] sendBatch -&gt; INFO 028 Creating batch with 1 requests\n19:43:58.373 [consensus\/pbft] executeOne -&gt; INFO 029 Replica 0 executing\/committing request batch for view=0\/seqNo=1 and digest HjKuvhOoO7kuwpNAUDLpRuLIi\/zLmBJr2xvZENIbzDlzFVYS4hRTZVLGH8P0U+qaXe+CWx6n068bhEwtvzVfew==\n20:11:30.383 [consensus\/pbft] execDoneSync -&gt; INFO 02a Replica 0 finished execution 1, trying next```\nIt\u2019s taken 28ish minutes to do the first part of the docker image build! I\u2019m running 5 peers on 3x3.75GB Google Cloud boxes. Must be doing something wrong :slightly_smiling_face:","ts":"1477426692.002706"},{"type":"message","user":"U0XPR4NP4","text":"<@U2BGFAHC7> I have not, though as you see, the transaction makes it through consensus to the `executing\/committing` phase, so you might want to try on <#C0YPYBVJM|fabric-dev> to reach a broader audience","ts":"1477426876.002707"},{"type":"message","user":"U2BGFAHC7","text":"Okay, thanks, will re-post!","ts":"1477426919.002708"},{"type":"message","user":"U0XR6J961","text":"hi","ts":"1477480088.002709"},{"type":"message","user":"U0PB67X4K","text":"hey <@U0XR6J961> - only a few days left for you?","ts":"1477480450.002710"},{"type":"message","user":"U0XR6J961","text":"no, more than a month left","ts":"1477480462.002711"},{"type":"message","user":"U0PB67X4K","text":"ah - end of Nov?","ts":"1477480468.002712"},{"type":"message","user":"U0XR6J961","text":"yep","ts":"1477480471.002713"},{"type":"message","user":"U0PB67X4K","text":"ah - good","ts":"1477480481.002714"},{"type":"message","user":"U0XR6J961","text":"trying to get a picture what has happened","ts":"1477480485.002715"},{"type":"message","user":"U0PB67X4K","text":"I'll let <@U0XPR4NP4> and\/or <@U0XQ35CDD>   fill you in w.r.t consensus, but the biggest thing that has happened recently is that `feature\/convergence` has been sunset and all the latest and greatest code is in `master` now","ts":"1477480606.002716"},{"type":"message","user":"U0XR6J961","text":"so we merged it?","ts":"1477480627.002717"},{"type":"message","user":"U0PB67X4K","text":"and <@U0ULK2JPP> did a great job starting to get rid of a bunch of old code in master as well","ts":"1477480640.002718"},{"type":"message","user":"U0XR6J961","text":"great","ts":"1477480646.002719"},{"type":"message","user":"U0PB67X4K","text":"so progress has been made in the right direction","ts":"1477480662.002720"},{"type":"message","user":"U0ZJZBJLF","text":"welcome back simon","ts":"1477486904.002721"},{"type":"message","user":"U0XR6J961","text":"hi yacovm","ts":"1477486914.002722"},{"type":"message","user":"U0XR6J961","text":"how's gossip going","ts":"1477486918.002723"},{"type":"message","user":"U0ZJZBJLF","text":"I think I'll push the rest of the code by end of this week","ts":"1477486951.002724"},{"type":"message","user":"U0XR6J961","text":"cool","ts":"1477486987.002725"},{"type":"message","user":"U0ZJZBJLF","text":"There is also a state-transfer layer on top of gossip, we haven't connected it yet but it shouldn't be a problem.\nA person in my squad is working on integrating it with the fabric as we speak, but he can't run it until I solve a certain bug ( I know how, coding it)","edited":{"user":"U0ZJZBJLF","ts":"1477487054.000000"},"ts":"1477487033.002726"},{"type":"message","user":"U0UGH3X7X","text":"hi simon, hope you had a good couple weeks off","ts":"1477487145.002728"},{"type":"message","user":"U0XR6J961","text":"i got a bit sick on amtrack - stuck air conditioner","ts":"1477487170.002729"},{"type":"message","user":"U0XR6J961","text":"and boy these transatlantic flights are tiring","ts":"1477487185.002730"},{"type":"message","user":"U0UGH3X7X","text":"you were in US ?","ts":"1477487197.002731"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1477487201.002732"},{"type":"message","user":"U0XR6J961","text":"KS and IL","edited":{"user":"U0XR6J961","ts":"1477487217.000000"},"ts":"1477487213.002733"},{"type":"message","user":"U0PB67X4K","text":"<@U0XR6J961> - welcome to my life  :wink:    flying is for the birds","ts":"1477487236.002735"},{"type":"message","user":"U0UGH3X7X","text":"we should have had a squad meetup where you went :slightly_smiling_face:","ts":"1477487264.002736"},{"type":"message","user":"U0XR6J961","text":"trucking everybody to chicago?","ts":"1477487330.002737"},{"type":"message","user":"U0XR6J961","text":":slightly_smiling_face:","ts":"1477487332.002738"},{"type":"message","user":"U0PB67X4K","text":"I was in Chicago 2 weeks ago - no call?   just kidding","ts":"1477487370.002739"},{"type":"message","user":"U0UGH3X7X","text":"so simon, you should catch up with <@U1AU8DRQR> if you haven't done so","ts":"1477487548.002740"},{"type":"message","user":"U0UGH3X7X","text":"we decided to prioritize kafka as the first orderer  so <@U0XQ35CDD> is working on that","ts":"1477487621.002741"},{"type":"message","user":"U0XR6J961","text":"i am talking with gabor, yes","ts":"1477487635.002742"},{"type":"message","user":"U0XR6J961","text":"only kostas?","ts":"1477487644.002743"},{"type":"message","user":"U0UGH3X7X","text":"lots of discussion regarding bootstrap and policies and multi-channels , <@U0XPR4NP4> is handling the policy mgr among other things","ts":"1477487699.002744"},{"type":"message","user":"U0UGH3X7X","text":"the multi-channel discussion is summarized here <https:\/\/wiki.hyperledger.org\/community\/fabric-design-docs>","ts":"1477487723.002745"},{"type":"message","user":"U0UGH3X7X","text":"and in jira epic whose number escapes me at present","ts":"1477487757.002746"},{"type":"message","user":"U0UGH3X7X","text":"bootstrapping is in fab-359","ts":"1477487778.002747"},{"type":"message","user":"U0UGH3X7X","text":"kostas and luis","ts":"1477487787.002748"},{"type":"message","user":"U0UGH3X7X","text":"i'm helping out on bootstrapping, so is jeff","ts":"1477487815.002749"},{"type":"message","user":"U0XR6J961","text":"configuration change policies you mean?","ts":"1477487818.002750"},{"type":"message","user":"U0UGH3X7X","text":"right","ts":"1477487825.002751"},{"type":"message","user":"U0XR6J961","text":"so the kafka orderer is working?","ts":"1477487838.002752"},{"type":"message","user":"U0UGH3X7X","text":"kostas is working out issues for the shim between kafka and peer  ... i'll let him say how it's currently working","ts":"1477487923.002753"},{"type":"message","user":"U0XR6J961","text":"i'm just asking because if kafka is the main focus we should probably get kafka into working state instead of thinking about reconfig which is several months out","ts":"1477488163.002754"},{"type":"message","user":"U0UGH3X7X","text":"np,  we're looking at config policies for bootstrap and multi-channel,  just happens that reconfig can reuse the same protobufs\/code","ts":"1477488320.002755"},{"type":"message","user":"U0UGH3X7X","text":"there's also another discussion with <@U1BC5A0F9> and <@U0ZR63HLK> on access control but I haven't been keeping up","ts":"1477488423.002756"},{"type":"message","user":"U0XR6J961","text":"so what happened with keith's bootstrapping stuff?","ts":"1477488566.002757"},{"type":"message","user":"U1BC5A0F9","text":"<@U0UGH3X7X> we will be posting updates on the access control soonish","edited":{"user":"U1BC5A0F9","ts":"1477488856.000000"},"ts":"1477488807.002758","reactions":[{"name":"+1","users":["U0UGH3X7X"],"count":1}]},{"type":"message","user":"U1BC5A0F9","text":"hopefully later today :slightly_smiling_face:","ts":"1477488818.002759"},{"type":"message","user":"U0UGH3X7X","text":"the full story in the comments of fab-359 ... short version is we manually create a genesis block containing orderer certs, peer CA certs, default policies &amp; orderer config. Orderer read that genesis block in and start the chain.  orderer allow peer to connect if using a CA cert listed in genesis block","ts":"1477488851.002761"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1477488941.002763"},{"type":"message","user":"U0XR6J961","text":"and modification of the config is done via the policy","ts":"1477488968.002764"},{"type":"message","user":"U0UGH3X7X","text":"ya","ts":"1477488983.002765"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> Reconfig is not as far out as you think, since the orderer needs to do ACL enforcement, and ACLs may change.","ts":"1477490265.002766"},{"type":"message","user":"U0XR6J961","text":"is the ACL still what you proposed?","ts":"1477490333.002767"},{"type":"message","user":"U0XPR4NP4","text":"The SignaturePolicy stuff got merged, though the layer which utilizes it is still sitting out there in Gerrit","ts":"1477490400.002768"},{"type":"message","user":"U0XPR4NP4","text":"For the config layer, I made the policy type a 'oneof' so that we can easily swap in some policy which isn't that 'trivial signature DSL' if someone comes up with something better","ts":"1477490439.002769"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1477490702.002770"},{"type":"message","user":"U0XR6J961","text":"tho i think this will go a long way","ts":"1477490709.002771"},{"type":"message","user":"U0XPR4NP4","text":"That is my hope.  At the very least, it should allow us to move forward until someone finds a deficiency it cannot address","ts":"1477491426.002772"},{"type":"message","user":"U0PB67X4K","text":"that was my take which is why I figured we should merge it now and give it a go","ts":"1477492680.002773"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> I'm unsure why you dislike the orderer pruning approach of 'prune at config txs'.  This seems extremely elegant to me.  If a config tx contains all the chain config, then the whole chain going forward can be verified by policy, and the whole network can bootstrap based on that config.  What am I missing?","ts":"1477496381.002774"},{"type":"message","user":"U0XR6J961","text":"i guess that could work, but i think that pruning is antithetical to a block chain","ts":"1477496448.002775"},{"type":"message","user":"U0XR6J961","text":"somebody needs to keep around a non-pruned chain","ts":"1477496470.002776"},{"type":"message","user":"U0XR6J961","text":"not for the orderer, but for the application using the chain","ts":"1477496488.002777"},{"type":"message","user":"U0XPR4NP4","text":"Definitely, the application needs to retain these forever, there is no way around that.","ts":"1477496548.002778"},{"type":"message","user":"U0XPR4NP4","text":"I was purely thinking 'orderer pruning'","ts":"1477496570.002779"},{"type":"message","user":"U0XPR4NP4","text":"Especially for the as a service case.","ts":"1477496584.002780"},{"type":"message","user":"U0XPR4NP4","text":"My other thought too was, bootstrapping a new peer, give them the latest config block, then it can bootstrap based on that to know about who is a member of the peer network, pull new blocks from ordering, and pull old ones from peers","ts":"1477496628.002781"},{"type":"message","user":"U0XR6J961","text":"ok","ts":"1477496717.002782"},{"type":"message","user":"U0XR6J961","text":"so i'm working on the hello on connect","ts":"1477498031.002783"},{"type":"message","user":"U0ZJZBJLF","text":"what hello on connect?","ts":"1477498043.002784"},{"type":"message","user":"U0ZJZBJLF","text":"If I may ask?","ts":"1477498047.002785"},{"type":"message","user":"U0XR6J961","text":"when replicas reconnect, they exchange information to allow the one that is behind to get up to speed","ts":"1477498075.002786"},{"type":"message","user":"U0ZJZBJLF","text":"you're talking about the peer or something else here?","ts":"1477498094.002787"},{"type":"message","user":"U0XR6J961","text":"no, i don't care about the peer","ts":"1477498104.002788"},{"type":"message","user":"U0XR6J961","text":"consensus","ts":"1477498108.002789"},{"type":"message","user":"U0ZJZBJLF","text":"oh ok","ts":"1477498110.002790"},{"type":"message","user":"U0ZJZBJLF","text":"was alarmed, because:\n1) I submitted a PR that is related to hello messages on connections, and:\n2) The gossip is going to be used to sync peers \nWanted to make sure we don't step on each others feet","ts":"1477498166.002791"},{"type":"message","user":"U0XR6J961","text":"yea, no peer messages","ts":"1477498184.002792"},{"type":"message","user":"U0XR6J961","text":"now the thing is that we may be in a different view by now","ts":"1477498226.002793"},{"type":"message","user":"U0XR6J961","text":"and the question is, who sends the new view message?","ts":"1477498234.002794"},{"type":"message","user":"U0XR6J961","text":"only the primary?","ts":"1477498238.002795"},{"type":"message","user":"U0XR6J961","text":"what if we can't connect to the primary?","ts":"1477498243.002796"},{"type":"message","user":"U0XR6J961","text":"all replicas?","ts":"1477498250.002797"},{"type":"message","user":"U0XR6J961","text":"then we receive a lot of data","ts":"1477498257.002798"},{"type":"message","user":"U0XPR4NP4","text":"I almost feel like handshake should be two phase","ts":"1477498360.002799"},{"type":"message","user":"U0XR6J961","text":"yea but then it requires state","ts":"1477498394.002800"},{"type":"message","user":"U0XR6J961","text":"and becomes synchronous","ts":"1477498404.002801"},{"type":"message","user":"U0XPR4NP4","text":"Hmmm, so, my thought was that because we have signed blocks, we can play state forward now.  On hello, everyone advertises their block height, and those who are behind can ask for those blocks.  If they request the blocks from someone who advertised a blockheight and they do not reply, or reply with bad blocks, then you know that advertisement was from a byzantine replica and move on","ts":"1477498496.002802"},{"type":"message","user":"U0XR6J961","text":"sure, that's state transfer","ts":"1477498545.002803"},{"type":"message","user":"U0XPR4NP4","text":"Once the non-faulty replicas are all at the same block height, things seem fairly easy?","ts":"1477498548.002804"},{"type":"message","user":"U0XR6J961","text":"i assume that's handled","ts":"1477498552.002805"},{"type":"message","user":"U0XR6J961","text":"i need to sync the view","ts":"1477498567.002806"},{"type":"message","user":"U0XR6J961","text":"this needs review: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2025\/>","ts":"1477501323.002807"},{"type":"message","user":"U0XR6J961","text":"so does this: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2037\/>","ts":"1477501433.002808"},{"type":"message","user":"U0XPR4NP4","text":"Done","ts":"1477503012.002809"},{"type":"message","user":"U0UGH3X7X","text":"which changeset has `<http:\/\/github.com\/hyperledger\/fabric\/orderer\/common\/configtx|github.com\/hyperledger\/fabric\/orderer\/common\/configtx>` ?","ts":"1477508126.002810"},{"type":"message","user":"U0XQ35CDD","text":"<@U0UGH3X7X>: This one? <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1959\/>","ts":"1477508260.002811"},{"type":"message","user":"U0UGH3X7X","text":"that's the one ...  thanks kostas","ts":"1477508351.002812"},{"type":"message","user":"U0XQ35CDD","text":"Sure thing.","ts":"1477508398.002813"},{"type":"message","user":"U0UGH3X7X","text":"reading changeset 1817  which has a reference to configtx","ts":"1477508434.002814"},{"type":"message","user":"U0XPR4NP4","text":"I realized that when I re-submitted the changesets to master, I hadn't added anyone back as reviewers, so you may have just gotten quite a bit of spam as I fixed that up, apologies.","ts":"1477508669.002815","reactions":[{"name":"sunglasses","users":["U0UGH3X7X"],"count":1}]},{"type":"message","user":"U0PB67X4K","text":"do I need to go over your code with a fine tooth comb?  :wink:","ts":"1477510220.002816"},{"user":"U2ULY35GX","text":"<@U2ULY35GX|bsm117532> has joined the channel","type":"message","subtype":"channel_join","ts":"1477512762.002817"},{"type":"message","user":"U0XPR4NP4","text":"Apparently adding that comment on `Evaluate` to an earlier changeset caused merge conflicts all down the line, so had to rebase, sorry about that","ts":"1477513546.002818","reactions":[{"name":"white_frowning_face","users":["U0PB67X4K"],"count":1}]},{"type":"message","user":"U0XR6J961","text":"jyellick: any particular reason why you didn't +2 the changesets you reviewed?","ts":"1477555946.002819"},{"type":"message","user":"U0XR6J961","text":"also no need to -1 if verified fails","ts":"1477555979.002820"},{"type":"message","user":"U2DHRR4TE","text":"dumb question but the mockstub, does this work for fabric 0.5","ts":"1477556259.002821"},{"type":"message","user":"U0XR6J961","text":"where what?","ts":"1477556341.002822"},{"user":"U2UT57Y6Q","text":"<@U2UT57Y6Q|nitin> has joined the channel","type":"message","subtype":"channel_join","ts":"1477560767.002823"},{"type":"message","user":"U0UGH3X7X","text":"scrum hangout ...","ts":"1477576712.002824"},{"text":"<@U0UGH3X7X|tuand> has started a Google+ Hangout for this channel. <https:\/\/hangouts.google.com\/hangouts\/_\/wh7v7zj4avfpvj4nrtahlf5ajie|Join Hangout>.","username":"hangouts","bot_id":"B0UKUAJ0Y","type":"message","subtype":"bot_message","ts":"1477576743.002825"},{"type":"message","user":"U0UGH3X7X","text":"<@U0XR6J961> ?","ts":"1477576831.002826"},{"type":"message","user":"U0UGH3X7X","text":"<@U1AU8DRQR> ?","ts":"1477576840.002827"},{"type":"message","user":"U0UGH3X7X","text":"@yacov ?","ts":"1477576852.002828"},{"type":"message","user":"U0UGH3X7X","text":"<@U0ZJZBJLF> ?","ts":"1477576859.002829"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> Since the build was failing, did not want to +2 (agree, maybe the -1 was unnecessary), and I commented as to why on <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2025\/> the commit message does not contain a JIRA reference, and could be a bit more informative (Just following what I have seen from other reviewers here, have had my changesets not +2-ed for this reason)","edited":{"user":"U0XPR4NP4","ts":"1477576890.000000"},"ts":"1477576864.002830"},{"type":"message","user":"U0ZJZBJLF","text":"yes?","ts":"1477576866.002831"},{"type":"message","user":"U0ZJZBJLF","text":"sorry","ts":"1477576873.002832"},{"type":"message","user":"U0ZJZBJLF","text":"all the squad are in my room atm, they distracted me :slightly_smiling_face:","edited":{"user":"U0ZJZBJLF","ts":"1477576898.000000"},"ts":"1477576889.002833"},{"type":"message","user":"U1HFNJB50","text":"<@U0ZJZBJLF> oh, here we start with excuses.","ts":"1477577032.002836","reactions":[{"name":"laughing","users":["U0ZJZBJLF"],"count":1}]},{"type":"message","user":"U0XQ35CDD","text":"<@U0UKTPMG8> Can you remind me what is your suggestion w\/r\/t multiple channels and their respective Broadcast\/Deliver streams?","ts":"1477577378.002837"},{"type":"message","user":"U0XQ35CDD","text":"I'm stubbing out support for this now","ts":"1477577395.002838"},{"type":"message","user":"U0UKTPMG8","text":"<@U0XQ35CDD> I would think it may be simpler to use a different port for each channel at first","ts":"1477579059.002839"},{"type":"message","user":"U0UKTPMG8","text":"could always consolidate if necessary","ts":"1477579092.002840"},{"type":"message","user":"U0XQ35CDD","text":"<@U0UKTPMG8>: A different port for the connection between the gRPC client (the peer) and the gRPC server (the shim)?","ts":"1477579610.002841"},{"type":"message","user":"U0UKTPMG8","text":"yes, not sure how else you could serve the same service over the same port with GRPC","ts":"1477579786.002842"},{"type":"message","user":"U0XQ35CDD","text":"Well, we could do it all on the same port, and add logic on both the client and the server that filters on the channel ID. (But I remember the concern about resource starvation when multiplexing.)","edited":{"user":"U0XQ35CDD","ts":"1477579984.000000"},"ts":"1477579909.002843"},{"type":"message","user":"U0XQ35CDD","text":"Let's Hangout real quick if you have time?","ts":"1477579949.002844"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XQ35CDD> <@U0UKTPMG8> I don't understand the resource starvation when multiplexing a broadcast.  It is a client, if it wants to try to resource starve itself, who cares? With respect to deliver, we simply update the `SeekInfo` to specify a chainID, and then invoke multiple delivers at the client side.  What am I missing?","ts":"1477580293.002846"},{"type":"message","user":"U0XQ35CDD","text":"This is what I'm trying to figure out?","ts":"1477580361.002847"},{"type":"message","user":"U0XPR4NP4","text":"Sorry, I meant the question to be targeted at Jeff, just calling your attention to it","ts":"1477580458.002848"},{"type":"message","user":"U0UKTPMG8","text":"I was concerned about the orderer side wrt to QoS","ts":"1477580948.002849"},{"type":"message","user":"U0UKTPMG8","text":"does that make sense?  <@U0XPR4NP4>","ts":"1477581035.002850"},{"type":"message","user":"U0XPR4NP4","text":"I'm afraid it does not","ts":"1477581051.002851"},{"type":"message","user":"U0UKTPMG8","text":"hangout with Kostas?","ts":"1477581060.002852"},{"type":"message","user":"U0XPR4NP4","text":"Sure","ts":"1477581066.002853"},{"text":"<@U0UKTPMG8|jeffgarratt> has started a Google+ Hangout for this channel. <https:\/\/hangouts.google.com\/hangouts\/_\/23s7hw2frjasllzi4jex6cpu4ee|Join Hangout>.","username":"hangouts","bot_id":"B0UKUAJ0Y","type":"message","subtype":"bot_message","ts":"1477581076.002854"},{"text":"<@U0XQ35CDD|kostas> has started a Google+ Hangout for this channel. <https:\/\/hangouts.google.com\/hangouts\/_\/6uvwjvozorejhhwqkzhttcmkrme|Join Hangout>.","username":"hangouts","bot_id":"B0UKUAJ0Y","type":"message","subtype":"bot_message","ts":"1477581078.002855"},{"text":"<@U0XPR4NP4|jyellick> has started a Google+ Hangout for this channel. <https:\/\/hangouts.google.com\/hangouts\/_\/4ugq4lgfuzc3bmtwwbz52otonqe|Join Hangout>.","username":"hangouts","bot_id":"B0UKUAJ0Y","type":"message","subtype":"bot_message","ts":"1477581079.002856"},{"type":"message","user":"U0XPR4NP4","text":"Wow...","ts":"1477581100.002857"},{"type":"message","user":"U0UGH3X7X","text":"you guys ...","ts":"1477581102.002858"},{"type":"message","user":"U0UKTPMG8","text":":wink:","ts":"1477581104.002859"},{"type":"message","user":"U0UKTPMG8","text":"join hasons?","ts":"1477581107.002860"},{"type":"message","user":"U0UKTPMG8","text":"jasons","ts":"1477581110.002861"},{"type":"message","user":"U0ULK2JPP","text":":slightly_smiling_face:","ts":"1477581110.002862"},{"type":"message","user":"U0ULK2JPP","text":"I\u2019ll stay away and focus on using the new protos integration :slightly_smiling_face:","ts":"1477581137.002863"},{"type":"message","user":"U0ULK2JPP","text":"last thing I want to do is join 3 hangouts :wink:","ts":"1477581151.002864"},{"type":"message","user":"U0UKTPMG8","text":"on Jasons :slightly_smiling_face:","ts":"1477581193.002865"},{"type":"message","user":"U0ULK2JPP","text":"haha \u2026 indeed :slightly_smiling_face:","ts":"1477581781.002866"},{"type":"message","user":"U0XQ35CDD","text":"In the Kafka case, do we want the addition of a new orderer to refer to (a) another shim, (b) a Kafka broker, or (c) either\/or, or (d) always both?","edited":{"user":"U0XQ35CDD","ts":"1477585391.000000"},"ts":"1477585346.002867"},{"type":"message","user":"U0XQ35CDD","text":"The more I think about it, the more I think that (c) is the way to go.","ts":"1477585428.002869"},{"type":"message","user":"U0XPR4NP4","text":"Instinctivey I would say (a), though (c) provides a convenient mechanism to reconfigure shims.  I would say not (b) and not (d).","ts":"1477587115.002870"},{"type":"message","user":"U0PB67X4K","text":"c)","ts":"1477587719.002871"},{"type":"message","user":"U0PB67X4K","text":"minimally a)","ts":"1477587731.002872"},{"type":"message","user":"U0PB67X4K","text":"Sorry - MVP would need to do c) but I think we could start with a)","ts":"1477587767.002873"},{"type":"message","user":"U0PB67X4K","text":"for adding Kafka brokers, we should be able to leverage Kafka capabilities.  For a) there is work on our side","ts":"1477587797.002874"},{"type":"message","user":"U0XQ35CDD","text":"Alright, so same page here. And that is indeed the plan with Kafka brokers, (but I need to add support for Metadata requests to the code).","ts":"1477587916.002875"},{"type":"message","user":"U0XQ35CDD","text":"Some thoughts before I turn this into a JIRA issue.","ts":"1477597906.002876"},{"type":"message","user":"U0XQ35CDD","text":"We need TLS connections between the shims and the Kafka brokers.","ts":"1477598130.002877"},{"type":"message","user":"U0XQ35CDD","text":"But there's no API to set the Kafka ACLs (note: this is different than the ACLs that _we_ have been talking about so far; these are maintained on the shim level).","ts":"1477598170.002878"},{"type":"message","user":"U0XQ35CDD","text":"The way you update Kafka ACLs is by executing a script.","ts":"1477598185.002879"},{"type":"message","user":"U0XQ35CDD","text":"So every time we add\/remove a shim, we'll need to execute this script.","ts":"1477598220.002880"},{"type":"message","user":"U0XQ35CDD","text":"Sounds a bit flaky, but wanted to check if there are any thoughts or alternative approaches to it.","ts":"1477598252.002881"},{"type":"message","user":"U0PB67X4K","text":"<@U0XQ35CDD> - just to clarify - on the Kafka broker side - we want to:\n\n1) Require TLS\n2) Require client authentication between the shim(s) and Kafka\n\n\nDo we want to explicitly limit access to Kafka topics or are you good with allowing any authenticated client (e.g. Shims) to do anything?","ts":"1477598558.002882"},{"type":"message","user":"U0XQ35CDD","text":"At the risk of missing something, I'd say I'm good with allowing any authenticated shim to do anything.","ts":"1477598599.002883"},{"type":"message","user":"U0XPR4NP4","text":"I agree, I see no reason for restriction","ts":"1477598656.002884"},{"type":"message","user":"U0PB67X4K","text":"OK - cool.  So if we:\n\n1) Only enable the TLS (SSL in Kafka terms) listener on Kafka\n2) We require client certificates\n3) Then we should be able to simply configure Kafka brokers with a list of CAs to trust","ts":"1477598874.002885"},{"type":"message","user":"U0XQ35CDD","text":"But if these CAs change, then the `kafka-acls.sh` script needs to be executed. That's what I'm getting at.","ts":"1477598921.002886"},{"type":"message","user":"U0PB67X4K","text":"well I did not think that that script actually deals with the truststore - although given the truststore is going to be a Java Key Store, you'll still need a script to add \/ remove trusted certificates from there","ts":"1477599251.002887"},{"type":"message","user":"U0PB67X4K","text":"I think we can avoid Kafka ACLs with TLS client authentication only, but you'll need to be able to modify the keystore","ts":"1477599287.002888"},{"type":"message","user":"U0PB67X4K","text":"and I am not sure if it is statically loaded at runtime","ts":"1477599305.002889"},{"type":"message","user":"U0PB67X4K","text":"Does the Go Kafka client support any of the SASL mechanisms?","ts":"1477599326.002890"},{"type":"message","user":"U0KN2SSKE","text":"<@U0XQ35CDD> is it possible to config brokers to accept only local connections so that we would force shim to be on the same box\/vm?","ts":"1477599409.002891"},{"type":"message","user":"U0KN2SSKE","text":"and would that be good enough to remove the requirement of ssl?","ts":"1477599429.002892"},{"type":"message","user":"U0PB67X4K","text":"you need to have TLS in any case for broker to broker communcation","ts":"1477599609.002893"},{"type":"message","user":"U0PB67X4K","text":"same listener(s)","ts":"1477599622.002894"},{"type":"message","user":"U0XQ35CDD","text":"<@U0KN2SSKE>: Gari's correct, you'll need TLS for comms between brokers.","edited":{"user":"U0XQ35CDD","ts":"1477605598.000000"},"ts":"1477605592.002895"},{"type":"message","user":"U0XQ35CDD","text":"<@U0PB67X4K>: I looked it up and you are correct that the `kafka-acls.sh` script does _not_ modify the truststore.","edited":{"user":"U0XQ35CDD","ts":"1477605677.000000"},"ts":"1477605665.002897"},{"type":"message","user":"U0XQ35CDD","text":"But yeah you'll need a script to manage it nonetheless, so we're back to square one.","ts":"1477605692.002899"},{"type":"message","user":"U0XQ35CDD","text":"The library that we are using does support SASL, but I am not familiar with the underlying mechanism. Should I be looking into it? (And is there a one-liner as to what makes it better?)","ts":"1477605751.002900"},{"type":"message","user":"U0PB67X4K","text":"<@U0XQ35CDD> - nothing inherently makes it \"better\" - they chose SASL because its a pluggable authentication layer.  They support Kerberos and Plain (username \/ password) SASL mechanisms today.  I think there is some flexibility in adding usernames \/ password (the BMX Message Hub use the Plain mechanism and I think they are able to easily add credentials programmatically)","ts":"1477607272.002901"},{"type":"message","user":"U0PB67X4K","text":"I am not sure if Kafka would reload the keystore if it is modified either - likely it does - and there are utilities (key tool) which can be used from the command line \/ exec functions to add certs as well","ts":"1477607338.002902"},{"type":"message","user":"U0PB67X4K","text":"so TLS with client certificates and this utility might be straightforward.  There may even be key tool source out there (likely C) so perhaps you can just link it in to the shim as well","ts":"1477607397.002903"},{"type":"message","user":"U0XR6J961","text":"somehow i need to stay \"inactive\" when restarting\/reconnecting, or i might believe that i'm the primary of a view that has passed","ts":"1477653877.002904"},{"type":"message","user":"U0XR6J961","text":"i can sort of work around this by waiting for a (stored) new view message from a replica","ts":"1477653920.002905"},{"type":"message","user":"U0XR6J961","text":"but how do i deal with the initial start?","ts":"1477653934.002906"},{"type":"message","user":"U0XR6J961","text":"special code the situation that we don't have a stored new-view message and we are replica 0, therefore we are in view 0?","ts":"1477653959.002907"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> What about bootstrapping with a constructed 'new-view' message in the log?","ts":"1477660084.002908"},{"type":"message","user":"U1AU8DRQR","text":"<@U0XPR4NP4> it would be good if you could have a look at these: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2037\/> , <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2065\/>","ts":"1477660185.002909"},{"type":"message","user":"U0XPR4NP4","text":"<@U1AU8DRQR> I'll take a look","ts":"1477660257.002910"},{"type":"message","user":"U1AU8DRQR","text":"thanks","ts":"1477660268.002911"},{"type":"message","user":"U0XPR4NP4","text":"Replied with a couple comments, mostly looks good though","ts":"1477661666.002912"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XR6J961> I know you have been waiting for this one :wink: <https:\/\/jira.hyperledger.org\/browse\/FAB-897>","ts":"1477668936.002913"},{"type":"message","user":"U0XR6J961","text":"lol","ts":"1477669283.002914"},{"type":"message","user":"U0XR6J961","text":"priority high?","ts":"1477669297.002915"},{"type":"message","user":"U0Y14MWA2","text":"Not sure whats the absolute meaning of those priorities","ts":"1477671004.002916"},{"type":"message","user":"U0Y14MWA2","text":"However as it impacts for example hello","ts":"1477671020.002917"},{"type":"message","user":"U0Y14MWA2","text":"It is better to get it earlier than later","ts":"1477671040.002918"},{"type":"message","user":"U0Y14MWA2","text":"Can be medium ","ts":"1477671626.002919"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XR6J961> it impacts <https:\/\/jira.hyperledger.org\/browse\/FAB-478> you are working on now","ts":"1477673598.002920"},{"user":"U2QLU433N","text":"<@U2QLU433N|msoumeit> has joined the channel","type":"message","subtype":"channel_join","ts":"1477854684.002921"},{"type":"message","user":"U0XR6J961","text":"<@U0Y14MWA2> i don't think we should complicate things now before we finish the MVP","ts":"1477898756.002922"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XR6J961> MVP should have pipelining","ts":"1477902235.002923"},{"type":"message","user":"U0Y14MWA2","text":"IMO","ts":"1477902238.002924"},{"type":"message","user":"U0XR6J961","text":"i don't think that will happen, realistically","ts":"1477902276.002925"},{"type":"message","user":"U0Y14MWA2","text":"why not","ts":"1477902382.002926"},{"type":"message","user":"U0Y14MWA2","text":"if you do not wish to focus on that one - that's fine - pls focus on other JIRA items","ts":"1477902427.002927"},{"type":"message","user":"U0Y14MWA2","text":"yet eventually pipelining should be in MVP","ts":"1477902440.002928"},{"type":"message","user":"U0XR6J961","text":"MVP is march, right?","ts":"1477902516.002929"},{"type":"message","user":"U0Y14MWA2","text":"yes","ts":"1477902633.002930"},{"type":"message","user":"U0Y14MWA2","text":"approximately - I'd say","ts":"1477902648.002931"},{"type":"message","user":"U0XR6J961","text":"so realistically nothing happens around dec\/jan, so that's one month out, one month testing\/feature freeze, leaves nov, jan, feb","ts":"1477902928.002932"},{"type":"message","user":"U0XR6J961","text":"so maybe it'll happen","ts":"1477902954.002933"},{"type":"message","user":"U0Y14MWA2","text":"We just need to discuss <https:\/\/jira.hyperledger.org\/browse\/FAB-478> and how would one implement that with pipelining","ts":"1477903425.002934"},{"type":"message","user":"U0Y14MWA2","text":"we need a simple solution there (I think that resending pre-prepare, prepare, commit msgs might be overkill)","ts":"1477903452.002935"},{"type":"message","user":"U0Y14MWA2","text":"that works with no pipelining but with pipelining it becomes more involved because of the buffering","ts":"1477903490.002936"},{"type":"message","user":"U0Y14MWA2","text":"so basically we may need to address <https:\/\/jira.hyperledger.org\/browse\/FAB-478> in a diff way","ts":"1477903517.002937"},{"type":"message","user":"U0XR6J961","text":"hm","ts":"1477903806.002938"},{"type":"message","user":"U0XR6J961","text":"i think it is fair to assume that reconnect events should be rare","ts":"1477903829.002939"},{"type":"message","user":"U0XR6J961","text":"compared to the overall network activity","ts":"1477903847.002940"},{"type":"message","user":"U0XR6J961","text":"so resending the in flight messages is a simple solution","ts":"1477903887.002941"},{"type":"message","user":"U0XR6J961","text":"the alternative would be to wait for all in flight requests to finish","ts":"1477903920.002942"},{"type":"message","user":"U0XR6J961","text":"but they may not finish (but timeout, because of reconnecting nodes waiting)","ts":"1477903958.002943"},{"type":"message","user":"U0Y14MWA2","text":"this state transfer part is the most involved part of pipelining","ts":"1477904467.002944"},{"type":"message","user":"U0Y14MWA2","text":"the rest is making guard(s) such as (in preprepare.go, line 48)","edited":{"user":"U0Y14MWA2","ts":"1477911188.000000"},"ts":"1477904475.002945"},{"type":"message","user":"U0Y14MWA2","text":"nextSeq := s.nextSeq()\n\tif *pp.Seq != nextSeq {\n\t\tlog.Infof(\"preprepare does not match expected %v, got %v\", nextSeq, *pp.Seq)\n\t\treturn\n\t}","ts":"1477904476.002946"},{"type":"message","user":"U0Y14MWA2","text":"aware of different counters","ts":"1477904486.002947"},{"type":"message","user":"U0Y14MWA2","text":"and the replica would simply have different counters for each msg type","ts":"1477904498.002948"},{"type":"message","user":"U0Y14MWA2","text":"and an adapted .nextSeq() function","ts":"1477904512.002949"},{"type":"message","user":"U0XR6J961","text":"right","ts":"1477904811.002952"},{"type":"message","user":"U0XR6J961","text":"we already track request state partitioned","ts":"1477904829.002953"},{"type":"message","user":"U0XR6J961","text":"right now i'm trying to working out some issues with hello on reconnect","ts":"1477904867.002954"},{"type":"message","user":"U0XR6J961","text":"and which messages to discard and which ones to put in the backlog","ts":"1477904880.002955"},{"type":"message","user":"U0XR6J961","text":"the problem is that i might discard messages that are about the future, because i'm not yet synced up with it","ts":"1477905446.002956"},{"type":"message","user":"U0XR6J961","text":"so i think on hello i might have to directly sync my state","ts":"1477905510.002957"},{"type":"message","user":"U0XR6J961","text":"hm","ts":"1477905523.002958"},{"type":"message","user":"U0Y14MWA2","text":"wdy mean by \"directly syncing\"","ts":"1477905529.002959"},{"type":"message","user":"U0XR6J961","text":"which is different from what i had planned","ts":"1477905531.002960"},{"type":"message","user":"U0XR6J961","text":"well, instead of processing my outstanding message before looking at the hello message","ts":"1477905564.002961"},{"type":"message","user":"U0XR6J961","text":"i think i need to send the new-view on connect in a different way","ts":"1477911801.002963"},{"type":"message","user":"U0XR6J961","text":"because it really happens out of sequence","ts":"1477911808.002964"},{"type":"message","user":"U0XR6J961","text":"oh i think we shouldn't discard messages if we're not active","ts":"1477912399.002965"},{"type":"message","user":"U0XR6J961","text":"because the new-view message might arrive later than the prepare\/commit for requests in the new view","ts":"1477912424.002966"},{"type":"message","user":"U0XPR4NP4","text":"Have an appointment during scrum time, so will report here.  Finally found agreement about message format for the orderer.  Conclusion was simple envelope with sig\/payload\/header.  With respect to ASN.1 vs Protobuf, the conclusion was to try to wrap the structure access in utility methods and avoid direct proto marshaling\/unmarshaling to make migration to another encoding easier, but to stick to Protos for the time being.  I'll be reworking that WIP changeset which uses a simpler envelope to use protos with finalized names, and hopefully when merged, will also try to help the fabric adopt.","ts":"1477921466.002967"},{"type":"message","user":"U0UGH3X7X","text":"scrum ...","ts":"1477922344.002968"},{"type":"message","user":"U0XR6J961","text":"that's silly","ts":"1477922344.002969"},{"text":"<@U0UGH3X7X|tuand> has started a Google+ Hangout for this channel. <https:\/\/hangouts.google.com\/hangouts\/_\/4cki4gjnlfgoxfgt6j6j6q4hxae|Join Hangout>.","username":"hangouts","bot_id":"B0UKUAJ0Y","type":"message","subtype":"bot_message","ts":"1477922366.002970"},{"type":"message","user":"U0XR6J961","text":"oh scrum changed because of daylight savings?","ts":"1477922388.002971"},{"type":"message","user":"U0ZJZBJLF","text":"yeah","ts":"1477922412.002973"},{"type":"message","user":"U0UGH3X7X","text":"daylight savings ends next weekend in us","edited":{"user":"U0UGH3X7X","ts":"1477926351.000000"},"ts":"1477922419.002974"},{"type":"message","user":"U1AU8DRQR","text":"On holiday today, won't participate in scrum. Working with <@U0XR6J961> on other sbft tasks. ","ts":"1477925223.002976"},{"type":"message","user":"U0XR6J961","text":"you're too late for scrum anyways :stuck_out_tongue:","ts":"1477925244.002977"},{"type":"message","user":"U1AU8DRQR","text":"Yeah now I see :-D ","ts":"1477925367.002978"},{"type":"message","user":"U294C6FDW","text":"Guys,  I think I have a work around to insure that  either  the user gets  the  \"Error: state may be inconsistent, cannot query\"  or the latest ledger is by invoking  a dummy chaincode  to force  \"syncBlocks\" to be invoked by the peer that was down.   it seems,  if a member firm that brought down their  validating peer    they will need to issue a  \"dummy chaincode\" to get the latest blocks as part of their operation procedures.","ts":"1477939912.002980"},{"type":"message","user":"U0XPR4NP4","text":"<@U294C6FDW> You may want to look at enabling periodic null requests `CORE_PBFT_GENERAL_TIMEOUT_NULLREQUEST=3s` which does the same thing, but without the dummy chaincode or manual intervention","ts":"1477941954.002981"},{"type":"message","user":"U0KN2SSKE","text":"on the peer, we need to call the ordering service, is there a client side and where is it?","ts":"1477943902.002982"},{"type":"message","user":"U0XQ35CDD","text":"<@U0KN2SSKE>: There is. If you look into the `orderer\/sample_clients` directory, you'll find examples on how to invoke the ordering service.","ts":"1477943992.002983"},{"type":"message","user":"U0XQ35CDD","text":"You basically import the `atomicbroadcast` package, do a `atomicbroadcast.NewAtomicBroadcastClient(conn)` to instantiate a gRPC client and proceed as usual from there.","ts":"1477944158.002984"},{"type":"message","user":"U0KN2SSKE","text":"cool, thanks","ts":"1477944421.002985"},{"type":"message","user":"U0XQ35CDD","text":"Sure thing.","ts":"1477944428.002986"},{"type":"message","user":"U294C6FDW","text":"Jyellick,  Good news and bad news,  I added the nullrequest to 5 seconds on my all 4 VPs .  bring one down(vp2)  and start the  invoke again  on all three peers.  now I bring up vp2 and wait, it get the latest.  However, Bad news,   I started  the invoke again, what I notice  i'm in a loop  on all 4 peers of 15:59:57.541 [consensus\/pbft] recvViewChange -&gt; WARN 1f7 Replica 0 found view-change message incorrect\n15:59:58.433 [consensus\/pbft] ProcessEvent -&gt; INFO 1f8 Replica 0 processing event\n15:59:58.434 [consensus\/pbft] sendViewChange -&gt; INFO 1f9 Replica 0 sending view-change, v:95, h:76, |C|:2, |P|:1, |Q|:1\n15:59:58.436 [consensus\/pbft] recvViewChange -&gt; INFO 1fa Replica 0 received view-change from replica 0, v:95, h:76, |C|:2, |P|:1, |Q|:1\n15:59:58.437 [consensus\/pbft] recvViewChange -&gt; WARN 1fb Replica 0 found view-change message incorrect","ts":"1477944639.002987"},{"type":"message","user":"U0XPR4NP4","text":"<@U294C6FDW> Which level of code are you running with? There is a known bug which was fixed which could cause this behavior","ts":"1477944685.002988"},{"type":"message","user":"U294C6FDW","text":"the one I download about few weeks ago. I do I check the level","ts":"1477944776.002989"},{"type":"message","user":"U294C6FDW","text":"HyperledgerVP0:\/opt\/gopath\/src\/github.com\/hyperledger\/fabric # peer  --version\n16:14:00.541 [logging] LoggingInit -&gt; DEBU 001 Setting default logging level to DEBUG for command 'peer'\nFabric peer server version 0.7.0-snapshot-448d207\n16:14:00.544 [main] main -&gt; INFO 002 Exiting.....\nHyperledgerVP0:\/opt\/gopath\/src\/github.c","ts":"1477944840.002990"},{"type":"message","user":"U0XPR4NP4","text":"Do you see a line at the beginning of the log that looks like: ?\n\n```\nReplica %d restored state: view: ...\n```","ts":"1477944878.002991"},{"type":"message","user":"U0XPR4NP4","text":"<https:\/\/gerrit.hyperledger.org\/r\/gitweb?p=fabric.git;a=blob;f=consensus\/pbft\/pbft-persist.go;h=a5b672ea26dbbf3124047d3fbbc967550b514e07;hb=refs\/heads\/v0.6#l174>\n\n^ This is the line you are looking for","ts":"1477945057.002992"},{"type":"message","user":"U0XPR4NP4","text":"The fact that `h` is 76 in your debug output makes me think that you have this fix, but I think it's worth verifying","ts":"1477945074.002993"},{"type":"message","user":"U0XPR4NP4","text":"Looking more closely at your logs, it looks to me like vp0 has advanced its view while the rest of the network has not.  I'm not sure why it is sending a malformed view change, but I would expect that as the rest of the network advances, vp0 will state transfer, and this message will go away","ts":"1477945648.002994"},{"type":"message","user":"U0XPR4NP4","text":"Assuming that you have K=10, and log multiplier of 4.  Then I would expect this to happen within 5s * 10 * (4+1) = 250s ~ 4 minutes.","edited":{"user":"U0XPR4NP4","ts":"1477946040.000000"},"ts":"1477945697.002995"},{"type":"message","user":"U294C6FDW","text":"i see the   \"restored state\" and it's in line 174","ts":"1477945765.002996"},{"type":"message","user":"U0XPR4NP4","text":"What does the line read?","ts":"1477946012.002997"},{"type":"message","user":"U294C6FDW","text":"logger.Infof(\"Replica %d restored state: view: %d, seqNo: %d, pset: %d, qset: %d, reqBatches: %d, chkpts: %d h: %d\",\n                instance.id, instance.view, instance.seqNo, len(instance.pset), len(instance.qset), len(instance.reqBatchStore), len(instance.chkpts), instance.h)","ts":"1477946221.002999"},{"type":"message","user":"U0XPR4NP4","text":"Looks like you have that patch.  Are you still seeing the 'message incorrect' lines?","ts":"1477946250.003000"},{"type":"message","user":"U294C6FDW","text":"no... I kill  all the  VPs   process","ts":"1477946347.003001"},{"type":"message","user":"U0XPR4NP4","text":"I'd encourage you to take a look at <https:\/\/jira.hyperledger.org\/browse\/FAB-707>","ts":"1477946374.003002"},{"type":"message","user":"U294C6FDW","text":"okay... thnaks","ts":"1477946394.003003"},{"type":"message","user":"U0XPR4NP4","text":"Essentially, it's possible to have one peer which erroneously votes to change views early because of a crash or network problem","ts":"1477946397.003004"},{"type":"message","user":"U0XPR4NP4","text":"This will cause the continual issuing of view change messages.","ts":"1477946414.003005"},{"type":"message","user":"U0XPR4NP4","text":"The logs look a little spammy, but from a protocol perspective, this is benign.","ts":"1477946440.003006"},{"type":"message","user":"U294C6FDW","text":"that what i was simulating, I kill the the peer without \"peer stop\"","ts":"1477946461.003007"},{"type":"message","user":"U0XPR4NP4","text":"The replica's state will continue to be periodically synced, and once the network does view change, it will start participating again","ts":"1477946468.003008"},{"type":"message","user":"U0XPR4NP4","text":"I'm a little curious about how it is constructing an incorrect view-change message","ts":"1477946499.003009"},{"type":"message","user":"U0XPR4NP4","text":"I would not have anticipated that.","ts":"1477946507.003010"},{"type":"message","user":"U294C6FDW","text":"Thanks for that links...   I am reading it now","ts":"1477946808.003011"},{"user":"U2CSGKHRS","text":"<@U2CSGKHRS|teddy> has joined the channel","type":"message","subtype":"channel_join","ts":"1477994033.003012"},{"type":"message","user":"U0XR6J961","text":"plz review <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2117\/>","ts":"1477994453.003013"},{"type":"message","user":"U13TWBRBL","text":"<@U0XPR4NP4> <@U0XR6J961> i noticed that orderer.yaml defaults the listening port to `5151`, but the docker-compose overrides it to `5005`, is there a reason for this? why not decide on one of them and go with it everywhere? from SDK point of view we\u2019d like to decide on which one to use for the test cases. right now our tests are set up with docker-compose so it makes sense to use 5005. but having 5151 as default can break contributors who fire up SOLO orderer as native process.","ts":"1478014218.003014"},{"type":"message","user":"U0XPR4NP4","text":"<@U13TWBRBL> As I recall, 5005 was picked initially and arbitrarily as a stand-in, but someone, I think <@U0KM61BCP> pointed out that this conflicted with another service we use and asked for it to be changed.  So, when the configuration went in, it was changed to 5151.  I'm not really sure what process we use for picking ports, but I agree, we should pick a port and fix it in both places.","ts":"1478014328.003015","reactions":[{"name":"+1","users":["U13TWBRBL"],"count":1}]},{"type":"message","user":"U0ZJZBJLF","text":"Is block validation coded at the moment?","ts":"1478014355.003016"},{"type":"message","user":"U0XQ35CDD","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/747\/3\/orderer\/sample_clients\/deliver_stdout\/client.go@104>","ts":"1478014366.003017","reactions":[{"name":"ok_hand","users":["U13TWBRBL"],"count":1}]},{"type":"message","user":"U0ZJZBJLF","text":"(does anyone here know, or know who writes that aspect?)","ts":"1478014380.003018"},{"type":"message","user":"U13TWBRBL","text":"should i file a JIRA bug for this change?","ts":"1478014399.003019"},{"type":"message","user":"U0KM61BCP","text":"<@U0XPR4NP4> I chose from the list of assigned ports a range of 10 that were unassigned 7050-7060","ts":"1478014418.003020"},{"type":"message","user":"U0XQ35CDD","text":"<@U13TWBRBL> Yes please.","ts":"1478014444.003021"},{"type":"message","user":"U0KM61BCP","text":"I asked a while back but did not get an answer as to why we chose 50xx range because those are taken","ts":"1478014457.003022"},{"type":"message","user":"U0KM61BCP","text":"yes, we should use from the set I identified earlier","ts":"1478014471.003023"},{"type":"message","user":"U0KM61BCP","text":"I don\u2019t know why we would use another range","ts":"1478014482.003024"},{"type":"message","user":"U0KM61BCP","text":"when all is said and done we can allocate the range we are using","ts":"1478014494.003025"},{"type":"message","user":"U0XPR4NP4","text":"Great, let's move to that range, I didn't understand 7050-7060 was what was chosen","ts":"1478014502.003026"},{"type":"message","user":"U0XPR4NP4","text":"What port specifically should the orderer use? I assume we have already allocated some of 7050-7060 for some services?","edited":{"user":"U0XPR4NP4","ts":"1478014536.000000"},"ts":"1478014528.003027"},{"type":"message","user":"U0XQ35CDD","text":"Are other components using ports within that range?","ts":"1478014532.003028"},{"type":"message","user":"U0XQ35CDD","text":"Oh damn it, too slow.","ts":"1478014537.003030"},{"type":"message","user":"U0KM61BCP","text":"well, a bunch are used, yes","ts":"1478014545.003031"},{"type":"message","user":"U13TWBRBL","text":"<https:\/\/jira.hyperledger.org\/browse\/FAB-923>","ts":"1478014546.003032"},{"type":"message","user":"U0XQ35CDD","text":"Are these listed somewhere?","ts":"1478014558.003033"},{"type":"message","user":"U0KM61BCP","text":"but with the refactor, we need to assess what is needed going forward","ts":"1478014563.003034"},{"type":"message","user":"U0KM61BCP","text":"eg REST endpoint is deprecated, no?","ts":"1478014574.003035"},{"type":"message","user":"U0KM61BCP","text":"in the PR where I changed things;-)","ts":"1478014588.003036"},{"type":"message","user":"U13TWBRBL","text":"REST APIs are already stripped out of master","ts":"1478014602.003037"},{"type":"message","user":"U13TWBRBL","text":"so 7050 are free now","ts":"1478014609.003038"},{"type":"message","user":"U0XQ35CDD","text":"Well, it'd be great if you can link to that PR in Jim's issue.","ts":"1478014617.003039"},{"type":"message","user":"U13TWBRBL","text":"7051 is peer grpc, 7053 is peer\u2019s event stream, 7054 right now is member service grpc","ts":"1478014640.003040"},{"type":"message","user":"U0KM61BCP","text":"<https:\/\/github.com\/hyperledger-archives\/fabric\/pull\/2286>","attachments":[{"service_name":"GitHub","title":"[WIP] Fix Issue 2283 by christo4ferris \u00b7 Pull Request #2286 \u00b7 hyperledger-archives\/fabric \u00b7 GitHub","title_link":"https:\/\/github.com\/hyperledger-archives\/fabric\/pull\/2286","text":"Description change peer REST port from 5000 to 7050 to avoid conflict with UPnP on Windows. Also reassigned all other ports as follows: 7050 REST 7051 peer gRPC 7052 peer CLI 7053 peer events 7054 ...","fallback":"GitHub: [WIP] Fix Issue 2283 by christo4ferris \u00b7 Pull Request #2286 \u00b7 hyperledger-archives\/fabric","thumb_url":"https:\/\/avatars1.githubusercontent.com\/u\/3630697?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger-archives\/fabric\/pull\/2286","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1478014662.003041"},{"type":"message","user":"U0KM61BCP","text":"so the proliferation of CA endpoints is, I believe no longer desired","ts":"1478014685.003043"},{"type":"message","user":"U0XQ35CDD","text":"I updated the issue accordingly, thx.","ts":"1478014729.003044"},{"text":"waits for jenkins to even start","type":"message","subtype":"me_message","user":"U0XR6J961","ts":"1478014748.003045"},{"type":"message","user":"U13TWBRBL","text":"what\u2019s \u201c7052 peer cli\u201d used for? shouldn\u2019t peer cli use \u201c7051\u201d just like SDKs?","ts":"1478014762.003046"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XQ35CDD> <@U0KN2SSKE> Also posting here to prevent bad threading in <#C2GE7GXM1|fabric-crypto> \n\nThe second piece, is how is the authority to create channels tracked, and how is channel creation serialized against this to prevent non-deterministic channel creation while not leaking the channel creation to those who should not witness it. (ie, doing this in the system ledger is probably not an option)","ts":"1478031760.003047"},{"type":"message","user":"U0KN2SSKE","text":"<@U1BC5A0F9> called it \u201csuperuser\u201d, a leader node that processes all config transactions and disseminates to followers","ts":"1478038534.003050"},{"type":"message","user":"U0XQ35CDD","text":"<@U0KN2SSKE>: I am not sure this addresses the concern raised here. You ultimately need a log where the configurations specifying who can create a channel, along with the actual requests\/config_txs to create channels, are maintained. And that second part makes the system chain (which was the obvious candidate) not an option because of leaking concerns.","edited":{"user":"U0XQ35CDD","ts":"1478039079.000000"},"ts":"1478038880.003051"},{"user":"U23DJ7XDZ","text":"<@U23DJ7XDZ|ermyas> has joined the channel","type":"message","subtype":"channel_join","ts":"1478040109.003053"},{"type":"message","user":"U0XR6J961","text":"still looking for reviews for my sbft changesets","ts":"1478075138.003054"},{"type":"message","user":"U1BC5A0F9","text":"<@U0XQ35CDD>: if there is a single node that receives all these requests, isnt easier that we enforce that these requests are handled sequentially?","ts":"1478078423.003055"},{"type":"message","user":"U1BC5A0F9","text":"For simplicity and for the beginning since kafka already have this notion of cluster administrator no?","ts":"1478078462.003056"},{"type":"message","user":"U1AU8DRQR","text":"could somebody review my changesets?","ts":"1478088844.003057"},{"type":"message","user":"U0XQ35CDD","text":"<@U1BC5A0F9>: Well, for Kafka, this is an easy problem to solve. You just assign a partition to these requests, and then it's all up to the partition leader replica to enforce order. No need to tie this specifically to the cluster controller.","edited":{"user":"U0XQ35CDD","ts":"1478089799.000000"},"ts":"1478089724.003058"},{"type":"message","user":"U0XQ35CDD","text":"What was the exact flow you had in mind?","ts":"1478089818.003060"},{"user":"U2W8LGBMZ","text":"<@U2W8LGBMZ|azaleta> has joined the channel","type":"message","subtype":"channel_join","ts":"1478091620.003061"},{"user":"U2M6CU41G","text":"<@U2M6CU41G|seshadrs> has joined the channel","type":"message","subtype":"channel_join","ts":"1478095481.003062"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XQ35CDD> I'd still like to talk to you about the race between channel creation and channel creation rights when you have a chance","ts":"1478095898.003063"},{"type":"message","user":"U1BC5A0F9","text":"right these are the messages that need to be serialized somehow","ts":"1478095924.003064"},{"type":"message","user":"U0XQ35CDD","text":"I am here. And responded to Elli as well.","ts":"1478095926.003065"},{"type":"message","user":"U1BC5A0F9","text":"in the sense that orders w.r.t. changes in the permissions of entities, w.r..t channel creation\/termination should be received in the same order by all the peers who are to process channel creatiuon\/termination requests.","ts":"1478096009.003066"},{"type":"message","user":"U0XQ35CDD","text":"As long as all the shims read from the same partition, this concern w\/r\/t ordering is taken care of, correct?","ts":"1478096092.003067"},{"type":"message","user":"U0XPR4NP4","text":"Not quite","ts":"1478096110.003068"},{"type":"message","user":"U0XPR4NP4","text":"So, first question is:  Where is the channel creation authorization policy stored?","ts":"1478096121.003069"},{"type":"message","user":"U0XQ35CDD","text":"Which is why I asked: <https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1478089818003060>","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1478089818003060","fallback":"[November 2nd, 2016 5:30 AM] kostas: What was the exact flow you had in mind?","ts":"1478089818.003060","author_subname":"kostas","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"What was the exact flow you had in mind?","author_name":"Kostas Christidis","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/kostas","author_icon":"https:\/\/avatars.slack-edge.com\/2016-04-05\/31983107923_80db5353e9278df980c7_48.png","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1478096149.003070"},{"type":"message","user":"U0XQ35CDD","text":"Before we proceed further.","ts":"1478096162.003072"},{"type":"message","user":"U0XQ35CDD","text":"Just to make sure we're all on the same page.","ts":"1478096170.003073"},{"type":"message","user":"U0XPR4NP4","text":"Okay.  So, I'll enumerate the flow with the race in it.","ts":"1478096179.003074"},{"type":"message","user":"U0XQ35CDD","text":"Hold on a sec --","ts":"1478096191.003075"},{"type":"message","user":"U0XQ35CDD","text":"It's my understanding based on this <https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1478078423003055> and Binh's message that Elli has a flow in mind that solves this. Is that correct or not?","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1478078423003055","fallback":"[November 2nd, 2016 2:20 AM] elli: <@U0XQ35CDD>: if there is a single node that receives all these requests, isnt easier that we enforce that these requests are handled sequentially?","ts":"1478078423.003055","author_subname":"elli","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"<@U0XQ35CDD>: if there is a single node that receives all these requests, isnt easier that we enforce that these requests are handled sequentially?","author_name":"Elli","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/elli","author_icon":"https:\/\/secure.gravatar.com\/avatar\/8a94917afbdbd7e1bd944f484dc05cfe.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0022-48.png","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1478096214.003076"},{"type":"message","user":"U1BC5A0F9","text":"aha, the flow in mind related to either have a central admin that process all these requests one by the other","ts":"1478096289.003078"},{"type":"message","user":"U1BC5A0F9","text":"and in this case this entity will accept and process channel creation requests as well as channel-related permission config messages","ts":"1478096314.003079"},{"type":"message","user":"U1BC5A0F9","text":"or that you have a chain among orderers to announce these requests","ts":"1478096324.003080"},{"type":"message","user":"U1BC5A0F9","text":"and guarantee that all of themsee it in the sasme order","ts":"1478096332.003081"},{"type":"message","user":"U0XPR4NP4","text":"The dedicated orderer chain is I think the likely correct answer","ts":"1478096355.003082"},{"type":"message","user":"U0XQ35CDD","text":"Correct.","ts":"1478096361.003083"},{"type":"message","user":"U1BC5A0F9","text":"Either way in my mind.","ts":"1478096371.003084"},{"type":"message","user":"U1BC5A0F9","text":"If centralized solution is easier fornow","ts":"1478096380.003085"},{"type":"message","user":"U1BC5A0F9","text":"we can also go for this","ts":"1478096383.003086"},{"type":"message","user":"U0XQ35CDD","text":"So you are leveraging the ordering guarantees of the partition, and have a partition dedicated to all the channel-related messages (configs + creation reqs).","ts":"1478096404.003087"},{"type":"message","user":"U1BC5A0F9","text":"right","ts":"1478096415.003088"},{"type":"message","user":"U1BC5A0F9","text":"but assumin that this chain is internal","ts":"1478096430.003089"},{"type":"message","user":"U1BC5A0F9","text":"is not exposed to others","ts":"1478096436.003090"},{"type":"message","user":"U1BC5A0F9","text":"to peers","ts":"1478096440.003091"},{"type":"message","user":"U0XQ35CDD","text":"I am fully with you.","ts":"1478096449.003092"},{"type":"message","user":"U0XQ35CDD","text":"We had brought this solution up when we settled on the multi-channel JoinChannel API.","edited":{"user":"U0XQ35CDD","ts":"1478096632.000000"},"ts":"1478096552.003093"},{"type":"message","user":"U0XQ35CDD","text":"A question though is:","ts":"1478096580.003094"},{"type":"message","user":"U0XQ35CDD","text":"These configuration messages that dictate the policies for channel creation, as well as the orgs that can request them. Do  you only see those stored in that special partition?","ts":"1478096773.003096"},{"type":"message","user":"U0XQ35CDD","text":"Because as far as I can tell, this is stuff that also belongs on the system chain.","ts":"1478096837.003097"},{"type":"message","user":"U0XQ35CDD","text":"So, if my understanding is correct, there's some cross-posting that needs to happen here.","ts":"1478096860.003098"},{"type":"message","user":"U0PB67X4K","text":"isn't the idea to basically have a \"dedicated\" API for config (which would of course take as a parameter the channel(s) it applies to)?","ts":"1478096935.003099"},{"type":"message","user":"U0XQ35CDD","text":"(And then you come up with the usual race conditions that we saw with the whole cut block \/ push block mechanisms in Kafka and multiple channels.)","ts":"1478096944.003100"},{"type":"message","user":"U0XPR4NP4","text":"<@U0PB67X4K> Config changes are implemented as a special transaction today","ts":"1478096978.003101"},{"type":"message","user":"U0XQ35CDD","text":"<@U0PB67X4K> Can you expand on that?","ts":"1478096981.003102"},{"type":"message","user":"U0XPR4NP4","text":"Which comes in over the normal `Broadcast` API","ts":"1478096988.003103"},{"type":"message","user":"U0PB67X4K","text":"<@U0XQ35CDD> - I guess I had a thought where all config transactions were submitted on an internal channel (regardless of which channel the config was for).    I would assume this is the case for creating a channel?","ts":"1478097364.003104"},{"type":"message","user":"U0XQ35CDD","text":"Yes, we are talking about an internal channel here and these channel requests. The tricky bit though is this:","ts":"1478097426.003105"},{"type":"message","user":"U0XQ35CDD","text":"<https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1478096773003096>","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1478096773003096","fallback":"[November 2nd, 2016 7:26 AM] kostas: These configuration messages that dictate the policies for channel creation, as well as the orgs that can request them. Do  you only see those stored in that special partition?","ts":"1478096773.003096","author_subname":"kostas","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"These configuration messages that dictate the policies for channel creation, as well as the orgs that can request them. Do  you only see those stored in that special partition?","author_name":"Kostas Christidis","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/kostas","author_icon":"https:\/\/avatars.slack-edge.com\/2016-04-05\/31983107923_80db5353e9278df980c7_48.png","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1478097432.003106"},{"type":"message","user":"U0XQ35CDD","text":"(And my follow-up messages.)","ts":"1478097443.003108"},{"type":"message","user":"U0XQ35CDD","text":"From all the discussions I've participated in, these system-wide reconfig blocks belong on the system chain.","ts":"1478097508.003109"},{"type":"message","user":"U0PB67X4K","text":"right - but does everything that comes in this internal channel get propagated to the channel (if any) it affects?   But in any case, could the orderer then just (re)submit the transaction on the appropriate channel (if required) - or is there some trust violation there?","ts":"1478097534.003110"},{"type":"message","user":"U0PB67X4K","text":"the system chain which goes to the peers?","ts":"1478097548.003111"},{"type":"message","user":"U0XQ35CDD","text":"The orderer re-submitting is what I referred to as cross-posting.","ts":"1478097558.003112"},{"type":"message","user":"U0PB67X4K","text":"yep","ts":"1478097562.003113"},{"type":"message","user":"U0XQ35CDD","text":"i.e. that's how I see it working.","ts":"1478097565.003114"},{"type":"message","user":"U0PB67X4K","text":"so we were actually saying the same thing then (I think)","ts":"1478097581.003115"},{"type":"message","user":"U0XQ35CDD","text":"The system chain would go to the peers, I assume, yes.","ts":"1478097583.003116"},{"type":"message","user":"U0XQ35CDD","text":"(Gari: yes.)","ts":"1478097593.003117"},{"type":"message","user":"U0XPR4NP4","text":"All of this makes me think that we should really redefine the whole 'system chain' concept.  I would suggest instead, that we should move to bootstrapping the orderer service separately from bootstrapping the peer network.  Essentially bootstrapping the ordering service would give you a thing that can create channels.  Then, to bootstrap the peer network, you would just create channels, one with all of the peer members for the 'system channel', but really, that would just be a normal channel.","edited":{"user":"U0XPR4NP4","ts":"1478097735.000000"},"ts":"1478097707.003118"},{"type":"message","user":"U0XQ35CDD","text":"Jeff had suggested that as well, and I like the idea.","ts":"1478097769.003121"},{"type":"message","user":"U0PB67X4K","text":"Well I agree that we need to support that - imagine the case where the people who run the ordering service are not actually the people who have peers which connect","edited":{"user":"U0PB67X4K","ts":"1478097800.000000"},"ts":"1478097787.003122"},{"type":"message","user":"U0PB67X4K","text":"which is a viable scenario","ts":"1478097807.003124"},{"type":"message","user":"U0XPR4NP4","text":"That's still possible without, by simply spinning up a new ordering service on demand, but I agree the other mechanism is more elegant","ts":"1478097825.003125"},{"type":"message","user":"U0XPR4NP4","text":"(Or by spinning up an ordering service with no peer network and reconfiguring it)","ts":"1478097843.003126"},{"type":"message","user":"U0XPR4NP4","text":"How about this flow: Assuming we have an 'orderer chain', the channel creation transaction comes in as a transaction bound for the desired new channelName\/chainID.  As one of the configuration parameters, it specifies the orderer chain ID.  The ordering service checks the authorization policy on that chain, and if it's valid, wraps and submits this transaction to that chain for ordering.  Once the transaction is finally ordered, it is now concretely valid or invalid, and at this point, the channel is created with a genesis block containing the initial transaction.","edited":{"user":"U0XPR4NP4","ts":"1478098194.000000"},"ts":"1478098188.003127","reactions":[{"name":"white_check_mark","users":["U1BC5A0F9"],"count":1}]},{"type":"message","user":"U0XPR4NP4","text":"As a neat side effect of specifying the orderer chain ID, would be that you could use the same mechanism to spin up 'new orderer chains' on a single backing ordering service.  Probably not ideal for dedicated hosting, but for free offerings, it would allow multi-tenancy on a single backing Kafka cluster for instance","ts":"1478098468.003129","reactions":[{"name":"white_check_mark","users":["U1BC5A0F9"],"count":1}]},{"type":"message","user":"U0XQ35CDD","text":"I am OK with that.","edited":{"user":"U0XQ35CDD","ts":"1478105920.000000"},"ts":"1478098610.003130"},{"type":"message","user":"U0XPR4NP4","text":"Great, sounds like we have a plan then? Are there any ambiguities that should be settled?","edited":{"user":"U0XPR4NP4","ts":"1478099003.000000"},"ts":"1478098996.003131"},{"type":"message","user":"U0ULK2JPP","text":"<@U0XPR4NP4> the comment above `How about this flow: \u2026.`  summarizes the discussion ?","ts":"1478099328.003133"},{"type":"message","user":"U0ULK2JPP","text":"trying to see how far I should read back","ts":"1478099339.003134"},{"type":"message","user":"U0XPR4NP4","text":"I would start there and see if you have questions","ts":"1478099346.003135"},{"type":"message","user":"U0XQ35CDD","text":"I'm hesitant to call it a plan just yet, but it looks like it'll work.","edited":{"user":"U0XQ35CDD","ts":"1478105935.000000"},"ts":"1478099418.003136"},{"type":"message","user":"U0ULK2JPP","text":"<@U0XPR4NP4> <@U0XQ35CDD> would a diagram with swim lanes be too hard ? :slightly_smiling_face: \u2026 (note I hesistate to ask )","ts":"1478099522.003137"},{"type":"message","user":"U0XQ35CDD","text":"<@U0ULK2JPP>: I'd argue that you need some context, which is that the current design will need some cross-posting: <https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1478096773003096>","edited":{"user":"U0XQ35CDD","ts":"1478099587.000000"},"ts":"1478099542.003138"},{"type":"message","user":"U0ULK2JPP","text":"ok","ts":"1478099546.003139"},{"type":"message","user":"U0XQ35CDD","text":"You want a diagram, or a write-up?","ts":"1478099592.003141"},{"type":"message","user":"U0XQ35CDD","text":"(Bracing myself for a \"both\" answer.)","ts":"1478099614.003142"},{"type":"message","user":"U0XPR4NP4","text":"For a little context, the initial problem was that if authorization for creating a chain is stored on one chain, and the actual creation of a chain is stored on another, then these two things are not necessarily serialized, then chain creation would be non-deterministic.","edited":{"user":"U0XPR4NP4","ts":"1478099653.000000"},"ts":"1478099639.003143"},{"type":"message","user":"U0ULK2JPP","text":"<@U0XQ35CDD> , either would be a good start (whichever is easier)\u2026","ts":"1478099771.003145"},{"type":"message","user":"U0XQ35CDD","text":"Write-up it is then, OK.","ts":"1478099800.003146","reactions":[{"name":"+1","users":["U0ULK2JPP"],"count":1}]},{"type":"message","user":"U1BC5A0F9","text":"Hi, we are working on a writeup on this :slightly_smiling_face:","ts":"1478101055.003147"},{"type":"message","user":"U0XQ35CDD","text":"The revised flow that eliminates the need for cross-posting?","ts":"1478101098.003148"},{"type":"message","user":"U1BC5A0F9","text":"Now getting Binh's comments, but should be done soon","ts":"1478101099.003149"},{"type":"message","user":"U0XQ35CDD","text":"Not sure if you saw this part of the discussion: <https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1478096773003096>","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1478096773003096","fallback":"[November 2nd, 2016 7:26 AM] kostas: These configuration messages that dictate the policies for channel creation, as well as the orgs that can request them. Do  you only see those stored in that special partition?","ts":"1478096773.003096","author_subname":"kostas","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"These configuration messages that dictate the policies for channel creation, as well as the orgs that can request them. Do  you only see those stored in that special partition?","author_name":"Kostas Christidis","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/kostas","author_icon":"https:\/\/avatars.slack-edge.com\/2016-04-05\/31983107923_80db5353e9278df980c7_48.png","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1478101126.003150"},{"type":"message","user":"U1BC5A0F9","text":"Adding <@U0KN2SSKE> here :slightly_smiling_face:","ts":"1478105176.003152"},{"type":"message","user":"U0XQ35CDD","text":"Chatted with Binh earlier and it seems that in his multi-channel doc he's already working under the assumption of a system chain that is only exposed to the orderers. So we're all on the same page.","ts":"1478105650.003153","reactions":[{"name":"+1","users":["U1BC5A0F9"],"count":1}]},{"type":"message","user":"U0KN2SSKE","text":"ok, finally caught up with this discussion \u2014 yesterday i have started to rewrite part of the multichannel and posted a comment about system chain where all peers are on.  Basically the conclusion was that on the peer side, there is no system chain, just chains that app creates.","ts":"1478113097.003156"},{"user":"U2RMVHMK9","text":"<@U2RMVHMK9|hiepnm> has joined the channel","type":"message","subtype":"channel_join","ts":"1478158870.003157"},{"type":"message","user":"U1AU8DRQR","text":"could somebody help us in <https:\/\/jira.hyperledger.org\/browse\/FAB-477> ?","ts":"1478174291.003158"},{"type":"message","user":"U0ZJZBJLF","text":"Hi","ts":"1478179954.003159"},{"type":"message","user":"U0ZJZBJLF","text":"what in the block is signed? the header, or just the body?","ts":"1478179971.003160"},{"type":"message","user":"U0ZJZBJLF","text":"and where is the multi-orderer signature located in?","ts":"1478179986.003161"},{"type":"message","user":"U0XQ35CDD","text":"<@U0ZJZBJLF>: Have a look at the revised proto file here: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2153\/2\/orderer\/atomicbroadcast\/ab.proto>","ts":"1478180559.003162"},{"type":"message","user":"U0XQ35CDD","text":"The signature you asked for yesterday would go in the BlockMetadata.","ts":"1478180592.003163"},{"type":"message","user":"U0XQ35CDD","text":"In the BlockData you'll find a series of marshaled Envelopes (<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2153\/2\/orderer\/atomicbroadcast\/message.proto>) which are signed (by the submitter). ","edited":{"user":"U0XQ35CDD","ts":"1478180751.000000"},"ts":"1478180714.003164"},{"type":"message","user":"U0ZJZBJLF","text":"the block data and meta data is just a list of byte arrays","ts":"1478180870.003166"},{"type":"message","user":"U0XQ35CDD","text":"Yes. ","ts":"1478180880.003167"},{"type":"message","user":"U0ZJZBJLF","text":"so how do you interpret stuff?","ts":"1478180920.003168"},{"type":"message","user":"U0ZJZBJLF","text":"you go over the byte arrays and check each one what is it?","ts":"1478180930.003169"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZJZBJLF> For the `Data` they will all be `Envelope`s marshaled","ts":"1478180968.003170"},{"type":"message","user":"U0ZJZBJLF","text":"I'm asking- where does the multi-sig reside","ts":"1478180969.003171"},{"type":"message","user":"U0ZJZBJLF","text":"can you point me?","ts":"1478180971.003172"},{"type":"message","user":"U0XPR4NP4","text":"Does not exist yet","ts":"1478180976.003173"},{"type":"message","user":"U0XQ35CDD","text":"Have a look at an example here: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2177\/>","ts":"1478180977.003174"},{"type":"message","user":"U0ZJZBJLF","text":"oh....","ts":"1478180979.003175"},{"type":"message","user":"U0XPR4NP4","text":"However, I strongly suspect, this will simply be a series of `Envelope` messages, which contains a `Payload.data` of the hash of the block header","ts":"1478181017.003176"},{"type":"message","user":"U0XPR4NP4","text":"And we will define a new `Header.Type` of `BlockSignature`","ts":"1478181035.003177"},{"type":"message","user":"U0ZJZBJLF","text":"I might be asking a foolish question, but- is the header going to be signed? yes or no? (please say yes) because- the seqNum of the block is only in the header","edited":{"user":"U0ZJZBJLF","ts":"1478181058.000000"},"ts":"1478181045.003178"},{"type":"message","user":"U0XPR4NP4","text":"I expect the signatures to be over the (hash of) the block header","ts":"1478181066.003180"},{"type":"message","user":"U0XPR4NP4","text":"(So, yes)","ts":"1478181114.003181"},{"type":"message","user":"U0ZJZBJLF","text":"the entire header, right?","ts":"1478181122.003182"},{"type":"message","user":"U0XPR4NP4","text":"Correct","ts":"1478181140.003183"},{"type":"message","user":"U0XQ35CDD","text":"The hash of the header, so yes. ","ts":"1478181140.003184"},{"type":"message","user":"U0ZJZBJLF","text":"ok, just making sure","ts":"1478181166.003185"},{"type":"message","user":"U0ZJZBJLF","text":"but I still don't understand how the metadata extraction works","ts":"1478181184.003186"},{"type":"message","user":"U0XPR4NP4","text":"Assume for now, that all metadata is of type `Envelope`","ts":"1478181195.003187"},{"type":"message","user":"U0ZJZBJLF","text":"you go over the metadata byte array after byte array","ts":"1478181196.003188"},{"type":"message","user":"U0ZJZBJLF","text":"oh ok","ts":"1478181199.003189"},{"type":"message","user":"U0ZJZBJLF","text":"so it's bytes in the proto file just for convenience","ts":"1478181211.003190"},{"type":"message","user":"U0XPR4NP4","text":"Correct, in order to build the data hash, the Data really needs to be as bytes","ts":"1478181229.003191"},{"type":"message","user":"U0XPR4NP4","text":"So, for symmetry, the MetaData is as well","ts":"1478181239.003192"},{"type":"message","user":"U0ZJZBJLF","text":"to avoid marshalling it and demarshalling just for the hash?","ts":"1478181264.003193"},{"type":"message","user":"U0XPR4NP4","text":"Also to avoid custom marshaling schemes, because proto marshaling is not deterministic","ts":"1478181292.003194","reactions":[{"name":"face_with_rolling_eyes","users":["U1HFNJB50"],"count":1}]},{"type":"message","user":"U0ZJZBJLF","text":"say what?","ts":"1478181306.003195"},{"type":"message","user":"U0XPR4NP4","text":"We will have to do custom marshaling for the block header which is unfortunate, but it is small and simple","ts":"1478181318.003196"},{"type":"message","user":"U0ZJZBJLF","text":"if I have a .proto definition you're saying the marshalling isn't deterministic?","ts":"1478181341.003197"},{"type":"message","user":"U0XPR4NP4","text":"I am","ts":"1478181347.003198"},{"type":"message","user":"U0XPR4NP4","text":"It is, in implementation always determinstic","ts":"1478181362.003199"},{"type":"message","user":"U0XQ35CDD","text":"(Here we go again.)","ts":"1478181374.003200","reactions":[{"name":"simple_smile","users":["U0XPR4NP4"],"count":1},{"name":"joy","users":["U0PB67X4K"],"count":1}]},{"type":"message","user":"U0XPR4NP4","text":"But in documentation, it is explicitly stated that marshaling is not required to be deterministic","edited":{"user":"U0XPR4NP4","ts":"1478181389.000000"},"ts":"1478181376.003201"},{"type":"message","user":"U0ZJZBJLF","text":"umm ok","ts":"1478181399.003203"},{"type":"message","user":"U0UGH3X7X","text":"scrum ...","ts":"1478181556.003204"},{"text":"<@U0UGH3X7X|tuand> has started a Google+ Hangout for this channel. <https:\/\/hangouts.google.com\/hangouts\/_\/ch3ckch4p5bnznvt42qe7fwrdqe|Join Hangout>.","username":"hangouts","bot_id":"B0UKUAJ0Y","type":"message","subtype":"bot_message","ts":"1478181573.003205"},{"type":"message","user":"U0UGH3X7X","text":"<@U0XR6J961> <@U1AU8DRQR>","ts":"1478181661.003206"},{"type":"message","user":"U1AU8DRQR","text":"having another meeting in parallel, sorry","ts":"1478181689.003207"},{"type":"message","user":"U1AU8DRQR","text":"today, I reviewed <@U0XR6J961> 's SBFT patchsets (we need one more reviewer) and groomed my own ones (reviewers needed and a working Jenkins needed)","ts":"1478181739.003208"},{"type":"message","user":"U1AU8DRQR","text":"we would need somebody to do <https:\/\/jira.hyperledger.org\/browse\/FAB-477> (I do not know those thresholds) Any volunteers \/ victims?","ts":"1478181879.003209"},{"type":"message","user":"U1AU8DRQR","text":"noone?","ts":"1478185800.003210"},{"type":"message","user":"U0XPR4NP4","text":"<@U1AU8DRQR> It's something I'd be willing to look at eventually, but sbft is lower priority than channels and chain ACLs etc. at the moment, so I don't have the cycles for it","ts":"1478187485.003211"},{"type":"message","user":"U1AU8DRQR","text":"it is just 1-2 hours for an experienced reviewer like you :smile:","ts":"1478187535.003212"},{"type":"message","user":"U0XPR4NP4","text":"Haha, if only that were true, oh the free time I would have","ts":"1478188226.003213"},{"type":"message","user":"U1AU8DRQR","text":"btw <@U0XR6J961> has dozens of commits here waiting for review (and reverify): <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2117\/>","ts":"1478189954.003214"},{"type":"message","user":"U0XPR4NP4","text":"I have looked at all of them I have been tagged on","ts":"1478190031.003215"},{"type":"message","user":"U0XPR4NP4","text":"Waiting for verify on some","ts":"1478190036.003216"},{"type":"message","user":"U0XPR4NP4","text":"If you spot any that you think I should review, feel free to add me to the reviewer list","ts":"1478190058.003217"},{"type":"message","user":"U0Y14MWA2","text":"I'll try to help bu not really this week (@OSDI)","ts":"1478198222.003218"},{"type":"message","user":"U0S5KF44D","text":"I believe each config update transaction will contain the entire config, right?  Can someone tell me how to read the latest config update in the peer?","ts":"1478200551.003219"},{"type":"message","user":"U0XPR4NP4","text":"<@U0S5KF44D> Yes, every configuration transaction contains the full set of config.","ts":"1478201459.003220"},{"type":"message","user":"U0XPR4NP4","text":"I'm not sure what you mean by:\n\n&gt; Can someone tell me how to read the latest config update in the peer?","ts":"1478201481.003221"},{"type":"message","user":"U0S5KF44D","text":"<@U0XPR4NP4> When in the peer, how to read the config data from the system ledger?","ts":"1478202002.003222"},{"type":"message","user":"U0XQ35CDD","text":"Scan all the blocks in reverse order until you find one that matches something similar to what you see here? <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2179\/4\/orderer\/common\/bootstrap\/static\/static_test.go>","edited":{"user":"U0XQ35CDD","ts":"1478202159.000000"},"ts":"1478202107.003223"},{"type":"message","user":"U0XPR4NP4","text":"<@U0S5KF44D> Eventually, there will be a system chaincode at the peer which encodes this information into the normal ledger","ts":"1478202356.003225"},{"type":"message","user":"U0XPR4NP4","text":"You can use standard query mechanisms at that point.","ts":"1478202364.003226"},{"type":"message","user":"U0XPR4NP4","text":"If you need to find config from the raw chain before this system chaincode translation, then you can do as <@U0XQ35CDD> suggests","ts":"1478202382.003227"},{"type":"message","user":"U0S5KF44D","text":"<@U0XPR4NP4> Is there a jira item I can follow for the system chaincode to do this?","ts":"1478202654.003228"},{"type":"message","user":"U0S5KF44D","text":"any ETA on that?","ts":"1478202665.003229"},{"type":"message","user":"U0XPR4NP4","text":"None that I am aware of, this was just hashed out last Thursday I think.  It will happen some time after the transaction format is consolidated.  This should probably be created in JIRA, though I'm not entirely sure what category to assign it.","ts":"1478202746.003230"},{"type":"message","user":"U0XPR4NP4","text":"(Or, it exists and I'm unaware of it)","ts":"1478202755.003231"},{"type":"message","user":"U0XQ35CDD","text":"So, when a client issues a Broadcast RPC, I would expect that all envelopes that are getting pushed to that RPC belong to the same channel\/`ChainID`. This means that the first envelope to be sent over that session effectively sets the channel for that session. Then, in the case of receiving an envelope that corresponds to a different channel, I want to simply send back a `BAD_REQUEST` response and ignore that message. The other approach, that <@U0XPR4NP4> favors, would be to not ignore that message but route it to the proper channel instead. What do we think is the right way to go? <@U0N1D1UAE> and <@U0PB67X4K> may have thoughts on this.","ts":"1478268253.003232"},{"type":"message","user":"U0XQ35CDD","text":"Any potential performance issues aside, I like the idea of asking\/expecting the client to issue a different RPC per channel.","ts":"1478268335.003233"},{"type":"message","user":"U0XR6J961","text":"separate RPC streams for separate channels","ts":"1478268520.003234"},{"type":"message","user":"U0XR6J961","text":"define channel ID on RPC","ts":"1478268530.003235"},{"type":"message","user":"U0XQ35CDD","text":"That makes more sense to me as well.","ts":"1478268551.003236"},{"type":"message","user":"U0XR6J961","text":"drop RPC connection when you detect an invalid message","ts":"1478268551.003237"},{"type":"message","user":"U0XQ35CDD","text":"Drop or `BAD_REQUEST` and move on?","ts":"1478268560.003238"},{"type":"message","user":"U0XQ35CDD","text":"The latter is what I do now.","ts":"1478268568.003239"},{"type":"message","user":"U0XR6J961","text":"return BAD_REQUEST when closing the RPC stream?","ts":"1478268595.003240"},{"type":"message","user":"U0XQ35CDD","text":"Return BAD_REQUEST and keep serving the stream.","ts":"1478268608.003241"},{"type":"message","user":"U0XQ35CDD","text":"Later on, I want to have a threshold that says:","ts":"1478268617.003242"},{"type":"message","user":"U0XQ35CDD","text":"If you issue more than X BAD_REQUESTS during that session, I'm going to close the stream.","edited":{"user":"U0XQ35CDD","ts":"1478268651.000000"},"ts":"1478268631.003243"},{"type":"message","user":"U0XQ35CDD","text":"But I don't want to get too clever about it.","ts":"1478268636.003244"},{"type":"message","user":"U0XR6J961","text":"what?","ts":"1478268658.003246"},{"type":"message","user":"U0XR6J961","text":"that is insane","ts":"1478268689.003247"},{"type":"message","user":"U0XR6J961","text":"one bad request, drop it","ts":"1478268700.003248"},{"type":"message","user":"U0XQ35CDD","text":"What exactly makes it \"insane\"?","ts":"1478268707.003249"},{"type":"message","user":"U0XR6J961","text":"it's way complicated","ts":"1478268718.003250"},{"type":"message","user":"U0XQ35CDD","text":"That I cannot argue against, which is why I said I don't want to get too clever about it. One BAD_REQUEST and the stream drops, it is.","edited":{"user":"U0XQ35CDD","ts":"1478268827.000000"},"ts":"1478268747.003251"},{"type":"message","user":"U0XR6J961","text":"i wouldn't even send a response","ts":"1478268770.003252"},{"type":"message","user":"U0XQ35CDD","text":"Heh.","ts":"1478268778.003253"},{"type":"message","user":"U0XR6J961","text":"i'd close the stream with BAD_REQUEST","ts":"1478268780.003254"},{"type":"message","user":"U0XR6J961","text":"unless that's not an option to have a single value on rpc close","ts":"1478268810.003255"},{"type":"message","user":"U0XR6J961","text":"all of this project is way complicated","ts":"1478268837.003257"},{"type":"message","user":"U0PB67X4K","text":"well then shouldn't we make Broadcast a unary service rather than a streaming service?","ts":"1478269168.003258"},{"type":"message","user":"U0XR6J961","text":"i think the idea was to provide a stream of acks","ts":"1478269211.003259"},{"type":"message","user":"U0XR6J961","text":"garisingh: or do you mean outgoing?","ts":"1478269229.003260"},{"type":"message","user":"U0XR6J961","text":"i did benchmarks, and RPC setup overhead is significant","ts":"1478269247.003261"},{"type":"message","user":"U0XR6J961","text":"factor 10 i remember?","ts":"1478269260.003262"},{"type":"message","user":"U0XPR4NP4","text":"This is one of the shortcoming of the proto service definitions to me.  We cannot define 'initial stream parameters', like \"This broadcast is for channel X\", they must be implicitly set after the fact.  So from an API usage perspective, it's non-obvious that you cannot mix trans destined for different chains.  My proposal was to say a client _should_ open a stream per channel for broadcast, but as there's no way to prevent the client from simply connecting sending one, disconnecting, and repeating, that there was no real advantage to disallowing mixed chain IDs.","ts":"1478269275.003263"},{"type":"message","user":"U0XR6J961","text":"so you can tell from the message what channel it goes to?","ts":"1478269378.003264"},{"type":"message","user":"U0XPR4NP4","text":"Yes","ts":"1478269381.003265"},{"type":"message","user":"U0XQ35CDD","text":"Yes.","ts":"1478269382.003266"},{"type":"message","user":"U0XR6J961","text":"well then why do you need separate channels at all&gt;?","ts":"1478269390.003267"},{"type":"message","user":"U0XPR4NP4","text":"&gt; well then why do you need separate channels at all&gt;?\n\nI don't follow","ts":"1478269415.003268"},{"type":"message","user":"U0XR6J961","text":"&gt; So, when a client issues a Broadcast RPC, I would expect that all envelopes that are getting pushed to that RPC belong to the same channel\/`ChainID`.","ts":"1478269433.003269"},{"type":"message","user":"U0XPR4NP4","text":"Every request has a chainID embedded in it.  The question is, do we implicitly 'lock' a stream to the first chainID we observe and error on subsequent requests if that chainID changes, or do we tolerate it and route it correctly.  ~I think from a Kafka perspective, routing involves building a producer for the channel, and since the client is not disconnecting, it's nonobvious whether to destroy the old producer.~","edited":{"user":"U0XPR4NP4","ts":"1478269625.000000"},"ts":"1478269537.003270"},{"type":"message","user":"U0XQ35CDD","text":"Not really. I was thinking that from a performance perspective, mixing and matching doesn't really hurt us.","ts":"1478269582.003271"},{"type":"message","user":"U0XPR4NP4","text":"Oh, my mistake. I assumed it was a Kafka resource allocation\/destruction problem.","ts":"1478269606.003272"},{"type":"message","user":"U0XQ35CDD","text":"And you check every envelope for the chainID in its header anyway, so routing it to the right channel (for block creation) is not really a problem.","ts":"1478269625.003274"},{"type":"message","user":"U0XQ35CDD","text":"(At least the way I'm writing it now.)","ts":"1478269662.003275"},{"type":"message","user":"U0PB67X4K","text":"so seems there is no reason not to support multiple channels over the same session?","ts":"1478269668.003276"},{"type":"message","user":"U0XR6J961","text":"so while everybody is here","ts":"1478269707.003277"},{"type":"message","user":"U0XQ35CDD","text":"Other than enforcing a \"right\" behavior, no: <https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1478268335003233>","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1478268335003233","fallback":"[November 4th, 2016 7:05 AM] kostas: Any potential performance issues aside, I like the idea of asking\/expecting the client to issue a different RPC per channel.","ts":"1478268335.003233","author_subname":"kostas","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"Any potential performance issues aside, I like the idea of asking\/expecting the client to issue a different RPC per channel.","author_name":"Kostas Christidis","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/kostas","author_icon":"https:\/\/avatars.slack-edge.com\/2016-04-05\/31983107923_80db5353e9278df980c7_48.png","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1478269712.003278"},{"type":"message","user":"U0XR6J961","text":"i have only a few days left before i leave","ts":"1478269716.003280"},{"type":"message","user":"U0PB67X4K","text":":disappointed:","ts":"1478269727.003281"},{"type":"message","user":"U0XR6J961","text":"i think it would make sense to get sbft in and have some people get familiar with it","ts":"1478269735.003282"},{"type":"message","user":"U0XR6J961","text":"also once gabor's sbft application is in, testers should tear it apart","ts":"1478269788.003283"},{"type":"message","user":"U0XR6J961","text":"but it takes forever to get any patch in","ts":"1478269821.003284"},{"type":"message","user":"U0XR6J961","text":"it's ridiculous","ts":"1478269825.003285"},{"type":"message","user":"U0PB67X4K","text":"I don't have any issues with trying to get it in.  We are doing the same thing with the couchdb stuff on the ledger - may not make v1.0 cut, but still being merged in","ts":"1478269844.003286"},{"type":"message","user":"U0XR6J961","text":"the core of that sbft application is half a year old","ts":"1478269851.003287"},{"type":"message","user":"U0XR6J961","text":"block chain without bft...","ts":"1478269886.003288"},{"type":"message","user":"U0XR6J961","text":"why not just use database replication then","ts":"1478269901.003289"},{"type":"message","user":"U0PB67X4K","text":"<@U0XR6J961> - are these they only open requests:    <https:\/\/gerrit.hyperledger.org\/r\/#\/q\/owner:%22Simon+Schubert%22+status:open>","ts":"1478270147.003290"},{"type":"message","user":"U0XR6J961","text":"yea somebody merged some commits in the last minutes","ts":"1478270196.003291"},{"type":"message","user":"U0XR6J961","text":"ah chris ferris is merging","ts":"1478270331.003292"},{"type":"message","user":"U0XPR4NP4","text":"If you have a particular changeset that is having problems, you can always post to <#C1K16MW77|fabric-pr-review> which seems to push review quickly","ts":"1478270375.003293"},{"type":"message","user":"U0XR6J961","text":"well i guess gerrit is working out exactly as i predicted it would work out","ts":"1478270451.003294"},{"type":"message","user":"U0XR6J961","text":"the idea of reviews is that people familiar with the code review...","ts":"1478270609.003295"},{"type":"message","user":"U0PB67X4K","text":"that's honestly why I have not review the sbft code other than looking through it.  I am no expert in that area.  Other areas I can be helpful","ts":"1478271468.003296"},{"type":"message","user":"U0XR6J961","text":"well now it is in","ts":"1478271501.003297"},{"type":"message","user":"U0XR6J961","text":"and hopefully we can merge the sbft app as well","ts":"1478271514.003298"},{"type":"message","user":"U0XPR4NP4","text":"I +2-ed because at least once it's in, we can more easily test\/hack, but to Chris's point, there is almost no test attached to it","ts":"1478271629.003299"},{"type":"message","user":"U0XR6J961","text":"because it is glue logic","ts":"1478271781.003300"},{"type":"message","user":"U0XR6J961","text":"you test it by running the app","ts":"1478271789.003301"},{"type":"message","user":"U0XPR4NP4","text":"Right, could hook it into the behave tests though","ts":"1478271922.003302"},{"type":"message","user":"U0XPR4NP4","text":"(Since they already exercise the ab api)","ts":"1478271940.003303"},{"type":"message","user":"U0XR6J961","text":"for example","ts":"1478272043.003304"},{"type":"message","user":"U0XR6J961","text":"tho i think behave is way sluggish","ts":"1478272055.003305"},{"type":"message","user":"U0XR6J961","text":"there must be a reason that the test team used go for scripting their scenarios","ts":"1478272089.003306"},{"type":"message","user":"U0PB67X4K","text":"some of the new BDD tests are written in Go now (but using the behave meta language - at least I think that's the case)","ts":"1478272747.003307"},{"type":"message","user":"U0PB67X4K","text":"but 100% agree - there were plenty of Go BDD \/ test frameworks available","ts":"1478272785.003308"},{"type":"message","user":"U0XR6J961","text":"i call BS on BDD","ts":"1478272808.003309"},{"type":"message","user":"U0XR6J961","text":"it's what was called integration test before","ts":"1478272817.003310"},{"type":"message","user":"U0PB67X4K","text":":slightly_smiling_face:","ts":"1478272818.003311"},{"type":"message","user":"U0PB67X4K","text":"I agree","ts":"1478272828.003312"},{"type":"message","user":"U0KM61BCP","text":"<@U0XR6J961> I disagree - everything should have unit tests, period","ts":"1478272920.003313"},{"type":"message","user":"U0KM61BCP","text":"we should not be relying on integration\/bdd tests to know whether the code is broken or not","ts":"1478272938.003314"},{"type":"message","user":"U0XR6J961","text":"but we can rely on unit tests?","ts":"1478272953.003315"},{"type":"message","user":"U0XR6J961","text":"not everything is a nail","ts":"1478272971.003316"},{"type":"message","user":"U0KM61BCP","text":"note also that I was only submitting the patches that had already been 2+2\u2019ed and there was no comment as to why not merged\u2026","ts":"1478272983.003317"},{"type":"message","user":"U0XR6J961","text":"different code needs different ways of testing","ts":"1478272986.003318"},{"type":"message","user":"U0XR6J961","text":"i appreciate the merging","ts":"1478272999.003319"},{"type":"message","user":"U0KM61BCP","text":"of course, but this project has a lot to learn about testing\u2026 our code coverage is just over 50% which for a mature open source project is abysmal","ts":"1478273025.003320"},{"type":"message","user":"U0XR6J961","text":"well good that this is not a mature open source project","ts":"1478273043.003321"},{"type":"message","user":"U0KM61BCP","text":"we are also dealing with largely broken bdd tests which are not contributing to validation, so again, major fail","ts":"1478273061.003322"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1478273089.003323"},{"type":"message","user":"U0XR6J961","text":"also the bdd tests took so long to run for me that it was impossible to use them in the development loop","ts":"1478273107.003324"},{"type":"message","user":"U0KM61BCP","text":"all the more reason to have unit tests that at least help developers know when they are breaking stuff - immediately if they are developing with a watch on the code","ts":"1478273131.003325"},{"type":"message","user":"U0XR6J961","text":"i totally agree","ts":"1478273140.003326"},{"type":"message","user":"U0XR6J961","text":"but not every piece of code benefits equally much from a unit test","ts":"1478273157.003327"},{"type":"message","user":"U0XR6J961","text":"sometimes an integration test works better","ts":"1478273174.003328"},{"type":"message","user":"U0KM61BCP","text":"we also accumulate significant TD by lack of tests as code drifts yet we have no idea what we are breaking until we hit an edge case that isn\u2019t part of happy path testing that seems to be all that we currently have","ts":"1478273188.003329"},{"type":"message","user":"U0XR6J961","text":"the sbft code barely has any unit tests","ts":"1478273231.003330"},{"type":"message","user":"U0KM61BCP","text":"it catches stupid errors faster and again, much of our integration testing is not testing edge cases effectively","ts":"1478273233.003331"},{"type":"message","user":"U0XR6J961","text":"essentially all tests are integration tests","ts":"1478273237.003332"},{"type":"message","user":"U0XR6J961","text":"because a distributed system implementation just can't be tested thoroughly with unit tests","ts":"1478273251.003333"},{"type":"message","user":"U0KM61BCP","text":"only - I agree","ts":"1478273261.003334"},{"type":"message","user":"U0KM61BCP","text":"I am not asking or saying only","ts":"1478273267.003335"},{"type":"message","user":"U0KM61BCP","text":"I am saying that all code should have unit tests","ts":"1478273275.003336"},{"type":"message","user":"U0XR6J961","text":"yes, that's where i disagree","ts":"1478273294.003337"},{"type":"message","user":"U0KM61BCP","text":"this is not a closed source project - it is open source\u2026 code will come from many sources - in fact, we want that","ts":"1478273348.003338"},{"type":"message","user":"U0KM61BCP","text":"and when developers see code without unit tests, it gives them little confidence and often they don\u2019t engage","ts":"1478273376.003339"},{"type":"message","user":"U0XR6J961","text":"ah?","ts":"1478273400.003340"},{"type":"message","user":"U0XR6J961","text":"do you have any links that support that claim?","ts":"1478273415.003341"},{"type":"message","user":"U0KM61BCP","text":"look at any other mature open source project - they will have test coverage in the high 80 or low 90s","ts":"1478273416.003342"},{"type":"message","user":"U0KM61BCP","text":"this is human nature","ts":"1478273425.003343"},{"type":"message","user":"U0XR6J961","text":"but this is not a mature project!","ts":"1478273427.003344"},{"type":"message","user":"U0KM61BCP","text":"that is evident","ts":"1478273434.003345"},{"type":"message","user":"U0XR6J961","text":"the design isn't even finalized","ts":"1478273442.003346"},{"type":"message","user":"U0XR6J961","text":"well, the sbft code has almost no unit tests, but has almost complete test coverage safe error returns\/panics","ts":"1478273673.003347"},{"type":"message","user":"U0XR6J961","text":"all done via integration tests","ts":"1478273688.003348"},{"type":"message","user":"U0XR6J961","text":"do you claim it still needs unit tests?","ts":"1478273706.003349"},{"type":"message","user":"U0XR6J961","text":"<@U1AU8DRQR>: <https:\/\/jira.hyperledger.org\/browse\/FAB-967>","ts":"1478273908.003350"},{"type":"message","user":"U2BGFAHC7","text":"<http:\/\/jepsen.io\/analyses.html> Maybe ask this chap :slightly_smiling_face:","ts":"1478274059.003351"},{"type":"message","user":"U0XR6J961","text":"maybe first build the system until we're confident that it works flawlessly, then get our dreams crushed by jepsen","ts":"1478274112.003352"},{"type":"message","user":"U2BGFAHC7","text":"crushed _in public_","ts":"1478274133.003353"},{"type":"message","user":"U0XR6J961","text":"same thing","ts":"1478274162.003354"},{"type":"message","user":"U0XR6J961","text":"well, i'm out for the next week","ts":"1478274476.003355"},{"type":"message","user":"U0XR6J961","text":"good that we got the sbft stuff in","ts":"1478274481.003356"},{"type":"message","user":"U0ZJZBJLF","text":"That's the aphyer guy? ","ts":"1478275072.003357"},{"type":"message","user":"U0XQ35CDD","text":"Yes.","ts":"1478275084.003358"},{"type":"message","user":"U0ZJZBJLF","text":"He had a really funny profile pic on github","ts":"1478275104.003359"},{"type":"message","user":"U0ZJZBJLF","text":"Why can't we have integration tests in unit tests?","ts":"1478275153.003360"},{"type":"message","user":"U0ZJZBJLF","text":"In gossip i have tests that spawn 20 nodes and kill some of them, check they all replicate information, etc.","edited":{"user":"U0ZJZBJLF","ts":"1478275278.000000"},"ts":"1478275187.003361"},{"type":"message","user":"U0ZJZBJLF","text":"If it was easty to configure fabric peers in pure go that could have been done","ts":"1478275242.003362"},{"type":"message","user":"U0XR6J961","text":"yea but that's not a unit test","ts":"1478275349.003364"},{"type":"message","user":"U0XR6J961","text":"that's an integration test","ts":"1478275354.003365"},{"type":"message","user":"U0ZJZBJLF","text":"Yeah i mean- that they will run as a unit test","ts":"1478275382.003366"},{"type":"message","user":"U0XR6J961","text":"well they run in go test, but i wouldn't call it a unit test","ts":"1478275401.003367"},{"type":"message","user":"U2BGFAHC7","text":"Go\u2019s http has an interesting package that makes testing easier:\n<https:\/\/golang.org\/pkg\/net\/http\/httptest\/>\nSeems like a good model to emulate?","ts":"1478275485.003368"},{"user":"U2XNKMF24","text":"<@U2XNKMF24|james> has joined the channel","type":"message","subtype":"channel_join","ts":"1478276147.003369"},{"type":"message","user":"U1AU8DRQR","text":"For the glue code in sbft app, I will try to add tests next week. Hope I will have enough time to finish them ","ts":"1478280518.003372","reactions":[{"name":"+1","users":["U0KM61BCP"],"count":1}]},{"user":"U11MANG9G","text":"<@U11MANG9G|jonathanlevi> has joined the channel","type":"message","subtype":"channel_join","ts":"1478285408.003373"},{"type":"message","user":"U11MANG9G","text":"Just to drop a line here: I am of the opinion that in the long run, tests accelerate development time\/time to market. It builds confidence in existing code\/modules\/helps updating\/extending\/refactoring and re-using\u2026","ts":"1478289107.003374"},{"type":"message","user":"U11MANG9G","text":"Even if the code is not \u201cmature\u201d or in \u201cproduction\u201d yet\u2026 or some would say: especially when the code is not \u201cmature\u201d or in \u201cproduction\u201d it should be tested as much as possible.","ts":"1478289160.003375"},{"type":"message","user":"U11MANG9G","text":"Unit-tests are really great. Especially during\/for development\/developers.","ts":"1478289179.003376","reactions":[{"name":"+1","users":["U0KM61BCP"],"count":1}]},{"type":"message","user":"U11MANG9G","text":"OK, OK, 2 lines (if you have like a 65\u201d monitor probably :wink:. Not true for my laptop).","ts":"1478289215.003377"},{"type":"message","user":"U0PB67X4K","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2039\/6> - want to get one of your opinions.  I like the fact that reuse is being attempted here, but want to make sure folks are okay with this versus moving some functionality into the common package","ts":"1478340375.003378"},{"type":"message","user":"U0XPR4NP4","text":"Commented on Gerrit","ts":"1478408561.003379"},{"type":"message","user":"U0UL07VSL","text":"this should be a fairly easy fix, but probably worth do it sooner since txs will get dropped w\/o getting caller notified <@U0XPR4NP4>  <@U0UGH3X7X>","edited":{"user":"U0UL07VSL","ts":"1478438336.000000"},"ts":"1478411929.003380"},{"type":"message","user":"U0UL07VSL","text":"<https:\/\/jira.hyperledger.org\/browse\/FAB-990>","ts":"1478411932.003381"},{"type":"message","user":"U0N4P17ND","text":"I have a question about chaincode determinism - normally to make chaincode deterministic, we should not use date time API, right? But I believe this is some sort of common use case: accounts can have expiration time and accordingly to the user requirements transfer should not be made to the non active account (accounts are also stored in KVS) and the check is part of chaincode contract.... So question here: how to avoid non determinism with such approach as the check would involve date time API call? Any thoughts here?","ts":"1478515654.003386"},{"type":"message","user":"U0UL07VSL","text":"you can use txs to put current time in your world state, probably triggered by a separate clock service that runs periodically. this is valid since in many countries you have a central trusted time service that financial systems retrieve date\/time from","edited":{"user":"U0UL07VSL","ts":"1478516585.000000"},"ts":"1478516130.003387"},{"type":"message","user":"U0UL07VSL","text":"speaking of determinism, I think there is a interesting case where if you have multiple putStates called at different order by different chaincode, even if they are gurantted to be the same on the db, the hash calculated from delta would still be different <@U0TFEHX8E>","edited":{"user":"U0UL07VSL","ts":"1478516259.000000"},"ts":"1478516241.003388"},{"type":"message","user":"U0N4P17ND","text":"how I understand determinism - is that if I replay tx from the same state - I should get the same result, this seems to be an idea of blockchain, If I have date time check in my chaincode - this might be not true.\nFor the second sentence, you wrote - I'm not sure that I got it. If this is true - this sounds like a bug as transactions are ordered and should give the same result on each peer, if they have deterministic code...","ts":"1478516611.003391"},{"type":"message","user":"U0UL07VSL","text":"for the first sentence, you use a time provider service to write time to your blockchain, thi s no different from another invoke tranasction, which will get your time synchonized to all peers. other peers will use the time stored in the world state of your chaincode rather calling any of the date\/time functions","edited":{"user":"U0UL07VSL","ts":"1478517535.000000"},"ts":"1478517429.003392"},{"type":"message","user":"U0N4P17ND","text":"so external provider will give me an option of the same date-time on all the peers, which is not something I'm really have doubts about - I can imagine that all my hosts running peers are in sync, and having the same system time. The doubts I have - is that when I replay the same transactions in few month let's say - I'll got different results. As invocation has no (and should not have to have) time in the parameters.","ts":"1478518678.003396"},{"type":"message","user":"U0N4P17ND","text":"or maybe I didn't get the idea you propose..?","ts":"1478518727.003397"},{"type":"message","user":"U0XPR4NP4","text":"<@U0N4P17ND> The idea would be that you use the time that is on the chain, so that when you replay the chain, you are also replaying the time.  And since all peers have the same chain, they have the same time.","ts":"1478528786.003398"},{"type":"message","user":"U0ZJZBJLF","text":"hey Consensus guys. I'm starting to plan the gossip aspect of the multi channel stuff","ts":"1478528964.003399"},{"type":"message","user":"U0ZJZBJLF","text":"remember that code that you said is going to be \"librarized\" (made into a library)","ts":"1478528986.003400"},{"type":"message","user":"U0ZJZBJLF","text":"that allows me to find for a block- for what organizations it can be sent to","ts":"1478529017.003401"},{"type":"message","user":"U0ZJZBJLF","text":"and to know which organization is a certain peer's PKI-id","ts":"1478529038.003402"},{"type":"message","user":"U0ZJZBJLF","text":"?","ts":"1478529055.003403"},{"type":"message","user":"U0N4P17ND","text":"<@U0XPR4NP4> - thanks, so the idea that my chaincode is invoked and for the first invocation stores the time it was invoked against, so each following invocations will reuse that time, that's what I was thinking about... as well...","edited":{"user":"U0N4P17ND","ts":"1478529081.000000"},"ts":"1478529070.003404"},{"type":"message","user":"U0XPR4NP4","text":"<@U0N4P17ND> In the case of an oracle-type service, which periodically writes the time to the chain, you could always reference the value exposed by that service in your chaincode.","ts":"1478529191.003406"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZJZBJLF> Yes, I know to what you are referring","ts":"1478529228.003407"},{"type":"message","user":"U0ZJZBJLF","text":"so, any idea if that's written yet?","ts":"1478529248.003408"},{"type":"message","user":"U0N4P17ND","text":"so why while replaying the tx oracle service will write me the old time?","ts":"1478529251.003409"},{"type":"message","user":"U0ZJZBJLF","text":"or in progress?","ts":"1478529253.003410"},{"type":"message","user":"U0XPR4NP4","text":"<@U0N4P17ND> The oracle-service writes it to the chain, so when replaying, you also replay the writes of the oracle service, so after you replay block 11, your 'simulated time' corresponds to the time encoded by the oracle onto the chain at block 11.  Essentially, the key is not to depend on a system clock, but rather to depend on a 'chain clock'.","ts":"1478529381.003411"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZJZBJLF> I'd say it is in progress.  I'll also point out, per discussions with <@U0KN2SSKE> <@U0ULK2JPP> their preference was to write a translation layer which converted the configuration transaction into the normal MVCC type data so that it could be queried and utilized with all the normal peer tools, you might want to simply pull it from there once that translation layer is completed.","ts":"1478529446.003412"},{"type":"message","user":"U0ZJZBJLF","text":"can you point me to the data type please? (where is it in the code)","ts":"1478529510.003413"},{"type":"message","user":"U0N4P17ND","text":"<@U0XPR4NP4> yes... make sense... the only thing which seems to be unclear: at the point I replay I don't have `block 11`, right? how oracle service knows what to put there at the time of replay?","ts":"1478529539.003414"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZJZBJLF> The short answer is, there's some code in development for it, but nothing committed, and nothing stable enough I'd be comfortable suggesting you work off of.","ts":"1478529549.003415"},{"type":"message","user":"U0ZJZBJLF","text":"ok, then how about the following course of action? I'll create a go interface that could be implemented in the future and use that for the code, and I'll share it with the people that are supposed to implement it and they acknowledge\/disagree the proposed API?","ts":"1478529618.003416"},{"type":"message","user":"U0ZJZBJLF","text":"I just want to have something to hold on to, so I could progress","ts":"1478529628.003417"},{"type":"message","user":"U0XPR4NP4","text":"<@U0N4P17ND> Your chaincode never interacts with the oracle service.  Your chaincode interacts with the data the oracle service put onto the chain.  In that sense, when you replay, you are only utilizing information on the chain (which you do have), and do not need to interact with the oracle service.  The oracle service is responsible for putting the data onto the chain, then it is done.","ts":"1478529652.003418"},{"type":"message","user":"U0UL07VSL","text":"just some caution on MVCC, it is likely to be an unwanted to feature for financial use cases, where strong consistency is almost always a pre-requirement and you can't have txs failed later without getting caller noticed","edited":{"user":"U0UL07VSL","ts":"1478529850.000000"},"ts":"1478529655.003419"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZJZBJLF> Sounds like a good plan","ts":"1478529669.003420"},{"type":"message","user":"U0ZJZBJLF","text":"can you point me at the people I need to share it with? :slightly_smiling_face:","ts":"1478529686.003421"},{"type":"message","user":"U0XPR4NP4","text":"<@U0UGH3X7X> is the one working on populating the genesis block, but <@U0S5KF44D> and <@U0ULK2JPP> might also have some interest.  I'd also like to be copied.","ts":"1478529750.003422"},{"type":"message","user":"U0UGH3X7X","text":"scrum ...","ts":"1478530616.003424"},{"type":"message","user":"U0XPR4NP4","text":"link?","ts":"1478530774.003425"},{"type":"message","user":"U0UGH3X7X","text":"<https:\/\/hangouts.google.com\/hangouts\/_\/umeidnchr5gk5ktqsrqlgmuvzqe>","ts":"1478530794.003426"},{"type":"message","user":"U0UGH3X7X","text":"folks who didn't make the scrum please post your 1 or 2 liner summary here","ts":"1478531725.003427"},{"type":"message","user":"U1B5DPRLG","text":"We are still running tests for v0.6 as we get new loads (new load received Fri afternoon; possibly another very soon) and we are getting started on tests for v1.0 For more details see <https:\/\/jira.hyperledger.org\/browse\/FAB-531> and <https:\/\/jira.hyperledger.org\/browse\/FAB-979>","ts":"1478532308.003428"},{"type":"message","user":"U0ZJZBJLF","text":"OK, I defined an API that needs to be implemented by the upper layers that use the gossip (basically, the peer, ledger layer):\n<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2325\/>\nI'd like you guys { <@U0UGH3X7X>  , <@U0S5KF44D>  , <@U0ULK2JPP>  , <@U1HFNJB50>  } to take a look and tell me what you think","ts":"1478540223.003430"},{"type":"message","user":"U0W7D64LC","text":"bunch of new videos posted on <#C28M6TC90|playbacks> and our youtube channel at <https:\/\/www.youtube.com\/channel\/UCCFdgCWH_1vCndMPVqQlwZw> Check them out and subscribe\u2026 including tool to generate the genesis block","attachments":[{"service_name":"YouTube","title":"Hyperledger Fabric","title_link":"https:\/\/www.youtube.com\/channel\/UCCFdgCWH_1vCndMPVqQlwZw","text":"Hyperledger fabric","fallback":"YouTube: Hyperledger Fabric","thumb_url":"https:\/\/yt3.ggpht.com\/-p3I4WZFQpKc\/AAAAAAAAAAI\/AAAAAAAAAAA\/nfXbn9j5Dao\/s900-c-k-no-mo-rj-c0xffffff\/photo.jpg","from_url":"https:\/\/www.youtube.com\/channel\/UCCFdgCWH_1vCndMPVqQlwZw","thumb_width":900,"thumb_height":900,"service_icon":"https:\/\/s.ytimg.com\/yts\/img\/favicon-vflz7uhzw.ico","id":1}],"ts":"1478540333.003431"},{"type":"message","user":"U0UGH3X7X","text":"@yacov, can you add the people on your list as reviewers to 2325 so gerrit can do notifications  ?  <@U0KN2SSKE> also  ...","edited":{"user":"U0UGH3X7X","ts":"1478552902.000000"},"ts":"1478552667.003433"},{"type":"message","user":"U0ZJZBJLF","text":"I'll assume you meant to tag me, and yes","ts":"1478552824.003434"},{"type":"message","user":"U0ZJZBJLF","text":"in a minute, I'll push a modified change set, <@U0XPR4NP4>  you win this time :slightly_smiling_face:","ts":"1478552863.003435"},{"type":"message","user":"U0ZJZBJLF","text":"added","ts":"1478553868.003437"},{"type":"message","user":"U0PB67X4K","text":"<@U0XPR4NP4>  - your changes are merged","ts":"1478562471.003438"},{"type":"message","user":"U294C6FDW","text":"\"[FAB-707] disconnected Peer can't recover from lost connection, then start sending view.\"    I took a look at the code   pbft-core.go and it seems in the  \"stateUpdatedEvent\" where update.seqNo  is far less than  instance.seqNo  can cause loop issue.  that is because  instance.Checkpoint(update.seqNo, update.id) will store a values so low (vc.H )  that will cause viewchange     go  into  \"a loop like\"   thus cause nothing get updated.   I play around it a bit","ts":"1478568108.003439"},{"type":"message","user":"U0UL07VSL","text":"<@U294C6FDW> the issue has already been concluded as a design \"intent\/gap\" if you read the comment section, not a code issue; hopefully the suspect message will be implemented in sbft <@U0XQ35CDD> to permanently solve the problem","edited":{"user":"U0UL07VSL","ts":"1478588311.000000"},"ts":"1478583524.003440"},{"type":"message","user":"U1AU8DRQR","text":"<@U0KM61BCP> and everybody about <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2037\/> and unit testing: I am creating tests for connection.go, persist.go, crypto.go. main.go is tested in the next commit.1218 lines are already covered with tests (see backend test, and the next commit, and the rest are config files, structs, protos). however, I won't write tests for functions which are just calling grpc.Dial.","ts":"1478592166.003446","reactions":[{"name":"+1","users":["U0KM61BCP"],"count":1}]},{"type":"message","user":"U294C6FDW","text":"the issue is when the Server comes up from a \"stop\". the logs of all 4 peers   shows \"H\" stay within the SeqNo befor it comes down.  It's when it comes back up again where update.seqNo\/instance.seqNo    causing the LOOP.  the issue might be which value to use. the code  has   \"instance.lastExec = update.seqNo from the ckpt  but not   instance.seqNo.","ts":"1478603288.003447"},{"type":"message","user":"U0XPR4NP4","text":"<@U294C6FDW> With respect to FAB-707, this is expected behavior.  The `stateUpdatedEvent` does deliberately loop when the state update comes back with with a state update which it too farin the past.  I think you will find that `instance.seqNo` is only used when the peer is the new PBFT primary, where it is appropriately set after a view change, so this is not necessary to set after state transfer.","ts":"1478613414.003448"},{"type":"message","user":"U1AU8DRQR","text":"please review these: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2065\/> <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2037\/>","ts":"1478620801.003449"},{"type":"message","user":"U0ZJZBJLF","text":"<@U0XPR4NP4>  so, back to the multi-channel support API design, since aso said the primitives I require will be there, can we keep the PKI-id in the method signature? That *really* simplifies things to me","ts":"1478621233.003450"},{"type":"message","user":"U0XPR4NP4","text":"What about instead a\n\n```\nCertByPKIid(pki PKidType) identity []byte\n```\n\nprovided by the crypto folks, and then a:\n\n```\nAuthorized(chainID []byte, identity []byte)\n```\n\nProvided by the orderer originated lib","ts":"1478621643.003451"},{"type":"message","user":"U0ZJZBJLF","text":"was on the phone with adc and aso. \nidentity you mean cert?","ts":"1478623661.003452"},{"type":"message","user":"U0ZJZBJLF","text":"if yes then sure","ts":"1478623667.003453"},{"type":"message","user":"U294C6FDW","text":"With respect to FAB-707,   This issue might not  be related to  pbft.  with two quick change to the  pbft-core.go  seems to correct the looping and able to continue to create blocks.  my concerns if this was in production, and one of the VP is in this loop how do we correct the issue before the second, third  one decided to bring there peer down because of DR testing or weekend outage?","ts":"1478629216.003454"},{"type":"message","user":"U0XPR4NP4","text":"<@U294C6FDW> The design of PBFT is such that it tolerates up to f peers being out of sync.  If another peer were to fail (here where f=1, n=4), then the network would resync and the failed 'looping' peer would pick back up and function normally.","ts":"1478629341.003455"},{"type":"message","user":"U0XV1HDL3","text":"<@U294C6FDW> - You have to make up your mind about the system assumption. The protocol as implemented will halt when a second peer is down because it is designed to tolerate only 1 failing node (f=1). If you want it to continue with two down (f=2), you need n=7=3f+1 nodes. Alternatively, one could reconfigure the group (through a transaction that is ordered) and eliminate a node for which some trusted entity (or a majority of the nodes)  confirm it is failed and must be replaced. This is called \"reconfiguration\" and available in systems like BFT-SMaRT (<http:\/\/www.di.fc.ul.pt\/~bessani\/publications\/dsn14-bftsmart.pdf>). The design of this is known but not yet implemented here. I believe it is important to have such a reconfiguration method implemented.","ts":"1478678601.003456"},{"type":"message","user":"U1AU8DRQR","text":"don't forget to review <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2065\/> <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2037\/> :smile:","ts":"1478688747.003457"},{"type":"message","user":"U0ZJZBJLF","text":"is `ab.proto` changed to accommodate multi channel support? (it doesn't seem so to me, but I want to check)\nIf not- can someone please describe what will be the changes? is another item going to be added to `SeekInfo`?","edited":{"user":"U0ZJZBJLF","ts":"1478694540.000000"},"ts":"1478694485.003458"},{"type":"message","user":"U0PB67X4K","text":"should be a `ChainID` parameter in there now?","ts":"1478695831.003460"},{"type":"message","user":"U0ZJZBJLF","text":"oh, didn't see that, thanks :slightly_smiling_face:","ts":"1478695925.003461"},{"type":"message","user":"U0ZJZBJLF","text":"and where is the credentials of the organization?","ts":"1478695959.003462"},{"type":"message","user":"U0ZJZBJLF","text":"I thought the orderer needs to be sure that the peer is in the right organization to give out blocks from the chain","ts":"1478696095.003463"},{"type":"message","user":"U1HFNJB50","text":"Now you submit the `Envelope` to the orderers: ```\/\/ Envelope wraps a Payload with a signature so that the message may be authenticated\nmessage Envelope {\n    \/\/ A marshaled Payload\n    bytes payload = 1;\n\n    \/\/ A signature by the creator specified in the Payload header\n    bytes signature = 2;\n}```","ts":"1478700946.003464"},{"type":"message","user":"U0ZJZBJLF","text":"the signature on the envelop is the signature of who? the peer that calls deliver?","ts":"1478701027.003465"},{"type":"message","user":"U1HFNJB50","text":"I guess, so. <@U0XPR4NP4>, <@U0ULK2JPP> Can you please confirm?","ts":"1478701090.003466"},{"type":"message","user":"U0XPR4NP4","text":"The signature is from the `creator` specified in the `Payload.header`","edited":{"user":"U0XPR4NP4","ts":"1478701218.000000"},"ts":"1478701207.003467"},{"type":"message","user":"U0XPR4NP4","text":"And this should be from the client who calls `Broadcast` (not `Deliver`)","ts":"1478701250.003469"},{"type":"message","user":"U0ZJZBJLF","text":"but I asked about `Deliver`","ts":"1478701295.003470"},{"type":"message","user":"U0ZJZBJLF","text":"there is no `envelope` there","edited":{"user":"U0ZJZBJLF","ts":"1478701321.000000"},"ts":"1478701306.003471"},{"type":"message","user":"U0XPR4NP4","text":"&gt; the signature on the envelop is the signature of who? the peer that calls deliver?\n\nBut you asked about the Evelope signature?","ts":"1478701357.003473"},{"type":"message","user":"U0ZJZBJLF","text":"true, true","ts":"1478701389.003474"},{"type":"message","user":"U0ZJZBJLF","text":"I was confsued","ts":"1478701395.003475"},{"type":"message","user":"U0ZJZBJLF","text":"can you explain then where do the credentials pass in the Deliver?","ts":"1478701407.003476"},{"type":"message","user":"U0XPR4NP4","text":"The authentication for `Deliver` is done at the TLS handshake","ts":"1478701621.003477"},{"type":"message","user":"U0ZJZBJLF","text":"isn't it a problem? I thought that it is not necessary that the SSL cert is related to the COP cert, so how do you associate the invocation to the peer's org?","ts":"1478701717.003478"},{"type":"message","user":"U0XPR4NP4","text":"My working assumption has been that TLS certs will have a chain of trust to a peer org CA.  I'm not sure why this would not be the case.","edited":{"user":"U0XPR4NP4","ts":"1478701863.000000"},"ts":"1478701845.003479"},{"type":"message","user":"U0PB67X4K","text":"<@U0XPR4NP4>  - so you are assuming mutual TLS (related to our discussion yesterday) for communication with the orderer nodes?","ts":"1478702707.003481"},{"type":"message","user":"U0XPR4NP4","text":"Correct","ts":"1478702724.003482"},{"type":"message","user":"U0XQ35CDD","text":"How else would it work <@U0PB67X4K>?","ts":"1478702827.003483"},{"type":"message","user":"U0XQ35CDD","text":"s\/would\/could","ts":"1478702901.003484"},{"type":"message","user":"U0PB67X4K","text":"signature on the DeliverUpdate message","ts":"1478702909.003485"},{"type":"message","user":"U0PB67X4K","text":"here's the thing - in the prior architecture, identity is always extracted from the signing certificate","ts":"1478702956.003486"},{"type":"message","user":"U0PB67X4K","text":"I am not opposed to mutual TLS","ts":"1478702963.003487"},{"type":"message","user":"U0PB67X4K","text":"but we have never done mutual TLS to date","ts":"1478702975.003488"},{"type":"message","user":"U0XPR4NP4","text":"Without mutual TLS auth, it introduces us to some other unpleasant problems, like unauthorized clients calling the RPC then going silent.  The auth at the upper layer simplifies things a bit, I think.","ts":"1478702983.003489"},{"type":"message","user":"U0PB67X4K","text":"anywhere in this project","ts":"1478702985.003490"},{"type":"message","user":"U0PB67X4K","text":"I tend to agree","ts":"1478702996.003491"},{"type":"message","user":"U0PB67X4K","text":"but you'll still need to do the authorization check above the TLS layer","ts":"1478703047.003492"},{"type":"message","user":"U0PB67X4K","text":"TLS will just filter out untrusted connections","edited":{"user":"U0PB67X4K","ts":"1478703065.000000"},"ts":"1478703054.003493"},{"type":"message","user":"U0XQ35CDD","text":"So you're saying that it's unavoidable and we should also be asking for a signature on the DeliverUpdate messages? Why?","ts":"1478703102.003495"},{"type":"message","user":"U0PB67X4K","text":"oh - sorry - I tend to agree with using mutual TLS","ts":"1478703137.003496"},{"type":"message","user":"U0XPR4NP4","text":"Certainly, for `Broadcast` and `Deliver` with channels we now have to make sure the call is authorized for the particular chainID","ts":"1478703139.003497"},{"type":"message","user":"U0PB67X4K","text":"right","ts":"1478703147.003498"},{"type":"message","user":"U0PB67X4K","text":"So - mutual TLS filters out untrusted connections - meaning you can't just hang around if you are not allows to connect at all","ts":"1478703174.003499"},{"type":"message","user":"U0ZJZBJLF","text":"How does the orderer learn of the certificate of each peer then?","ts":"1478703217.003500"},{"type":"message","user":"U0XPR4NP4","text":"On `Broadcast` we _could_ filter by both TLS cert and signing cert, or just signing cert, but we must verify the signing cert.","ts":"1478703220.003501"},{"type":"message","user":"U0PB67X4K","text":"you'd still need to \"propagate \/ forward\" the client certificate to the Deliver call and check that they were authorized for the channel.  Now a nice model might be to actually use the GRPC interceptors to do this","edited":{"user":"U0PB67X4K","ts":"1478703243.000000"},"ts":"1478703224.003502"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZJZBJLF> In the TLS handshake, the certificates are exchanged.","ts":"1478703252.003504"},{"type":"message","user":"U0PB67X4K","text":"is Layer 4 versus Layer 7","ts":"1478703269.003505"},{"type":"message","user":"U0PB67X4K","text":"TLS is layer 4","ts":"1478703273.003506"},{"type":"message","user":"U0ZJZBJLF","text":"what about the hostname\/ip issue? in the client certificate","edited":{"user":"U0ZJZBJLF","ts":"1478703291.000000"},"ts":"1478703273.003507"},{"type":"message","user":"U0XPR4NP4","text":"Pretty sure <@U0XR6J961>'s TLS code intercepted the cert, would need to look again.","ts":"1478703278.003508"},{"type":"message","user":"U0PB67X4K","text":"I think he did it that way","ts":"1478703292.003510"},{"type":"message","user":"U0PB67X4K","text":"no issue with hostname \/ ip on the client cert","ts":"1478703315.003511"},{"type":"message","user":"U0ZJZBJLF","text":"oh? really?","ts":"1478703320.003512"},{"type":"message","user":"U0ZJZBJLF","text":"only the server?","ts":"1478703324.003513"},{"type":"message","user":"U0PB67X4K","text":"right","ts":"1478703327.003514"},{"type":"message","user":"U0XQ35CDD","text":"<@U0XPR4NP4>: You cannot extract this in the application layer IIRC. <@U0ZJZBJLF> Wasn't that the point you were making when we had that call? ","edited":{"user":"U0XQ35CDD","ts":"1478703436.000000"},"ts":"1478703338.003515"},{"type":"message","user":"U0PB67X4K","text":"so TLS client will verify the hostname of the server","ts":"1478703341.003516"},{"type":"message","user":"U0XQ35CDD","text":"I remember exploiting the TLS Unique property to do some certificate pinning and associate one cert with another. But I might be wrong. ","edited":{"user":"U0XQ35CDD","ts":"1478703404.000000"},"ts":"1478703384.003517"},{"type":"message","user":"U0PB67X4K","text":"server will verify client cert against its trust store","ts":"1478703386.003518"},{"type":"message","user":"U0ZJZBJLF","text":"Yeah Gari you're right- I totally forgot what was the purpose of that in the first place :upside_down_face:","ts":"1478703388.003519"},{"type":"message","user":"U0PB67X4K","text":"(I spent years dealing with TLS in DataPower)","ts":"1478703407.003521","reactions":[{"name":"+1","users":["U0ZJZBJLF"],"count":1}]},{"type":"message","user":"U0PB67X4K","text":"and all of its fun and exciting issues","ts":"1478703418.003522"},{"type":"message","user":"U0ZJZBJLF","text":"<@U0XQ35CDD>  you can if you configure the client in a different way","ts":"1478703482.003524"},{"type":"message","user":"U0ZJZBJLF","text":"when I said you can't I simply used fabric 0.5 with SSL on and saw you can't","edited":{"user":"U0ZJZBJLF","ts":"1478703575.000000"},"ts":"1478703507.003525"},{"type":"message","user":"U0ZJZBJLF","text":"but Simon did something else entirely","ts":"1478703514.003526"},{"type":"message","user":"U0ZJZBJLF","text":"I mean, I haven't seen it- but I saw a commit simon did so I guess you can","ts":"1478703556.003527"},{"type":"message","user":"U0PB67X4K","text":"on another point that <@U0XPR4NP4> made as well - the \"out of the box\" plan for mapping peer certificates to \"participants\"  (since a participant may have multiple peers) was to use one of 2 mechanisms:\n\n1) mapping of participant to root \/ intermediate authority\n2) if all certs issued by same root authority use something in the DN to distiguish particpants","ts":"1478703614.003529"},{"type":"message","user":"U0PB67X4K","text":"of course you could use individual certs as well","ts":"1478703642.003530"},{"type":"message","user":"U0PB67X4K","text":"we are going to need a common piece of crypto code for peers and orderers which implements this logic","ts":"1478703664.003531"},{"type":"message","user":"U0PB67X4K","text":"we REALLY need to write this all down somewhere  :disappointed:","ts":"1478703684.003532"},{"type":"message","user":"U0PB67X4K","text":"<@U0XPR4NP4> and <@U0XQ35CDD>  - I'm in your neck of the woods early next week (M-W) if we want to draw it up on the board.   We'll be working through similar issue(s) for the endorsers, etc","ts":"1478703745.003533","reactions":[{"name":"+1","users":["U0XQ35CDD","U0XPR4NP4"],"count":2}]},{"type":"message","user":"U0XQ35CDD","text":"So based on what I read here, you'll need your own TransportAuthenticator to extract the TLS client certificate. <https:\/\/github.com\/grpc\/grpc-go\/issues\/111>","attachments":[{"service_name":"GitHub","title":"Access to TLS client certificate \u00b7 Issue #111 \u00b7 grpc\/grpc-go \u00b7 GitHub","title_link":"https:\/\/github.com\/grpc\/grpc-go\/issues\/111","text":"I can't see any way for an RPC method to authenticate a client based on a TLS certificate. An example program where an RPC method echoes the client TLS certificate would be great.","fallback":"GitHub: Access to TLS client certificate \u00b7 Issue #111 \u00b7 grpc\/grpc-go","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/419909?v=3&s=400","from_url":"https:\/\/github.com\/grpc\/grpc-go\/issues\/111","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1478703921.003534"},{"type":"message","user":"U0PB67X4K","text":"so maybe start with the signature approach  :wink:","ts":"1478704014.003536"},{"type":"message","user":"U0XQ35CDD","text":"At any rate, it seems that you're all considering this as a solved problem, so I am good.","ts":"1478704020.003537"},{"type":"message","user":"U0XQ35CDD","text":"Right. ","ts":"1478704023.003538"},{"type":"message","user":"U0PB67X4K","text":"depends on how much code you want to write   :wink:","ts":"1478704026.003539"},{"type":"message","user":"U0PB67X4K","text":"we can make it work either way","ts":"1478704039.003540"},{"type":"message","user":"U0PB67X4K","text":"frankly, again we should have common GRPC server code as well","ts":"1478704064.003541"},{"type":"message","user":"U0XPR4NP4","text":"Attaching a signature to `Deliver` would definitely not be much work.  But, if we are going to require mutual TLS, seems like we would be making the client do redundant work.","ts":"1478704075.003542"},{"type":"message","user":"U0PB67X4K","text":"my initial take would be to forget about mutual TLS for now and go with the signature approach since that's the way it's being done in the peer code for now as well","ts":"1478704163.003543"},{"type":"message","user":"U0PB67X4K","text":"<@U0ZJZBJLF> does it in gossip as well based on the discussion yesterday?","edited":{"user":"U0PB67X4K","ts":"1478704204.000000"},"ts":"1478704187.003544"},{"type":"message","user":"U0ZJZBJLF","text":"I just want to understand something- the server side (orderer) would implement its TLS server transport in a way that walks on the certificate chain up until the CA, and *BOTH* would need to check for CRLs right?\n<@U0PB67X4K> ?","edited":{"user":"U0ZJZBJLF","ts":"1478704793.000000"},"ts":"1478704208.003546"},{"type":"message","user":"U0ZJZBJLF","text":"In gossip I don't rely on signed certificates, it works with self-signed certificates because I have a challenge-response in the handshake when a peer connects to you (2-way handshake)","ts":"1478704254.003547"},{"type":"message","user":"U0ZJZBJLF","text":"the certificates used in the challenge-response are the application layer's","ts":"1478704270.003548"},{"type":"message","user":"U0PB67X4K","text":"I meant you use signatures anyway","ts":"1478704271.003549"},{"type":"message","user":"U0PB67X4K","text":"no reliance on mutual TLS for identification","ts":"1478704287.003550"},{"type":"message","user":"U0ZJZBJLF","text":"you mean no reliance on signed certs?","ts":"1478704311.003551"},{"type":"message","user":"U0PB67X4K","text":"sorry - you have a \"handshake\" mechanism which used signed messages to mutually identify each other.  You don't rely on mutual TLS for identification at the gossip layer","ts":"1478704460.003552"},{"type":"message","user":"U0ZJZBJLF","text":"I don't rely on the TLS certificates for anything","ts":"1478704489.003553"},{"type":"message","user":"U0ZJZBJLF","text":"just on the application certs","ts":"1478704497.003554"},{"type":"message","user":"U0Y14MWA2","text":"after discussion with <@U1AU8DRQR> the idea is to proceed as follows with enabling simplebft to run efficiently on WANs","ts":"1478709292.003556"},{"type":"message","user":"U0Y14MWA2","text":"<https:\/\/jira.hyperledger.org\/browse\/FAB-897> involves invasive changes to how simplebft (sbft) works","ts":"1478709341.003557"},{"type":"message","user":"U0Y14MWA2","text":"so the goal is to have a separate implementation (called e.g., pipelinedPBFT) based on simplebft fork","ts":"1478709383.003558"},{"type":"message","user":"U0Y14MWA2","text":"sbft could still be used in clusters and pipelinedPBFT could be used in WANs","ts":"1478709413.003559"},{"type":"message","user":"U0Y14MWA2","text":"solution to <https:\/\/jira.hyperledger.org\/browse\/FAB-897> will be implemented against the same interfaces (System\/Receiver) that sbft defines","ts":"1478709471.003560"},{"type":"message","user":"U0Y14MWA2","text":"so orderer\/sbft will remain practically unchanged (except for refactoring to enable use of different consensus implementations)","ts":"1478709507.003561"},{"type":"message","user":"U0Y14MWA2","text":"hence <https:\/\/jira.hyperledger.org\/browse\/FAB-897> is out of simple BFT epic","ts":"1478709524.003562"},{"type":"message","user":"U0Y14MWA2","text":"essentially we would have at least two bft core consensus components","ts":"1478709659.003563"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XR6J961> <@U0XPR4NP4> <@U0XQ35CDD> <@U0PB67X4K> ^^^","edited":{"user":"U0Y14MWA2","ts":"1478709829.000000"},"ts":"1478709796.003564"},{"type":"message","user":"U0XQ35CDD","text":"Noted, skimming through the linked paper now.","ts":"1478709985.003566"},{"type":"message","user":"U0XPR4NP4","text":"I'm a little wary of trying to make sbft too plugable.  We tried that with 'classic'\/'batch'\/'sieve' last time, and I think ultimately it caused a lot more headache than anticipated.  Obviously can be done, will just have to be careful how we architect this.","ts":"1478710030.003567"},{"type":"message","user":"U0Y14MWA2","text":"it seems actually very nice - because <@U0XR6J961> definitions of System\/Receiver interfaces are entirely non-sbft or even non-pbft specific","ts":"1478710090.003568"},{"type":"message","user":"U0Y14MWA2","text":"and we would reuse <@U1AU8DRQR>'s work on orderer","ts":"1478710114.003569"},{"type":"message","user":"U0Y14MWA2","text":"as well as a future component for <https:\/\/jira.hyperledger.org\/browse\/FAB-474>","ts":"1478710136.003570"},{"type":"message","user":"U0Y14MWA2","text":"also, as implementing <https:\/\/jira.hyperledger.org\/browse\/FAB-897> may take some time - we want to have sbft alive and kicking in the meantime","ts":"1478710178.003571"},{"type":"message","user":"U0Y14MWA2","text":"I would not change much\/anything in interfaces defined now in <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/consensus\/simplebft\/simplebft.go>","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/consensus\/simplebft\/simplebft.go","text":"Read-only mirror of <https:\/\/gerrit.hyperledger.org\/r\/#\/admin\/projects\/fabric>","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/consensus\/simplebft\/simplebft.go","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1478710297.003572"},{"type":"message","user":"U0Y14MWA2","text":"just refactor this to have a reusable API outside simplebft package","ts":"1478710326.003574"},{"type":"message","user":"U294C6FDW","text":"Thanks for the Information  on \"reconfiguration\".  The problem occurs when I bring down all 4 of my VPs and then bring them back again. \nThere are  other test where I did multiple time of bring down and up one VP at the time and eventually it will get out of sync as well. \nI put a temporary fix to go around the issue. \nBut the ideal of \"reconfiguration\" is something they should look at.","attachments":[{"fallback":"[November 9th, 2016 12:03 AM] cca: <@U294C6FDW> - You have to make up your mind about the system assumption. The protocol as implemented will halt when a second peer is down because it is designed to tolerate only 1 failing node (f=1). If you want it to continue with two down (f=2), you need n=7=3f+1 nodes. Alternatively, one could reconfigure the group (through a transaction that is ordered) and eliminate a node for which some trusted entity (or a majority of the nodes)  confirm it is failed and must be replaced. This is called \"reconfiguration\" and available in systems like BFT-SMaRT (<http:\/\/www.di.fc.ul.pt\/~bessani\/publications\/dsn14-bftsmart.pdf>). The design of this is known but not yet implemented here. I believe it is important to have such a reconfiguration method implemented.","ts":"1478678601.003456","author_subname":"cca","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"<@U294C6FDW> - You have to make up your mind about the system assumption. The protocol as implemented will halt when a second peer is down because it is designed to tolerate only 1 failing node (f=1). If you want it to continue with two down (f=2), you need n=7=3f+1 nodes. Alternatively, one could reconfigure the group (through a transaction that is ordered) and eliminate a node for which some trusted entity (or a majority of the nodes)  confirm it is failed and must be replaced. This is called \"reconfiguration\" and available in systems like BFT-SMaRT (<http:\/\/www.di.fc.ul.pt\/~bessani\/publications\/dsn14-bftsmart.pdf>). The design of this is known but not yet implemented here. I believe it is important to have such a reconfiguration method implemented.","author_name":"C C","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/cca","author_icon":"https:\/\/secure.gravatar.com\/avatar\/cf26a0b1c59937e0f68ff31b7cc05c2d.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0005-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1478678601003456","is_share":true,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1478737531.003575"},{"type":"message","user":"U0PB67X4K","text":"<@U0KN2SSKE> <@U0XPR4NP4> <@U0XQ35CDD>  - so I think we need to make a call on terminology in terms of \"channels\" versus \"chains\".  It seems we use the term \"channels\" in discussions, etc but that within the implementation we are using the term \"chain\"  (e.g. chainID, getDefaultChain, etc).    We need to pick one","ts":"1478778441.003576"},{"type":"message","user":"U0ZJZBJLF","text":"good morning. Where in the code (if it is already coded, I grep-ed the whole project and doesn't look like it is) can I find how the `JoinChannel` message looks like?","edited":{"user":"U0ZJZBJLF","ts":"1478778940.000000"},"ts":"1478778868.003577"},{"type":"message","user":"U0PB67X4K","text":"it's hard to Join something which does not exist yet  :wink:","ts":"1478779186.003579"},{"type":"message","user":"U0PB67X4K","text":"aka it's not coded up yet","ts":"1478779195.003580"},{"type":"message","user":"U0PB67X4K","text":"(at least as far as I know and last time I looked as well)","ts":"1478779229.003581"},{"type":"message","user":"U0PB67X4K","text":"","attachments":[{"fallback":"[November 10th, 2016 7:06 AM] garisingh: Sorry for the wide blast here, but while I was reviewing stuff, thought I should send out a note on things which will make life easier for the maintainers and will help contributions be merged more quickly:\n\n1) Please make sure to reference a JIRA item in your commits - especially for new functionality\n\n2) Let's try to add a little more detail to some of the JIRA entries - one line entries \/ descriptions don't help us understand what contribution is trying to achieve\n\n3) When people make comments in gerrit, once you address them please mark them as done (by clicking in the comment and hitting done  :slightly_smiling_face:  )\n\n4) You'll notice that we push back a lot on lack of tests - please test locally and use a coverage tool to see where you stand\n\n5) Run linters, go import, etc to reduce CI failures","ts":"1478779599.000514","author_subname":"garisingh","channel_id":"C29512UHF","channel_name":"fabric-sdk-node-dev","is_msg_unfurl":true,"text":"Sorry for the wide blast here, but while I was reviewing stuff, thought I should send out a note on things which will make life easier for the maintainers and will help contributions be merged more quickly:\n\n1) Please make sure to reference a JIRA item in your commits - especially for new functionality\n\n2) Let's try to add a little more detail to some of the JIRA entries - one line entries \/ descriptions don't help us understand what contribution is trying to achieve\n\n3) When people make comments in gerrit, once you address them please mark them as done (by clicking in the comment and hitting done  :slightly_smiling_face:  )\n\n4) You'll notice that we push back a lot on lack of tests - please test locally and use a coverage tool to see where you stand\n\n5) Run linters, go import, etc to reduce CI failures","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/garisingh","author_icon":"https:\/\/avatars.slack-edge.com\/2016-09-10\/78323915894_521dc680194c08b166e0_48.jpg","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-sdk-node-dev\/p1478779599000514","is_share":true,"footer":"Posted in #fabric-sdk-node-dev"}],"ts":"1478779640.003582"},{"type":"message","user":"U0ZJZBJLF","text":"<@U0PB67X4K>  any idea who's the person coding it? I have a requirement to ask","ts":"1478780561.003583"},{"type":"message","user":"U0ZJZBJLF","text":"Maybe <@U0ULK2JPP>  ?","ts":"1478780584.003584"},{"type":"message","user":"U0PB67X4K","text":"would likely be Murali.","ts":"1478780748.003585"},{"type":"message","user":"U0ZJZBJLF","text":"ok thanks. \n<@U0XPR4NP4>  I uploaded a new patch set, after discussing things related to the multi channel internally this morning. \nCould you please take a look, and hopefully remove the `-2`? :thinking_face: \n<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2325\/12\/gossip\/api\/channel.go>","ts":"1478780952.003586"},{"type":"message","user":"U0KN2SSKE","text":"<@U0ZJZBJLF> join channel is a call to the configuration system chaincode cscc with the genesis block and a list of peers;  cscc also processes config changes coming in from gossip as a block  (configuration block) \u2014 i am working on cscc","ts":"1478782041.003587"},{"type":"message","user":"U0KN2SSKE","text":"<@U0PB67X4K> chain=channel+ledger+some participants","ts":"1478782183.003588"},{"type":"message","user":"U0KN2SSKE","text":"so from sdk, we create a chain, and internally we create a channel, add participants (peers), who create ledger to hold data on that channel","ts":"1478782283.003589"},{"type":"message","user":"U0PB67X4K","text":"yeah - I get that - but in the messages sent to the ordering service \"channels\" are addressed by \"chainID\" and in reality on the orderer side a channel has participants\/ACLs.","ts":"1478782555.003590"},{"type":"message","user":"U0ZJZBJLF","text":"<@U0KN2SSKE>  ok, then I need the following abilities in order to support multiChannel:\n<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2325\/12\/gossip\/api\/channel.go>","ts":"1478782827.003591"},{"type":"message","user":"U0ZJZBJLF","text":"I need a JoinChannel to be a concrete object, signed by the app, and I also need it to have a timestamp, and to be able to extract the list of peers certificates from it.\nwe're going to gossip this message around in the org, and I need the timestamp to know which JoinChannel message is newer than another","edited":{"user":"U0ZJZBJLF","ts":"1478782911.000000"},"ts":"1478782863.003592"},{"type":"message","user":"U1AU8DRQR","text":"all: today I have some non-consensus related tasks to do but I will continue with making System\/Receiver be parts of some non-sbft common API to enable other orderers to use them ( <@U0Y14MWA2> <@U0XQ35CDD> <@U0XPR4NP4> etc.)","ts":"1478783083.003595"},{"type":"message","user":"U0XPR4NP4","text":"&gt;  so I think we need to make a call on terminology in terms of \"channels\" versus \"chains\".  It seems we use the term \"channels\" in discussions, etc but that within the implementation we are using the term \"chain\"  (e.g. chainID, getDefaultChain, etc).    We need to pick one\n\n<@U0PB67X4K> Personally, my vote is we say 'chains' rather than channels.  I don't see any way we can ever get away from the word 'chain' in a blockchain implementation, and since channel &lt;-&gt; chain is one to one, I don't really see the advantage in introducing the new term.","ts":"1478786046.003596"},{"user":"U31EJ5JK0","text":"<@U31EJ5JK0|k.sung> has joined the channel","type":"message","subtype":"channel_join","ts":"1478786221.003597"},{"type":"message","user":"U0XPR4NP4","text":"&gt; I uploaded a new patch set, after discussing things related to the multi channel internally this morning. \n\n<@U0ZJZBJLF> Removed the -2 and commented.","ts":"1478786333.003598","reactions":[{"name":"writing_hand","users":["U0ZJZBJLF"],"count":1}]},{"type":"message","user":"U0KN2SSKE","text":"<@U0ZJZBJLF> i\u2019ll loook at channel.go since cscc will call it to pass info \u2014 meantime, take a look at the protos\/common where the genesis block comes in with 1 transaction of type CONFIGURATION.  The transaction has a ChainHeader which contains a timestamp","ts":"1478788701.003599"},{"type":"message","user":"U0ZJZBJLF","text":"of course, I don't need you to look at the other file.","ts":"1478788729.003600"},{"type":"message","user":"U0ZJZBJLF","text":"so it's Payload--&gt;Header--&gt;ChainHeader--&gt;timestamp.\nSignatureHeader is the signature on the header? where are the actual bytes of the signature then?","ts":"1478788863.003601"},{"type":"message","user":"U0XPR4NP4","text":"The actual signature bytes are in the `signature` field of the `Envelope`","ts":"1478788916.003602"},{"type":"message","user":"U0XPR4NP4","text":"They are over the `payload`, which includes a `Header` which embeds a `ChainHeader` (which contains the chainID et al) and a `SignatureHeader` (which contains the identity, nonce, et al)","ts":"1478788953.003603"},{"type":"message","user":"U0XPR4NP4","text":"The reason the `Header` was split into the `ChainHeader` and the `SignatureHeader` is because there are cases where a message wants to share a `ChainHeader` among several signatures, but needs a unique `SignatureHeader` per signature.","ts":"1478788992.003604"},{"type":"message","user":"U0ZJZBJLF","text":"so the configuration transaction is essentially going to be made to a single block (of 1 transaction), and this block is going to be passed to the peers, which would:\n1) Verify the signature over the envelope\n2) turn the payload bytes to Payload \n3) turn the data of the Payload to a Block and from there read the configuration?","ts":"1478789372.003605"},{"type":"message","user":"U0UGH3X7X","text":"that's how I'm building the block for bootstrap ... haven't done anything for signature verification yet","ts":"1478789467.003606"},{"type":"message","user":"U0ZJZBJLF","text":"I don't need the code to be written, all I need is for the right people to endorse my commit and promise that the capabilities I need for gossip multi channel support will be there","ts":"1478789508.003607"},{"type":"message","user":"U0XPR4NP4","text":"&gt; 3) turn the data of the Payload to a Block and from there read the configuration?\n\nNo.  The `Payload` contains `data` of type `ConfigurationEnvelope`, not an embedded block.","ts":"1478789721.003608"},{"type":"message","user":"U0XPR4NP4","text":"<https:\/\/docs.google.com\/document\/d\/1qD2zOTxmPoss3Xop_pDdkSXHozIR4N27NEsymosW4Gk>\n\nPlease see the configuration section in the above","ts":"1478789738.003609"},{"type":"message","user":"U0XPR4NP4","text":"Configuration blocks are blocks which only ever contain a single transaction, whose chain header type is `CONFIGURATION_TRANSACTION`","ts":"1478789775.003611"},{"type":"message","user":"U0XQ35CDD","text":"I would also refer you to the static bootstrapper changeset as it provides a concrete example of how this looks like. ","ts":"1478789797.003612"},{"type":"message","user":"U0XPR4NP4","text":"The semantics changed slightly after some feedback from <@U0KN2SSKE> so I would encourage you to look it the static bootstrapper in this pending CR <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2371\/>","ts":"1478789848.003613"},{"type":"message","user":"U0UGH3X7X","text":"scrum ...","ts":"1478789872.003614"},{"text":"<@U0UGH3X7X|tuand> has started a Google+ Hangout for this channel. <https:\/\/hangouts.google.com\/hangouts\/_\/terjim7t4vhi5mqq4boqcqpytqe|Join Hangout>.","username":"hangouts","bot_id":"B0UKUAJ0Y","type":"message","subtype":"bot_message","ts":"1478789889.003615"},{"type":"message","user":"U0ZJZBJLF","text":"1) all right, I looked at the google doc <@U0XPR4NP4>  showed me, I assume at some point the configurationItem will have a list of peers of something like that? because it's not coded, right?\n2) in the gerrit item you linked- I'm supposed to look at the test, right?","ts":"1478793916.003616"},{"type":"message","user":"U0XPR4NP4","text":"&gt; at some point the configurationItem will have a list of peers of something like that\n\nThe configuration will have a list of peer orgs, never peers.\n\n&gt; in the gerrit item you linked- I'm supposed to look at the test, right?\n\nYou should look at `fabric\/orderer\/common\/bootstrap\/static\/static.go` to see an example of the actual configuration being encoded.","ts":"1478794018.003617"},{"type":"message","user":"U0XPR4NP4","text":"^ <@U0ZJZBJLF>","ts":"1478794043.003618"},{"type":"message","user":"U0ZJZBJLF","text":"this isn't what I understood from <@U0KN2SSKE> , I was under the impression that the JoinChannelMessage given to each peer will have the list of *all peers in the channel*","ts":"1478794082.003619"},{"type":"message","user":"U0ZJZBJLF","text":"This is *critical* to implement the multi channel support in the current proposed flow","edited":{"user":"U0ZJZBJLF","ts":"1478794140.000000"},"ts":"1478794101.003620"},{"type":"message","user":"U0UGH3X7X","text":"at some point (hopefully soon) there will be a configurationItem whose value is a list of peer CA certs","edited":{"user":"U0UGH3X7X","ts":"1478794226.000000"},"ts":"1478794113.003621"},{"type":"message","user":"U0UGH3X7X","text":"ordering service uses that list to determine who can connect","ts":"1478794140.003623"},{"type":"message","user":"U0ZJZBJLF","text":"<@U0UGH3X7X> , I understand that the ordering service only cares about the org","ts":"1478794159.003624"},{"type":"message","user":"U0ZJZBJLF","text":"but we were said that the peers themselves know each peer in the channel","ts":"1478794177.003625"},{"type":"message","user":"U0XPR4NP4","text":"The `JoinChannelMessage` may have the list of all peers, I am only speaking to the contents of the configuration transaction","ts":"1478794178.003626"},{"type":"message","user":"U0UGH3X7X","text":"correct","ts":"1478794194.003627"},{"type":"message","user":"U0XPR4NP4","text":"Who is allowed to transact on the chain is a property of chain config.  Who is actively transacting and interested in the chain is not a property of the chain, this is a property of the peer network.  It does not belong in the chain config.","edited":{"user":"U0XPR4NP4","ts":"1478794237.000000"},"ts":"1478794218.003628"},{"type":"message","user":"U0UGH3X7X","text":"configurationItem , not configurationID","ts":"1478794236.003630"},{"type":"message","user":"U0ZJZBJLF","text":"But binh said: \n```\njoin channel is a call to the configuration system chaincode cscc with the genesis block and a list of peers; \n```","ts":"1478794245.003632"},{"type":"message","user":"U0XPR4NP4","text":"Exactly","ts":"1478794257.003633"},{"type":"message","user":"U0XPR4NP4","text":"With `the genesis block` what you see there, _and_ `a list of peers`","ts":"1478794276.003634"},{"type":"message","user":"U0XPR4NP4","text":"The list of peers does not come from the genesis block.","ts":"1478794285.003635"},{"type":"message","user":"U0ZJZBJLF","text":"but a system chaincode produces a transaction... I'm confused now. isn't what's being produced is that configurationItem?","ts":"1478794304.003636"},{"type":"message","user":"U0XPR4NP4","text":"To my knowledge, the application creates the configuration transaction for a new channel, submits it to ordering, and gets back the genesis block.  It then decides which peers are going to actually use the channel, and sends them each a `JoinChannel` with that genesis block, and the list of peers it has concluded should be on the channel.","ts":"1478794380.003637"},{"type":"message","user":"U0ZJZBJLF","text":"so the genesis block is the configuration?","edited":{"user":"U0ZJZBJLF","ts":"1478794388.000000"},"ts":"1478794383.003638"},{"type":"message","user":"U0ZJZBJLF","text":"oh","ts":"1478794415.003640"},{"type":"message","user":"U0XPR4NP4","text":"The genesis block is the first block in the chain, it embeds a single transaction of type `CONFIGURATION_TRANSACTION` and carries as its data a `ConfigurationEnvelope` which holds an arbitrary number of `SignedConfigurationItem`s (each of which embeds a `ConfigurationItem` which contains whatever configuration information, like peer orgs and policies)","edited":{"user":"U0XPR4NP4","ts":"1478794453.000000"},"ts":"1478794418.003641"},{"type":"message","user":"U0ZJZBJLF","text":"I see now, many thanks. This isn't good to me :disappointed:","ts":"1478794432.003642"},{"type":"message","user":"U0ZJZBJLF","text":"I need the peer list to be signed","ts":"1478794442.003643"},{"type":"message","user":"U0ZJZBJLF","text":"I mean, I want it to be signed","ts":"1478794446.003644"},{"type":"message","user":"U0XPR4NP4","text":"Why can the app not sign it?","ts":"1478794460.003647"},{"type":"message","user":"U0XPR4NP4","text":"How did you know to trust the JoinChannel?","ts":"1478794468.003648"},{"type":"message","user":"U0ZJZBJLF","text":"I was under the impression that the app will sign it,","ts":"1478794469.003649"},{"type":"message","user":"U0ZJZBJLF","text":"I just need *someone* to do that, so I could leverage that signature","ts":"1478794486.003650"},{"type":"message","user":"U0XPR4NP4","text":"From what I've just heard, and, I have not been involved in these discussions.  My impression was that the app signs over the JoinChannel, which includes the peer list and the genesis block.  Whether it signs each, or both, or some other combination, I don't know.","ts":"1478794541.003651"},{"type":"message","user":"U0XPR4NP4","text":"I only wish to stress that it is _not_ the configuration transaction which contains the peer list","ts":"1478794561.003652"},{"type":"message","user":"U0XPR4NP4","text":"(And therefore it is _not_ the genesis block which contains this information)","ts":"1478794574.003653"},{"type":"message","user":"U1HFNJB50","text":"Application signs the list of peers, while GB (genesis block) contains info about org rather than peers","ts":"1478794645.003654","reactions":[{"name":"+1","users":["U0XPR4NP4","U0UGH3X7X"],"count":2}]},{"type":"message","subtype":"file_share","text":"<@U1HFNJB50|c0rwin> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/c0rwin\/F310Z4666\/pasted_image_at_2016_11_10_11_18_am.png|Pasted image at 2016-11-10, 11:18 AM> and commented: When we draw a sequence on board it looked something like this:","file":{"id":"F310Z4666","created":1478794693,"timestamp":1478794693,"name":"Pasted image at 2016_11_10 11_18 AM.png","title":"Pasted image at 2016-11-10, 11:18 AM","mimetype":"image\/png","filetype":"png","pretty_type":"PNG","user":"U1HFNJB50","editable":false,"size":155476,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F310Z4666\/pasted_image_at_2016_11_10_11_18_am.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F310Z4666\/download\/pasted_image_at_2016_11_10_11_18_am.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_64":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F310Z4666-60c6710340\/pasted_image_at_2016_11_10_11_18_am_64.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_80":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F310Z4666-60c6710340\/pasted_image_at_2016_11_10_11_18_am_80.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F310Z4666-60c6710340\/pasted_image_at_2016_11_10_11_18_am_360.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360_w":360,"thumb_360_h":156,"thumb_480":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F310Z4666-60c6710340\/pasted_image_at_2016_11_10_11_18_am_480.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_480_w":480,"thumb_480_h":208,"thumb_160":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F310Z4666-60c6710340\/pasted_image_at_2016_11_10_11_18_am_160.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F310Z4666-60c6710340\/pasted_image_at_2016_11_10_11_18_am_720.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720_w":720,"thumb_720_h":312,"thumb_960":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F310Z4666-60c6710340\/pasted_image_at_2016_11_10_11_18_am_960.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_960_w":960,"thumb_960_h":415,"thumb_1024":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F310Z4666-60c6710340\/pasted_image_at_2016_11_10_11_18_am_1024.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_1024_w":1024,"thumb_1024_h":443,"image_exif_rotation":1,"original_w":1458,"original_h":631,"permalink":"https:\/\/hyperledgerproject.slack.com\/files\/c0rwin\/F310Z4666\/pasted_image_at_2016_11_10_11_18_am.png","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F310Z4666-262461150c","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":1,"initial_comment":{"id":"Fc310Z5SD8","created":1478794693,"timestamp":1478794693,"user":"U1HFNJB50","is_intro":true,"comment":"When we draw a sequence on board it looked something like this:","channel":""}},"user":"U1HFNJB50","upload":true,"display_as_bot":false,"username":"<@U1HFNJB50|c0rwin>","bot_id":null,"ts":"1478794697.003655"},{"type":"message","user":"U1HFNJB50","text":"at very high level (w\/o deep details)","ts":"1478794748.003656"},{"type":"message","user":"U0XPR4NP4","text":"Thanks <@U1HFNJB50> that is how I envisioned it, but it's great to have a real flow diagram and confirmation","ts":"1478794802.003657"},{"type":"message","user":"U0UGH3X7X","text":"attach the diagram to the jira issue ?  before slack loses it for us","ts":"1478794881.003658"},{"type":"message","user":"U0PB67X4K","text":"<@U1HFNJB50>  - so is there an implied step in this diagram where all the peers that belong to an organization connect to each other via the gossip layer?","ts":"1478795223.003659"},{"type":"message","user":"U1HFNJB50","text":"diagram depicts joinChannel call per single peer, so I guess it doesn\u2019t include the logic where all org peers get connected together","ts":"1478795318.003660"},{"type":"message","user":"U0PB67X4K","text":"and follow-on - does that mean that basically the gossip layer then dynamically builds up the list of peers grouped by organization?","ts":"1478795354.003661"},{"type":"message","user":"U1HFNJB50","text":"<@U0UGH3X7X> can you tell me the JIRA item, you\u2019d like me to attach the diagram?","ts":"1478795362.003662"},{"type":"message","user":"U1HFNJB50","text":"<@U0PB67X4K> my answer would be - yes, while we can confirm that w\/ <@U0ZJZBJLF> also","edited":{"user":"U1HFNJB50","ts":"1478795434.000000"},"ts":"1478795426.003663"},{"type":"message","user":"U0PB67X4K","text":"<@U0XPR4NP4>  - do you imagine that the \"global\" channel (used to be called the system channel) would be used to distribute the list of organizations to all all peers which connect to the ordering service?   (not really a function of the ordering service but rather a use of the ordering service).  My assumption would be that provides the \"global\" list of organizations that are part of the overall network and then when specifying access control at the channel level you would reference these organizations.  Or did you imagine that organization info get duplicated for every chain (channel + ledger)?","ts":"1478795707.003665"},{"type":"message","user":"U0XPR4NP4","text":"<@U0PB67X4K> So, I think ultimately, we will need a private orderer only chain for a number of reasons.  However, for simplicity's sake, I assumed every chain would have the full list of peer org certs in the config.","ts":"1478795802.003666"},{"type":"message","user":"U0PB67X4K","text":"that implies that the list of possible peer orgs is always out of band from the overall \"global\" network and that orgs are added at the \"chain\" level","ts":"1478795902.003667"},{"type":"message","user":"U0PB67X4K","text":"this is why I like to work backwards - meaning if I had a config file on each peer, what would need to be in it  :wink:","ts":"1478795957.003668"},{"type":"message","user":"U0PB67X4K","text":"then we figure out how to distribute it","ts":"1478795968.003669"},{"type":"message","user":"U0PB67X4K","text":"in any case, it seems that within the fabric we need am entity structure known as an organization.  we of course need that in the orderer as well.  and I think it is more than just the org certificate","ts":"1478796137.003670"},{"type":"message","user":"U0XPR4NP4","text":"<@U0PB67X4K> I've always thought the notion of treating the 'system chain' specially was odd.  It's just a chain, and it has ACLs, which sounds like a channel to me.","ts":"1478796205.003671"},{"type":"message","user":"U0PB67X4K","text":"but I think that belongs mostly over in peer dev world","ts":"1478796210.003672"},{"type":"message","user":"U0PB67X4K","text":"agreed","ts":"1478796224.003673"},{"type":"message","user":"U0PB67X4K","text":"I guess we talk about a lot of conceptual entities which don't seem to exist really across the design  :wink:","ts":"1478796256.003674"},{"type":"message","user":"U0XPR4NP4","text":"I would actually propose, that the 'orderer chain' is not special either.  Instead, when creating a channel, I would specify the 'source chain' or some such thing, which is where the actual channel creation authorization policy is stored.  So, you could start up an ordering service, and consortium A comes over, and you fire up a 'Consortium A ordering chain' on top of the initial chain, and consortium B joins, and you can do the same.  That way you get instant multi-tenancy for free.","ts":"1478796313.003675"},{"type":"message","user":"U0XPR4NP4","text":"We definitely did invent the term 'Peer Org' while trying to write the bootstrap bdd I think... seems like it probably should have originated in the design, but some of these things are hard to see until you flesh them out","ts":"1478796394.003676"},{"type":"message","user":"U0PB67X4K","text":"I am not faulting anyone here","ts":"1478796844.003677"},{"type":"message","user":"U0PB67X4K","text":"and I believe designs evolve as you build.  Just saying we might need to catch our breath again and see what new things have emerged","ts":"1478796901.003678"},{"type":"message","user":"U0KN2SSKE","text":"<@U0PB67X4K> <@U0XPR4NP4> app may create a \u201csystem\u201d chain to orchestrate transactions, but that should be use-case specific, so i agree that we don\u2019t treat a channel any more specific than others","ts":"1478798051.003679","reactions":[{"name":"+1","users":["U0XPR4NP4"],"count":1}]},{"type":"message","user":"U0UGH3X7X","text":"<@U1HFNJB50>  i'd say add it to the issue <@U0ZJZBJLF> is using for his api work ( don't know the number offhand )","ts":"1478798859.003680","reactions":[{"name":"+1","users":["U0ZJZBJLF"],"count":1},{"name":"white_check_mark","users":["U1HFNJB50"],"count":1}]},{"user":"U1NPSMCDS","text":"<@U1NPSMCDS|shinsa> has joined the channel","type":"message","subtype":"channel_join","ts":"1478846881.003681"},{"type":"message","user":"U0XQ35CDD","text":"Should be done now, thanks for the heads up.","attachments":[{"fallback":"[November 10th, 2016 9:57 AM] jyellick: The semantics changed slightly after some feedback from <@U0KN2SSKE> so I would encourage you to look it the static bootstrapper in this pending CR <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2371\/>","ts":"1478789848.003613","author_subname":"jyellick","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"The semantics changed slightly after some feedback from <@U0KN2SSKE> so I would encourage you to look it the static bootstrapper in this pending CR <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2371\/>","author_name":"Jason Yellick","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/jyellick","author_icon":"https:\/\/secure.gravatar.com\/avatar\/80fccad690b283483c3b5418b8b82b5b.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F272a%2Fimg%2Favatars%2Fava_0026-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1478789848003613","is_share":true,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1478882058.003682"},{"type":"message","user":"U0N4P17ND","text":"Hi QQ: is there any signing transaction mechanism exist in HL? So let's say to check if transaction was signed by user A, for example? I realize that we can implement such signatures using certificate attributes, for example, and store the result in KVS. But something out of the box?","ts":"1478889811.003683"},{"type":"message","user":"U0N4P17ND","text":"I'm talking in the view of v06 and also curious about plans for v1?","ts":"1478889833.003684"},{"type":"message","user":"U0ZJZBJLF","text":"Question- there are configuration blocks that change the membership of the ordering service, right? \nOn which channel\/chain are they received? In a system-level chain, or in all chains? If it's the former- then why are they also sent on all chains?\nIf the latter- then how is the peer expected to behave when it reads a configuration that tells it to connect to a new ordering instance in 1 chain but in other chains that block hasn't been received yet?","ts":"1478901313.003685"},{"type":"message","user":"U0XQ35CDD","text":"Last time I checked, this notion of a system, common chain that is exposed to all peers is going away. You need the membership changes posted on every chain so that you ensure these are orderered on every chain.","ts":"1478967699.003686"},{"type":"message","user":"U0XQ35CDD","text":"If there used to be orderers 1,2,3 around, and the receiver gets a block in chain A that says the orderers are now 1, 2, 3, 4 and in chain B no such message has arrived, then it shouldn't accept a message for chain B from orderer 4 (yet). ","edited":{"user":"U0XQ35CDD","ts":"1478967872.000000"},"ts":"1478967821.003687"},{"type":"message","user":"U0XPR4NP4","text":"+1 to what Kostas says there. Treat each chain as if it had no dependencies. For v1 I think it is reasonable to require that all a peer's chains are from the same ordering service (so in the example given, it is likely fine to source all chains from the orderers 1,2,3 until 4 appears in all chains) , but I would suggest to keep the possibility in mind for the future.","edited":{"user":"U0XPR4NP4","ts":"1478968023.000000"},"ts":"1478967830.003688"},{"type":"message","user":"U0ZJZBJLF","text":"that's exactly what I thought of- this functionality would allow a peer to get serviced by completely different ordering services","ts":"1478968574.003692"},{"type":"message","user":"U0XPR4NP4","text":"In the future, especially with sbft, I can imagine that different chains might be serviced by different sets of orderers. So I would try not to make any decisions which entirely preclude it","ts":"1478968757.003693"},{"user":"U1D89DP47","text":"<@U1D89DP47|subzer0> has joined the channel","type":"message","subtype":"channel_join","ts":"1478981823.003694"},{"type":"message","user":"U0XQ35CDD","text":"I'm trying to figure out what the new-chain configuration _exactly_ looks like. (I'm writing a test client that sends such transactions.) Chime in here, if you have thoughts: <https:\/\/jira.hyperledger.org\/browse\/FAB-998?focusedCommentId=19750&amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-19750>","edited":{"user":"U0XQ35CDD","ts":"1479054081.000000"},"ts":"1479053841.003695"},{"user":"U2BJRQLMU","text":"<@U2BJRQLMU|wale> has joined the channel","type":"message","subtype":"channel_join","ts":"1479065177.003697"},{"user":"U1B9E51R8","text":"<@U1B9E51R8|xixuejia> has joined the channel","type":"message","subtype":"channel_join","ts":"1479083358.003698"},{"type":"message","user":"U0XR6J961","text":"hi","ts":"1479109934.003699"},{"type":"message","user":"U0Y14MWA2","text":"<@U0ZJZBJLF> could gossip help solve <https:\/\/jira.hyperledger.org\/browse\/FAB-1096> - in the way described under item 3","ts":"1479128973.003700"},{"type":"message","user":"U0Y14MWA2","text":"?","ts":"1479128975.003701"},{"type":"message","user":"U0ZJZBJLF","text":"Hi Marko. \nAre you asking whether we fill up holes of raw block dissemination in peers?","ts":"1479129144.003702"},{"type":"message","user":"U1AU8DRQR","text":"<@U0Y14MWA2> we agreed in the following:\n&gt; by the way - what we should have also is some refactoring so the System and Receiver APIs of SBFT are put as such so we can have other consensus implementations\n<@U0XR6J961> we should discuss this here","ts":"1479129310.003703"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1479129358.003704"},{"type":"message","user":"U0Y14MWA2","text":"<@U0ZJZBJLF> I am asking whether you could","ts":"1479129476.003705"},{"type":"message","user":"U0Y14MWA2","text":"it seems to me that you could","ts":"1479129481.003706"},{"type":"message","user":"U0Y14MWA2","text":"so what \"we\" would be doing seems redundant","ts":"1479129489.003707"},{"type":"message","user":"U0ZJZBJLF","text":"what do you mean whether we could? we already do :slightly_smiling_face:","ts":"1479129492.003708"},{"type":"message","user":"U0Y14MWA2","text":"that's my point","ts":"1479129499.003709"},{"type":"message","user":"U0ZJZBJLF","text":"we presented this at a demo in front of everyone at RTP last week","ts":"1479129514.003710"},{"type":"message","user":"U0Y14MWA2","text":"so you think (agree) that gossip splves <https:\/\/jira.hyperledger.org\/browse\/FAB-1096>","ts":"1479129528.003711"},{"type":"message","user":"U0Y14MWA2","text":"?","ts":"1479129530.003712"},{"type":"message","user":"U0Y14MWA2","text":"(sorry haven't seen that demo)","ts":"1479129537.003713"},{"type":"message","user":"U0ZJZBJLF","text":"(np)\nWait, I don't understand- are you implying that the PBFT memory buffers depend on what its clients know?","ts":"1479129577.003714"},{"type":"message","user":"U0Y14MWA2","text":"ok  - let me repeat","ts":"1479129598.003715"},{"type":"message","user":"U0ZJZBJLF","text":"I'm on a call now, so maybe the people talking (in accented english) are interfering with my reading","edited":{"user":"U0ZJZBJLF","ts":"1479129618.000000"},"ts":"1479129605.003716"},{"type":"message","user":"U0Y14MWA2","text":"now not all sbft orderers have the entire raw ledger","ts":"1479129634.003718"},{"type":"message","user":"U0Y14MWA2","text":"this is an implementation simplification","ts":"1479129640.003719"},{"type":"message","user":"U0Y14MWA2","text":"a big one","ts":"1479129641.003720"},{"type":"message","user":"U0ZJZBJLF","text":"ok I dropped from the call just for you","ts":"1479129668.003721"},{"type":"message","user":"U0Y14MWA2","text":"now this is not a huge issue as orderes\/consenters need not have the entire raw ledger","ts":"1479129671.003722"},{"type":"message","user":"U0ZJZBJLF","text":"finally can think","ts":"1479129676.003723"},{"type":"message","user":"U0ZJZBJLF","text":"wait wait","ts":"1479129687.003724"},{"type":"message","user":"U0ZJZBJLF","text":"I was told that all PBFT orderers in the future would have the raw ledger","ts":"1479129699.003725"},{"type":"message","user":"U0Y14MWA2","text":"they would","ts":"1479129769.003726"},{"type":"message","user":"U0ZJZBJLF","text":"what the gossip gives you is full state syncrhonization of the ledger among all peers","ts":"1479129775.003727"},{"type":"message","user":"U0Y14MWA2","text":"but they would have holes","ts":"1479129778.003728"},{"type":"message","user":"U0ZJZBJLF","text":"wait","ts":"1479129783.003729"},{"type":"message","user":"U0ZJZBJLF","text":"why would they have holes?","ts":"1479129786.003730"},{"type":"message","user":"U0ZJZBJLF","text":"how is it even possible?","ts":"1479129790.003731"},{"type":"message","user":"U0Y14MWA2","text":"because it makes our life MUCH easier","ts":"1479129795.003732"},{"type":"message","user":"U0ZJZBJLF","text":"oh, wait actually it's possible","ts":"1479129808.003733"},{"type":"message","user":"U0ZJZBJLF","text":"if a PBFT node was dead","ts":"1479129812.003734"},{"type":"message","user":"U0Y14MWA2","text":"yes :slightly_smiling_face:","ts":"1479129813.003735"},{"type":"message","user":"U0ZJZBJLF","text":"and is now alive","ts":"1479129815.003736"},{"type":"message","user":"U0Y14MWA2","text":"for example","ts":"1479129820.003737"},{"type":"message","user":"U0Y14MWA2","text":"now","ts":"1479129825.003738"},{"type":"message","user":"U0ZJZBJLF","text":"then you don't replicate the state among them, you just need it for ordering","ts":"1479129828.003739"},{"type":"message","user":"U0Y14MWA2","text":"peers need holes filled","ts":"1479129831.003740"},{"type":"message","user":"U0ZJZBJLF","text":"we do that","ts":"1479129836.003741"},{"type":"message","user":"U0Y14MWA2","text":"exactly","ts":"1479129838.003742"},{"type":"message","user":"U0ZJZBJLF","text":"we have 2 layers of state transfer actually","ts":"1479129846.003743"},{"type":"message","user":"U0Y14MWA2","text":"and <https:\/\/jira.hyperledger.org\/browse\/FAB-1096> describes 3 ways for peers to have hole-less raw ledger","ts":"1479129862.003744"},{"type":"message","user":"U0ZJZBJLF","text":"the first layer gives you dissemination from peers that connect to ordering service and then forwards blocks to peers","ts":"1479129863.003745"},{"type":"message","user":"U0Y14MWA2","text":"I am asking can we assume gossip solves this - per item 3?","ts":"1479129877.003746"},{"type":"message","user":"U0ZJZBJLF","text":"to make things scale","ts":"1479129878.003747"},{"type":"message","user":"U0ZJZBJLF","text":"the 2nd layer of state transfer gives you an ability to fill up blocks that the ordering service isn't sending anymore","ts":"1479129895.003748"},{"type":"message","user":"U0ZJZBJLF","text":"for example- all nodes of PBFT service now reached block 100 and you need block 80, then you (the peer) go to another peer that you (somehow :slightly_smiling_face: ) know it has block 80 and ask it for the block","ts":"1479129940.003749"},{"type":"message","user":"U0Y14MWA2","text":"fo rinstance - if your implementation is pull based","ts":"1479129961.003750"},{"type":"message","user":"U0ZJZBJLF","text":"the state transfer is indeed pull based of course because only you care about the blocks you don't have, no one cares about you in a byzantine environment","ts":"1479129993.003751"},{"type":"message","user":"U0Y14MWA2","text":"right ok","ts":"1479130015.003752"},{"type":"message","user":"U0Y14MWA2","text":"so my point","ts":"1479130017.003753"},{"type":"message","user":"U0Y14MWA2","text":"us filling in raw ledger holes @orderers\/consenters","ts":"1479130032.003754"},{"type":"message","user":"U0Y14MWA2","text":"would be redoing a subset of your job","ts":"1479130042.003755"},{"type":"message","user":"U0Y14MWA2","text":"which obviously I want to avoid","ts":"1479130048.003756"},{"type":"message","user":"U0ZJZBJLF","text":"there is a small problem here","ts":"1479130071.003757"},{"type":"message","user":"U0ZJZBJLF","text":"you need to make sure that enough peers got a block you sent","ts":"1479130079.003758"},{"type":"message","user":"U0Y14MWA2","text":"we do that","ts":"1479130086.003759"},{"type":"message","user":"U0ZJZBJLF","text":"oh cool","ts":"1479130089.003760"},{"type":"message","user":"U0ZJZBJLF","text":"then we're OK","ts":"1479130092.003761"},{"type":"message","user":"U0Y14MWA2","text":"replace peers with orderers\/consenters","ts":"1479130101.003762"},{"type":"message","user":"U0Y14MWA2","text":"and we do that","ts":"1479130104.003763"},{"type":"message","user":"U0ZJZBJLF","text":"no","ts":"1479130113.003764"},{"type":"message","user":"U0ZJZBJLF","text":"wait","ts":"1479130114.003765"},{"type":"message","user":"U0ZJZBJLF","text":"I can't replace it","ts":"1479130116.003766"},{"type":"message","user":"U0Y14MWA2","text":"that depends","ts":"1479130123.003767"},{"type":"message","user":"U0ZJZBJLF","text":"what if you sent block 100 and no one asked it?","ts":"1479130128.003768"},{"type":"message","user":"U0ZJZBJLF","text":"ok well you can't \"send\" a block","ts":"1479130141.003769"},{"type":"message","user":"U0ZJZBJLF","text":"you implement the deliver","ts":"1479130144.003770"},{"type":"message","user":"U0ZJZBJLF","text":"(gRPC call)","ts":"1479130147.003771"},{"type":"message","user":"U0Y14MWA2","text":"yes","ts":"1479130155.003772"},{"type":"message","user":"U0Y14MWA2","text":"so what consensus can offer to gossip","ts":"1479130165.003773"},{"type":"message","user":"U0Y14MWA2","text":"is the following guarantee","ts":"1479130179.003774"},{"type":"message","user":"U0ZJZBJLF","text":"so- if for instance, as an extreme case, no peer called Deliver and you have 10000 blocks- then you need to keep them all in-memory","ts":"1479130179.003775"},{"type":"message","user":"U0ZJZBJLF","text":"or on disk","ts":"1479130189.003776"},{"type":"message","user":"U0XR6J961","text":"who is you?","ts":"1479130193.003777"},{"type":"message","user":"U0ZJZBJLF","text":"PBFT of course","ts":"1479130199.003778"},{"type":"message","user":"U0Y14MWA2","text":"every raw ledger batch is replicated  across a subset of correct orderers\/consenters","ts":"1479130206.003779"},{"type":"message","user":"U0Y14MWA2","text":"then gossip  takes over","ts":"1479130215.003780"},{"type":"message","user":"U0Y14MWA2","text":"and replicates this to all peers as well as possibly to consenters\/orderers that do not have this batch","ts":"1479130237.003781"},{"type":"message","user":"U0ZJZBJLF","text":"nope","ts":"1479130247.003782"},{"type":"message","user":"U0Y14MWA2","text":"ok - why not?","ts":"1479130253.003783"},{"type":"message","user":"U0ZJZBJLF","text":"that's not how it's done","ts":"1479130254.003784"},{"type":"message","user":"U0ZJZBJLF","text":"gossip doesn't live inside the ordering service","ts":"1479130263.003785"},{"type":"message","user":"U0ZJZBJLF","text":"some peers call Deliver on the PBFT instances","ts":"1479130271.003786"},{"type":"message","user":"U0Y14MWA2","text":"it does not have to","ts":"1479130272.003787"},{"type":"message","user":"U0ZJZBJLF","text":"they get blocks and they send them to other peers via gossip","ts":"1479130284.003788"},{"type":"message","user":"U0Y14MWA2","text":"I still do not see the issue?","ts":"1479130304.003789"},{"type":"message","user":"U0ZJZBJLF","text":"I don't think there is an issue if you save batches on disk","ts":"1479130319.003790"},{"type":"message","user":"U0Y14MWA2","text":"we do","ts":"1479130326.003791"},{"type":"message","user":"U0ZJZBJLF","text":"what's the issue then?","ts":"1479130330.003792"},{"type":"message","user":"U0Y14MWA2","text":":slightly_smiling_face:","ts":"1479130334.003793"},{"type":"message","user":"U0Y14MWA2","text":"ok let's repeat","ts":"1479130346.003794"},{"type":"message","user":"U0ZJZBJLF","text":"you want maybe a hangout?","ts":"1479130362.003795"},{"type":"message","user":"U0Y14MWA2","text":"normally in a textbook pbft implementations - all pbft nodes - consenters\/orderers in our case have the ENTIRE history","ts":"1479130380.003796"},{"type":"message","user":"U0Y14MWA2","text":"history = raw ledger (in HL speak)","ts":"1479130389.003797"},{"type":"message","user":"U0Y14MWA2","text":"now","ts":"1479130394.003798"},{"type":"message","user":"U0ZJZBJLF","text":"and you said you won't have it, so you won't have to sync slow nodes or nodes that came alive","ts":"1479130409.003799"},{"type":"message","user":"U0Y14MWA2","text":"exactly - because we do not need that for ordering (modulo consenter reconfiguration - but let's put that aside now)","ts":"1479130436.003800"},{"type":"message","user":"U0Y14MWA2","text":"it is peers who need hole-less RL","ts":"1479130454.003801"},{"type":"message","user":"U0Y14MWA2","text":"not conenters\/orderers","ts":"1479130458.003802"},{"type":"message","user":"U0Y14MWA2","text":"hence I want to not implement state transfer at all @consensus","ts":"1479130477.003803"},{"type":"message","user":"U0ZJZBJLF","text":"yeah, and like I said- if a peer `p` knows of a peer `q` who has a block that `p` needs it'll get it from `q`","ts":"1479130480.003804"},{"type":"message","user":"U0Y14MWA2","text":"but to reuse gossip for that","ts":"1479130482.003805"},{"type":"message","user":"U0Y14MWA2","text":"is \"peer\"=\"gossip peer\" or \"peer\"=\"HL peer\"","ts":"1479130565.003808"},{"type":"message","user":"U0ZJZBJLF","text":"oh, every HL peer is a gossip peer of course","ts":"1479130578.003809"},{"type":"message","user":"U0Y14MWA2","text":"yes but","ts":"1479130583.003810"},{"type":"message","user":"U0Y14MWA2","text":"I am alluding to the case","ts":"1479130589.003811"},{"type":"message","user":"U0ZJZBJLF","text":"there are either peers, nodes (orderer, CAs etc) and apps","edited":{"user":"U0ZJZBJLF","ts":"1479130605.000000"},"ts":"1479130593.003812"},{"type":"message","user":"U0Y14MWA2","text":"where consenters are also gossip peers","ts":"1479130602.003813"},{"type":"message","user":"U0ZJZBJLF","text":"no they are not","ts":"1479130610.003815"},{"type":"message","user":"U0Y14MWA2","text":"ok - why not?","ts":"1479130616.003816"},{"type":"message","user":"U0ZJZBJLF","text":"ordering service nodes, have no gossip code in them","ts":"1479130625.003817"},{"type":"message","user":"U0Y14MWA2","text":"well","ts":"1479130632.003818"},{"type":"message","user":"U0Y14MWA2","text":"this is related to hookiing the two up","ts":"1479130641.003819"},{"type":"message","user":"U0Y14MWA2","text":"what is the showstopper to do that?","ts":"1479130651.003820"},{"type":"message","user":"U0ZJZBJLF","text":"<@U0XPR4NP4>  and <@U0XQ35CDD>  basically :wink:","ts":"1479130661.003821"},{"type":"message","user":"U0Y14MWA2","text":"aha","ts":"1479130669.003822"},{"type":"message","user":"U0Y14MWA2","text":"so soft problem","ts":"1479130671.003823"},{"type":"message","user":"U0Y14MWA2","text":"solo does not need that","ts":"1479130689.003824"},{"type":"message","user":"U0Y14MWA2","text":"and probably CFT does not either","ts":"1479130693.003825"},{"type":"message","user":"U0Y14MWA2","text":"but for BFT we may want to hook up","ts":"1479130701.003826"},{"type":"message","user":"U0ZJZBJLF","text":"I am indifferent to architecture arguments (unless they effect me), I'm just a simple man who writes code.... if you want to open something for a discussion and that is related to ordering service you should ask them","edited":{"user":"U0ZJZBJLF","ts":"1479130736.000000"},"ts":"1479130713.003827"},{"type":"message","user":"U0Y14MWA2","text":"well let's put that aside","ts":"1479130746.003829"},{"type":"message","user":"U0XR6J961","text":"<@U0Y14MWA2> is your goal to fill the gaps in the orderer raw ledger?","ts":"1479130747.003830"},{"type":"message","user":"U0XR6J961","text":"or is your goal for the committers to tolerate gaps","ts":"1479130766.003831"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XR6J961> this is not needed unless we have consenter reocnfiguration","ts":"1479130768.003832"},{"type":"message","user":"U0ZJZBJLF","text":"I thought he wanted to full up holes in peers","ts":"1479130769.003833"},{"type":"message","user":"U0Y14MWA2","text":"but with consenter reconfiguration this is needed as well","ts":"1479130786.003834"},{"type":"message","user":"U0Y14MWA2","text":"so I want gossip capability from consenters to peers in the first place","ts":"1479130801.003835"},{"type":"message","user":"U0ZJZBJLF","text":"you want maybe to chime in the consensus scrum today and ask that?","ts":"1479130805.003836"},{"type":"message","user":"U0Y14MWA2","text":"but also, eventually, among consenters themselves","ts":"1479130813.003837"},{"type":"message","user":"U0Y14MWA2","text":"ask what?","ts":"1479130825.003838"},{"type":"message","user":"U0ZJZBJLF","text":"\"so I want gossip capability from consenters to peers in the first place\" - what does that mean precisely?","ts":"1479130833.003839"},{"type":"message","user":"U0ZJZBJLF","text":"I mean- to talk about any architectural change you may want","ts":"1479130853.003840"},{"type":"message","user":"U0Y14MWA2","text":"this is not an architectural change","ts":"1479130876.003841"},{"type":"message","user":"U0ZJZBJLF","text":"so I still don't understand what change you're suggesting exactly :confused:","ts":"1479130894.003842"},{"type":"message","user":"U0Y14MWA2","text":"this is making gossip part of our bft consensus service implenmentation","ts":"1479130900.003843"},{"type":"message","user":"U0ZJZBJLF","text":"\"so I want gossip capability from consenters to peers in the first place\" - what does that mean","ts":"1479130911.003844"},{"type":"message","user":"U0ZJZBJLF","text":"ohhhhhh","ts":"1479130916.003845"},{"type":"message","user":"U0ZJZBJLF","text":"you want to use our gossip code in PBFT code?","ts":"1479130923.003846"},{"type":"message","user":"U0Y14MWA2","text":"well","ts":"1479130930.003847"},{"type":"message","user":"U0Y14MWA2","text":"in a structured manner","ts":"1479130934.003848"},{"type":"message","user":"U0Y14MWA2","text":"but the answer is yes","ts":"1479130937.003849"},{"type":"message","user":"U0ZJZBJLF","text":"hmmm but we can only replicate raw ledgr blocks","ts":"1479130949.003850"},{"type":"message","user":"U0ZJZBJLF","text":"is that ok?","ts":"1479130952.003851"},{"type":"message","user":"U0Y14MWA2","text":"that's what I need","ts":"1479130956.003852"},{"type":"message","user":"U0ZJZBJLF","text":"I mean, the multi-signed ledger blocks","ts":"1479130964.003853"},{"type":"message","user":"U0ZJZBJLF","text":"not something \"uncooked\"","ts":"1479130971.003854"},{"type":"message","user":"U0Y14MWA2","text":"that's what we have :slightly_smiling_face:","ts":"1479130973.003855"},{"type":"message","user":"U0ZJZBJLF","text":"ok then I would be honored :wink:","ts":"1479130981.003856"},{"type":"message","user":"U0Y14MWA2","text":"my pleasure :slightly_smiling_face:","ts":"1479130987.003857"},{"type":"message","user":"U0ZJZBJLF","text":"but you need I guess to talk about it with others, don't you?","ts":"1479131004.003858"},{"type":"message","user":"U0Y14MWA2","text":"I talked to <@U0XR6J961> :slightly_smiling_face:","ts":"1479131020.003859"},{"type":"message","user":"U0ZJZBJLF","text":"because from what I understood, <@U0XPR4NP4>  and <@U0XQ35CDD>  wanted the ordering service to be \"pure\" and without gossip code","ts":"1479131027.003860"},{"type":"message","user":"U0XR6J961","text":"so would orderers fill their raw ledger?","edited":{"user":"U0XR6J961","ts":"1479131054.000000"},"ts":"1479131042.003861"},{"type":"message","user":"U0Y14MWA2","text":"possibly yes","ts":"1479131050.003863"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XR6J961> ^^^","ts":"1479131056.003865"},{"type":"message","user":"U0XR6J961","text":"ah","ts":"1479131059.003866"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1479131064.003867"},{"type":"message","user":"U0Y14MWA2","text":"(this is needed for reconfig)","ts":"1479131073.003868"},{"type":"message","user":"U0XR6J961","text":"so that would be a combination of (3) to achieve (2)?","ts":"1479131083.003869"},{"type":"message","user":"U0ZJZBJLF","text":"I have a better idea though, marko.","ts":"1479131085.003870"},{"type":"message","user":"U0ZJZBJLF","text":"I have a pull module in the gossip code","ts":"1479131101.003871"},{"type":"message","user":"U0Y14MWA2","text":"listening","ts":"1479131101.003872"},{"type":"message","user":"U0ZJZBJLF","text":"it's pluggable","ts":"1479131103.003873"},{"type":"message","user":"U0ZJZBJLF","text":"you can maybe use it to sync the blocks you need","ts":"1479131117.003874"},{"type":"message","user":"U0ZJZBJLF","text":"without running a fully fledges gossip component","ts":"1479131123.003875"},{"type":"message","user":"U0Y14MWA2","text":"this is a lower level detail","ts":"1479131131.003876"},{"type":"message","user":"U0Y14MWA2","text":"let's talk about that","ts":"1479131137.003877"},{"type":"message","user":"U0Y14MWA2","text":"it';s simpler","ts":"1479131142.003878"},{"type":"message","user":"U0ZJZBJLF","text":"this isn't such a lower level detail. You already know how to send messages, right?","ts":"1479131165.003879"},{"type":"message","user":"U0ZJZBJLF","text":"from orderers","ts":"1479131168.003880"},{"type":"message","user":"U0ZJZBJLF","text":"to orderers","ts":"1479131171.003881"},{"type":"message","user":"U0ZJZBJLF","text":"so you can use the module (maybe) to synchronize the state. you just need to \"teach\" it the following things:","ts":"1479131195.003882"},{"type":"message","user":"U0Y14MWA2","text":"yes we do that :slightly_smiling_face:","ts":"1479131196.003883"},{"type":"message","subtype":"file_share","text":"<@U0ZJZBJLF|yacovm> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/yacovm\/F324N2ESF\/-.go|Untitled>","file":{"id":"F324N2ESF","created":1479131208,"timestamp":1479131208,"name":"-.go","title":"Untitled","mimetype":"text\/plain","filetype":"go","pretty_type":"Go","user":"U0ZJZBJLF","editable":true,"size":816,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F324N2ESF\/-.go?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F324N2ESF\/download\/-.go?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/yacovm\/F324N2ESF\/-.go","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F324N2ESF-7e0da415b5","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/yacovm\/F324N2ESF\/-.go\/edit","preview":"type PullAdapter interface {\r\n\t\/\/ SelectPeers returns a slice of peers which the engine will initiate the protocol with\r\n\tSelectPeers() []string\r\n\r\n\t\/\/ Hello sends a hello message to initiate the protocol\r","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre><span class=\"cm-keyword\">type<\/span> <span class=\"cm-variable\">PullAdapter<\/span> <span class=\"cm-keyword\">interface<\/span> {<\/pre><\/div>\n<div><pre>\t<span class=\"cm-comment\">\/\/ SelectPeers returns a slice of peers which the engine will initiate the protocol with<\/span><\/pre><\/div>\n<div><pre>\t<span class=\"cm-variable\">SelectPeers<\/span>() []<span class=\"cm-keyword\">string<\/span><\/pre><\/div>\n<div><pre>&#8203;<\/pre><\/div>\n<div><pre>\t<span class=\"cm-comment\">\/\/ Hello sends a hello message to initiate the protocol<\/span><\/pre><\/div>\n<\/div>\n<\/div>\n","lines":20,"lines_more":15,"preview_is_truncated":false,"channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0ZJZBJLF","upload":true,"display_as_bot":false,"username":"<@U0ZJZBJLF|yacovm>","bot_id":null,"ts":"1479131209.003884"},{"type":"message","user":"U0ZJZBJLF","text":"this is the protocol:","ts":"1479131228.003885"},{"type":"message","subtype":"file_share","text":"<@U0ZJZBJLF|yacovm> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/yacovm\/F328WG812\/-.go|Untitled>","file":{"id":"F328WG812","created":1479131236,"timestamp":1479131236,"name":"-.go","title":"Untitled","mimetype":"text\/plain","filetype":"go","pretty_type":"Go","user":"U0ZJZBJLF","editable":true,"size":1001,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F328WG812\/-.go?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F328WG812\/download\/-.go?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/yacovm\/F328WG812\/-.go","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F328WG812-c360960854","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/yacovm\/F328WG812\/-.go\/edit","preview":"\/* PullEngine is an object that performs pull-based gossip, and maintains an internal state of items\r\n   identified by uint64 numbers.\r\n   The protocol is as follows:\r\n   1) The Initiator sends a Hello message with a specific NONCE to a set of remote peers.\r\n   2) Each remote peer responds with a digest of its messages and returns that NONCE.\r","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre><span class=\"cm-comment\">\/* PullEngine is an object that performs pull-based gossip, and maintains an internal state of items<\/span><\/pre><\/div>\n<div><pre>   <span class=\"cm-comment\">identified by uint64 numbers.<\/span><\/pre><\/div>\n<div><pre>   <span class=\"cm-comment\">The protocol is as follows:<\/span><\/pre><\/div>\n<div><pre>   <span class=\"cm-comment\">1) The Initiator sends a Hello message with a specific NONCE to a set of remote peers.<\/span><\/pre><\/div>\n<div><pre>   <span class=\"cm-comment\">2) Each remote peer responds with a digest of its messages and returns that NONCE.<\/span><\/pre><\/div>\n<\/div>\n<\/div>\n","lines":17,"lines_more":12,"preview_is_truncated":false,"channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0ZJZBJLF","upload":true,"display_as_bot":false,"username":"<@U0ZJZBJLF|yacovm>","bot_id":null,"ts":"1479131237.003886"},{"type":"message","user":"U0ZJZBJLF","text":"oh the copy-paste beheaded the right guy :open_mouth:","ts":"1479131265.003887"},{"type":"message","user":"U0Y14MWA2","text":"but I would like it more high level","ts":"1479131400.003888"},{"type":"message","user":"U0Y14MWA2","text":"I would like gossip to take care about falling back to other sources if the source I selected does not work","ts":"1479131420.003889"},{"type":"message","user":"U0Y14MWA2","text":"we have a hello message of our own - but basically the goal would be to have things happen automagically","ts":"1479131458.003890"},{"type":"message","user":"U0Y14MWA2","text":"rather than re-doing low level sends","ts":"1479131465.003891"},{"type":"message","user":"U0Y14MWA2","text":"or I have to select right away the worst-case number of remote peers?","ts":"1479131714.003892"},{"type":"message","user":"U0XPR4NP4","text":"<@U0Y14MWA2> Requiring that ordering nodes be able to initiate network connections to any node which is not another orderer is a bit of a non-starter for the \"as a service\" model.","ts":"1479131930.003893"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XPR4NP4> you seem to be implicitly assuming this is a push-based gossip","ts":"1479131982.003894"},{"type":"message","user":"U0Y14MWA2","text":"it seems to me that it is a pull-based one","ts":"1479131989.003895"},{"type":"message","user":"U0XPR4NP4","text":"So what is the flow for reconfiguration? Ordering node starts up, and waits for a gossiping peer to connect to it?","ts":"1479132028.003896"},{"type":"message","user":"U0ZJZBJLF","text":"Marko, the pull protocol in gossip is optimized for gossip pulling of blocks which are in-flight","ts":"1479132033.003897"},{"type":"message","user":"U0ZJZBJLF","text":"it's not optimized for your use case but I think it can be very easily","ts":"1479132069.003898"},{"type":"message","user":"U0ZJZBJLF","text":"yeah and I agree with what Jason said","ts":"1479132093.003899"},{"type":"message","user":"U0ZJZBJLF","text":"It doesn't make any sense having an orderer node connect to a *none* orderer node, or even pull information out of it.","edited":{"user":"U0ZJZBJLF","ts":"1479132132.000000"},"ts":"1479132109.003900"},{"type":"message","user":"U0Y14MWA2","text":"(where did I write I want that?)","ts":"1479132138.003902"},{"type":"message","user":"U0Y14MWA2","text":"I want","ts":"1479132159.003903"},{"type":"message","user":"U0ZJZBJLF","text":"\"other sources\"","ts":"1479132162.003904"},{"type":"message","user":"U0Y14MWA2","text":"1) peers pull info from orderers","ts":"1479132168.003905"},{"type":"message","user":"U0Y14MWA2","text":"2) orderes pull info from other orderers","ts":"1479132176.003906"},{"type":"message","user":"U0ZJZBJLF","text":"ok, so (1) is achieved via Deliver, and (2) can be achieved if you adopt a mutation of the pull mechanism in gossip","ts":"1479132201.003907"},{"type":"message","user":"U0XPR4NP4","text":"But (2) does not need gossip? The cardinality of the orderer set is relatively small, why not simply pull the blocks over a normal stream, as we did before for 0.5\/0.6?","ts":"1479132275.003908"},{"type":"message","user":"U0ZJZBJLF","text":"Yeah but you see, gossip comes with a very big bunch of other stuff","ts":"1479132298.003909"},{"type":"message","user":"U0ZJZBJLF","text":"I think since you already know how to send messages between orderers you could simply instantiate a `PullEngine` ( a gossip object) and give it a customized `PullAdapter` which will do the work for you","ts":"1479132361.003910"},{"type":"message","user":"U0XPR4NP4","text":"I agree, that possibly re-using the gossip state transfer code would save the orderer the headache of re implementing it, though with in order block retrieval, I don't think it would be a very complicated piece of code.  Either way, if it is just state transfer among orderers, gossip\/not seems like an implementation detail.","ts":"1479132513.003911"},{"type":"message","user":"U0ZJZBJLF","text":"wait, why not have the orderer instance that needs a block simply call Deliver on another ordering instance?","ts":"1479132561.003912"},{"type":"message","user":"U0ZJZBJLF","text":"or maybe I'm missing something here","ts":"1479132584.003913"},{"type":"message","user":"U0XR6J961","text":"it doesn't know which one to ask","ts":"1479132640.003914"},{"type":"message","user":"U0XR6J961","text":"and it doesn't maintain a list of which blocks it doesn't have","ts":"1479132665.003915"},{"type":"message","user":"U0XR6J961","text":"i think we will need a \"headers only\" deliver anyways","ts":"1479132674.003916"},{"type":"message","user":"U0XR6J961","text":"and in that case, the orderer could subscribe to headers only from all connected orderers","edited":{"user":"U0XR6J961","ts":"1479132701.000000"},"ts":"1479132691.003917"},{"type":"message","user":"U0XR6J961","text":"and that's half of a push mechanism","ts":"1479132721.003919"},{"type":"message","user":"U0ZJZBJLF","text":"oh... well, that's a problem then.","ts":"1479132742.003920"},{"type":"message","user":"U0ZJZBJLF","text":"why doesn't it know which one to ask?","ts":"1479132748.003921"},{"type":"message","user":"U0XR6J961","text":"and you'd put the window at the lowest gap you have","ts":"1479132751.003922"},{"type":"message","user":"U0XR6J961","text":"so if you hear about a batch you have a gap at, you'd ask for that batch","ts":"1479132785.003923"},{"type":"message","user":"U0XR6J961","text":"state transfer essentially","ts":"1479132790.003924"},{"type":"message","user":"U0ZJZBJLF","text":"wait simon I don't understand","ts":"1479132800.003925"},{"type":"message","user":"U0ZJZBJLF","text":"how can you not know you have a gap?","ts":"1479132805.003926"},{"type":"message","user":"U0ZJZBJLF","text":"just read the sequences","ts":"1479132813.003927"},{"type":"message","user":"U0XR6J961","text":"and then you yourself in turn would have to notify all listeners that have their window at this batch, etc.","ts":"1479132817.003928"},{"type":"message","user":"U0ZJZBJLF","text":"if it's sequential- you have no gaps. else- you have a gap?","ts":"1479132824.003929"},{"type":"message","user":"U0XR6J961","text":"some sort of gossip","ts":"1479132824.003930"},{"type":"message","user":"U0XR6J961","text":"you know you have a gap","ts":"1479132836.003931"},{"type":"message","user":"U0XR6J961","text":"you just don't know who can fill it","ts":"1479132843.003932"},{"type":"message","user":"U0ZJZBJLF","text":"so ask all other orderers","ts":"1479132852.003933"},{"type":"message","user":"U0ZJZBJLF","text":"whether they have the item","ts":"1479132856.003934"},{"type":"message","user":"U0XR6J961","text":"that's gossip, no?","ts":"1479132865.003935"},{"type":"message","user":"U0XR6J961","text":"not quite","ts":"1479132875.003936"},{"type":"message","user":"U0ZJZBJLF","text":"yeah but I mean- you can use the pull engine in gossip to do that","ts":"1479132876.003937"},{"type":"message","user":"U0XR6J961","text":"all could ask the same guy","ts":"1479132887.003938"},{"type":"message","user":"U0ZJZBJLF","text":"no","ts":"1479132898.003939"},{"type":"message","user":"U0ZJZBJLF","text":"they ask everyone","ts":"1479132901.003940"},{"type":"message","user":"U0ZJZBJLF","text":"or a subset","edited":{"user":"U0ZJZBJLF","ts":"1479132921.000000"},"ts":"1479132902.003941"},{"type":"message","user":"U0XR6J961","text":"yes, but if there is just one reachable guy","ts":"1479132921.003943"},{"type":"message","user":"U0ZJZBJLF","text":"then ask him... what's the problem :confused:","ts":"1479132931.003944"},{"type":"message","user":"U0XR6J961","text":"then all of them might be transfering from that one","ts":"1479132932.003945"},{"type":"message","user":"U0ZJZBJLF","text":"so?","ts":"1479132936.003946"},{"type":"message","user":"U0XR6J961","text":"you overload one guy","ts":"1479132942.003947"},{"type":"message","user":"U0ZJZBJLF","text":"but there is only 1 reachable like you just said","ts":"1479132946.003948"},{"type":"message","user":"U0ZJZBJLF","text":"wait how is that even possible?","ts":"1479132957.003949"},{"type":"message","user":"U0ZJZBJLF","text":"a 1-way network partition?","ts":"1479132962.003950"},{"type":"message","user":"U0XR6J961","text":"with periodic gossip, you distribute the load","ts":"1479132968.003951"},{"type":"message","user":"U0ZJZBJLF","text":"the pull engine does just that","ts":"1479132984.003952"},{"type":"message","user":"U0ZJZBJLF","text":"if you have 100 blocks missing","ts":"1479132990.003953"},{"type":"message","user":"U0ZJZBJLF","text":"you do round-robin, or random","ts":"1479132995.003954"},{"type":"message","user":"U0ZJZBJLF","text":"I don't remember what","ts":"1479132998.003955"},{"type":"message","user":"U0ZJZBJLF","text":"I think random","ts":"1479133001.003956"},{"type":"message","user":"U0ZJZBJLF","text":"and you ask 100\/K blocks from each 1..K peers","ts":"1479133022.003957"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1479133028.003958"},{"type":"message","user":"U0ZJZBJLF","text":"you can take a look if you want at `gossip\/gossip\/algo\/pull*.go`","edited":{"user":"U0ZJZBJLF","ts":"1479133171.000000"},"ts":"1479133157.003959"},{"type":"message","user":"U0XPR4NP4","text":"i'm still not really seeing the scenario, why do so few ordering nodes have blocks? An orderer should be able to very quickly detect when it misses a sequence number in the sbft model, and it will generally have the set of orderers which it can retrieve those blocks from.","ts":"1479133245.003961"},{"type":"message","user":"U0XPR4NP4","text":"&gt; i think we will need a \"headers only\" deliver anyways\n\nI do concur with this though","ts":"1479133273.003962"},{"type":"message","user":"U0XR6J961","text":"if the gap is larger than 1, it does not know who has the previous blocks","ts":"1479133295.003963"},{"type":"message","user":"U0XPR4NP4","text":"True, though it still seems like in most sane scenarios, the probability of picking someone with all the blocks is pretty high.  In general, why would we expect so many holes across all the nodes?","ts":"1479133399.003964"},{"type":"message","user":"U0XR6J961","text":"it's possible","ts":"1479133423.003965"},{"type":"message","user":"U0XR6J961","text":"isn't that all that counts?","ts":"1479133432.003966"},{"type":"message","user":"U0XR6J961","text":"this is about how to deal with such a situation","ts":"1479133442.003967"},{"type":"message","user":"U0XPR4NP4","text":"Tolerating a situation and optimizing for it are two different things.  I'm still not seeing concretely a likely scenario for how the network ends up in this state (obviously carefully orchestrated failures can do this, but seems very unlikely)","ts":"1479133534.003968"},{"type":"message","user":"U0XR6J961","text":"sure, but how do you deal with it?","ts":"1479133555.003969"},{"type":"message","user":"U0XR6J961","text":"what's the simplest way to deal with it","ts":"1479133567.003970"},{"type":"message","user":"U0XPR4NP4","text":"Well, naively, you randomly pick an orderer, ask for the block, and if he has it great, otherwise, ask someone else until you get a successful reply.","ts":"1479133586.003971"},{"type":"message","user":"U0XR6J961","text":"<https:\/\/jira.hyperledger.org\/browse\/FAB-1096>","ts":"1479133588.003972"},{"type":"message","user":"U0XR6J961","text":"so you basically update the deliver window?","ts":"1479133642.003973"},{"type":"message","user":"U0XR6J961","text":"or do you have some sort of non-streaming rpc to ask for that block?","ts":"1479133663.003974"},{"type":"message","user":"U0ZJZBJLF","text":"they don't (at least from what i know)","edited":{"user":"U0ZJZBJLF","ts":"1479133772.000000"},"ts":"1479133760.003975"},{"type":"message","user":"U0XPR4NP4","text":"So, you pick the lowest block number you need, send a deliver (normal streaming RPC), and get blocks through the number you do need.","edited":{"user":"U0XPR4NP4","ts":"1479133989.000000"},"ts":"1479133891.003977"},{"type":"message","user":"U0XPR4NP4","text":"If you get back a 404 not found, you switch orderers and try again.","ts":"1479133900.003978"},{"type":"message","user":"U0XPR4NP4","text":"I agree it's inefficient when there are many holes spread across many ordering nodes, but the logic is simple, easy to implement, and doesn't require exposing any new RPCs.","edited":{"user":"U0XPR4NP4","ts":"1479133958.000000"},"ts":"1479133949.003979"},{"type":"message","user":"U0XPR4NP4","text":"By setting the window size on the Deliver SeekInfo, you can actually replicate a 'Pull just n blocks'","ts":"1479134020.003982"},{"type":"message","user":"U0XPR4NP4","text":"(So, if you are missing blocks 3-5, and 8, you can call Deliver() SeekInfo(seekto=3 window=3), SeekInfo(seekto=8, window=1) and that will retrieve exactly blocks 3-5 and 8 )","edited":{"user":"U0XPR4NP4","ts":"1479134101.000000"},"ts":"1479134093.003983"},{"type":"message","user":"U0Y14MWA2","text":"TL;DR?","ts":"1479134693.003985"},{"type":"message","user":"U0Y14MWA2","text":"(had a call in the meantime)","ts":"1479134703.003986"},{"type":"message","user":"U0XR6J961","text":"can you loop me in on the scrum hangout?  i'll be travelling on train","ts":"1479134803.003987"},{"type":"message","user":"U0UGH3X7X","text":"<@U0XR6J961> , tell me what to do to loop you in ?","ts":"1479134869.003988"},{"type":"message","user":"U0UGH3X7X","text":"scrum ...","ts":"1479135485.003989"},{"text":"<@U0UGH3X7X|tuand> has started a Google+ Hangout for this channel. <https:\/\/hangouts.google.com\/hangouts\/_\/nf4tqrdvbbbozc2iparf56e65ee|Join Hangout>.","username":"hangouts","bot_id":"B0UKUAJ0Y","type":"message","subtype":"bot_message","ts":"1479135503.003990"},{"type":"message","user":"U0ZJZBJLF","text":"pascal...? :open_mouth: <@U0Y14MWA2>","edited":{"user":"U0ZJZBJLF","ts":"1479136136.000000"},"ts":"1479136123.003991"},{"type":"message","user":"U0Y14MWA2","text":"pluscal","ts":"1479136230.003993"},{"type":"message","user":"U0Y14MWA2","text":"<http:\/\/research.microsoft.com\/en-us\/um\/people\/lamport\/tla\/pluscal.html>","ts":"1479136434.003994"},{"type":"message","user":"U0Y14MWA2","text":"see also <http:\/\/cacm.acm.org\/magazines\/2015\/4\/184701-how-amazon-web-services-uses-formal-methods\/fulltext>","attachments":[{"title":"How Amazon Web Services Uses Formal Methods","title_link":"http:\/\/cacm.acm.org\/magazines\/2015\/4\/184701-how-amazon-web-services-uses-formal-methods\/fulltext","text":"Engineers use TLA+ to prevent serious but subtle bugs from reaching production.","fallback":"How Amazon Web Services Uses Formal Methods","image_url":"http:\/\/cacm.acm.org\/system\/assets\/0001\/9188\/032015_CACMpg67_How-Amazon-Web1.large.jpg?1476779462&1426857401","from_url":"http:\/\/cacm.acm.org\/magazines\/2015\/4\/184701-how-amazon-web-services-uses-formal-methods\/fulltext","image_width":250,"image_height":250,"image_bytes":17519,"service_icon":"http:\/\/cacm.acm.org\/favicon.ico","service_name":"cacm.acm.org","id":1}],"ts":"1479136490.003995"},{"type":"message","user":"U0Y14MWA2","text":"(although some of us have been using it way before Amazon)","ts":"1479136511.003997"},{"type":"message","user":"U0XR6J961","text":"well about that","ts":"1479136538.003998"},{"type":"message","user":"U0XR6J961","text":"nobody invited me","ts":"1479136541.003999"},{"type":"message","user":"U0Y14MWA2","text":"to amazon? pluscal?","ts":"1479136573.004000"},{"type":"message","user":"U0XR6J961","text":"to the scrum","ts":"1479136578.004001"},{"type":"message","user":"U0Y14MWA2","text":"or just scrum? :slightly_smiling_face:","ts":"1479136580.004002"},{"type":"message","user":"U0ZJZBJLF","text":"thank god I thought you said Pascal","ts":"1479136659.004003"},{"type":"message","user":"U0ZJZBJLF","text":"hey <@U0XPR4NP4>  I have an important question regarding multi-channel and ordering service","ts":"1479136723.004004"},{"type":"message","user":"U0ZJZBJLF","text":"let's say we have orgs A, B and C in a channel X","ts":"1479136734.004005"},{"type":"message","user":"U0ZJZBJLF","text":"after a while, channel X is: B, C only","ts":"1479136743.004006"},{"type":"message","user":"U0ZJZBJLF","text":"what happens to the peers that call deliver on X to the orderer in org A?","edited":{"user":"U0ZJZBJLF","ts":"1479136767.000000"},"ts":"1479136756.004007"},{"type":"message","user":"U0XPR4NP4","text":"They'll get back an error in reply to their seek request","ts":"1479137047.004011"},{"type":"message","user":"U0ZJZBJLF","text":"how?","ts":"1479137059.004012"},{"type":"message","user":"U0ZJZBJLF","text":"they'll get a downstream message that contains an error?","edited":{"user":"U0ZJZBJLF","ts":"1479137159.000000"},"ts":"1479137064.004013"},{"type":"message","user":"U0ZJZBJLF","text":"(deliver response)","ts":"1479137185.004015"},{"type":"message","user":"U0ZJZBJLF","text":"and how will they know that it is because they're no longer in the channel, and there isn't a different fault that returns an error? <@U0XPR4NP4>  ?","edited":{"user":"U0ZJZBJLF","ts":"1479139586.000000"},"ts":"1479137210.004016"},{"type":"message","user":"U0XR6J961","text":"oh there is a problem with new-view messages and null requests in sbft","ts":"1479137324.004017"},{"type":"message","user":"U0XR6J961","text":"i thought i had fixed it for the hello message, but i did not","ts":"1479137342.004018"},{"type":"message","user":"U0XR6J961","text":"so the problem is that a null request after view change produces an empty batch","ts":"1479137380.004019"},{"type":"message","user":"U0XR6J961","text":"but for that the hash of the previous batch needs to be known","ts":"1479137399.004020"},{"type":"message","user":"U0XR6J961","text":"but if we have a gap, we don't know that hash, so we cannot validate that batch","ts":"1479137588.004021"},{"type":"message","user":"U1AU8DRQR","text":"does anybody have suggestions how to do the network testing of sbft?","ts":"1479138051.004022"},{"type":"message","user":"U0XR6J961","text":"my guess is that the p sets in the new-view message should allow you to verify the last batch hash","ts":"1479138469.004023"},{"type":"message","user":"U0XR6J961","text":"hum hum hum","ts":"1479138549.004024"},{"type":"message","user":"U0XR6J961","text":"i suspect a reconnect could fix all of this","ts":"1479138591.004025"},{"type":"message","user":"U0Y14MWA2","text":"why are there null requests in sbft","ts":"1479138672.004026"},{"type":"message","user":"U0Y14MWA2","text":"pbft had null requests for holes - if I recall correctly","ts":"1479138687.004027"},{"type":"message","user":"U0Y14MWA2","text":"there are no holes in sbft by design","ts":"1479138700.004028"},{"type":"message","user":"U0XPR4NP4","text":"&gt; and how will they know that it is because they're no longer in the channel, and there isn't a different fault that returns an error?\n\n<@U0ZJZBJLF> This is something I'd welcome feedback on.  We could return a 403 FORBIDDEN or a 404 NOT_FOUND.  This somewhat goes to the idea of \"Do you return account not found or bad password\" on authentication failure.  We could uniformly respond with a 403 when someone accesses a channel which doesn't exist or they are not authorized on, or, we could return a 404 when the channel doesn't exist, and a 403 when they are not authorized.  The question is whether leaking knowledge that the chain exists is okay or not.","ts":"1479147068.004030"},{"type":"message","user":"U0ZJZBJLF","text":"why use an HTTP status code?","ts":"1479147088.004031"},{"type":"message","user":"U0XPR4NP4","text":"That's what the fabric has standarized on for error codes","edited":{"user":"U0XPR4NP4","ts":"1479147109.000000"},"ts":"1479147104.004032"},{"type":"message","user":"U0ZJZBJLF","text":"lol you are REST-ful?","ts":"1479147132.004034"},{"type":"message","user":"U0ZJZBJLF","text":"just kidding","ts":"1479147139.004035"},{"type":"message","user":"U0ZJZBJLF","text":"where is common.Status?","ts":"1479147157.004036"},{"type":"message","user":"U0XPR4NP4","text":"`fabric\/protos\/common\/common.proto`","ts":"1479147168.004037"},{"type":"message","user":"U0ZJZBJLF","text":"I see... so I think that forbidden is good for this case.","ts":"1479147206.004038"},{"type":"message","user":"U0ZJZBJLF","text":"actually","ts":"1479147239.004039"},{"type":"message","user":"U0ZJZBJLF","text":"wait I take that back","ts":"1479147243.004040"},{"type":"message","user":"U0ZJZBJLF","text":"is the action a peer needs to take in case of 404 the same if it's actually 403?","ts":"1479147256.004041"},{"type":"message","user":"U0ZJZBJLF","text":"if it is- then maybe use always 404?","ts":"1479147262.004042"},{"type":"message","user":"U0XPR4NP4","text":"I see merits to all the options.  My gut says use 404 for 'does not exist', and 403 when the user is not authorized.","ts":"1479147398.004043"},{"type":"message","user":"U0XPR4NP4","text":"Because chain IDs are going to be generates as hashes, searching for a chain's existence exhaustively does not seem feasible, and the existence of a chain doesn't allow the attacker any real knowledge about its membership or contents, it seems better to leak the chain's existence, in favor of making errors less opaque to the client.","ts":"1479147496.004044"},{"type":"message","user":"U0XPR4NP4","text":"Just my gut, if anyone has a strong argument for another policy, I'm certainly ready to be swayed","ts":"1479147533.004045"},{"type":"message","user":"U0ZJZBJLF","text":"how long is the hash?","ts":"1479147870.004046"},{"type":"message","user":"U0ZJZBJLF","text":"*it seems better to leak the chain's existence, in favor of making errors less opaque to the client.* - I don't agree with this statement. Isn't this an API which is being used inside the project? it's not like we expose this API to customers, so making it informative and opaque isn't a big concern","ts":"1479147944.004047"},{"type":"message","user":"U0XPR4NP4","text":"&gt; how long is the hash?\nA good question, I assume 256 bits, but this needs to be finalized\n\n&gt; Isn't this an API which is being used inside the project? it's not like we expose this API to customers, so making it informative and opaque isn't a big concern\nI'm not sure what you mean? The peer is a client to the ordering service.  We can either be opaque about the reason why a seek request was rejected (the client knows either the chain doesn't exist, or the client is not authorized to view the service, but does not know which) or, we can be explicit about why (replying 403 on not authorized, and 404 on doesn't exist).","ts":"1479148668.004048"},{"type":"message","user":"U0XQ35CDD","text":"(I agree with the 403\/404 thinking.)","ts":"1479149177.004049"},{"type":"message","user":"U0ZJZBJLF","text":"But jason, the client is someone that writes either the peer or the sdk, meaning a fabric developer","ts":"1479150807.004050"},{"type":"message","user":"U0ZJZBJLF","text":"Being not opaque is good for debugging","edited":{"user":"U0ZJZBJLF","ts":"1479154222.000000"},"ts":"1479150827.004051"},{"type":"message","user":"U0ZJZBJLF","text":"And development","ts":"1479150840.004052"},{"type":"message","user":"U0ZJZBJLF","text":"It has no value in the day to day scenario","ts":"1479150860.004053"},{"type":"message","user":"U0XPR4NP4","text":"I'm not following.  How is having 1 error reply for 2 different conditions easier to debug than 2 error replies, one for each of 2 conditions?","edited":{"user":"U0XPR4NP4","ts":"1479151944.000000"},"ts":"1479151896.004054"},{"type":"message","user":"U0ZJZBJLF","text":"it's not easier to debug, I'm saying- after the debugging phase is over, you don't need to debug anymore.","ts":"1479153617.004056"},{"type":"message","user":"U0ZJZBJLF","text":"and you get more information hiding","ts":"1479153625.004057"},{"type":"message","user":"U0ZJZBJLF","text":"I meant, being not opaque of course","ts":"1479154229.004059"},{"type":"message","user":"U0XV1HDL3","text":"<@U0ZJZBJLF>, <@U0Y14MWA2>: reading your discussion from earlier on using gossip module's state transfer also to support the state transfers needed by the consensus protocol. \nYES! this is how it should be! no duplication of a state transfer function.\nthere should not be concerns about violating modularity, but interfaces will be important: since the consensus API here already contains hash-chained batches\/blocks (unlike, say, etcd or ZK), the main prerequisites exist on both sides.","ts":"1479154432.004060"},{"type":"message","user":"U0ZJZBJLF","text":"let's just be clear","ts":"1479154478.004061"},{"type":"message","user":"U0ZJZBJLF","text":"I didn't mean using gossip's state transfer module","ts":"1479154491.004062"},{"type":"message","user":"U0ZJZBJLF","text":"I meant using gossip's pull module","ts":"1479154497.004063"},{"type":"message","user":"U0ZJZBJLF","text":"they are completely different stuff and the state transfer heavily relies on gossip (I think, <@U1HFNJB50>  correct me if I'm wrong)","ts":"1479154524.004064"},{"type":"message","user":"U1HFNJB50","text":"state transfer relies on gossip to get most up to date info about ledger height on other nodes","ts":"1479154647.004065"},{"type":"message","user":"U1HFNJB50","text":"and getting blocks of course","ts":"1479154687.004066"},{"type":"message","user":"U0ZJZBJLF","text":"by the way <@U0XV1HDL3> , if you want to do that, you'll need to slightly mutate the pull mechanism, because the way it is now - it doesn't fit to the PBFT use case 100%....","ts":"1479154769.004067"},{"type":"message","user":"U0XV1HDL3","text":"OK, i am not aware of the details, sorry. but in principle, from knowing the \"tip\" (= most uptodate block and its hash) one can reconstruct the correct, agreed-on sequence of raw-ledger-batches. i understood that a consenter may need that and that the peers need that. from very far, this looks the same.","ts":"1479154858.004068"},{"type":"message","user":"U0XV1HDL3","text":"but again i leave this to you, i am not 'in' the code","ts":"1479154871.004069"},{"type":"message","user":"U1RLZ5729","text":"Hey all,\nI am running with a setup which has two peers running on two different physical machines. When security was not enabled, i was able to have communication between them. \nBut now, I have security enabled and now the peers are not able to communicate and it is giving certification error. \nI am using the following docker-compose.yaml file:\n# membersrvc:\n#   image: hyperledger\/fabric-membersrvc\n#   ports:\n#     - \"50051:50051\"\n#     - \"7054:7054\"\n#   command: membersrvc\nvp1:\nimage: hyperledger\/fabric-peer\nports:\n  - \"5000:5000\"\n  - \"7051:7051\"\n  - \"7050:7050\"\n  - \"30303:30303\"\n  - \"30304:30304\"\nenvironment:\n  - CORE_PEER_ADDRESSAUTODETECT=false\n  - CORE_VM_ENDPOINT=unix:\/\/\/var\/run\/docker.sock\n  - CORE_LOGGING_LEVEL=DEBUG\n  - CORE_PEER_ID=vp1\n  - CORE_SECURITY_ENABLED=true\n  #- CORE_SECURITY_PRIVACY=true\n  - CORE_SECURITY_ENROLLID=test_vp0\n  - CORE_SECURITY_ENROLLSECRET=MwYpmSRjupbT\n  - CORE_PEER_DISCOVERY_ROOTNODE=9.109.251.105:7051\n  - CORE_PEER_PKI_ECA_PADDR=9.109.251.105:7054\n  - CORE_PEER_PKI_TCA_PADDR=9.109.251.105:7054\n  - CORE_PEER_PKI_TLSCA_PADDR=9.109.251.105:7054\n  - CORE_CHAINCODE_DEPLOYTIMEOUT=180000\n#  - MEMBERSRVC_CA_ACA_ENABLED=true\nvolumes:\n  - \/var\/run\/docker.sock:\/var\/run\/docker.sock\n# links:\n#   - membersrvc\ncommand: sh -c \"sleep 5; peer node start\u201d\n\nAny help is appreciated.","ts":"1479189744.004070"},{"type":"message","user":"U0XR6J961","text":"<@U0Y14MWA2> there are null requests so that you can play to the latest view number from the chain","ts":"1479196443.004071"},{"type":"message","user":"U1B2FF8LR","text":"<@U0ZJZBJLF> <@U0XPR4NP4> If you are looking for another opinion: more specific info using 403 and 404 seems better than using one error code for two usecases. Yacov, the debugging phase never ends; we must expect that additions and changes to SDKs (and new SDKs) will always be done. Is there a reason why we should hide that information from ongoing development and testing?","ts":"1479222990.004072"},{"type":"message","user":"U0ZJZBJLF","text":"it's a trade-off, if you hide information you reduce the attack surface. let's say that you're an org that was evicted of a channel, and you want to know if the channel still exists or not, 403 + 404 will tell you.","ts":"1479223125.004073"},{"type":"message","user":"U1B2FF8LR","text":"it does not matter. a booted client already has the hash for the chaincode, and will know the problem reason. Nevertheless, if this is an internal API, then is there any risk at all?","ts":"1479224208.004074"},{"type":"message","user":"U0ZJZBJLF","text":"this is not an internal API network-wise","ts":"1479224310.004075"},{"type":"message","user":"U1B2FF8LR","text":"ok, then can discard my 2nd sentence. first sentence still stands. and since that will be a problem regardless, then maybe standard practice will be to destroy entire channel when a member leaves\/expelled, and create a new channel with remaining members after a short time.","ts":"1479224513.004076"},{"type":"message","user":"U0XPR4NP4","text":"I'd argue that once a channel is created, it can never be truly destroyed.  You could cut off access to it, but you should never re-use a chainID, so I would think deleting a chain blacklists it as a chainID in perpetuity and so everyone would simply get back a 403","ts":"1479224548.004077","reactions":[{"name":"+1","users":["U0ZJZBJLF"],"count":1}]},{"type":"message","user":"U0ZJZBJLF","text":"destroying a channel once a member leaves is not a smart thing to do","ts":"1479224561.004078"},{"type":"message","user":"U0ZJZBJLF","text":"you lose all the chain","ts":"1479224566.004079"},{"type":"message","user":"U1B2FF8LR","text":"my first sentence still holds true. an expelled member will already have the hash, right? so if they are malicious, they will know the correct hash, whether or not they get a 404 or 403. The benefits of using both 404 and 403 hold true for the rest of the world. Rejecting their userid\/password must be enforced; let COP enforce that.","ts":"1479224972.004080"},{"type":"message","user":"U0ZJZBJLF","text":"actually what's rejected is their organization, just to be precise.","ts":"1479225021.004081"},{"type":"message","user":"U0ZJZBJLF","text":"when you boot a peer you boot the entire org","ts":"1479225040.004082"},{"type":"message","user":"U1B5DPRLG","text":"<@U1RLZ5729>: when running with security, you should uncomment the membersrvc stanza and references","ts":"1479225220.004083"},{"user":"U18P24857","text":"<@U18P24857|dongmingh> has joined the channel","type":"message","subtype":"channel_join","ts":"1479225604.004084"},{"type":"message","user":"U1B2FF8LR","text":"thanks for the clarification. I think you are saying that each channel has a list of orgs\/members , and we may be providing a way for the rest of the orgs to boot a member, and blacklist them so the channel can reject additional requests by that member to join again. (For my own learning: is this logic in the sdk, or fabric itself?)  Wouldn't they just get a new name\/address and attempt to join as a new org (rendering all that code useless)? What malicious-usecases could we really prevent by not providing 403\/404 differentiation?","ts":"1479225975.004085"},{"type":"message","user":"U0ZJZBJLF","text":"a channel is defined by a list of its peers and the orgs of the peers","ts":"1479226214.004086"},{"type":"message","user":"U0ZJZBJLF","text":"but the ACL is enforced in 2 different places:\n- in the ordering service it's enforced per org, meaning- any peer from an org can call `Deliver` from the channel\n- in the gossip laye I enforce a mix of 2 rules: - \n          - a block is never sent to a peer of an org not in the channel\n          - a block is never sent to a peer not in the channel, unless it is the peer that originally pulled it from the ordering service, and there is only 1 as such, per org.\n            That is in theory of course because I'm implementing this as we speak","ts":"1479226446.004087"},{"type":"message","user":"U0ZJZBJLF","text":"by the way, there is a posting on <#C27E2LGJY|fabric-peer-dev>  by <@U184J2R7S> , you (who are on this channel and didn't see) may want to read it, and I also posted some comments there, <@U0XPR4NP4>  and <@U0XQ35CDD>  your input is most welcome","ts":"1479246740.004088"},{"type":"message","user":"U1RLZ5729","text":"<@U1B5DPRLG> , I know that i should uncomment the membersrvc stanza and all.\nBut now since I am running with two physical machines setup, member services are running on another machine only. I am just trying to refer that membersrvc using the ip and port of that machine using:\n - CORE_PEER_PKI_ECA_PADDR=9.109.251.105:7054\n - CORE_PEER_PKI_TCA_PADDR=9.109.251.105:7054\n - CORE_PEER_PKI_TLSCA_PADDR=9.109.251.105:7054\n\nDo I need to do something more to get the communication between these two systems?","ts":"1479281455.004089"},{"type":"message","user":"U0XR6J961","text":"<@U1B2FF8LR>: are you guys running tests for the kafka and sbft orderers?","ts":"1479286483.004090"},{"type":"message","user":"U1B5DPRLG","text":"<@U1RLZ5729> : I\u2019d like to debug this with you and see what errors you are seeing. I\u2019ll DM you directly.\n<@U0XR6J961>: Yes, I am adding more tests for the kafka orderer now; sbft is in our backlog for more tests as well.","ts":"1479302829.004091"},{"type":"message","user":"U0XR6J961","text":"great","ts":"1479303106.004092"},{"type":"message","user":"U1AU8DRQR","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2515\/1>","ts":"1479303346.004093"},{"type":"message","user":"U1AU8DRQR","text":"new patchset now","ts":"1479303556.004094"},{"type":"message","user":"U1AU8DRQR","text":"does anybody know .\/orderer\/common\/bootstrap\/static\/ ?","ts":"1479382660.004095"},{"type":"message","user":"U0PB67X4K","text":"if something is breaking, I believe that Kostas fixed this in <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2179\/>","ts":"1479383706.004096"},{"type":"message","user":"U0PB67X4K","text":"so you might want to +2, merge and rebase your change","ts":"1479383735.004097"},{"type":"message","user":"U1AU8DRQR","text":"no, it is OK (I merged it)","ts":"1479384755.004098"},{"type":"message","user":"U1AU8DRQR","text":"there is a GenesisBlock function which creates a genesis block using the current chain (chain ID) - we would like to have the same genesis block on all replicas of the network, how could we achieve this?","ts":"1479384884.004099"},{"type":"message","user":"U1AU8DRQR","text":"<@U0XR6J961> thought of having some kind of configuration in the network config file (a JSON)","ts":"1479384916.004100"},{"type":"message","user":"U1AU8DRQR","text":"but as I see it is not possible to inject the chain ID from outside","ts":"1479384982.004101"},{"type":"message","user":"U0PB67X4K","text":"the working concept at this point is that when you call JoinChannel on a peer, you would provide the \"genesis block\" or latest \"config\" block (assuming you added a new organization and\/or changed membership for a channel) to that peer.   Is that what you mean?","ts":"1479385300.004102"},{"type":"message","user":"U1AU8DRQR","text":"what is 'JoinChannel'?","ts":"1479385390.004103"},{"type":"message","user":"U0PB67X4K","text":"An API which I don't think exists anywhere in the codebase yet but which will be invoked on peers in order for them to join the specified channel","ts":"1479385836.004104"},{"type":"message","user":"U1AU8DRQR","text":"I was talking about SBFT. in an sbft orderer peer, where should this API be called?","ts":"1479385891.004105"},{"type":"message","user":"U0PB67X4K","text":"create channel would be called on the SBFT orderer","ts":"1479385928.004106"},{"type":"message","user":"U0PB67X4K","text":"the output of that would be the \"genesis\" and\/or latest \"config\" block which would then be provided to peers which are to join that channel.","ts":"1479385990.004107"},{"type":"message","user":"U1AU8DRQR","text":"currently, in sbft we directly create a fileledger which needs a genesis block as an argument. I guess this direct ledger creation will change with this","ts":"1479386038.004108"},{"type":"message","user":"U1AU8DRQR","text":"until that, we need to solve somehow this genesis block issue","ts":"1479386415.004109"},{"type":"message","user":"U0PB67X4K","text":"probably have to wait for <@U0XPR4NP4> or <@U0XQ35CDD>  - because I believe that we do have the static block creation in the current code (as channels are not yet supported)","ts":"1479386667.004110"},{"type":"message","user":"U1AU8DRQR","text":"yeah the static block creation is static.New().Genesisblock() I guess. but it uses a random number and that results in different genesis block for every peer. somehow I need to workaround thos","ts":"1479386734.004111"},{"type":"message","user":"U1AU8DRQR","text":"maybe <@U0Y14MWA2> knows something about this","ts":"1479388507.004112"},{"type":"message","user":"U0Y14MWA2","text":"<@U1AU8DRQR> - no clue how we create genesis blocks :slightly_smiling_face:","ts":"1479388567.004113"},{"type":"message","user":"U0Y14MWA2","text":"this is sth indeed <@U0XPR4NP4> may answer","ts":"1479388591.004114"},{"type":"message","user":"U1AU8DRQR","text":"I am very very sad :disappointed:","ts":"1479388596.004115"},{"type":"message","user":"U0Y14MWA2","text":"dont' be","ts":"1479388602.004116"},{"type":"message","user":"U0Y14MWA2","text":"we work w\/o genesis","ts":"1479388608.004117"},{"type":"message","user":"U0Y14MWA2","text":":slightly_smiling_face:","ts":"1479388612.004118"},{"type":"message","user":"U0Y14MWA2","text":"we just came to be","ts":"1479388616.004119"},{"type":"message","user":"U0Y14MWA2","text":"no genesis","ts":"1479388618.004120"},{"type":"message","user":"U1AU8DRQR","text":":slightly_smiling_face:","ts":"1479388626.004121"},{"type":"message","user":"U0XR6J961","text":"<@U0PB67X4K>: sbft doesn't do channels","ts":"1479389227.004122"},{"type":"message","user":"U0PB67X4K","text":"yeah - I figured that part out - neither do any of the other orderers at this point","ts":"1479389263.004123"},{"type":"message","user":"U0XR6J961","text":":slightly_smiling_face:","ts":"1479389268.004124"},{"type":"message","user":"U0ZJZBJLF","text":"Simon or <@U0Y14MWA2>  is there any progress\/updates\/decision about that block gap\/hole sync that you asked me that time (using the pull module)","edited":{"user":"U0ZJZBJLF","ts":"1479389343.000000"},"ts":"1479389324.004125"},{"type":"message","user":"U0Y14MWA2","text":"not yet but I am more and more sure that we need to talk :slightly_smiling_face:","ts":"1479389443.004127"},{"type":"message","user":"U0ZJZBJLF","text":"sure, ping me when you need on slack","ts":"1479389462.004128"},{"type":"message","user":"U0Y14MWA2","text":"i've just a put a 2x label (consensus\/gossip) to <https:\/\/jira.hyperledger.org\/browse\/FAB-1096>","ts":"1479389535.004129"},{"type":"message","user":"U0UGH3X7X","text":"The genesis block issue is discussed via FAB-359, FAB-665 and FAB-666","ts":"1479390639.004130"},{"type":"message","user":"U0UGH3X7X","text":"The thought is that we create a genesis block that contains all the configuration needed to bootstrap an orderer","ts":"1479390685.004131"},{"type":"message","user":"U0UGH3X7X","text":"also <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2259> and <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2529\/>","ts":"1479390931.004132"},{"type":"message","user":"U0XPR4NP4","text":"<@U1AU8DRQR> Basically, the static bootstrapper was put in place as a stopgap to provide a genesis block when one has not already been generated, <@U0UGH3X7X>  is working on a tool to actually create the 'real' genesis block that can be shared among orderers","ts":"1479391141.004133"},{"type":"message","user":"U0XPR4NP4","text":"<@U0UGH3X7X> We should also probably talk about how the genesis block stuff has changed a little bit this week.  As <@U0PB67X4K> alluded to, since the concept of 'system chain' is gone, your tool will be more constrained to bootstrapping an orderer, not a peer.  The big pieces will be the orderer configuration, and the channel creation policies.","ts":"1479391247.004134"},{"type":"message","user":"U0UGH3X7X","text":"agreed.  I'm reading <@U1BC5A0F9> 's  msp doc today.  I also understand that <@U11HTMW0H> and <@U1B2FF8LR> are starting to look at the peer joinchannel flow","ts":"1479391386.004135"},{"type":"message","user":"U0XR6J961","text":"what's the short term fix to get <@U1AU8DRQR> unstuck?","ts":"1479391612.004136"},{"type":"message","user":"U0XR6J961","text":"right now sbft has a mode to ingest a json setup file and create state for a replica","ts":"1479391655.004137"},{"type":"message","user":"U0XR6J961","text":"this now needs to be extended to contain a genesis block","ts":"1479391672.004138"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XR6J961> <@U1AU8DRQR> An easy way to get unstuck locally would be simply to comment out the random chainID generation and set that chainID statically.  For a longer term solution the genesis block creation tool should take that sbft config and put it in the genesis block so that we don't have two different bootstrapping methods.","ts":"1479391941.004139"},{"type":"message","user":"U0XR6J961","text":"i agree about the long term plan","ts":"1479391969.004140"},{"type":"message","user":"U1AU8DRQR","text":"lets see if locally commenting that solves anything btw","ts":"1479391985.004141"},{"type":"message","user":"U0XR6J961","text":"i guess replacing the random is an option","ts":"1479391990.004142"},{"type":"message","user":"U0XR6J961","text":"but it is ugly","ts":"1479391998.004143"},{"user":"U11D7BP6U","text":"<@U11D7BP6U|uramoto> has joined the channel","type":"message","subtype":"channel_join","ts":"1479394319.004144"},{"type":"message","user":"U0UGH3X7X","text":"scrum ...","ts":"1479394757.004145"},{"text":"<@U0UGH3X7X|tuand> has started a Google+ Hangout for this channel. <https:\/\/hangouts.google.com\/hangouts\/_\/dcopz4r74jdz7gk52qnkolf5pee|Join Hangout>.","username":"hangouts","bot_id":"B0UKUAJ0Y","type":"message","subtype":"bot_message","ts":"1479394786.004146"},{"type":"message","user":"U1KDAMDJ7","text":"I lost my connection and now call is full. \n\u2022 I have 2 patch sets waiting for reviews:\n  \u2022\u00a0<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2043\/>\n  \u2022\u00a0<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2459\/>\n\u2022\u00a0I\u2019m working on FAB-890 yesterday, and continue to work on it today, specifically, making sure that the orderer is resilient to the loss os a kafka broker.","ts":"1479395205.004147"},{"type":"message","user":"U0Y14MWA2","text":"went with <@U0XR6J961> through simplebft view change code - among other things we identified a way to eliminate null blocks from simplebft raw ledger","ts":"1479395416.004148"},{"type":"message","user":"U0Y14MWA2","text":"Simon's CR that implement this should appear soon","ts":"1479395427.004149"},{"type":"message","user":"U0Y14MWA2","text":"along with some simplifications of view change code","ts":"1479395449.004150"},{"type":"message","user":"U0Y14MWA2","text":"which should complete sbft epic","ts":"1479395457.004151"},{"type":"message","user":"U0XQ35CDD","text":"&gt; I\u2019m working on FAB-890 yesterday, and continue to work on it today, specifically, making sure that the orderer is resilient to the loss os a kafka broker.","ts":"1479395861.004152"},{"type":"message","user":"U0XQ35CDD","text":"<@U1KDAMDJ7>: Are there any blockers in particular here? Something with the sarama API not making sense, or another issue?","edited":{"user":"U0XQ35CDD","ts":"1479395901.000000"},"ts":"1479395884.004153"},{"type":"message","user":"U1KDAMDJ7","text":"No blockers.","ts":"1479396035.004155"},{"type":"message","user":"U0XR6J961","text":"should i accept a new view message even tho i didn't go into view change yet?","ts":"1479396513.004156"},{"type":"message","user":"U0XR6J961","text":"yep, null requests are gone","ts":"1479397319.004157"},{"type":"message","user":"U0XR6J961","text":"will push the CR on the train","ts":"1479397339.004158"},{"type":"message","user":"U0XPR4NP4","text":"&gt; should i accept a new view message even tho i didn't go into view change yet?\n\nNew view should contain 2f+1 signed view change messages, so if appropriately formed, seems safe to me?","ts":"1479401577.004159"},{"type":"message","user":"U0KN2SSKE","text":"we need to specify who can create\/modify a chain on the orderers \u2014 i know we have bootstrap config, but how can we do this on-going?","ts":"1479407930.004160"},{"type":"message","user":"U0PB67X4K","text":"<@U0KN2SSKE> - I believe that after any given \"channel \/ chain\" is initially created part of that creation involved policy around who will be able to modify any of the various key\/value pairs associated with the config","ts":"1479410049.004161"},{"type":"message","user":"U0XQ35CDD","text":"This shouldn't be different than how we specify all the different actions and permissions. Fundamentally a key\/value in the ConfigurationTransaction that identifies the root CA certs that are able to issue a new-chain transaction, along with an accompanying modification policy for this key\/value pair (how many sigs do you need to modify the list of CA certs that can create new chains).","edited":{"user":"U0XQ35CDD","ts":"1479410231.000000"},"ts":"1479410065.004162"},{"type":"message","user":"U0XQ35CDD","text":"Basically what Gari said.","ts":"1479410077.004163"},{"type":"message","user":"U0KN2SSKE","text":"<@U0PB67X4K> config tx is bound to a chain, so changes to a config block only affects that chain \u2014 what i referred to configuration outside of chains that governs who can create chains","ts":"1479416492.004166"},{"type":"message","user":"U0KN2SSKE","text":"and how can that be modified","ts":"1479416516.004167"},{"type":"message","user":"U0PB67X4K","text":"<@U0KN2SSKE>  - it's basically a chicken and egg problem for the initial setup.  I suppose the only thing you can do is start the ordering service with one or more admins already there","ts":"1479421838.004168"},{"type":"message","subtype":"file_share","text":"<@U24M29R4G|nikileshsa> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/nikileshsa\/F348GEBGC\/panic__error_unmarshaling_into_structure__1_error_s__decoding______general__has_invalid_keys__profile.sh|panic: Error unmarshaling into structure: 1 error(s) decoding:  * 'General' has invalid keys: Profile> and commented: I am trying to start a solo orderer using the latest fabric code from master and its throwing a panic as shown in this code snippet. Has anyone seen this before? (it was working as of yesterday).","file":{"id":"F348GEBGC","created":1479423437,"timestamp":1479423437,"name":"panic__Error_unmarshaling_into_structure__1_error_s__decoding______General__has_invalid_keys__Profile.sh","title":"panic: Error unmarshaling into structure: 1 error(s) decoding:  * 'General' has invalid keys: Profile","mimetype":"text\/plain","filetype":"shell","pretty_type":"Shell","user":"U24M29R4G","editable":true,"size":3034,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F348GEBGC\/panic__error_unmarshaling_into_structure__1_error_s__decoding______general__has_invalid_keys__profile.sh?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F348GEBGC\/download\/panic__error_unmarshaling_into_structure__1_error_s__decoding______general__has_invalid_keys__profile.sh?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/nikileshsa\/F348GEBGC\/panic__error_unmarshaling_into_structure__1_error_s__decoding______general__has_invalid_keys__profile.sh","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F348GEBGC-e22885f1bc","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/nikileshsa\/F348GEBGC\/panic__error_unmarshaling_into_structure__1_error_s__decoding______general__has_invalid_keys__profile.sh\/edit","preview":"[15:52:36]  config_util.go:34: [DEBUG] Found map value for ramledger\r\n[15:52:36]  config_util.go:45: [DEBUG] Found real value for ramledger.HistorySize setting to int 1000\r\n[15:52:36]  config_util.go:34: [DEBUG] Found map value for fileledger\r\n[15:52:36]  config_util.go:45: [DEBUG] Found real value for fileledger.Location setting to <nil> <nil>\r\n[15:52:36]  config_util.go:45: [DEBUG] Found real value for fileledger.Prefix setting to string hyperledger-fabric-rawledger\r","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>[15:52:36]  config_util.go:34: [DEBUG] Found map value <span class=\"cm-keyword\">for<\/span> ramledger<\/pre><\/div>\n<div><pre>[15:52:36]  config_util.go:45: [DEBUG] Found real value <span class=\"cm-keyword\">for<\/span> ramledger.HistorySize setting to int <span class=\"cm-number\">1000<\/span><\/pre><\/div>\n<div><pre>[15:52:36]  config_util.go:34: [DEBUG] Found map value <span class=\"cm-keyword\">for<\/span> fileledger<\/pre><\/div>\n<div><pre>[15:52:36]  config_util.go:45: [DEBUG] Found real value <span class=\"cm-keyword\">for<\/span> fileledger.Location setting to &lt;nil&gt; &lt;nil&gt;<\/pre><\/div>\n<div><pre>[15:52:36]  config_util.go:45: [DEBUG] Found real value <span class=\"cm-keyword\">for<\/span> fileledger.Prefix setting to string hyperledger-fabric-rawledger<\/pre><\/div>\n<\/div>\n<\/div>\n","lines":34,"lines_more":29,"preview_is_truncated":true,"channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":1,"initial_comment":{"id":"Fc33EW3P2L","created":1479423437,"timestamp":1479423437,"user":"U24M29R4G","is_intro":true,"comment":"I am trying to start a solo orderer using the latest fabric code from master and its throwing a panic as shown in this code snippet. Has anyone seen this before? (it was working as of yesterday).","channel":""}},"user":"U24M29R4G","upload":true,"display_as_bot":false,"username":"<@U24M29R4G|nikileshsa>","bot_id":null,"ts":"1479423438.004169"},{"type":"message","user":"U0PB67X4K","text":"I'd suggest pulling the latest and trying again.  I just pulled the latest down myself, ran `go build &amp;&amp; .\/orderer` in the `fabric\/orderer` directory and it started up nicely for me","ts":"1479423799.004170"},{"type":"message","user":"U24M29R4G","text":"<@U0PB67X4K> ..thanks for trying this out..will let you know as to how it goes..","ts":"1479423985.004171"},{"type":"message","user":"U24M29R4G","text":"<@U0PB67X4K> resolved... looks like a build issue in my local... thanks again..","ts":"1479424376.004172"},{"user":"U2NDE1ZCK","text":"<@U2NDE1ZCK|jdockter> has joined the channel","type":"message","subtype":"channel_join","ts":"1479482312.004173"},{"user":"U1FMASJFL","text":"<@U1FMASJFL|nvlasov> has joined the channel","type":"message","subtype":"channel_join","ts":"1479520631.004174"},{"type":"message","user":"U13TWBRBL","text":"<@U0XQ35CDD> <@U0XPR4NP4> <@U0PB67X4K> not sure if this is supposed to work, but trying to hook up a network with kafka using the following docker-compose, getting this error:\n\norderer_1     | panic: runtime error: index out of range\norderer_1     | \norderer_1     | goroutine 16 [running]:\norderer_1     | panic(0x8b9880, 0xc42000c0a0)\norderer_1     | \t\/opt\/go\/src\/runtime\/panic.go:500 +0x1a1\norderer_1     | <http:\/\/github.com\/hyperledger\/fabric\/orderer\/kafka.(*brokerImpl).GetOffset|github.com\/hyperledger\/fabric\/orderer\/kafka.(*brokerImpl).GetOffset>(0xc4201e4550, 0xc4201444c8, 0xc42004b814, 0xc42004b850, 0xc420226088)\norderer_1     | \t\/opt\/gopath\/src\/github.com\/hyperledger\/fabric\/orderer\/kafka\/broker.go:54 +0xc4\norderer_1     | <http:\/\/github.com\/hyperledger\/fabric\/orderer\/kafka.(*clientDelivererImpl).getOffset(0xc420011020|github.com\/hyperledger\/fabric\/orderer\/kafka.(*clientDelivererImpl).getOffset(0xc420011020>, 0xfffffffffffffffe, 0x0, 0x0, 0x0)\norderer_1     | \t\/opt\/gopath\/src\/github.com\/hyperledger\/fabric\/orderer\/kafka\/client_deliver.go:205 +0x1f8\norderer_1     | <http:\/\/github.com\/hyperledger\/fabric\/orderer\/kafka.(*clientDelivererImpl).processSeek(0xc420011020|github.com\/hyperledger\/fabric\/orderer\/kafka.(*clientDelivererImpl).processSeek(0xc420011020>, 0xc4201444c0, 0x0, 0x1)\norderer_1     | \t\/opt\/gopath\/src\/github.com\/hyperledger\/fabric\/orderer\/kafka\/client_deliver.go:162 +0x2a3\norderer_1     | <http:\/\/github.com\/hyperledger\/fabric\/orderer\/kafka.(*clientDelivererImpl).sendBlocks(0xc420011020|github.com\/hyperledger\/fabric\/orderer\/kafka.(*clientDelivererImpl).sendBlocks(0xc420011020>, 0xba9e20, 0xc42020c0d0, 0xba9e20, 0xc42020c0d0)\norderer_1     | \t\/opt\/gopath\/src\/github.com\/hyperledger\/fabric\/orderer\/kafka\/client_deliver.go:103 +0x56b\norderer_1     | <http:\/\/github.com\/hyperledger\/fabric\/orderer\/kafka.(*clientDelivererImpl).Deliver(0xc420011020|github.com\/hyperledger\/fabric\/orderer\/kafka.(*clientDelivererImpl).Deliver(0xc420011020>, 0xba9e20, 0xc42020c0d0, 0xc420011020, 0x0)\norderer_1     | \t\/opt\/gopath\/src\/github.com\/hyperledger\/fabric\/orderer\/kafka\/client_deliver.go:66 +0x79\norderer_1     | <http:\/\/github.com\/hyperledger\/fabric\/orderer\/kafka.(*delivererImpl).Deliver(0xc4200c10e0|github.com\/hyperledger\/fabric\/orderer\/kafka.(*delivererImpl).Deliver(0xc4200c10e0>, 0xba9e20, 0xc42020c0d0, 0x0, 0x0)\norderer_1     | \t\/opt\/gopath\/src\/github.com\/hyperledger\/fabric\/orderer\/kafka\/deliver.go:54 +0xfd\norderer_1     | <http:\/\/github.com\/hyperledger\/fabric\/orderer\/kafka.(*serverImpl).Deliver(0xc4200c1100|github.com\/hyperledger\/fabric\/orderer\/kafka.(*serverImpl).Deliver(0xc4200c1100>, 0xba9e20, 0xc42020c0d0, 0xc4200254a8, 0xc4200254d0)\norderer_1     | \t\/opt\/gopath\/src\/github.com\/hyperledger\/fabric\/orderer\/kafka\/orderer.go:56 +0x48\norderer_1     | <http:\/\/github.com\/hyperledger\/fabric\/protos\/orderer._AtomicBroadcast_Deliver_Handler(0x8c6100|github.com\/hyperledger\/fabric\/protos\/orderer._AtomicBroadcast_Deliver_Handler(0x8c6100>, 0xc4200c1100, 0xba8800, 0xc420084880, 0xc42011f2f0, 0x0)\norderer_1     | \t\/opt\/gopath\/src\/github.com\/hyperledger\/fabric\/protos\/orderer\/ab.pb.go:477 +0xbb\norderer_1     | <http:\/\/github.com\/hyperledger\/fabric\/vendor\/google.golang.org\/grpc.(*Server).processStreamingRPC(0xc42007e240|github.com\/hyperledger\/fabric\/vendor\/google.golang.org\/grpc.(*Server).processStreamingRPC(0xc42007e240>, 0xba9700, 0xc4201c2360, 0xc4200c42d0, 0xc42011ef00, 0xbc34c0, 0xc42011f2c0, 0x0, 0x0)\norderer_1     | \t\/opt\/gopath\/src\/github.com\/hyperledger\/fabric\/vendor\/google.golang.org\/grpc\/server.go:657 +0x6f3\norderer_1     | <http:\/\/github.com\/hyperledger\/fabric\/vendor\/google.golang.org\/grpc.(*Server).handleStream(0xc42007e240|github.com\/hyperledger\/fabric\/vendor\/google.golang.org\/grpc.(*Server).handleStream(0xc42007e240>, 0xba9700, 0xc4201c2360, 0xc4200c42d0, 0xc42011f2c0)\norderer_1     | \t\/opt\/gopath\/src\/github.com\/hyperledger\/fabric\/vendor\/google.golang.org\/grpc\/server.go:741 +0xc33\norderer_1     | <http:\/\/github.com\/hyperledger\/fabric\/vendor\/google.golang.org\/grpc.(*Server).serveStreams.func1.1(0xc4201e4430|github.com\/hyperledger\/fabric\/vendor\/google.golang.org\/grpc.(*Server).serveStreams.func1.1(0xc4201e4430>, 0xc42007e240, 0xba9700, 0xc4201c2360, 0xc4200c42d0)\norderer_1     | \t\/opt\/gopath\/src\/github.com\/hyperledger\/fabric\/vendor\/google.golang.org\/grpc\/server.go:402 +0xab\norderer_1     | created by <http:\/\/github.com\/hyperledger\/fabric\/vendor\/google.golang.org\/grpc.(*Server).serveStreams.func1|github.com\/hyperledger\/fabric\/vendor\/google.golang.org\/grpc.(*Server).serveStreams.func1>\norderer_1     | \t\/opt\/gopath\/src\/github.com\/hyperledger\/fabric\/vendor\/google.golang.org\/grpc\/server.go:403 +0xa3","ts":"1479533150.004175"},{"type":"message","subtype":"file_share","text":"<@U13TWBRBL|jzhang> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/jzhang\/F34RVAE77\/docker-compose_yaml.yaml|docker-compose.yaml>","file":{"id":"F34RVAE77","created":1479533768,"timestamp":1479533768,"name":"docker-compose_yaml.yaml","title":"docker-compose.yaml","mimetype":"text\/plain","filetype":"yaml","pretty_type":"YAML","user":"U13TWBRBL","editable":true,"size":1714,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F34RVAE77\/docker-compose_yaml.yaml?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F34RVAE77\/download\/docker-compose_yaml.yaml?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/jzhang\/F34RVAE77\/docker-compose_yaml.yaml","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F34RVAE77-f1f222a9c1","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/jzhang\/F34RVAE77\/docker-compose_yaml.yaml\/edit","preview":"kafka0:\r\n    image: kchristidis\/kafka\r\n    environment:\r\n        - ADVERTISED_PORT=9092\r\n\r","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre><span class=\"cm-atom\">kafka0<\/span><span class=\"cm-meta\">:<\/span><\/pre><\/div>\n<div><pre><span class=\"cm-atom\">    image<\/span><span class=\"cm-meta\">: <\/span>kchristidis\/kafka<\/pre><\/div>\n<div><pre><span class=\"cm-atom\">    environment<\/span><span class=\"cm-meta\">:<\/span><\/pre><\/div>\n<div><pre><span class=\"cm-meta\">        - <\/span>ADVERTISED_PORT=9092<\/pre><\/div>\n<div><pre>&#8203;<\/pre><\/div>\n<\/div>\n<\/div>\n","lines":65,"lines_more":60,"preview_is_truncated":true,"channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0,"num_stars":1},"user":"U13TWBRBL","upload":true,"display_as_bot":false,"username":"<@U13TWBRBL|jzhang>","bot_id":null,"ts":"1479533769.004179"},{"type":"message","user":"U0XQ35CDD","text":"<@U13TWBRBL>: Looking into this now.","ts":"1479566219.004180"},{"type":"message","user":"U0XQ35CDD","text":"<@U13TWBRBL>: I'll need details into how exactly you got this error though, as far as I can tell, the latest master builds and runs fine. What is the Deliver request that you're issuing?","edited":{"user":"U0XQ35CDD","ts":"1479568729.000000"},"ts":"1479566371.004181"},{"type":"message","user":"U13TWBRBL","text":"<@U0XQ35CDD> I\u2019m running fabric-sdk-node\/test\/unit\/end-to-end.js against the network set up above","ts":"1479585617.004184"},{"type":"message","user":"U0ZJZBJLF","text":"Anyone home?","ts":"1479647635.004185"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZJZBJLF> Did you need something?","ts":"1479655440.004186"},{"type":"message","user":"U0ZJZBJLF","text":"`\/\/ Creator of the message, specified as a certificate chain`","ts":"1479655475.004187"},{"type":"message","user":"U0ZJZBJLF","text":"that's in SignatureHeader","ts":"1479655486.004188"},{"type":"message","user":"U0ZJZBJLF","text":"what is the real run time type of the bytes field?","ts":"1479655497.004189"},{"type":"message","user":"U0ZJZBJLF","text":"```\nmessage SignatureHeader {\n    \/\/ Creator of the message, specified as a certificate chain\n    bytes creator = 1;\n\n    \/\/ Arbitrary number that may only be used once. Can be used to detect replay attacks.\n    bytes nonce = 2;\n}\n```","ts":"1479655511.004190"},{"type":"message","user":"U0ZJZBJLF","text":"in case of multiple orderers","ts":"1479655520.004191"},{"type":"message","user":"U0XPR4NP4","text":"It is.  We should probably update the text of this, essentially this is an 'identity' which the MSP will be able to evaluate.","ts":"1479655522.004192"},{"type":"message","user":"U0XPR4NP4","text":"It may be a certificate chain, or, it may be some other things the MSP knows how to evaluate","ts":"1479655542.004193"},{"type":"message","user":"U0ZJZBJLF","text":"This is exactly what I don't understand- how do you put there multiple PBFT orderes? in 1 identity","edited":{"user":"U0ZJZBJLF","ts":"1479655658.000000"},"ts":"1479655543.004194"},{"type":"message","user":"U0XPR4NP4","text":"Oh","ts":"1479655664.004196"},{"type":"message","user":"U0XPR4NP4","text":"`SignatureHeader` is only intended to support a single identity","ts":"1479655680.004197"},{"type":"message","user":"U0XPR4NP4","text":"You'll see for instance in `SignedConfigurationItem` ultimately, there is a repeated section of `SignatureHeader`s embedded which is used for multi-sigs","ts":"1479655715.004198"},{"type":"message","user":"U0ZJZBJLF","text":"I did a grep -ri and didn't find SignedConfigurationItem","ts":"1479655797.004199"},{"type":"message","user":"U0ZJZBJLF","text":"where is it?","ts":"1479655800.004200"},{"type":"message","user":"U0XPR4NP4","text":"The `Envelope` message is the outermost wrapping message for transactions going into the system, and its `creator` field should always be the identity which submitted the message.  If the message requires additional signatures, (say endorsements), then this should be done internally.","ts":"1479655806.004201"},{"type":"message","user":"U0XPR4NP4","text":"`fabric\/protos\/common\/configuration.proto`","ts":"1479655812.004202"},{"type":"message","user":"U0XPR4NP4","text":"```\n$ grep -ril SignedConfigurationItem .\n.\/orderer\/common\/configtx\/configtx_test.go\n.\/orderer\/common\/bootstrap\/static\/static.go\n.\/orderer\/orderer\n.\/bddtests\/common\/configuration_pb2.py\n.\/protos\/common\/configuration.pb.go\n.\/protos\/common\/common.pb.go\n.\/protos\/common\/configuration.proto\n```","ts":"1479655888.004203"},{"type":"message","user":"U0ZJZBJLF","text":"```\nyacovm@yacoVM ~\/OBC\/shared\/gopath\/src\/github.com\/hyperledger\/fabric (commCertLearn) $ grep -ri \ufeff\u2060\u2060\u2060\u2060\"SignedConfigurationItem\ufeff\u2060\u2060\u2060\u2060\" *\nyacovm@yacoVM ~\/OBC\/shared\/gopath\/src\/github.com\/hyperledger\/fabric (commCertLearn) $ \n```","ts":"1479655914.004204"},{"type":"message","user":"U0ZJZBJLF","text":"hmm your command finds it","ts":"1479655940.004205"},{"type":"message","user":"U0XPR4NP4","text":"<https:\/\/gerrit.hyperledger.org\/r\/gitweb?p=fabric.git;a=blob;f=protos\/common\/configuration.proto;h=5409a8b4d60380134c2bb94b708f7226780aba2e;hb=HEAD#l51>","ts":"1479655989.004206"},{"type":"message","user":"U0XPR4NP4","text":"You'll see that a `SignedConfigurationItem` embeds a repeated section of `ConfigurationSignature`, each of which contains a signature as bytes, and a `SignatureHeader` (as marshaled bytes)","ts":"1479656065.004207"},{"type":"message","user":"U0ZJZBJLF","text":"yeah I found it, now trying to figure out where is that `SignedConfigurationItem ` is being put","ts":"1479656097.004208"},{"type":"message","user":"U0XPR4NP4","text":"I was just giving an example of using `SignatureHeader` to express multiple identities (by embedding it multiple times)","edited":{"user":"U0XPR4NP4","ts":"1479656135.000000"},"ts":"1479656120.004209"},{"type":"message","user":"U0ZJZBJLF","text":"who references it? I don't see any pb.go apart from `configuration.pb.go` referencing it","ts":"1479656129.004210"},{"type":"message","user":"U0XPR4NP4","text":"Per my grep above, you can find it being used in\n\n```\n.\/orderer\/common\/configtx\/configtx_test.go\n.\/orderer\/common\/bootstrap\/static\/static.go\n```","ts":"1479656183.004212"},{"type":"message","user":"U0ZJZBJLF","text":"oh I understand, you're explaining to me the \"policy\", right?","ts":"1479656245.004213"},{"type":"message","user":"U0XPR4NP4","text":"More generic configuration, it was just an example of `SignatureHeader` and multiple identities.","ts":"1479656272.004214"},{"type":"message","user":"U0ZJZBJLF","text":"But what I am interested to know is: \nI get a block multi-signed, how do I validate it now? all I have is what is found in common.proto","ts":"1479656280.004215"},{"type":"message","user":"U0ZJZBJLF","text":"right?","ts":"1479656286.004216"},{"type":"message","user":"U0XPR4NP4","text":"Sure, so, if you've got a multi-signed block, you'll ask the `policies.Manager` for the block validation policy, then pass the messages, set of signatures, and identities into the `Policy` for validation, and it will validate, or not.","ts":"1479656358.004217"},{"type":"message","user":"U0ZJZBJLF","text":"but I only have 1 message, don't i? \n```\n\/\/ Payload is the message contents (and header to allow for signing)\nmessage Payload {\n\n    \/\/ Header is included to provide identity and prevent replay\n    Header header = 1;\n\n    \/\/ Data, the encoding of which is defined by the type in the header\n    bytes data = 2;\n}\n```","ts":"1479656414.004218"},{"type":"message","user":"U0ZJZBJLF","text":"this is encapsulated in \n```\n\/\/ Envelope wraps a Payload with a signature so that the message may be authenticated\nmessage Envelope {\n    \/\/ A marshaled Payload\n    bytes payload = 1;\n\n    \/\/ A signature by the creator specified in the Payload header\n    bytes signature = 2;\n}\n```","ts":"1479656438.004219"},{"type":"message","user":"U0XPR4NP4","text":"We have not yet defined the block signature structure.  We could define a simple proto like:\n\n```\nmessage BlockSignature {\n    bytes signatureHeader = 1;\n    bytes signature = 2; \/\/ The signature over the concatenation of the block header hash and the signature header bytes\n}\n```\n\nThen, define a new envelope header type of `BLOCK_SIGNATURE` which embeds a repeated section of the `BlockSignature` as the payload.  Would want to run this scheme by the crypto folks, but I imagine it would work.","ts":"1479656847.004220"},{"type":"message","user":"U0ZJZBJLF","text":"oh I see. I thought it was already inside so I didn't understand what I'm missing.","ts":"1479656924.004221"},{"type":"message","user":"U0ZJZBJLF","text":"was distracted by <#C0YPYBVJM|fabric-dev> , thanks a lot for the explanations <@U0XPR4NP4>  !","ts":"1479658756.004222","reactions":[{"name":"+1","users":["U0XPR4NP4"],"count":1}]},{"type":"message","user":"U0XQ35CDD","text":"<@U13TWBRBL>: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2657\/>","ts":"1479680189.004223"},{"type":"message","subtype":"file_share","text":"<@U0XQ35CDD|kostas> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/kostas\/F353N8TBP\/screen_shot_2016-11-20_at_17.14.56.png|Screen Shot 2016-11-20 at 17.14.56.png>","file":{"id":"F353N8TBP","created":1479680210,"timestamp":1479680210,"name":"Screen Shot 2016-11-20 at 17.14.56.png","title":"Screen Shot 2016-11-20 at 17.14.56.png","mimetype":"image\/png","filetype":"png","pretty_type":"PNG","user":"U0XQ35CDD","editable":false,"size":250966,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F353N8TBP\/screen_shot_2016-11-20_at_17.14.56.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F353N8TBP\/download\/screen_shot_2016-11-20_at_17.14.56.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_64":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F353N8TBP-fded13d543\/screen_shot_2016-11-20_at_17.14.56_64.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_80":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F353N8TBP-fded13d543\/screen_shot_2016-11-20_at_17.14.56_80.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F353N8TBP-fded13d543\/screen_shot_2016-11-20_at_17.14.56_360.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360_w":360,"thumb_360_h":170,"thumb_480":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F353N8TBP-fded13d543\/screen_shot_2016-11-20_at_17.14.56_480.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_480_w":480,"thumb_480_h":227,"thumb_160":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F353N8TBP-fded13d543\/screen_shot_2016-11-20_at_17.14.56_160.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F353N8TBP-fded13d543\/screen_shot_2016-11-20_at_17.14.56_720.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720_w":720,"thumb_720_h":340,"thumb_960":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F353N8TBP-fded13d543\/screen_shot_2016-11-20_at_17.14.56_960.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_960_w":960,"thumb_960_h":454,"thumb_1024":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F353N8TBP-fded13d543\/screen_shot_2016-11-20_at_17.14.56_1024.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_1024_w":1024,"thumb_1024_h":484,"image_exif_rotation":1,"original_w":1138,"original_h":538,"permalink":"https:\/\/hyperledgerproject.slack.com\/files\/kostas\/F353N8TBP\/screen_shot_2016-11-20_at_17.14.56.png","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F353N8TBP-699ae18c20","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0XQ35CDD","upload":true,"display_as_bot":false,"username":"<@U0XQ35CDD|kostas>","bot_id":null,"ts":"1479680213.004224"},{"type":"message","user":"U0XR6J961","text":"hi","ts":"1479719561.004225"},{"type":"message","user":"U2FR6FUJV","text":"hi gus,   does anynoe konw the TPS of the fabric?  the current version and the version 1.0","ts":"1479725955.004226"},{"type":"message","user":"U2FR6FUJV","text":"known...","ts":"1479725998.004227"},{"type":"message","user":"U12452RAP","text":"guys, can anyone help explain more about the paragraph 'As the endorser nodes responsible for particular chaincode are orthogonal to the consenters, the system may scale better than if these functions were done by the same nodes'","ts":"1479727775.004228"},{"type":"message","user":"U0XPR4NP4","text":"<@U12452RAP> In the old system, the nodes that did consensus (ordering) were the same ones that did chaincode execution.  In the new system, endorsers run chaincode, and orderers perform consensus to achieve ordering.","ts":"1479737855.004231"},{"type":"message","user":"U0XR6J961","text":"no scrum?","ts":"1479740482.004232"},{"type":"message","user":"U0UGH3X7X","text":"scrum !","ts":"1479740510.004233"},{"type":"message","user":"U0UGH3X7X","text":"<https:\/\/hangouts.google.com\/call\/nffrloitszck7dx5xsxgyutdhie>","attachments":[{"title":"Google Hangouts","title_link":"https:\/\/hangouts.google.com\/call\/nffrloitszck7dx5xsxgyutdhie","text":"Click to join now. If the call is over, start a new one with up to 10 friends.","fallback":"Google Hangouts","thumb_url":"https:\/\/www.gstatic.com\/images\/icons\/material\/product\/2x\/hangouts_64dp.png","from_url":"https:\/\/hangouts.google.com\/call\/nffrloitszck7dx5xsxgyutdhie","thumb_width":128,"thumb_height":128,"service_icon":"https:\/\/hangouts.google.com\/favicon.ico","service_name":"hangouts.google.com","id":1}],"ts":"1479740566.004234"},{"type":"message","user":"U0N1D1UAE","text":"<@U1KDAMDJ7> <@U0XQ35CDD> FYI <https:\/\/jira.hyperledger.org\/browse\/FAB-1171>","ts":"1479745849.004236","reactions":[{"name":"+1","users":["U0XQ35CDD"],"count":1}]},{"type":"message","user":"U1AU8DRQR","text":"could anybody try to run this?","ts":"1479745875.004237"},{"type":"message","user":"U1AU8DRQR","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2515\/>","ts":"1479745877.004238"},{"type":"message","user":"U1AU8DRQR","text":"I get errors like this:\n2016\/11\/21 15:11:08 grpc: addrConn.resetTransport failed to create client transport: connection error: desc = \"transport: dial tcp :6016: getsockopt: connection refused\"; Reconnecting to {","ts":"1479745890.004239"},{"type":"message","user":"U1AU8DRQR","text":"some grpc stuff keeps running in the background","ts":"1479745899.004240"},{"type":"message","user":"U1AU8DRQR","text":"I need help :S :S","ts":"1479745912.004241"},{"type":"message","user":"U1AU8DRQR","text":"I think I am closing all the connections after test cases","ts":"1479745931.004242"},{"user":"U2SN3M334","text":"<@U2SN3M334|jamesjong> has joined the channel","type":"message","subtype":"channel_join","ts":"1479756378.004243"},{"type":"message","user":"U13TWBRBL","text":"<@U0XPR4NP4> <@U0UGH3X7X> the latest orderer image fails to start like this:","ts":"1479764295.004244"},{"type":"message","subtype":"file_share","text":"<@U13TWBRBL|jzhang> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/jzhang\/F35HEEW85\/-.txt|Untitled>","file":{"id":"F35HEEW85","created":1479764314,"timestamp":1479764314,"name":"-.txt","title":"Untitled","mimetype":"text\/plain","filetype":"text","pretty_type":"Plain Text","user":"U13TWBRBL","editable":true,"size":790,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F35HEEW85\/-.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F35HEEW85\/download\/-.txt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/jzhang\/F35HEEW85\/-.txt","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F35HEEW85-8db0734835","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/jzhang\/F35HEEW85\/-.txt\/edit","preview":"vagrant@hyperledger-devenv:v0.2.0-038ea83:~$ docker-compose -f \/opt\/gopath\/src\/github.com\/hyperledger\/fabric\/bddtests\/docker-compose-orderer-solo.yml up\r\nCreating bddtests_orderer0_1\r\nAttaching to bddtests_orderer0_1\r\norderer0_1  | panic: Error reading ORDERER plugin config: Unsupported Config Type \"\"\r\norderer0_1  | \r","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>vagrant@hyperledger-devenv:v0.2.0-038ea83:~$ docker-compose -f \/opt\/gopath\/src\/github.com\/hyperledger\/fabric\/bddtests\/docker-compose-orderer-solo.yml up<\/pre><\/div>\n<div><pre>Creating bddtests_orderer0_1<\/pre><\/div>\n<div><pre>Attaching to bddtests_orderer0_1<\/pre><\/div>\n<div><pre>orderer0_1  | panic: Error reading ORDERER plugin config: Unsupported Config Type &quot;&quot;<\/pre><\/div>\n<div><pre>orderer0_1  | <\/pre><\/div>\n<div><pre><\/pre><\/div>\n<\/div>\n<\/div>\n","lines":14,"lines_more":9,"preview_is_truncated":false,"channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U13TWBRBL","upload":true,"display_as_bot":false,"username":"<@U13TWBRBL|jzhang>","bot_id":null,"ts":"1479764315.004245"},{"type":"message","user":"U0N1D1UAE","text":"<@U0XQ35CDD> All, For comment: <https:\/\/jira.hyperledger.org\/browse\/FAB-1180>","ts":"1479775768.004246","reactions":[{"name":"+1","users":["U0XQ35CDD"],"count":1}]},{"type":"message","user":"U0XQ35CDD","text":"<@U13TWBRBL>: Still not sure why we're not exploring the Kafka route? I saw this comment about Kafka crashing (<http:\/\/gerrit.hyperledger.org\/r\/2657>) but it lacks a stack trace, context, and details on how to reproduce. We could have easily spent the day today debugging this.","ts":"1479777894.004247"},{"type":"message","user":"U13TWBRBL","text":"<@U0XQ35CDD> sorry didn\u2019t get a chance to reach out today, was battling a number of other areas. you can use the docker-compose that i posted above to start the  2+1 network and use peer command to submit a deploy request","ts":"1479778087.004248"},{"type":"message","subtype":"file_mention","text":"<@U13TWBRBL|jzhang> mentioned a file: <https:\/\/hyperledgerproject.slack.com\/files\/jzhang\/F34RVAE77\/docker-compose_yaml.yaml|docker-compose_yaml.yaml>.","file":{"id":"F34RVAE77","created":1479533768,"timestamp":1479533768,"name":"docker-compose_yaml.yaml","title":"docker-compose.yaml","mimetype":"text\/plain","filetype":"yaml","pretty_type":"YAML","user":"U13TWBRBL","editable":true,"size":1714,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F34RVAE77\/docker-compose_yaml.yaml?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F34RVAE77\/download\/docker-compose_yaml.yaml?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/jzhang\/F34RVAE77\/docker-compose_yaml.yaml","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F34RVAE77-f1f222a9c1","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/jzhang\/F34RVAE77\/docker-compose_yaml.yaml\/edit","preview":"kafka0:\r\n    image: kchristidis\/kafka\r\n    environment:\r\n        - ADVERTISED_PORT=9092\r\n\r","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre><span class=\"cm-atom\">kafka0<\/span><span class=\"cm-meta\">:<\/span><\/pre><\/div>\n<div><pre><span class=\"cm-atom\">    image<\/span><span class=\"cm-meta\">: <\/span>kchristidis\/kafka<\/pre><\/div>\n<div><pre><span class=\"cm-atom\">    environment<\/span><span class=\"cm-meta\">:<\/span><\/pre><\/div>\n<div><pre><span class=\"cm-meta\">        - <\/span>ADVERTISED_PORT=9092<\/pre><\/div>\n<div><pre>&#8203;<\/pre><\/div>\n<\/div>\n<\/div>\n","lines":65,"lines_more":60,"preview_is_truncated":true,"channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0,"num_stars":1},"user":"U13TWBRBL","ts":"1479778094.004250"},{"type":"message","user":"U12AHQ3NK","text":"Hi..In the new upcoming architecture can the endorsing peers scale to 3k \u2013 5k? if not what is the maximum limit for\u00a0 the endorsing peers that can participate?","ts":"1479794979.004252"},{"type":"message","user":"U1AU8DRQR","text":"please help us by reviewing this chain:\n<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2517\/>","ts":"1479810586.004253"},{"type":"message","user":"U1AU8DRQR","text":"very urgent and important","ts":"1479810594.004254"},{"type":"message","user":"U0XR6J961","text":"<@U1AU8DRQR> so how do i replicate that test failure?","ts":"1479813105.004255"},{"type":"message","user":"U0XR6J961","text":"why is grpc on two ports?","ts":"1479813294.004256"},{"type":"message","user":"U0XR6J961","text":"and the genesis block hashes are still different","ts":"1479813404.004257"},{"type":"message","user":"U0XR6J961","text":"am i looking at the wrong patchset?","ts":"1479813423.004258"},{"type":"message","user":"U1AU8DRQR","text":"maybe I forgot to commit the genesis thing. orderer\/common\/bootstrap\/static\/static.go should be changed in line 44:\n        chainID, err := primitives.GetRandomBytes(16)\nyou should put a 16 bytes const to there","ts":"1479813724.004259"},{"type":"message","user":"U0XR6J961","text":"can you please commit what you have","ts":"1479813740.004260"},{"type":"message","user":"U1AU8DRQR","text":"what two ports? one for AB, one for consensus","ts":"1479813743.004261"},{"type":"message","user":"U1AU8DRQR","text":"yes","ts":"1479813746.004262"},{"type":"message","user":"U0XR6J961","text":"why two ports then?","ts":"1479813751.004263"},{"type":"message","user":"U0XR6J961","text":"both can be on the same grpc","ts":"1479813760.004264"},{"type":"message","user":"U1AU8DRQR","text":"I was following the ideas of your original 'main app' and decided to have two ports. if that is possible, we can have one","ts":"1479813793.004265"},{"type":"message","user":"U0XR6J961","text":"because the grpc connect failures are to the grpc port","ts":"1479813802.004266"},{"type":"message","user":"U0XR6J961","text":"whatever that may be","ts":"1479813805.004267"},{"type":"message","user":"U0XR6J961","text":"ah not only?","ts":"1479813828.004268"},{"type":"message","user":"U0XR6J961","text":"what is going on","ts":"1479813830.004269"},{"type":"message","user":"U1AU8DRQR","text":"you mean?","ts":"1479813845.004270"},{"type":"message","user":"U0XR6J961","text":"2016\/11\/22 12:13:05 could not connect to replica 1 (79bb48 [:6004]): grpc: timed out when dialing","ts":"1479813853.004271"},{"type":"message","user":"U0XR6J961","text":"2016\/11\/22 12:13:05 grpc: addrConn.resetTransport failed to create client transport: connection error: desc = \"transport: dial tcp :6003: getsockopt: connection refused\"; Reconnecting to {\":6003\" &lt;nil&gt;}","ts":"1479813861.004272"},{"type":"message","user":"U0XR6J961","text":"what's going on, why timed out?","ts":"1479813869.004273"},{"type":"message","user":"U0XR6J961","text":"why connection refused?","ts":"1479813878.004274"},{"type":"message","user":"U1AU8DRQR","text":"my theory is that if you run two tests after each other and one has X nodes and other has Y, X &gt; Y, then there are some grpc.Dial's (goroutine) from connectWorker remaining and they try to connect to non-existing nodes","ts":"1479813976.004275"},{"type":"message","user":"U0XR6J961","text":"aha","ts":"1479813991.004276"},{"type":"message","user":"U1AU8DRQR","text":"but 6003 is the port of node number 1","ts":"1479813995.004277"},{"type":"message","user":"U1AU8DRQR","text":"sorry I meant replica","ts":"1479814001.004278"},{"type":"message","user":"U0XR6J961","text":"<https:\/\/gist.github.com\/ca84029b57bdbb10b882985aea8be1d2>","ts":"1479814554.004279"},{"type":"message","user":"U0XR6J961","text":"look at what goroutines are still around at the end of TestTwoReplicasBroadcastAndDeliverUsingTheSame","ts":"1479814577.004280"},{"type":"message","user":"U0XR6J961","text":"unless all of this cleans up, i'd expect more test failures","ts":"1479814626.004281"},{"type":"message","user":"U0XR6J961","text":"probably it is more practical to keep the receiver in the test process and run the replicas in separate processes","ts":"1479814686.004282"},{"type":"message","user":"U1AU8DRQR","text":"maybe we could analyze that log","ts":"1479814949.004283"},{"type":"message","user":"U1AU8DRQR","text":"I mean we should concentrate on gotoutines which are related to our code","ts":"1479814965.004284"},{"type":"message","user":"U1AU8DRQR","text":"e.g. this is not: \t\/usr\/lib\/go\/src\/testing\/testing.go:583 +0x8d2 it is the test framework I guess","ts":"1479815009.004285"},{"type":"message","user":"U0PB67X4K","text":"`TestTwoReplicasBroadcastAndDeliverUsingTheSame` has a logic error - see my comment on patch 9 but basically you need to modify the broadcast call to use peer 1 not peer 9","ts":"1479817007.004286"},{"type":"message","user":"U0PB67X4K","text":"right now, the first 2 tests pass for me but the \"Bomb\" test fails","ts":"1479817031.004287"},{"type":"message","user":"U0XR6J961","text":"yea","ts":"1479817111.004288"},{"type":"message","user":"U0PB67X4K","text":"for the Bomb test do you see that the test fails with 10 messages received every time?  I guess it's supposed to be 12","ts":"1479817162.004289"},{"type":"message","user":"U0XR6J961","text":"there are some other issues that we need to address for testing","ts":"1479817183.004290"},{"type":"message","user":"U0PB67X4K","text":"yes - there are background routines (as you mentioned) which continue to run","ts":"1479817204.004291"},{"type":"message","user":"U0XR6J961","text":"yea we're changing it to use exec + kill","ts":"1479817306.004292"},{"type":"message","user":"U0PB67X4K","text":"cool - just thought i'd take a quick look since everyone else ignored Gabor  :disappointed:","ts":"1479817423.004293"},{"type":"message","user":"U0PB67X4K","text":"seems like you guys have it under control","ts":"1479817431.004294"},{"type":"message","user":"U0XR6J961","text":"we're working on it","ts":"1479817724.004295"},{"type":"message","user":"U0XR6J961","text":"somehow the conversation moved away from the channel","ts":"1479817737.004296"},{"type":"message","user":"U2FR6FUJV","text":"hi gus,   does anynoe known the TPS of the fabric?","ts":"1479818073.004297"},{"type":"message","user":"U2FR6FUJV","text":"100\uff1f 10000\uff1f or more?","ts":"1479818110.004298"},{"type":"message","user":"U11MANG9G","text":"You know we can\u2019t really ignore <@U1AU8DRQR>\u2026 he always finds a way to reach out :wink:","attachments":[{"fallback":"[November 22nd, 2016 4:23 AM] garisingh: cool - just thought i'd take a quick look since everyone else ignored Gabor  :disappointed:","ts":"1479817423.004293","author_subname":"garisingh","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"cool - just thought i'd take a quick look since everyone else ignored Gabor  :disappointed:","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/garisingh","author_icon":"https:\/\/avatars.slack-edge.com\/2016-09-10\/78323915894_521dc680194c08b166e0_48.jpg","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1479817423004293","is_share":true,"footer":"Posted in #fabric-consensus-dev"}],"edited":{"user":"U11MANG9G","ts":"1479818371.000000"},"ts":"1479818131.004299","reactions":[{"name":"woo","users":["U1AU8DRQR"],"count":1}]},{"type":"message","user":"U11MANG9G","text":"<@U2FR6FUJV> It depends on your set up. Less than 10K TPS last time I checked (with Fabric v0.6)","ts":"1479818165.004300"},{"type":"message","user":"U11MANG9G","text":"But whatever number people will give you, v1.0 has so many changes that will have a HUGE impact on performance.","ts":"1479818213.004301"},{"type":"message","user":"U11MANG9G","text":"(the biggest is the \u201cpluggable architecture\u201d where you can specify\/switch components using configuration)","ts":"1479818238.004302"},{"type":"message","user":"U11MANG9G","text":"FWIW, I was able to show a stable 2K TPS flow by disabling\/simplifying a lot.","ts":"1479818270.004303"},{"type":"message","user":"U0XR6J961","text":"niubwang: 100-1000","ts":"1479818275.004304"},{"type":"message","user":"U0XR6J961","text":"depending on the complexity of the chaincode","ts":"1479818284.004305"},{"type":"message","user":"U11MANG9G","text":"Yes, and other factors (e.g., the number of validators, complexity of the TCerts, etc.)","ts":"1479818323.004306"},{"type":"message","user":"U11MANG9G","text":"It is easy (at this point) to \u201cplay\u201d with these numbers. Just being frank.","ts":"1479818343.004307"},{"type":"message","user":"U2FR6FUJV","text":"thanks simon and jonathanlevi","ts":"1479818487.004309"},{"type":"message","user":"U2FR6FUJV","text":"and the transaction Latency?","ts":"1479818514.004310"},{"type":"message","user":"U2FR6FUJV","text":"does it depending on the pbft configuration?","ts":"1479818590.004311"},{"type":"message","user":"U0XR6J961","text":"yes it does depend on that, but not much","ts":"1479818700.004312"},{"type":"message","user":"U0XR6J961","text":"well, batch size influences it","ts":"1479818712.004313"},{"type":"message","user":"U2FR6FUJV","text":"the time out of batch is bigger, the TPS is bigger and the Latency is bigger, is it right?","ts":"1479819091.004314"},{"type":"message","user":"U0XR6J961","text":"yes, in theory","ts":"1479819132.004315"},{"type":"message","user":"U0XR6J961","text":"i think 100 or 500 batch size already reaches top tps","ts":"1479819196.004316"},{"type":"message","user":"U2FR6FUJV","text":"the batch size set to 100 or 500 and the batch time out set to 1s  or 2s?","ts":"1479819670.004317"},{"type":"message","user":"U0XR6J961","text":"batch timeout is just to keep the system going if there are not many requests","ts":"1479819740.004318"},{"type":"message","user":"U0XR6J961","text":"i think 1s or so is reasonable, but it really depends on your requirements","ts":"1479819755.004319"},{"type":"message","user":"U2FR6FUJV","text":"thanks simon","ts":"1479819903.004320"},{"user":"U36D36JH4","text":"<@U36D36JH4|hmhem> has joined the channel","type":"message","subtype":"channel_join","ts":"1479870006.004321"},{"user":"U1F1CU61Y","text":"<@U1F1CU61Y|ankitkamra> has joined the channel","type":"message","subtype":"channel_join","ts":"1479887726.004322"},{"type":"message","user":"U1AU8DRQR","text":"kind of 'next level' stress tests for sbft: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2515\/13>","ts":"1479911264.004323"},{"type":"message","subtype":"file_share","text":"<@U1KDAMDJ7|sanchezl> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/sanchezl\/F35KVP9EV\/jim-env.tgz|jim-env.tgz> and commented: <@U13TWBRBL> , I was unable to reproduce your issue. Here is a copy of the environment I used and the commands I ran.","file":{"id":"F35KVP9EV","created":1479913985,"timestamp":1479913985,"name":"jim-env.tgz","title":"jim-env.tgz","mimetype":"application\/x-gzip","filetype":"gzip","pretty_type":"GZip","user":"U1KDAMDJ7","editable":false,"size":2078,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F35KVP9EV\/jim-env.tgz?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F35KVP9EV\/download\/jim-env.tgz?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/sanchezl\/F35KVP9EV\/jim-env.tgz","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F35KVP9EV-3727782c76","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":1,"initial_comment":{"id":"Fc36CKDY5A","created":1479913985,"timestamp":1479913985,"user":"U1KDAMDJ7","is_intro":true,"comment":"<@U13TWBRBL> , I was unable to reproduce your issue. Here is a copy of the environment I used and the commands I ran.","channel":""}},"user":"U1KDAMDJ7","upload":true,"display_as_bot":false,"username":"<@U1KDAMDJ7|sanchezl>","bot_id":null,"ts":"1479913986.004324"},{"type":"message","user":"U0ULK2JPP","text":"something in orderer is broken recently. its receiving transactions but appearst to be dropping them randomly\u2026 by random, I mean the same transaction content does appear to trigger cut\/deliver block\u2026. looking at it.","ts":"1479929553.004325"},{"type":"message","user":"U0ULK2JPP","text":"if anyone has ideas, please do suggest","ts":"1479929568.004326"},{"type":"message","user":"U0ULK2JPP","text":"Can someone verify this fix <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2741\/> for the above please ? ( <@U0XPR4NP4> , <@U0XQ35CDD>, <@U1AU8DRQR> ?)","ts":"1479935657.004327"},{"type":"message","user":"U1AU8DRQR","text":"Looking ","ts":"1479935676.004328"},{"type":"message","user":"U0ULK2JPP","text":"thanks <@U1AU8DRQR>","ts":"1479935703.004329"},{"type":"message","user":"U1AU8DRQR","text":"So the timer should be nil-ed every time right? ","ts":"1479935826.004330"},{"type":"message","user":"U0ULK2JPP","text":"I think so\u2026 and it did work","ts":"1479935844.004331"},{"type":"message","user":"U0ULK2JPP","text":"also looked at some old code and it was getting niled there","ts":"1479935860.004332"},{"type":"message","user":"U0ULK2JPP","text":"specifically","ts":"1479935920.004333"},{"type":"message","user":"U0ULK2JPP","text":"```cutBatch := func() {\n                bs.rl.Append(curBatch, nil)\n                curBatch = nil\n                timer = nil\n        }```","ts":"1479935924.004334"},{"type":"message","user":"U0ULK2JPP","text":"from the previous version...","ts":"1479935935.004335"},{"type":"message","user":"U0ULK2JPP","text":"gets called each time the timer pops","ts":"1479935949.004336"},{"type":"message","user":"U0ULK2JPP","text":"I think its the right thing to do \u2026 but then I need your eyes","ts":"1479935968.004337"},{"type":"message","user":"U1AU8DRQR","text":"But after it is nil, it must be reinitalized because receive and send to nil channel always blocks","ts":"1479936012.004338"},{"type":"message","user":"U0ULK2JPP","text":"I think the only initialization happens here","ts":"1479936127.004339"},{"type":"message","subtype":"file_share","text":"<@U0ULK2JPP|muralisr> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F376EELUF\/pasted_image_at_2016_11_23_04_22_pm.png|Pasted image at 2016-11-23, 4:22 PM>","file":{"id":"F376EELUF","created":1479936128,"timestamp":1479936128,"name":"Pasted image at 2016_11_23 04_22 PM.png","title":"Pasted image at 2016-11-23, 4:22 PM","mimetype":"image\/png","filetype":"png","pretty_type":"PNG","user":"U0ULK2JPP","editable":false,"size":17021,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F376EELUF\/pasted_image_at_2016_11_23_04_22_pm.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F376EELUF\/download\/pasted_image_at_2016_11_23_04_22_pm.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_64":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F376EELUF-46447aef2a\/pasted_image_at_2016_11_23_04_22_pm_64.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_80":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F376EELUF-46447aef2a\/pasted_image_at_2016_11_23_04_22_pm_80.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F376EELUF-46447aef2a\/pasted_image_at_2016_11_23_04_22_pm_360.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360_w":360,"thumb_360_h":56,"thumb_480":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F376EELUF-46447aef2a\/pasted_image_at_2016_11_23_04_22_pm_480.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_480_w":480,"thumb_480_h":74,"thumb_160":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F376EELUF-46447aef2a\/pasted_image_at_2016_11_23_04_22_pm_160.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F376EELUF-46447aef2a\/pasted_image_at_2016_11_23_04_22_pm_720.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720_w":720,"thumb_720_h":111,"image_exif_rotation":1,"original_w":778,"original_h":120,"permalink":"https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F376EELUF\/pasted_image_at_2016_11_23_04_22_pm.png","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F376EELUF-88e2b56bc6","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0ULK2JPP","upload":true,"display_as_bot":false,"username":"<@U0ULK2JPP|muralisr>","bot_id":null,"ts":"1479936131.004340"},{"type":"message","user":"U0ULK2JPP","text":"the first batch always gets sent \u2026 ie, timer starts out as nil","edited":{"user":"U0ULK2JPP","ts":"1479936165.000000"},"ts":"1479936147.004341"},{"type":"message","user":"U0ULK2JPP","text":"and look at that check","ts":"1479936174.004343"},{"type":"message","user":"U0ULK2JPP","text":"it basically depends upon timer to be nil to start one","ts":"1479936201.004344"},{"type":"message","user":"U1AU8DRQR","text":"Why len(batches) == 0","edited":{"user":"U1AU8DRQR","ts":"1479936482.000000"},"ts":"1479936456.004345"},{"type":"message","user":"U1AU8DRQR","text":"The only thing I don't get yet","ts":"1479936468.004346"},{"type":"message","subtype":"file_share","text":"<@U0ULK2JPP|muralisr> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F36JA80S1\/pasted_image_at_2016_11_23_04_32_pm.png|common\/b> and commented: because of that","file":{"id":"F36JA80S1","created":1479936761,"timestamp":1479936761,"name":"Pasted image at 2016_11_23 04_32 PM.png","title":"common\/b","mimetype":"image\/png","filetype":"png","pretty_type":"PNG","user":"U0ULK2JPP","editable":false,"size":63151,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F36JA80S1\/pasted_image_at_2016_11_23_04_32_pm.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F36JA80S1\/download\/pasted_image_at_2016_11_23_04_32_pm.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_64":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F36JA80S1-76b18281dc\/pasted_image_at_2016_11_23_04_32_pm_64.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_80":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F36JA80S1-76b18281dc\/pasted_image_at_2016_11_23_04_32_pm_80.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F36JA80S1-76b18281dc\/pasted_image_at_2016_11_23_04_32_pm_360.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360_w":360,"thumb_360_h":111,"thumb_480":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F36JA80S1-76b18281dc\/pasted_image_at_2016_11_23_04_32_pm_480.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_480_w":480,"thumb_480_h":148,"thumb_160":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F36JA80S1-76b18281dc\/pasted_image_at_2016_11_23_04_32_pm_160.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F36JA80S1-76b18281dc\/pasted_image_at_2016_11_23_04_32_pm_720.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720_w":720,"thumb_720_h":223,"thumb_960":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F36JA80S1-76b18281dc\/pasted_image_at_2016_11_23_04_32_pm_960.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_960_w":960,"thumb_960_h":297,"thumb_1024":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F36JA80S1-76b18281dc\/pasted_image_at_2016_11_23_04_32_pm_1024.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_1024_w":1024,"thumb_1024_h":317,"image_exif_rotation":1,"original_w":1106,"original_h":342,"permalink":"https:\/\/hyperledgerproject.slack.com\/files\/muralisr\/F36JA80S1\/pasted_image_at_2016_11_23_04_32_pm.png","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F36JA80S1-19ef543f23","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":1,"initial_comment":{"id":"Fc35QCS9MW","created":1479936761,"timestamp":1479936761,"user":"U0ULK2JPP","is_intro":true,"comment":"because of that","channel":""}},"user":"U0ULK2JPP","upload":true,"display_as_bot":false,"username":"<@U0ULK2JPP|muralisr>","bot_id":null,"ts":"1479936764.004348"},{"type":"message","user":"U0ULK2JPP","text":"the first message to be ordered returns \u201cnil, true\u201d which signals that a new batch is getting started","ts":"1479936809.004349"},{"type":"message","user":"U1AU8DRQR","text":"ok in the meanwhile I had a look at the code and found it out so I think I buy it","ts":"1479936819.004350"},{"type":"message","user":"U0ULK2JPP","text":"right","ts":"1479936825.004351"},{"type":"message","user":"U0ULK2JPP","text":"and the select on a nil channel is basiaclly a noop I think","ts":"1479936847.004352"},{"type":"message","user":"U0ULK2JPP","text":"(it better be :slightly_smiling_face: )","ts":"1479936855.004353"},{"type":"message","user":"U1AU8DRQR","text":"nil operations block but select does not select that case - I guess","ts":"1479936873.004354"},{"type":"message","user":"U0ULK2JPP","text":"ok. that might be too","ts":"1479936892.004355"},{"type":"message","user":"U1AU8DRQR","text":"wait, sorry, one more thing","edited":{"user":"U1AU8DRQR","ts":"1479936924.000000"},"ts":"1479936916.004356"},{"type":"message","user":"U1AU8DRQR","text":"<https:\/\/gerrit.hyperledger.org\/r\/gitweb?p=fabric.git;a=blob;f=orderer\/solo\/consensus.go;h=a1c4bac2bd0ef09aae07541b1e0965b205ccbd74;hb=b1ecf809e8c2b4e938e16b549f1ddf63d5582d0d>","ts":"1479936927.004358"},{"type":"message","user":"U1AU8DRQR","text":"line 81","ts":"1479936941.004359"},{"type":"message","user":"U0ULK2JPP","text":"yes ?","ts":"1479936980.004360"},{"type":"message","user":"U1AU8DRQR","text":"what happens if \t\/\/ If the message is a valid normal message and does not fill the batch, nil, true is returned","ts":"1479937015.004361"},{"type":"message","user":"U1AU8DRQR","text":"if this is the case","ts":"1479937019.004362"},{"type":"message","user":"U1AU8DRQR","text":"nil, true","ts":"1479937022.004363"},{"type":"message","user":"U1AU8DRQR","text":"len(nil) == 0 ?","edited":{"user":"U1AU8DRQR","ts":"1479937046.000000"},"ts":"1479937032.004364"},{"type":"message","user":"U0ULK2JPP","text":"I think nil,true is returned ONLY if it is the first message in the batch ?","ts":"1479937059.004366"},{"type":"message","user":"U0ULK2JPP","text":"no. I\u2019ll rephrase","ts":"1479937095.004367"},{"type":"message","user":"U1AU8DRQR","text":"I don't know, I only know what Jason's comments say here: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2587\/3\/orderer\/common\/blockcutter\/blockcutter.go>","ts":"1479937106.004368"},{"type":"message","user":"U0ULK2JPP","text":"right","ts":"1479937120.004369"},{"type":"message","user":"U0ULK2JPP","text":"that\u2019s what I was going to rephrase \u2026","ts":"1479937136.004370"},{"type":"message","user":"U0ULK2JPP","text":"len(nil) == 0, yes","ts":"1479937142.004371"},{"type":"message","user":"U1AU8DRQR","text":"btw if v is nil, len(v) is zero.","ts":"1479937158.004372"},{"type":"message","user":"U1AU8DRQR","text":"from godocs","ts":"1479937162.004373"},{"type":"message","user":"U1AU8DRQR","text":"okaaay, sorry","ts":"1479937166.004374"},{"type":"message","user":"U0ULK2JPP","text":"basically it says keep returning nil and batch up internally","ts":"1479937182.004375"},{"type":"message","user":"U0ULK2JPP","text":"right","ts":"1479937183.004376"},{"type":"message","user":"U0ULK2JPP","text":"no worries","ts":"1479937188.004377"},{"type":"message","user":"U0ULK2JPP","text":"it took me a bit going back and forth too","ts":"1479937206.004378"},{"type":"message","user":"U1AU8DRQR","text":"so yeah, the timer needs to be \"cleared\" (set to nil)","ts":"1479937216.004379"},{"type":"message","user":"U1AU8DRQR","text":"timer channel","ts":"1479937226.004380"},{"type":"message","user":"U0ULK2JPP","text":"right, seems that\u2019s all needs to be done","ts":"1479937234.004381"},{"type":"message","user":"U1AU8DRQR","text":"+2 given","ts":"1479937353.004382"},{"type":"message","user":"U1AU8DRQR","text":"btw isn't there any test for this?","ts":"1479937407.004383"},{"type":"message","user":"U0ULK2JPP","text":"thanks! we need to check with <@U0XPR4NP4>","ts":"1479937810.004384"},{"type":"message","user":"U1AU8DRQR","text":"we should have a test for this","ts":"1479938186.004385"},{"type":"message","user":"U11MANG9G","text":"It is preferable\/desirable to have all these various \u201cpaths\u201d covered somehow with unit tests, so that the full \u201cstate machine\u201d is being visited.","edited":{"user":"U11MANG9G","ts":"1479939345.000000"},"ts":"1479938264.004386"},{"type":"message","user":"U11MANG9G","text":"It may be difficult to reproduce (at first), but long term, the investment will pay itself pretty quickly.","ts":"1479938297.004387"},{"type":"message","user":"U11MANG9G","text":"Having said that, I have merged it, in the meantime.","ts":"1479938313.004388"},{"type":"message","user":"U0XPR4NP4","text":"Sorry, just catching up on this ","ts":"1479939002.004389"},{"type":"message","user":"U0XPR4NP4","text":"Yes, timer should be nil-ed after it pops, sorry for the bug ","ts":"1479939025.004390","reactions":[{"name":"woo","users":["U1AU8DRQR"],"count":1}]},{"type":"message","user":"U0XPR4NP4","text":"I can write up a test for this later tonight ","ts":"1479939058.004391"},{"type":"message","user":"U0ULK2JPP","text":"no worries, Jason","ts":"1479939547.004393"},{"type":"message","user":"U0ULK2JPP","text":"lets chalk it up to any bug of mine waiting out there :wink:","ts":"1479939581.004394"},{"type":"message","user":"U0KM61BCP","text":"<@U0XPR4NP4> a test would be welcomed","ts":"1479942718.004395"},{"type":"message","user":"U1T95QCUE","text":"Hi, I have some question about accessing consensus state.\nCurrently, I check if the consensus process is done by checking if the chainheight and the currentBlockHash are all the same on all nodes.\nThe question is, can I read the consensus state by using API\/SDK? With this, I will know if I send transaction too fast, then be able to throttle the transaction speed,","ts":"1479957976.004396"},{"type":"message","user":"U0XPR4NP4","text":"<@U0KM61BCP> <@U0ULK2JPP> As promised, please see <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2749\/> .  There was one additional case where the timer was being stopped by `cutBlock` in the old code which got omitted in the refactored code, so I added a fix and a test case for that as well.","ts":"1479972282.004397"},{"type":"message","user":"U11MANG9G","text":"<@U0XPR4NP4>: I dread asking what\u2019s your local time!","ts":"1479973111.004398"},{"type":"message","user":"U11MANG9G","text":"Thank you\u2026 looks great. Will approve once the tests complete.","ts":"1479973179.004399"},{"type":"message","user":"U1AU8DRQR","text":"<@U0XPR4NP4> I will have a look soon","ts":"1479975006.004400"},{"type":"message","user":"U1AU8DRQR","text":"done!","ts":"1479976110.004401"},{"user":"U1FLE8XPT","text":"<@U1FLE8XPT|drichard> has joined the channel","type":"message","subtype":"channel_join","ts":"1480304067.004402"},{"type":"message","user":"U1FLE8XPT","text":"Hi - in <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/proposals\/r1\/Next-Consensus-Architecture-Proposal.md> the framework allows for pluggable consensus implementations. Which ones will be included by default? Just PBFT?","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/proposals\/r1\/Next-Consensus-Architecture-Proposal.md","text":"Read-only mirror of <https:\/\/gerrit.hyperledger.org\/r\/#\/admin\/projects\/fabric>","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/proposals\/r1\/Next-Consensus-Architecture-Proposal.md","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1480304251.004403"},{"type":"message","user":"U1AU8DRQR","text":"as I know (not the ultimate truth) we are currently implementing simple bft (simplified pbft) and have solo (simple orderer) and kafka. we will also implement a pipelined version of sbft,","ts":"1480320434.004405"},{"type":"message","user":"U1AU8DRQR","text":"I added some tests to this: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2673\/>","ts":"1480324836.004406"},{"type":"message","user":"U0UGH3X7X","text":"scrum ...","ts":"1480345191.004407"},{"type":"message","user":"U1KDHJT6H","text":"hangout?","ts":"1480345203.004408"},{"type":"message","user":"U0YP7KFGQ","text":"link?","ts":"1480345207.004409"},{"text":"<@U0UGH3X7X|tuand> has started a Google+ Hangout for this channel. <https:\/\/hangouts.google.com\/hangouts\/_\/bwahgnabtfh3pi42d32kmvjygqe|Join Hangout>.","username":"hangouts","bot_id":"B0UKUAJ0Y","type":"message","subtype":"bot_message","ts":"1480345240.004410"},{"type":"message","user":"U0YP7KFGQ","text":"<@U0ZJZBJLF> - I will talk with you later","ts":"1480345269.004414"},{"type":"message","user":"U1AU8DRQR","text":"there's a meeting going on so I would prefer not using my mic but I join with audio only :slightly_smiling_face:\nwith <@U0Y14MWA2> we are (still) hunting sbft bugs. <@U0Y14MWA2> added some improvements for sbft. they got already merged.","ts":"1480345458.004416"},{"type":"message","user":"U1AU8DRQR","text":"<@U0UGH3X7X>","ts":"1480345576.004417"},{"type":"message","user":"U0UGH3X7X","text":"got it","ts":"1480345690.004418"},{"type":"message","user":"U0Y14MWA2","text":"sorry I cannot join - on another call","ts":"1480345742.004419"},{"type":"message","user":"U0Y14MWA2","text":"<@U1AU8DRQR> summarized it well","ts":"1480345749.004420"},{"type":"message","user":"U1AU8DRQR","text":"<@U0UGH3X7X> sorry for not answering but listening :slightly_smiling_face:","ts":"1480345771.004421"},{"type":"message","user":"U0UGH3X7X","text":"np <@U1AU8DRQR>  ! between scrum and this channel, we're good","ts":"1480346030.004422"},{"type":"message","user":"U1AU8DRQR","text":"btw please have a look at this CR: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2673\/> I added tests as Chris suggested","ts":"1480346061.004423"},{"type":"message","user":"U0ZR63HLK","text":"Hi All, apart sbft, who else is generating signatures in the consensus package?","ts":"1480346308.004424"},{"type":"message","user":"U1AU8DRQR","text":"<@U0XPR4NP4> may know something about that","ts":"1480346356.004425"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZR63HLK> Solo and Kafka will each attach a signature to each block created, attesting to its validity","ts":"1480347116.004426"},{"type":"message","user":"U0XPR4NP4","text":"Because Solo and Kafka are both not BFT, a single signature is all that is needed, whereas with SBFT we will need f+1 (though we will likely have and encode 2f+1) signatures attesting to the blocks validity","ts":"1480347185.004427"},{"type":"message","user":"U0Y14MWA2","text":"makes sense","ts":"1480347528.004428"},{"type":"message","user":"U0ZR63HLK","text":"I see, the code for signing is already in place, I guess. Right?","ts":"1480347528.004429"},{"type":"message","user":"U0ZR63HLK","text":"So, <@U0XPR4NP4>, the only sign calls I see are in the sbft package","ts":"1480347986.004430"},{"type":"message","user":"U0XPR4NP4","text":"Ah, so, I was giving an 'eventually' statement.  Today, there's no signing or signature validation done anywhere (outside of sbft)","edited":{"user":"U0XPR4NP4","ts":"1480348102.000000"},"ts":"1480348025.004431"},{"type":"message","user":"U0XPR4NP4","text":"We need to hook in the BCCSP code and start utilizing it.  We've left some (probably not adequately documented) plugpoints for it, but today, other than sbft, we don't do signing.","ts":"1480348079.004432"},{"type":"message","user":"U0ZR63HLK","text":"got it. Actually, one should hook the MSP directly","ts":"1480348123.004434"},{"type":"message","user":"U0ZR63HLK","text":"the MSP will then know what to do with the BCCSP","ts":"1480348139.004435"},{"type":"message","user":"U0XPR4NP4","text":"Ah, okay.  So how do I know which MSP to pick?","ts":"1480348154.004436"},{"type":"message","user":"U0ZR63HLK","text":"really good question :slightly_smiling_face:","ts":"1480348172.004437"},{"type":"message","user":"U0ZR63HLK","text":"we need a configuration, actually one can follow what has been done for the peer","ts":"1480348188.004438"},{"type":"message","user":"U0ZR63HLK","text":"which is still a work in progress but is a first step any way","ts":"1480348200.004439"},{"type":"message","user":"U0XPR4NP4","text":"My impression had been, that for instance when I get a signature, I can simply hand the signing identity, the signature, and the bytes the signature was over to 'something' and get back the validity","ts":"1480348248.004440"},{"type":"message","user":"U0ZR63HLK","text":"So, the peer initializes the MSPManager. The assumption, for now, is that there is only one MSP with a default identity","ts":"1480348258.004441"},{"type":"message","user":"U0ZR63HLK","text":"yes, that's correct","ts":"1480348277.004442"},{"type":"message","user":"U0ZR63HLK","text":"actually, what would be nice to have is something like <@U0ZJZBJLF> has done for the gossip module","edited":{"user":"U0ZR63HLK","ts":"1480348389.000000"},"ts":"1480348296.004443"},{"type":"message","user":"U0ZR63HLK","text":"That is to have an intermediate interface that exposes Sign and Verify plus some other methods that are needed in the specific case","edited":{"user":"U0ZR63HLK","ts":"1480348404.000000"},"ts":"1480348325.004444"},{"type":"message","user":"U0ZR63HLK","text":"and have us implementing it using the MSP","ts":"1480348336.004445"},{"type":"message","user":"U0ZR63HLK","text":"in this way, the orderers would be kind of pluggable also with the respect of how signatures are generated and verified. Or if you want, kind of independent from the MSP","edited":{"user":"U0ZR63HLK","ts":"1480348433.000000"},"ts":"1480348370.004446"},{"type":"message","user":"U0ZR63HLK","text":"I would like to ask also the status of the configuration, if possible. <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2677\/> needs review","edited":{"user":"U0ZR63HLK","ts":"1480349837.000000"},"ts":"1480349822.004450"},{"type":"message","user":"U184J2R7S","text":"Quick chat with Tuan- they are working on getting multi-channel working with Kafka","ts":"1480351028.004452"},{"type":"message","user":"U0UGH3X7X","text":"<@U0XQ35CDD> <@U0XPR4NP4>   need you guys to comment on changeset <https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1480349822004450>","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1480349822004450","fallback":"[November 28th, 2016 8:17 AM] adc: I would like to ask also the status of the configuration, if possible. <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2677\/> needs review","ts":"1480349822.004450","author_subname":"adc","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"I would like to ask also the status of the configuration, if possible. <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2677\/> needs review","author_name":"Angelo De Caro","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/adc","author_icon":"https:\/\/avatars.slack-edge.com\/2016-07-21\/61823221170_e0795e87fc9eb0abb221_48.jpg","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1480353195.004453"},{"type":"message","user":"U0UGH3X7X","text":"everyone else welcomed to review as well but kostas\/jason\/me need to review in next couple days","ts":"1480353254.004455"},{"type":"message","user":"U0XPR4NP4","text":"Looking now","ts":"1480353872.004456"},{"type":"message","user":"U0XQ35CDD","text":"<@U1KDAMDJ7> <@U13TWBRBL> Where are we with the issue that Jim reported seeing last week?","ts":"1480359772.004457"},{"type":"message","user":"U0XQ35CDD","text":"<@U13TWBRBL>: Also: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2657\/>","ts":"1480359858.004458"},{"type":"message","user":"U1KDAMDJ7","text":"I was unable to reproduce. I posted my environment here.","ts":"1480359875.004459"},{"type":"message","user":"U0XQ35CDD","text":"<@U1KDAMDJ7>: Right, I remember that. I am checking to see if there was a follow-up. ","ts":"1480359925.004460"},{"type":"message","user":"U1B9E51R8","text":"+5GY+6","ts":"1480385469.004461"},{"type":"message","user":"U12452RAP","text":"guys, on v0.6","ts":"1480415090.004462"},{"type":"message","user":"U12452RAP","text":"[consensus\/pbft] recvViewChange -&gt; WARN e845 Replica 2 already has a view change message for view 1 from replica 1\n [consensus\/pbft] recvViewChange -&gt; WARN 15af5 Replica 1 already has a view change message for view 1 from replica 1","ts":"1480415095.004463"},{"type":"message","user":"U12452RAP","text":"what cause this warning","ts":"1480415140.004464"},{"type":"message","user":"U12452RAP","text":"how will this diSappear","ts":"1480415167.004465"},{"type":"message","user":"U1AU8DRQR","text":"is that a fatal problem if a replica has multiple view changes from another? <@U0Y14MWA2>","ts":"1480415463.004466"},{"type":"message","user":"U1AU8DRQR","text":"I don't think","ts":"1480415468.004467"},{"type":"message","user":"U0Y14MWA2","text":"it is not a problem","ts":"1480415509.004468"},{"type":"message","user":"U0Y14MWA2","text":"in principle view change msgs need to be retransmitted","ts":"1480415517.004469"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XPR4NP4> may remember more of the actual implementation","ts":"1480415532.004470"},{"type":"message","user":"U0PB67X4K","text":"looking at <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2673\/> .....\n\n(and I probably missed this somewhere in a doc)\n\ncouple things I am wondering about:\n\n1) Generally speaking, DeliverResponse sends a Block and I believe that currently nether Solo nor Kafka orderer \"sign\" this block\n\n2) Block contains a metadata field - is this where the \"proof\" for the Block is supposed to go - i.e. is this where the signature info would actually go?\n\n3) In the case of the CFT-based orderers, my assumption is that you'd only need one signature from the \"shim\" which \"delivers\" the message.  Correct?\n\n4) Specific to 2673, for SBFT is the \"proof\" actually multiple signatures (e.g. 2f+1 SBFT nodes)?\n\nOr I am just totally off here?","edited":{"user":"U0PB67X4K","ts":"1480422449.000000"},"ts":"1480422129.004471"},{"type":"message","user":"U1AU8DRQR","text":"2) I think yes. if it should not be there then it could be accepted as a temporary solution at least (as we have no better place yet)\n3) in 2673 I only store multiple signatures (as you said, and I also store some kind of header which is sbft internal) - but yes it can be called \"the proof\"","ts":"1480422787.004473"},{"type":"message","user":"U0PB67X4K","text":"(I think I picked up the \"proof\" term from something <@U0XPR4NP4> used to say  :wink: )","ts":"1480423093.004474"},{"type":"message","user":"U1AU8DRQR","text":"yeah and rawledger code also uses that term","ts":"1480423835.004475"},{"type":"message","user":"U0XPR4NP4","text":"<@U12452RAP> When a replica believes the view should change, but has not received a new view message, it periodically (once a second) resends its view change message (because it might have been lost due to network failure).  The warnings you see are benign and should probably be at a lower log level.","ts":"1480428901.004476"},{"type":"message","user":"U0XPR4NP4","text":"1) Correct, though this is in plan to add\n2) Yes, and potentially some other info, for instance the gossip folks would like an attestation of the latest config block there\n3) Yes\n4) We technically only need f+1, though in reality we will likely have 2f+1 so will likely just include all","edited":{"user":"U0XPR4NP4","ts":"1480429067.000000"},"ts":"1480429021.004477"},{"type":"message","user":"U0XPR4NP4","text":"And yes, <@U0PB67X4K> is right, originally, we had a single byte field for 'proof', but, metadata was more generic and could be a superset of proof","edited":{"user":"U0XPR4NP4","ts":"1480429123.000000"},"ts":"1480429109.004480"},{"type":"message","user":"U0PB67X4K","text":"thanks <@U0XPR4NP4>  - so don't we have a \"minor\" issue with SBFT as it is currently implemented in that what gets passed around is a \"batch\" and not a \"block\" - meaning the current SBFT signatures are not actually on the Block itself?   (I think that's what your comment was getting at for 2673?)","ts":"1480429343.004482"},{"type":"message","user":"U0XPR4NP4","text":"Correct, sbft needs to be converted wholesale to the common data structures","ts":"1480429380.004483"},{"type":"message","user":"U0PB67X4K","text":"e.g SBFT batch -&gt; cb.Block?","ts":"1480429404.004484"},{"type":"message","user":"U0XPR4NP4","text":"They're quite similar to the sbft structures, so I don't think this is an impossible task, but it will obviously be invasive","ts":"1480429405.004485"},{"type":"message","user":"U0XPR4NP4","text":"Right","ts":"1480429407.004486"},{"type":"message","user":"U0PB67X4K","text":"cool.  just trying to keep up  :wink:","ts":"1480429422.004487"},{"type":"message","user":"U1BC5A0F9","text":"<@U0UGH3X7X>, <@U0PB67X4K>, <@U0XPR4NP4>  a few more changesets were submitted here to simplify the config files","ts":"1480429972.004488"},{"type":"message","user":"U1BC5A0F9","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2677\/>","ts":"1480429989.004489"},{"type":"message","user":"U1BC5A0F9","text":"Also a more visual representation of the peer init config schema is included in the attachment:","edited":{"user":"U1BC5A0F9","ts":"1480430043.000000"},"ts":"1480430012.004490"},{"type":"message","subtype":"file_share","text":"<@U1BC5A0F9|elli> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/elli\/F38A7EPFE\/msp-config-diagram.ppt|MSP-config-diagram.ppt>","file":{"id":"F38A7EPFE","created":1480430024,"timestamp":1480430024,"name":"MSP-config-diagram.ppt","title":"MSP-config-diagram.ppt","mimetype":"application\/vnd.ms-powerpoint","filetype":"ppt","pretty_type":"PowerPoint Presentation","user":"U1BC5A0F9","editable":false,"size":138240,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F38A7EPFE\/msp-config-diagram.ppt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F38A7EPFE\/download\/msp-config-diagram.ppt?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/elli\/F38A7EPFE\/msp-config-diagram.ppt","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F38A7EPFE-48b626ce31","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U1BC5A0F9","upload":true,"display_as_bot":false,"username":"<@U1BC5A0F9|elli>","bot_id":null,"ts":"1480430024.004491"},{"type":"message","user":"U0PB67X4K","text":"<@U0XPR4NP4> <@U1AU8DRQR>  - shall we approve 2673 and then do another changeset to retrofit with the common structures?  trying to stay within the spirit of incremental changes  :wink:","ts":"1480430205.004493"},{"type":"message","user":"U0XPR4NP4","text":"<@U0PB67X4K> You can see that is my opinion (per the +2)","ts":"1480430243.004494"},{"type":"message","user":"U0PB67X4K","text":"oh","ts":"1480430249.004495"},{"type":"message","user":"U0PB67X4K","text":"you were a step ahead of me  :wink:","ts":"1480430290.004496"},{"type":"message","user":"U1AU8DRQR","text":"we are currently debugging sbft witk <@U0Y14MWA2> - as far as the network tests begin to work (<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2515\/>) I will try to use the common structures in sbft","ts":"1480430319.004497"},{"type":"message","user":"U1AU8DRQR","text":"and there are dozens of other things to do, solo and kafka are several miles ahead of sbft","ts":"1480430346.004498"},{"type":"message","user":"U1AU8DRQR","text":"in the usage of common structures and functionalities","ts":"1480430360.004499"},{"type":"message","user":"U0PB67X4K","text":"no worries","ts":"1480430365.004500"},{"type":"message","user":"U1AU8DRQR","text":"e.g. cutter, manager and I don't remember :smile:","ts":"1480430398.004501"},{"type":"message","user":"U0Y14MWA2","text":"of course they are more advanced - since we are building a spaceship and not a bicycle\/car","ts":"1480430435.004502"},{"type":"message","user":"U0Y14MWA2","text":":wink:","ts":"1480430441.004503"},{"type":"message","user":"U1AU8DRQR","text":"<@U0XPR4NP4> promised that he will take a photo of the blackboard next time if he draws a diagram about the (planned) system","ts":"1480430456.004504"},{"type":"message","user":"U0XPR4NP4","text":"Yes, will do.  Very close to having an end to end flow of multi-chain including chain creation, so trying to stay heads down on the code but will be sure to document when finished.","ts":"1480430558.004505"},{"type":"message","user":"U1AU8DRQR","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2809\/> I just rebased it","ts":"1480430712.004506"},{"type":"message","user":"U1AU8DRQR","text":"pls +2 it again","ts":"1480431325.004507"},{"type":"message","user":"U0PB67X4K","text":"<@U1AU8DRQR>  - will do","ts":"1480431408.004508"},{"type":"message","user":"U1AU8DRQR","text":"<@U0XPR4NP4> one more please","ts":"1480431532.004509"},{"type":"message","user":"U0XPR4NP4","text":"<@U1AU8DRQR> Done","ts":"1480431794.004510"},{"type":"message","user":"U1AU8DRQR","text":"thx","ts":"1480431825.004511"},{"user":"U37F5PG64","text":"<@U37F5PG64|anton> has joined the channel","type":"message","subtype":"channel_join","ts":"1480432030.004512"},{"type":"message","user":"U12452RAP","text":"<@U0XPR4NP4>: when can the resend terminate?","ts":"1480432585.004513"},{"type":"message","user":"U0XQ35CDD","text":"<@U12452RAP>: When\/if the network eventually switches to a new view that is equal to or higher than the one the complaining peer asks for.","ts":"1480438781.004514"},{"type":"message","user":"U0XQ35CDD","text":"If the rest of the network operates just fine in an \"earlier\" view, that other peer will be resending forever.","ts":"1480438865.004515"},{"type":"message","user":"U0XPR4NP4","text":"<@U12452RAP> See <https:\/\/jira.hyperledger.org\/browse\/FAB-707> for a more thorough discussion","ts":"1480444572.004516"},{"user":"U38JCNW5V","text":"<@U38JCNW5V|divyank-sk> has joined the channel","type":"message","subtype":"channel_join","ts":"1480445473.004517"},{"type":"message","user":"U12452RAP","text":"thanks <@U0XPR4NP4> <@U0XQ35CDD> ","ts":"1480467987.004518"},{"user":"U38H8MS11","text":"<@U38H8MS11|lovesh> has joined the channel","type":"message","subtype":"channel_join","ts":"1480488241.004519"},{"type":"message","user":"U0ZR63HLK","text":"Hi <@U0XQ35CDD>, is the kafka package supposed to generate any signature?","ts":"1480493171.004520"},{"type":"message","user":"U0ZR63HLK","text":"I have also noticed that solo doesn't generate any signature too","ts":"1480493189.004521"},{"type":"message","user":"U0Y14MWA2","text":"<@U0ZR63HLK> solo\/kafka will both generate a signature as this is needed for gossip","ts":"1480495153.004522"},{"type":"message","user":"U0Y14MWA2","text":"I do not think they do yet - but they will","ts":"1480495160.004523"},{"type":"message","user":"U0ZR63HLK","text":"okay, I was looking for that information to understand how to integrate the MSP","ts":"1480495192.004524"},{"type":"message","user":"U0ZR63HLK","text":"so far, only sbft generates signatures","ts":"1480495203.004525"},{"type":"message","user":"U0ZR63HLK","text":"but in this change-set <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2605\/>, related to orderer bootstrapping, sbft cannot be chosen","ts":"1480495233.004526"},{"type":"message","user":"U0PB67X4K","text":"<@U0ZR63HLK> - I don't think we want to integrate MSP with the ordering nodes until we get it straightened out on the peer side.  But I agree the first place to start should be with signing blocks as this SHOULD be very similar to providing peer identity and signing endorsement responses.   As a matter of fact, other than the fact they sign something different, not sure why things would not be almost identical","ts":"1480500757.004527"},{"type":"message","user":"U1BC5A0F9","text":"+1","ts":"1480514390.004528"},{"type":"message","user":"U0XQ35CDD","text":"<@U0ZR63HLK> Marko is right. We should also be signing but don't do it yet.","ts":"1480514559.004529"},{"type":"message","user":"U0ZR63HLK","text":"perfect. So, when time will come let's coordinate on this :slightly_smiling_face:","ts":"1480514711.004530","reactions":[{"name":"+1","users":["U0XQ35CDD"],"count":1}]},{"type":"message","user":"U0Y14MWA2","text":"attn maintainers","ts":"1480515858.004531"},{"type":"message","user":"U0Y14MWA2","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2873\/>","ts":"1480515859.004532"},{"type":"message","user":"U1AU8DRQR","text":"grpc advice needed:","ts":"1480516350.004533"},{"type":"message","user":"U1AU8DRQR","text":"if I have a GRPC Server Implementation with a function A() and A() is called from client side (from a grpc client, client.A() ) my server code for A() is called. is that done in the main goroutine?","ts":"1480516396.004534"},{"type":"message","user":"U0ZJZBJLF","text":"of course not","ts":"1480516507.004535"},{"type":"message","user":"U0ZJZBJLF","text":"that would mean that you could only process 1 invocation of gRPC service serially, because your statement will hold for any invocation of A()","ts":"1480516591.004536"},{"type":"message","user":"U0ZJZBJLF","text":"You can easily, btw know the goroutine it is called from. \nGo to `gossip\/util\/misc.go` -&gt; PrintStackTrace and change *true* to *false*, and then in the gRPC server-side method invoke util.PrintStackTrace() and print it and you'll see from where it's invoked","ts":"1480516669.004537"},{"type":"message","user":"U0ZJZBJLF","text":"I checked for you, the goroutine that serves (at least a stream request) is created in the following way:\n```\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\ts.handleStream(st, stream, s.traceInfo(st, stream))\n\t\t}()\n```\nin `grpc\/server.go`","ts":"1480517031.004538"},{"type":"message","user":"U1AU8DRQR","text":"<@U0ZJZBJLF> thanks, that is what I thought too but somehow sbft related code reached a dead lock related to this and I am thinking what caused that","ts":"1480517193.004539"},{"type":"message","user":"U0ZJZBJLF","text":"well for deadlock \"debugging\" you can print all goroutine(s) when you think there is a deadlock  using util.PrintStackTrace()","edited":{"user":"U0ZJZBJLF","ts":"1480517235.000000"},"ts":"1480517227.004540"},{"type":"message","user":"U0ZJZBJLF","text":"it's in `gossip\/util\/misc.go`","ts":"1480517244.004542"},{"type":"message","user":"U0ZJZBJLF","text":"it can be helpful because it sometimes shows you if a goroutine is waiting on a lock, or not and you perhaps can deduce which goroutines are waiting on which locks","ts":"1480517279.004543"},{"type":"message","user":"U0ZJZBJLF","text":"I wish golang could have something like *jconsole* in java though... it's so comfortable","ts":"1480517549.004544"},{"type":"message","user":"U0UGH3X7X","text":"<@U1BC5A0F9> <@U0ZR63HLK> <@U26T99AQ4> <@U0UKTPMG8> <@U0ULK2JPP>  @binh this is how I see the genesis block create tool working after our discussion this morning <https:\/\/jira.hyperledger.org\/browse\/FAB-665?focusedCommentId=19911&amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-19911>","ts":"1480533197.004545"},{"user":"U26T99AQ4","inviter":"U0UGH3X7X","text":"<@U26T99AQ4|aso> has joined the channel","type":"message","subtype":"channel_join","ts":"1480533205.004546"},{"type":"message","user":"U0UGH3X7X","text":"Let's continue using FAB-665 for comments","ts":"1480533255.004547"},{"type":"message","user":"U1AU8DRQR","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2905\/1>","ts":"1480584968.004548"},{"type":"message","user":"U1SHFS1Q9","text":"Can someone provide clarification on how the Validating Leader is selected or elected during consensus ? Thank you","ts":"1480586375.004549"},{"type":"message","user":"U12AHQ3NK","text":"Hi. I am using fabric v 0.6. I have set up a network of 4 peers and 1 CA. I am trying to connect the Non-Validating peer to the network, When i try to use the \/chain Rest API on the NVP it gives me {\"Error\":\"No blocks in blockchain.\"}","ts":"1480588052.004550"},{"type":"message","user":"U1F1CU61Y","text":"<@U12AHQ3NK> are all vp's and nvp's are on same network ?","ts":"1480588195.004551"},{"type":"message","user":"U12AHQ3NK","text":"<@U1F1CU61Y>  yes","ts":"1480588819.004552"},{"type":"message","user":"U1F1CU61Y","text":"i am getting the same problem","ts":"1480588840.004553"},{"type":"message","user":"U1F1CU61Y","text":"what i am doubting is that every peer is listening on 172.17.0.2","ts":"1480588861.004554"},{"type":"message","user":"U1F1CU61Y","text":"they are not able to connect through physical ip of machine","ts":"1480588880.004555"},{"type":"message","user":"U1F1CU61Y","text":"so nvp must forward invoke\/query request to vp and it tries to connect 172.17.0.2 that is it gets connected to self","ts":"1480588922.004556"},{"type":"message","user":"U12AHQ3NK","text":"what is the command you using to run a NVP?","ts":"1480588942.004557"},{"type":"message","user":"U1F1CU61Y","text":"peer node start","ts":"1480588958.004558"},{"type":"message","user":"U1F1CU61Y","text":"just change in peer\/core.yaml, set value of validator=false","ts":"1480588980.004559"},{"type":"message","user":"U1F1CU61Y","text":"what about you","ts":"1480588987.004560"},{"type":"message","user":"U12AHQ3NK","text":"same","ts":"1480589036.004561"},{"type":"message","user":"U1F1CU61Y","text":"so i am expecting this problem","ts":"1480589052.004562"},{"type":"message","user":"U1F1CU61Y","text":"what do you say ?","ts":"1480589062.004563"},{"type":"message","user":"U0PB67X4K","text":"<@U12AHQ3NK> -  a non-validating peer is really no more than a glorified \"wallet\" for submitting transactions to validating peers.    moving forward, we don't even have non-validating peers in the v1 architecture.  What is your goal in terms of using an NVP?","ts":"1480590976.004564"},{"type":"message","user":"U1F1CU61Y","text":"<@U0PB67X4K>  in my case i want to connect a third party system to nvp so that third party may not be able to deploy chaincode as well he has replica of that data in his local network and he can read it fastly","ts":"1480591376.004565"},{"type":"message","user":"U12AHQ3NK","text":"<@U0PB67X4K>: my goal is to connect some peers to the network and get the blockchain data. ","ts":"1480591390.004566"},{"type":"message","user":"U0PB67X4K","text":"<@U1F1CU61Y> - not going to work - the only way to query data is via chaincode and chaincode is not deployed to non-validating peers","ts":"1480591636.004567"},{"type":"message","user":"U0PB67X4K","text":"<@U12AHQ3NK> - why not just get the blockchain data from an application using the SDK?   Why does it need to be a NVP?","ts":"1480591698.004568"},{"type":"message","user":"U1F1CU61Y","text":"<@U0PB67X4K> one question from my side. Is this possible, we give  permissions to particular users so that only they can deploy chaincode","ts":"1480591748.004569"},{"type":"message","user":"U1F1CU61Y","text":"means is there any access right management available ?","ts":"1480591780.004570"},{"type":"message","user":"U0PB67X4K","text":"not in v0.6","ts":"1480591802.004571"},{"type":"message","user":"U12AHQ3NK","text":"<@U0PB67X4K>:  can I add new peers to the network dynamically in v 0.6?","ts":"1480591815.004572"},{"type":"message","user":"U1F1CU61Y","text":"then it may be security issues that if i give a peer to third party, he may deploy chaincode","ts":"1480591857.004573"},{"type":"message","user":"U1F1CU61Y","text":"and read the data written by another chaincode too ?? am i right or not ?","ts":"1480591890.004574"},{"type":"message","user":"U0PB67X4K","text":"<@U12AHQ3NK> - no - you cannot add validating peers dynamically in v0.6","edited":{"user":"U0PB67X4K","ts":"1480592145.000000"},"ts":"1480591891.004575"},{"type":"message","user":"U0PB67X4K","text":"<@U1F1CU61Y> - you can build access control into your chaincode methods themselves to prevent certain clients from invoking or querying a specific chaincode or specific functions on that chaincode","ts":"1480591962.004576"},{"type":"message","user":"U12AHQ3NK","text":"<@U0PB67X4K>: through SDK ?","ts":"1480591971.004577"},{"type":"message","user":"U1F1CU61Y","text":"<@U0PB67X4K>  yes that we can do. suppose if i have written some data with chaincode1. can we read that data with chaincode2?","ts":"1480592020.004578"},{"type":"message","user":"U0PB67X4K","text":"you can't really stop someone from deploying chaincode in fabric v0.6 without putting some type of \"proxy\" layer in between","ts":"1480592023.004579"},{"type":"message","user":"U1F1CU61Y","text":"with same key","ts":"1480592025.004580"},{"type":"message","user":"U0PB67X4K","text":"<@U1F1CU61Y> - the data itself is scoped at a chaincode level so if you restrict access to chaincode within your functions then you would not be able to invoke those functions from other chaincode unless you also had permission to access the initial chaincode","ts":"1480592128.004581"},{"type":"message","user":"U0PB67X4K","text":"<@U12AHQ3NK> -  sorry - had a type - you CANNOT dynamically add validating peers to the network in v0.6","ts":"1480592171.004583"},{"type":"message","user":"U12AHQ3NK","text":"<@U0PB67X4K>: I have a network of 5 VP's. I connected 4 peers first and then deployed a chaincode. Later I connected one more peer to the network. I noticed tht the new peer didn't sync the blocks. i am using v0.6","ts":"1480592371.004584"},{"type":"message","user":"U0PB67X4K","text":"that's the expected behavior.  there's a slight change that if you stop your original 4 peers, modify the config to say that there are 5 peers and restart that things *might* work, but v0.6 does not support dynamically adding a peer to a network","ts":"1480592574.004585"},{"type":"message","user":"U12AHQ3NK","text":"<@U0PB67X4K>:  I started initially wiht N=5 then started 4 peers initially","ts":"1480592629.004586"},{"type":"message","user":"U12AHQ3NK","text":"<@U0PB67X4K>  so the only way to add new peers is to stop the peers, change config and then restart them?","ts":"1480592740.004587"},{"type":"message","user":"U0PB67X4K","text":"hmmm - if you specified N=5 to start with, you should be able to start up the 5th peer after the fact.  But you'd have to keep running transactions for the 5th peer to notice it is behind and catch up.   As I recall, you'd probably need to generate between 10 and 20 blocks of transactions","ts":"1480592986.004588"},{"type":"message","user":"U12AHQ3NK","text":"<@U0PB67X4K>: so I should be generating 10-20 transactions into the network ?","ts":"1480593178.004589"},{"type":"message","user":"U0PB67X4K","text":"something like that - I forgot the default block size and timeout, but I think its something low like 2 transactions \/ block?","ts":"1480593652.004590"},{"type":"message","user":"U12AHQ3NK","text":"<@U0PB67X4K>:  thanks..i wil try that out ","ts":"1480593852.004591"},{"type":"message","user":"U1F1CU61Y","text":"<@U0PB67X4K> thanks for your support","ts":"1480598575.004592"},{"type":"message","user":"U1SHFS1Q9","text":"<@U0PB67X4K>, You mentioned in your earlier post that only way to query data is via chaincode and chaincode is not deployed to non-validating peers.\n\nHowever, the spec (<https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/protocol-spec.md#222-multiple-validating-peers>) says,\n\n\"Non validating peers (also known as peers) receive user transactions on behalf of users, and after some fundamental validity checks, they forward the transactions to their neighboring validating peers. Peers maintain an up-to-date copy of the blockchain, but in contradiction to validators, they do not execute transactions (a process also known as transaction validation).\u201d\n\nIf it has an upto data copy of the blockchain, we should be able to query data, right? or my understanding is wrong?","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/protocol-spec.md#222-multiple-validating-peers","text":"Read-only mirror of <https:\/\/gerrit.hyperledger.org\/r\/#\/admin\/projects\/fabric>","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/protocol-spec.md#222-multiple-validating-peers","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1480599895.004593"},{"type":"message","user":"U0UGH3X7X","text":"scrum ...","ts":"1480604416.004595"},{"text":"<@U0UGH3X7X|tuand> has started a Google+ Hangout for this channel. <https:\/\/hangouts.google.com\/hangouts\/_\/r6xhuz4wsvfxnarynsnr25zaxqe|Join Hangout>.","username":"hangouts","bot_id":"B0UKUAJ0Y","type":"message","subtype":"bot_message","ts":"1480604438.004596"},{"type":"message","user":"U0UGH3X7X","text":"<@U1KDAMDJ7>  trying to run kafka docker-compose ( from 2459 change set ) on OSX\/vagrant ... failing with `ERROR: In file '.\/docker-compose.yml' service 'version' doesn't have any configuration options. All top level keys in your docker-compose.yml must map to a dictionary of configuration options.`","ts":"1480611541.004597"},{"type":"message","user":"U1KDAMDJ7","text":"you might have an old docker-compose installed","ts":"1480611576.004598"},{"type":"message","user":"U0UGH3X7X","text":"i think it's because my docker-compose version is backlevel ?  1.5.2 , need to be at 1.6 ?","ts":"1480611578.004599"},{"type":"message","user":"U1KDAMDJ7","text":"Yes","ts":"1480611596.004600"},{"type":"message","user":"U0UGH3X7X","text":"you running inside vagrant ?","ts":"1480611603.004601"},{"type":"message","user":"U1KDAMDJ7","text":"Yes, but it should work outside also.","ts":"1480611643.004602"},{"type":"message","user":"U1KDAMDJ7","text":"<https:\/\/docs.docker.com\/docker-for-mac\/>","attachments":[{"service_name":"Docker","title":"Get started with Docker for Mac","title_link":"https:\/\/docs.docker.com\/docker-for-mac\/","text":"Getting Started","fallback":"Docker: Get started with Docker for Mac","image_url":"https:\/\/www.docker.com\/sites\/default\/files\/social\/docker-twitter-share.png","ts":1480558148,"from_url":"https:\/\/docs.docker.com\/docker-for-mac\/","image_width":625,"image_height":250,"image_bytes":49214,"service_icon":"https:\/\/docs.docker.com\/favicons\/apple-touch-icon-57x57.png","id":1}],"ts":"1480611643.004603"},{"type":"message","subtype":"file_share","text":"<@U1KDAMDJ7|sanchezl> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/sanchezl\/F38MZTF9N\/pasted_image_at_2016_12_01_12_01_pm.png|Pasted image at 2016-12-01, 12:01 PM>","file":{"id":"F38MZTF9N","created":1480611677,"timestamp":1480611677,"name":"Pasted image at 2016_12_01 12_01 PM.png","title":"Pasted image at 2016-12-01, 12:01 PM","mimetype":"image\/png","filetype":"png","pretty_type":"PNG","user":"U1KDAMDJ7","editable":false,"size":1983,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F38MZTF9N\/pasted_image_at_2016_12_01_12_01_pm.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F38MZTF9N\/download\/pasted_image_at_2016_12_01_12_01_pm.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_64":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F38MZTF9N-c2c872ae48\/pasted_image_at_2016_12_01_12_01_pm_64.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_80":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F38MZTF9N-c2c872ae48\/pasted_image_at_2016_12_01_12_01_pm_80.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F38MZTF9N-c2c872ae48\/pasted_image_at_2016_12_01_12_01_pm_360.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360_w":43,"thumb_360_h":41,"thumb_160":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F38MZTF9N-c2c872ae48\/pasted_image_at_2016_12_01_12_01_pm_160.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","image_exif_rotation":1,"original_w":43,"original_h":41,"permalink":"https:\/\/hyperledgerproject.slack.com\/files\/sanchezl\/F38MZTF9N\/pasted_image_at_2016_12_01_12_01_pm.png","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F38MZTF9N-19f5c2d8a3","channels":["C0Z4NBUN6","C27E2LGJY"],"groups":[],"ims":[],"comments_count":0},"user":"U1KDAMDJ7","upload":true,"display_as_bot":false,"username":"<@U1KDAMDJ7|sanchezl>","bot_id":null,"ts":"1480611678.004605"},{"type":"message","user":"U0UGH3X7X","text":"i'm running inside vagrant and getting the error  ....  time to rebuild my image :slightly_smiling_face:","ts":"1480611683.004606"},{"type":"message","user":"U1KDAMDJ7","text":"Do you have that icon","ts":"1480611684.004607"},{"type":"message","user":"U1KDAMDJ7","text":"ahh, yes\u2026 you\u2019ll need to pick up the updated compose","ts":"1480611703.004608"},{"type":"message","user":"U0UGH3X7X","text":"thx ! onward ...","ts":"1480611721.004609","reactions":[{"name":"slightly_smiling_face","users":["U1KDAMDJ7"],"count":1}]},{"type":"message","user":"U0PB67X4K","text":"@tuan - best to move to compose 1.8","ts":"1480612772.004610"},{"user":"U11BD9FA7","text":"<@U11BD9FA7|ynamiki> has left the channel","type":"message","subtype":"channel_leave","ts":"1480640199.004611"},{"type":"message","user":"U12AHQ3NK","text":"Hyperledger fabric v 0.6 do not synchronize block data after adding a new vp peer to the existing network ?","ts":"1480681471.004612"},{"type":"message","user":"U0PB67X4K","text":"well as mentioned before, v0.6 does not claim to support adding a new validating peer to an existing network.   I believe that you had tried to start a 4 peer network configured with N=5 and then start the 5th peer after the first 4.  In theory, if you then invoke a bunch of transactions the 5th peer *might* catch up.   I don't know that we ever tested \/ tried that scenario","ts":"1480683404.004613","reactions":[{"name":"+1","users":["U0XQ35CDD"],"count":1}]},{"type":"message","user":"U0N1D1UAE","text":"Someone told me the other day that the minimum blob size for ordering was looking like 100KB, up to 1MB. Can anyone confirm\/explain\/deny this rumor?","ts":"1480689674.004614"},{"type":"message","user":"U0PB67X4K","text":"sorry - that was an error on my part in a conversation with kostas .  the intent was to talk about the average range for the largest stuff the we've seen rather than the average size of transactions overall","ts":"1480689845.004615"},{"type":"message","user":"U0N1D1UAE","text":"Thanks Gari, that is reassuring.","ts":"1480689964.004616"},{"type":"message","user":"U0N1D1UAE","text":"To date I have only tested the ordering service with synthetic blobs. If anyone has run real workloads with endorsements and signatures I would be very interested to know the range of blob sizes that are being handled.","ts":"1480690135.004617"},{"type":"message","user":"U0XQ35CDD","text":"I would second that, esp. as we're adding cut-by-filesize block logic, and we'll need to have sensible defaults there.","ts":"1480690304.004618"},{"type":"message","user":"U0XQ35CDD","text":"I know that for <@U13TWBRBL> 's demo we had to bump the max. filesize to 10 (15?) MB though. What is that transaction that's so big?","ts":"1480690367.004619"},{"type":"message","user":"U13TWBRBL","text":"<@U0XQ35CDD> it\u2019s the chaincode deploy, not sure exactly how big but it\u2019s more than 1MB (kafka default)","ts":"1480690656.004624"},{"type":"message","user":"U1KDAMDJ7","text":"Yes, it was a deploy tx , and it was 7.3 MB","ts":"1480690671.004625"},{"type":"message","user":"U13TWBRBL","text":"it\u2019s already much smaller than v0.6 because we don\u2019t have to send the whole fabric source tree any longer","ts":"1480690681.004626"},{"type":"message","user":"U0XQ35CDD","text":"And IIRC we're doing it this way (and not just point to a Github repo and build from there, same as you'd do with a Dockerfile for instance) because we want to support private chaincodes?","ts":"1480690712.004627"},{"type":"message","user":"U13TWBRBL","text":"even then the deploy could be arbitrarily large if the chaincode has external dependencies that the fabric-ccenv base image doesn\u2019t already have","ts":"1480690744.004628"},{"type":"message","user":"U0XQ35CDD","text":"Interesting. I am not familiar with the mechanics of this at all, but my initial thought would be the same; why aren't all of these (even the dependencies) instructions that the receiving peer would parse, i.e. why isn't a deploy transaction the equivalent of a Dockerfile.","ts":"1480690836.004629"},{"type":"message","user":"U13TWBRBL","text":"that\u2019s right, don\u2019t want to make assumption about Peer\u2019s access to a devops service (aka github or any other source code repos)","ts":"1480690844.004630","reactions":[{"name":"+1","users":["U0XQ35CDD"],"count":1}]},{"type":"message","user":"U1KDAMDJ7","text":"Would it be possible to fragment a tx?","ts":"1480690872.004631"},{"type":"message","user":"U13TWBRBL","text":"i remember seeing a slideshare from a linkedin engineer about fragmenting messages on the kafka side","ts":"1480690925.004632"},{"type":"message","user":"U13TWBRBL","text":"i can dig that up","ts":"1480690946.004633"},{"type":"message","user":"U13TWBRBL","text":"after my scrums call","ts":"1480690953.004634"},{"type":"message","user":"U0PB67X4K","text":"I guess there's the fine line of trying to figure out the right defaults for these types of things, but in the end they will likely need to be dynamically configurable","ts":"1480692239.004635"},{"type":"message","user":"U0PB67X4K","text":"Now - there's really no need for these massive chaincode deploy archives.  we should really start measuring some file sizes there.","ts":"1480692319.004636"},{"type":"message","user":"U0ULK2JPP","text":"<@U0XPR4NP4> <@U0Z541B3P> <@U0XQ35CDD> a Block from orderer is per chain (all the transactions in the block belong to the chain), shouldn\u2019t the blockHeader contain the chainID ?","edited":{"user":"U0ULK2JPP","ts":"1480777878.000000"},"ts":"1480777866.004637"},{"type":"message","user":"U0XPR4NP4","text":"Since all blocks contain at least one tx, and each tx contains the chain id, we can get by without one ","ts":"1480777925.004639"},{"type":"message","user":"U0ULK2JPP","text":"sure","ts":"1480777930.004640"},{"type":"message","user":"U0ULK2JPP","text":"just checking","ts":"1480777933.004641"},{"type":"message","user":"U0ULK2JPP","text":"otherwise we\u2019ll have to invent another layer on top of block...","ts":"1480777967.004642"},{"type":"message","user":"U0XPR4NP4","text":"I'd entertain adding it, but don't have a compelling reason off the top of my head ","ts":"1480777983.004643"},{"type":"message","user":"U0XQ35CDD","text":"Yeah, do you have a specific use-case Murali?","ts":"1480778019.004644"},{"type":"message","user":"U0ULK2JPP","text":"I\u2019m basically removing the \u201cDefaultChain\u201d from chaincode framework\u2026 its a peg everything hangs on today. We need to remove it to make way for multichain","ts":"1480778097.004645"},{"type":"message","user":"U0ULK2JPP","text":"so i\u2019m now in the noopscommitter client which was hardcoding DefaultChain","ts":"1480778136.004646"},{"type":"message","user":"U0ULK2JPP","text":"I want to use the chainid in the block","ts":"1480778148.004647"},{"type":"message","user":"U0ULK2JPP","text":"I can get by with the chainide from the envelope of a TX","ts":"1480778166.004648"},{"type":"message","user":"U0ULK2JPP","text":"of each TX","ts":"1480778171.004649"},{"type":"message","user":"U0ULK2JPP","text":"but what if there\u2019s no TX in the block ?","ts":"1480778185.004650"},{"type":"message","user":"U0XQ35CDD","text":"When would that be the case?","ts":"1480778206.004651"},{"type":"message","user":"U0ULK2JPP","text":"probably invalid\u2026 but it highlights the point","ts":"1480778227.004652"},{"type":"message","user":"U0XPR4NP4","text":"The orderer will never send you a block without a tx, or I can't think of a way this would be valid ","ts":"1480778250.004653"},{"type":"message","user":"U0ULK2JPP","text":"the tx id is block wide but is embedded in each tx","ts":"1480778253.004654"},{"type":"message","user":"U0ULK2JPP","text":"ok","ts":"1480778254.004655"},{"type":"message","user":"U0XQ35CDD","text":"I guess in a BFT scenario you _could_ have an orderer that sends you a bad block, but you should be able to discard this right away.","ts":"1480778282.004656"},{"type":"message","user":"U0ULK2JPP","text":"sounds good","ts":"1480778297.004657"},{"type":"message","user":"U0XQ35CDD","text":"(Nothing will check out, no f+1 sigs, etc.)","ts":"1480778300.004658"},{"type":"message","user":"U0ULK2JPP","text":"thanks much! just checking...","ts":"1480778374.004659","reactions":[{"name":"+1","users":["U0XQ35CDD"],"count":1}]},{"type":"message","user":"U0PB67X4K","text":"hey folks - please check out <https:\/\/jira.hyperledger.org\/browse\/FAB-1255>\n\nGiven some of the oddities of how we are going to have to deal with identity and trust certificates and also that we want to make TLS a first class citizen, I thought it would make sense to create a standard \"secure GRPC server\".   Just started on it but should have basic functions working in a day or so.  I also want to add in some interceptors and metrics as well\n\nIf there are specific setting that you need to pass in (e.g. max message size, etc), please add them to the JIRA.\n\nOther option is to say this is a stupid idea :wink:","ts":"1480800756.004660"},{"type":"message","user":"U0ULK2JPP","text":"<@U0PB67X4K> before we do that :wink: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2961\/>","ts":"1480800977.004661"},{"type":"message","user":"U0ULK2JPP","text":"looking at 1255 now","ts":"1480800984.004662"},{"type":"message","user":"U0ULK2JPP","text":"I see what you are saying","ts":"1480801329.004663"},{"type":"message","user":"U0ULK2JPP","text":"I think that\u2019s a sound idea\u2026 let me get it straight\u2026 we have few servers (event, peer, orderer ) and GRPC services hanging off them, The servers are got some basic properties we could standardize upon (especially TLS handling ). Just like we have comm which handle connections with TLS etc across, we could do with a Server package ?","ts":"1480801548.004664"},{"type":"message","user":"U0PB67X4K","text":"correct - so comm would have server and client (I'm thinking to create a new client rather than modifying the current connection stuff)","ts":"1480801766.004665"},{"type":"message","user":"U0PB67X4K","text":"```\nfunc NewSecureGRPCServer(config *ServerConfig) (*grpc.Server, net.Listener, error){}\n\n\/\/Configuration information for a GRPC server\ntype ServerConfig struct {\n\t\/\/Listen address for the server specified as hostname:port\n\tAddress string\n\t\/\/Certficate presented by the server for TLS communication\n\tServerCertificatePEM []byte\n\t\/\/Key used by the server for TLS communication\n\tServerKeyPEM []byte\n\t\/\/List of certificate authorities to be used to authenticate clients if client authentication is required\n\tClientRootPEM [][]byte\n}\n```","edited":{"user":"U0PB67X4K","ts":"1480801870.000000"},"ts":"1480801848.004666"},{"type":"message","user":"U0PB67X4K","text":"and of course additional properties TBD will be added to ServerConfig","ts":"1480801901.004668"},{"type":"message","user":"U0ULK2JPP","text":"sounds fine","ts":"1480805947.000002"},{"type":"message","user":"U0ULK2JPP","text":"from a chaincode pov (client) the onlyt hing is that it needs a msg size. I\u2019ve seen for large messages between chandcode and peer, the GRPC transport may not handle \u2026 not sure what the limits are here but that would be one thing I think","ts":"1480806080.000003"},{"type":"message","user":"U0UGH3X7X","text":"scrum ...","ts":"1480950010.000004"},{"text":"<@U0UGH3X7X|tuand> has started a Google+ Hangout for this channel. <https:\/\/hangouts.google.com\/hangouts\/_\/w4fwecg6ardwlnagyjbfklgpu4e|Join Hangout>.","username":"hangouts","bot_id":"B0UKUAJ0Y","type":"message","subtype":"bot_message","ts":"1480950029.000005"},{"type":"message","user":"U0UGH3X7X","text":"working on FAB-665, FAB-666 boostrapping  of orderer  - reviewing one last time changeset <http:\/\/gerrit.hyperledger.org\/r\/2963> and then will update the genesis block create tool to create the blocks as defined","ts":"1480951468.000006"},{"type":"message","user":"U0UGH3X7X","text":"also working on FAB-701  authenticating connection btw orderer and kafka network   ...  TLS setup will be via .properties files but we will need to map forward configuration from orderer to sarama config struct    ...  one outstanding issue is how to add\/remove orderers as I haven't seen if kafka can dynamically revoke a certificate yet","ts":"1480951694.000007"},{"type":"message","user":"U1AU8DRQR","text":"<@U0UGH3X7X> <@U0Y14MWA2> <@U0XPR4NP4> about SBFT, what I will have to do:\n1) finish networked stress tests with Marko (we still need to fix a bug)\n2) remove network stress tests and sbft tests from orderer's \"short test set\" (e.g. if !Short() return : <https:\/\/golang.org\/pkg\/testing\/#Short>)\n3) rewrite sbft and app to use the common stuff","ts":"1480956024.000008"},{"type":"message","user":"U0Y14MWA2","text":"re 3) what sort of sbft rewrite this involves","ts":"1480956155.000009"},{"type":"message","user":"U0Y14MWA2","text":"?","ts":"1480956158.000010"},{"type":"message","user":"U1AU8DRQR","text":"about 1) we agreed that until censorship prevention component is implemented we simply add delays (sleep N seconds) to the tests to give nodes enough time to connect (as there were cases when the replicas were unable to connect to each other quickly enough and some requests got 'censored'\/left out) - are you OK with this?","ts":"1480956209.000011"},{"type":"message","user":"U1AU8DRQR","text":"<@U0Y14MWA2> 3) involves the usage of the common stuff <@U0XPR4NP4> introduced (e.g. common proto structures, block cutter, common deliver\/broadcast etc lot of stuff)","ts":"1480956269.000012"},{"type":"message","user":"U1AU8DRQR","text":"<@U0XPR4NP4> help me out with some details please :smile:","ts":"1480956288.000013"},{"type":"message","user":"U0Y14MWA2","text":"ok let's do that carefully :slightly_smiling_face:","ts":"1480956341.000014"},{"type":"message","user":"U0Y14MWA2","text":"in principle it is not clear that every consensus impl needs to do stuff in the same way","ts":"1480956358.000015"},{"type":"message","user":"U0Y14MWA2","text":"imagine 3rd party consensus","ts":"1480956365.000016"},{"type":"message","user":"U0XPR4NP4","text":"My suggestion would be first, to migrate from the `batch` structure used internally to the common `Block` structure, they are nearly the same, and ultimately, sbft will need to deliver `Block`s","edited":{"user":"U0XPR4NP4","ts":"1480956420.000000"},"ts":"1480956413.000017"},{"type":"message","user":"U0Y14MWA2","text":"why is this not called Batch?","ts":"1480956429.000019"},{"type":"message","user":"U0XPR4NP4","text":"Because it contains a hash chain","ts":"1480956452.000020"},{"type":"message","user":"U0XPR4NP4","text":"Or rather, because it forms one","ts":"1480956459.000021"},{"type":"message","user":"U0Y14MWA2","text":"well Batches do as well","ts":"1480956464.000022"},{"type":"message","user":"U0Y14MWA2","text":"calling it Batch would be in spirit of NCAP","ts":"1480956472.000023"},{"type":"message","user":"U0Y14MWA2","text":"Block is for Validated Ledger","ts":"1480956479.000024"},{"type":"message","user":"U0XPR4NP4","text":"But for implementation, if we wish to have re-use of components, we must have a common data type","ts":"1480956509.000025"},{"type":"message","user":"U0Y14MWA2","text":"agree - I am talking about the name :slightly_smiling_face:","ts":"1480956519.000026"},{"type":"message","user":"U0XPR4NP4","text":"We cannot convert from a `Batch` datatype to a `Block` datatype without breaking the hash chain (unless they are 100% identical, which at that point, having two different data structures seems silly)","ts":"1480956547.000027"},{"type":"message","user":"U0Y14MWA2","text":"let me rephrase","ts":"1480956558.000028"},{"type":"message","user":"U0Y14MWA2","text":"I propose to refactor Block into Batch","ts":"1480956565.000029"},{"type":"message","user":"U0Y14MWA2","text":"rename","ts":"1480956573.000030"},{"type":"message","user":"U0Y14MWA2","text":"as for current Batch and Block compatibility I will take a look","ts":"1480956587.000031"},{"type":"message","user":"U0XPR4NP4","text":"But this is all an internal implementation detail? If you wish, we can `type batch cb.Block`.  I think I must be missing your point","ts":"1480956644.000032"},{"type":"message","user":"U0Y14MWA2","text":"what I am saying is that the thingy should be *called* Batch","ts":"1480956666.000033"},{"type":"message","user":"U0Y14MWA2","text":"not Block","ts":"1480956669.000034"},{"type":"message","user":"U0Y14MWA2","text":"to be in spirit of the NCAP","ts":"1480956677.000035"},{"type":"message","user":"U0XPR4NP4","text":"But then we will be using a `Batch` datastructure to store blocks.  And the only benefit is for people who actually inspect the code (what we call what a user thinks of as a 'batch' internally should have no impact on that user).","ts":"1480956778.000036"},{"type":"message","user":"U0Y14MWA2","text":"no - we use it to store batches :slightly_smiling_face:","ts":"1480956791.000037"},{"type":"message","user":"U0Y14MWA2","text":"raw ledger has batches","ts":"1480956797.000038"},{"type":"message","user":"U0Y14MWA2","text":"validated ledger has blocks","ts":"1480956801.000039"},{"type":"message","user":"U0Y14MWA2","text":"I can also do the renaming in the NCAP","ts":"1480956810.000040"},{"type":"message","user":"U0Y14MWA2","text":"but it may be rooted already in people's brains this way","ts":"1480956828.000041"},{"type":"message","user":"U0Y14MWA2","text":"it is in mine :slightly_smiling_face:","ts":"1480956832.000042"},{"type":"message","user":"U0XPR4NP4","text":"I guess I would argue that that's a clarification we made to make things clear in the NCAP to the high level user, but in real implementation, we have blocks on both sides.  It was just confusing to a user to call them both blocks.","ts":"1480956832.000043"},{"type":"message","user":"U0XPR4NP4","text":"Fundamentally, at the orderer side, we _are_ building a blockchain.","ts":"1480956847.000044"},{"type":"message","user":"U0XPR4NP4","text":"All transactions in the blockchain will be valid, per the blockchain rules.","ts":"1480956858.000045"},{"type":"message","user":"U0Y14MWA2","text":"anyway - naming needs to be in sync","ts":"1480956884.000046"},{"type":"message","user":"U0Y14MWA2","text":"one way or another","ts":"1480956888.000047"},{"type":"message","user":"U0XPR4NP4","text":"It just so happens that the peer side is going to take this perfectly valid orderer blockchain, and apply a different set of rules to it, to form another, perfectly valid blockchain.","ts":"1480956889.000048"},{"type":"message","user":"U0Y14MWA2","text":"either renaming code","ts":"1480956892.000049"},{"type":"message","user":"U0Y14MWA2","text":"or renaming ncap","ts":"1480956896.000050"},{"type":"message","user":"U0XPR4NP4","text":"If we rename it in code... then the naming on the blockchain side is right, and then on the peer side it is wrong.","ts":"1480956930.000051"},{"type":"message","user":"U0XQ35CDD","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/697\/> (discussion starting from 08-26 16:01 is a deja-vu of this)","edited":{"user":"U0XQ35CDD","ts":"1480957035.000000"},"ts":"1480956943.000052"},{"type":"message","user":"U0Y14MWA2","text":"no its not - in NCAP this is Batch on both sides","ts":"1480956973.000053"},{"type":"message","user":"U0Y14MWA2","text":"anyway","ts":"1480956983.000054"},{"type":"message","user":"U0Y14MWA2","text":"we are wasting too much slack for this","ts":"1480956990.000055"},{"type":"message","user":"U0Y14MWA2","text":"Another option is to rename NCAP to Blocks and VBlocks ","ts":"1480957821.000057"},{"type":"message","user":"U0Y14MWA2","text":"I do not really care","ts":"1480957830.000058"},{"type":"message","user":"U0Y14MWA2","text":"Except that naming must be consistent","ts":"1480957839.000059"},{"type":"message","user":"U1AU8DRQR","text":"yeah the code and the document should have the same names, that is true","ts":"1480958012.000060"},{"type":"message","user":"U1KFCPFQA","text":"<@U0Y14MWA2> v1 won\u2019t even have validated ledger, the committer will have a raw ledger that includes an indicator of which trans are valid or not.  I don\u2019t think we\u2019d want to have a v1 without blocks :slightly_smiling_face: , therefore I\u2019d agree NCAP should be updated to call them Blocks and VBlocks.","ts":"1480959043.000061","reactions":[{"name":"+1","users":["U0XPR4NP4"],"count":1}]},{"user":"U2NG5AX0A","text":"<@U2NG5AX0A|klorenz> has joined the channel","type":"message","subtype":"channel_join","ts":"1480968005.000062"},{"type":"message","user":"U0XQ35CDD","text":"A heads up that I'll be changing the test chain ID string (currently set to `**TEST_CHAIN_ID**`) as asterisks are not allowed in topic names in Kafka: <https:\/\/github.com\/apache\/kafka\/blob\/trunk\/core\/src\/main\/scala\/kafka\/common\/Topic.scala#L29>","attachments":[{"service_name":"GitHub","title":"apache\/kafka","title_link":"https:\/\/github.com\/apache\/kafka\/blob\/trunk\/core\/src\/main\/scala\/kafka\/common\/Topic.scala#L29","text":"kafka - Mirror of Apache Kafka","fallback":"GitHub: apache\/kafka","thumb_url":"https:\/\/avatars1.githubusercontent.com\/u\/47359?v=3&s=400","from_url":"https:\/\/github.com\/apache\/kafka\/blob\/trunk\/core\/src\/main\/scala\/kafka\/common\/Topic.scala#L29","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1480980623.000063","reactions":[{"name":"+1","users":["U0ULK2JPP"],"count":1}]},{"type":"message","user":"U0XQ35CDD","text":"This has implications on the allowed chain IDs in general.","ts":"1480980687.000065"},{"type":"message","user":"U0XQ35CDD","text":"Do we provide a function that generates acceptable allowed chain IDs and check the given chain ID during the config-tx filtering in ingress?","edited":{"user":"U0XQ35CDD","ts":"1480980770.000000"},"ts":"1480980722.000066"},{"type":"message","user":"U0ULK2JPP","text":"gee thanks :slightly_smiling_face:","ts":"1480980793.000068"},{"type":"message","user":"U0ULK2JPP","text":"just kidding","ts":"1480980795.000069"},{"type":"message","user":"U0XQ35CDD","text":"Do we let all characters be fairplay, then strip out the invalid ones if the backing consenter is Kafka?","ts":"1480980829.000070"},{"type":"message","user":"U0ULK2JPP","text":"can you do me a favor ? \u2026.also change in core\/util ?","ts":"1480980831.000071"},{"type":"message","user":"U0XQ35CDD","text":"(<@U0ULK2JPP>: Sure, will do.)","ts":"1480980840.000072"},{"type":"message","user":"U0ULK2JPP","text":"that should take care of CLI e-2-e","ts":"1480980854.000073"},{"type":"message","user":"U0ULK2JPP","text":"thanks, Kostas","ts":"1480980863.000074","reactions":[{"name":"+1","users":["U0XQ35CDD"],"count":1}]},{"type":"message","user":"U0XQ35CDD","text":"The downside of the first option is that we're tied too much to the way Kafka does things. It also won't play nicely if we want the chain ID to be the hash of certain data as <@U1BC5A0F9> had suggested at one point.","ts":"1480980911.000075"},{"type":"message","user":"U0XQ35CDD","text":"The downside of the second option is that we're losing the one-to-one mapping between the original chain ID and the one that Kafka holds. May be insignificant (and nothing that can't be taken care of with persisting some metadata), but doesn't quite feel right.","ts":"1480980970.000076"},{"type":"message","user":"U0ULK2JPP","text":"what do you think of keep it simple and do \u201cstandard\u201d chars for chainID across the board ?","ts":"1480980994.000077"},{"type":"message","user":"U0XQ35CDD","text":"So that's closer to the first option right?","ts":"1480981030.000078"},{"type":"message","user":"U0ULK2JPP","text":"`Do we provide a function that generates acceptable allowed chain IDs and check the given chain ID during the config-tx filtering in ingress?` - basically saying perhaps we enforce a \u201cvalid chain ID\u201d at fabric level ?","ts":"1480981070.000079"},{"type":"message","user":"U0XQ35CDD","text":"Yes.","ts":"1480981080.000080"},{"type":"message","user":"U0ULK2JPP","text":"I think if we do that,  we at least standardize upfront and keep it sane\/simple","ts":"1480981112.000081","reactions":[{"name":"100","users":["U0XQ35CDD"],"count":1}]},{"type":"message","user":"U0XQ35CDD","text":"To me that works. I do remember reading in a slide that we wanted the chain ID to be the hash digest of certain data (Elli's suggestion, or I may be wrong), but I don't know if there's a special reason behind this. If there's not, we're good.","ts":"1480981122.000082"},{"type":"message","user":"U0ULK2JPP","text":"right, I don\u2019t know all the implications of that\u2026 however if we allow arbitrary bytes, we run into the problem of needing to map to various underlying technologies","ts":"1480981168.000083"},{"type":"message","user":"U0XQ35CDD","text":"We could always do what I used to do when chainID was a byte slice.","ts":"1480981183.000084"},{"type":"message","user":"U0XQ35CDD","text":"I would hex-encode it. But the length limit still applies. (249 characters max.)","edited":{"user":"U0XQ35CDD","ts":"1480981937.000000"},"ts":"1480981195.000085"},{"type":"message","user":"U0XQ35CDD","text":"All safe characters :simple_smile:","ts":"1480981202.000086"},{"type":"message","user":"U0ULK2JPP","text":"right. worst cast we could do that","ts":"1480981216.000087"},{"type":"message","user":"U0XQ35CDD","text":"In fact, I'll do that for now, and wait until we reach a \u2014wait for it\u2014 consensus before I change the test chain ID.","ts":"1480981248.000088"},{"type":"message","user":"U0ULK2JPP","text":"I like it\u2026 let the mapping be handled at the higher levels , in-your-face, rather than burying deep","ts":"1480981256.000089"},{"type":"message","user":"U0ULK2JPP","text":"for the test chainID , see no harm in moving to sane chars","ts":"1480981283.000090"},{"type":"message","user":"U0ULK2JPP","text":"at least will unblock you","ts":"1480981315.000091"},{"type":"message","user":"U0XQ35CDD","text":"I'm good either way. At least now that I know the issue, I can work around it. Thanks Murali.","ts":"1480981350.000092"},{"type":"message","user":"U0ULK2JPP","text":"thank you!","ts":"1480981423.000093"},{"type":"message","user":"U1BC5A0F9","text":"Hi, <@U0XQ35CDD>, <@U0ULK2JPP>; correct there was a thought of having chainid as the hash of the genesis config content (assuming that it is equipped with a nonce or sequence number of requested chains per participant). This just had the advantage, that it could be pre-computed by the application that submits the config block, that could henceforth bind a chain to its configuration data. Proper encoding would avoid the use of non-acceptable chars.","ts":"1481011497.000095"},{"type":"message","user":"U1BC5A0F9","text":"But it is true that it is also not the friendliest of identifiers. So a user-friendly name may nevertheless be needed :slightly_smiling_face: Up to you.","ts":"1481011540.000096"},{"type":"message","user":"U0ZR63HLK","text":"Hi <@U0UGH3X7X>, what happened with <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2605\/>? Are you still working on it?","ts":"1481012804.000097"},{"type":"message","user":"U0UGH3X7X","text":"hi <@U0ZR63HLK>, i'm redoing the genesis block create tool  and  2605 as well  ... anything you need me to do there ?","ts":"1481032068.000098"},{"type":"message","user":"U0ULK2JPP","text":"<@U1BC5A0F9> chain ID is going to be in every proposal, every transaction\u2026 would the length be any concern ?","ts":"1481032995.000099"},{"type":"message","user":"U1BC5A0F9","text":"Hi <@U0ULK2JPP>: hm,  hash output can be 128\/256 bits. Do you consider that be too long?","ts":"1481033540.000100"},{"type":"message","user":"U0ULK2JPP","text":"not sure\u2026 just asking, that\u2019s all","ts":"1481033559.000101"},{"type":"message","user":"U1BC5A0F9","text":"<@U0UGH3X7X>, just pushed a cleaner version of the protos\/golang schemas for config in a new changeset. <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3015\/>","ts":"1481033577.000102"},{"type":"message","user":"U1BC5A0F9","text":"Just fyi :slightly_smiling_face:","ts":"1481033581.000103","reactions":[{"name":"innocent","users":["U0UGH3X7X"],"count":1}]},{"type":"message","user":"U0ULK2JPP","text":"I wouldn;t say its long at all but does depend upon the average size","ts":"1481033584.000104"},{"type":"message","user":"U0UGH3X7X","text":"thanks elli !","ts":"1481033625.000105"},{"type":"message","user":"U0UGH3X7X","text":"<@U1BC5A0F9> <@U0ZR63HLK> <@U0XPR4NP4>   do you want to put  ChainInitConfig inside one configurationItem ?  or have separate configurationItems for MSPManager, gossipAnchors etc ... ? probably easier to treat it as one big configurationItem ?","ts":"1481034601.000106"},{"type":"message","user":"U0XPR4NP4","text":"I thought we had decided on individual config items per MSP","ts":"1481034643.000107"},{"type":"message","user":"U1BC5A0F9","text":"Ok, so it would be","ts":"1481034676.000108"},{"type":"message","user":"U1BC5A0F9","text":"- one config item per MPS","ts":"1481034691.000109"},{"type":"message","user":"U1BC5A0F9","text":"(including the entire config of that msp: what is described in the schema as MSPConfig)","ts":"1481034715.000110"},{"type":"message","user":"U1BC5A0F9","text":"- one config item for chain configuration including: readers, writers, admins, and available MSPs?","ts":"1481034748.000111"},{"type":"message","user":"U0XPR4NP4","text":"That seems too coarse to me","edited":{"user":"U0XPR4NP4","ts":"1481034770.000000"},"ts":"1481034762.000112"},{"type":"message","user":"U1BC5A0F9","text":"But for the beginning it may be fine","ts":"1481034770.000114"},{"type":"message","user":"U1BC5A0F9","text":"since we only have one admin","ts":"1481034775.000115"},{"type":"message","user":"U1BC5A0F9","text":"or one admin list","ts":"1481034780.000116"},{"type":"message","user":"U0XPR4NP4","text":"I was about to comment on the changeset, but I think we should take this much more incrementally","ts":"1481034789.000117"},{"type":"message","user":"U0XPR4NP4","text":"Let's start simply by defining the MSPs, and a policy for who is allowed to `Broadcast`, I assume this is equivalent to writers?","ts":"1481034830.000118"},{"type":"message","user":"U1BC5A0F9","text":"Correct.","ts":"1481034845.000119"},{"type":"message","user":"U1BC5A0F9","text":"But why would we need to define a policy  if this is a hardcoded one?","ts":"1481034860.000120"},{"type":"message","user":"U0XPR4NP4","text":"I still don't understand what it means for the policy to be hardcoded","ts":"1481034890.000121"},{"type":"message","user":"U1BC5A0F9","text":"That is if we say whenever one is to check if X has permission to broadcast check that list.","ts":"1481034896.000122"},{"type":"message","user":"U0XPR4NP4","text":"We can have the tool automatically generate this policy, but if we don't have to define it statically in the code, I don't think we should","ts":"1481034914.000123"},{"type":"message","user":"U1BC5A0F9","text":"So if you assume that you have a policy t out of N identities do X","ts":"1481034931.000124"},{"type":"message","user":"U1BC5A0F9","text":"then there is a part of the policy that can be hardcoded, and that is that it is always 1 out of N","ts":"1481034954.000125"},{"type":"message","user":"U1BC5A0F9","text":"(for example)","ts":"1481034959.000126"},{"type":"message","user":"U1BC5A0F9","text":"or always N out of N","ts":"1481034962.000127"},{"type":"message","user":"U1BC5A0F9","text":"(AND case)","ts":"1481034968.000128"},{"type":"message","user":"U1BC5A0F9","text":"then the part of the policy that you can modify is only the list of certificates","ts":"1481034986.000129"},{"type":"message","user":"U1BC5A0F9","text":"(that would implicitly define N)","ts":"1481034994.000130"},{"type":"message","user":"U0XPR4NP4","text":"But you always have to specify who the `N` are.  We don't have to expose the fact that the tool also generates a `1 out of` or an `N out of`, but in implementation, it's much easier to have a single case than two.","edited":{"user":"U0XPR4NP4","ts":"1481035119.000000"},"ts":"1481035101.000131"},{"type":"message","user":"U1BC5A0F9","text":"Correct","ts":"1481035141.000133"},{"type":"message","user":"U1BC5A0F9","text":"And that is part of the MSP config.","ts":"1481035151.000134"},{"type":"message","user":"U1BC5A0F9","text":"(under  rootCAs)","ts":"1481035155.000135"},{"type":"message","user":"U0ZR63HLK","text":"Hi <@U0UGH3X7X>, I was just interested on the status of the change-set because it is a good starting point to include the MSP as soon as it is ready.","edited":{"user":"U0ZR63HLK","ts":"1481035296.000000"},"ts":"1481035157.000136"},{"type":"message","user":"U0UGH3X7X","text":"cool <@U0ZR63HLK> ! I shall ping you in about 8 hours with new news :slightly_smiling_face:","ts":"1481035221.000137"},{"type":"message","user":"U0XPR4NP4","text":"I just feel like we are trying to tackle too much here.  What is the minimum set that is required to instantiate an MSP (manager?) and validate a signature against that MSP?  We can even ignore policies for the moment.","ts":"1481035269.000138"},{"type":"message","user":"U0ZR63HLK","text":"great :slightly_smiling_face:","ts":"1481035278.000139"},{"type":"message","user":"U1BC5A0F9","text":"Correct. But RootCAs are needed  for the validation of certificates. <@U26T99AQ4> is already working on that.","ts":"1481035351.000141"},{"type":"message","user":"U1BC5A0F9","text":"For the admin case\/reconfiguration agreed,that this can wait.","ts":"1481035388.000142"},{"type":"message","user":"U26T99AQ4","text":"<@U0XPR4NP4> yeah, I'll try to have a change-set for us to stare at later today","ts":"1481035414.000143"},{"type":"message","user":"U0ZR63HLK","text":"<@U0XPR4NP4> we are already going in the direction of minimalism :slightly_smiling_face:","ts":"1481035549.000144"},{"type":"message","user":"U1BC5A0F9","text":"+1","ts":"1481035573.000145"},{"type":"message","user":"U0XPR4NP4","text":"<@U26T99AQ4> Can you point me to the data structure you will need the orderer to feed you? There is <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3015\/>, but it contains a lot of structures, is it `MSPDesc`?","ts":"1481035605.000146"},{"type":"message","user":"U0XPR4NP4","text":"And is there a good sample which provides real certs etc. that we can use in unit tests?","ts":"1481035635.000147"},{"type":"message","user":"U26T99AQ4","text":"I've taken <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3015\/1\/config-schemas\/chain-genesis-config-schema.go> and made some small changes","ts":"1481035780.000148"},{"type":"message","user":"U26T99AQ4","text":"but <@U1BC5A0F9> should review them once more","ts":"1481035790.000149"},{"type":"message","user":"U0UGH3X7X","text":"so ignoring policies for a bit ,  for chainInitConfig, i think then we want separate configurationItems for MSPManager(including readers\/writers\/admin) , OrderingClientConfig, OrderingServerConfig, GossipAnchors ?","ts":"1481035795.000150"},{"type":"message","user":"U26T99AQ4","text":"and yes, in the change set I'll produce a sample config file that will allow a proper local MSP to be created","ts":"1481035817.000151"},{"type":"message","user":"U26T99AQ4","text":"I have half a mind to also write a small sample program to generate those json files from a cert, a CA cert and a keypair","ts":"1481035857.000152"},{"type":"message","user":"U26T99AQ4","text":"that should be helpful for <@U0UGH3X7X> I guess","ts":"1481035874.000153","reactions":[{"name":"+1","users":["U0UGH3X7X"],"count":1}]},{"type":"message","user":"U0XPR4NP4","text":"<@U1BC5A0F9> I see there is the notion of an `MSPGroup`, is this what we are settling on for our first class identity citizen? So policies should be written against `MSPGroup`s (supplied as the identity bytes to the signature validation)?","ts":"1481036058.000154"},{"type":"message","user":"U1BC5A0F9","text":"<@U26T99AQ4>: i already have test files for that.","ts":"1481036105.000155"},{"type":"message","user":"U1BC5A0F9","text":"that is code, that can be used on that end. I just removed them from the changeset to avoid confusion.","ts":"1481036150.000156"},{"type":"message","user":"U26T99AQ4","text":"awesome! That'll save me some time! :slightly_smiling_face: Do they already read certs\/keys files in pem format from command line?","ts":"1481036219.000157"},{"type":"message","user":"U0ZR63HLK","text":"if parsing methods are needed, the crypto\/primitives packages has many :slightly_smiling_face:","ts":"1481036290.000158"},{"type":"message","user":"U1BC5A0F9","text":"No, they assume you have some string version of the certs, and creates a sample config file with these...","ts":"1481036342.000159"},{"type":"message","user":"U26T99AQ4","text":"super","ts":"1481036342.000160"},{"type":"message","user":"U26T99AQ4","text":"ah ok, so I'll write that part then","ts":"1481036353.000161"},{"type":"message","user":"U26T99AQ4","text":"shouldn't be too much work anyway","ts":"1481036362.000162"},{"type":"message","user":"U0XPR4NP4","text":"<@U26T99AQ4> You said you've taken  <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3015\/1\/config-schemas\/chain-genesis-config-schema.go> and made some changes, but surely you don't need all of those structures, only some subset of them?","edited":{"user":"U0XPR4NP4","ts":"1481036431.000000"},"ts":"1481036374.000163"},{"type":"message","user":"U1BC5A0F9","text":"Instantiates the objects and put them together into that json config.","ts":"1481036375.000164"},{"type":"message","user":"U1BC5A0F9","text":"Hm, it is actually this one for the local setup","ts":"1481036437.000167"},{"type":"message","user":"U1BC5A0F9","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3015\/1\/config-schemas\/node-init-config-schema.go>","ts":"1481036438.000168"},{"type":"message","user":"U1BC5A0F9","text":"Used for orderers and\/or peers. Indeed a small subset of the previous one.","ts":"1481036468.000169"},{"type":"message","user":"U26T99AQ4","text":"<@U0XPR4NP4> this is still WIP, but the peer config schema looks a bit like this\n```\ntype PeerLocalConfig struct {\n\tLocalMSP *MSPManagerConfig `json:\"msp-config\"`\n\tBCCSP    *BCCSPConfig `json:\"bccsp-config\"`\n}\n\n\ntype MSPManagerConfig struct {\n\tName    string `json:\"name\"`\n\tMspList []*MSPConfig `json:\"msps\"`\n}\n\ntype MSPConfig struct {\n\tType            ProviderType `json:\"type\"`\n\tConfig          []byte `json:\"config\"`\n}\n\ntype FabricMSPConfig struct {\n\tName            string `json:\"id\"`\n\tRootCerts       [][]byte `json:\"rootcas\"`\n\tAdmins          [][]byte `json:\"admins\"`\n\tRevocationList  [][]byte `json:\"revoked-ids,omitempty\"`\n\tSigningIdentity *SigningIdentityInfo `json:\"signer,omitempty\"`\n}\n\ntype SigningIdentityInfo struct {\n\tPublicSigner []byte `json:\"pub\"`\n\tPrivateSigner *KeyInfo `json:\"priv\"`\n}\n\ntype KeyInfo struct {\n\tKeyIdentifier string `json:\"key-id\"`\n\tKeyMaterial []byte `json:\"key-mat\"`\n}\n\ntype BCCSPConfig struct {\n\tName string `json:\"name\"`\n\tLocation string `json:\"location\"`\n}\n```","ts":"1481036513.000170"},{"type":"message","user":"U26T99AQ4","text":"(I've removed comments for the sake of brevity, they are of course still in the code)","ts":"1481036533.000171"},{"type":"message","user":"U1BC5A0F9","text":"Actually not","ts":"1481036551.000172"},{"type":"message","user":"U1BC5A0F9","text":"the signingidentity is part of the MSPConfig","ts":"1481036559.000173"},{"type":"message","user":"U1BC5A0F9","text":"actually not","ts":"1481036565.000174"},{"type":"message","user":"U1BC5A0F9","text":"it isnot the latest, and FabricMSPConfig does not have any signing identity","ts":"1481036595.000175"},{"type":"message","user":"U0XPR4NP4","text":"The `MSPManager` or whatever bit of code that will do the signature validation has what signature for its constructor? Or how do these structures get put into the MSP?","ts":"1481036614.000176"},{"type":"message","user":"U26T99AQ4","text":"<@U0XPR4NP4> <@U1BC5A0F9> please note that this is WIP and I'll add you all as reviewers and we can and will change things; I just went with this schema for now *only* in order to have some code out","ts":"1481036680.000177"},{"type":"message","user":"U26T99AQ4","text":"&gt; The `MSPManager` or whatever bit of code that will do the signature validation has what signature for its constructor? Or how do these structures get put into the MSP?\nnot sure I follow...","ts":"1481036703.000178"},{"type":"message","user":"U0XPR4NP4","text":"<@U26T99AQ4> I see a lot of structure definitions.  But for example, say, given a slice of `MSPConfig`, I take it, and invoke `NewMSPManager(configSlice)` and I get back an instance of `MSPManager` which I can use to validate signatures.","edited":{"user":"U0XPR4NP4","ts":"1481036855.000000"},"ts":"1481036784.000179"},{"type":"message","user":"U0XPR4NP4","text":"(Obviously this is a hypothetical flow, but I'm looking for what the real one is)","ts":"1481036798.000180"},{"type":"message","user":"U0ULK2JPP","text":"(no hurry <@U26T99AQ4> \u2026 don\u2019t want to interrupt the flow\u2026 but when you get to it `RevocationList  [][]byte` in `FabricMSPConfig` \u2026 that\u2019s not a static one time thing is it ?  if CRLs are going to be sent out periodically do we need a separate \u201cupdate\u201d structure for that ?)","edited":{"user":"U0ULK2JPP","ts":"1481036879.000000"},"ts":"1481036855.000181"},{"type":"message","user":"U26T99AQ4","text":"<@U0XPR4NP4> yes, the code comes with some factories for MSP managers","ts":"1481036956.000184"},{"type":"message","user":"U26T99AQ4","text":"there is a singleton for the \"local\" msp, and then a factory to get a manager for a given chain","ts":"1481036979.000185"},{"type":"message","user":"U26T99AQ4","text":"<@U1BC5A0F9> <@U0XPR4NP4> we should work together to define the exact arguments to those factories","ts":"1481037014.000186"},{"type":"message","user":"U0XPR4NP4","text":"We should be able to do signature validation without the 'local' msp, no?","ts":"1481037037.000187"},{"type":"message","user":"U1BC5A0F9","text":"nope","ts":"1481037076.000188"},{"type":"message","user":"U26T99AQ4","text":"that's tricky.. the local msp acts on static information that never changes (its config comes from a config file after all)","ts":"1481037077.000189"},{"type":"message","user":"U26T99AQ4","text":"so I think the local msp should either never be used to validate signatures, or only be used at chain creation\/join time if needed (but <@U1BC5A0F9> yesterday told me not even this is required)","edited":{"user":"U26T99AQ4","ts":"1481037126.000000"},"ts":"1481037114.000190"},{"type":"message","user":"U0XPR4NP4","text":"I seem to recall that it was expressed on a call, but the local MSP and 'chain MSP's (for lack of a better term) seem like very different beasts","ts":"1481037189.000192"},{"type":"message","user":"U0ZR63HLK","text":"<@U26T99AQ4>, I also need the factories at the orderers :slightly_smiling_face:","ts":"1481037203.000193"},{"type":"message","user":"U26T99AQ4","text":"&gt; I seem to recall that it was expressed on a call, but the local MSP and 'chain MSP's (for lack of a better term) seem like very different beasts\nthe only difference I understand is that the local MSP can dispense signing identities whereas chain MSPs can't and won't","ts":"1481037449.000194"},{"type":"message","user":"U0XPR4NP4","text":"My assumption is that we instantiate an MSP manager per chain.  Then, on chain reconfiguration (or genesis) we're going to either feed a set of 'updated MSP definitions' to the manager, or, we simply instantiate a new one by re-invoking the constructor with this set.  Does this sound reasonable? Or am I missing something?","ts":"1481037471.000195"},{"type":"message","user":"U26T99AQ4","text":"but one can very well use the same interfaces and config schema, using `omitempty`","ts":"1481037476.000196"},{"type":"message","user":"U26T99AQ4","text":"&gt; My assumption is that we instantiate an MSP manager per chain.  Then, on chain reconfiguration (or genesis) we're going to either feed a set of 'updated MSP definitions' to the manager, or, we simply instantiate a new one by re-invoking the constructor with this set.  Does this sound reasonable? Or am I missing something?\nIt sounds very reasonable","ts":"1481037495.000197"},{"type":"message","user":"U26T99AQ4","text":"the manager *for a chain* is created once, setup once and refreshed any number of times","edited":{"user":"U26T99AQ4","ts":"1481037576.000000"},"ts":"1481037514.000198"},{"type":"message","user":"U1BC5A0F9","text":"<@U0XPR4NP4>: localMSP or signerMSP is indeed only instantiate to offer the peer signing abilities. (we discussed this in the call)","ts":"1481037554.000199"},{"type":"message","user":"U1BC5A0F9","text":"MSP description in the chain had more the meaning of a verifierMSP used to verify signatures coming from tx\/proposal creators.","ts":"1481037590.000201"},{"type":"message","user":"U1BC5A0F9","text":"But in reality, as <@U26T99AQ4>, and <@U0UGH3X7X> pointed out in the respective changeset one could have a configuration structure that includes all fields","ts":"1481037620.000202"},{"type":"message","user":"U1BC5A0F9","text":"tha tis signingMSP = verifierMSPconfig + singing identity","ts":"1481037651.000203"},{"type":"message","user":"U0XPR4NP4","text":"<@U26T99AQ4> Okay.  So, for other pieces of config, we already have a `configtx.Manager` which will essentially call `Begin`, then for as many times as there are config items of a given type call `Propose(item) error` and eventually call `Rollback` or `Commit`.  So, I imagine we have a set of `MSPConfig`s, which we pass  through this process to handle the manager updates.","ts":"1481037670.000204"},{"type":"message","user":"U1BC5A0F9","text":"and for verifiers have an empty signing identity.","ts":"1481037670.000205"},{"type":"message","user":"U26T99AQ4","text":"&gt; <@U26T99AQ4> Okay.  So, for other pieces of config, we already have a `configtx.Manager` which will essentially call `Begin`, then for as many times as there are config items of a given type call `Propose(item) error` and eventually call `Rollback` or `Commit`.  So, I imagine we have a set of `MSPConfig`s, which we pass  through this process to handle the manager updates.\nThis aspect isn't 100% clear to me yet. I discussed it with <@U1BC5A0F9> the other day and iirc, we could have 2 types of `MSPConfig`s items that you could pass to mspmanager.refresh(): \n - a whole new config that wipes out the old one\n - an item that just adds a cert to a revocation list","ts":"1481037797.000206"},{"type":"message","user":"U26T99AQ4","text":"it may be more complex than this though, and <@U1BC5A0F9> surely knows more","ts":"1481037813.000207"},{"type":"message","user":"U1BC5A0F9","text":"actually, i do not think we discussed mspmanager config","ts":"1481037894.000208"},{"type":"message","user":"U1BC5A0F9","text":"We discussed individual msp config.","edited":{"user":"U1BC5A0F9","ts":"1481037931.000000"},"ts":"1481037902.000209"},{"type":"message","user":"U0XPR4NP4","text":"Per the structures, I'm not seeing why we really need an MSP manager config.  I think all I see there is a name? And I'm not sure why it needs one?","ts":"1481037930.000212"},{"type":"message","user":"U1BC5A0F9","text":"aha, you only need an msplist indeed.","ts":"1481037953.000214"},{"type":"message","user":"U1BC5A0F9","text":"this is  just to identity config info associated to your msp-manager, that could later be extended with a separate admin.","ts":"1481037986.000215"},{"type":"message","user":"U1BC5A0F9","text":"But now you are right. We could have only the msplist...","ts":"1481038002.000216"},{"type":"message","user":"U1BC5A0F9","text":"But, then for each msp in the list, is the internals of thatMSPthat know how to handle\/manage\/evaluate reconfiguration requests.","ts":"1481038034.000217"},{"type":"message","user":"U0XPR4NP4","text":"I would like that very much because it would simplify things significantly for the implementation","ts":"1481038042.000218"},{"type":"message","user":"U1BC5A0F9","text":"+1","ts":"1481038074.000219"},{"type":"message","user":"U0UGH3X7X","text":"so we should have  configurationItems  for msplist,  ordererClientConfig, ordererServerConfig, gossipAnchorList, readers, writers, admins ?","ts":"1481038245.000220"},{"type":"message","user":"U0XPR4NP4","text":"<@U0UGH3X7X> Possibly? I'm not ready to call it until we actually have concrete implementations for all of it.  For instance, there is config already defined in our static bootstrapper stuff which is not enumerated in 3015.  I think we need to take it one item at a time","ts":"1481038380.000221"},{"type":"message","user":"U0UGH3X7X","text":"ok, I'll start with a genesis block that contains just one configurationItem for the msplist and we can go from there","ts":"1481038513.000222"},{"type":"message","user":"U0XPR4NP4","text":"Well, the MSP list should have one config item per MSP","ts":"1481038534.000223"},{"type":"message","user":"U0UGH3X7X","text":"then <@U0ZR63HLK> and <@U26T99AQ4> can connect their code","ts":"1481038541.000224"},{"type":"message","user":"U0XPR4NP4","text":"And implicitly, all the MSPs defined would form the list","ts":"1481038544.000225"},{"type":"message","user":"U0UGH3X7X","text":"sure ...  so genesis block will have n configurationItems, one per MSPDesc","ts":"1481038597.000226"},{"type":"message","user":"U0XPR4NP4","text":"Right","ts":"1481038606.000227"},{"type":"message","user":"U0XPR4NP4","text":"I can quick push a changeset which steals the `MSPDesc` proto message that we can both base our work off of","edited":{"user":"U0XPR4NP4","ts":"1481038667.000000"},"ts":"1481038641.000228","reactions":[{"name":"+1","users":["U0UGH3X7X"],"count":1}]},{"type":"message","user":"U0UGH3X7X","text":"configItem.Value = marshalled MSPDesc,  key=? type=?","edited":{"user":"U0UGH3X7X","ts":"1481038674.000000"},"ts":"1481038652.000229"},{"type":"message","user":"U0XPR4NP4","text":"key is a good question, I'd assume something ripped out of the MSPDesc, like the org name?  I'll define a new Type called `MSP` we can use","ts":"1481038710.000232"},{"type":"message","user":"U26T99AQ4","text":"<@U0UGH3X7X> which schema will you use to represent the MSP config?","ts":"1481038755.000233"},{"type":"message","subtype":"file_share","text":"<@U0UGH3X7X|tuand> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/tuand\/F3BAKGJTF\/-.php|Untitled> and commented: <@U26T99AQ4> MSPDesc as defined in 3015","file":{"id":"F3BAKGJTF","created":1481038826,"timestamp":1481038826,"name":"-.php","title":"Untitled","mimetype":"text\/plain","filetype":"php","pretty_type":"PHP","user":"U0UGH3X7X","editable":true,"size":999,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3BAKGJTF\/-.php?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3BAKGJTF\/download\/-.php?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/tuand\/F3BAKGJTF\/-.php","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F3BAKGJTF-0737b46124","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/tuand\/F3BAKGJTF\/-.php\/edit","preview":"message MSPDesc {\r\n\r\n\r\n    \/\/ MSPType holds the type of the MSP; the default one would\r\n    \/\/ be of type FABRIC implementing an X.509 based provider\r","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>message MSPDesc {<\/pre><\/div>\n<div><pre>&#8203;<\/pre><\/div>\n<div><pre>&#8203;<\/pre><\/div>\n<div><pre>    \/\/ MSPType holds the type of the MSP; the default one would<\/pre><\/div>\n<div><pre>    \/\/ be of type FABRIC implementing an X.509 based provider<\/pre><\/div>\n<\/div>\n<\/div>\n","lines":25,"lines_more":20,"preview_is_truncated":false,"channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":1,"initial_comment":{"id":"Fc3AGMVB2L","created":1481038826,"timestamp":1481038826,"user":"U0UGH3X7X","is_intro":true,"comment":"<@U26T99AQ4> MSPDesc as defined in 3015","channel":""}},"user":"U0UGH3X7X","upload":true,"display_as_bot":false,"username":"<@U0UGH3X7X|tuand>","bot_id":null,"ts":"1481038826.000234"},{"type":"message","user":"U0UGH3X7X","text":"<@U0XPR4NP4>   key = MSPIdentifier ?  agree with type=MSP","ts":"1481038906.000235"},{"type":"message","user":"U0XPR4NP4","text":"<@U26T99AQ4> or <@U1BC5A0F9> can probably speak to this better, but I'd think `MSPIdentifier` might be a little human unfriendly?","ts":"1481038958.000236"},{"type":"message","user":"U26T99AQ4","text":"got it. 2 Qs for <@U0UGH3X7X> :\n - why protobuf and not json?\n - is it okay if the schema undergoes a few minor changes in the change-set I'm about to push? I've had to make a few changes to have a simpler implementation of the managers\/msps (but of course everything can be changed again in the review phase)","ts":"1481038989.000237"},{"type":"message","user":"U0XPR4NP4","text":"<@U26T99AQ4> I'm probably to blame for the protobuf push.  Essentially because you can marshal protobuf to\/from JSON if you want, and we already use protobuf for everything else.","ts":"1481039063.000238"},{"type":"message","user":"U0UGH3X7X","text":"json should be only for genesis block create,  internal code should standardize on protobuf","ts":"1481039069.000239"},{"type":"message","user":"U0UGH3X7X","text":"just let me know if you make a patch","ts":"1481039106.000240"},{"type":"message","user":"U26T99AQ4","text":"but anyway changes that affect the MSPs are always generated by some external entity (e.g. a CA advertising a revoked cert)","ts":"1481039119.000241"},{"type":"message","user":"U26T99AQ4","text":"and so as far as the core\/config code is concerned, you'll have a byte array with a key name","ts":"1481039138.000242"},{"type":"message","user":"U26T99AQ4","text":"how it's marshalled shouldn't really matter","ts":"1481039147.000243"},{"type":"message","user":"U26T99AQ4","text":"or am I missing something?","ts":"1481039163.000244"},{"type":"message","user":"U0XPR4NP4","text":"&gt; - is it okay if the schema undergoes a few minor changes in the change-set I'm about to push? I've had to make a few changes to have a simpler implementation of the managers\/msps (but of course everything can be changed again in the review phase)\n\nMaybe you can keep <@U0UGH3X7X> in the loop on this? Assuming things don't change too radically I wouldn't think this should cause big problems though","ts":"1481039310.000245"},{"type":"message","user":"U26T99AQ4","text":"of course, I'll add him as a reviewer","ts":"1481039329.000246"},{"type":"message","user":"U26T99AQ4","text":"I'm running the last few tests and will push asap","ts":"1481039341.000247"},{"type":"message","user":"U0UGH3X7X","text":"that's your first mistake alex :wink:","ts":"1481039347.000248"},{"type":"message","user":"U26T99AQ4","text":":smile:","ts":"1481039370.000249"},{"type":"message","user":"U26T99AQ4","text":"so.. about json vs protobufs: can we agree that MSP can choose whatever encoding schema\/marshalling it wants for its config? This should be largely transparent as far as the core is concerned - it only affects COP, MSP and presumably the tool that <@U0UGH3X7X> is building","ts":"1481039444.000250"},{"type":"message","user":"U0UGH3X7X","text":"the genesis block creation is a manual step , some admin has to create a json file to input to the tool,  it's then easier to map to the protobuf and use that everywhere in our code, no need to reparse","ts":"1481039470.000251"},{"type":"message","user":"U26T99AQ4","text":"wait but you already have a json file; why not take the marshalled json as a string and send it around?","ts":"1481039510.000252"},{"type":"message","user":"U26T99AQ4","text":"if not for the whole genesis block, at least for the msp config","ts":"1481039546.000253"},{"type":"message","user":"U26T99AQ4","text":"again, you should treat it as the opaque byte array it is","ts":"1481039564.000254"},{"type":"message","user":"U0UGH3X7X","text":"i can do that ...  so the genesis block will have one configuration item per MSPDesc, value = json of MSPDesc as []bytes, type=MSP, key=?","ts":"1481039755.000255"},{"type":"message","user":"U0XPR4NP4","text":"<@U26T99AQ4> I don't understand why we are bifurcating the fabric on JSON\/protobuf","ts":"1481039785.000256"},{"type":"message","user":"U0XPR4NP4","text":"Why not use protos internally everywhere?","ts":"1481039797.000257"},{"type":"message","user":"U26T99AQ4","text":"aside from it being elegant in some abstract sense, does it really matter how a []byte is marshalled internally?","ts":"1481039864.000258"},{"type":"message","user":"U26T99AQ4","text":"and btw, json was chosen because it's already used by COP","ts":"1481039946.000259"},{"type":"message","user":"U0XPR4NP4","text":"I would argue that consistency is a good thing, that a developer who approaches a fabric data structure doesn't have to guess at its encoding.  JSON is a good human readable format, which protobuf marshals readily to and from.  And every component must already speak protobuf","ts":"1481039965.000260"},{"type":"message","user":"U26T99AQ4","text":"ok, I'll stick with json for now and will change it later (we can create a JIRA item so that we don't forget)","ts":"1481040080.000261"},{"type":"message","user":"U26T99AQ4","text":"is that acceptable also for <@U0UGH3X7X> ?","ts":"1481040087.000262"},{"type":"message","user":"U0XPR4NP4","text":"I already see proto definitions for the data structures?","ts":"1481040096.000263"},{"type":"message","user":"U0XPR4NP4","text":"I assume the interface to the MSP takes golang structures, not JSON?","ts":"1481040122.000264"},{"type":"message","user":"U26T99AQ4","text":"that change set doesn't contain any running code; the one I'm about to push does.. it took the size and shape of an oil-spill and at this point I want it out there asap so that I don't have to rebase a gazillion times :wink:","ts":"1481040153.000265"},{"type":"message","user":"U26T99AQ4","text":"&gt; I assume the interface to the MSP takes golang structures, not JSON?\ncorrect","ts":"1481040170.000266"},{"type":"message","user":"U0XPR4NP4","text":"Then this seems pretty easy to me, how the MSP manager gets those structures should be pretty irrelevant from an MSP perspective?   We can bolt on whatever marshaling scheme seems appropriate (which, I'd suggest is protobuf, since all the other structures in the config are protobuf).","ts":"1481040255.000267"},{"type":"message","user":"U0XPR4NP4","text":"&gt; so that I don't have to rebase a gazillion times :wink:\n\nUnderstood, I know how that goes...","ts":"1481040273.000268"},{"type":"message","user":"U0UGH3X7X","text":"<@U26T99AQ4> <@U1BC5A0F9>   send me a sample json file when you're ready","ts":"1481040300.000269"},{"type":"message","user":"U26T99AQ4","text":"I'll send you the schema and the sample file in pvt","ts":"1481040357.000270"},{"type":"message","user":"U0XPR4NP4","text":"<@U26T99AQ4> <@U1BC5A0F9> <@U0ZR63HLK> <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3019\/> Here is a shamelessly lifted minimal MSP definition for <@U0UGH3X7X> and I to work off of until the real one is finalized.","ts":"1481040494.000271"},{"type":"message","user":"U0ZR63HLK","text":"that's minimalism actually :slightly_smiling_face:","ts":"1481040561.000272"},{"type":"message","user":"U26T99AQ4","text":"if possible, I'd appreciate it if we could work out of this one for now","ts":"1481040568.000273"},{"type":"message","user":"U26T99AQ4","text":"that would avoid another tiny oil-spill for me :wink:","ts":"1481040578.000274"},{"type":"message","subtype":"file_share","text":"<@U26T99AQ4|aso> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/aso\/F3AJ1NKDX\/mspconfigschema.go|mspconfigschema.go>","file":{"id":"F3AJ1NKDX","created":1481040583,"timestamp":1481040583,"name":"mspconfigschema.go","title":"mspconfigschema.go","mimetype":"text\/plain","filetype":"go","pretty_type":"Go","user":"U26T99AQ4","editable":true,"size":4672,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3AJ1NKDX\/mspconfigschema.go?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3AJ1NKDX\/download\/mspconfigschema.go?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/aso\/F3AJ1NKDX\/mspconfigschema.go","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F3AJ1NKDX-a55621a33c","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/aso\/F3AJ1NKDX\/mspconfigschema.go\/edit","preview":"package msp\n\n\/*\n Copyright IBM Corp. 2016 All Rights Reserved.\n","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre><span class=\"cm-keyword\">package<\/span> <span class=\"cm-variable\">msp<\/span><\/pre><\/div>\n<div><pre>&#8203;<\/pre><\/div>\n<div><pre><span class=\"cm-comment\">\/*<\/span><\/pre><\/div>\n<div><pre> <span class=\"cm-comment\">Copyright IBM Corp. 2016 All Rights Reserved.<\/span><\/pre><\/div>\n<\/div>\n<\/div>\n","lines":131,"lines_more":126,"preview_is_truncated":true,"channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U26T99AQ4","upload":true,"display_as_bot":false,"username":"<@U26T99AQ4|aso>","bot_id":null,"ts":"1481040583.000275"},{"type":"message","user":"U26T99AQ4","text":"it is neither final nor ideal. It does have a big plus though, which is that it comes with running code :wink:","ts":"1481040614.000276"},{"type":"message","user":"U0ZR63HLK","text":"+1","ts":"1481040626.000277"},{"type":"message","user":"U0XPR4NP4","text":"<@U26T99AQ4> Works for me, I'll go ahead and update the proto to match, though I'll leave out the signing identity, as this is fixed for genesis\/config material","ts":"1481040661.000278"},{"type":"message","user":"U26T99AQ4","text":"if possible leave it in there and do some magic with omitempty","ts":"1481040679.000279"},{"type":"message","user":"U26T99AQ4","text":"this way we have a single definition","ts":"1481040687.000280"},{"type":"message","user":"U26T99AQ4","text":"for all MSPs","ts":"1481040690.000281"},{"type":"message","user":"U26T99AQ4","text":"the local one has a signing identity, the chain one doesn't (it's empty hence omitted)","ts":"1481040705.000282"},{"type":"message","user":"U26T99AQ4","text":"does that work?","ts":"1481040710.000283"},{"type":"message","user":"U0XPR4NP4","text":"Okay, I can add it in, it just pulls in yet another struct, was trying to keep it small","ts":"1481040715.000284"},{"type":"message","user":"U0XPR4NP4","text":"But that's fine, whatever is the path of least resistance","ts":"1481040738.000285"},{"type":"message","user":"U26T99AQ4","text":"right, we can remove it later thx!","ts":"1481040743.000286"},{"type":"message","user":"U26T99AQ4","text":"and you get some karma points because you saved me from another rebase :stuck_out_tongue:","ts":"1481040753.000287","reactions":[{"name":"grin","users":["U0UGH3X7X"],"count":1}]},{"type":"message","user":"U0XPR4NP4","text":"Haha, I'll take them!","ts":"1481040776.000288","reactions":[{"name":"innocent","users":["U26T99AQ4"],"count":1}]},{"type":"message","user":"U0XPR4NP4","text":"<@U26T99AQ4> <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3019\/> protos to match your structs, I don't think there are any glaring omissions (also <@U0UGH3X7X>)","ts":"1481041280.000289"},{"type":"message","user":"U26T99AQ4","text":"super, thanks! yeah, that looks okay","ts":"1481041364.000290"},{"type":"message","user":"U0ZR63HLK","text":"even though less minimal :slightly_smiling_face:","ts":"1481041482.000291"},{"type":"message","user":"U0ZR63HLK","text":"the principal of minimality in crypto is actually quite challenging to achieve. In a lot of cases, there are components in a crypto scheme that are there just to be able to carry the proof of security. It is more related to our ignorance","ts":"1481041570.000292"},{"type":"message","user":"U0XPR4NP4","text":"Understood, I'm sure I'm being a little obnoxious with the \"let's start small\", sorry about that.  I just can't wrap my head around the whole thing at once and if we can split things into smaller more easily digestible (but working) pieces, it makes my head hurt a little less.","ts":"1481041798.000293"},{"type":"message","user":"U1BC5A0F9","text":"<@U0XPR4NP4> this is though only for peer config.","ts":"1481041804.000294"},{"type":"message","user":"U1BC5A0F9","text":"For orderer setup one would need to pass the orderer chain config. Adding <@U0UGH3X7X>, <@U0KN2SSKE>.","edited":{"user":"U1BC5A0F9","ts":"1481041905.000000"},"ts":"1481041818.000295"},{"type":"message","user":"U0XPR4NP4","text":"<@U1BC5A0F9> I'm not sure what you mean? Why is that needed to make the MSP manager work?","ts":"1481041979.000297"},{"type":"message","user":"U0UGH3X7X","text":"I'd say let's start with what we have now and get orderer+msp and peer+msp running ?  I can add other config very quickly after that","ts":"1481041984.000298","reactions":[{"name":"+1","users":["U26T99AQ4"],"count":1}]},{"type":"message","user":"U1BC5A0F9","text":"<@U0UGH3X7X>: +1","ts":"1481042038.000299"},{"type":"message","user":"U1BC5A0F9","text":"<@U0XPR4NP4>: Well my understanding was that the orderer boots with being provided with some local information (local MSP + key material, + consensus local info), and with the orderer channel genesis config (that includes verifier MSP configuration, readers and writers of the orderer chain, other orderers identities, etc).","edited":{"user":"U1BC5A0F9","ts":"1481042192.000000"},"ts":"1481042170.000300"},{"type":"message","user":"U0XPR4NP4","text":"<@U1BC5A0F9> Understood that this will not be a complete end to end finished configuration.  Just trying to add the MSP piece to the chain config, and we can add the remaining config later.","ts":"1481042261.000302"},{"type":"message","user":"U1BC5A0F9","text":"ok, got it","ts":"1481042288.000303"},{"type":"message","user":"U1BC5A0F9","text":"So, but this one includes peer local setup only though: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3019\/2\/protos\/common\/msp\/configuration.proto>","ts":"1481042381.000304"},{"type":"message","user":"U1BC5A0F9","text":"correct?","ts":"1481042386.000305"},{"type":"message","user":"U0XPR4NP4","text":"This is supposed to include only the structs that <@U26T99AQ4> needs in order to stand up a working MSP manager for the MSP's to be embedded in the chain config","ts":"1481042455.000306"},{"type":"message","user":"U0XPR4NP4","text":"<@U26T99AQ4> Maybe I missed it, but do you have any static valid `MSPConfig` that we can incorporate for unit tests?","ts":"1481042868.000307"},{"type":"message","user":"U0XPR4NP4","text":"(And, if you could post your gerrit changeset here once pushed, I'd appreciate it)","ts":"1481042908.000308"},{"type":"message","user":"U26T99AQ4","text":"<http:\/\/gerrit.hyperledger.org\/r\/3025>","ts":"1481042944.000309","reactions":[{"name":"+1","users":["U0XPR4NP4"],"count":1}]},{"type":"message","user":"U26T99AQ4","text":"I've pushed (I wasn't able to verify that all tests work but at least we can start the review process)","ts":"1481042964.000310"},{"type":"message","user":"U26T99AQ4","text":"&gt; do you have any static valid `MSPConfig` that we can incorporate for unit tests?\n\nI do here <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3025\/1\/msp\/peer-config.json>","ts":"1481042995.000311"},{"type":"message","user":"U26T99AQ4","text":"that contains a root CA, a cert for signing and a keypair","ts":"1481043019.000312"},{"type":"message","user":"U0XPR4NP4","text":"Great, thanks!","ts":"1481043135.000313"},{"type":"message","user":"U26T99AQ4","text":"oh, one thing that is worth pointing out","ts":"1481043157.000314"},{"type":"message","user":"U26T99AQ4","text":"in <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3025\/1\/msp\/mspconfigschema.go>","ts":"1481043173.000315"},{"type":"message","user":"U26T99AQ4","text":"`MSPConfig.Config` is of type `[]byte`","ts":"1481043191.000316"},{"type":"message","user":"U26T99AQ4","text":"this way, different implementation of MSP can use whatever internal format they want","ts":"1481043215.000317"},{"type":"message","user":"U26T99AQ4","text":"so the fabric msp implementation in its setup can do\n\n```\nfunc (msp *bccspmsp) Setup(conf1 *MSPConfig) error {\n\t\/\/ given that it's an msp of type fabric, extract the MSPConfig instance\n\tvar conf FabricMSPConfig\n\terr := json.Unmarshal(conf1.Config, &amp;conf)\n\tif err != nil {\n\t\tmspLogger.Errorf(\"Failed unmarshalling fabric msp config, err %s\", err)\n\t\treturn fmt.Errorf(\"Failed unmarshalling fabric msp config, err %s\", err)\n\t}\n```","ts":"1481043267.000318"},{"type":"message","user":"U0XPR4NP4","text":"Right","ts":"1481043807.000319"},{"type":"message","user":"U0XPR4NP4","text":"Makes sense","ts":"1481043814.000320"},{"type":"message","subtype":"file_share","text":"<@U0XPR4NP4|jyellick> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/jyellick\/F3BE7JD0U\/mutlichain_orderer_diagrams.pdf|mutlichain_orderer_diagrams.pdf> and commented: Per request of <@U1AU8DRQR> here is a rough sketch of how the orderer common components for broadcast\/deliver\/multichain work.","file":{"id":"F3BE7JD0U","created":1481052797,"timestamp":1481052797,"name":"mutlichain_orderer_diagrams.pdf","title":"mutlichain_orderer_diagrams.pdf","mimetype":"application\/pdf","filetype":"pdf","pretty_type":"PDF","user":"U0XPR4NP4","editable":false,"size":49529,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3BE7JD0U\/mutlichain_orderer_diagrams.pdf?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3BE7JD0U\/download\/mutlichain_orderer_diagrams.pdf?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/jyellick\/F3BE7JD0U\/mutlichain_orderer_diagrams.pdf","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F3BE7JD0U-9b3efab882","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":1,"initial_comment":{"id":"Fc3AMGQW57","created":1481052797,"timestamp":1481052797,"user":"U0XPR4NP4","is_intro":true,"comment":"Per request of <@U1AU8DRQR> here is a rough sketch of how the orderer common components for broadcast\/deliver\/multichain work.","channel":""},"reactions":[{"name":"woo","users":["U1AU8DRQR","U0ULK2JPP"],"count":2}]},"user":"U0XPR4NP4","upload":true,"display_as_bot":false,"username":"<@U0XPR4NP4|jyellick>","bot_id":null,"ts":"1481052798.000321"},{"type":"message","user":"U1AU8DRQR","text":"<@U0XPR4NP4> thanks :slightly_smiling_face:","ts":"1481058558.000323","reactions":[{"name":"simple_smile","users":["U0XPR4NP4"],"count":1}]},{"type":"message","user":"U0ULK2JPP","text":"thanks <@U0XPR4NP4> \u2026 timely :slightly_smiling_face:","ts":"1481059196.000327"},{"type":"message","user":"U1B2FF8LR","text":"General API question: Will the ordered transactions\/batches be timestamped in v1.0? And is this info for each transaction retrievable by the users? Are there different answers for different consensus algorithms?","ts":"1481061343.000328"},{"type":"message","user":"U0XPR4NP4","text":"<@U1B2FF8LR> I think this may be a better question for <@U0PB67X4K> <@U0Y14MWA2> <@U1BC5A0F9> <@U0ZR63HLK> <@U26T99AQ4>, but, we have discussed doing transaction filtering by both time and epoch.  Clients should set a timestamp on all transactions, and, when the orderer creates the block, its signature will also be over a `ChainHeader` which includes a timestamp.  I think it's yet to be decided exactly what guarantees those timestamps have though, if any.","ts":"1481064026.000329"},{"type":"message","user":"U1B2FF8LR","text":"ok, so it sounds like the capability is there but implementation is yet TBD. One of the features in the plans for R3's CORDA, being developed by\/for banking industry, is precise timestamping. I presume they want to be able to query when a given transaction occurred, and be able to tell if it was before or after another transaction. But it is not clear to me what that means to hyperledger\/fabric. Is it the timestamp when it was (a) requested by client or SDK, or (b) client SDK receives event notification, or (c) when LeaderPeer receives it, or (d) when Peers determine it is \"validated\" or committed, or (e) when delivered by orderer service. I guess if we want to support banking industry too, and to write any system\/behavior tests, then we may need to get more detail about this timestamping requirement.","ts":"1481065799.000330"},{"type":"message","user":"U0ULK2JPP","text":"<@U0XPR4NP4> any retries at any level in the orderer\u2026 on some error (say in consensus) the block gets dropped...","ts":"1481066391.000331"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ULK2JPP> is this a question? In general, once a transaction is ack-ed, it should be \"in consensus\", the fault tolerance is then determined by the consensus algorithm ","ts":"1481066959.000332"},{"type":"message","user":"U0ULK2JPP","text":"sorry yes, meant to be a question","ts":"1481066982.000333"},{"type":"message","user":"U0ULK2JPP","text":"to take an example\u2026 suppose a batch of txs is handed to kafka for ordering and it returns a failure","ts":"1481067032.000334"},{"type":"message","user":"U0ULK2JPP","text":"is there a notion of restarting the consenses with that batch or will that batch of txs dropped","ts":"1481067077.000335"},{"type":"message","user":"U0XPR4NP4","text":"In the Kafka case, and <@U0XQ35CDD> can correct me if I'm wrong, but we won't ack until the transaction is guaranteed to be ordered ","ts":"1481067172.000336"},{"type":"message","user":"U0XPR4NP4","text":"If something like a configuration transaction invalidates that transaction, then it could be dropped ","ts":"1481067269.000337"},{"type":"message","user":"U0ULK2JPP","text":"understood.. I kinda missed the point. every client transaction handed to consensus (not a batch)","ts":"1481067446.000338"},{"type":"message","user":"U0ULK2JPP","text":"thanks Jason","ts":"1481067453.000339"},{"type":"message","user":"U0ULK2JPP","text":"so <@U0XPR4NP4> `but we won't ack until the transaction is guaranteed to be ordered`  - would that translate to `if we ack that the tx is guaranteed to be ordered, it is guaranteed to be in a block` ?","ts":"1481067616.000340"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ULK2JPP> \n\nShort version: almost always yes.  \n\nLong version: Once a transaction has been ack-ed it will have the opportunity to be included in a block. If it is 'valid' after ordering according to the raw chain ingress rules (not VSCC obviously), namely the signer is still authorized to transact on the chain, then it will be included","edited":{"user":"U0XPR4NP4","ts":"1481074934.000000"},"ts":"1481074873.000341"},{"type":"message","user":"U0ULK2JPP","text":"I think that answers my question <@U0XPR4NP4> \u2026 but I it was targetted at the batch coming out of the orderer and not the block finally created\u2026 let me rephrase `if we ack that the tx is guaranteed to be ordered, it is guaranteed to be in the batch delivered by orderer` ?","ts":"1481075026.000343"},{"type":"message","user":"U0ULK2JPP","text":"I think what you are say is \u201calways, yes\"","ts":"1481075044.000344"},{"type":"message","user":"U0XPR4NP4","text":"Not quite, there is prefiltering the orderer does, to make sure only authorized users submit transactions to the raw ledger, which can cause it to drop transactions ","ts":"1481075141.000345"},{"type":"message","user":"U0ULK2JPP","text":"ok","ts":"1481075148.000346"},{"type":"message","user":"U0XPR4NP4","text":"Before consensus, prefiltering is not deterministic ","ts":"1481075161.000347"},{"type":"message","user":"U0ULK2JPP","text":"understood","ts":"1481075161.000348"},{"type":"message","user":"U0ULK2JPP","text":"basically the ack is \u201csubmitted for ordering\"","ts":"1481075175.000349"},{"type":"message","user":"U0XPR4NP4","text":"So, the ack is a best effort pre filtering approval ","ts":"1481075183.000350"},{"type":"message","user":"U0XPR4NP4","text":"Right. It's been submitted for ordering and it's valid according to the current config ","ts":"1481075219.000351"},{"type":"message","user":"U0ULK2JPP","text":"got it","ts":"1481075232.000352"},{"type":"message","user":"U0ULK2JPP","text":"thanks much!","ts":"1481075234.000353"},{"type":"message","user":"U0XPR4NP4","text":"Happy to help! ","ts":"1481075261.000354"},{"type":"message","user":"U0XQ35CDD","text":"Not sure I agree with the ACK discussion. (Assuming that by ACK we refer to the SUCCESS `BroadcastResponse` that the ordering service sends back.)","edited":{"user":"U0XQ35CDD","ts":"1481080712.000000"},"ts":"1481079771.000355"},{"type":"message","user":"U0XQ35CDD","text":"&gt; In general, once a transaction is ack-ed, it should be \"in consensus\"","ts":"1481079798.000356"},{"type":"message","user":"U0XQ35CDD","text":"<https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1481074873000341>","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1481074873000341","fallback":"[December 6th, 2016 5:41 PM] jyellick: <@U0ULK2JPP> \n\nShort version: almost always yes.  \n\nLong version: Once a transaction has been ack-ed it will have the opportunity to be included in a block. If it is 'valid' after ordering according to the raw chain ingress rules (not VSCC obviously), namely the signer is still authorized to transact on the chain, then it will be included","ts":"1481074873.000341","author_subname":"jyellick","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"<@U0ULK2JPP> \n\nShort version: almost always yes.  \n\nLong version: Once a transaction has been ack-ed it will have the opportunity to be included in a block. If it is 'valid' after ordering according to the raw chain ingress rules (not VSCC obviously), namely the signer is still authorized to transact on the chain, then it will be included","author_name":"Jason Yellick","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/jyellick","author_icon":"https:\/\/secure.gravatar.com\/avatar\/80fccad690b283483c3b5418b8b82b5b.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F272a%2Fimg%2Favatars%2Fava_0026-48.png","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1481079813.000357"},{"type":"message","user":"U0XQ35CDD","text":"I had raised the following point during the review of the changeset that introduced the common broadcaster: <https:\/\/gerrit.l.org\/r\/#\/c\/2763\/3\/orderer\/common\/broadcast\/broadcast.go@141> ","edited":{"user":"U0XQ35CDD","ts":"1481086551.000000"},"ts":"1481079923.000359"},{"type":"message","user":"U0XQ35CDD","text":"We adopted the exitChan modification proposed there, but the problem (as my comment noted) remains, no?","edited":{"user":"U0XQ35CDD","ts":"1481080350.000000"},"ts":"1481080102.000362"},{"type":"message","user":"U0XQ35CDD","text":"Long story short, we're using a buffered channel as a queue for incoming messages.","ts":"1481080181.000363"},{"type":"message","user":"U0XQ35CDD","text":"Whenever we can successfully inject an incoming tx to this queue, we send back an ACK.","ts":"1481080182.000364"},{"type":"message","user":"U0XQ35CDD","text":"But we may queue up several messages (and send several ACKs) before the first `Enqueue()` call fails. (And the broadcaster then returns, as it should.)","ts":"1481080288.000365"},{"type":"message","user":"U0XQ35CDD","text":"So we may ACK and the TX may be dropped and it *won't be* because of a filtering failure, as the discussion seems to suggest.","ts":"1481080481.000367"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XPR4NP4> - what is blockcutter doing when the batch is filled but is queuing as the previous batch is still being processed?","ts":"1481103991.000371"},{"type":"message","user":"U0Y14MWA2","text":"and related to that - <@U0XQ35CDD> - does Kafka ordering service pipelines batches\/blocks or not?","ts":"1481104034.000372"},{"type":"message","user":"U0XQ35CDD","text":"<@U0Y14MWA2>: It doesn't. Ordering and then applying config and\/or writing to the ledger happens in the same thread sans buffers in between. <https:\/\/github.com\/kchristidis\/fabric\/blob\/fab-819-preview\/orderer\/kafka\/main.go#L214>","edited":{"user":"U0XQ35CDD","ts":"1481114673.000000"},"ts":"1481114665.000373"},{"type":"message","user":"U0XQ35CDD","text":"If this turns out to be a bottleneck, pushing the batches to a queue and having a separate goroutine handle the `WriteBlock()` call would allow for some parallelization, but seems a bit premature to optimize at this point.","ts":"1481114737.000376"},{"type":"message","user":"U0Y14MWA2","text":"Ok - that said we'll need it eventually","ts":"1481114781.000377"},{"type":"message","user":"U0XQ35CDD","text":"Understood. (And agreed.)","ts":"1481114798.000378"},{"type":"message","user":"U0Y14MWA2","text":"Now vack to blockcutter","ts":"1481114799.000379"},{"type":"message","user":"U0Y14MWA2","text":"If the queue due to absence of pipelining is growing","ts":"1481114815.000380"},{"type":"message","user":"U0Y14MWA2","text":"Does blockcutter cut the queue into say 25 queued blocks","ts":"1481114851.000381"},{"type":"message","user":"U0Y14MWA2","text":"Or it lets the block consisting of queued tx grow to be one big block?","ts":"1481114877.000382"},{"type":"message","user":"U0XQ35CDD","text":"It would be the latter but at any rate the block wouldn't exceed `batchSize` messages at a time.","ts":"1481114941.000383"},{"type":"message","user":"U0XQ35CDD","text":"The blockcutter in its current implementation is quite simple: <https:\/\/gerrit.hyperledger.org\/r\/gitweb?p=fabric.git;a=blob;f=orderer\/common\/blockcutter\/blockcutter.go;h=de4354b7c80e1afd165fd65f328c400437a716b3;hb=refs\/heads\/master#l64>","ts":"1481115047.000384"},{"type":"message","user":"U0XQ35CDD","text":"It exposes an `Ordered()` and `Cut()` method. As a consensus plugin you invoke the first one sequentially to get the transactions ordered. You may additionally have to invoke the `Cut()` method if, say, your batchTimer has expired and you want to _force_ the cutting of a block.","edited":{"user":"U0XQ35CDD","ts":"1481124606.000000"},"ts":"1481115050.000385"},{"type":"message","user":"U0Y14MWA2","text":"Hm so kafka orders tx and then","ts":"1481115111.000387"},{"type":"message","user":"U0Y14MWA2","text":"After that","ts":"1481115117.000388"},{"type":"message","user":"U0Y14MWA2","text":"The block is formed (cut)?","ts":"1481115129.000389"},{"type":"message","user":"U0XQ35CDD","text":"So, in the two existing implementations (solo and kafka), when the batch is filled you don't currently have any queueing in the blockcutter going on. For instance in solo, it's the same thread that invokes the blockcutter and then does the processing, all sequentially sans buffers in between. (Same for Kafka). <https:\/\/gerrit.hyperledger.org\/r\/gitweb?p=fabric.git;a=blob;f=orderer\/solo\/consensus.go;h=e7d79e8cc458448a08ba4258da6649584520a58d;hb=refs\/heads\/master#l96>","edited":{"user":"U0XQ35CDD","ts":"1481115244.000000"},"ts":"1481115218.000390"},{"type":"message","user":"U0XQ35CDD","text":"Yes.","ts":"1481115223.000391"},{"type":"message","user":"U0Y14MWA2","text":"o-k","ts":"1481115244.000393"},{"type":"message","user":"U0Y14MWA2","text":"so this would be different in pbft where batching happens before ordering","ts":"1481115260.000394"},{"type":"message","user":"U0Y14MWA2","text":"(at the leader)","ts":"1481115280.000395"},{"type":"message","user":"U0Y14MWA2","text":"do you have some doc around impl of kafka orderer?","ts":"1481115337.000396"},{"type":"message","user":"U0Y14MWA2","text":"or should I browse the code :stuck_out_tongue:","ts":"1481115368.000397"},{"type":"message","user":"U0XQ35CDD","text":"For the PBFT comment - correct: <https:\/\/gerrit.hyperledger.org\/r\/gitweb?p=fabric.git;a=blob;f=orderer\/multichain\/chainsupport.go;h=5cd89370f5da108dc473c9d2fbdc30de46b7b407;hb=refs\/heads\/master#l39> (see line 44)","edited":{"user":"U0XQ35CDD","ts":"1481115440.000000"},"ts":"1481115433.000398"},{"type":"message","user":"U0Y14MWA2","text":"ok very good so you thought about this","ts":"1481115468.000400"},{"type":"message","user":"U0Y14MWA2","text":"now my question for cut-then-order","ts":"1481115481.000401"},{"type":"message","user":"U0Y14MWA2","text":"if we have fixed size batches\/blocks this will drown throughput","ts":"1481115500.000402"},{"type":"message","user":"U0Y14MWA2","text":"how sbft works currently is that all pending tx form one big block","ts":"1481115520.000403"},{"type":"message","user":"U0Y14MWA2","text":"and if this is beyond MaxBlockSize","ts":"1481115531.000404"},{"type":"message","user":"U0Y14MWA2","text":"so be it","ts":"1481115532.000405"},{"type":"message","user":"U0XQ35CDD","text":"RE: Kafka documentation. I have a high-level overview about why the Kafka orderer is designed the way it is <https:\/\/docs.google.com\/document\/d\/1vNMaM7XhOlu9tB_10dKnlrhy5d7b1u8lSY8a-kVjCO4\/edit> but not sure if it's the low-level detail that you want. (Code's quite straightforward as well though: <https:\/\/github.com\/kchristidis\/fabric\/commit\/f9006f4c997dbbc8ae5a8f6e1b45fbf1cb3afffa#diff-cfa1d868ef1cd7b2f466aca2b058e752R173>)","attachments":[{"service_name":"GitHub","title":"Rebase Kafka orderer on common components \u00b7 kchristidis\/fabric@f9006f4 \u00b7 GitHub","title_link":"https:\/\/github.com\/kchristidis\/fabric\/commit\/f9006f4c997dbbc8ae5a8f6e1b45fbf1cb3afffa#diff-cfa1d868ef1cd7b2f466aca2b058e752R173","text":"Change-Id: Ifeefad3263be43a21bb550e266ac49be736c13f5","fallback":"GitHub: Rebase Kafka orderer on common components \u00b7 kchristidis\/fabric@f9006f4","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/14876848?v=3&s=200","from_url":"https:\/\/github.com\/kchristidis\/fabric\/commit\/f9006f4c997dbbc8ae5a8f6e1b45fbf1cb3afffa#diff-cfa1d868ef1cd7b2f466aca2b058e752R173","thumb_width":200,"thumb_height":200,"service_icon":"https:\/\/a.slack-edge.com\/e8ef6\/img\/unfurl_icons\/github.png","id":1}],"ts":"1481115590.000406"},{"type":"message","user":"U0Y14MWA2","text":"ok - your order and cut explanation is for the moment sufficient","ts":"1481115620.000409"},{"type":"message","user":"U0Y14MWA2","text":"but for cut-then-order the current fixed size blockcutter won't really fly until we have pipelining in sbft","ts":"1481115660.000410"},{"type":"message","user":"U0Y14MWA2","text":"otherwise the performance will suck big time","ts":"1481115670.000411"},{"type":"message","user":"U0XQ35CDD","text":"I see your point - makes sense.","ts":"1481115694.000412"},{"type":"message","user":"U0ZJZBJLF","text":"<@U0XQ35CDD>  I saw that the JIRA issue regarding gRPC TLS pinning has been marked *Done*. Did you guys implement in the kafka shim something similar to what simon implemented in the connection.Manager?","ts":"1481118388.000413"},{"type":"message","user":"U0XQ35CDD","text":"<@U0ZJZBJLF>: There's no option to delete an issue (more appropriately: there is, but isn't exposed to us). \"Done\" is me clearing out the issues under the \"consensus\" component that we are no longer working on. As far as I can guess, this will be captured by Gari's common gRPC server work.","edited":{"user":"U0XQ35CDD","ts":"1481123864.000000"},"ts":"1481118676.000414"},{"type":"message","user":"U0ZJZBJLF","text":"So he's also going to implement the pinning?","ts":"1481118762.000415"},{"type":"message","user":"U0ZJZBJLF","text":"I didn't see that in the JIRA issue","ts":"1481118777.000416"},{"type":"message","user":"U0XQ35CDD","text":"I do not know, and I could be wrong. I have a backlog of issues I need to double-check on, and this is one of them.","ts":"1481118831.000417"},{"type":"message","user":"U0ZJZBJLF","text":"<https:\/\/jira.hyperledger.org\/browse\/FAB-1255>","ts":"1481118853.000418"},{"type":"message","user":"U0ZJZBJLF","text":"I see...","ts":"1481118867.000419"},{"type":"message","user":"U1HFNJB50","text":"<@U1KDHJT6H> is there a way to add to the JIRA workflow statuses like: \u201cInvalid\u201d, \u201cWon\u2019t fix\u201d?","ts":"1481119042.000420"},{"type":"message","user":"U0ZJZBJLF","text":"Maybe ask the guys in <#C0YMWRX19|ci-pipeline>  to manually override the status of the issue? or give people permissions to do so?","edited":{"user":"U0ZJZBJLF","ts":"1481119058.000000"},"ts":"1481119044.000421"},{"type":"message","user":"U0XQ35CDD","text":"(Also, from what I can tell by reading the issue, it was about _investigating_ pinning, so no concrete deliverable was tied to it.)","ts":"1481119087.000423"},{"type":"message","user":"U0XQ35CDD","text":"`WONTFIX` would be lovely.","ts":"1481119099.000424","reactions":[{"name":"spock-hand","users":["U1HFNJB50"],"count":1}]},{"type":"message","user":"U0ZJZBJLF","text":"hey I was just curious, that's all :wink:","ts":"1481119111.000425"},{"type":"message","user":"U0XQ35CDD","text":"No problem, you did well and you reminded me to check with FAB-1255 as well.","ts":"1481119145.000426"},{"type":"message","user":"U0ZJZBJLF","text":"I also don't think that it's correct to implement certificate pinning inside a consensus plugin (I mean- simon did that in the sbft because it has multiple nodes, but maybe in the future we'll have more types of these, and this sounds too cohesive with security to be in the sbft package anyway)","edited":{"user":"U0ZJZBJLF","ts":"1481119305.000000"},"ts":"1481119150.000427"},{"type":"message","user":"U0XQ35CDD","text":"Why do I have glimpses of a conversation here a couple of weeks ago that treated pinning as a done deal? I remember pointing out the issues that Keith had mentioned in <https:\/\/jira.hyperledger.org\/browse\/FAB-708?focusedCommentId=19397&amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-19397>","ts":"1481119489.000430"},{"type":"message","user":"U0ZJZBJLF","text":"```\nSo is the issue that go grpc doesn't provide a way to enable mutual TLS and to extract the client cert on the server?\nI see the following for doing mutual TLS <https:\/\/github.com\/grpc\/grpc-go\/issues\/403> but doesn't give you access to the client cert. I see this discussed (at length) in <https:\/\/github.com\/grpc\/grpc-go\/issues\/111>. It seems to indicate that we need to implement our own TransportAuthenticator but is not clear.\n```\n?","ts":"1481119557.000431"},{"type":"message","user":"U0ZJZBJLF","text":"you mean this?","ts":"1481119561.000432"},{"type":"message","user":"U0XQ35CDD","text":"That's what I had pointed out when it was brought up a couple of weeks ago. (I am aware of the fix that you pushed later on, and I remember our conversation later that day.)","ts":"1481119600.000433"},{"type":"message","user":"U0ZJZBJLF","text":"so, if you replay the memory forward you'll remember that I said it can be done :thumbsup_all:","edited":{"user":"U0ZJZBJLF","ts":"1481119688.000000"},"ts":"1481119639.000434"},{"type":"message","user":"U0XQ35CDD","text":"Correct.","ts":"1481119723.000436"},{"type":"message","user":"U0ZJZBJLF","text":"I actually have a commit pending that extracts the certificate from both ends: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2841\/> for the gossip mutual TLS","edited":{"user":"U0ZJZBJLF","ts":"1481119954.000000"},"ts":"1481119748.000437"},{"type":"message","user":"U0XQ35CDD","text":"Does this seem like something that should be included in the FAB-1255 work, or are we overstepping our boundaries here?","edited":{"user":"U0XQ35CDD","ts":"1481119774.000000"},"ts":"1481119763.000438"},{"type":"message","user":"U0ZJZBJLF","text":"does what seem?","ts":"1481119795.000440"},{"type":"message","user":"U0XQ35CDD","text":"TLS pinning.","ts":"1481119818.000441"},{"type":"message","user":"U0ZJZBJLF","text":"oh. well, I dunno. I'd ask Gari, if he's planning to do something like that in his gRPC server, I didn't see that in the sub-tasks though... But, isn't TLS pinning really related to identity though? (you need to know who are the servers you pin their cert)","edited":{"user":"U0ZJZBJLF","ts":"1481119917.000000"},"ts":"1481119870.000442"},{"type":"message","user":"U0ZJZBJLF","text":"I mean- shouldn't the crypto guys be involved with this somehow?","ts":"1481119891.000443"},{"type":"message","user":"U0XQ35CDD","text":"(Outside my domain, so I'll defer to others for the right call.)","edited":{"user":"U0XQ35CDD","ts":"1481120816.000000"},"ts":"1481119939.000446"},{"type":"message","user":"U0XPR4NP4","text":"<https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1481079923000359>\n\n<@U0XQ35CDD> <@U0ULK2JPP> This comment is absolutely true, sorry about that.  I had your comment from that changeset in mind, thinking that we should really delay the ack until after `Enqueue` returns successfully, which would give us the desired 'in consensus' behavior.  So yes, today, an ACK only means that the shim has it, not that it is in consensus.  A failure to send to Kafka for instance could absolutely cause the transaction to be lost.","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1481079923000359","fallback":"[December 6th, 2016 7:05 PM] kostas: I had raised the following point during the review of the changeset that introduced the common broadcaster: <https:\/\/gerrit.l.org\/r\/#\/c\/2763\/3\/orderer\/common\/broadcast\/broadcast.go@141> ","ts":"1481079923.000359","author_subname":"kostas","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"I had raised the following point during the review of the changeset that introduced the common broadcaster: <https:\/\/gerrit.l.org\/r\/#\/c\/2763\/3\/orderer\/common\/broadcast\/broadcast.go@141> ","author_name":"Kostas Christidis","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/kostas","author_icon":"https:\/\/avatars.slack-edge.com\/2016-04-05\/31983107923_80db5353e9278df980c7_48.png","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-consensus-dev"}],"edited":{"user":"U0XPR4NP4","ts":"1481123715.000000"},"ts":"1481123670.000449","reactions":[{"name":"+1","users":["U0XQ35CDD","U0ULK2JPP"],"count":2}]},{"type":"message","user":"U0ULK2JPP","text":"makes sense .. just wanted t know where the boundaries were.. thanks Jason, Kostas","ts":"1481124057.000453"},{"type":"message","user":"U0XPR4NP4","text":"<https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1481115660000410>\n\nYou may choose to cut a block at any time by invoking `CutBlock`.  In solo this is done via a simple timer, but in actually distributed consensus, the decision on where to invoke `CutBlock` must be consented upon.  In the Kafka case, the last I heard was to have the shims send a special 'cutblock' meta-message for a particular block when a timer expires, and the first message to arrive wins.  In the SBFT case I think this is actually easier, as the leader may do the simple timer logic, and the backups merely need to replicate his behavior by passing the transactions in order through the blockcutter and invoking `CutBlock` themselves.\n\nNote that in order to support configuration on the chain, some transactions now modify 'state', and this is going to complicate sbft noticeably, especially supporting pipelining.  It should not be insurmountable, and should generally not affect performance as the state modifying transactions should be extremely infrequent.  In short, 'normal transactions' may be ordered in a pipelined fashion, but a reconfiguration transaction must be executed before any additional transactions may be ordered.","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1481115660000410","fallback":"[December 7th, 2016 5:01 AM] vukolic: but for cut-then-order the current fixed size blockcutter won't really fly until we have pipelining in sbft","ts":"1481115660.000410","author_subname":"vukolic","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"but for cut-then-order the current fixed size blockcutter won't really fly until we have pipelining in sbft","author_name":"Marko Vukolic","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/vukolic","author_icon":"https:\/\/secure.gravatar.com\/avatar\/a52edd136bbd07ca069b9393ac60f675.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0006-48.png","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1481124550.000454"},{"type":"message","user":"U0XPR4NP4","text":"<@U0Y14MWA2> ^","ts":"1481124570.000456"},{"type":"message","user":"U0Y14MWA2","text":"What reconfiguration do we plan to support for v1?","ts":"1481124687.000458"},{"type":"message","user":"U1B2FF8LR","text":"<@U0XPR4NP4> Can we expect that an event notification be raised for every transaction, ordered or not, including failures such as these lost messages (especially since we had already ack'd them)?","ts":"1481124853.000459"},{"type":"message","user":"U0XPR4NP4","text":"<@U0Y14MWA2> The biggest piece of reconfiguration is chain membership, ie who is allowed to transact on the chain.","ts":"1481124999.000460"},{"type":"message","user":"U0Y14MWA2","text":"Client\/peer membership or orderer membership?","ts":"1481125048.000461"},{"type":"message","user":"U0XPR4NP4","text":"Client\/peer membership is the must have.  There's also the requirement to support chain creation which is a variation on that theme.","ts":"1481125094.000462"},{"type":"message","user":"U0XPR4NP4","text":"For Kafka, we will support orderer membership changes, but for SBFT I think we could say orderer membership changes are not allowed.","ts":"1481125123.000463"},{"type":"message","user":"U0Y14MWA2","text":"Chain creation seems irrelevant for pbft","ts":"1481125128.000464"},{"type":"message","user":"U0XPR4NP4","text":"Why is that?","ts":"1481125148.000465"},{"type":"message","user":"U0Y14MWA2","text":"It is used only for confidentiality and that does not make much sense in the Byz model","ts":"1481125164.000466"},{"type":"message","user":"U0Y14MWA2","text":"As Byz orderer can leak over channels as it pleases","ts":"1481125191.000467"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I agree the use case is a little fuzzy for multi-chain and byzantine.  But, it comes essentially 'for free', so I don't see any reason to explicitly disallow it.","ts":"1481125248.000468"},{"type":"message","user":"U0Y14MWA2","text":"It is not really for free","ts":"1481125261.000469"},{"type":"message","user":"U0Y14MWA2","text":"It requires a lot of acounting","ts":"1481125275.000470"},{"type":"message","user":"U0Y14MWA2","text":"Unless somebody else takes care of this","ts":"1481125286.000471"},{"type":"message","user":"U0XPR4NP4","text":"Right, this is a common component that sbft does not need to handle","ts":"1481125298.000472"},{"type":"message","user":"U0Y14MWA2","text":"And pbft just forwards metadata around","ts":"1481125305.000473"},{"type":"message","user":"U0Y14MWA2","text":"Effectively multiplexing channels","ts":"1481125314.000474"},{"type":"message","user":"U0XPR4NP4","text":"There's nothing which prevents the consensus algorithm from multiplexing channels if it so desires.  However, I do think that would be a lot of work.  The easiest way to handle it would simply be to run an instance of sbft per channel.","ts":"1481125381.000475"},{"type":"message","user":"U0XPR4NP4","text":"<@U1B2FF8LR> <https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1481124853000459>\n\nWhat event are you looking for? The only events I'm aware of are events encoded in transactions, which are processed when the transaction is committed to the chain.","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1481124853000459","fallback":"[December 7th, 2016 7:34 AM] scottz: <@U0XPR4NP4> Can we expect that an event notification be raised for every transaction, ordered or not, including failures such as these lost messages (especially since we had already ack'd them)?","ts":"1481124853.000459","author_subname":"scottz","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"<@U0XPR4NP4> Can we expect that an event notification be raised for every transaction, ordered or not, including failures such as these lost messages (especially since we had already ack'd them)?","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/scottz","author_icon":"https:\/\/avatars.slack-edge.com\/2016-09-30\/86107832054_1565fc143c1923c9f3bd_48.jpg","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1481125429.000476"},{"type":"message","user":"U0XQ35CDD","text":"(And to that question, I would also add: Where would you like to see that notification raised? Locally on the orderer, or relayed to the client somehow?)","ts":"1481125527.000478"},{"type":"message","user":"U0Y14MWA2","text":"If we have channels in bft for performance reasons (not to order everything on a single chain) then channels make more sense","ts":"1481125647.000479"},{"type":"message","user":"U0Y14MWA2","text":"But i see prevalent mention of multi chain for confidentialty and there it does not make sense","ts":"1481125675.000480","reactions":[{"name":"+1","users":["U0XQ35CDD"],"count":1}]},{"type":"message","user":"U0Y14MWA2","text":"In the bft case","ts":"1481125688.000481"},{"type":"message","user":"U0XPR4NP4","text":"Totally agree, BFT + Multichain Confidentiality does not make sense.","ts":"1481125753.000482"},{"type":"message","user":"U0ZR63HLK","text":"+1","ts":"1481125761.000483"},{"type":"message","user":"U1B2FF8LR","text":"The client should be able to get success and failure notiications for every transaction. Success case is when the transaction is written to the ledger. Failure cases abound everywhere, in orderer system and in peers whereever they may get dropped or determinied invalid. Picture in my mind says when the transaction object is destroyed (after dropping from a queue, or more simply inside error-checking code after being determined to have the wrong signatures, or whenever) it could raise a failure event - and yes that must be forwarded to client.","ts":"1481126440.000484"},{"type":"message","user":"U1B2FF8LR","text":"The ACK you mentioned signifies simply being submitted for ordering. We need to know  whether it gets written to ledger, or not.","ts":"1481126523.000485"},{"type":"message","user":"U0XQ35CDD","text":"Right, that goes back to our discussion earlier. This piece of code will need some reworking.","ts":"1481126542.000486"},{"type":"message","user":"U0XQ35CDD","text":"And to play devil's advocate here for a second, couldn't you argue that you know whether it gets written to the ledger by actually reading the ledger? (Via a Deliver call.)","ts":"1481126665.000487"},{"type":"message","user":"U1B2FF8LR","text":"ah, and how long should I wait before reading the ledger? sounds like v0.5 again.","ts":"1481126753.000490"},{"type":"message","user":"U1B2FF8LR","text":"how long is \"long enough that it should have been written by now\" ?","ts":"1481126826.000491"},{"type":"message","user":"U1B2FF8LR","text":"so, no, that logic is not a usable solution...","ts":"1481126876.000492"},{"type":"message","user":"U0XQ35CDD","text":"Wonderful. As you'll see from last night's conversation, I have argued for a proper ACK mechanism.","ts":"1481126910.000493"},{"type":"message","user":"U0XPR4NP4","text":"<@U1B2FF8LR> I'm still not sure how\/where you would like to get events? The client may send a message and then disconnect.  Where do events go? How long are they persisted? Who is authorized to read them?","ts":"1481127016.000494"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XQ35CDD> I will try to implement that proper ack today","ts":"1481127118.000495"},{"type":"message","user":"U1B2FF8LR","text":"Hmm. So do we agree that it needs to be done? Your questions are about requirements and implementation. I admit I am not sure exactly what the behavior should be or what is feasible. I believe Jim Zhang and his sdk dev team is implementing event system. I expect that test\/applic code should be able to register for events either per-transaction or per-transaction-type or for all failurs or all successes or who knows what. (I do not know the details of the planned API or the implementation, and whether they are using the event-listener or something else.  Does the SDK attach to the Tx a list of interested parties to be notified? Or is there a defined port used? I guess I should get talking to them.)","ts":"1481129597.000496"},{"type":"message","user":"U1B2FF8LR","text":"Nevertheless, whatever is implemented in SDK will depend on the rest of fabric code being able to handle transactions reliably through to completion - whether successfully written to ledger, or graceful failures due to error checks or validation etc, or even ungraceful failure such as dropped msg.","ts":"1481129601.000497"},{"type":"message","user":"U0XPR4NP4","text":"Ah, so this is about the SDK, I had assumed it was about the orderer.  That makes more sense.  I will fix the orderer so that it only ACKs after the message is truly 'in consensus'.  However, if the system is reconfigured between transaction ingress and transaction egresss (into a block), I'm not sure of any course of action to take other than log it and 'throw it away'.","ts":"1481129785.000498"},{"type":"message","user":"U0XPR4NP4","text":"This should be an exceedingly rare event though, as it's only an issue during chain reconfiguration.","ts":"1481129852.000499"},{"type":"message","user":"U1B2FF8LR","text":"can you clarify \"chain reconfiguration\" use-cases that hit this window? Is it specifically when a chain-config transaction to remove a user (or peer?) is closely preceded by a transaction removing that particular user or peer? Or other use cases?","ts":"1481130824.000500"},{"type":"message","user":"U0XPR4NP4","text":"<@U1B2FF8LR> Maybe a good example would be a certificate which gets revoked. \n\n1. Admin revokes a certificate, and pushes a configuration transaction with this revocation\n2. Orderer pre-validates the config transactions and sends it to be ordered\n3. User submits a transaction signed with the revoked certificate\n4. Orderer pre-validates the transaction (returning a `SUCCESS` status) and sends it to be ordered, as the configuration has not been applied yet\n5. Orderer has ordered the config transaction, and applies the new configuration, revoking that cert\n6. Orderer has ordered the user transaction and does final validation before including it in a block, and realizes this transaction is no longer valid, so, the orderer logs the anomoly  (in general, pre-filtering and final validation should always return the same result, unless the config changes in between) and discards the transaction","edited":{"user":"U0XPR4NP4","ts":"1481134542.000000"},"ts":"1481134505.000501"},{"type":"message","user":"U1B2FF8LR","text":"<@U0XPR4NP4>  Right; that seems like a better description of the scenario I was trying to say. \"Revoking privileges of userX at same time that userX proposes a transaction\" is a direct-impact specific use-case that I can accept, because we are trying to stop that user's transactions anyways. I guess what I am asking is: is there something potentially more common or wide-impacting? something with indirect impact, as a result of changing something that is referenced from the transaction payload header? For example, could we lose all queued pre-validated transactions on a chain if that chain's  policy is modified? I don't think so, unless the chainID actually changes somehow when you reconfigure the chain ...","ts":"1481137002.000503"},{"type":"message","user":"U0XPR4NP4","text":"<@U1B2FF8LR> It's certainly possible to construct a policy change which could cause all queued transactions to be discarded, for instance, set the authorized writers to the empty set.  Though I don't know why anyone would do that.  The only thing that comes to mind as a possibly more common case is if a transaction is detected as a replay attack because it is in the wrong epoch.  It's possible that a transaction enters the system during one epoch, and the epoch advances before the transaction is ordered, so it is no longer valid when it comes time to apply.  Assuming the SDK sets the epoch correctly, this hopefully won't be an issue, and as I said, we have not implemented this yet.","ts":"1481139010.000504"},{"user":"U2VGK3JF5","text":"<@U2VGK3JF5|mmayorivera> has joined the channel","type":"message","subtype":"channel_join","ts":"1481146627.000505"},{"type":"message","user":"U2VGK3JF5","text":"hi there","ts":"1481146785.000506"},{"type":"message","user":"U2VGK3JF5","text":"anybody can give a nice simple way to implement consensus PBFT?","ts":"1481146831.000507"},{"type":"message","user":"U0XQ35CDD","text":"Simple and PBFT don't really go hand in hand. For an implementation in the previous architecture, checkout the v0.6 branch and look into `consensus\/pbft`. For an implementation in the new architecture that's still a WIP, checkout `orderer\/sbft` in the master branch.","ts":"1481152123.000508"},{"type":"message","user":"U2VGK3JF5","text":"thanks, I will","ts":"1481159904.000509"},{"type":"message","user":"U0UGH3X7X","text":"scrum ...","ts":"1481209275.000510"},{"text":"<@U0UGH3X7X|tuand> has started a Google+ Hangout for this channel. <https:\/\/hangouts.google.com\/hangouts\/_\/q54kpv7kancaxmbmcl4hicxupie|Join Hangout>.","username":"hangouts","bot_id":"B0UKUAJ0Y","type":"message","subtype":"bot_message","ts":"1481209306.000511"},{"user":"U3BQF48RE","text":"<@U3BQF48RE|oliverledger> has joined the channel","type":"message","subtype":"channel_join","ts":"1481231772.000512"},{"type":"message","user":"U0KN2SSKE","text":"Any issues in moving orderer\/util to protos\/utils?  I need the same functions to create test blocks on the peer side","ts":"1481289775.000513"},{"type":"message","user":"U0UGH3X7X","text":"np ... i'll get a changeset going","ts":"1481293076.000514"},{"type":"message","user":"U2VGK3JF5","text":"anybody knows what \"CAE=\" in consensusMetadata means???","edited":{"user":"U2VGK3JF5","ts":"1481318548.000000"},"ts":"1481318537.000515"},{"type":"message","user":"U2VGK3JF5","text":"and also any good example of event handling in 0.6 and 1???","ts":"1481318585.000517"},{"type":"message","user":"U2VGK3JF5","text":"please.....","ts":"1481318588.000518"},{"type":"message","user":"U0XPR4NP4","text":"<@U2VGK3JF5> This (the consensus metadata) is likely the marshaled PBFT sequence number","edited":{"user":"U0XPR4NP4","ts":"1481320390.000000"},"ts":"1481320000.000519"},{"type":"message","user":"U0XPR4NP4","text":"It is intended to be opaque to non-consensus components","ts":"1481320040.000521"},{"type":"message","user":"U0XPR4NP4","text":"(As it could vary by consensus implementation)","ts":"1481320046.000522"},{"type":"message","user":"U0UGH3X7X","text":"scrum ...","ts":"1481554841.000524"},{"type":"message","user":"U0XQ35CDD","text":"Link?","ts":"1481554881.000525"},{"text":"<@U0UGH3X7X|tuand> has started a Google+ Hangout for this channel. <https:\/\/hangouts.google.com\/hangouts\/_\/2fjvq6xp6vf37g3fo3sonolvtme|Join Hangout>.","username":"hangouts","bot_id":"B0UKUAJ0Y","type":"message","subtype":"bot_message","ts":"1481554885.000526"},{"type":"message","subtype":"file_share","text":"<@U0N1D1UAE|bcbrock> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/bcbrock\/F3DRVNT34\/screen_shot_2016-12-12_at_4.32.25_pm.png|Screen Shot 2016-12-12 at 4.32.25 PM.png>","file":{"id":"F3DRVNT34","created":1481582034,"timestamp":1481582034,"name":"Screen Shot 2016-12-12 at 4.32.25 PM.png","title":"Screen Shot 2016-12-12 at 4.32.25 PM.png","mimetype":"image\/png","filetype":"png","pretty_type":"PNG","user":"U0N1D1UAE","editable":false,"size":342959,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3DRVNT34\/screen_shot_2016-12-12_at_4.32.25_pm.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3DRVNT34\/download\/screen_shot_2016-12-12_at_4.32.25_pm.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_64":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F3DRVNT34-b02de37985\/screen_shot_2016-12-12_at_4.32.25_pm_64.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_80":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F3DRVNT34-b02de37985\/screen_shot_2016-12-12_at_4.32.25_pm_80.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F3DRVNT34-b02de37985\/screen_shot_2016-12-12_at_4.32.25_pm_360.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360_w":360,"thumb_360_h":161,"thumb_480":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F3DRVNT34-b02de37985\/screen_shot_2016-12-12_at_4.32.25_pm_480.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_480_w":480,"thumb_480_h":215,"thumb_160":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F3DRVNT34-b02de37985\/screen_shot_2016-12-12_at_4.32.25_pm_160.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F3DRVNT34-b02de37985\/screen_shot_2016-12-12_at_4.32.25_pm_720.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720_w":720,"thumb_720_h":322,"thumb_960":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F3DRVNT34-b02de37985\/screen_shot_2016-12-12_at_4.32.25_pm_960.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_960_w":960,"thumb_960_h":430,"thumb_1024":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F3DRVNT34-b02de37985\/screen_shot_2016-12-12_at_4.32.25_pm_1024.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_1024_w":1024,"thumb_1024_h":458,"image_exif_rotation":1,"original_w":1890,"original_h":846,"permalink":"https:\/\/hyperledgerproject.slack.com\/files\/bcbrock\/F3DRVNT34\/screen_shot_2016-12-12_at_4.32.25_pm.png","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F3DRVNT34-afa208e1e7","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0N1D1UAE","upload":true,"display_as_bot":false,"username":"<@U0N1D1UAE|bcbrock>","bot_id":null,"ts":"1481582037.000527"},{"type":"message","user":"U0XQ35CDD","text":"So, Bishop's graph above shows the flow control that is performed by HTTP\/2 (<https:\/\/http2.github.io\/http2-spec\/#FlowControl>) when pushing messages down a system that performs no flow control on its own (other than to block when its queue is full, as is the case with the Kafka orderer). Notice how the latency (between transmission and reception) settles to a steady state after a while.","edited":{"user":"U0XQ35CDD","ts":"1481583678.000000"},"ts":"1481583673.000528"},{"type":"message","user":"U0XQ35CDD","text":"The argument here is that since flow control is being handled at the underlying layer, we should not worry about it on the application layer. This is w\/r\/t to the work that's being done on the broadcasting side to fix some of the issues on the common component.","edited":{"user":"U0XQ35CDD","ts":"1481583768.000000"},"ts":"1481583690.000531"},{"type":"message","user":"U0XQ35CDD","text":"(<@U0N1D1UAE> please correct me if I'm misrepresenting things here.)","ts":"1481583958.000535"},{"type":"message","user":"U0XQ35CDD","text":"I'm thinking about this and I think I'm sold. Given the graph above, do we still have good reasons for wanting to do flow control on the app layer? I may be missing something. ","edited":{"user":"U0XQ35CDD","ts":"1481585993.000000"},"ts":"1481584034.000536"},{"type":"message","user":"U0N1D1UAE","text":"One other piece of info. is needed for the proof: In this run, 200K TX were broadcast and delivered. It took between 35 and 40 seconds. If the broadcast queue is of size 200K, the broadcast of 200K TX will complete in 10 seconds. Also note that broadcast and deliver clients are separate, completely independent processes. This and the above show that the underlying protocols are handling the flow control.","ts":"1481584136.000538"},{"type":"message","user":"U0Y14MWA2","text":"if I am reading well the same would apply to (s)bft?","ts":"1481588450.000540"},{"type":"message","user":"U0Y14MWA2","text":"I am asking in the context of <@U0XRC0KLH> out-to-lunch tests :wink: <https:\/\/github.com\/bft-smart\/library\/issues\/27>","attachments":[{"service_name":"GitHub","title":"DefaultRecoverable doesn&#39;t seem to deal with nodes going out-to-lunch and then returning \u00b7 Issue #27 \u00b7 bft-smart\/library \u00b7 GitHub","title_link":"https:\/\/github.com\/bft-smart\/library\/issues\/27","text":"I've written a simple test application with BFT-Smart, as a warmup for doing something real. This application consists in: (a) a simple client that sends \"commands\" consisting of some fixed amount...","fallback":"GitHub: DefaultRecoverable doesn't seem to deal with nodes going out-to-lunch and then returning \u00b7 Issue #27 \u00b7 bft-smart\/library","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/1755771?v=3&s=400","from_url":"https:\/\/github.com\/bft-smart\/library\/issues\/27","thumb_width":420,"thumb_height":420,"service_icon":"https:\/\/a.slack-edge.com\/bfaba\/img\/unfurl_icons\/github.png","id":1}],"ts":"1481588639.000541"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XQ35CDD> <@U0N1D1UAE> ^^","ts":"1481588764.000543"},{"type":"message","user":"U0Y14MWA2","text":"can a Byz HTTP\/2 sender somehow circumvent this flow control?","ts":"1481588840.000544"},{"type":"message","user":"U0Y14MWA2","text":"(if so this attack would be relevant to Kafka as well)","ts":"1481588986.000545"},{"type":"message","user":"U0N1D1UAE","text":"I assume a malicious implementation of GPRC could ignore the HTTP\/2 flow control. I don\u2019t know what would happen in that case.","ts":"1481589130.000546"},{"type":"message","user":"U0XQ35CDD","text":"Good point. The only reference to this on the HTTP\/2 spec is on Section 10.5 (talking about the abuse of WINDOW_UPDATE). Based on what I'm reading here <https:\/\/www.imperva.com\/docs\/Imperva_HII_HTTP2.pdf>, it comes down to whether the HTTP\/2 server is implemented in a way that addresses this concern.","edited":{"user":"U0XQ35CDD","ts":"1481595282.000000"},"ts":"1481589562.000547"},{"type":"message","user":"U0XQ35CDD","text":"&gt; In at least two cases we found HTTP\/2 implementations that specifically failed to account for the typical traps designers warn about. See Flow Control DoS, Dependency Cycle. One example is an attack based on abuse of the flow control WINDOW_UPDATE for DoS attacks, which was specifically warned about...","ts":"1481589582.000548"},{"type":"message","user":"U0XQ35CDD","text":"So then the question is whether gRPC addresses that.","ts":"1481589596.000549"},{"type":"message","user":"U0XQ35CDD","text":"(And I can see an argument in favor of flow control in the app layer being that we don't want to be married to how the underlying framework servers HTTP\/2 requests, but I would argue that whatever framework we choose _should_ address this.)","ts":"1481589726.000550"},{"type":"message","user":"U0XQ35CDD","text":"Anyway, I'll look into gRPC.","ts":"1481589736.000551"},{"type":"message","user":"U0Y14MWA2","text":"thks","ts":"1481589806.000552"},{"type":"message","user":"U0XPR4NP4","text":"<@U0N1D1UAE> <@U0XQ35CDD> Which flow control mechanism was this, is this pre or post <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3185\/> ?","ts":"1481590353.000553"},{"type":"message","user":"U0N1D1UAE","text":"<@U0XPR4NP4> I am trying to argue that neither the broadcast nor deliver protocols require explicit flow control (windows). The experiment above was using Kosta\u2019s code <https:\/\/github.com\/kchristidis\/fabric\/tree\/fab-819-preview>","attachments":[{"service_name":"GitHub","title":"kchristidis\/fabric","title_link":"https:\/\/github.com\/kchristidis\/fabric\/tree\/fab-819-preview","text":"Blockchain fabric code","fallback":"GitHub: kchristidis\/fabric","thumb_url":"https:\/\/avatars2.githubusercontent.com\/u\/14876848?v=3&s=400","from_url":"https:\/\/github.com\/kchristidis\/fabric\/tree\/fab-819-preview","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1481591761.000554"},{"type":"message","user":"U0N1D1UAE","text":"In the experiment the flow control that was eliminated was here: <https:\/\/github.com\/kchristidis\/fabric\/blob\/fab-819-preview\/orderer\/common\/broadcast\/broadcast.go#L142>","attachments":[{"service_name":"GitHub","title":"kchristidis\/fabric","title_link":"https:\/\/github.com\/kchristidis\/fabric\/blob\/fab-819-preview\/orderer\/common\/broadcast\/broadcast.go#L142","text":"Blockchain fabric code","fallback":"GitHub: kchristidis\/fabric","thumb_url":"https:\/\/avatars2.githubusercontent.com\/u\/14876848?v=3&s=400","from_url":"https:\/\/github.com\/kchristidis\/fabric\/blob\/fab-819-preview\/orderer\/common\/broadcast\/broadcast.go#L142","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1481591849.000556"},{"type":"message","user":"U0N1D1UAE","text":"Where the broadcast server sends an error response if it\u2019s queue overflows. Instead, we simply let the broadcast server block.","ts":"1481591908.000558"},{"type":"message","user":"U0XQ35CDD","text":"(<@U0XPR4NP4>: The point here being that the work in 3185 may not be necessary, and instead we move back to a simpler model, similar to the one that I wrote for the Kafka orderer originally, pre- common components)","edited":{"user":"U0XQ35CDD","ts":"1481600359.000000"},"ts":"1481592467.000559"},{"type":"message","user":"U0N1D1UAE","text":"<@U0XQ35CDD> My reading of the Go grpc code is that it does check the window limits, and will close the connection or stream as appropriate according to which window size was violated. I\u2019ve hacked the http2_client to behave badly and gotten the http2:ErrCodeFlowControl == codes.ResourceExhausted error (although it did not manifest how I might have expected, so I may not have hacked it correctly.)","ts":"1481593750.000565"},{"type":"message","user":"U0XQ35CDD","text":"Ah, excellent. I also opened an issue on the gRPC-go repo to get confirmation of this behavior.","ts":"1481595503.000568"},{"type":"message","user":"U0XPR4NP4","text":"<@U0N1D1UAE> <@U0XQ35CDD> Sounds promising.  Seems like it might be a clear win for broadcast, though would like to think on this a little more.  On deliver, getting rid of the window size seems a little more problematic without other API changes, as the window size allows a client to do something like \"retrieve blocks 3-7\" without the server attempting to deliver blocks \"3 until the gRPC buffer fills up\".  Maybe the right answer is to just modify the API to more explicitly support this though.","ts":"1481598961.000569"},{"type":"message","user":"U0XPR4NP4","text":"Since this buffer is at the HTTP2 layer, I assume that the buffer is shared for the whole stream? IE, 10x the broadcast calls does not give you 10x the window (which sounds like yet another advantage.)","edited":{"user":"U0XPR4NP4","ts":"1481599192.000000"},"ts":"1481599186.000570"},{"type":"message","user":"U0XPR4NP4","text":"Okay, my gut reaction is to kill windows in both broadcast and deliver, then  modify the Deliver API to require explicit ranges (start and end).  Where it would be simple to specify the end as `^uint64(0)` to receive blocks indefinitely.   This seems easier for a client to implement, and assuming HTTP2\/gRPC handles the windowing for us, more efficient than the API as it stands.","ts":"1481600078.000572"},{"type":"message","user":"U0XPR4NP4","text":"(Will continue to think on this though)","ts":"1481600093.000573"},{"type":"message","user":"U0ZR63HLK","text":"Hi <@U0UGH3X7X> <@U0XPR4NP4> <@U0XQ35CDD>, shall we start a discussion on how to integrate the MSP into the orderers. I think, it is a good time now. After the discussion I expect I can give you a way to sign messages with the default identity and have support for access control at chain creation and once a chain is created. Please, let me know :slightly_smiling_face:","edited":{"user":"U0ZR63HLK","ts":"1481618847.000000"},"ts":"1481618732.000575"},{"type":"message","user":"U12AHQ3NK","text":"Hi..Does ordering service uses PBFT?","ts":"1481631377.000577"},{"type":"message","user":"U1AU8DRQR","text":"<@U12AHQ3NK> in v0.6 or in \"master\"?","ts":"1481632331.000578"},{"type":"message","user":"U1AU8DRQR","text":"in v0.6 we have PBFT but also have a noops orderer (as I remember it is a 1 node orderer which orders by the time of requests)\nin \"master\" we have solo, kafka, and sbft (that is Work In Progress)","ts":"1481632456.000579"},{"user":"U2W7U5UA3","text":"<@U2W7U5UA3|pd93> has joined the channel","type":"message","subtype":"channel_join","ts":"1481635360.000580"},{"user":"U3EQM2RPZ","text":"<@U3EQM2RPZ|karlkay> has joined the channel","type":"message","subtype":"channel_join","ts":"1481638068.000581"},{"type":"message","user":"U0ZR63HLK","text":"<@U0XPR4NP4>, <@U0XQ35CDD> <@U0Y14MWA2> how the validity of a block is verified? May you give me a pointer to the code?","ts":"1481639064.000582"},{"type":"message","user":"U0Y14MWA2","text":"What do you subsume under validity of a block","ts":"1481639099.000583"},{"type":"message","user":"U0Y14MWA2","text":"Endosrment policy validation \/ vscc or sth else?","ts":"1481639168.000584"},{"type":"message","user":"U0ZR63HLK","text":"that it is signed but enough orderers, I guess","ts":"1481639300.000585"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZR63HLK> Since blocks aren't signed yet, they aren't verified.","ts":"1481639429.000586"},{"type":"message","user":"U0XPR4NP4","text":"We'll create a policy with a name like `BlockValidator` or something like that, which can be applied to the signatures over a block to check for validity.","ts":"1481639460.000587"},{"type":"message","user":"U0ZR63HLK","text":"I ask, because for gossip I should provide a VerifyBlock method","ts":"1481639530.000588"},{"type":"message","user":"U0ZR63HLK","text":"but the implementation will mostly come from you guys, I was thinking this morning","ts":"1481639552.000589"},{"type":"message","user":"U12AHQ3NK","text":"<@U1AU8DRQR> master","ts":"1481639564.000590"},{"type":"message","user":"U0ZR63HLK","text":"okay, I will wait then. If help is needed let me know","edited":{"user":"U0ZR63HLK","ts":"1481639862.000000"},"ts":"1481639568.000591"},{"user":"U3DB4L15G","text":"<@U3DB4L15G|svergara> has joined the channel","type":"message","subtype":"channel_join","ts":"1481639870.000593"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZR63HLK> Yeah, I think this should be pretty simple for you, we'll encode a policy in the chain config block, you'll just pass the signature set into the policy and it will return nil or an error to let you know if the block is valid.","ts":"1481641404.000594"},{"type":"message","user":"U0ZR63HLK","text":"do you mean that different chains might have different block policies?","ts":"1481641451.000595"},{"type":"message","user":"U0XPR4NP4","text":"I wouldn't expect for them to out of the gate,  but I would certainly plan to allow that.  Especially once you consider that there's no reason a peer couldn't subscribe to multiple ordering services.","ts":"1481641502.000596"},{"type":"message","user":"U0ZR63HLK","text":"got it, let's start anyway from the simple scenario :slightly_smiling_face:","ts":"1481641534.000597"},{"type":"message","user":"U0XPR4NP4","text":"<@U0XQ35CDD> <@U0N1D1UAE> <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3253\/> This removes the queuing entirely from broadcast, I'll open another story and remove the windowing from Deliver as well","ts":"1481643635.000598","reactions":[{"name":"+1","users":["U0XQ35CDD"],"count":1}]},{"type":"message","user":"U0XPR4NP4","text":"After some additional thought, I also realized where the idea of the queues and windowing came from.  In 0.5\/0.6 we were sharing a common gRPC stream between components, which meant that blocking on a gRPC call could cause the stream to fill up, and starve other components, (and lead to deadlocks).  Since we have the clearer separation of concerns in v1, this should no longer be an issue.","ts":"1481643823.000599"},{"type":"message","user":"U0Y14MWA2","text":"<@U0ZR63HLK> signatures in sbft can be found in checkpoint.go","ts":"1481645516.000600"},{"type":"message","user":"U0Y14MWA2","text":"and from there you could try \"find all references\" if your ide supports it","ts":"1481645544.000601"},{"type":"message","user":"U0ZR63HLK","text":"aha, great","ts":"1481645693.000602"},{"type":"message","user":"U0ZR63HLK","text":"I can have a look at that","ts":"1481645705.000603"},{"type":"message","user":"U0ZR63HLK","text":"do we expect that sbft, kafka, etc will have the same way to validate a block?","edited":{"user":"U0ZR63HLK","ts":"1481645749.000000"},"ts":"1481645741.000604"},{"type":"message","user":"U0Y14MWA2","text":"they will have a different one","ts":"1481645760.000606"},{"type":"message","user":"U0Y14MWA2","text":"but conceptually the idea should be that peer calls a sth like consensus.verifyBlock funciton","ts":"1481645788.000607"},{"type":"message","user":"U0Y14MWA2","text":"which needs to be implemented by every consensus implementation","ts":"1481645800.000608"},{"type":"message","user":"U0Y14MWA2","text":"some will have one signature to verify","ts":"1481645808.000609"},{"type":"message","user":"U0XPR4NP4","text":"<@U0Y14MWA2> We have a generic mechanism for this","ts":"1481645809.000610"},{"type":"message","user":"U0Y14MWA2","text":"some f+1","ts":"1481645810.000611"},{"type":"message","user":"U0Y14MWA2","text":"some 2f+1","ts":"1481645815.000612"},{"type":"message","user":"U0Y14MWA2","text":"which one?","ts":"1481645830.000613"},{"type":"message","user":"U0XPR4NP4","text":"We have signature policies, where you can require \"N out of {set of signatures}\"","ts":"1481645853.000614"},{"type":"message","user":"U0XPR4NP4","text":"For the CFT case, N is 1, for the BFT case, N can be set to f+1 or 2f+1","ts":"1481645869.000615"},{"type":"message","user":"U0Y14MWA2","text":"how is this different from what I mentioned? :slightly_smiling_face:","ts":"1481645883.000616"},{"type":"message","user":"U0XPR4NP4","text":"I mean simply that from a consumer's point of view, they simply get the block validation policy, and evaluate it","ts":"1481645905.000617"},{"type":"message","user":"U0XPR4NP4","text":"They should not need to worry about the implementation","ts":"1481645915.000618"},{"type":"message","user":"U0ZR63HLK","text":"so, to validate a block, I need to know the channel it refers to and then I can apply the policy to the block, correct?","ts":"1481645915.000619"},{"type":"message","user":"U0ZR63HLK","text":"The block itself does not tell me to which channel it belongs to, correct?","ts":"1481645928.000620"},{"type":"message","user":"U0XPR4NP4","text":"The block will tell you which channel it belongs to","ts":"1481645937.000621"},{"type":"message","user":"U0Y14MWA2","text":"you seem to be simplifying implementation of the policy for a consensus implementaiton","ts":"1481645942.000622"},{"type":"message","user":"U0Y14MWA2","text":"that is fine","ts":"1481645944.000623"},{"type":"message","user":"U0XPR4NP4","text":"Because all blocks are non-empty","ts":"1481645945.000624"},{"type":"message","user":"U0Y14MWA2","text":"but is still a different implementation","ts":"1481645949.000625"},{"type":"message","user":"U0XPR4NP4","text":"And all transactions contain a chainID","ts":"1481645951.000626"},{"type":"message","user":"U0ZR63HLK","text":"I'm asking because gossip needs that","ts":"1481645978.000627"},{"type":"message","user":"U0XPR4NP4","text":"So, you may simply open up the first transaction and check its chainID, there is a utility method for this in `protos\/utils` I believe","ts":"1481645981.000628"},{"type":"message","user":"U0Y14MWA2","text":"does this policy-oriented implementation account for threshold sigs?","ts":"1481645998.000629"},{"type":"message","user":"U0ZR63HLK","text":"great","ts":"1481646000.000630"},{"type":"message","user":"U0XPR4NP4","text":"<@U0Y14MWA2> This is a better question for <@U0ZR63HLK> \/ <@U1BC5A0F9> but, my understanding is that it should be adaptable,  The `Policy` is also an extensible type, today the types are `oneof { SignaturePolicy }` but, we can add other policy types as well.","ts":"1481646083.000631"},{"type":"message","user":"U0ZR63HLK","text":"for my understanding Jason's policy framework is generic enough to handle also threshold sigs","ts":"1481646129.000632"},{"type":"message","user":"U0ZR63HLK","text":"I like it :slightly_smiling_face:","ts":"1481646130.000633"},{"type":"message","user":"U0Y14MWA2","text":"I do not see threshold coming for v1 but certainly sth that might be possible down the road","ts":"1481646140.000634"},{"type":"message","user":"U0Y14MWA2","text":"Jason, we need to \"sit down\" and open a set of issues for merging sbft with common","ts":"1481646162.000635"},{"type":"message","user":"U0Y14MWA2","text":"the code is about to be ready for this...","ts":"1481646179.000636"},{"type":"message","user":"U0Y14MWA2","text":"by the way I am not a fan of the name sbft","ts":"1481646197.000637"},{"type":"message","user":"U0Y14MWA2","text":"it is really spbft","ts":"1481646208.000638"},{"type":"message","user":"U0Y14MWA2","text":"if s is to be kept at all","ts":"1481646220.000639"},{"type":"message","user":"U0Y14MWA2","text":"anyway I could use a walk through common to understand all the merge points","ts":"1481646292.000640"},{"type":"message","user":"U0XPR4NP4","text":"<@U0Y14MWA2> Yes, would be happy to do this, would like to get the full flow of solo\/kafka working first, so that we don't have to communicate changes.  I think we are close though.","ts":"1481647004.000641"},{"type":"message","user":"U0N1D1UAE","text":"<@U0XPR4NP4> <@U0XQ35CDD> Guys I apologize for any misunderstanding, I don\u2019t believe I said that removing explicit flow control would improve performance, only that it would make things simpler. Also I am confused about  <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3253\/> if applied to the current master branch it will not affect the Kafka orderer. Am I supposed to try this against on of Kostas\u2019 private branches ? If so which one?","ts":"1481650788.000642"},{"type":"message","user":"U0Y14MWA2","text":"inutively performance cannot be worse","ts":"1481650891.000643"},{"type":"message","user":"U0Y14MWA2","text":"and likely would be better","ts":"1481650904.000644"},{"type":"message","user":"U0Y14MWA2","text":"so Byz HTTP\/2 sender messing up with flow control is ruled out?","ts":"1481650929.000645"},{"type":"message","user":"U0XQ35CDD","text":"So testing this properly will need some cherry-picking.","ts":"1481651141.000646"},{"type":"message","user":"U0XPR4NP4","text":"<@U0N1D1UAE> Simpler with no performance penalty is still a win in my book, and yes, you'll need to wait to test 3253 and Kafka or apply them both manually","ts":"1481651160.000647"},{"type":"message","user":"U0XQ35CDD","text":"But we can make it straightforward. Let me finish my rebasing this: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3207\/>","ts":"1481651184.000648"},{"type":"message","user":"U0XQ35CDD","text":"Then you checkout 3207 and cherry-pick 3253 on top of it.","ts":"1481651198.000649"},{"type":"message","user":"U0XPR4NP4","text":"For what it's worth, I'm halfway through removing windowing from the deliver code and it is a very significant complexity reduction, with reduced locking as well, which (by intuition only) should improve performance.","edited":{"user":"U0XPR4NP4","ts":"1481651304.000000"},"ts":"1481651227.000650"},{"type":"message","user":"U0XQ35CDD","text":"But I can always do this myself and push to a private repo. In fact, that's what I'll do.","ts":"1481651277.000651"},{"type":"message","user":"U0XQ35CDD","text":"I'll need an hour or so.","ts":"1481651280.000652"},{"type":"message","user":"U0XQ35CDD","text":"I'll post the link here.","ts":"1481651290.000653"},{"type":"message","user":"U0N1D1UAE","text":"<@U0Y14MWA2> So far no one has answered Kostas\u2019 question (about whether Go grpc guarantees to reject windowing violations)","ts":"1481651299.000654"},{"type":"message","user":"U0N1D1UAE","text":"<@U0XQ35CDD> Thanks","ts":"1481651310.000656"},{"type":"message","user":"U0XQ35CDD","text":"For reference: <https:\/\/github.com\/grpc\/grpc-go\/issues\/1020>","attachments":[{"service_name":"GitHub","title":"gRPC server behavior when the client doesn&#39;t respect WINDOW_UPDATE \u00b7 Issue #1020 \u00b7 grpc\/grpc-go \u00b7 GitHub","title_link":"https:\/\/github.com\/grpc\/grpc-go\/issues\/1020","text":"Does the server close the connection in such cases, as it should? Background: [0] <https:\/\/http2.github.io\/http2-spec\/#rfc.section.5.2.1> [1] <https:\/\/www.imperva.com\/docs\/Imperva_HII_HTTP2.pdf> (secti...","fallback":"GitHub: gRPC server behavior when the client doesn't respect WINDOW_UPDATE \u00b7 Issue #1020 \u00b7 grpc\/grpc-go","thumb_url":"https:\/\/avatars2.githubusercontent.com\/u\/14876848?v=3&s=400","from_url":"https:\/\/github.com\/grpc\/grpc-go\/issues\/1020","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/a.slack-edge.com\/bfaba\/img\/unfurl_icons\/github.png","id":1}],"ts":"1481651388.000657"},{"type":"message","user":"U0Y14MWA2","text":"ok I am watching that one now","ts":"1481651621.000659"},{"type":"message","user":"U0Y14MWA2","text":"so if RFC is respected then a GRPC send is (may be) blocking at sender?","ts":"1481652396.000660"},{"type":"message","user":"U0N1D1UAE","text":"Yes. We see that in the latency chart from yesterday. The sender is throttled by the ability of the receiver to process the data.","edited":{"user":"U0N1D1UAE","ts":"1481652528.000000"},"ts":"1481652451.000661"},{"type":"message","user":"U0Y14MWA2","text":"thks","ts":"1481652863.000663"},{"type":"message","user":"U0Y14MWA2","text":"RFC spirit seems to contain Byz sender","ts":"1481652900.000664"},{"type":"message","user":"U0Y14MWA2","text":"but lets wait for the answer","ts":"1481652908.000665"},{"type":"message","user":"U0Y14MWA2","text":"<https:\/\/www.imperva.com\/docs\/Imperva_HII_HTTP2.pdf#IMPERVA_HII_HTTP2_report_0816_V1-4.1.indd%3A.21665%3A691> is very interesting","ts":"1481653923.000666"},{"type":"message","user":"U0Y14MWA2","text":"i wonder how grpc stands with that \"slow read\" attack","ts":"1481653954.000667"},{"type":"message","user":"U0XQ35CDD","text":"We got a response here: <https:\/\/github.com\/grpc\/grpc-go\/issues\/1020>","edited":{"user":"U0XQ35CDD","ts":"1481661564.000000"},"ts":"1481661557.000668"},{"type":"message","user":"U0XQ35CDD","text":"It does take care of it. Besides the links that Menghan included, also check this: <https:\/\/github.com\/grpc\/grpc-go\/blob\/master\/transport\/control.go#L158>","edited":{"user":"U0XQ35CDD","ts":"1481661666.000000"},"ts":"1481661660.000671"},{"type":"message","user":"U0Y14MWA2","text":"thanks Kostas","ts":"1481662352.000674","reactions":[{"name":"+1","users":["U0XQ35CDD"],"count":1}]},{"type":"message","user":"U0Y14MWA2","text":"if any maintainers here I have this <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3273\/>","ts":"1481662371.000675"},{"type":"message","user":"U0ULK2JPP","text":"I don\u2019t dare review this <@U0Y14MWA2> \u2026 <@U0XPR4NP4> you around ? :slightly_smiling_face:","ts":"1481662739.000676"},{"type":"message","user":"U0ULK2JPP","text":"or <@U1AU8DRQR> ?","ts":"1481662750.000677"},{"type":"message","user":"U0Y14MWA2","text":"<@U0ULK2JPP> why? :slightly_smiling_face: there is a nice test! :slightly_smiling_face:","ts":"1481662876.000678"},{"type":"message","user":"U0ULK2JPP","text":"ok, if you put it that way\u2026 let me look :slightly_smiling_face:","ts":"1481662908.000679"},{"type":"message","user":"U0Y14MWA2","text":"inspired by \"real world\", live testing  trace","ts":"1481662912.000680"},{"type":"message","user":"U0Y14MWA2","text":"it's amazing how much interleaving can be produced by a non deterministic test","ts":"1481662941.000681"},{"type":"message","user":"U0Y14MWA2","text":"the trace interleaving was such that it delays all connections to primary who starts alone and then complains about itself - but this leads to a deadlock","edited":{"user":"U0Y14MWA2","ts":"1481663032.000000"},"ts":"1481662984.000682"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ULK2JPP> I can try to take a look in a few, currently running down a different bug","ts":"1481663003.000683"},{"type":"message","user":"U0Y14MWA2","text":"so much fun testing this stuff","ts":"1481663012.000684"},{"type":"message","user":"U0ULK2JPP","text":"thanks Jason","ts":"1481663014.000685"},{"type":"message","user":"U0ULK2JPP","text":"I\u2019ll look but won\u2019t touch then :slightly_smiling_face:","ts":"1481663027.000686"},{"type":"message","user":"U0ULK2JPP","text":"<@U0Y14MWA2> has made it sound fun :slightly_smiling_face:","ts":"1481663047.000688"},{"type":"message","user":"U0Y14MWA2","text":"what can I do - you all ran away from this","ts":"1481663063.000689"},{"type":"message","user":"U0Y14MWA2","text":"leaving me alone","ts":"1481663065.000690"},{"type":"message","user":"U0Y14MWA2","text":"with notable exception of <@U1AU8DRQR>","ts":"1481663079.000691"},{"type":"message","user":"U0Y14MWA2","text":"so I need to make it sound like fun so somebody joins back","ts":"1481663091.000692"},{"type":"message","user":"U1AU8DRQR","text":"I will review everything- but only tomorrow :P as 10 PM here","ts":"1481663137.000693"},{"type":"message","user":"U1AU8DRQR","text":"but it is really fun","ts":"1481663151.000694"},{"type":"message","user":"U0ULK2JPP","text":"`so I need to make it sound like fun so somebody joins back` \u2026 one of these days I hope !","ts":"1481663280.000695","reactions":[{"name":"eyes","users":["U0Y14MWA2"],"count":1}]},{"user":"U112NNFV4","text":"<@U112NNFV4|joshhus> has joined the channel","type":"message","subtype":"channel_join","ts":"1481666409.000696"},{"type":"message","user":"U112NNFV4","text":"Hello, is SBFT Simplified BFT? ... Google reveals a \"Scalable\" BFT already in the literature. HL general indicates that SPFBT is being discussed. Thanks.","ts":"1481666525.000697"},{"user":"U312TN2CS","text":"<@U312TN2CS|nage> has joined the channel","type":"message","subtype":"channel_join","ts":"1481666851.000698"},{"type":"message","user":"U0Y14MWA2","text":"<@U112NNFV4> yes sbft is simplified pbft","edited":{"user":"U0Y14MWA2","ts":"1481667487.000000"},"ts":"1481667455.000699"},{"type":"message","user":"U0Y14MWA2","text":"it may change name to simplepbft spbft or sth else","ts":"1481667470.000700"},{"type":"message","user":"U0Y14MWA2","text":"sbft is not yet carved in the stone","ts":"1481667475.000701"},{"type":"message","user":"U0Y14MWA2","text":"I have another one <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3277\/>","ts":"1481667493.000703"},{"user":"U3DMRHFJ4","text":"<@U3DMRHFJ4|jeno.gocho> has joined the channel","type":"message","subtype":"channel_join","ts":"1481671653.000704"},{"user":"U0Z41KY5V","text":"<@U0Z41KY5V|baohua> has joined the channel","type":"message","subtype":"channel_join","ts":"1481706892.000705"},{"type":"message","user":"U0Z41KY5V","text":"yes, spbft may be better","ts":"1481706945.000706"},{"type":"message","user":"U0Z41KY5V","text":"and is there any discussion on migrating the orderer service outside of fabric code, into some separate one (fabric-order), like fabric-cop?","ts":"1481707000.000707"},{"type":"message","user":"U1AU8DRQR","text":"maybe it would be a good idea to have a separate repo for that code","ts":"1481709461.000708"},{"type":"message","user":"U0Y14MWA2","text":"due to the popular request","ts":"1481715880.000709"},{"type":"message","user":"U0Y14MWA2","text":"differences of (what is currently) sbft wrt pbft","edited":{"user":"U0Y14MWA2","ts":"1481715907.000000"},"ts":"1481715891.000710"},{"type":"message","user":"U0Y14MWA2","text":"<https:\/\/jira.hyperledger.org\/browse\/FAB-378>","ts":"1481715893.000711"},{"type":"message","user":"U0XR6J961","text":"hi","ts":"1481716540.000713"},{"type":"message","user":"U0XR6J961","text":"good bug fixing on sbft","ts":"1481716560.000714"},{"type":"message","user":"U0Y14MWA2","text":"oh well hello","ts":"1481717105.000715"},{"type":"message","user":"U0Y14MWA2","text":"coming back?","ts":"1481717107.000716"},{"type":"message","user":"U0Y14MWA2","text":":wink:","ts":"1481717111.000717"},{"type":"message","user":"U0XR6J961","text":"jira just sent me a message for a commit","ts":"1481717694.000718"},{"type":"message","user":"U0XR6J961","text":"i don't understand the message reordering thing","ts":"1481717710.000719"},{"type":"message","user":"U0XR6J961","text":"messages from every replica should be processed in order, no?","ts":"1481717733.000720"},{"type":"message","user":"U0Y14MWA2","text":"I did not have a chance to dive into that - but experiments say no","ts":"1481717957.000721"},{"type":"message","user":"U0Y14MWA2","text":"I think the bigger dependency of the codebase is that we expect reliable delivery of msgs so long as the connection is up","ts":"1481717979.000722"},{"type":"message","user":"U0Y14MWA2","text":"which is true","ts":"1481717981.000723"},{"type":"message","user":"U0Y14MWA2","text":"and simplifies code","ts":"1481717984.000724"},{"type":"message","user":"U0Y14MWA2","text":"reordering is not so much an issue","ts":"1481717993.000725"},{"type":"message","user":"U0ZJZBJLF","text":"How can you expect reliable delivery of msgs as long as the connection is up? from what I know- gRPC `Send()` method returns when the message is put in the buffers, not when it reaches the other side.\n(I hope I'm not asking out of context here)","edited":{"user":"U0ZJZBJLF","ts":"1481718642.000000"},"ts":"1481718614.000726"},{"type":"message","user":"U0Y14MWA2","text":"I am assuming msg would be delivered from the buffer - so long as the connection is up","ts":"1481718699.000728"},{"type":"message","user":"U0Y14MWA2","text":"(unless the receiver is faulty)","ts":"1481718707.000729"},{"type":"message","user":"U0Y14MWA2","text":"I mean we need some fetaure trom TCP, HTTP\/2","ts":"1481718736.000730"},{"type":"message","user":"U0Y14MWA2","text":"I think this is the one we get","ts":"1481718741.000731"},{"type":"message","user":"U0ZJZBJLF","text":"oh, I see. I thought you were assuming that message is delivered if the `Send` didn't return an error","ts":"1481718751.000732"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XR6J961> reording first appeared across tcp connections wher eit is expected to happen","ts":"1481718800.000733"},{"type":"message","user":"U0Y14MWA2","text":"say primary sends me pre prepare","ts":"1481718808.000734"},{"type":"message","user":"U0Y14MWA2","text":"but by the time I receive tht","ts":"1481718813.000735"},{"type":"message","user":"U0Y14MWA2","text":"I already received all the prepares and commits from others","ts":"1481718822.000736"},{"type":"message","user":"U0XR6J961","text":"yes","ts":"1481718827.000737"},{"type":"message","user":"U0Y14MWA2","text":"this was the source of one bug and has nothing to do with grpc FIFO","ts":"1481718835.000738"},{"type":"message","user":"U0Y14MWA2","text":"in some cases also single channel FIFO failed","ts":"1481718850.000739"},{"type":"message","user":"U0XR6J961","text":"yes, that's why we have the backlog, so that we can compensate for different arrival times","ts":"1481718858.000740"},{"type":"message","user":"U0Y14MWA2","text":"but I am not sure if that is not due to some re-ordering on the receipient side","ts":"1481718868.000741"},{"type":"message","user":"U0Y14MWA2","text":"after grpc","ts":"1481718876.000742"},{"type":"message","user":"U0Y14MWA2","text":"will need to look at that eventually","ts":"1481718884.000743"},{"type":"message","user":"U0XR6J961","text":"okay","ts":"1481718947.000744"},{"type":"message","user":"U0ZR63HLK","text":"Hi <@U0UGH3X7X>, is there a scrum call today?","ts":"1481727087.000745"},{"type":"message","user":"U0UGH3X7X","text":"hey angelo  monday\/Thursday  10AM eastern","ts":"1481727126.000746"},{"type":"message","user":"U0ZR63HLK","text":"okay, I would like to start talking about integration of the MSP","ts":"1481727151.000747"},{"type":"message","user":"U0ZR63HLK","text":"we can do that during the scrum or earlier if you think so","ts":"1481727166.000748"},{"type":"message","user":"U0ZR63HLK","text":"I see that there are other change-set waiting for the merging","ts":"1481727195.000749"},{"type":"message","user":"U0UGH3X7X","text":"yes, many changesets right now :slightly_smiling_face:   let's do it right after the scrum ?","ts":"1481727232.000750"},{"type":"message","user":"U0ZR63HLK","text":"yes, please :slightly_smiling_face:","ts":"1481727241.000751"},{"type":"message","user":"U0ZR63HLK","text":"thanks","ts":"1481727242.000752"},{"type":"message","user":"U12AHQ3NK","text":"in SBFT, how the ordering is being done?","ts":"1481734465.000753"},{"type":"message","user":"U0XQ35CDD","text":"Heads up <@U1AU8DRQR>: `TestMonotonicViews` is causing the master to fail. (`simplebft_test.go:200: Replica 0 must be in view 1, but is in view 2`)","edited":{"user":"U0XQ35CDD","ts":"1481735877.000000"},"ts":"1481735196.000754"},{"type":"message","user":"U0XQ35CDD","text":"When tested locally, the test itself passes. When tested locally along with all the other tests in the `sbft` package, the test fails. I'm guessing (a) there's either an artifact from a previous test that affects the outcome of this one, or (b) the timing constraints are too tight.","ts":"1481735297.000755"},{"type":"message","user":"U1AU8DRQR","text":"Kostas: I can only look at it tomorrow if not a big problem ","ts":"1481738277.000757"},{"type":"message","user":"U1AU8DRQR","text":"I guess \"tests ran too long\" is the problem ","ts":"1481738331.000758"},{"type":"message","user":"U1AU8DRQR","text":"<@U0Y14MWA2> any comments? :)","ts":"1481738354.000759"},{"type":"message","user":"U1AU8DRQR","text":"please add skip to those tests if they block anything urgent","ts":"1481738400.000760"},{"type":"message","user":"U1AU8DRQR","text":"I can +2","ts":"1481738412.000761"},{"type":"message","user":"U1AU8DRQR","text":"<@U0XQ35CDD> ","ts":"1481738419.000762"},{"type":"message","user":"U0Y14MWA2","text":"I will patch it","ts":"1481740805.000763"},{"type":"message","user":"U0Y14MWA2","text":"Its inportant that the second view is not smaller","ts":"1481740819.000764"},{"type":"message","user":"U0Y14MWA2","text":"Which it was","ts":"1481740825.000765"},{"type":"message","user":"U0Y14MWA2","text":"It can be hugher","ts":"1481740835.000766"},{"type":"message","user":"U0Y14MWA2","text":"So != needs to be replaced by less","ts":"1481740865.000767"},{"type":"message","user":"U0Y14MWA2","text":"Will submit in an hour or so","ts":"1481740885.000768"},{"type":"message","user":"U0Y14MWA2","text":"Currently on my mobile","ts":"1481740895.000769"},{"type":"message","user":"U0Y14MWA2","text":"The test itself has this bug ","ts":"1481741016.000770"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XQ35CDD> <@U1AU8DRQR> <@U0XPR4NP4> <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3305\/>","ts":"1481742068.000771"},{"type":"message","user":"U0Y14MWA2","text":"This is probably a first HL fabric commit from a taxi in Madrid","ts":"1481742085.000772","reactions":[{"name":"grin","users":["U0XQ35CDD","U1AU8DRQR"],"count":2},{"name":"+1","users":["U0XPR4NP4","U0UGH3X7X","U1AU8DRQR"],"count":3},{"name":"crown","users":["U0ZJZBJLF"],"count":1}]},{"type":"message","user":"U0XQ35CDD","text":"Excellent, thank you.","ts":"1481742111.000773"},{"type":"message","user":"U0Y14MWA2","text":"<@U12AHQ3NK> please refer to pbft paper (tocs 2002 version) as well as the SBFT vs PBFT diff described in \n\n<https:\/\/jira.hyperledger.org\/browse\/FAB-378>","ts":"1481742204.000774"},{"type":"message","user":"U0Z41KY5V","text":"Hi, is there any discussion on migrating the orderer service outside of fabric code, into some separate one (fabric-orderer), like fabric-cop?","ts":"1481800232.000775"},{"type":"message","user":"U1AU8DRQR","text":"there could be :slightly_smiling_face:","ts":"1481802544.000776"},{"type":"message","user":"U0Z41KY5V","text":"great, gabor, wanna hear more feedbacks to see if we can make it separate soon.","ts":"1481802823.000777"},{"type":"message","user":"U0PB67X4K","text":"<@U0Z41KY5V>  - what exactly are you trying to accomplish?    even today you can run \/ use the ordering service without running any peer nodes.  There's a few shared components under the fabric src tree, but you can definitely build and run it all by itself.","ts":"1481803121.000778"},{"type":"message","user":"U0Z41KY5V","text":"Thanks, gari. As in the new arch, there are mainly several service roles: endoser\/committer\/consenters. I guess it would be somehow nature to decouple a orderer role from a common peer. This may also bring advantage of pluggable order service implementation. How do you think?","ts":"1481803248.000779"},{"type":"message","user":"U0PB67X4K","text":"actually even in the current architecture , orderers are actually entirely different executables \/ code base from the peer code.   If you take a look at the \"common\" components under orderer, you'll actually see that the base \"server\" is entirely different than that of a peer.  And the ordering service is actually pluggable - externally it implements Broadcast and Deliver RPCs.   So as long as your ordering service nodes implement those RPCs, you can plug them in (there's a little more detail in how you need to contract the genesis block as well but again that's common code which ca be shared across different orderer implementations)\n\nSo a peer node can either be an endorser or committer (and endorsers really have to be committers as well for the most part).\n\nOrdering nodes are separate and need to implement the interfaces described above \n\nNow it technically possible that a peer node could be an ordering node but the current code is not implemented that way","ts":"1481804573.000780","reactions":[{"name":"+1","users":["U0XQ35CDD"],"count":1}]},{"type":"message","user":"U0Z41KY5V","text":"Sure garisingh. i also notice that the code base for peer and orderer are different, and also they share not many code base. So think they will evolve into two individual components functionally. Thanks~","ts":"1481806022.000781"},{"type":"message","user":"U0UGH3X7X","text":"scrum ...","ts":"1481814062.000782"},{"text":"<@U0UGH3X7X|tuand> has started a Google+ Hangout for this channel. <https:\/\/hangouts.google.com\/hangouts\/_\/nvzhhad6h5b7lbrnybi4x6k3mye|Join Hangout>.","username":"hangouts","bot_id":"B0UKUAJ0Y","type":"message","subtype":"bot_message","ts":"1481814097.000783"},{"type":"message","user":"U0UGH3X7X","text":"<@U0ZR63HLK> ^^^","ts":"1481814175.000784"},{"type":"message","user":"U0ZR63HLK","text":"oh yes","ts":"1481814408.000785"},{"type":"message","user":"U2DHRR4TE","text":"Some quick questions about the Hyperledger v1 proposal:\n\nWhen we say endorsers check code is 'deterministic' and 'stable', what does this mean?\n\nDoesn't channelling transactions mean the consenters will have different ledgers If not, how are ledgers exchanged between consenters?  How are they kept in sync?\n\nWhen we say consenters 'validate the integrity' of the transaction, what does this mean?\n\nWhy does having a consenters increase transaction throughput, was the previous throughput limit constraint solely due to it needing to speak to all the nodes?\n\nDo both endorsers and consenters have a copy of the ledger, who stores it?\n\nCan anyone help me out with these?","ts":"1481824220.000786"},{"type":"message","user":"U0XPR4NP4","text":"<@U2DHRR4TE>\n\n&gt; When we say endorsers check code is 'deterministic' and 'stable', what does this mean?\n\nThe endorsers execute the chaincode to produce a read\/write set.  If the code is non-deterministic and multiple endorsements are required, there will be different results, which will be detected, and the transaction will be rejected.  The read write sets are inherently deterministic.\n\n&gt; Doesn't channelling transactions mean the consenters will have different ledgers If not, how are ledgers exchanged between consenters?  How are they kept in sync?\nThe ordering network (what you call consenters here I think) is necessarily a member of all channels for the ordering network.  There is no technical reason which prevents multiple ordering networks for a set of peers, but this is not targeted for v1.\n\n&gt; When we say consenters 'validate the integrity' of the transaction, what does this mean?\nThe ordering network will make sure that the transactions are appropriately signed by an authorized transactor on the chain.  After transactions have been ordered, the committing peers will do further checks based on MVCC and endorsement policies to further filter the transactions.\n\n&gt; Why does having a consenters increase transaction throughput, was the previous throughput limit constraint solely due to it needing to speak to all the nodes?\nThis is not an accurate statement.  The throughput limit before was actually much more closely tied to the fact that the consenters were executing transactions (via chaincode) rather than just ordering them. Removing the execution from the path resulted in transaction rates which were orders of magnitude faster.\n\n&gt; Do both endorsers and consenters have a copy of the ledger, who stores it?\nAll peers retain a copy of the ledger for the chains they are participating in.","edited":{"user":"U0XPR4NP4","ts":"1481824571.000000"},"ts":"1481824546.000787"},{"type":"message","user":"U2DHRR4TE","text":"<@U0XPR4NP4> Thanks, that's shed some light - a few more questions if I may:\n\n&gt;All peers retain a copy of the ledger for the chains they are participating in\n\nI assume this means there are now multiple ledgers, one for each channel they are connected to?\n\n&gt;The ordering network will make sure that the transactions are appropriately signed by an authorized transactor on the chain.  After transactions have been ordered, the committing peers will do further checks based on MVCC and endorsement policies to further filter the transactions.\n\nI take it a 'transactor' is the same as an endorder?\n\nWho does the ordering? How is it decided? Is it done by endorsers, consentors or both?\n\nAre they called 'consentors' or 'committers'? - here they are called 'consentors': <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/proposals\/r1\/Next-Consensus-Architecture-Proposal.md> and here committers: <https:\/\/hyperledger-fabric.readthedocs.io\/en\/latest\/abstract_v1\/>\n\nWhat is MVCC?\n\nWhat is an endorsement policy exactly? I thought it was a list of endorsers (or a minimum amount of them) that have to sign a transaction for it to be committed?","edited":{"user":"U2DHRR4TE","ts":"1481825643.000000"},"ts":"1481825590.000789"},{"type":"message","user":"U0XPR4NP4","text":"&gt; I assume this means there are now multiple ledgers, one for each channel they are connected to?\n\nThis is a question of semantics to me.  Internally, I believe this is a single 'ledger' which supports multiple chains.  There's nothing that would prevent flipping it though multiple ledgers, which each support individual  chains.  <@U1KFCPFQA> can maybe help here.\n\n&gt; I take it a 'transactor' is the same as an endorder?\n\nActually, not at all! A transactor is someone who is authorized to submit transactions on a chain.  (An endorser is able to endorse transactions, but does not actually submit them.  (Loosely) Instead, the client\/SDK creates a proposal, the proposal is sent to some set of endorsers for endorsement, who reply to the client with a proposalresponse.  The client then assembles these proposal responses into a transaction, signs that transaction, and sends it to the ordering service (who validates this last outer signature).  The transaction is ordered, makes its way to the committers, who then verify the endorsements etc.\n\n&gt; Are they called 'consentors' or 'committers'? - here they are called 'consentors': <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/proposals\/r1\/Next-Consensus-Architecture-Proposal.md> and here committers: <https:\/\/hyperledger-fabric.readthedocs.io\/en\/latest\/abstract_v1\/>\n\nI personally like to avoid using the word 'consenter' because it means different things to different people.  The ordering network will be backed by some form of consensus implementation, but this consensus is only on the ordering, not on the output of the transactions.  The peers take the ordered transactions to create the validated ledger, these are referred to usually as 'committer's.\n\n&gt; What is MVCC?\n\nMVCC is multi-version concurrency control <https:\/\/en.wikipedia.org\/wiki\/Multiversion_concurrency_control> . \n\n&gt; What is an endorsement policy exactly? I thought it was a list of endorsers (or a minimum amount of them) that have to sign a transaction for it to be committed?\n\nClose.  The endorsement policy can be a little more powerful than this, for instance, it could require that an endorser from each of 3 different peer organizations signs a transaction (not just 3 endorsements required).  <@U0ULK2JPP> might have more for you here.","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/proposals\/r1\/Next-Consensus-Architecture-Proposal.md","text":"Read-only mirror of <https:\/\/gerrit.hyperledger.org\/r\/#\/admin\/projects\/fabric>","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/proposals\/r1\/Next-Consensus-Architecture-Proposal.md","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1},{"title":"Multiversion concurrency control","title_link":"https:\/\/en.wikipedia.org\/wiki\/Multiversion_concurrency_control","author_name":"Wikipedia","author_link":"http:\/\/en.wikipedia.org\/","text":"Multiversion concurrency control (MCC or MVCC), is a concurrency control method commonly used by database management systems to provide concurrent access to the database and in programming languages to implement transactional memory.\nIf someone is reading from a database at the same time as someone else is writing to it, it is possible that the reader will see a half-written or inconsistent piece of data. There are several ways of solving this problem, known as concurrency control methods. The simplest way is to make all readers wait until the writer is done, which is known as a lock. This can be very slow, so MVCC takes a different approach: each user connected to the database sees a snapshot of the database at a particular instant in time. Any changes made by a writer will not be seen by other users of the database until the changes have been completed (or, in database terms: until the transaction has been committed.)\nWhen an MVCC database needs to update an item of data, it will not overwrite the old data with new data, but instead marks the old data as obsolete and adds the newer version elsewhere. Thus there are multiple versions stored, but only one is the latest. This allows readers to access the data that was there when they began reading, even if it was modified or deleted part way through by someone else. It also allows the database to avoid the overhead of filling in holes in memory or disk structures but requires (generally) the system to periodically sweep through and delete the old, obsolete data objects. For a document-oriented database it also allows the system to optimize documents by writing entire documents onto contiguous sections of disk\u2014when updated, the entire document can be re-written rather than bits and pieces cut out or maintained in a linked, non-contiguous database structure.\nMVCC provides point in time consistent views. Read transactions under MVCC typically use a timestamp or transaction ID to determine what state of the DB to read, and read these versions of the data. Read and write transactions are thus isolated from each other without any need for locking. Writes create a newer version, while concurrent reads access the older version.","fallback":"wikipedia: Multiversion concurrency control","service_icon":"https:\/\/a.slack-edge.com\/bfaba\/img\/unfurl_icons\/wikipedia.png","id":2}],"ts":"1481826316.000793"},{"type":"message","user":"U0XPR4NP4","text":"^ <@U2DHRR4TE>","ts":"1481826328.000795"},{"type":"message","user":"U2DHRR4TE","text":"<@U0XPR4NP4> Ah brilliant - thanks again, a few more questions:\n\n&gt;The consenters form the consensus service, i.e., a communication fabric that provides delivery guarantees... Peers are clients of the consensus service, to which the consensus service provides a shared communication channel offering a broadcast service for messages containing transactions.\n\nAre there many consensus services (i.e. one for each channel) or just one consensus service which provices all channels?\n\n&gt;The ordering network will be backed by some form of consensus implementation, but this consensus is only on the ordering, not on the output of the transactions.\n\nWhat's the relationship between the consensus service and the ordering network? Who is part of the ordering network?\n\n&gt;Internally, I believe this is a single 'ledger' which supports multiple chains\n\nI'm a bit confused then, what's the difference between a chain and a ledger?\n\n&gt;A transactor is someone who is authorized to submit transactions on a chain\n\nIs that the same as a client submitter?","ts":"1481826948.000796"},{"type":"message","user":"U0XPR4NP4","text":"&gt; Are there many consensus services (i.e. one for each channel) or just one consensus service which provices all channels?\n\nOut of the gate, we'll simply have one ordering service for all chains.  As I mentioned, there's no technical reason this has to be the case, but, in the interest of walking before we run, we're sticking to one to start.\n\n&gt; What's the relationship between the consensus service and the ordering network? Who is part of the ordering network?\n\nMost likely, 'consensus service' and 'ordering network' are referring to the same entity.  We switched to using 'ordering' instead of 'consensus' because of the confusion the word 'consensus' was causing.  The ordering network may be offered as a service and not involve any of the entities transacting on the chain, or it may be run by one or more of the transacting entities.  Out of the gate, our target is CFT, which mostly lends itself to a single entity running the ordering network, however, in parallel we are working on bringing a pbft based implementation of the ordering network to add BFT which will make a shared ordering network make more sense.\n\n&gt; I'm a bit confused then, what's the difference between a chain and a ledger?\n\nMy usage is that chain is the sequence of blocks, and the ledger is state associated with that sequence.  But, I think you'll find people mix these words around a lot.\n\n&gt; Is that the same as a client submitter?\n\nYes","ts":"1481827502.000797"},{"type":"message","user":"U2DHRR4TE","text":"<@U0XPR4NP4>  ah brilliant, thanks again!","ts":"1481827584.000798","reactions":[{"name":"+1","users":["U0XPR4NP4"],"count":1}]},{"type":"message","user":"U1KFCPFQA","text":"People do use the term ledger for different things.  I therefore try to avoid it and speak specifically about the \u2018chain' and the associated \u2018state database\u2019. When we say \u2018ledger\u2019 we often mean both taken together. For each channel there will be a chain and associated state database.","ts":"1481830189.000799"},{"type":"message","user":"U1KFCPFQA","text":"Another thing to clear up from above, is that committers will not have a validated ledger as defined in the Next Consensus Architecture document.  Each committer will have a raw ledger, with the blocks having a non-hashed section for indicating which of the transactions in the block were validated vs invalidated.  This design serves much of the purpose of the validated ledger, keeps things simple by having the same blocks and same hashes on ordering service and committing peers, and makes it easier for auditors to understand which transactions were validated vs invalidated.","ts":"1481830414.000800"},{"type":"message","user":"U1KFCPFQA","text":"When checkpointing is introduced post-v1, we will likely prune the invalid transactions out as part of the checkpoint process, leaving us with a validated ledger.","ts":"1481830467.000801"},{"type":"message","user":"U1KFCPFQA","text":"<@U0XPR4NP4> FYI due to the above, we will likely rename RawLedger and ValidatedLedger in the code, to be OrdererLedger and CommitterLedger in FAB-1390","ts":"1481831013.000802"},{"type":"message","user":"U0ULK2JPP","text":"<@U1KFCPFQA> `When checkpointing is introduced post-v1, we will likely prune the invalid transactions out as part of the checkpoint process, leaving us with a validated ledger.` \u2026 any reason to do that ?","ts":"1481831121.000803"},{"type":"message","user":"U0ULK2JPP","text":"seems a valuable piece of info, no ?","ts":"1481831151.000804"},{"type":"message","user":"U1KFCPFQA","text":"simply to save space, if somebody has spammed a lot of invalid trans","ts":"1481831155.000805"},{"type":"message","user":"U0ULK2JPP","text":"ok","ts":"1481831159.000806"},{"type":"message","user":"U0ULK2JPP","text":"we\u2019ll be throwing the baby with the bath water IMO","ts":"1481831190.000807"},{"type":"message","user":"U0ULK2JPP","text":":slightly_smiling_face:","ts":"1481831191.000808"},{"type":"message","user":"U1KFCPFQA","text":"i expect there will be a config option to prune or not","ts":"1481831211.000809"},{"type":"message","user":"U0Z41KY5V","text":"<@U1KFCPFQA> Is there any protection scheme now by detecting too much invalid trans from some   entities (e.g., DDOS) and take some control? Thanks!","ts":"1481846960.000810"},{"type":"message","user":"U1KFCPFQA","text":"I don\u2019t know of any DDOS protections, let\u2019s see if anybody else has thoughts...","ts":"1481855815.000811"},{"type":"message","user":"U0XQ35CDD","text":"No DDoS protection built on the ordering side (yet at least) either.","ts":"1481857622.000812"},{"type":"message","user":"U1AU8DRQR","text":"if I use `main` instead of `sbft` as executable in the test, will it work? I mean, is the main executable compiled before the test? I guess it is <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2515\/>","ts":"1481874745.000813"},{"type":"message","user":"U1AU8DRQR","text":"no it won't - it is not built","ts":"1481878227.000814"},{"type":"message","user":"U1AU8DRQR","text":"I need some suggestions how to do this","ts":"1481878239.000815"},{"type":"message","user":"U2DHRR4TE","text":"<@U0XPR4NP4> <@U1KFCPFQA> Had another read through the answers, couple more questions:\n\n&gt;For each channel there will be a chain and associated state database.\n\nJust to check, am I correct in thinking there are multiple blockchains and multiple worldstates (one for each channel) on each peer?\n\nDo committers handle all transactions or only transactions for certain chaincode?\n\nHow does a submitting client know which endorser to end it's transaction proposal to?\n\n&gt;committers will not have a validated ledger\n\nWhat is a validated ledger?\n\n&gt;When checkpointing is introduced post-v1\n\nWhat is checkpointing?\n\n\nHow does a submitting client know which endorser has the chaincode for its transaction?\n\nWhy is sending the transaction proposals to all the endorsers the burden of the client instead of the client sending it to 1 endorser which spreads it around?\n\nDo the committers then execute the chaincode again? If not, do the endorsers send the results of their executions to the commiters? If that's the case, what governs where each committer gets it's results from?","ts":"1481897591.000816"},{"type":"message","user":"U0Y14MWA2","text":"<@U1KFCPFQA> we need to sync on the terminology changes to NCAP","ts":"1481897650.000817"},{"type":"message","user":"U0Y14MWA2","text":"for instance early next week","ts":"1481897664.000818"},{"type":"message","user":"U0XPR4NP4","text":"&gt; Just to check, am I correct in thinking there are multiple blockchains and multiple worldstates (one for each channel) on each peer?\n\nCorrect. (One for each chain the peer is participating in)\n\n&gt; Do committers handle all transactions or only transactions for certain chaincode?\n\nAll transaction for each chain they are participating in\n\n&gt; How does a submitting client know which endorser to end it's transaction proposal to?\n\nThis is managed by the application\n\n&gt; What is a validated ledger?\n\nThere was the idea that once transactions were ordered into a 'raw chain' which would contain properly formed and signed, but not necessarily valid (because of MVCC conflicts etc.).  Then, the peers would essentially create a second chain from this 'raw chain', this 'validated chain\/ledger' would contain only the transactions that actually applied.  In implementation, it was easier simply to provide a bitmask for which transactions in a block are valid rather than essentially store two copies of everything.\n\n&gt; What is checkpointing?\n\nFor long running blockchains, it's infeasible to require that a new peer sync trillions of blocks, so instead, like with most dbs, there will need to be support for 'snapshotting' the world state, then archiving the old chain.  This could be done once a year, or every 10 million blocks, or 100 GB or whatever.\n\n&gt;  Why is sending the transaction proposals to all the endorsers the burden of the client instead of the client sending it to 1 endorser which spreads it around?\n\nThis was considered, but ultimately abandoned I believe because of the requirement to handle byzantine endorsers required clients to submit to multiple endorsers anyhow (or there may be other reasons I'm unaware of)\n\n&gt; Do the committers then execute the chaincode again? If not, do the endorsers send the results of their executions to the commiters? If that's the case, what governs where each committer gets it's results from?\n\nThe transaction contains the result of the chaincode execution, so they simply apply the results.  The application of the results is guaranteed to be deterministic even if the chaincode is not.  This is why you might have heard a clever line from <@U0PB67X4K> (and I may mis-state) but \"You don't need deterministic code because we have deterministic transactions\".","edited":{"user":"U0XPR4NP4","ts":"1481898106.000000"},"ts":"1481898034.000819"},{"type":"message","user":"U0XPR4NP4","text":"<@U2DHRR4TE> ^","ts":"1481898081.000820"},{"type":"message","user":"U1KFCPFQA","text":"<@U0Y14MWA2> Sure, I will be working part-time next week.  I believe you know about our bitmask for invalid trans in the BlockMetadata, and our intent to add checkpoint post-v1. Do you want to draft up the terminology changes and I will review?","ts":"1481898331.000822"},{"type":"message","user":"U0Y14MWA2","text":"there is that","ts":"1481898357.000823"},{"type":"message","user":"U0Y14MWA2","text":"there is consenters --&gt; orderers","ts":"1481898365.000824"},{"type":"message","user":"U0Y14MWA2","text":"there is the stuff with writeset and readset","ts":"1481898374.000825"},{"type":"message","user":"U0Y14MWA2","text":"am I missing sth big?","ts":"1481898390.000826"},{"type":"message","user":"U0Y14MWA2","text":"batches --&gt; blocks","ts":"1481898499.000827"},{"type":"message","user":"U0Y14MWA2","text":"blocks --&gt; Vblocks (and post v1)","ts":"1481898516.000828"},{"type":"message","user":"U1KFCPFQA","text":"<@U0Y14MWA2>, <@U10LM0FFZ> wrote a good glossary of v1 terms to review, I\u2019ll add my comments to that and send to both of you.","ts":"1481898582.000829"},{"user":"U10LM0FFZ","inviter":"U1KFCPFQA","text":"<@U10LM0FFZ|nickgaski> has joined the channel","type":"message","subtype":"channel_join","ts":"1481898588.000830"},{"type":"message","user":"U0Y14MWA2","text":"ok pls send me so we can sync all this stuff","ts":"1481898610.000831"},{"type":"message","user":"U0Y14MWA2","text":"we can add glossary to NCAP","ts":"1481898651.000832"},{"type":"message","user":"U0Y14MWA2","text":"this is a good idea","ts":"1481898655.000833"},{"type":"message","user":"U2DHRR4TE","text":"<@U0XPR4NP4> thanks again! Few more questions:\n\n&gt;This is managed by the application\n\nHow does the application know where to send them?\n\n&gt;The transaction contains the result of the chaincode execution, so they simply apply the results. \n\nWhere do these results come from, I've heard that the way the endorsers check if the chaincode has the same outcome is that 1 runs it first, sends it to the client and the client then sends the transaction proposal with this result to everyone else - is this correct?\n\n&gt;The application of the results is guaranteed to be deterministic even if the chaincode is not.\n\nSurely the transaction would be rejected if the chaincode it calls doesn't behave in a deterministic manner? - I was under the impression endorsers check if chaincode is 'deterministic' and 'stable'","ts":"1481900429.000834"},{"type":"message","user":"U0XPR4NP4","text":"&gt; How does the application know where to send them?\n\nThe application manages which peers are participating in which chains, so it already has this information.\n\n&gt; Where do these results come from, I've heard that the way the endorsers check if the chaincode has the same outcome is that 1 runs it first, sends it to the client and the client then sends the transaction proposal with this result to everyone else - is this correct?\n\n<@U0ULK2JPP> Can be more precise here, but that is my understanding.  The results are the readset, writeset, and postimage of the database query.  <@U1KFCPFQA> may be able to be more specific.\n\n&gt; Surely the transaction would be rejected if the chaincode it calls doesn't behave in a deterministic manner? - I was under the impression endorsers check if chaincode is 'deterministic' and 'stable'\n\nThe endorsement process ensures that if the execution results in different results across different endorsers, a valid transaction cannot be formed.","ts":"1481901059.000835"},{"type":"message","user":"U2DHRR4TE","text":"quick follow up question about endorsing logic - who sets this? Does it come with the chaincode when it's deployed to a peer or with the transactions from the submitter?","ts":"1481901060.000836"},{"type":"message","user":"U0XPR4NP4","text":"Chaincode deployment includes the endorsement policy","ts":"1481901074.000837"},{"type":"message","user":"U2DHRR4TE","text":"&gt;The application manages which peers are participating in which chains\n\nI''m a bit confused - when you say 'the application', what does this refer to exactly?","ts":"1481901154.000838"},{"type":"message","user":"U0XPR4NP4","text":"\"The application\" is the useful thing which leverages the fabric, usually built on top of the SDK","ts":"1481901266.000839"},{"type":"message","user":"U2DHRR4TE","text":"so you mean the chaincode?","ts":"1481901335.000840"},{"type":"message","user":"U2DHRR4TE","text":"and I suppose the assosiated `.yaml` files to set things up","ts":"1481901373.000841"},{"type":"message","user":"U0XPR4NP4","text":"No, the chaincode is a piece of the application, but think the thing which knows \"Website click routes to this binding which invokes X chaincode on Y endorsers\"","ts":"1481901375.000842"},{"type":"message","user":"U2DHRR4TE","text":"I'm still a bit confused - so let's say I have my client machine with some client program running on it and I tell this program to send a transaction to the network. How does it know which endorsers to send the transaction proposal to? (are some hardcoded? if so how does it find the others)","edited":{"user":"U2DHRR4TE","ts":"1481901609.000000"},"ts":"1481901494.000843"},{"type":"message","user":"U0ULK2JPP","text":"<@U2DHRR4TE> the application knows what the tx is all about (transfer $x from bank b to bank c) and that determines the context for endorsement","ts":"1481903967.000845"},{"type":"message","user":"U0ULK2JPP","text":"in other words, seperating the endorsement as a \u201cpre-consensus\u201d (pre-ordering) step makes it closer to the application \/ buisiness logic layer where the application\/SDK needs to know the actors of endorsement","ts":"1481904077.000846"},{"type":"message","user":"U0N1D1UAE","text":"<@U0XQ35CDD> <@U0XPR4NP4> My results of comparing different approaches to queuing on\nthe broadcast side in the Kafka orderer are remarkably uninteresting. Here's\nmy interpretation of why: These clients are able to generate and broadcast\ntransactions much faster than they can be consumed by Kafka, and the clients\nare not considered complete until they have recieved an ACK for all\ntransactions they sent. Regardless of how work is split between threads, in\nthe end the clients are waiting for Kafka. There may be a small advantage to\ndoing the work in multiple threads, but there is no evidence of any consistent\nbenefit - the results look more or less random. Some kind of work queuing\nmight provide a small latency benefit for \"bursty\" clients, but in these\nthroughput-oriented runs the clients quickly stuff the queues and then work\nsimply proceeds at a rate based on Kafka. In the future this could possibly\nchange - if the overhead of signature checking is high for example, then it\nmight be advantageous to split front-end and back-end work into separate\nthreads. But for now there is no evidence that this is necessary.","ts":"1481921231.000847"},{"type":"message","subtype":"file_share","text":"<@U0N1D1UAE|bcbrock> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/bcbrock\/F3GKU8BK8\/broadcast_queueing.xlsx|Broadcast Queueing.xlsx>","file":{"id":"F3GKU8BK8","created":1481921270,"timestamp":1481921270,"name":"Broadcast Queueing.xlsx","title":"Broadcast Queueing.xlsx","mimetype":"application\/vnd.openxmlformats-officedocument.spreadsheetml.sheet","filetype":"xlsx","pretty_type":"Excel Spreadsheet","user":"U0N1D1UAE","editable":false,"size":79812,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3GKU8BK8\/broadcast_queueing.xlsx?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3GKU8BK8\/download\/broadcast_queueing.xlsx?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/bcbrock\/F3GKU8BK8\/broadcast_queueing.xlsx","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F3GKU8BK8-6ec063382d","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0N1D1UAE","upload":true,"display_as_bot":false,"username":"<@U0N1D1UAE|bcbrock>","bot_id":null,"ts":"1481921271.000848"},{"type":"message","user":"U0XQ35CDD","text":"The normalized graphs are telling. ","ts":"1481921515.000849"},{"type":"message","user":"U0XPR4NP4","text":"Thanks for the testing, I'll definitely be  curious about the changes once signature validation comes online ","ts":"1481921542.000850"},{"type":"message","user":"U0XQ35CDD","text":"Till then I suggest we stick with the first changeset of the series.","ts":"1481921569.000851"},{"type":"message","user":"U0N1D1UAE","text":"The one that removes all Queuing? I agree it is simplest for now, easy to add queueing back in the future for testing.","ts":"1481921640.000852","reactions":[{"name":"+1","users":["U0XPR4NP4","U0UGH3X7X"],"count":2}]},{"type":"message","user":"U0XQ35CDD","text":"Yes.","ts":"1481921653.000853"},{"user":"U2WL051HN","text":"<@U2WL051HN|haifeng> has joined the channel","type":"message","subtype":"channel_join","ts":"1481986196.000854"},{"type":"message","user":"U0Y14MWA2","text":"<@U0N1D1UAE> - interesting numbers: my observation is that it seems that we do not reach the saturation with 32 clients in none of the experiments","ts":"1482001963.000855"},{"type":"message","user":"U0Y14MWA2","text":"to have an idea of the peak throughput we should be saturating the system","ts":"1482001983.000856"},{"type":"message","user":"U0Y14MWA2","text":"also - adding latency numbers would complement the experiment nicely","edited":{"user":"U0Y14MWA2","ts":"1482002009.000000"},"ts":"1482001998.000857"},{"type":"message","user":"U2MCH9EEB","text":"have a question on sbft protocol,why need to receive n-f-1 prepare msg before submiting commit msg","ts":"1482127041.000859"},{"type":"message","user":"U2MCH9EEB","text":"not f+1 prepare msg ?","ts":"1482127083.000860"},{"type":"message","user":"U0PB67X4K","text":"<@U0Y14MWA2>  -  ^^^^^","ts":"1482139638.000861"},{"type":"message","user":"U0XV1HDL3","text":"<@U2MCH9EEB> - please see the Castro-Liskov paper or any good textbook (such as <http:\/\/www.distributedprogramming.net|www.distributedprogramming.net>), using only f+1 would be wrong","ts":"1482140354.000862"},{"type":"message","user":"U0Y14MWA2","text":"<@U2MCH9EEB> - yes this is not sth that is explained in slack - pls see pointers by <@U0XV1HDL3>","ts":"1482140545.000863"},{"type":"message","user":"U0Y14MWA2","text":"that said,","ts":"1482140548.000864"},{"type":"message","user":"U0Y14MWA2","text":"see also xft paper for when you could actually do with f+1 replicas in the loop","ts":"1482140618.000865"},{"type":"message","user":"U0Y14MWA2","text":"<http:\/\/vukolic.com\/xft-osdi2016.pdf>","ts":"1482140619.000866"},{"type":"message","user":"U0Y14MWA2","text":"and <https:\/\/blog.acolyer.org\/2016\/12\/12\/xft-practical-fault-tolerance-beyond-crashes\/> for some coverage","attachments":[{"service_name":"the morning paper","service_url":"http:\/\/blog.acolyer.org","title":"XFT: Practical fault-tolerance beyond\u00a0crashes","title_link":"https:\/\/blog.acolyer.org\/2016\/12\/12\/xft-practical-fault-tolerance-beyond-crashes\/","author_name":"adriancolyer","author_link":"https:\/\/blog.acolyer.org\/author\/adriancolyer\/","thumb_url":"https:\/\/i0.wp.com\/adriancolyer.files.wordpress.com\/2016\/12\/xft-table-1.png?fit=200%2C150&ssl=1","thumb_width":200,"thumb_height":99,"text":"XFT: Practical fault-tolerance beyond crashes Liu et al., OSDI 2016\nHere&rsquo;s something that&rsquo;s been bugging me for a while now. The state of the art in security has moved from the assumption of a secured perimeter and a trusted environment inside the firewall to a notion of perimeter-less security. It&rsquo;s pretty much impossible to keep track of all the bridged networks (e.g., from smartphones) and other ways of getting into a corporate network (connected printers, &hellip;), so the assumption becomes that all services &lsquo;live on the internet&rsquo; and it&rsquo;s necessary to secure them at the application level. At the same time, the system model on which pretty much all of our distributed systems are designed assumes a classic &lsquo;crash fault tolerance&rsquo; (CFT) model. In other words, these systems at their core are not designed to tolerate active adversaries &ndash; they come from the world of perimeter-based thinking. Can you spot the problem?\nThere does exist a strong body of research looking into Byzantine Fault-Tolerant (BFT) systems, but these aren&rsquo;t widely deployed because of the overheads involved. I was particularly pleased therefore to discover this paper from Liu et al., looking at a fault-tolerance model called cross fault tolerance (XFT) which sits somewhere between CFT and BFT, and seems very well matched to today&rsquo;s deployment scenarios. The best part is that it offers performance equivalent to CFT systems, but with much stronger protections.\n\nModern production systems increase the number of nines of reliability by employing sophisticated distributed protocols that tolerate crash machine faults as well as network faults&hellip; At the heart of these systems typically lies a crash-fault tolerant (CFT) consensus-based state-machine replication (SMR) primitive. [Think Paxos, Raft,&hellip;]. These systems cannot deal with non-crash (or Byzantine) faults, which include not only malicious adversarial behavior, but also arise from errors in the hardware, stale or corrupted data from storage systems, memory errors caused by physical effects, bugs in software,&hellip; and human mistakes.\n\nXFT is another fine example of questioning assumptions: are the preconditions for CFT met in modern deployments? (Increasingly, no), and exposing a false dichotomy (you can have CFT, or BFT).\n\nThe overhead of asynchronous BFT is due to the extraordinary power given to the adversary, which may control both the Byzantine faulty machines and the entire network in a coordinated way. In particular, the classical BFT adversary can partition any number of otherwise correct machines at will. In line with observations by practitioners, we claim that this adversary model is actually too strong for the phenomena observed in deployed systems.\n\nXFT is designed to provide correct service (i.e., safety and liveness) even when Byzantine faults do occur, as long as a majority of replicas are correct and can communicate with each other synchronously (a minority of the replicas are Byzantine-faulty, or partitioned due to a network fault). In return it uses only the same number of resources (replicas) as asynchronous CFT (typical BFT systems need more), and preserves all the reliability guarantees of asynchronous CFT systems.\n\nWhereas XFT always provides strictly stronger consistency and availability guarantees than CTF and always strictly stronger guarantees than BFT, our reliability analysis shows that, in some cases, XFT also provides strictly stronger consistency guarantees than BFT.\n\n\n(Click for larger view).\nThe authors envision XFT being particularly suitable for wide-area or geo-replicated systems, or any other deployment where an adversary cannot easily coordinate enough network partitions and Byzantine-faulty machine actions at the same time. Note however that many geo-replicated systems don&rsquo;t use even CFT consensus algorithms across regions (certainly not for the normal request processing path) due to the latencies involved, preferring stronger consensus within regions, and weaker consensus across regions. Another potential use case is permissioned blockchains.\nThe more formal definition of XFT is as follows:\nLet anarchy be a severe system condition in which there is at least one non-crash-faulty replica and the number of non-crash-faulty replicas + the number of crash-faulty replicas + the number of correct, but partitioned replicas is greater than some threshold t (t &le; (n-1)\/2) for n replicas.\nThen, protocol P is an XFT protocol if P satisfies safety in all executions in which the system is never in anarchy.\nXPaxos\nXPaxos is a Paxos derivative built using the XFT assumptions.\n\nXPaxos is a novel state-machine replication (SMR) protocol designed specifically in the XFT model. XPaxos specifically targets good performance in geo-replicated settings, which are characterized by the network being the bottleneck, with high link latency and relatively low, heterogenous link bandwidth.\n\nXPaxos has three main components:\nA common-case protocol which handles the replication and total ordering of requests across replicas. This looks much like phase 2 of Paxos, but hardened by the use of digital signatures.\nA view-change protocol that operates in a decentralized, leaderless fashion.\nA fault-detection mechanism which can help detect, when outside anarchy, non-crash faults that would leave the system in an inconsistent state in anarchy.\nIn the interests of space, I&rsquo;m going to concentrate here on the novel view-change protocol and the fault-detection mechanism.\n\n[The XPaxos] decentralized approach to view change stands in sharp contrast to the classical reconfiguration\/view-change in CFT and BFT protocols, in which only a single replica leads the view change and transfers the state from previous views. This difference is crucial to maintaining consistency across XPaxos views in the presence of non-crash faults (but in the absence of full anarchy).\n\nXPaxos enforces consistency across view changes using the ordered requests in the commit logs of correct replicas. Consider a view change moving from synchronous group i (sgi) to synchronous group i+1 (sgi+1). Every active replica in sgi+1 retrieves information about requests committed in previous views.\n\nIntuitively, with a correct majority of correct and synchronous replicas, at least one correct and synchronous replica from sgi+1 will contact (at least one) correct and synchronous replica from sgi and transfer the latest correct commit log to the new view i+1.\n\nA view change is initiated whenever a synchronous group is deemed not to be making progress or has suspicious activity. In particular, a view change can be initiated (by sending a SUSPECT message) by an active replica if any of the following conditions hold:\nit receives a message from another active replica that does not conform to protocol.\n\na retransmission timer expires.\n\n\na view change does not complete in a timely manner.\n\n\na SUSPECT message is received from another replica the current group\n\nEach active replica in the new view collects the most recent state and its proof (VIEW-CHANGE messages). An active replica in the new view waits for at least 2&Delta; time (timeout), and must collect at least n-t VIEW CHANGE messages within that window for a view change to succeed.\nThe fault detection (FD) subprotocol guarantees that if a machine p suffers a non-crash fault outside anarchy in a way that would cause inconsistency under anarchy then p will be detected as faulty.\n\nOur FD mechanism entails modifying the XPaxos view change as follows: in addition to exchanging their commit logs, replicas also exchange their prepare logs. Notice that in the case t = 1 only the primary maintains a prepare log. In the new view, the primary prepares and the follower commits all requests contained in transferred commit and prepared logs.\n\nTo violate consistency therefore, a fault would be needed in both commit and prepare logs&hellip;\n\nHowever,\u2026","fallback":"the morning paper Link: XFT: Practical fault-tolerance beyond&nbsp;crashes","from_url":"https:\/\/blog.acolyer.org\/2016\/12\/12\/xft-practical-fault-tolerance-beyond-crashes\/","service_icon":"https:\/\/secure.gravatar.com\/blavatar\/09326a066a08237015d6b84f026d36ae?s=114","id":1}],"ts":"1482140643.000867"},{"type":"message","user":"U0Y14MWA2","text":"<https:\/\/jira.hyperledger.org\/browse\/FAB-474> seems: 1) moved to common (which is good) and 2) backlogged - does that mean we are not having it for v1?","ts":"1482142795.000869"},{"type":"message","user":"U0Y14MWA2","text":"this is also related to <https:\/\/jira.hyperledger.org\/browse\/FAB-331>","ts":"1482142814.000870"},{"type":"message","user":"U0Y14MWA2","text":"and maybe a few more","ts":"1482142820.000871"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XQ35CDD> <@U0XPR4NP4> ^^","ts":"1482142861.000872"},{"user":"U2SCJN8F6","text":"<@U2SCJN8F6|zws> has joined the channel","type":"message","subtype":"channel_join","ts":"1482150062.000873"},{"user":"U2WJPAAJV","text":"<@U2WJPAAJV|tzukru> has joined the channel","type":"message","subtype":"channel_join","ts":"1482152170.000874"},{"type":"message","user":"U1AU8DRQR","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2515\/>","ts":"1482156218.000875"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XPR4NP4> ^^ since you previously +2ed and we only need that","ts":"1482159362.000876"},{"type":"message","user":"U0Y14MWA2","text":"to get this 5-weeks old changeset in","ts":"1482159409.000877"},{"type":"message","user":"U0N1D1UAE","text":"<@U0Y14MWA2> The numbers in the spreadsheet from Friday do show one instance of a  kind of saturation: For 32 broadcast\/deliver clients with 2K blobs, the deliver side can not keep up with broadcast, and takes about 10% longer to finish delivery than to finish broadcast in this example. In order to find the real maximum throughput I would need to upgrade my system; With 64 clients @ 2KB blobs each we saturate the 10Gb network interface of the server with all of the \u201cdeliver\u201d traffic. The benchmark code currently measures latency but does not report it yet in a user-friendly way.","ts":"1482161384.000878"},{"type":"message","user":"U0Y14MWA2","text":"thanks = so you'd expect 256 bytes experiment to saturate at (very roughly) 8x the throughput of the 2k experiment?","ts":"1482163039.000879"},{"type":"message","user":"U0Y14MWA2","text":"(which would mean 80k tps)","ts":"1482163059.000880"},{"type":"message","user":"U0N1D1UAE","text":"Not sure; The throughput seems to be more a function of the # of clients. I can try that later today.","ts":"1482163317.000881"},{"type":"message","user":"U1AU8DRQR","text":"we would need one more +2 here: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/2515\/>","ts":"1482163643.000882"},{"type":"message","user":"U1AU8DRQR","text":":smile: sorry for the repost","ts":"1482163658.000883"},{"type":"message","user":"U0XPR4NP4","text":"<@U1AU8DRQR> 2515 is in","ts":"1482164671.000884","reactions":[{"name":"woo","users":["U1AU8DRQR"],"count":1}]},{"type":"message","user":"U0XPR4NP4","text":"With respect to Deliver not scaling, please keep in mind that Deliver is backed by a toy ledger right now, something used to show correctness, but was never meant to scale.  Sprint 9 targets pulling in the 'real' ledger which has been developed in parallel.","ts":"1482164749.000885"},{"type":"message","user":"U0XPR4NP4","text":"Also note that the Deliver API is simplified in <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3271\/> which may yield performance improvements as well","ts":"1482165038.000886"},{"type":"message","user":"U0XQ35CDD","text":"&gt; and takes about 10% longer to finish delivery than to finish broadcast in this example","ts":"1482169458.000887"},{"type":"message","user":"U0XQ35CDD","text":"<@U0N1D1UAE>: How do you define \"finish\" in both cases?","ts":"1482169478.000888"},{"type":"message","user":"U0N1D1UAE","text":"For broadcast, finish means all ACKs received. For deliver, all TX delivered. (These tests broadcast\/deliver a (large) fixed number of TX)","ts":"1482169535.000889"},{"type":"message","user":"U0N1D1UAE","text":"I should also say that I have not tuned Kafka\/Java, so it may be that with some work we could get broadcast\/deliver rates to match","ts":"1482169625.000890"},{"type":"message","user":"U0XQ35CDD","text":"Thank you. So a naive question possibly:","ts":"1482169713.000891"},{"type":"message","user":"U0XQ35CDD","text":"&gt; For 32 broadcast\/deliver clients with 2K blobs, the deliver side can not keep up with broadcast, and takes about 10% longer to finish delivery than to finish broadcast in this example.","ts":"1482169714.000892"},{"type":"message","user":"U0XQ35CDD","text":"This does not necessarily imply a saturation though, does it?","ts":"1482169727.000893"},{"type":"message","user":"U0N1D1UAE","text":"How are you defining saturation?","ts":"1482169747.000894"},{"type":"message","user":"U0XQ35CDD","text":"Or rather, what kind of saturation do you talk about here?","ts":"1482169750.000895"},{"type":"message","user":"U0XQ35CDD","text":"Ah, you beat me to it.","ts":"1482169753.000896"},{"type":"message","user":"U0N1D1UAE","text":"I meant saturation as delivery can not keep up with broadcast","ts":"1482169771.000897"},{"type":"message","user":"U0N1D1UAE","text":"I think <@U0Y14MWA2> may have meant that we hadn\u2019t seen throughput roll-over, so we don\u2019t know what the max. really is","ts":"1482169802.000898"},{"type":"message","user":"U0XQ35CDD","text":"Got it, thank you.","ts":"1482169826.000899"},{"type":"message","user":"U0XQ35CDD","text":"&gt; <https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1482142795000869>","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1482142795000869","fallback":"[December 19th, 2016 2:19 AM] vukolic: <https:\/\/jira.hyperledger.org\/browse\/FAB-474> seems: 1) moved to common (which is good) and 2) backlogged - does that mean we are not having it for v1?","ts":"1482142795.000869","author_subname":"vukolic","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"<https:\/\/jira.hyperledger.org\/browse\/FAB-474> seems: 1) moved to common (which is good) and 2) backlogged - does that mean we are not having it for v1?","author_name":"Marko Vukolic","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/vukolic","author_icon":"https:\/\/secure.gravatar.com\/avatar\/a52edd136bbd07ca069b9393ac60f675.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0006-48.png","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1482169879.000900"},{"type":"message","user":"U0XQ35CDD","text":"<@U0Y14MWA2>: Anything that is not in for sprints 8 or 9 goes into backlog.","ts":"1482169928.000902"},{"type":"message","user":"U0Y14MWA2","text":"Whats the def of end of sprint 9?","ts":"1482177541.000903"},{"type":"message","user":"U0XQ35CDD","text":"This week and the next week are sprint 8.","ts":"1482179868.000904"},{"type":"message","user":"U0XQ35CDD","text":"The two weeks that follow are sprint 9, etc. ","ts":"1482179882.000905"},{"type":"message","user":"U0XQ35CDD","text":"So: Jan 15","ts":"1482180946.000906"},{"type":"message","user":"U0Y14MWA2","text":"c'est trop compliqu\u00e9","ts":"1482181696.000907"},{"type":"message","user":"U0XQ35CDD","text":"ne tuez pas le messager","ts":"1482182431.000908"},{"type":"message","user":"U0Y14MWA2","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3411\/>","ts":"1482184850.000909"},{"type":"message","user":"U0Y14MWA2","text":"hopefully brings arch document closer to real naming","ts":"1482184867.000910"},{"type":"message","user":"U2MCH9EEB","text":"<@U0XV1HDL3> <@U0Y14MWA2> thanks","ts":"1482197512.000911"},{"type":"message","user":"U2MCH9EEB","text":"one more question,looks the sftb test cases all not reach to checkpoint step,is it expected? or the checkpoint process step implementation not completed,so skip this step at this stage?","ts":"1482204678.000912"},{"type":"message","user":"U0XQ35CDD","text":"<@U1AU8DRQR>: I'm running the unit tests on the entire `orderer` package, and the `sbft` ones seem to run for well over a minute.","ts":"1482212514.000913"},{"type":"message","subtype":"file_share","text":"<@U0XQ35CDD|kostas> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/kostas\/F3H0455B7\/screen_shot_2016-12-20_at_00.38.44.png|Screen Shot 2016-12-20 at 00.38.44.png>","file":{"id":"F3H0455B7","created":1482212517,"timestamp":1482212517,"name":"Screen Shot 2016-12-20 at 00.38.44.png","title":"Screen Shot 2016-12-20 at 00.38.44.png","mimetype":"image\/png","filetype":"png","pretty_type":"PNG","user":"U0XQ35CDD","editable":false,"size":61986,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3H0455B7\/screen_shot_2016-12-20_at_00.38.44.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3H0455B7\/download\/screen_shot_2016-12-20_at_00.38.44.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_64":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F3H0455B7-903f6dccd9\/screen_shot_2016-12-20_at_00.38.44_64.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_80":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F3H0455B7-903f6dccd9\/screen_shot_2016-12-20_at_00.38.44_80.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F3H0455B7-903f6dccd9\/screen_shot_2016-12-20_at_00.38.44_360.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360_w":360,"thumb_360_h":67,"thumb_480":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F3H0455B7-903f6dccd9\/screen_shot_2016-12-20_at_00.38.44_480.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_480_w":480,"thumb_480_h":89,"thumb_160":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F3H0455B7-903f6dccd9\/screen_shot_2016-12-20_at_00.38.44_160.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F3H0455B7-903f6dccd9\/screen_shot_2016-12-20_at_00.38.44_720.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720_w":720,"thumb_720_h":133,"thumb_960":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F3H0455B7-903f6dccd9\/screen_shot_2016-12-20_at_00.38.44_960.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_960_w":960,"thumb_960_h":177,"thumb_1024":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F3H0455B7-903f6dccd9\/screen_shot_2016-12-20_at_00.38.44_1024.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_1024_w":1024,"thumb_1024_h":189,"image_exif_rotation":1,"original_w":1050,"original_h":194,"permalink":"https:\/\/hyperledgerproject.slack.com\/files\/kostas\/F3H0455B7\/screen_shot_2016-12-20_at_00.38.44.png","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F3H0455B7-a106d1313b","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U0XQ35CDD","upload":true,"display_as_bot":false,"username":"<@U0XQ35CDD|kostas>","bot_id":null,"ts":"1482212521.000914"},{"type":"message","user":"U0XQ35CDD","text":"When you find some time,  could you please add the `Short()` check to them to make testing for everything else a bit faster?","ts":"1482212534.000915"},{"type":"message","user":"U0XQ35CDD","text":"(Don't worry about the failure on the screenshot, I Ctrl+C'd after realizing it was taking longer than usual.)","ts":"1482212566.000916"},{"type":"message","user":"U0Y14MWA2","text":"<@U2MCH9EEB> which test cases? do you have a debug log of these runs?","ts":"1482219864.000917"},{"type":"message","user":"U0Y14MWA2","text":"normally all nodes run through checkpoint phase","ts":"1482219878.000918"},{"type":"message","user":"U1AU8DRQR","text":"<@U0XQ35CDD> for example now :slightly_smiling_face:","ts":"1482221754.000919"},{"type":"message","user":"U1AU8DRQR","text":"I will add something like this:\nif short: skip","ts":"1482222013.000920"},{"type":"message","user":"U1AU8DRQR","text":"if I am right we also have to add the short option to the test run","ts":"1482222047.000921"},{"type":"message","user":"U1AU8DRQR","text":"e.g. go test -short (or the proper form)","ts":"1482222058.000922"},{"type":"message","user":"U1AU8DRQR","text":"ok  \t<http:\/\/github.com\/hyperledger\/fabric\/orderer\/sbft\/main|github.com\/hyperledger\/fabric\/orderer\/sbft\/main>\t5.423s","ts":"1482224814.000923"},{"type":"message","user":"U1AU8DRQR","text":"I have this: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3419\/>","ts":"1482225342.000924"},{"type":"message","user":"U1AU8DRQR","text":"I will also have to modify the way tests are started","ts":"1482226412.000925"},{"user":"U3D5886CB","text":"<@U3D5886CB|ruslan> has joined the channel","type":"message","subtype":"channel_join","ts":"1482228102.000926"},{"type":"message","user":"U1AU8DRQR","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3421\/>","ts":"1482230847.000927"},{"type":"message","user":"U0XQ35CDD","text":"Correct. (And thanks!)","attachments":[{"fallback":"[December 20th, 2016 3:20 AM] hgabor: if I am right we also have to add the short option to the test run","ts":"1482222047.000921","author_subname":"hgabor","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"if I am right we also have to add the short option to the test run","author_name":"Gabor Hosszu","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/hgabor","author_icon":"https:\/\/secure.gravatar.com\/avatar\/00f4290e36c198abb7d4f0ea586245db.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0012-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1482222047000921","is_share":true,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1482236334.000928"},{"type":"message","user":"U1AU8DRQR","text":"<@U0PB67X4K> others love this: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3419\/3> you can +2 it :smile:","ts":"1482241834.000929","reactions":[{"name":"relaxed","users":["U11MANG9G"],"count":1}]},{"type":"message","user":"U0PB67X4K","text":"hehe - done  :wink:","ts":"1482241868.000930"},{"type":"message","user":"U11MANG9G","text":"For the love of shorter testing cycles! Merged.","ts":"1482241916.000931"},{"type":"message","user":"U1AU8DRQR","text":"<@U11MANG9G> note that for that we also need this: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3421\/2> without this it is only a half armed giant","ts":"1482242184.000932"},{"type":"message","user":"U11MANG9G","text":"OK. Let\u2019s wait for the build to complete.","ts":"1482242277.000933"},{"type":"message","user":"U11MANG9G","text":"+1 on \u201cnegotiation skills\u201d :wink:","ts":"1482242287.000934"},{"type":"message","user":"U2DHRR4TE","text":"<@U0XPR4NP4> <@U0ULK2JPP> I'm still a bit lost as to how a submitting client know which endorsers to send a transaction proposal to - you said 'the application' knows but I'm a bit lost as to what this refers to?","ts":"1482251577.000935"},{"type":"message","user":"U0XPR4NP4","text":"<@U2DHRR4TE> You can think that 'the application' instructs peers to join a chain, and also deploys chaincode.  So, it makes sense that 'the application' knows which peers are capable of endorsing a proposal, and which endorsements are required (because again, 'the application' was the one who initially decided what these requirements were)","ts":"1482252107.000936"},{"type":"message","user":"U2DHRR4TE","text":"I'm still confused :confused: Perhaps it might help if I explain what I understand about the current way of doing development:\n\n(on the subject of what 'the application' means)\n\nFrom what I understand when you develop using hyperledger as your platform what you are doing is making a collection of chaincode files which contain go (at least for now) code that reads and writes to a 'world state'.\n\nYou can control who is able to make calls to this go code from defining users in the membersrvc.yaml and giving them  groups and therefore rights. This and core.yaml are also used to change how the peers and member service behave (such as whether attributes are in tcerts, consensus alg to use etc.).\n\nFinally you can also make front-end apps with node.js and the hfc library which allow you to interact with the peers, deploying chaincode and sending transactions. Using an hfc app requires you to log in with one of the users you defined in membersrvc.yaml. We can also use HFC to register new users and change the rights and privileges of existing users.\n\nObviously the above is based on knowledge of v0.6 but in the above context what is 'the application' - is it the chaincode? the yaml? the hfc app? or all of these together?\n\n\n\n(on the subject of how do submitters know where to send endorsers)\n\nNow bringing this into v1.0 I presume it will work in more or less the same way (i.e. we have chaincode pushed to endorsers whose behaviour is controlled by these yaml files).\n\nIf I could just clarify - what is a submitter in this setup? Would the hfc app mentionned previously be the submitter - the name 'client submitter' simply referring to the fact that it is not a peer instead of meaning it runs on a user's machine.\n\nNow regarding where to send transaction proposals, how would this submitter know what the addresses of the endorsers are? If the submitter is an hfc node app running on a server somewhere does it have the IP addresses hardcoded? How does it know if endorsers are taken down\/crash\/are added?\n\n(apologies if I've misunderstood some of the key bits of how this works)","ts":"1482253239.000937"},{"type":"message","user":"U2DHRR4TE","text":"<@U0XPR4NP4>","ts":"1482253250.000938"},{"type":"message","user":"U0XPR4NP4","text":"The big point of divergence between 0.6 and the new architecture is that there is no longer a single point of authority in the form of membership services.  You can think for instance that you have three organizations(A,B,C) participating in the blockchain, none of which has sole authority to do anything.\n\nEach organization will have some sort of administrator who deploys peers, and instructs them to participate in a given chain.  Obviously organization A's admin can't provision peers for organization B, and organization B can't instruct organization A's peers to participate in a particular chain.  \n\nSimilary, if you wish to do something like deploy a chaincode, because this code will execute on every endorsing peer participating on the chain, usually it's not sufficient for a single organization to endorse the deployment of a chaincode.  So, when a chain is created (or reconfigured) the participating orgs need to agree on policies for chaincode deployment.  That policy might be that every organization needs to agree, or, it might be that only one special 'dictator' needs to agree (or some other more complicated scheme), but this policy governs what endorsements are required for chaincode deployment.  Because this consortium created that policy, it inherently knows what the endorsement requirements are.\n\nWhen it comes to actually finding endorsing peers, the expectation is that when an organization agrees to participate in a chain, it will provision some peers, and join them to the chain.  However, rather than enforce that the network tracks a full list of all peers, those peers which the org admin wants to designate as endorsers can be reported (via whatever mechanism is appropriate) to the consortium so that any of these peers may be targeted when a chaincode requires endorsement from that particular organization. It is possible to build some layer on top of the fabric to track which peers are available (in fact, the gossip piece does this to some extent), but there is no requirement to do so. \n\nNote that I haven't really discussed users etc., because this is all 'chain management'.  The individual user rights within an organization for a particular chaincode are all still managed as you indicated (this is to the best of my knowledge, that is leaving my domain of expertise).  \n\nThe 'client submitter', is generally the hfc app you described, I would not typically expect for this code to execute on a user's machine.  Naively and out of the gate, I would expect that yes, hfc app developer would simply require a list of orgs and their endorsers, and it would randomly pick among them as needed (switching on failure etc.).  For a more robust deployment, I would actually see the peer lists maintained via a chaincode or other API so that the manual distribution of machine names could be eliminated, but it's certainly not a prerequisite to having a working application.","edited":{"user":"U0XPR4NP4","ts":"1482259362.000000"},"ts":"1482259320.000939"},{"type":"message","user":"U0XPR4NP4","text":"<@U2DHRR4TE> ^","ts":"1482259336.000940"},{"type":"message","user":"U0Y14MWA2","text":"if any maintainers around: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3445\/>","ts":"1482270615.000942"},{"type":"message","user":"U0Y14MWA2","text":"this one would profit from no-review-delay <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3457\/>","ts":"1482312822.000943"},{"type":"message","user":"U2DHRR4TE","text":"<@U0XPR4NP4> ok I see that shines some light, a few follow up questions:\n\n&gt;there is no longer a single point of authority in the form of membership services.\n&gt;individual user rights within an organization for a particular chaincode are all still managed as you indicated\n\nDoes this mean everyone has their own CA?\n\nIf there's no central authority can any CA verify any transactions (i.e. one organisation's CA verifying signatures of another). Who should I ask about this?\n\n&gt;Each organization will have some sort of administrator who deploys peers, and instructs them to participate in a given chain.\n\nJust to check, when you say 'instructs them to participate in a given chain' what this means is that it subscribes the endorsers to particular channels on the consensus service (in order to get transactions for said chain)?\n\n&gt;So, when a chain is created (or reconfigured) the participating orgs need to agree on policies for chaincode deployment...\n&gt;...Because this consortium created that policy, it inherently knows what the endorsement requirements are.\n\nFrom what I understand about how the transactions now work the process is like this:\n\n1. Client Submitter submits transaction proposal to endorsers\n2. Endorsers send yes\/no responses back to Client Submitter\n3. Client Submitter (if the endorsement policy is met) sends transaction to committers or (if it is not) discards the transaction.\n4. Committers verify that the endorsers who endorsed the transaction actually did\n5. Committers update the relevant ledgers with the outcome of the transaction\n\nAs such, how does a client submitter know what the endorsement policy of a particular transaction would be? Are client submitters owned by organisations?\n\nDoes sending transactions to the committers work in the same way as sending them to endorsers \u2013 the client submitters is responsible for knowing which ones to send it to and sending it to them?\n\n&gt;endorsers can be reported (via whatever mechanism is appropriate) to the consortium\n\nWould I be correct then in thinking that 'where' and 'who' the endorsers are is just tracked by some system \u2013 it doesn't really matter what (and indeed you can not do it). The point is that this system isn't part of the Hyperledger Fabric, it would just work with it.\n\nExpanding this a bit, I would I be correct in thinking that when you add new organisations to the network this 'system' would be informed of new peers joining and as such would update the others telling them who and where the new ones are as well as what role they perform?","ts":"1482323292.000944"},{"type":"message","user":"U0ZJZBJLF","text":"Hey, anyone home?","ts":"1482324484.000945"},{"type":"message","user":"U184J2R7S","text":"<@U0PB67X4K> can you help with some of these questions toda?","ts":"1482326831.000946"},{"type":"message","user":"U184J2R7S","text":"(lot of people are out for the holidays now)","ts":"1482326849.000947"},{"type":"message","user":"U0Y14MWA2","text":"sbft quorum size optimization here <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3459\/>","edited":{"user":"U0Y14MWA2","ts":"1482328462.000000"},"ts":"1482328448.000948"},{"type":"message","user":"U2DHRR4TE","text":"Also, <@U0XPR4NP4> regarding the 'ordering service' you mentionned, I'm not finding any references to it here:\n\n<https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/proposals\/r1\/Next-Consensus-Architecture-Proposal.md>\n\nAm I looking at an out of date document?","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/proposals\/r1\/Next-Consensus-Architecture-Proposal.md","text":"Read-only mirror of <https:\/\/gerrit.hyperledger.org\/r\/#\/admin\/projects\/fabric>","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/proposals\/r1\/Next-Consensus-Architecture-Proposal.md","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1482330515.000950"},{"type":"message","user":"U0XPR4NP4","text":"<@U2DHRR4TE> \n\n&gt; Does this mean everyone has their own CA?\n\nIn general, every organization has its own CA, it's not a requirement, but in the interest of decentralized authority, this is a feature.\n\n&gt; If there's no central authority can any CA verify any transactions (i.e. one organisation's CA verifying signatures of another). Who should I ask about this?\n\nNo, the chain configuration contains a list of all the MSP definitions (membership service providers) for the chain.  This means that anyone with a copy of the chain configuration (which is itself a subset of 'the chain') can verify the signatures of any of the transactors on the chain.  The chain config also embeds policies such as \"All three of orgs A, B, and C must agree before adding a new MSP to the chain\".\n\n&gt; Just to check, when you say 'instructs them to participate in a given chain' what this means is that it subscribes the endorsers to particular channels on the consensus service (in order to get transactions for said chain)?\n\nThere is a `JoinChain`  RPC that the peer supports which takes a genesis block for a chain and causes that peer to then retrieve a copy of that chain, and to process updates and endorsements, etc.  It doesn't explicitly require contact with the ordering service (it could also catch up and get updates through gossip) but it might.\n\n&gt; 1. Client Submitter submits transaction proposal to endorsers\n&gt; 2. Endorsers send yes\/no responses back to Client Submitter\n&gt; 3. Client Submitter (if the endorsement policy is met) sends transaction to committers or (if it is not) discards the transaction.\n&gt; 4. Committers verify that the endorsers who endorsed the transaction actually did\n&gt; 5. Committers update the relevant ledgers with the outcome of the transaction\n\nBroad strokes, correct, but in 3, the client sends the transaction to the ordering service for ordering, then eventually the committer gets a batch (which is really just a block which potentially contains some invalid transactions),  Then 4 and 5 happen.\n\n&gt; As such, how does a client submitter know what the endorsement policy of a particular transaction would be? Are client submitters owned by organisations?\n\nThe 'client' which builds the transaction is generally 'the application'.  The application deployed the chaincode, so the application knows the endorsement requirements, so the client knows these requirements.\n\n&gt; Does sending transactions to the committers work in the same way as sending them to endorsers \u2013 the client submitters is responsible for knowing which ones to send it to and sending it to them?\n\nAs I mentioned, the client never sends the transaction directly to the committers, the client sends the transaction to ordering, and the committers eventually receive the ordered transaction (assuming it was well formed).\n\n&gt; Would I be correct then in thinking that 'where' and 'who' the endorsers are is just tracked by some system \u2013 it doesn't really matter what (and indeed you can not do it). The point is that this system isn't part of the Hyperledger Fabric, it would just work with it.\n\nCorrect.  Eventually there may be a standard or recommended way to do this, but nothing like that is targeted for v1.","ts":"1482331529.000952"},{"type":"message","user":"U0XPR4NP4","text":"&gt; Expanding this a bit, I would I be correct in thinking that when you add new organisations to the network this 'system' would be informed of new peers joining and as such would update the others telling them who and where the new ones are as well as what role they perform?\n\nIt's important never to conflate \"peer\" (the process) and \"peer organization\" (one of the entities participating in the blockchain).  When a peer organization joins, this requires updating the chain configuration, which is propagated through the chain, and everyone knows.  Joining an individual peer has no such requirement.\n\n&gt;  regarding the 'ordering service' you mentionned, I'm not finding any references to it here:\n\n\"Ordering service\" is synonymous with \"consensus service\", but because of differing interpretations of the word \"consensus\" we decided to clarify more explicitly what the service was providing with a new term that did not carry any baggage.","ts":"1482331530.000953"},{"type":"message","user":"U0XPR4NP4","text":"&gt; Am I looking at an out of date document?\n\nConceptually it is still mostly correct, but the terminology and some details have changed, we need to bring this document up to speed.","ts":"1482331572.000954"},{"type":"message","user":"U0XQ35CDD","text":"(There is a changeset out there by <@U0Y14MWA2> that brings it up to date BTW.)","ts":"1482331615.000955"},{"type":"message","user":"U0PB67X4K","text":"we should probably merge it and then I can update with my mostly grammatical \/ syntactical edits.","ts":"1482332801.000956"},{"type":"message","user":"U0PB67X4K","text":"we also need to get rid of the version in the v0.6 branch","ts":"1482332885.000957"},{"type":"message","user":"U2DHRR4TE","text":"<@U0XPR4NP4>\n\n&gt;the client sends the transaction to the ordering service for ordering\n\nWould I be able to have some more details on this step then? Which nodes are involved in the ordering service, who is in charge of running them (as in which organisation on the network)? how do they agree on the order?\n\n&gt;The 'client' which builds the transaction is generally 'the application'. The application deployed the chaincode, so the application knows the endorsement requirements, so the client knows these requirements.\n\nwhen we say 'client', I take it we are talking about an hfc node app?\nWith this in mind, what would happen if you wanted another instance of this hfc app (say for load balancing) which would not have deployed the chaincode, how would it know the endorsement policy (or would it be supplied with it for all chaincodes it can handle at setup)?\n\n&gt;membership service providers\n\nWhat is an MSP vs. a membersrvc from v0.6?\n\n&gt;anyone with a copy of the chain configuration (which is itself a subset of 'the chain') can verify the signatures of any of the transactors on the chain\n\nBecuase they would know who to contact about verifying someone from a speicific organisation?\n\n<@U0XQ35CDD> where would I be able to find this changeset?","ts":"1482332885.000958"},{"type":"message","user":"U0XQ35CDD","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3411\/>","ts":"1482332898.000959"},{"type":"message","user":"U2DHRR4TE","text":"thanks!","ts":"1482332916.000960","reactions":[{"name":"+1","users":["U0XQ35CDD"],"count":1}]},{"type":"message","user":"U0Y14MWA2","text":"we need just one more +2 to merge that","ts":"1482332928.000961"},{"type":"message","user":"U0Y14MWA2","text":"and make it more readable","ts":"1482332932.000962"},{"type":"message","user":"U0Y14MWA2","text":"(by the virtue of merging and mirroring to github)","ts":"1482332960.000963"},{"type":"message","user":"U0XQ35CDD","text":"<@U1AU8DRQR>: The `sbft` package leaves behind a `main` binary (in `sbft\/main\/`) _every time_ the unit tests are run. (This is most likely related to the way the files are structured inside your `main` folder, where there are `xxx_test` files w\/o the associated `xxx` files.) Can you look into it when you get a chance?","edited":{"user":"U0XQ35CDD","ts":"1482334202.000000"},"ts":"1482334007.000964"},{"type":"message","user":"U1AU8DRQR","text":"<@U0XQ35CDD> that main is the \"main app\"\/\"executable\" that start an sbft peer. one of the tests create that, calling go build. I can add a line to remove it, it that OK?","ts":"1482334601.000966"},{"type":"message","user":"U0XQ35CDD","text":"I haven't looked at your tests' source code to know what they do exactly. There might be a better way to take care of the issue, but I won't know until I see the code. In general though, the tests shouldn't leave any artifacts behind.","ts":"1482335201.000967"},{"type":"message","user":"U1AU8DRQR","text":"I think the best and easiest way of solving this is removing that artifact.","ts":"1482335283.000968"},{"type":"message","user":"U0XPR4NP4","text":"&gt; Would I be able to have some more details on this step then? Which nodes are involved in the ordering service, who is in charge of running them (as in which organisation on the network)? how do they agree on the order?\n\nAha! Finally a question which is more native to <#C0Z4NBUN6|fabric-consensus-dev> The short answer is 'it depends'.  The ordering service has a very simple api surface with two methods `Broadcast` and `Deliver`.  Transactions are injected through `Broadcast` and the ordered batches\/blocks are retrieved by calling `Deliver`.  The backing consensus implementation and who runs this service, there are multiple options.  For v1 as the first class citizen is a Kafka shim which leverages the CFT nature and high throughput of Kafka.  We are also working on a pbft based solution (`sbft`) which provides BFT, but it will be more on the 'experimental' side for v1.\n\n&gt; What is an MSP vs. a membersrvc from v0.6?\n\nThis is a great question, because I personally find the terminology confusing.  The MSP in 0.6 provided T-certs and other network services for getting enrollment certs etc.  In v1 these MSPs simply provide a crypto implementation, such as say X.509 with a CA.  The idea is to make the crypto scheme pluggable but <@U1BC5A0F9> <@U0ZR63HLK> <@U26T99AQ4> might be better able to explain this.\n\n&gt; Becuase they would know who to contact about verifying someone from a speicific organisation?\n\nBecause the chain configuration embeds all the material needed to instantiate the MSP for all participating organizations to verify signatures with.","ts":"1482335456.000969"},{"type":"message","user":"U0XPR4NP4","text":"^ <@U2DHRR4TE>","ts":"1482335467.000970"},{"type":"message","user":"U0Y14MWA2","text":"hm - i dislike that label 'experimental' for bft :wink:","ts":"1482336456.000971"},{"type":"message","user":"U0XPR4NP4","text":"Everyone heard it! <@U0Y14MWA2> is going to have `sbft` production ready and bullet proof by March","ts":"1482338021.000972"},{"type":"message","user":"U112NNFV4","text":"Please flag <@U112NNFV4> when content on here is good for external v1.0 doc. Hard to keep track of all slack channels, thanks!","ts":"1482338732.000973"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XPR4NP4> `We are also working on a pbft based solution (sbft) which provides BFT.' would suffice","edited":{"user":"U0Y14MWA2","ts":"1482338848.000000"},"ts":"1482338822.000974"},{"user":"U1GRJD9NC","text":"<@U1GRJD9NC|yuki.k> has joined the channel","type":"message","subtype":"channel_join","ts":"1482339509.000976"},{"type":"message","user":"U11NUTP4L","text":"<@U0XPR4NP4>, we are seeing unit-tests failure after below commit was done. ```commit cf03f20e0ed7ba5fb5f0afc6be1bf8cfe260d187\nMerge: a401b28 bfd7c84\nAuthor: Jason Yellick &lt;jyellick@us.ibm.com&gt;\nDate:   Mon Dec 19 16:18:27 2016 +0000\n\n    Merge \"Add networked stress tests for SBFT\"\n```","ts":"1482339855.000977"},{"type":"message","user":"U11NUTP4L","text":"The failing unit-test case is ```unit-tests_1  | FAIL\nunit-tests_1  | coverage: 49.2% of statements\nunit-tests_1  | FAIL    <http:\/\/github.com\/hyperledger\/fabric\/orderer\/sbft\/main|github.com\/hyperledger\/fabric\/orderer\/sbft\/main> 834.346s\n```","ts":"1482339892.000978"},{"type":"message","user":"U11NUTP4L","text":"Any thoughts on what could be architecture dependent in this as I see that these unit-test aren't failing on x86_64 and Z","ts":"1482339937.000979"},{"type":"message","user":"U11NUTP4L","text":"It could also be some timing issue as I see grpc time out messages in the log","ts":"1482340182.000980"},{"type":"message","user":"U0Y14MWA2","text":"can you pls send me the full log on dm","ts":"1482340490.000981"},{"type":"message","user":"U0Y14MWA2","text":"<@U1AU8DRQR> sharing the log with you on DM","ts":"1482341669.000982"},{"type":"message","user":"U0Y14MWA2","text":"seems grpc connections are not established at all","ts":"1482341679.000983"},{"type":"message","user":"U0XPR4NP4","text":"<@U11NUTP4L> sounds like <@U0Y14MWA2> and <@U1AU8DRQR> are helping you. My name is on that commit because I clicked the merge button, but it is <@U1AU8DRQR>'s code so he is likely to be more useful than I ","ts":"1482343653.000984","reactions":[{"name":"+1","users":["U11NUTP4L"],"count":1}]},{"type":"message","user":"U1AU8DRQR","text":"wasn't there a Z specific problem with grpc? I am not sure ","ts":"1482344779.000985"},{"type":"message","user":"U0Y14MWA2","text":"this is power","ts":"1482345766.000986"},{"user":"U3HE2V38F","text":"<@U3HE2V38F|mohamoudegal> has joined the channel","type":"message","subtype":"channel_join","ts":"1482346057.000987"},{"type":"message","user":"U3HE2V38F","text":"Hi everyone,","ts":"1482346094.000988"},{"type":"message","user":"U3HE2V38F","text":"I\u2019m new to the community and I had a bug I ran into with one of the Fabric tutorials","ts":"1482346121.000989"},{"type":"message","subtype":"file_share","text":"<@U3HE2V38F|mohamoudegal> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/mohamoudegal\/F3JBW031U\/screen_shot_2016-12-21_at_11.45.24_am.png|Screen Shot 2016-12-21 at 11.45.24 AM.png> and commented: I inputted the right info from the credentials file on Bluemix, but I\u2019m getting a syntax error message. Please advise.","file":{"id":"F3JBW031U","created":1482346160,"timestamp":1482346160,"name":"Screen Shot 2016-12-21 at 11.45.24 AM.png","title":"Screen Shot 2016-12-21 at 11.45.24 AM.png","mimetype":"image\/png","filetype":"png","pretty_type":"PNG","user":"U3HE2V38F","editable":false,"size":215778,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3JBW031U\/screen_shot_2016-12-21_at_11.45.24_am.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3JBW031U\/download\/screen_shot_2016-12-21_at_11.45.24_am.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_64":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F3JBW031U-50e8c87794\/screen_shot_2016-12-21_at_11.45.24_am_64.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_80":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F3JBW031U-50e8c87794\/screen_shot_2016-12-21_at_11.45.24_am_80.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F3JBW031U-50e8c87794\/screen_shot_2016-12-21_at_11.45.24_am_360.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360_w":360,"thumb_360_h":262,"thumb_480":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F3JBW031U-50e8c87794\/screen_shot_2016-12-21_at_11.45.24_am_480.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_480_w":480,"thumb_480_h":349,"thumb_160":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F3JBW031U-50e8c87794\/screen_shot_2016-12-21_at_11.45.24_am_160.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F3JBW031U-50e8c87794\/screen_shot_2016-12-21_at_11.45.24_am_720.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_720_w":720,"thumb_720_h":524,"thumb_960":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F3JBW031U-50e8c87794\/screen_shot_2016-12-21_at_11.45.24_am_960.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_960_w":960,"thumb_960_h":699,"thumb_1024":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F3JBW031U-50e8c87794\/screen_shot_2016-12-21_at_11.45.24_am_1024.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_1024_w":1024,"thumb_1024_h":745,"image_exif_rotation":1,"original_w":2270,"original_h":1652,"permalink":"https:\/\/hyperledgerproject.slack.com\/files\/mohamoudegal\/F3JBW031U\/screen_shot_2016-12-21_at_11.45.24_am.png","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F3JBW031U-3e948ad952","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":1,"initial_comment":{"id":"Fc3HKAUTD1","created":1482346160,"timestamp":1482346160,"user":"U3HE2V38F","is_intro":true,"comment":"I inputted the right info from the credentials file on Bluemix, but I\u2019m getting a syntax error message. Please advise.","channel":""}},"user":"U3HE2V38F","upload":true,"display_as_bot":false,"username":"<@U3HE2V38F|mohamoudegal>","bot_id":null,"ts":"1482346166.000990"},{"type":"message","user":"U3HE2V38F","text":"Also does anyone know why the chaincode.go &amp; chaincode_finished.go are completely different?","ts":"1482346220.000991"},{"type":"message","user":"U0XQ35CDD","text":"<@U3HE2V38F> <#C0YPYBVJM|fabric-dev> is probably a better place for these questions","ts":"1482348756.000992"},{"type":"message","user":"U3HE2V38F","text":"<@U0XQ35CDD> thanks","ts":"1482348789.000993","reactions":[{"name":"+1","users":["U0XQ35CDD"],"count":1}]},{"type":"message","user":"U1B9E51R8","text":"Hi all. As for v1.0, can I say there will be no dependency among the transactions inside the same block? e.g.  tx1 to transfer assets from A to B, tx2 is to transfer asset from B to C, these 2 transactions would never be in the same block because the readset and writeset for them during endorsement will not be satisfied in the phase of committing to ledger. Is my understanding correct?","ts":"1482366088.000994"},{"type":"message","user":"U0N1D1UAE","text":"<@U1B9E51R8> Blocks are created without regard to the contents of the transactions. Under reasonable assumptions those TX  could be committed as long as they appear in the correct order in the block.","ts":"1482367207.000995"},{"type":"message","user":"U1B9E51R8","text":"Thanks! <@U0N1D1UAE> So, it's the client and committers responsibility to assure the situation I mentioned above to succeed?","ts":"1482369092.000996"},{"type":"message","user":"U1SHFS1Q9","text":"Hi, If someone point me to documentation\/ reading material on how consensus work in Hyperledger, that will be helpful. I want to understand the flow of actions that happen from the point a client initiates a transaction to the ledger reconciled to world-state, which component does what, and the type of messages exchanged.  Thank you!","ts":"1482378754.000997"},{"type":"message","user":"U0N1D1UAE","text":"<@U1B9E51R8> There is an implicit specification (I haven\u2019t seen it formally specified) that if a single client sends two transactions for consensus, then they will be committed in the order they were sent. This should certainly be true if the client waits for acknowledgment from the ordering service after each transaction. Neither the ordering service nor the the committer will reorder transactions to remove conflicts. (I personally think this might be an interesting concept to explore, though.)","ts":"1482378879.000998"},{"type":"message","user":"U0N1D1UAE","text":"<@U1SHFS1Q9> You can start by looking at the documents here: <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/proposals\/r1>","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/proposals\/r1","text":"Read-only mirror of <https:\/\/gerrit.hyperledger.org\/r\/#\/admin\/projects\/fabric>","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/proposals\/r1","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1482379077.000999"},{"type":"message","user":"U1SHFS1Q9","text":"<@U0N1D1UAE>, sure.  Thanks for the pointers.  Since there are multiple actions happen, like ordering of transactions, block creation, and so on, I am bit confused as to what are the sequence of actions and what constitute  the success or failure of consensus","ts":"1482379217.001001"},{"type":"message","user":"U0N1D1UAE","text":"Some presentations are attached here: <https:\/\/jira.hyperledger.org\/browse\/FAB-37>","ts":"1482379456.001002"},{"type":"message","user":"U1B9E51R8","text":"thanks <@U0N1D1UAE> ","ts":"1482379556.001003"},{"type":"message","user":"U1B9E51R8","text":"so, a single  client send tx1 and wait for block generated,then it sends next tx for endorsement.Only this way can we make sure these 2txs succeed if they have dependency ","ts":"1482379780.001004"},{"type":"message","user":"U1SHFS1Q9","text":"Thank so much <@U0N1D1UAE>","ts":"1482380555.001005"},{"type":"message","user":"U1AU8DRQR","text":"<@U0XQ35CDD> e.g. this way? <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3479\/>","ts":"1482393365.001006"},{"type":"message","user":"U0Y14MWA2","text":"<@U0N1D1UAE> there is no such requirement as this is impossible in case we use TCert like mechanism to anonymize clients","ts":"1482396756.001007"},{"type":"message","user":"U0Y14MWA2","text":"If clients are not anonymized i.e., when they use sth like ECerts it is possible but it was never stated as a clear requirement to my knowledge","ts":"1482396835.001008"},{"type":"message","user":"U0Y14MWA2","text":"Of course we are talking about clients submitting requests without waiting for request commit confirmation","ts":"1482396875.001009"},{"type":"message","user":"U0Y14MWA2","text":"Intuitively with TCert anonimity and unlinkability one cannot link the two transactions and establish causal precedence between them","ts":"1482396972.001010"},{"user":"U1V6SJ1FF","text":"<@U1V6SJ1FF|dgorman> has joined the channel","type":"message","subtype":"channel_join","ts":"1482399444.001011"},{"user":"U3HUXKKEW","text":"<@U3HUXKKEW|haixu> has joined the channel","type":"message","subtype":"channel_join","ts":"1482400801.001012"},{"type":"message","user":"U11NUTP4L","text":"<@U1AU8DRQR> <@U0Y14MWA2> Thanks for looking into this. To clarify, this grpc time out issue is seen only on Power (ppc64le) architecture.  It seems on z, the unit-tests are going through without issues as per confirmation from <@U0YK3KKCY> who is the Z lead guy who is running unit-tests on fabric every 3 hrs :slightly_smiling_face:","ts":"1482407912.001013","reactions":[{"name":"+1","users":["U0YK3KKCY"],"count":1}]},{"type":"message","user":"U1AU8DRQR","text":"I will have to look into grpc's power pc specific bugs (knows ones)","ts":"1482407968.001014"},{"type":"message","user":"U1AU8DRQR","text":"\"unit-tests_1  | 2016\/12\/21 12:08:11 grpc: Server.Serve failed to complete security handshake from \"127.0.0.1:59654\": EOF\"","ts":"1482407993.001015"},{"type":"message","user":"U1AU8DRQR","text":"my guess would be that this is the key. I have never ever seen this","ts":"1482408005.001016"},{"type":"message","user":"U11NUTP4L","text":"<@U1AU8DRQR> any suggestion on what I could try and check ?","ts":"1482408451.001017"},{"type":"message","user":"U1AU8DRQR","text":"how exactly is it run? with our without vagrant?","ts":"1482408573.001018"},{"type":"message","user":"U11NUTP4L","text":"Not using vagrant. On ppc64le, we just have the docker environment.","ts":"1482409156.001019"},{"type":"message","user":"U11NUTP4L","text":"I am just doing `make uni-test` to verify the fabric build","ts":"1482409188.001020"},{"type":"message","user":"U1AU8DRQR","text":"the unit tests run in a docker as I remember","ts":"1482413265.001021"},{"type":"message","user":"U1AU8DRQR","text":"so you use the same grpc as the others","ts":"1482413277.001022"},{"type":"message","user":"U11NUTP4L","text":"Yes. Isn't it part of base-image itself ?","ts":"1482416171.001023"},{"type":"message","user":"U0XQ35CDD","text":"<@U1AU8DRQR>: Commented on the changeset. (Short answer: yes, but there are a few things that need to be taken care of. Thanks!)","ts":"1482419871.001024"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XQ35CDD> <@U0PB67X4K> so we in principle need a JIRA issue for every changeset?","ts":"1482422308.001025"},{"type":"message","user":"U0Y14MWA2","text":"I am totally not respecting this - but I was not aware - let me know if I should start","ts":"1482422327.001026"},{"type":"message","user":"U0N1D1UAE","text":"<@U0Y14MWA2> I think it would be reasonable to specify that if a single thread in a single client sends two transactions over a single gRPC connection to the ordering service, then those transactions should appear in the  client\u2019s transmission order in the final block, regardless of TCerts, ECerts, etc. It would also be reasonable not to guarantee this for many reasons. But it needs to be clearly specified which is true.","ts":"1482422458.001027"},{"type":"message","user":"U0Y14MWA2","text":"hm, again not really possible at least in BFT case","ts":"1482422492.001028"},{"type":"message","user":"U0Y14MWA2","text":"I could probably try to write a proof for it :slightly_smiling_face:","ts":"1482422502.001029"},{"type":"message","user":"U0Y14MWA2","text":"the issue is that these requests would be linked within a grpc connection but it may take more time to order them","ts":"1482422528.001030"},{"type":"message","user":"U0Y14MWA2","text":"and they would be changing hands a lot","ts":"1482422533.001031"},{"type":"message","user":"U0Y14MWA2","text":"now - if we can link the request we can deliver FIFO (causal order) that you need here","ts":"1482422553.001032"},{"type":"message","user":"U0Y14MWA2","text":"but with unlinkability of tcerts - this would not fly","ts":"1482422563.001033"},{"type":"message","user":"U0Y14MWA2","text":"it is probably impossible with unlinkability even in crash-tolerant case","ts":"1482422586.001034"},{"type":"message","user":"U0Y14MWA2","text":"(deterministically and in all executions)","ts":"1482422602.001035"},{"type":"message","user":"U0N1D1UAE","text":"This ordering is currently true with the Kafka orderer, I\u2019m don\u2019t understand what the certificates have to do with it. If 2 TX come in over a GRPC connection, the second TX is not even sent to Kafka until the first is known to be persisted.","ts":"1482422662.001036"},{"type":"message","user":"U0Y14MWA2","text":"so if the service mimicks closed loop","ts":"1482422717.001037"},{"type":"message","user":"U0Y14MWA2","text":"then it is possible","ts":"1482422722.001038"},{"type":"message","user":"U0Y14MWA2","text":"if you allow open loop does not seem so","ts":"1482422748.001039"},{"type":"message","user":"U0Y14MWA2","text":"in pure BFT case this closed loop trick would not seem to help","ts":"1482422770.001040"},{"type":"message","user":"U0Y14MWA2","text":"unless you do closed loop from the client","ts":"1482422785.001041"},{"type":"message","user":"U0Y14MWA2","text":"and client does not submit n+1 until it sees n in ledger of some peer","ts":"1482422808.001042"},{"type":"message","user":"U0N1D1UAE","text":"Does the client need to see n+1 in a ledger, or is the ACK from the broadcast service sufficient?","ts":"1482422853.001043"},{"type":"message","user":"U0Y14MWA2","text":"ack meaning what - what is the semantics?","ts":"1482422892.001044"},{"type":"message","user":"U0Y14MWA2","text":"above I was talking about open loop *Of course we are talking about clients submitting requests without waiting for request commit confirmation*","ts":"1482422939.001045"},{"type":"message","user":"U0N1D1UAE","text":"ACK meaning receipt of the BroadcastResponse","ts":"1482422947.001046"},{"type":"message","user":"U0Y14MWA2","text":"for closed loop we may be ale to do sth","ts":"1482422948.001047"},{"type":"message","user":"U0Y14MWA2","text":"hm you seem to be talking about solo\/kafka specific stuff that I am not familiar with so much","ts":"1482422966.001048"},{"type":"message","user":"U0Y14MWA2","text":"let me speculate on what it can be","ts":"1482422971.001049"},{"type":"message","user":"U0Y14MWA2","text":"if this is an ack from a single orderer - then clearly no because a byz orderer may \"forget\" to fwd it say to the leader","ts":"1482422997.001050"},{"type":"message","user":"U0N1D1UAE","text":"All AtomicBroadcast services must return the BroadcastResponse, no?","ts":"1482423002.001051"},{"type":"message","user":"U0Y14MWA2","text":"well the spec says there is broadcast and deliver","ts":"1482423025.001052"},{"type":"message","user":"U0Y14MWA2","text":"nothing about broadcast response","ts":"1482423030.001053"},{"type":"message","user":"U0Y14MWA2","text":"what would be the properties of broadcast response?","ts":"1482423039.001054"},{"type":"message","user":"U0Y14MWA2","text":"(diff from deliver)","ts":"1482423045.001055"},{"type":"message","user":"U0N1D1UAE","text":"That is the question :slightly_smiling_face: The BroadcastResponse in the Kafka case means that the TX has been ordered and persisted. A question though about the specification, are the proto definitions considered part of the specification, or simply one implmentation of the specification?","ts":"1482423210.001056"},{"type":"message","user":"U0Y14MWA2","text":"\"ordered and persisted\" seems to me as good as delivered","ts":"1482423249.001057"},{"type":"message","user":"U0Y14MWA2","text":"re spec\/impl","ts":"1482423254.001058"},{"type":"message","user":"U0Y14MWA2","text":"I'd say they are currently the impl - until we are sure what is possible and what is not and what can be \"standardized\" by a proto","ts":"1482423290.001059"},{"type":"message","user":"U0N1D1UAE","text":"Almost as good, it may not have been assigned to a block yet.","ts":"1482423309.001060"},{"type":"message","user":"U0Y14MWA2","text":"now this is a very specific way kafka and solo operate","ts":"1482423328.001061"},{"type":"message","user":"U0Y14MWA2","text":"because they assign a block after order","ts":"1482423342.001062"},{"type":"message","user":"U0Y14MWA2","text":"in all bft protocols I know it is the other way around","ts":"1482423352.001063"},{"type":"message","user":"U0Y14MWA2","text":"generate block and then order","ts":"1482423362.001064"},{"type":"message","user":"U0Y14MWA2","text":"if you do it other way around (as in solo\/kafka) you would","ts":"1482423376.001065"},{"type":"message","user":"U0Y14MWA2","text":"1) murder throughput","ts":"1482423380.001066"},{"type":"message","user":"U0Y14MWA2","text":"2) require very deterministic block sizes set upfront (blockcutter needs to be deterministic)","ts":"1482423405.001067"},{"type":"message","user":"U0Y14MWA2","text":"so this is very impl thingy","ts":"1482423412.001068"},{"type":"message","user":"U0N1D1UAE","text":"Interesting. So I think you would answer <@U1B9E51R8> question by saying that in general you have to wait for TX1 to be delivered before sending TX2 if you want them in order?","ts":"1482423598.001069"},{"type":"message","user":"U0Y14MWA2","text":"I did not say that :slightly_smiling_face:","ts":"1482423609.001070"},{"type":"message","user":"U0Y14MWA2","text":"I said that this is the case if you want unlinkability","ts":"1482423622.001071"},{"type":"message","user":"U0Y14MWA2","text":"i.e., tcerts","ts":"1482423626.001072"},{"type":"message","user":"U0Y14MWA2","text":"if not - we can do FIFO\/causal","ts":"1482423634.001073"},{"type":"message","user":"U0Y14MWA2","text":"but we need timestamping at the client","ts":"1482423641.001074"},{"type":"message","user":"U0Y14MWA2","text":"which means - no unlinkability","ts":"1482423650.001075"},{"type":"message","user":"U0Y14MWA2","text":"in a sense causal and unlinkability do not go well hand in hand","ts":"1482423669.001076"},{"type":"message","user":"U0Y14MWA2","text":"it is, roughly speaking, one or the other","ts":"1482423687.001077"},{"type":"message","user":"U0Y14MWA2","text":"or both but in closed loop","ts":"1482423693.001078"},{"type":"message","user":"U0N1D1UAE","text":"How does waiting guarantee unlinkability?","ts":"1482424097.001079"},{"type":"message","user":"U0N1D1UAE","text":"Why does it matter whether there are 0 or N TX between two TCert-anonymized TX?","ts":"1482424135.001080"},{"type":"message","user":"U0Y14MWA2","text":"waiting serves to guarantee fifo trivially","ts":"1482424173.001081"},{"type":"message","user":"U0Y14MWA2","text":"i submit first wait to see it appears and then I go to the second","ts":"1482424197.001082"},{"type":"message","user":"U0Y14MWA2","text":"there i have fifo (albeit a non interesting one)","ts":"1482424208.001083"},{"type":"message","user":"U0Y14MWA2","text":"and then the ordering can have unlinkability","ts":"1482424217.001084"},{"type":"message","user":"U0Y14MWA2","text":"and there you have two","ts":"1482424221.001085"},{"type":"message","user":"U0XQ35CDD","text":"<https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1482422308001025>","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1482422308001025","fallback":"[December 22nd, 2016 7:58 AM] vukolic: <@U0XQ35CDD> <@U0PB67X4K> so we in principle need a JIRA issue for every changeset?","ts":"1482422308.001025","author_subname":"vukolic","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"<@U0XQ35CDD> <@U0PB67X4K> so we in principle need a JIRA issue for every changeset?","author_name":"Marko Vukolic","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/vukolic","author_icon":"https:\/\/secure.gravatar.com\/avatar\/a52edd136bbd07ca069b9393ac60f675.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0006-48.png","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1482424226.001086"},{"type":"message","user":"U0Y14MWA2","text":"but you have closed loop","ts":"1482424234.001087"},{"type":"message","user":"U0XQ35CDD","text":"<@U0Y14MWA2>: Correct. Component `fabric-consensus`, label `sbft`, and the sprint during which this is tackled. Mark the issue as \"In Review\" when the changeset is posted, and mark as \"Done\" when it's merged. A bit of a process, but you quickly get used to it. (Thanks!)","attachments":[{"fallback":"[December 22nd, 2016 10:58 AM] vukolic: <@U0XQ35CDD> <@U0PB67X4K> so we in principle need a JIRA issue for every changeset?","ts":"1482422308.001025","author_subname":"vukolic","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"<@U0XQ35CDD> <@U0PB67X4K> so we in principle need a JIRA issue for every changeset?","author_name":"Marko Vukolic","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/vukolic","author_icon":"https:\/\/secure.gravatar.com\/avatar\/a52edd136bbd07ca069b9393ac60f675.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0006-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1482422308001025","is_share":true,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1482424383.001089"},{"type":"message","user":"U0XQ35CDD","text":"<@U0Y14MWA2>: Correct. Component `fabric-consensus`, label `sbft`, and the sprint during which this is tackled. Mark the issue as \"In Review\" when the changeset is posted, and mark as \"Done\" when it's merged. A bit of a process, but you quickly get used to it. (Thanks!)","attachments":[{"fallback":"[December 22nd, 2016 10:58 AM] vukolic: <@U0XQ35CDD> <@U0PB67X4K> so we in principle need a JIRA issue for every changeset?","ts":"1482422308.001025","author_subname":"vukolic","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"<@U0XQ35CDD> <@U0PB67X4K> so we in principle need a JIRA issue for every changeset?","author_name":"Marko Vukolic","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/vukolic","author_icon":"https:\/\/secure.gravatar.com\/avatar\/a52edd136bbd07ca069b9393ac60f675.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0006-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1482422308001025","is_share":true,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1482424416.001090"},{"type":"message","subtype":"pinned_item","user":"U0XQ35CDD","item_type":"C","attachments":[{"fallback":"[December 22nd, 2016 8:33 AM] kostas: <@U0Y14MWA2>: Correct. Component `fabric-consensus`, label `sbft`, and the sprint during which this is tackled. Mark the issue as \"In Review\" when the changeset is posted, and mark as \"Done\" when it's merged. A bit of a process, but you quickly get used to it. (Thanks!)","ts":"1482424383.001089","author_subname":"kostas","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"<@U0Y14MWA2>: Correct. Component `fabric-consensus`, label `sbft`, and the sprint during which this is tackled. Mark the issue as \"In Review\" when the changeset is posted, and mark as \"Done\" when it's merged. A bit of a process, but you quickly get used to it. (Thanks!)","author_name":"Kostas Christidis","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/kostas","author_icon":"https:\/\/avatars.slack-edge.com\/2016-04-05\/31983107923_80db5353e9278df980c7_48.png","mrkdwn_in":["text"]}],"text":"<@U0XQ35CDD|kostas> pinned a message to this channel.","ts":"1482424417.001091"},{"type":"message","user":"U0Y14MWA2","text":"ok...","ts":"1482424434.001092"},{"type":"message","user":"U0Y14MWA2","text":"the only changeset I tagged with JIRA is not getting merged though","ts":"1482424466.001093"},{"type":"message","user":"U0Y14MWA2","text":"so I wonder about the pragmatism of following this :slightly_smiling_face:","ts":"1482424476.001094"},{"type":"message","user":"U0Y14MWA2","text":"(kidding)","ts":"1482424487.001095"},{"type":"message","user":"U0XQ35CDD","text":"Ah, I reviewed this last night, forgot to +1.","ts":"1482424530.001096"},{"type":"message","user":"U0Y14MWA2","text":"yeah yeah :wink:","ts":"1482424537.001097"},{"type":"message","user":"U0XQ35CDD","text":"It's true (though I get the timing is fishy). I remember my conversations with Christian on this, and I had actually read the chapter on his book, so it was easy to check.","ts":"1482424615.001098"},{"type":"message","user":"U0Y14MWA2","text":"I always have to recalculate those","ts":"1482424680.001099"},{"type":"message","user":"U0Y14MWA2","text":"the numbers do not stick to brain","ts":"1482424696.001100"},{"type":"message","user":"U112NNFV4","text":"FYI ... I'm drafting a Hyperledger v1.0 overview doc, at a medium-high level (est. one-half page per component, e.g.) so I am interested in this discussion on diffs between SOLO, Kafka and SBFT, for an audience of general HL readers. If these diffs \/ explanations get compiled at some point please LMK. Thanks!","ts":"1482425420.001101"},{"type":"message","user":"U112NNFV4","text":"Working on doc-ing this for external ... SOLO, Kafka, vs. SBFT. mid-high level.","ts":"1482425819.001102"},{"type":"message","user":"U0XQ35CDD","text":"<@U112NNFV4> Will do. Most of the team is on vacation these days, but we'll get something going in sprint 9.","edited":{"user":"U0XQ35CDD","ts":"1482425970.000000"},"ts":"1482425920.001103"},{"type":"message","user":"U112NNFV4","text":"<@U0XQ35CDD> Right, just fyi. I'm committed to some kind of first draft \/ reviewable for Sprint 8. But placeholders for these details is fine for Spring 8 \/ short term, thanks.","ts":"1482426790.001105","reactions":[{"name":"+1","users":["U0XQ35CDD"],"count":1}]},{"type":"message","user":"U112NNFV4","text":"<@U0XQ35CDD> i.e. working on an HL v1.0 overview doc at mid-high level. ...","ts":"1482427115.001106"},{"type":"message","user":"U1B2FF8LR","text":"<@U0Y14MWA2> <@U0N1D1UAE> <@U1B9E51R8>  My understanding is that definitely it is the client that must manage dependencies between transactions, ensuring T1 is committed before the 2nd proposal is submitted, or at least before T2 is broadcast to the orderers; if the sdk plays risky by getting endorsement for T2 and\/or broadcasting T2 before T1 is committed, then it risks failure. In v0.6, transactions could be processed out of order, and I don't think the ordering sevice of v1.0 guarantees transaction submission order will be same as commit order,  either.","ts":"1482435522.001107"},{"type":"message","user":"U1B2FF8LR","text":"I see how the ordering of transactions via trivial FIFO can be guaranteed by the client by waiting for an event notification that the transaction (successful or failed) has been written in a block to ledger (or earlier, such as when it is Delivered by ordering system, if an event is raised at that point). But, does the discussion about ordering transactions actually address the question, given the v1.0 architecture? If the client application submits the 2nd transaction proposal before the 1st one is ordered and\/or committed, then I would think we could agree that the 2nd may fail during validation (if not before) if the first has not been validated and committed already. But maybe the question is: would it be possible that the 2nd (dependent) transaction fail during ENDORSEMENT phase, when the first has not been committed? (How do we know if B has the money from A yet, to transfer it to C? Is that dependency test done during endorsement or validation? I guess answering this would answer my question.)  If so, then there may be other problems to deal with: one thought is that the SDK might have to be able to ensure that the transactions would be broadcast to the ordering service in the same order that the transaction proposals were submitted to the endorsers.","ts":"1482435533.001108"},{"type":"message","user":"U1B9E51R8","text":"<@U1B2FF8LR> Thanks so much for the detailed explanation. I think that's basically in accordance with my understanding.  So, in short, the client has to wait for commitment of T1 and then send proposal for T2(assume T2 can succeed in both endorsement and validation if there's no T1) if T1 will change the state  of readset and\/or writeset of T2.","ts":"1482452897.001110"},{"type":"message","user":"U1B9E51R8","text":"so in this case, endorsement test of T2 will pass with our assumption above, but the validation of T2 will fail","ts":"1482453239.001111"},{"type":"message","user":"U1B9E51R8","text":"in this case, the client will wait for an uncertain long time for the block containing T1 generated. (the commit of T1 is asynchronous, how does the client know when the commit of T1 is done? by polling?) It seems there's no good support for a client to submit a large number of transactions if some of the transactions have dependency(weak dependency, each transaction can survive endorsement and validation if it's the only tx to be submitted, but may fail validation or endorsement if they are submitted by the client in batch)","ts":"1482453498.001112"},{"type":"message","user":"U1SHFS1Q9","text":"Hi <@U1B2FF8LR>, Can you provide some pointer on how the ordering and commit happens in v 0.6? thanks","ts":"1482468900.001113"},{"type":"message","user":"U1B2FF8LR","text":"<@U1B9E51R8> yes overall throughput will be lower when a client must submit many transactions with many dependencies. Maybe the client applications can implement a resend mechanism; just send many transactions with assumption that the order will remain the same and most will complete fine, which is probably true, and just be prepared to re-propose any  transactions that fail validation.\nIn v1.0, the client can register for event notification, It is not fully developed yet. For example, client could request all notifications for a particular transaction - such as when client has other transactions to send which are dependent on the results being settled. Or maybe could request all event notifications per transaction classification - such as all successes or all failures, etc. That is my understanding of the intentions, but I must mention that I do not really know the full API how it will work. Maybe you could get more answers from the authors of the Common SDK API <https:\/\/docs.google.com\/document\/d\/1R5RtIBMW9fZpli37E5Li5_Q9ve3BnQ4q3gWmGZj6Sv4\/edit#heading=h.z6ne0og04bp5>","ts":"1482505281.001114"},{"type":"message","user":"U1B2FF8LR","text":"<@U1SHFS1Q9> v0.6 does not have separate endorser peers. the architecture is much simpler and all functions are combined into a single set of peer nodes. If using a secure and fault-tolerant consensus algorithm such as PBFT, as is provided with the BlueMix networks for example, then clients submit transactions to any peer of a network of 4 peers, which talk to each other to create batches. Imagine many users sending Invoke Transactions to the peers in parallel; the peer consensus network needs to order them, peers all compute and agree on answers, and then commit to ledger. And there is only one chain in v0.6, whereas v1.0 has multiple concurrent chains for different business transaction networks established by clients. Note (in both v0.6 and v1.0) the complexity with ordering is from the distributed network and the parallel processing; but the true difficulties and problems arise when there are breakdowns such as when one or more peer nodes are disconnected or restarted - which causes some transactions to get queued or even lost. And then peer nodes must re-sync with the network when they reconnect, which causes more delays and catch-up algorithms that could lead to unexpected ordering of transactions (different than the order proposed\/requested by clients).","ts":"1482506325.001116"},{"type":"message","user":"U1SHFS1Q9","text":"Thank you so much for the detailed explanation <@U1B2FF8LR>.  This is very helpful. As a follow up question, if all peers are executing the transaction, how is the data privacy maintained? I understood one of the aspects is that the peers will have visibility to data on needs basis.  How is that achieved in v 0.6 (and 1.0)","ts":"1482511980.001117"},{"type":"message","user":"U0XQ35CDD","text":"This is not achieved in v0.6, because of what you pointed out - all validating peers need to execute the transaction. In v1.0, this concept of channels cannot be carried over to the SBFT work for the same reasons. You're probably looking at a sidechains-like construct if you want data privacy at a BFT-based network.","ts":"1482512695.001118"},{"type":"message","user":"U0ZJZBJLF","text":"The `ab.proto` defines different kinds of ways to pull blocks from the ordering service. In example, you can pass max UINT64+block_until_ready and get a never-ending stream of blocks as they are created.\nBut- what is the default behavior of the ordering service client? has it ever been discussed?","ts":"1482512971.001119"},{"type":"message","user":"U1B2FF8LR","text":"In v1.0, only the authorized users\/peers\/organizations of a particular channel can access that channel ledger. Based on that, if we abstract out the orderer service (since it will be a protected portion of the entire network), then from customer perspective, this answers the question at a high level.","ts":"1482513036.001120"},{"type":"message","user":"U1SHFS1Q9","text":"Ok. in V0.6 all peer will have equal access to data","ts":"1482513069.001121"},{"type":"message","user":"U0XQ35CDD","text":"<@U0ZJZBJLF>: \"Default\"? It's essentially a server responding to your requests, right? There is no default.","edited":{"user":"U0XQ35CDD","ts":"1482513098.000000"},"ts":"1482513074.001122"},{"type":"message","user":"U0ZJZBJLF","text":"There is a default because you can ask `block until ready`, or specify seek behavior: `FAIL_IF_NOT_READY = 1;`","edited":{"user":"U0ZJZBJLF","ts":"1482513203.000000"},"ts":"1482513143.001124"},{"type":"message","user":"U0ZJZBJLF","text":"And you can simply not pass max UINT64 but only pass the next block you need, etc. etc.","ts":"1482513160.001125"},{"type":"message","user":"U0ZJZBJLF","text":"I asked about the client's behavior","ts":"1482513173.001126"},{"type":"message","user":"U1SHFS1Q9","text":"If I am using Blockchain for say an health insurance claim, then all  parties need not see all data of the patient.  That is the context in whic eI was asking about data privacy.","ts":"1482513204.001128"},{"type":"message","user":"U0XQ35CDD","text":"I understand that. I would expect that \"block until ready\" is the way you want to roll (so this is a \"sensible default\" if you wish), but again, it's up to the client.","ts":"1482513262.001129"},{"type":"message","user":"U0ZJZBJLF","text":"yeah this is exactly what I'm asking about- \"it's up to the client\"- the client is implemented in the peer, do you or anyone around here know what is the behavior? has it been discussed?","ts":"1482513300.001130"},{"type":"message","user":"U0XQ35CDD","text":"Explicitly no, not that I'm aware of. Implicitly, it's the sensible default I referred to above.","ts":"1482513374.001131"},{"type":"message","user":"U1SHFS1Q9","text":"<@U0XQ35CDD>, do we have the side-chain support or preview in 0.6?  I guess not.  Correct me if I am wrong","ts":"1482513648.001132"},{"type":"message","user":"U0XQ35CDD","text":"Correct.","ts":"1482513659.001133"},{"type":"message","user":"U1B2FF8LR","text":"<@U1SHFS1Q9> the security certificates obtained by the users from the COP (Certificate Authority) will allow users to read or write only what they are supposed to do. Each transaction request will be accompanied by the users certs, and it will be enforced by the peers, which are configured with the endorsement policies and validation policies that dictate who can see and change what things on that channel. Think of it as the peers fulfiling a query request during endorsement or validation steps, but only if the peer knows the user is allowed to see it.","ts":"1482513789.001134"},{"type":"message","user":"U1SHFS1Q9","text":"<@U1B2FF8LR>, that is at the transaction level and not at atomic data element level, right? Also, do we support the endorsement policy confifurations in V0.6? Currently we are evaluating v0.6 through a PoC for one of the clients. Apologies for asking too many questions","ts":"1482514051.001135"},{"type":"message","user":"U1B2FF8LR","text":"yes; I believe the certs will be useful at transaction level, which is what you asked about different parties (users) in an insurance claim.\nno; the policies are new in v1.0.\nYou might want to go read this white paper, if you have not already done so:  <http:\/\/www.the-blockchain.com\/docs\/Hyperledger%20Whitepaper.pdf> \nand maybe <https:\/\/hyperledger-fabric.readthedocs.io\/en\/latest\/biz\/usecases\/>","ts":"1482515495.001136"},{"type":"message","user":"U1SHFS1Q9","text":"Thank you so much <@U1B2FF8LR> for the pointers.","ts":"1482516771.001137"},{"type":"message","user":"U1SHFS1Q9","text":"Thanks <@U0XQ35CDD> for the clarifications.","ts":"1482516813.001138"},{"user":"U39S0S55F","text":"<@U39S0S55F|wangjie> has joined the channel","type":"message","subtype":"channel_join","ts":"1482736683.001139"},{"type":"message","user":"U1SHFS1Q9","text":"A few questions on Consensus.\n\n1. Is there a way to demonstrate a non-concensus scenario in 0.6 or 1.0 of Hyperledger?\n\n2. Given that Hyperledger supports permissioned chain and all transactions are executed on all peers, under what circumstances, a non-consensus will result?  One possible reason could be issues with syncing when a new peer comes up.","ts":"1482810674.001140"},{"type":"message","user":"U0XQ35CDD","text":"Assuming that by non-consensus you refer to a scenario where the network fails to reach consensus, just deploy non-deterministic chaincode to a 0.6 network, e.g. a chaincode that stores a randomly-generated value. (call `rand`, then persist the state)","edited":{"user":"U0XQ35CDD","ts":"1482815778.000000"},"ts":"1482815587.001141"},{"type":"message","user":"U1SHFS1Q9","text":"Yes.  I can understand that, but in case of a deterministic well written chaincode (typically deployed for asset management solutions), what could be the scenarios for network failing to reach consensus?","ts":"1482816038.001143"},{"type":"message","user":"U0XQ35CDD","text":"In 0.6, one scenario would include a network partition that prevents you from having a quorum. For example, in a network of 10 validators, a network partition that takes 4 validators out makes it impossible for the network to move on.","ts":"1482853693.001144"},{"type":"message","user":"U1SHFS1Q9","text":"ok. Thanks so much for the clarifications <@U0XQ35CDD>","ts":"1482854890.001145","reactions":[{"name":"+1","users":["U0XQ35CDD"],"count":1}]},{"type":"message","user":"U0ZJZBJLF","text":"anybody home?","ts":"1482921952.001148"},{"type":"message","user":"U0PB67X4K","text":"depends who you are actually looking for  :wink:","ts":"1482922645.001149"},{"type":"message","user":"U0ZJZBJLF","text":"I just saw that the sbft tests take 90 seconds. It seems like a lot, and I think it could be good if they could run in parallel","edited":{"user":"U0ZJZBJLF","ts":"1482922875.000000"},"ts":"1482922707.001150"},{"type":"message","user":"U0ZJZBJLF","text":"I managed to take them down to 35 seconds by playing with port numbers and adding t.Parallel: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3553\/>","edited":{"user":"U0ZJZBJLF","ts":"1482924360.000000"},"ts":"1482924295.001152","reactions":[{"name":"+1","users":["U1B2FF8LR"],"count":1}]},{"user":"U3JL32AFJ","text":"<@U3JL32AFJ|makimaki18> has joined the channel","type":"message","subtype":"channel_join","ts":"1482934855.001154"},{"type":"message","user":"U0XQ35CDD","text":"This is a welcome change, thx.","ts":"1482939758.001155"},{"type":"message","user":"U1AU8DRQR","text":"guys, I am planning to start sbft refactoring this week","ts":"1483369041.001156","reactions":[{"name":"+1","users":["U0XQ35CDD","U0PB67X4K","U11MANG9G","U0Y14MWA2","U0NCW1DPX"],"count":5}]},{"type":"message","user":"U1AU8DRQR","text":"e.g. moving from custom structures to the common ones","ts":"1483369053.001157"},{"type":"message","user":"U0PB67X4K","text":"good luck <@U1AU8DRQR>!  :wink:","ts":"1483374306.001158"},{"type":"message","user":"U12452RAP","text":"Guys \uff0cwhere can I find the document about bootstrap, configuration, reconfiguration ","ts":"1483411164.001159"},{"type":"message","user":"U12452RAP","text":"BTW, i am curious if fabric orderer support runtime configuration like etcd?","ts":"1483411225.001160"},{"type":"message","user":"U0ULK2JPP","text":"<@U12452RAP> <https:\/\/jira.hyperledger.org\/browse\/FAB-359> is a good start and, going from there, searching \u201cbootstrap\u201d in JIRA should get you all the work that\u2019s going or or planned","ts":"1483411420.001161","reactions":[{"name":"+1","users":["U0NCW1DPX"],"count":1}]},{"type":"message","user":"U12452RAP","text":"<@U0ULK2JPP>: thanks your quick response ","ts":"1483412591.001162"},{"type":"message","user":"U0ULK2JPP","text":"sure thing","ts":"1483413407.001163"},{"type":"message","user":"U39S0S55F","text":"hello everyone , what is the meaning of the epoch ? It is the block or the time? and how  to control replay attacks?","ts":"1483414253.001164"},{"type":"message","user":"U0XPR4NP4","text":"<@U39S0S55F> The epoch is a function of the current block height.  The exact details of this are still pending, but loosely, the submitter will set the epoch in the header, and, as the block height advances, the transaction will eventually age out and become invalid.  This allows for the set of transactions which need to be tracked to prevent replay to be smaller.","ts":"1483453181.001165"},{"type":"message","user":"U0UGH3X7X","text":"scrum ...","ts":"1483455696.001166"},{"text":"<@U0UGH3X7X|tuand> has started a Google+ Hangout for this channel. <https:\/\/hangouts.google.com\/hangouts\/_\/ulc6ezlyzraddepjq4qbgcwqnie|Join Hangout>.","username":"hangouts","bot_id":"B0UKUAJ0Y","type":"message","subtype":"bot_message","ts":"1483455727.001167"},{"type":"message","user":"U39S0S55F","text":"@jyellickThank You !","ts":"1483497268.001168"},{"user":"U3HN4GFA9","text":"<@U3HN4GFA9|tzipih> has joined the channel","type":"message","subtype":"channel_join","ts":"1483503799.001169"},{"type":"message","user":"U2DHRR4TE","text":"<@U0XPR4NP4> (or anyone else who knows) I have a couple more questions if you wouldn't mind answering them:\n\n&gt;The endorsers execute the chaincode to produce a read\/write set. \n\nWhat do the read\/write sets produced by the endorsers consist of? Are they simply \u201cI read in these variables and then wrote out these ones as specified by the chaincode, the specific values I read\/wrote are x, y, z\u201d\n\nIf there are multiple client submitters on a network run by the same organisation, would they tell each other which chaincode has been deployed and share endorsement policies of said chaincode? If so, is this achieved through hyperledger itself or by some auxiliary service that shares the information?\n\n&gt;ordered batches\/blocks are retrieved by calling `Deliver'\u201d (with regards to the ordering service API)\n\nDoes this mean that the committers are polling the ordering service?\n\n&gt;The ordering network may be offered as a service and not involve any of the entities transacting on the chain, or it may be run by one or more of the transacting entities. \n\nDoes this mean that the ordering service is run as an auxiliary service and is not part of hyperledger?\n\nWhat is CFT\/BFT?\n\nGiven you said there is one ordering service for all chains, I take it the transactions for each chain are ordered separately?\n\n&gt;eventually the committer gets a batch (which is really just a block which potentially contains some invalid transactions\n\nIs the ordering service a single node or is it many nodes? \nIf there are many how do they co-ordinate themselves? \nHow many transactions are in each batch?\nCan batches change size?\nWhen batches of ordered transactions are sent off what is in a 'batch' exactly \u2013 is it just a list of transactions?\nWhich organisation on the network runs the ordering network?\n\n&gt;invalid transactions\n\nWhat does 'invalid' mean in this context?","edited":{"user":"U2DHRR4TE","ts":"1483538868.000000"},"ts":"1483538805.001170"},{"type":"message","user":"U0UGH3X7X","text":"CFT\/BFT  crash\/byzantine fault tolerance","ts":"1483539021.001172"},{"type":"message","user":"U0UGH3X7X","text":"the ordering service can be one or more nodes depending on the underlying ordering protocol e.g. solo versus Kafka\/sBFT","ts":"1483539094.001173"},{"type":"message","user":"U0UGH3X7X","text":"how the nodes co-ordinate also depends on the protocol , e.g. a kafka cluster using zookeeper or sBFT using the protocol described in the Castro&amp;Liskov paper","ts":"1483539196.001174"},{"type":"message","user":"U0UGH3X7X","text":"read\/write sets are described in <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/proposals\/r1\/Next-Consensus-Architecture-Proposal.md>","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/proposals\/r1\/Next-Consensus-Architecture-Proposal.md","text":"Read-only mirror of <https:\/\/gerrit.hyperledger.org\/r\/#\/admin\/projects\/fabric>","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/proposals\/r1\/Next-Consensus-Architecture-Proposal.md","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1483539337.001175"},{"type":"message","user":"U0UGH3X7X","text":"the chaincode deployment and endorsement policies can probably be answered better by the guys over in <#C27E2LGJY|fabric-peer-dev>","ts":"1483539420.001177"},{"type":"message","user":"U0UGH3X7X","text":"Deliver() is basically listening to a gPRC stream","ts":"1483539463.001178"},{"type":"message","user":"U0UGH3X7X","text":"the ordering service runs as a separate process from the hyperledger fabric peers.  Fabric does require an ordering service that supports the Broadcast()\/Deliver API  but otherwise you can plugin your own ordering protocol","ts":"1483539723.001179"},{"type":"message","user":"U0XPR4NP4","text":"<@U2DHRR4TE> It looks like <@U0UGH3X7X> already gave some answers, but here is some additional (partially redundant) info\n\n&gt; What do the read\/write sets produced by the endorsers consist of? Are they simply \u201cI read in these variables and then wrote out these ones as specified by the chaincode, the specific values I read\/wrote are x, y, z\u201d\n\nClose.  It's \"I read these variables at these _versions_, and I wrote these variables at these versions, and this is what I wrote\"\n\n&gt; If there are multiple client submitters on a network run by the same organisation, would they tell each other which chaincode has been deployed and share endorsement policies of said chaincode? If so, is this achieved through hyperledger itself or by some auxiliary service that shares the information?\n\nIn general, when someone is informed that a chaincode exists and can be invoked, they should also be informed where it resides, and what endorsements are required.  This is not an in band hyperledger fabric procedure.\n\n&gt; Does this mean that the committers are polling the ordering service?\n\nNo, `Deliver` is a blocking gRPC call, which receives a stream of batches as they are created.\n\n&gt; Does this mean that the ordering service is run as an auxiliary service and is not part of hyperledger?\n\nThe ordering service is required, and multiple implementations are offered through the hyperledger fabric project, (solo [for testing], Kafka, and SBFT [a pbft based protocol]).  But, any consensus implementation which appropriately implements the `Broadcast`\/`Deliver` methods could be used.  Most developers are more interested in the chaincode and application however, so it also provides a nice plug point where an external entity can host the ordering so that the user can focus on the pieces they care about.\n\n&gt; Given you said there is one ordering service for all chains, I take it the transactions for each chain are ordered separately?\n\nCorrectly, order is guaranteed only within a chain.\n\n&gt; Is the ordering service a single node or is it many nodes? \n&gt; If there are many how do they co-ordinate themselves? \n\nThis is all variable based on the ordering implementation and backing consensus algorithm.  For Solo, the answer is \"One node, so no consensus algorithm needed\".  For Kafka: \"Arbitrarily many nodes and the ZK\/Kafka protocol\", For SBFT: \"3f+1 nodes and the sbft variant of the pbft protocol\".\n\n&gt; How many transactions are in each batch?\n&gt; Can batches change size?\n&gt; When batches of ordered transactions are sent off what is in a 'batch' exactly \u2013 is it just a list of transactions?\n\nThe batch size is configurable, and may be reconfigured by the chain admins.  A batch is a block structure, so they form a hash chain.  The batch may contain 'invalid transactions' in so far as there may be MVCC conflicts etc.  This is why we differentiate between the words batch and block though in implementation, they use the same backing data structure.\n\n&gt; Which organisation on the network runs the ordering network?\n\nDepends entirely on network configuration, and is more of a  social\/business question.  For some consensus implementations, multiple stake holders may participate, for others a single entity will be in control.\n\n&gt; What does 'invalid' mean in this context?\n\nTransactions which are not appropriately signed by an authorized user will never make it into a batch, this is the 'validation' which is done at the orderer.  However, if two transactions are submitted changing the same key at the same version for instance, one of these transactions will fail, but they would both make it into the batch.  The one which fails we call 'invalid'.  A transaction might also not be appropriately endorsed, which could cause it to be 'invalid'.  The signing guarantee from the ordering network however assures that no one simply submits garbage and that there is non-repudiation on the submission","ts":"1483542626.001180"},{"user":"U1Y4P0HM4","text":"<@U1Y4P0HM4|yangtao76> has joined the channel","type":"message","subtype":"channel_join","ts":"1483545314.001181"},{"type":"message","user":"U2DHRR4TE","text":"<@U0UGH3X7X> <@U0XPR4NP4> Thanks as alway guys!\n\nCouple of follow ups:\n\n&gt;Close.  It's \"I read these variables at these _versions_, and I wrote these variables at these versions, and this is what I wrote\"\n\nWhat happens if an endorser node gets out of step with the others and doesn't have high enough version numbers to match what is in a read\/write set?\n\n&gt;The ordering service is required, and multiple implementations are offered through the hyperledger fabric project\n\nBut just to check it's not hyperledger code that is running per se, it's simply that we use other projects to do the work for us (once of course we've configured them to use these `Broadcast`\/`Deliver` endpoints)?\n\n&gt;A transaction might also not be appropriately endorsed, which could cause it to be 'invalid'. \n\nSurely if a transaction hasn't been appropriately endorsed it wouldn't be submitted to the ordering network?\n\n&gt;they would both make it into the batch\n\nWould this batch be rejected on the grounds of an invalid transaction before it's sent out?","ts":"1483549099.001182"},{"type":"message","user":"U0XPR4NP4","text":"<@U2DHRR4TE> \n\n&gt; What happens if an endorser node gets out of step with the others and doesn't have high enough version numbers to match what is in a read\/write set?\n\nThe client will see that the endorsement isn't for the same action, and ask a different endorser, or wait some time and ask again.  <@U0ULK2JPP> might have more details\n\n&gt; But just to check it's not hyperledger code that is running per se, it's simply that we use other projects to do the work for us (once of course we've configured them to use these \u2060\u2060\u2060\u2060Broadcast\u2060\u2060\u2060\u2060\/\u2060\u2060\u2060\u2060Deliver\u2060\u2060\u2060\u2060 endpoints)?\n\nYes and no.  Solo is entirely hyperledger code, as is sbft.  Kafka is some hyperledger code to act as a shim to Kafka, but does rely on the Kafka\/Zookeeper code for the backing consensus implementation.  So, depends on how you deploy your network as to whether the orderer is 'some hyperledger code' or 'all hyperledger code' (and there is nothing that prevents someone from implementing these methods on their own and having 'no hyperledger code').\n\n&gt; Surely if a transaction hasn't been appropriately endorsed it wouldn't be submitted to the ordering network?\n\nFor a properly written non-malicious client, yes.  There's no real incentive to submit improperly endorsed transactions though.\n\n&gt; Would this batch be rejected on the grounds of an invalid transaction before it's sent out?\n\nNo, the ordering service only really does the check of \"was the submitter authorized to submit a transaction\", it does not actually process any of the MVCC+postimage data, it does not know how, nor does it know about endorsement policies etc.  This is all handled after the batch has been delivered to the peer.","edited":{"user":"U0XPR4NP4","ts":"1483549623.000000"},"ts":"1483549547.001183","reactions":[{"name":"+1","users":["U1V6SJ1FF"],"count":1}]},{"type":"message","user":"U2DHRR4TE","text":"cool, thanks <@U0XPR4NP4> :slightly_smiling_face:\n\none last question:\n\n&gt;postimage\n\nWhat's a postimage - is this a snapshot of what the worldstate\/variables look like after the transaction executes?","ts":"1483550179.001185"},{"type":"message","user":"U0XPR4NP4","text":"&gt; What's a postimage - is this a snapshot of what the worldstate\/variables look like after the transaction executes?\n\nRight, whereas MVCC is concerned with the version of the keys, the postimage is the new value of (the written) keys.","ts":"1483553208.001186"},{"type":"message","user":"U0XPR4NP4","text":"<@U2DHRR4TE> ^","ts":"1483553674.001187"},{"user":"U33BYSF6H","text":"<@U33BYSF6H|eagel> has joined the channel","type":"message","subtype":"channel_join","ts":"1483604125.001188"},{"user":"U35EMQWK1","text":"<@U35EMQWK1|jojocheung> has joined the channel","type":"message","subtype":"channel_join","ts":"1483605932.001189"},{"type":"message","user":"U112NNFV4","text":"Hello, is one of these design docs current for v1.0 consensus support? -- <https:\/\/wiki.hyperledger.org\/community\/fabric-design-docs> -- Or what should I use as source for drafting external v1.0 consensus doc. Thanks!","ts":"1483626639.001190"},{"type":"message","user":"U0UGH3X7X","text":"<@U112NNFV4> , start with the architecture, flows and multi channel docs on the wiki page, also readme in dir hyperledger\/fabric\/orderer","ts":"1483626817.001191"},{"type":"message","user":"U112NNFV4","text":"Okay thanks <@U0UGH3X7X>. I assume they describe the diffs\/how to choose between Kafka and SBFT, for example. If only one consensus protocol per network is supported. (Or could I have one\/separate SOLO channel\/chain, e.g.) What happens if a change in consensus protocol for an existing network is desired, etc. Questions like those. Inquiries are also coming in as to when each protocol will be ready\/available.","ts":"1483627177.001192"},{"type":"message","user":"U0UGH3X7X","text":"not at that level of detail yet josh ... but start from those docs and we can hash out what's needed here","ts":"1483627686.001193"},{"type":"message","user":"U0UGH3X7X","text":"scrum ...","ts":"1483628432.001194"},{"type":"message","user":"U0UGH3X7X","text":"<https:\/\/hangouts.google.com\/call\/lpieys7bhfhl7a7qlek2qz4ixye>","attachments":[{"title":"Google Hangouts","title_link":"https:\/\/hangouts.google.com\/call\/lpieys7bhfhl7a7qlek2qz4ixye","text":"Click to join now. If the call is over, start a new one with up to 10 friends.","fallback":"Google Hangouts","thumb_url":"https:\/\/www.gstatic.com\/images\/icons\/material\/product\/2x\/hangouts_64dp.png","from_url":"https:\/\/hangouts.google.com\/call\/lpieys7bhfhl7a7qlek2qz4ixye","thumb_width":128,"thumb_height":128,"service_icon":"https:\/\/hangouts.google.com\/favicon.ico","service_name":"hangouts.google.com","id":1}],"ts":"1483628507.001195"},{"user":"U31TA64TT","text":"<@U31TA64TT|newdev2524> has joined the channel","type":"message","subtype":"channel_join","ts":"1483669691.001197"},{"type":"message","user":"U31TA64TT","text":"Hi, I'm using PBFT on v0.6. Is there any guidelines or practices to set VIEWCHANGEPRERIOD and K value? If we have less transactions , how about setting it as 1 for both?","ts":"1483670136.001198"},{"type":"message","user":"U0XPR4NP4","text":"<@U31TA64TT> For low transaction networks this may be acceptable.  Every K blocks, an additional message is exchanged called a checkpoint.  Every VIEWCHANGEPERIOD checkpoints, the PBFT leader changes.","ts":"1483671481.001199","reactions":[{"name":"+1","users":["U31TA64TT"],"count":1}]},{"type":"message","user":"U31TA64TT","text":"<@U0XPR4NP4> Thank you very much for your answer.  BTW, does this mechanism of PBFT carry over to v1.0?","edited":{"user":"U31TA64TT","ts":"1483673399.000000"},"ts":"1483673290.001200"},{"user":"U2BUWHU5C","text":"<@U2BUWHU5C|warong> has joined the channel","type":"message","subtype":"channel_join","ts":"1483673520.001202"},{"type":"message","user":"U0XPR4NP4","text":"<@U31TA64TT> One of the consensus options in v1.0 is SBFT, a variant of PBFT offered in v0.6","edited":{"user":"U0XPR4NP4","ts":"1483674342.000000"},"ts":"1483674333.001203"},{"type":"message","user":"U31TA64TT","text":"<@U0XPR4NP4> Thanks : )","ts":"1483688582.001205"},{"user":"U0KRRM29Z","text":"<@U0KRRM29Z|ecblseg> has joined the channel","type":"message","subtype":"channel_join","ts":"1483731571.001206"},{"type":"message","user":"U0UGH3X7X","text":"scrum ...","ts":"1483974045.001207"},{"text":"<@U0UGH3X7X|tuand> has started a Google+ Hangout for this channel. <https:\/\/hangouts.google.com\/hangouts\/_\/opsfqne475hzjl2cahb6wpxmree|Join Hangout>.","username":"hangouts","bot_id":"B0UKUAJ0Y","type":"message","subtype":"bot_message","ts":"1483974078.001208"},{"type":"message","user":"U1B2FF8LR","text":"<@U0UGH3X7X> <@U0XPR4NP4> When a user client broadcasts a transaction to the orderer, the orderer service is supposed to deliver it in a block to the peers listening on that channel. The design docs do not talk about any broadcast responses to the user. Please clarify: Does the user always get some sort of immediate feedback in a response message - either Success or an appropriate error code (for example If the transaction badly formatted or not signed)? Or is it sent back only when an error is found?","ts":"1483980046.001209"},{"type":"message","user":"U0XPR4NP4","text":"Given a stream of `cb.Envelope`s passed into `Broadcast`, each envelope will get a corresponding `cb.Status_SUCCESS` reply, until there is a failure, which will receive a non `cb.Status_SUCCESS` reply, and the server will terminate the stream.","ts":"1483980146.001210"},{"type":"message","user":"U0XPR4NP4","text":"Any in flight non-acknowledged messages will be discarded.","ts":"1483980166.001211"},{"type":"message","user":"U0XPR4NP4","text":"Only messages which are replied to with a `cb.Status_SUCCESS` are guaranteed to be 'in consensus'","ts":"1483980188.001212"},{"type":"message","user":"U0XPR4NP4","text":"<@U1B2FF8LR> ^","ts":"1483980199.001213"},{"type":"message","user":"U1B2FF8LR","text":"<@U0XPR4NP4>  To clarify that point: if user sends two msgs quickly, where the first one leads to an error response such as 403 or 404, then what is the liklihood that the 2nd would be discarded? I.e. what does \"in-flight\" mean in this context? Or, maybe the more practical question would be: couldn't I expect the https to handle resending it for me? If so, then in practice I could essentially ignore this and interpret your answer to mean that \"yes the sender of every broadcast message should normally get a response\"","ts":"1483981385.001214"},{"type":"message","user":"U0XPR4NP4","text":"<@U1B2FF8LR> If the user sends two messages quickly, and the first one errors, then the second will, with 100% certainty be discarded.","ts":"1483981420.001215"},{"type":"message","user":"U0XPR4NP4","text":"If you wish the second message to enter the system, you need to re-establish the `Broadcast` link and submit it again","ts":"1483981452.001216"},{"type":"message","user":"U1B2FF8LR","text":"oh, so a new stream is started by the sender, after receipt of the error-coded response?","ts":"1483981476.001217"},{"type":"message","user":"U0XPR4NP4","text":"Correct, because the server will have terminated the `Broadcast` stream on error","ts":"1483981492.001218"},{"type":"message","user":"U1B2FF8LR","text":"ok. that answers my original question as well as provides expected behavior for more detailed use-cases. The user would be expected to resend any transactions that are not confirmed, But do you know - would that be a resposibility\/function of http, or of the client (behave test client, or the SDK\/applic code)?","ts":"1483981873.001219"},{"type":"message","user":"U0XPR4NP4","text":"It would be on the client","ts":"1483982236.001220"},{"type":"message","user":"U0XPR4NP4","text":"The client should basically keep a buffer of unacknowledged requests, and, if the stream terminates, it should reconnect and resend what's in the buffer","ts":"1483982271.001221"},{"type":"message","user":"U1B2FF8LR","text":"ok. thanks. that is what I was thinking. I remember reading in common.pb.go that we use error codes similar to those used by http; so I need to keep straight what gets handled in which layer.","ts":"1483982937.001222"},{"type":"message","user":"U0ZJZBJLF","text":"Question- does the OS check for anything besides signatures of the client on the transaction broadcasted? Meaning- is it possible to broadcast() lots of fake\/un-endorsed transactions to the OS to make it cut blocks with mostly invalid transactions that would be marked as invalid in the peers?","edited":{"user":"U0ZJZBJLF","ts":"1484002039.000000"},"ts":"1484001946.001223"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZJZBJLF> The only check is on the outer signature.  There is no check on the endorsements, so yes, definitely a client could submit a bunch of bad trans to force frequent block cutting.","edited":{"user":"U0XPR4NP4","ts":"1484003816.000000"},"ts":"1484003782.001227"},{"type":"message","user":"U0XPR4NP4","text":"But, since they are validly signed, it should be trivial to identify the misbehaving party, revoke their authorization on the system, and proceed normally.","edited":{"user":"U0XPR4NP4","ts":"1484003866.000000"},"ts":"1484003852.001229"},{"type":"message","user":"U0XPR4NP4","text":"The ordering service does not know what an endorsement is, or how to decode the `Data` or an `Envelope` of type `ENDORSER_TRANSACTION`","edited":{"user":"U0XPR4NP4","ts":"1484003931.000000"},"ts":"1484003922.001231"},{"type":"message","user":"U0ZJZBJLF","text":"only in retrospect though","ts":"1484003929.001232"},{"type":"message","user":"U0ZJZBJLF","text":"it'll be really hard","ts":"1484003935.001234"},{"type":"message","user":"U0ZJZBJLF","text":"since the ordering service doesn't know something wrong is happening, and the peers I assume, only give indication in the logs","ts":"1484003964.001235"},{"type":"message","user":"U0ZJZBJLF","text":"so it'll be like: peers log lots of errors\/warnings --&gt; hopefully there is some log monitoring agnet *and* a monitoring\/operations team seeing alerts ---&gt; they contact the cop(?) and it publishes a CRL?","ts":"1484004025.001236"},{"type":"message","user":"U0XPR4NP4","text":"Someone could also submit many transactions with knowingly bad MVCC sets.  It would be a slightly trickier thing, but unless the orderer is maintaining all the state and essentially becoming a peer committer, I think this is very hard to dodge.","ts":"1484004059.001237"},{"type":"message","user":"U0XPR4NP4","text":"I think in general, the network admins will want to monitor for 'invalid transactions', and if there's a high volume of any sort, investigate why","ts":"1484004098.001238"},{"type":"message","user":"U0ZJZBJLF","text":"wait, peer committer? I thought the OS is *orderer-ledger*","ts":"1484004099.001239"},{"type":"message","user":"U0ZJZBJLF","text":"I didn't know the OS will do block validation","ts":"1484004126.001240"},{"type":"message","user":"U0XPR4NP4","text":"It does not","ts":"1484004130.001241"},{"type":"message","user":"U0ZJZBJLF","text":"I also remember you said it currently has a \"toy ledger\"","ts":"1484004139.001242"},{"type":"message","user":"U0XPR4NP4","text":"I was simply saying, unless you want the ordering service to do exactly all of the validation that the peer does (which we do not want to do), then a clever client will be able to submit junk into the system","ts":"1484004170.001243"},{"type":"message","user":"U0ZJZBJLF","text":"yeah","ts":"1484004194.001244"},{"type":"message","user":"U0XPR4NP4","text":"However, this clever client will have to submit the junk under his own ID","ts":"1484004194.001245"},{"type":"message","user":"U0XPR4NP4","text":"Which makes the attack significantly less attractive.","ts":"1484004208.001246"},{"type":"message","user":"U0ZJZBJLF","text":"what about replay attacks?","ts":"1484004217.001247"},{"type":"message","user":"U0XPR4NP4","text":"The envelope header is designed for replay attack detection","ts":"1484004235.001248"},{"type":"message","user":"U0XPR4NP4","text":"It's unimplemented, but, all the pieces are there","ts":"1484004247.001249"},{"type":"message","user":"U0ZJZBJLF","text":"how? timestamp?","ts":"1484004253.001250"},{"type":"message","user":"U0XPR4NP4","text":"Timestamp + epoch + nonce","ts":"1484004260.001251"},{"type":"message","user":"U0ZJZBJLF","text":"I see","ts":"1484004289.001252"},{"type":"message","user":"U0ZJZBJLF","text":"ok thanks, was just curious","ts":"1484004302.001253"},{"type":"message","user":"U0XPR4NP4","text":"Sure thing, let me know if I can answer any other questions","ts":"1484004328.001254","reactions":[{"name":"+1","users":["U0ZJZBJLF"],"count":1}]},{"type":"message","user":"U0ZJZBJLF","text":"<@U0XPR4NP4> , I somehow mustered the cognitive strength to answer the JIRA issue you commented today (MSP replication). But I have a follow up question I prefer asking here and  I hope isn't stupid or already discussed, and if it is- it's probably because of the hour here :wink:","edited":{"user":"U0ZJZBJLF","ts":"1484005422.000000"},"ts":"1484005404.001255"},{"type":"message","user":"U0ZJZBJLF","text":"You know the story with the anchor peers right?","ts":"1484005491.001257"},{"type":"message","user":"U0ZJZBJLF","text":"I know you guys were against saving the peer membership in the ledger, I guess rightly-so because that would impact throughput if the churn rate is high, but- is it possible to update the anchor peer list, within a channel (if needed - meaning- if the anchor peers die) once in a long period of time? (I was thinking perhaps, once per a few minutes, if needed of course). \nThe only \"problem\" with the anchor peer (at least as I see it) is that it needs to be alive all the time. If somehow the gossip layer within an org could update its anchor peer in all channels of the org, that problem would go away.","edited":{"user":"U0ZJZBJLF","ts":"1484006178.000000"},"ts":"1484006164.001258"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZJZBJLF> So absolutely, it _can_ be updated, but updating once every few minutes seems like far too frequent to me.  I thought the proposed solution here had been to use a DNS address which could rotate through IPs round robin or have updates pushed to it trivially","ts":"1484006895.001260"},{"type":"message","user":"U0XPR4NP4","text":"(Especially as you stay protected from bad connections via TLS)","ts":"1484006907.001261"},{"type":"message","user":"U0ZJZBJLF","text":"a few min is the lower bound","ts":"1484006930.001262"},{"type":"message","user":"U0ZJZBJLF","text":"the upper bound is, never","ts":"1484006933.001263"},{"type":"message","user":"U0ZJZBJLF","text":"the DNS solution has major drawbacks IMO","ts":"1484006975.001264"},{"type":"message","user":"U0ZJZBJLF","text":"0) This is the major one: you need org A to be able to update the information in org B about the anchor peer(s) of org A. You assume org B would give org A access to update its DNS records? very unlikely...\n1) You can't program this into fabric because you would have to integrate with many types of DNS providers \\ server types, it seems brittle\n2) I was thinking that a customer could specify in the core.yaml whether this peer is a candidate to be an anchor peer or not. and that's all the customer would need to configure, the rest would be done by the fabric, magically.","ts":"1484007176.001265"},{"type":"message","user":"U0XPR4NP4","text":"0) I'm confused by this one.  Why does org A need to be able to update the info for org B? Why would org B allow this?\n1) Agreed\n2) I agree this is a nice idea, and I'd say this is something that could be implemented as a normal endorser transaction (and not a configuration transaction) but then you have the problem of bootstrapping.  The nice thing about the config transaction is that everything you need to bootstrap at any point is in there.  But the more frequently it changes, the worse properties it has.","ts":"1484007393.001266"},{"type":"message","user":"U0ZJZBJLF","text":"where is the bootstrapping problem?","ts":"1484007416.001267"},{"type":"message","user":"U0ZJZBJLF","text":"no need the bootstrap to have them (the anchor peers)","edited":{"user":"U0ZJZBJLF","ts":"1484007456.000000"},"ts":"1484007422.001268"},{"type":"message","user":"U0XPR4NP4","text":"If you don't need anchor peers at bootstrap, I'd say kick them out of the configuration block, and make it a normal chaincode.","ts":"1484007505.001271"},{"type":"message","user":"U0XPR4NP4","text":"Then you can change things as often as you'd like","ts":"1484007510.001272"},{"type":"message","user":"U0XPR4NP4","text":"I thought it was needed for state transfer to function reasonably for a new organization","ts":"1484007529.001273"},{"type":"message","user":"U0ZJZBJLF","text":"oh no, it is needed for cross-organization + it's now an implementation detail that I use in the code to enumerate the organizations of a channel (by the anchor peers)","ts":"1484007592.001274"},{"type":"message","user":"U0ZJZBJLF","text":"I know, perhaps I should have made it something like:","ts":"1484007603.001275"},{"type":"message","user":"U0ZJZBJLF","text":"channel organizations := thisPeerOrg \\cup {organizations of anchor peer list}","ts":"1484007630.001276"},{"type":"message","user":"U0ZJZBJLF","text":"Regarding 0- sorry, I'm not thinking clearly at 2:20 AM. Obviously if org B can query org A's DNS server it's enough and org A can simply update *its own DNS records*","ts":"1484007688.001277"},{"type":"message","user":"U0ZJZBJLF","text":"it is also needed to establish view (membership) of all peers of the channel","ts":"1484007766.001278"},{"type":"message","user":"U0ZJZBJLF","text":"some... clients, require this","ts":"1484007771.001279"},{"type":"message","user":"U0ZJZBJLF","text":"&gt; The nice thing about the config transaction is that everything you need to bootstrap at any point is in there.  But the more frequently it changes, the worse properties it has.\n\nSo, what I'm saying is- if an anchor peer is selected wisely within an organization, and it doesn't die every few minutes - rather it stays stable- perhaps this is the right path to take?","ts":"1484007872.001280"},{"type":"message","user":"U0XPR4NP4","text":"Re 0: Right, maybe this is unreasonable to think org A will publish its DNS names in a publically accessible way, this just seemed like a standard piece that most orgs already had.  Maybe feedback from someone like <@U0PB67X4K> on how real world deployments are likely to be done would help","ts":"1484007948.001281"},{"type":"message","user":"U0ZJZBJLF","text":"and advantage 3) not every hyperledger client wants to install a DNS server","ts":"1484007968.001282"},{"type":"message","user":"U0ZJZBJLF","text":"and fabric doesn't come with a DNS server","ts":"1484007979.001283"},{"type":"message","user":"U0XPR4NP4","text":"Well, you don't _have_ to install a DNS server, for a small deployment, you can reference things by IP, but DNS would give you additional flexibility.","ts":"1484007995.001284"},{"type":"message","user":"U0ZJZBJLF","text":"what? IP is even worse","ts":"1484008010.001285"},{"type":"message","user":"U0ZJZBJLF","text":"this requires you to do L-3 load balancing\/clustering","ts":"1484008024.001286"},{"type":"message","user":"U0XPR4NP4","text":"I mean you can roll it out without DNS, for a 'small deployment where deploying DNS is onerous'","ts":"1484008040.001287"},{"type":"message","user":"U0XPR4NP4","text":"But publishing a few DNS records seems like it should be trivial for most people....","ts":"1484008063.001288"},{"type":"message","user":"U0ZJZBJLF","text":"yeah but in small deployments you mean the anchor peer is well, an anchor?","ts":"1484008065.001289"},{"type":"message","user":"U0XPR4NP4","text":"Right, for something like a POC test net where you want things entirely hyperledger contained","ts":"1484008088.001290"},{"type":"message","user":"U0XPR4NP4","text":"With TLS, publishing DNS records even through a third party seems relatively safe","ts":"1484008220.001291"},{"type":"message","user":"U0ZJZBJLF","text":"but the bottom line is, are you against my idea given the promise that the update rate per channel will have a lower bound of once per X minutes? \nI think that actually, if an anchor peer dies it's OK as long as a new channel isn't created","ts":"1484008271.001292"},{"type":"message","user":"U0XPR4NP4","text":"Right, bottom line, I think that's too frequent.","ts":"1484008289.001293"},{"type":"message","user":"U0ZJZBJLF","text":"what time-span isn't too frequent in your opinion?","ts":"1484008307.001294"},{"type":"message","user":"U0XPR4NP4","text":"I'd say scheduled changes maybe quarterly? With obvious exceptions for something like adding a new org member.","ts":"1484008355.001295"},{"type":"message","user":"U0ZJZBJLF","text":"quarterly is 15 min?","ts":"1484008382.001296"},{"type":"message","user":"U0XPR4NP4","text":"3 months","ts":"1484008387.001297"},{"type":"message","user":"U0ZJZBJLF","text":"I'm talking about lower bound. if the anchor peer dies, how long to wait until a new one is elected in the org, and published on all channels","ts":"1484008449.001298"},{"type":"message","user":"U0XPR4NP4","text":"I always go back to something that Simon said a while back.  If someone actually wants to implement this system securely, they're going to put their admin keys on a USB key, and only access them on an air gapped machine inside a vault.  The notion that reconfiguration is automated is a bit antithetical to this idea.","ts":"1484008596.001299"},{"type":"message","user":"U0ZJZBJLF","text":"btw- \"With TLS, publishing DNS records even through a third party seems relatively safe\" I assume you mean that org A and org B have DNS replication among them?","ts":"1484008644.001300"},{"type":"message","user":"U0ZJZBJLF","text":"because, DNS is plaintext UDP from what I know. so you assume that each org queries its own DNS for the records of the other org's DNS","ts":"1484008672.001301"},{"type":"message","user":"U0XPR4NP4","text":"There's <https:\/\/en.wikipedia.org\/wiki\/Domain_Name_System_Security_Extensions>","attachments":[{"title":"Domain Name System Security Extensions","title_link":"https:\/\/en.wikipedia.org\/wiki\/Domain_Name_System_Security_Extensions","author_name":"Wikipedia","author_link":"http:\/\/en.wikipedia.org\/","text":"The Domain Name System Security Extensions (DNSSEC) is a suite of Internet Engineering Task Force (IETF) specifications for securing certain kinds of information provided by the Domain Name System (DNS) as used on Internet Protocol (IP) networks. It is a set of extensions to DNS which provide to DNS clients (resolvers) origin authentication of DNS data, authenticated denial of existence, and data integrity, but not availability or confidentiality.","fallback":"wikipedia: Domain Name System Security Extensions","service_icon":"https:\/\/a.slack-edge.com\/bfaba\/img\/unfurl_icons\/wikipedia.png","id":1}],"ts":"1484008701.001302"},{"type":"message","user":"U0XPR4NP4","text":"But more that, if someone hijacks your records, they cannot impersonate you, because they do not have a correct certificate chain to make the TLS connection,.","ts":"1484008729.001304"},{"type":"message","user":"U0ZJZBJLF","text":"I don't think customers would like this, but maybe I'm wrong.","ts":"1484008762.001305"},{"type":"message","user":"U0XPR4NP4","text":"I'm certainly open to other ideas, and would really like to hear what a real deployer is likely to like or not like","ts":"1484008808.001306"},{"type":"message","user":"U0ZJZBJLF","text":"Anyway, I need to get up tomorrow (today) morning too. if anyone is reading this you should start from: <https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1484006164001258>","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1484006164001258","fallback":"[January 9th, 2017 3:56 PM] yacovm: I know you guys were against saving the peer membership in the ledger, I guess rightly-so because that would impact throughput if the churn rate is high, but- is it possible to update the anchor peer list, within a channel (if needed - meaning- if the anchor peers die) once in a long period of time? (I was thinking perhaps, once per a few minutes, if needed of course). \nThe only \"problem\" with the anchor peer (at least as I see it) is that it needs to be alive all the time. If somehow the gossip layer within an org could update its anchor peer in all channels of the org, that problem would go away.","ts":"1484006164.001258","author_subname":"yacovm","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"I know you guys were against saving the peer membership in the ledger, I guess rightly-so because that would impact throughput if the churn rate is high, but- is it possible to update the anchor peer list, within a channel (if needed - meaning- if the anchor peers die) once in a long period of time? (I was thinking perhaps, once per a few minutes, if needed of course). \nThe only \"problem\" with the anchor peer (at least as I see it) is that it needs to be alive all the time. If somehow the gossip layer within an org could update its anchor peer in all channels of the org, that problem would go away.","author_name":"Yacov Manevich","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/yacovm","author_icon":"https:\/\/avatars.slack-edge.com\/2016-09-30\/85916865123_74ecb5d18535acea44aa_48.png","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1484008856.001307"},{"type":"message","user":"U0XPR4NP4","text":"The configuration block is intended to be 'relatively static configuration for the chain'.  And so overloading it with information which is anticipated to change (beyond long term administrative tasks like key rotation) feels wrong to me.","ts":"1484008888.001309"},{"type":"message","user":"U0XPR4NP4","text":"For instance, if an entity can make configuration changes, they can do a fairly effective denial of service to prevent others from reconfiguring the chain.","ts":"1484008925.001310"},{"type":"message","user":"U0ZJZBJLF","text":"you can just send transactions","ts":"1484008941.001311"},{"type":"message","user":"U0ZJZBJLF","text":"what's the difference?","ts":"1484008945.001312"},{"type":"message","user":"U0ZJZBJLF","text":"that the conf. block has only 1 transaction?","ts":"1484008953.001313"},{"type":"message","user":"U0XPR4NP4","text":"To construct a configuration transaction you must know the sequence number and contents of the previous configuration block.","ts":"1484008970.001314"},{"type":"message","user":"U0XPR4NP4","text":"So, if someone is rapidly sending reconfiguration transactions, incrementing the sequence number and tweaking the contents, then the other parties cannot guess the next seqno and contents","ts":"1484008996.001315"},{"type":"message","user":"U0XPR4NP4","text":"It is essentially an exclusive lock.","ts":"1484009017.001316"},{"type":"message","user":"U0XPR4NP4","text":"In low trust networks, I would expect for no configuration modification to be allowed without at least two parties participating, more likely, the byzantine threshold","ts":"1484009044.001317"},{"type":"message","user":"U0XPR4NP4","text":"So, for me to modify my MSP, I should sign, and get f others to sign as well.","ts":"1484009058.001318"},{"type":"message","user":"U0ZJZBJLF","text":"but the only ones that can do that are the peers of the channel!","ts":"1484009059.001319"},{"type":"message","user":"U0XPR4NP4","text":"'do that'? What is 'that'?","ts":"1484009076.001320"},{"type":"message","user":"U0ZJZBJLF","text":"send a conf. block","ts":"1484009087.001321"},{"type":"message","user":"U0XPR4NP4","text":"Peers generally don't send configuration transactions","ts":"1484009096.001322"},{"type":"message","user":"U0XPR4NP4","text":"The application can send one to construct a channel (which may have lower privilege requirements to allow automated creation)","ts":"1484009115.001323"},{"type":"message","user":"U0ZJZBJLF","text":"yeah, but I'm saying they all know the seq numbers.","ts":"1484009118.001324"},{"type":"message","user":"U0XPR4NP4","text":"They do","ts":"1484009125.001325"},{"type":"message","user":"U0XPR4NP4","text":"But, if someone were rapidly hammering on the service, incrementing the sequence number, the peer sequence numbers would lag","ts":"1484009147.001326"},{"type":"message","user":"U0ZJZBJLF","text":"I understand. this is a viable attack.","ts":"1484009170.001327"},{"type":"message","user":"U0ZJZBJLF","text":"just like... you know what","ts":"1484009180.001328"},{"type":"message","user":"U0ZJZBJLF","text":"sending fake transactions that would make frequent block cutting","ts":"1484009212.001329"},{"type":"message","user":"U0ZJZBJLF","text":"anyway, I'm off. ttyl","ts":"1484009219.001330"},{"type":"message","user":"U0XPR4NP4","text":"Alright, we can discuss more tomorrow","ts":"1484009224.001331"},{"type":"message","user":"U1B2FF8LR","text":"I thought the anchor peers was a static list, that an admin can hand out to new member organizations that would like to join the network. If that list is changing regularly, that becomes an Administrator's pain-in-the-arse. Yes let's think carefully about the impact...","ts":"1484017481.001332"},{"type":"message","user":"U1B2FF8LR","text":"I have a different question, this time about what user-registration really means in v1.0.  <@U0XPR4NP4>  you said earlier that \"transactions which are not appropriately signed by an authorized user will never be put into a batch\".  Now, when a user registers with a peer, they are allowed to submit transaction proposals, right? Does that mean (as in v0.5) they can submit to just that one peer? Does it include ALL channels that the peer knows about (now, or in the past, or future)?  OK, what I really want to know is: Do the orderers ensure that a broadcast transaction is signed by an authenticated-user on a PER-CHANNEL basis? From the orderer's perspective, what exactly is an authenticated user?","ts":"1484018195.001333"},{"type":"message","user":"U1B2FF8LR","text":"Other thoughts: We must register a user with a peer component, but it does not make sense to register a user with a specific orderer component - because a peer could submit transactions to any orderer, right? Yet, we say the orderers will accept broadcasts only from authenticated users. Does the user submit broadcasts using a peer's cert (from one of the peers that endorsed its proposal, which is a member of the channel for which the transaction applies)?","ts":"1484018670.001334"},{"type":"message","user":"U0XPR4NP4","text":"<@U1B2FF8LR> The orderer cares only whether the signature on the transaction (`Envelope`) satisfies the orderer ingress policy.  Most likely, this policy is that the signature is an authorized user of any of the chain MSPs.  This policy is specified per chain.  There is no notion of 'user-registration' at the orderer, only identity and signature.  Also keep in mind that the peers no longer submit transactions in the new architecture, so there's no notion of a \"peer's cert\" submitting a transaction, this will be a user\/application cert.","ts":"1484020245.001335"},{"type":"message","user":"U12452RAP","text":"guys, I remember some of you sent the sbft paper link yet, could anyone send me again? more appreciate","ts":"1484023068.001336"},{"type":"message","user":"U1B2FF8LR","text":"<@U0XPR4NP4>  \"the signature is an authorized user of any of the chain MSPs\". I intrpret that as any user that registered with any peer in any member-organization that is participating in the transaction's associated channel. But your statement seems contradictory: if there is no notion of peer cert, then how does the orderer determine from the user's signature if it is part of a member org which is participating on that channel?","ts":"1484023166.001337"},{"type":"message","user":"U1B2FF8LR","text":"maybe it might help if  I could find the definition of what exactly is in the signature?","ts":"1484023232.001338"},{"type":"message","user":"U0XPR4NP4","text":"<@U1B2FF8LR> There is the notion of Policy.  In the case of `Broadcast`, this indicates what 'identities' (where identity may be a specific certificate, or certificate attribute, or any other principal supported by the MSP) are authorized to invoke `Broadcast` on a particular chain.  The orderer has no notion of what a peer is, only what the ingress policy for a specified chain is.   Typically, you can expect that the orderer ingress policy allows all MSP user certs for a chain to be allowed to invoke `Broadcast` for that chain.","edited":{"user":"U0XPR4NP4","ts":"1484056007.000000"},"ts":"1484025764.001339"},{"user":"U1F3CQ2HX","text":"<@U1F3CQ2HX|nhrishi> has joined the channel","type":"message","subtype":"channel_join","ts":"1484032821.001343"},{"type":"message","user":"U1B9E51R8","text":"<@U0XPR4NP4> Hi Jason, I'm curious about the replay attack prevention. Why not just using txId? Since txId is unique in the ledger, replayed txID will not be accepted. Forgive me if I'm asking a silly question :smile:","ts":"1484040024.001344"},{"user":"U1V5VNSAD","text":"<@U1V5VNSAD|subax> has joined the channel","type":"message","subtype":"channel_join","ts":"1484046851.001345"},{"type":"message","user":"U1AU8DRQR","text":"<@U1B9E51R8> In case of chaincodes, one can run the same chaincode with the same arguments. As far as I know, this would result the same transaction so the txID would be the same. (I hope this has any relationship with your question)","ts":"1484048117.001346"},{"type":"message","user":"U1B9E51R8","text":"<@U1AU8DRQR> Thank you for your response. To be more clear, client sends a tx(txId: 123) to OS and committed as a valid tx in ledger. If a malicious node replays this tx(txId: 123), the committer node won't accept it because there's already a tx w\/ same txId in the ledger. My question was whether the replay attack could be prevented by verifying the unique txId?","ts":"1484049504.001347"},{"type":"message","user":"U1B9E51R8","text":"or even depending on the MVCC check? because replayed tx should not pass MVCC validation","ts":"1484049530.001348"},{"type":"message","user":"U1AU8DRQR","text":"&gt; My question was whether the replay attack could be prevented by verifying the unique txId?\n<@U1B9E51R8> I guess it could be (depending on the chaincode \/ actual application)\n&gt; or even depending on the MVCC check? because replayed tx should not pass MVCC validation\nMVCC is the validation chaincode right? and one can write its own validation chaincode. so yes, one can write one that does the appropriate check","ts":"1484049863.001349"},{"type":"message","user":"U1B9E51R8","text":"thanks Gabor","ts":"1484052513.001350"},{"type":"message","user":"U0NCW1DPX","text":"<@U12452RAP> are you looking for this? <http:\/\/sammantics.com\/blog\/2016\/7\/27\/chain-1>","attachments":[{"service_name":"SAMMANTICS","title":"Chain: Simplified Byzantine Fault Tolerance (SBFT)","title_link":"http:\/\/sammantics.com\/blog\/2016\/7\/27\/chain-1","text":"This post aims to look at some of the key features of the Chain Open Standard, a permissioned blockchain,\u00a0specifically its consensus mechanism.\u00a0 Blockchain startup Chain, \u00a0recently released an open source permissioned blockchain built in collaboration with 10 global financial firms and telcos. \u00a0This platform is made for financial applications that require high scalability ( &gt; thousands of transactions per second), robust security and near absolute privacy. \u00a0Blockchains must be built for the regulatory requirements of these institutions as well. These are attributes the financial services sector requires. \u00a0If speed is the key characteristic of this platform, network stability becomes very important in any solution designed. \u00a0Chain was built with this design assumption in mind. Partners in the project include Capital One, Citi, Fidelity, First Data, Fiserv, Mitsubishi UFJ, Nasdaq, Orange, State Street and Visa, all of which have contributed to the technology. This platform is being called the Chain Open Standard. \u00a0Chain Core is the software implementation of the Chain Open Standard and is designed to run for enterprise IT environments. Note: Chain Core is the name Chain has given to nodes on its platform.\u00a0 Consensus Mechanism: Simplified Byzantine Fault Tolerance (SBFT) In SBFT, one designated block generator collects and validates proposed transactions, periodically batching them together into a new-block proposal. \u00a0Consensus is provided by a Generator that applies rules (validates) agreed to by the nodes (chain cores)\u00a0to the block and designated block signors.\u00a0Other (multiple) designated block signers ratify the proposed block with their signatures. \u00a0\u00a0All network members know the identities of the block signers (permissioned blockchain)\u00a0and accept blocks only if signed by a sufficient number of signers. A Block Signer validates all transactions in each block and adds a signature.\u00a0 Only blocks with sufficient signatures are accepted into the chain.\u00a0This attempts to prevent the double spending problem by attempting to ensure competing transactions gets resolved.\u00a0 By using 1 generator (master replicator) in a trusted, private environment this effectively allows for kind of scale and speed needed for transactions and for the signors to validate transactions. \u00a0These signors are configurable meaning they can be added\/removed from the system at any time. \u00a0The same goes for the nodes (chain cores) in the network. \u00a0They can be added\/deleted since it is a private network and this adds an extra layer of security particularly when dealing with what could be a malicious actor. As a result of using 1 generator instead of multiple, synchronization does not occur. \u00a0Synchronization is a process that establishes consistency of data between 2 or more entities.\u00a0This feature allows for scalability and speed to not be affected for the enterprise grade solution.\u00a0 \u00a0Since the blockchain is private and the entities are known multiple generators could be seen as a redundancy. \u00a0Not all nodes need to be online for this platform to function at a minimum \u00a01 generator and 1 signor are needed. \u00a0However, typically it allows 100 participants to interact, only needs 5 signors, 1 generator and 1 issuer (some regulatory body). \u00a0The Fault Tolerance in this setup allows for 3 out of 4 or 4 out of 5 signors. The Privacy section will go into the details of how the Chain Open Standard tackles the problem of Confidentiality of information for the platform participants. \u00a0Open, permissionless blockchains like Bitcoin are transparency machines in that all participants can view information on the network. \u00a0Chain has built a solution for those who need privacy as a main feature. \u00a0Without the need for complete transparency and all nodes (chain cores) receiving transactional information, scalability does not get sacrificed, but transparency does. \u00a0All systems have trade-offs. \u00a0In this system, \u00a0the nodes (chain cores) would only get block proofs by node platform. \u00a0\u00a0 The node (core) itself, \u00a0could store all the blockchain data or only a snapshot (balance sheet) and a limited history of activity from the Account Manager (described below). \u00a0 Stages 1. The Asset Issuer (presumably a node on the platform) creates what can be an unlimited number of cryptographically unique Asset ID's. \u00a0 (Creation Phase) 2. Units of these assets are issued on a blockchain. \u00a0(Submission Phase) 3. An Asset ID is associated with an Asset Definition. (Asset Definitions can be self enforcing rules to meet specific conditions depending on the use case. \u00a0These can have an unlimited amount of reference data) (Validation Phase) 4. Once issued, units of an asset ID can be stored in and transferred between accounts, programmatically transacted via smart contracts, or retired from circulation. (Signing Phase and Pulling into Nodes Phase) 5. \u00a0After the Signing Phase the transaction goes live. One of the interesting features of this system is the Account Manager which serves many key roles. \u00a0It stores assets in secure accounts. \u00a0This is where transaction data gets stored. \u00a0These accounts can contain any combination of assets and created for many different types of users. \u00a0These accounts can be thought of as digitally secure wallets. In addition to storing assets, the Account Manager enables the transferability of assets in to and out of accounts via blockchain transactions (within the same Core or between different Cores in the network). The Account Manager builds the smart contracts for all different types of transactions (See Smart Contract Section). \u00a0Each transaction is a smart contract. \u00a0 Ownership of the assets flows through the system by using a push model. \u00a0The addresses are provided by other parties and the unique Asset ID's and accounts that get created are used to designate ownership of the assets. \u00a0The smart contract (transaction) defines what actions a designated party can take. Privacy &amp; Security The Chain Open Standard is a private network in which confidentiality of information is one of top priorities. This platform has been designed to support selective disclosure of sensitive information. This is done using three techniques: one-time-use addresses, zero knowledge proofs, and encrypted metadata. A one-time address is created each time an account holder wishes to receives assets. These differing addresses prevent other observers of the blockchain from associating transactions with each other or with a particular party. To cryptographically conceal the contents (assets and amounts)\u00a0of a transaction, \u201czero knowledge proofs,\u201d are used,\u00a0while still allowing the entire network to validate the integrity of the contents. Zero Knowledge Proofs (ZKPs) do this by one party proving to another party that a given statement is true, without conveying any information (in this case, about the transaction) apart from the fact that the statement is indeed true.\u00a0Only the counter-parties (and those granted access) can view the details of the transaction. Also transaction metadata can be encrypted with traditional PKI, to conceal details from all but the relevant parties. \u00a0The platform uses keys to prove verifiable authenticity (signatures) of the messages delivered between the nodes (chain cores). The keys are generated by creating an unlimited number of cryptographically unique Asset IDs. \u00a0These keys get rotated every 2-3 weeks. \u00a0Rotating keys is a process for decrypting data with an old key and applying the data to a new key by re-keying. \u00a0These keys should probably be kept in different places or data centers. If one of the keys gets compromised then use other key to generate backup keys and transfer over all assets to new key. \u00a0Key management and rotation is essential to managing secure digital assets. These keys also allow and restrict access to certain activities. Chain Core also integrates with industry-standard hardware security module (HSM) technology. All block a\u2026","fallback":"SAMMANTICS: Chain: Simplified Byzantine Fault Tolerance (SBFT)","image_url":"http:\/\/static1.squarespace.com\/static\/564100e0e4b08c9445a5fc5d\/t\/57b148f9e6f2e1dc08c8fd29\/1471236352593\/?format=1000w","from_url":"http:\/\/sammantics.com\/blog\/2016\/7\/27\/chain-1","image_width":327,"image_height":250,"image_bytes":39558,"service_icon":"http:\/\/sammantics.com\/favicon.ico","id":1}],"ts":"1484055981.001351"},{"type":"message","user":"U0XPR4NP4","text":"<@U1B9E51R8> The problem of replay protection is not so much in identifying replayed transactions and more of identifying them efficiently.  The `epoch` field in particular is used to scope the set of transactions which must be checked against the new transaction.  Doing a full select across all transactions ever is not a scheme that would scale over time.","ts":"1484056248.001354"},{"type":"message","user":"U1B9E51R8","text":"<@U0XPR4NP4> I see. Thanks for the explanation","ts":"1484056737.001355"},{"type":"message","user":"U0XQ35CDD","text":"<@U12452RAP> <@U0NCW1DPX> The paper behind SBFT is really the classic PBFT paper by Liskov. There are differences (the main one being that you process a single batch of requests at a time), but to my knowledge, the closest reference material remains the PBFT paper.","ts":"1484060717.001356"},{"type":"message","user":"U0XQ35CDD","text":"I would suggest we rename this work to something else than SBFT eventually, as people always assume that we refer to the Chain implementation, but that's a low-priority item.","ts":"1484060772.001357"},{"type":"message","user":"U0XPR4NP4","text":"The other key difference I would point out is that the PBFT paper assumes unordered (UDP type) links, while SBFT assumes FIFO (TCP type).","edited":{"user":"U0XPR4NP4","ts":"1484060813.000000"},"ts":"1484060804.001358"},{"type":"message","user":"U12452RAP","text":"Thanks guys, I found that ticket in Jira","ts":"1484061054.001360"},{"type":"message","user":"U12452RAP","text":"well described ","ts":"1484061071.001361"},{"type":"message","user":"U0ZR63HLK","text":"<@U0KN2SSKE> <@U0Y14MWA2> I see that pbfts uses util.ComputeCryptoHash to computes hashes. I was wonder if those hashes should be computed by the BCCSP. Also, I was thinking that the hash function should be configurable in an independent way, I mean by having a specific property under pbft","ts":"1484062044.001362"},{"type":"message","user":"U0Y14MWA2","text":"<@U0ZR63HLK> lets sync on these. No integration with common libs has been done in sbft so far","ts":"1484062175.001363"},{"type":"message","user":"U0Y14MWA2","text":"I expect this not to be rocket science","ts":"1484062186.001364"},{"type":"message","user":"U0ZR63HLK","text":"me too, but we have to decide. Crypto calls need to be reordered","ts":"1484062220.001365"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZR63HLK> I would like to specify the hashing parameters in the genesis block","ts":"1484062575.001366"},{"type":"message","user":"U0ZR63HLK","text":"+1","ts":"1484062589.001367"},{"type":"message","user":"U0ZR63HLK","text":"I think the gensis block is a perfect place for this kind of configurations","ts":"1484062614.001368"},{"type":"message","user":"U0XPR4NP4","text":"<@U0Y14MWA2> I'm guessing you are aware, but <@U1AU8DRQR> has started some work on moving to the common libs","ts":"1484062648.001369"},{"type":"message","user":"U0Y14MWA2","text":"I am","ts":"1484062670.001370"},{"type":"message","user":"U0ZR63HLK","text":"I see another issue in sbft. When a signature is generated sha256 is always used to compute the digest","ts":"1484062693.001371"},{"type":"message","user":"U0ZR63HLK","text":"but if the underlying curve used for ECDSA is P384, than sha384 needs to be used","ts":"1484062710.001372"},{"type":"message","user":"U0ZR63HLK","text":"we need to be more uniform there","ts":"1484062753.001373"},{"type":"message","user":"U0Y14MWA2","text":"It is not entirely cleat to me that this is the case","ts":"1484062766.001374"},{"type":"message","user":"U0ZR63HLK","text":"look at the code, it tells the truth","ts":"1484062790.001375"},{"type":"message","user":"U0ZR63HLK","text":":slightly_smiling_face:","ts":"1484062791.001376"},{"type":"message","user":"U0Y14MWA2","text":"We cannot insist that every consensus protocol supports all the crypto","ts":"1484062800.001377"},{"type":"message","user":"U0ZR63HLK","text":"fair enough","ts":"1484062811.001378"},{"type":"message","user":"U0ZR63HLK","text":"then if some tries to sign with P384 a digest shorter than 384 bits, then it rejects","edited":{"user":"U0ZR63HLK","ts":"1484062847.000000"},"ts":"1484062842.001379"},{"type":"message","user":"U0Y14MWA2","text":"But lets see if such support those not bloat the code than i may be in favor","ts":"1484062852.001381"},{"type":"message","user":"U0ZR63HLK","text":"at the least, I would like to have consistency in using the algorithms","ts":"1484062861.001382"},{"type":"message","user":"U0ZR63HLK","text":"that you can also support only P256 and SHA2-256","ts":"1484062878.001383"},{"type":"message","user":"U0ZR63HLK","text":"I'm perfectly  fine","ts":"1484062890.001384"},{"type":"message","user":"U0Y14MWA2","text":"If you can open jira to track this that be great","ts":"1484062918.001385"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZR63HLK> I think you would be a better person to define the hashing parameters for the genesis block.  To my mind, I thought we would need to specify hashing algorithm for the block header, whether to compute the data hash via Merkle (with specified width) or flat, and possibly the hashing algorithm to use within the Merkle tree.  But, I'm certain there are other places hashes are used (like sbft\/pbft).  I'm not certain what a reasonable expectation would be.  I had thought maybe one global 'hashing algorithm' which would be used anywhere it was not otherwise specified (like for MSP signature validation), but it sounds like maybe that's inadequate?","ts":"1484063101.001386"},{"type":"message","user":"U0ZR63HLK","text":"I' m actually a bit worried about this global settings that can work for everything. For sure, when digest has to be computed to be signed then it is a different story. The digest must be computed according to the signing algorithm requirements","ts":"1484063238.001387"},{"type":"message","user":"U0Y14MWA2","text":"Genesis block needs to have custom field that can be populated by consensus protocol","ts":"1484063290.001388"},{"type":"message","user":"U0ZR63HLK","text":"for the rest, it might be fine to have a global one at least at very beginning and with versioning in such a way we can always change and be retro compatible","ts":"1484063292.001389"},{"type":"message","user":"U0Y14MWA2","text":"If you already want to standardize the genesis block","ts":"1484063308.001390"},{"type":"message","user":"U0Y14MWA2","text":"A specific config should not be mandated","ts":"1484063328.001391"},{"type":"message","user":"U0XPR4NP4","text":"<@U0Y14MWA2> Genesis block already has this function, you can see it being used by Kafka to populate the brokers for instance","ts":"1484063356.001392"},{"type":"message","user":"U0Y14MWA2","text":"Very good so no need to mandate things more uniform imo","ts":"1484063409.001393"},{"type":"message","user":"U0XPR4NP4","text":"Right, SBFT or whatever consensus algorithm can do whatever config it would like.  But, it would make sense to have a 'hashing default', to essentially determine the behavior of hashing whenever the implementer does not want to have to pick","ts":"1484063479.001394"},{"type":"message","user":"U0ZR63HLK","text":"should then that component be in charge of defining what's default? Not sure.","ts":"1484063592.001395"},{"type":"message","user":"U0ZR63HLK","text":"let's take this example","ts":"1484063689.001396"},{"type":"message","user":"U0ZR63HLK","text":"the struct BlockHeader has an Hash method","edited":{"user":"U0ZR63HLK","ts":"1484063736.000000"},"ts":"1484063703.001397"},{"type":"message","user":"U0ZR63HLK","text":"it is implemented by using util.ComputeCryptoHash that uses sha256 (hard-coded)","edited":{"user":"U0ZR63HLK","ts":"1484063767.000000"},"ts":"1484063716.001398"},{"type":"message","user":"U0ZR63HLK","text":"where the configuration of this hash function should come from?","ts":"1484063724.001399"},{"type":"message","user":"U0Y14MWA2","text":"i do not object defining hash function for hashchaining the blocks","ts":"1484067215.001402"},{"type":"message","user":"U0Y14MWA2","text":"but internally i do not think that we can mandate much from a consensus implementation","ts":"1484067241.001403"},{"type":"message","user":"U0Y14MWA2","text":"if an implementation hardcodes sha256 internally it may do so - and people may decide not to use such an implementation if they do not like it","ts":"1484067279.001404"},{"type":"message","user":"U0Y14MWA2","text":"my point is - we want consensus modular so we need to give it some leeway","ts":"1484067298.001405"},{"type":"message","user":"U0Y14MWA2","text":"standardizing the block format so clients can consume it makes sense","ts":"1484067325.001406"},{"type":"message","user":"U0Y14MWA2","text":"but mandating a given signature function is imo too much","ts":"1484067341.001407"},{"type":"message","user":"U0Y14MWA2","text":"sbft is less of a problem but think of integration of bft smart or any other third party protocol","ts":"1484067466.001408"},{"type":"message","user":"U0XQ35CDD","text":"I'm only casually glancing at this conversation and I don't think you guys disagree here. A sensible default, along with the option to easily change as the user sees fit is what pretty much everyone is arguing for, no?","ts":"1484067479.001409"},{"type":"message","user":"U0Y14MWA2","text":"you want to give such an implementation room in the genesis block to store its custom config and that's about it","ts":"1484067498.001410","reactions":[{"name":"+1","users":["U0XQ35CDD"],"count":1}]},{"type":"message","user":"U0Y14MWA2","text":"<@U0XQ35CDD> perhaps :slightly_smiling_face:","edited":{"user":"U0Y14MWA2","ts":"1484067777.000000"},"ts":"1484067527.001411"},{"type":"message","user":"U0Y14MWA2","text":"do we have a \"standard \" hash function to hashchain the blocks in the ledger?","ts":"1484067570.001412"},{"type":"message","user":"U0Y14MWA2","text":"or is this itself configurable","ts":"1484067607.001413"},{"type":"message","user":"U0XQ35CDD","text":"Unless something was changed while I was away, we're invoking `ComputeCryptoHash` from the `core\/util` package for this. And this is currently hardcoded to SHA-3. These are some of my thoughts on the matter: <https:\/\/jira.hyperledger.org\/browse\/FAB-887?focusedCommentId=19743&amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-19743>","ts":"1484067788.001415"},{"type":"message","user":"U0Y14MWA2","text":"I am all in for a most efficient function which provides \"sufficient\" security - which would in this case second  SHA256 to be default instead of SHA3","edited":{"user":"U0Y14MWA2","ts":"1484068064.000000"},"ts":"1484068017.001416"},{"type":"message","user":"U0Y14MWA2","text":"that said i do not object it being configurable","ts":"1484068110.001418"},{"type":"message","user":"U0Y14MWA2","text":"but this is the only place (talking about the function used to hashchain the ledger blocks) where I see the need for some \"standardization\" across consensus implementations","edited":{"user":"U0Y14MWA2","ts":"1484068162.000000"},"ts":"1484068140.001419"},{"type":"message","user":"U0XQ35CDD","text":"For all sbft-related work, let's please create issues in JIRA, link from the changesets, and update the JIRA status accordingly.","ts":"1484160010.001424"},{"type":"message","user":"U0XQ35CDD","text":"See the pinned item on this channel: <https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1482424383001089>","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-consensus-dev\/p1482424383001089","fallback":"[December 22nd, 2016 8:33 AM] kostas: <@U0Y14MWA2>: Correct. Component `fabric-consensus`, label `sbft`, and the sprint during which this is tackled. Mark the issue as \"In Review\" when the changeset is posted, and mark as \"Done\" when it's merged. A bit of a process, but you quickly get used to it. (Thanks!)","ts":"1482424383.001089","author_subname":"kostas","channel_id":"C0Z4NBUN6","channel_name":"fabric-consensus-dev","is_msg_unfurl":true,"text":"<@U0Y14MWA2>: Correct. Component `fabric-consensus`, label `sbft`, and the sprint during which this is tackled. Mark the issue as \"In Review\" when the changeset is posted, and mark as \"Done\" when it's merged. A bit of a process, but you quickly get used to it. (Thanks!)","author_name":"Kostas Christidis","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/kostas","author_icon":"https:\/\/avatars.slack-edge.com\/2016-04-05\/31983107923_80db5353e9278df980c7_48.png","mrkdwn_in":["text"],"id":1,"footer":"Posted in #fabric-consensus-dev"}],"ts":"1484160021.001425"},{"type":"message","user":"U0ZJZBJLF","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3873\/>\n<@U0XPR4NP4>  You're saying there was the same file (well, almost the same) the whole time at 2 different places in the file tree?","ts":"1484161544.001427"},{"type":"message","user":"U0XPR4NP4","text":"After you run `make protos` you'll notice an untracked `attributes.pb.go` in `core`","ts":"1484161579.001428"},{"type":"message","user":"U0ZJZBJLF","text":"oh so it was never checked in","ts":"1484161601.001429"},{"type":"message","user":"U0XPR4NP4","text":"Right","ts":"1484161604.001430"},{"type":"message","user":"U0ZJZBJLF","text":"but... the old one was in the wrong place right?","ts":"1484161648.001431"},{"type":"message","user":"U0ZJZBJLF","text":"it was used the whole time","ts":"1484161658.001432"},{"type":"message","user":"U0ZJZBJLF","text":"so why don't you delete it as part of the change set?","ts":"1484161669.001433"},{"type":"message","user":"U0ZJZBJLF","text":"I assume someone was linking to the attributes file","ts":"1484161684.001434"},{"type":"message","user":"U0XPR4NP4","text":"So no.  You can see:\n\n```\ncommit 9ed9ce44b45d9c37d4fb1112061927cb5ccba5d7\nAuthor: Angelo De Caro &lt;adc@zurich.ibm.com&gt;\nDate:   Wed Dec 14 09:28:51 2016 +0100\n\n    core\/crypto\/primitives cleanup: second step\n    \n    This change-set continues the cleanup of the core\/crypto\/primitives\n    package. Refactoring has been applied to move methods and files under\n    the packages which need them.\n    \n    Change-Id: Icfe6adf938b9d96df9dfde3dfebf95f3004fcae7\n    Signed-off-by: Angelo De Caro &lt;adc@zurich.ibm.com&gt;\n```","ts":"1484161750.001435"},{"type":"message","user":"U0ZJZBJLF","text":"that's core\/crypto\/primitives though.","ts":"1484161810.001436"},{"type":"message","user":"U0ZJZBJLF","text":"&lt;\/nit-picking&gt;","ts":"1484161814.001437"},{"type":"message","user":"U0XPR4NP4","text":"This changeset moved `attributes.proto` and `attributes.pb.go` from `fabric\/core\/crypto\/attributes\/proto` to `fabric\/accesscontrol\/attributes\/proto`","edited":{"user":"U0XPR4NP4","ts":"1484161838.000000"},"ts":"1484161828.001438"},{"type":"message","user":"U0XPR4NP4","text":"So, the `attributes.pb.go` was still correct from a compilation perspective, no need to really regen it just because the package moved (since its base package name stayed the same)","ts":"1484161894.001440"},{"type":"message","user":"U0XPR4NP4","text":"But, when `make protos` is run, it's writing any updates to `fabric\/core\/crypto\/attributes\/proto\/attributes.pb.go` which is not a tracked file anymore","ts":"1484161927.001441"},{"type":"message","user":"U0XPR4NP4","text":"When the intent clearly, is to have `make protos` write to `fabric\/accesscontrol\/attributes\/proto\/attributes.pb.go` (the tracked file)","ts":"1484161956.001442"},{"type":"message","user":"U0ZJZBJLF","text":"\"This changeset\" --&gt; adc's?","ts":"1484161987.001443"},{"type":"message","user":"U0XPR4NP4","text":"Yes","ts":"1484161999.001444"},{"type":"message","user":"U0XPR4NP4","text":"So, the new changeset simply fixes the `go_package` so that the updates get written to the tracked file in the new location, rather than the untracked in the old.  Nothing to delete.","ts":"1484162009.001445"},{"type":"message","user":"U0ZJZBJLF","text":"I see. so when people did `make protos` a new file was added and no one paid attention","ts":"1484162058.001446"},{"type":"message","user":"U0XPR4NP4","text":"Right, or, because `make protos` was broken, no one was running it, so they didn't get a new file","ts":"1484162082.001447"},{"type":"message","user":"U0ZJZBJLF","text":"Got it, thanks!","ts":"1484162107.001448"},{"type":"message","user":"U0XPR4NP4","text":"Either way, just something small that slipped through the cracks, I noticed this new file in my untracked changes and wondered where it came from, so put that CR together","ts":"1484162108.001449"},{"type":"message","user":"U0XPR4NP4","text":"No problem","ts":"1484162110.001450"},{"type":"message","user":"U0ZR63HLK","text":"<@U0XPR4NP4> Thanks a lot for this. I haven't noticed that","ts":"1484205417.001451"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZR63HLK> You're quite welcome, you're not the first to miss this `go_package` directive.  Hopefully we will get some CI to test for this sort of mistake in the future.","ts":"1484206052.001452"},{"user":"U2J6ZKX19","text":"<@U2J6ZKX19|wanghaibo> has joined the channel","type":"message","subtype":"channel_join","ts":"1484212668.001453"},{"type":"message","user":"U0UGH3X7X","text":"scrum ...","ts":"1484233258.001454"},{"text":"<@U0UGH3X7X|tuand> has started a Google+ Hangout for this channel. <https:\/\/hangouts.google.com\/hangouts\/_\/cne4mj5rvbgi7nqpgtjvvivrxme|Join Hangout>.","username":"hangouts","bot_id":"B0UKUAJ0Y","type":"message","subtype":"bot_message","ts":"1484233280.001455"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XQ35CDD> <@U0XPR4NP4> can you pls remind me why one needs to use blockcutter in sbft","ts":"1484299532.001456"},{"type":"message","user":"U1AU8DRQR","text":"<@U0Y14MWA2> means that I implemented the Chain interface and this `HandleChain` for SBFT. so SBFT uses the ledger passed to it inside that support structure, and supports multiple chains. do we need block cutter? or can we leave it out and rely on sbft's internal batching?","ts":"1484299637.001457"},{"type":"message","user":"U0Y14MWA2","text":"put differently:  how dependent are consuming components on the current impl in \/orderer\/common\/blockcutter","ts":"1484301980.001458"},{"type":"message","user":"U0Y14MWA2","text":"a side comment - \"Ordered\" is a bit obscure naming when the function should be used prior to ordering","ts":"1484302094.001459"},{"type":"message","user":"U0Y14MWA2","text":"especially since what the function is doing is Validation (applying filters), Appending to block and (possibly) Cutting","ts":"1484302272.001460"},{"type":"message","user":"U0ZJZBJLF","text":"Is there an ordering service system channel?","ts":"1484317438.001461"},{"type":"message","user":"U0XPR4NP4","text":"<@U0Y14MWA2> <@U1AU8DRQR> \n\n&gt; <@U0XQ35CDD> <@U0XPR4NP4> can you pls remind me why one needs to use blockcutter in sbft\n\nIt is two fold.  One, block cutter applies second pass filters to messages to ensure that only properly signed and otherwise well formed messages make it into the block.\n\nSecondly, the filters produce Committer objects which are the driving force behind the executable transactions on the orderer.  The configuration transactions and a special internal orderer transaction are the executable types.  This is what drives chain creation, as well as updates to ACLs etc.\n\n&gt; <@U0Y14MWA2> means that I implemented the Chain interface and this HandleChain for SBFT. so SBFT uses the ledger passed to it inside that support structure, and supports multiple chains. do we need block cutter? or can we leave it out and rely on sbft's internal batching?\n\nYou can certainly re-implment block cutter on your own, but I'm still looking for a reason why you might do this.  What technical problems does block cutter cause?  My suspicion is that it's much easier to fix blockcutter to also support your use cases than to re-impliment it\n\n&gt; a side comment - \"Ordered\" is a bit obscure naming when the function should be used prior to ordering\n\nAgreed, this is a rather horrid name.  In Solo\/Kafka it's accurate, but I'd be happy to see it renamed.  I'd also point out it should probably be called `batchcutter` or somethig similar.  The `blockcutter` name came from some discussions that were ongoing about Kafka at the time.\n\n<@U0ZJZBJLF>\n&gt; Is there an ordering service system channel?\n\nYes, the ordering system chain is the first chain that the orderer starts with.  In general, peer orgs will not have access to this channel.","edited":{"user":"U0XPR4NP4","ts":"1484320330.000000"},"ts":"1484320154.001462"},{"type":"message","user":"U0ZJZBJLF","text":"Thanks <@U0XPR4NP4> . I have another small question- when an application creates a channel, does it pass the channel's ID at creation? I guess it rolls a random ID and hopes it's not taken, right?\nBecause- i don't see any other option (you can't call \"Deliver\" after the Broadcast because you don't know the channel ID)","edited":{"user":"U0ZJZBJLF","ts":"1484345891.000000"},"ts":"1484345868.001465"},{"type":"message","user":"U0XPR4NP4","text":"<@U0ZJZBJLF> Yes, it should be some form of UUID, such as FQDN+timestamp or something","ts":"1484345904.001467"},{"type":"message","user":"U0XPR4NP4","text":"If it exists, it will get back a FORBIDDEN","ts":"1484345921.001468"},{"type":"message","user":"U0ZJZBJLF","text":"FQDN? what? why?","ts":"1484345922.001469"},{"type":"message","user":"U0XPR4NP4","text":"It can be a true UUID if it likes","ts":"1484345930.001470"},{"type":"message","user":"U0XPR4NP4","text":"Whatever scheme will be globally unique","ts":"1484345937.001471"},{"type":"message","user":"U0ZJZBJLF","text":"ok tnx","ts":"1484345943.001472","reactions":[{"name":"+1","users":["U0XPR4NP4"],"count":1}]},{"type":"message","user":"U0ZJZBJLF","text":"1 last question to make sure I understand- so essentially if we have 3 apps in 3 different orgs, they agree out of band who will send the `Broadcast`, and then the app's \"user\" tells via slack\/email\/whatever the channel's ID to the other 2 orgs, so they can all call `Deliver`, right?","ts":"1484346178.001473"},{"user":"U3DKG7M54","text":"<@U3DKG7M54|rahulhegde> has joined the channel","type":"message","subtype":"channel_join","ts":"1484443062.001474"},{"type":"message","user":"U3DKG7M54","text":"<@U0ULK2JPP> <@U0PB67X4K>\nWe have followed the same steps  ` <https:\/\/jira.hyperledger.org\/secure\/attachment\/10378\/peerchaincodedev_in_1.0.txt> ` using the images from the connect-a-thon\/marble application. There is no multi-chain that is tried in our steps (i.e. no-chain id and version specified) and I doubt if these images support it.\n\nLogs from Orderer which shows connection between Peer and Orderer is unreachable. This un-reachability problem is very high and causes sometimes deploy\/invoke transaction from committing to the ledger.\n\n```\n[21:19:45.683]     deliver.go:121: [DEBUG] Room for more blocks, activating channel\n[21:19:47.002]   broadcast.go:125: [DEBUG] Batch timer expired, creating block\n[21:19:47.002]   ramledger.go:171: [DEBUG] Sending signal that block 5 has a successor\n[21:19:47.003]     deliver.go:121: [DEBUG] Room for more blocks, activating channel\n2017\/01\/14 21:19:47 grpc: Server.Serve failed to create ServerTransport:  connection error: desc = \"transport: write tcp 172.18.0.2:7050-&gt;172.18.0.4:38072: write: broken pipe\"\n2017\/01\/14 21:19:47 grpc: Server.Serve failed to create ServerTransport:  connection error: desc = \"transport: write tcp 172.18.0.2:7050-&gt;172.18.0.4:38076: write: broken pipe\"\n2017\/01\/14 21:19:48 grpc: Server.Serve failed to create ServerTransport:  connection error: desc = \"transport: write tcp 172.18.0.2:7050-&gt;172.18.0.4:38084: write: broken pipe\"\n[21:19:49.300]   broadcast.go:125: [DEBUG] Batch timer expired, creating block\n[21:19:49.300]   ramledger.go:171: [DEBUG] Sending signal that block 6 has a successor\n[21:19:49.300]     deliver.go:121: [DEBUG] Room for more blocks, activating channel\n[22:15:28.435]         solo.go:60: [DEBUG] Starting new Deliver loop\n[22:15:28.435]      deliver.go:38: [DEBUG] Starting new Deliver loop\n...\n[22:15:28.489]      deliver.go:75: [DEBUG] Receiving message Acknowledgement:&lt;Number:4 &gt;\n[22:15:28.489]      deliver.go:78: [DEBUG] Received acknowledgement from client\n[22:15:28.489]     deliver.go:121: [DEBUG] Room for more blocks, activating channel\n2017\/01\/14 22:20:44 grpc: Server.Serve failed to create ServerTransport:  connection error: desc = \"transport: write tcp 172.18.0.2:7050-&gt;172.18.0.4:38096: write: broken pipe\"\n[22:21:02.431]   broadcast.go:125: [DEBUG] Batch timer expired, creating block\n[22:21:02.432]   ramledger.go:171: [DEBUG] Sending signal that block 7 has a successor\n[22:21:02.432]     deliver.go:121: [DEBUG] Room for more blocks, activating channel\n[22:21:11.717]   broadcast.go:125: [DEBUG] Batch timer expired, creating block\n[22:21:11.717]   ramledger.go:171: [DEBUG] Sending signal that block 8 has a successor\n...\n```\n\nI have already done screen-sharing with <@U0ULK2JPP> for setup walk-through and concluded to be no configuration problem. Could you please let me know if there is any work-around to resolve this problem.","ts":"1484444763.001475"},{"type":"message","user":"U0ULK2JPP","text":"<@U3DKG7M54> had a thought...","ts":"1484476082.001476"},{"type":"message","user":"U0ULK2JPP","text":"can you share the contents of fabric\/peer\/chaincode\/ folder please ?","ts":"1484476101.001477"},{"type":"message","user":"U3DKG7M54","text":"<@U0ULK2JPP>  on v1.0 Architecture\nPeer, Cop and Orderer Images used from ` <https:\/\/github.com\/IBM-Blockchain\/connectathon> `\nDocker composer - ` <https:\/\/github.com\/rahulhegde\/playtime\/blob\/master\/docker-compose.zip> `\nSample Chaincode - ` <https:\/\/github.com\/rahulhegde\/learn-chaincode\/tree\/master\/start> `","ts":"1484522440.001478"},{"type":"message","user":"U3DKG7M54","text":"Do let me know - I can give a try on my setup.","ts":"1484522496.001479"},{"type":"message","user":"U0UGH3X7X","text":"scrum ...","ts":"1484578823.001480"},{"text":"<@U0UGH3X7X|tuand> has started a Google+ Hangout for this channel. <https:\/\/hangouts.google.com\/hangouts\/_\/edclujx44vamdgt4o7vvbl36aqe|Join Hangout>.","username":"hangouts","bot_id":"B0UKUAJ0Y","type":"message","subtype":"bot_message","ts":"1484578851.001481"},{"type":"message","user":"U1AU8DRQR","text":"85%: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3635\/>  please give me some feedback","ts":"1484581701.001482"},{"type":"message","user":"U0XPR4NP4","text":"<@U1AU8DRQR> Done","ts":"1484583873.001483"},{"user":"U3LMVC4Q4","text":"<@U3LMVC4Q4|mtnieto> has joined the channel","type":"message","subtype":"channel_join","ts":"1484656829.001484"},{"type":"message","user":"U0UKTPMG8","text":"<@U0XPR4NP4> there?","ts":"1484671861.001485"},{"type":"message","user":"U0XPR4NP4","text":"I am","ts":"1484672031.001486"},{"type":"message","user":"U0UKTPMG8","text":"just assigned issue to Luis","ts":"1484672111.001487"},{"type":"message","user":"U0UKTPMG8","text":"preferredMaxBytes message gives the absMaxBytes failure erroneously","ts":"1484672126.001488"},{"type":"message","user":"U0UKTPMG8","text":":wink:","ts":"1484672127.001489"},{"type":"message","user":"U0UKTPMG8","text":"bot a blocker","ts":"1484672135.001490"},{"type":"message","user":"U0UKTPMG8","text":"not a blocker","ts":"1484672139.001491"},{"type":"message","user":"U1KDAMDJ7","text":"whoops","ts":"1484672140.001492"},{"type":"message","user":"U0UKTPMG8","text":":wink:","ts":"1484672143.001493"},{"type":"message","user":"U0UKTPMG8","text":"btw, recommended value?","ts":"1484672160.001494"},{"type":"message","user":"U1KDAMDJ7","text":"512K will be default for now","ts":"1484672174.001495"},{"type":"message","user":"U0UKTPMG8","text":"I put 10000000 for absMaxBytes I think","ts":"1484672176.001496"},{"type":"message","user":"U0UKTPMG8","text":"k","ts":"1484672178.001497"},{"type":"message","user":"U0UKTPMG8","text":"thnx","ts":"1484672182.001498"},{"type":"message","user":"U0UKTPMG8","text":"1 Million I mean","ts":"1484672194.001499"},{"type":"message","user":"U0UKTPMG8","text":"not sure I got zeros right","ts":"1484672198.001500"},{"type":"message","user":"U1KDAMDJ7","text":"99MB for absolute, 512K for preferred.","ts":"1484672198.001501"},{"type":"message","user":"U0UKTPMG8","text":"got it","ts":"1484672203.001502"},{"type":"message","user":"U0UKTPMG8","text":"thnx","ts":"1484672204.001503"},{"type":"message","user":"U1KDAMDJ7","text":"I\u2019m trying the instructions on this page: <https:\/\/github.com\/hyperledger\/fabric\/blob\/dca94df500461440da165066a7cacc3f1580b811\/docs\/channel-setup.md>\n\nAnd I get: \n```\n2017-01-17 17:23:25.250 UTC [msp] Sign -&gt; INFO 027 Signing message\nError: Got unexpected status: BAD_REQUEST\n```","edited":{"user":"U1KDAMDJ7","ts":"1484674020.000000"},"ts":"1484673998.001504"},{"type":"message","subtype":"file_share","text":"<@U1KDAMDJ7|sanchezl> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/sanchezl\/F3SMX0DAQ\/orderer.log|orderer.log>","file":{"id":"F3SMX0DAQ","created":1484674050,"timestamp":1484674050,"name":"orderer.log","title":"orderer.log","mimetype":"application\/octet-stream","filetype":"binary","pretty_type":"Binary","user":"U1KDAMDJ7","editable":false,"size":1644,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3SMX0DAQ\/orderer.log?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3SMX0DAQ\/download\/orderer.log?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/sanchezl\/F3SMX0DAQ\/orderer.log","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F3SMX0DAQ-aae2be998f","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U1KDAMDJ7","upload":true,"display_as_bot":false,"username":"<@U1KDAMDJ7|sanchezl>","bot_id":null,"ts":"1484674050.001507"},{"type":"message","subtype":"file_share","text":"<@U1KDAMDJ7|sanchezl> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/sanchezl\/F3TAJ82T1\/peer_channel_create.log|peer_channel_create.log>","file":{"id":"F3TAJ82T1","created":1484674051,"timestamp":1484674051,"name":"peer_channel_create.log","title":"peer_channel_create.log","mimetype":"application\/octet-stream","filetype":"binary","pretty_type":"Binary","user":"U1KDAMDJ7","editable":false,"size":5561,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3TAJ82T1\/peer_channel_create.log?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3TAJ82T1\/download\/peer_channel_create.log?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/sanchezl\/F3TAJ82T1\/peer_channel_create.log","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F3TAJ82T1-9bdae35bf0","channels":["C0Z4NBUN6"],"groups":[],"ims":[],"comments_count":0},"user":"U1KDAMDJ7","upload":true,"display_as_bot":false,"username":"<@U1KDAMDJ7|sanchezl>","bot_id":null,"ts":"1484674051.001508"},{"type":"message","user":"U0ULK2JPP","text":"<@U0XPR4NP4> is the above issue from <@U0UKTPMG8> related to problem I encountered with orderer.template ?","ts":"1484674111.001509"},{"type":"message","user":"U0ULK2JPP","text":"<@U1KDAMDJ7> I just submitted a fix for that","ts":"1484674130.001510"},{"type":"message","user":"U1KDAMDJ7","text":"might be, but I\u2019m not seeing the error message","ts":"1484674132.001511"},{"type":"message","user":"U0ULK2JPP","text":"orderer.template needed to be regened again for some reason","ts":"1484674153.001512"},{"type":"message","user":"U0ULK2JPP","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/4077\/>","ts":"1484674163.001513"},{"type":"message","user":"U1KDAMDJ7","text":"I added new config properties. Now I know. :grimacing:","ts":"1484674385.001514"},{"type":"message","user":"U0ULK2JPP","text":"ah. it was you <@U1KDAMDJ7> :slightly_smiling_face:","ts":"1484674602.001515","reactions":[{"name":"flushed","users":["U1KDAMDJ7"],"count":1}]},{"type":"message","user":"U0ZJZBJLF","text":"if I have an MSP config item, what type of `ConfigurationItem_ConfigurationType` is that?","edited":{"user":"U0ZJZBJLF","ts":"1484689579.000000"},"ts":"1484689250.001516"},{"type":"message","user":"U0ZJZBJLF","text":"(policy, right?)","ts":"1484689552.001517"},{"type":"message","user":"U0XPR4NP4","text":"Already answered via DM, but it should be of type MSP, which, as you pointed out does not currently exist.","ts":"1484691460.001519"},{"type":"message","user":"U0XPR4NP4","text":"It is however defined in <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3941\/9\/protos\/common\/configuration.proto>","ts":"1484691477.001520"},{"type":"message","user":"U0XPR4NP4","text":"Which would be nice to get merged at some point soon.","ts":"1484691488.001521"},{"type":"message","user":"U0XPR4NP4","text":"It is going to break bdd and sdk a bit, but they have all been warned, and I think the sooner, the less painful","ts":"1484691515.001522"},{"type":"message","user":"U1B2FF8LR","text":"<@U1KDAMDJ7>  Have we put the message size checks in all the right places? Regarding that max preferred message length (512K) - it looks like it is used for a max batch size. But a single transaction can arrive and be accepted as long as it is less than absolute size (99MB). So we could easily receive a single transaction and be unable to batch it up and deliver it... (Please tell me I missed something during my code review.)","ts":"1484749964.001523"},{"type":"message","user":"U1KDAMDJ7","text":"If the transaction message is larger than the preferred size, it will be in it\u2019s own batch of 1 message, as long as it\u2019s less than the absolute size.","ts":"1484750060.001524"},{"type":"message","user":"U11MANG9G","text":"<@U2P14DVMG> (Michael)","ts":"1484760425.001525"},{"user":"U2P14DVMG","inviter":"U11MANG9G","text":"<@U2P14DVMG|mcoblenz> has joined the channel","type":"message","subtype":"channel_join","ts":"1484760433.001526"},{"type":"message","user":"U11MANG9G","text":"<@U2P14DVMG>: we are slowly moving from a channel with 5180 people, to a 911-people one, and onto a 263-people channel\u2026 at this rate you'd get an answer within a block or two :wink:","ts":"1484760639.001528","reactions":[{"name":"joy","users":["U0XQ35CDD","U0KM61BCP"],"count":2}]},{"user":"U3PBR406M","text":"<@U3PBR406M|bur> has joined the channel","type":"message","subtype":"channel_join","ts":"1484760804.001530"},{"user":"U3DHKV84C","text":"<@U3DHKV84C|yuryandreev> has joined the channel","type":"message","subtype":"channel_join","ts":"1484823018.001531"},{"type":"message","user":"U3DHKV84C","text":"Can we make few orderers in current version fabric (from master)? Or for consensus we need to use Kafka, now?","ts":"1484823113.001532"},{"type":"message","user":"U0ZJZBJLF","text":"there is a solo orderer","ts":"1484823228.001533"},{"type":"message","user":"U3DHKV84C","text":"why? if something going wrong we will not have \u201corderer\"","ts":"1484823380.001534"},{"type":"message","user":"U0ZJZBJLF","text":"I never said it should be used in production, it just exists","ts":"1484823592.001535"},{"type":"message","user":"U0ZJZBJLF","text":"there is also sbft","ts":"1484823606.001536"},{"type":"message","user":"U0KM61BCP","text":"<@U3DHKV84C> solo is primarily for testing and development - it isn't meant for production use. Kafka is primarily for environments that don't have a need for BFT, and are satisfied by crash fault tolerance, such as a blockchain solution deployed within a single enterprise or where there is a single trusted central authority. We are also working on sbft orderer that will be finalized after the v1.0 release. There will likely be other alternatives developed over time.","ts":"1484833169.001537"},{"type":"message","user":"U0NCW1DPX","text":"<@U0KM61BCP> will we support to migrate the orderer service from Kafka to sbft, since you mentioned the sbft will available AFTER v1.0 release","ts":"1484834238.001538"},{"user":"U3TKE8X3M","text":"<@U3TKE8X3M|bjorn> has joined the channel","type":"message","subtype":"channel_join","ts":"1484837288.001539"},{"type":"message","user":"U12452RAP","text":"<@U0NCW1DPX>: <@U0KM61BCP> explained clear, they should be used in different scenarios, I assume it doesn't exist 'Migrate' relation.","ts":"1484838514.001540"},{"type":"message","user":"U0XPR4NP4","text":"<@U0NCW1DPX> I can say that there is no _technical_ impossibility with migrating between consensus types, whether it is supported is another question","ts":"1484841530.001541"},{"type":"message","user":"U0XQ35CDD","text":"Whether it's a practically useful thing to do is also another question.","edited":{"user":"U0XQ35CDD","ts":"1484841666.000000"},"ts":"1484841581.001542","reactions":[{"name":"joy","users":["U0PB67X4K"],"count":1}]},{"type":"message","user":"U0KM61BCP","text":"+1","ts":"1484843069.001544"},{"type":"message","user":"U0NCW1DPX","text":"ok, clear","ts":"1484875769.001545"},{"type":"message","user":"U1AU8DRQR","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3635\/>","ts":"1484928595.001546"},{"type":"message","user":"U1AU8DRQR","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3863\/> this one is WIP but needs feedback","ts":"1484928616.001547"},{"type":"message","user":"U1AU8DRQR","text":"guys, as you may know, there is a problem with SBFT tests on ppc64","ts":"1484929302.001548"},{"type":"message","user":"U1AU8DRQR","text":"I tried to reproduce the error and succeeded but it could not find a solution yet","ts":"1484929331.001549"},{"type":"message","user":"U1AU8DRQR","text":"any help is welcome :smile:","ts":"1484929335.001550"},{"type":"message","user":"U0XQ35CDD","text":"<@U1AU8DRQR>: Does it have something to do with the output that I'm also seeing here? <https:\/\/jenkins.hyperledger.org\/job\/fabric-verify-x86_64\/5455\/consoleFull>","ts":"1484930428.001551"},{"user":"U2Y2V95D2","text":"<@U2Y2V95D2|alanlee> has joined the channel","type":"message","subtype":"channel_join","ts":"1484961847.001552"},{"type":"message","user":"U2Y2V95D2","text":"Questions: (1) Do we have any document on how PBFT in Hyperledger works? (2) If the network has &gt;50 nodes with many transactions, is current implementation good for production? Thank you very much.","ts":"1484961996.001553"},{"type":"message","user":"U0UGH3X7X","text":"<@U2Y2V95D2> hyperledger fabric v0.6 is a pretty faithful implementation of the algoritm described in the PBFT paper by Castro &amp; Liskov","ts":"1484963277.001554"},{"type":"message","user":"U2Y2V95D2","text":"Thanks <@U0UGH3X7X> .","ts":"1484964176.001555"},{"user":"U3TJABLNT","text":"<@U3TJABLNT|down-the-fall-line> has joined the channel","type":"message","subtype":"channel_join","ts":"1485039168.001556"},{"user":"U3UPDJXV2","text":"<@U3UPDJXV2|miketwenty1> has joined the channel","type":"message","subtype":"channel_join","ts":"1485039347.001557"},{"type":"message","user":"U3UPDJXV2","text":"hello","ts":"1485039351.001558"},{"type":"message","user":"U3UPDJXV2","text":"I was hoping to know more about the fabric blockchain, anyone here to field questions?","ts":"1485039427.001559"},{"type":"message","user":"U0PB67X4K","text":"<@U3UPDJXV2>  - people will usually get back to you.   there are a few folks on US east coast and a few folks in Europe who use this channel","ts":"1485039811.001560"},{"type":"message","user":"U3UPDJXV2","text":"ok, so my first question is.. what advantages do blocks provide vs not using blocks","ts":"1485040177.001561"},{"type":"message","user":"U0YJUECE8","text":"<@U3UPDJXV2> Have you seen the this bitcoin paper?  <https:\/\/bitcoin.org\/bitcoin.pdf>  It's a relatively short read at 9 pages.   Check out section 4-   see how the hashes are at the Block level, not per transaction?  While implementation details differ, this is conceptually what Fabric is doing as well-  that's why we need blocks.   If you set your configuration parameters for max of 1 transaction per block, you would \"in essence\" be chaining at the transaction level, but it would still be wrapped by \"blocks\".   (Of course you might be killing yourself performance-wise depending on your expected transaction volume but that's a different story)","ts":"1485040874.001562"},{"type":"message","user":"U0PB67X4K","text":"are you questioning the hash chain part of blocks or the batching or multiple transactions in blocks or both?","ts":"1485040887.001563"},{"user":"U3LKHA8G5","text":"<@U3LKHA8G5|simers> has joined the channel","type":"message","subtype":"channel_join","ts":"1485098678.001564"},{"type":"message","user":"U3UPDJXV2","text":"<@U0YJUECE8> yeah good point with the 1 transaction per block analogy. So I get why blocks are used with the white paper you posted, it's too group in transactions with proof of work..(please correct me if I'm wrong).. if PoW isn't being done maybe you could just use a normal immutable queue like Kafka? Kafka doesn't need the overhead of blocks but still maintains good consistency and sequencing of events.","ts":"1485145678.001565"},{"type":"message","user":"U3UPDJXV2","text":"<@U0PB67X4K> hmm not really sure I would say batching into blocks is confusing.. doesn't seem to do much for security if you are in a permission based system. I would like to explore this with someone.","ts":"1485145796.001566"},{"type":"message","user":"U0XQ35CDD","text":"<@U3UPDJXV2> -- these are reasonable questions. (I've had similar doubts in the past.)","edited":{"user":"U0XQ35CDD","ts":"1485155037.000000"},"ts":"1485154845.001569"},{"type":"message","user":"U0XQ35CDD","text":"1. Batching into blocks is an optimization. See Problem 1 + Solution 1 here: <https:\/\/docs.google.com\/document\/d\/1vNMaM7XhOlu9tB_10dKnlrhy5d7b1u8lSY8a-kVjCO4\/edit>","ts":"1485154852.001570"},{"type":"message","user":"U0XQ35CDD","text":"2. Hash-chaining is also an optimization because a hash-chained sequence means that you just need to verify the signatures on the tip of the chain, and the rest follows from the hash-chaining, i.e. no more signature verification needed, you just make sure that the block hashes match.","ts":"1485154863.001572"},{"type":"message","user":"U0XQ35CDD","text":"3. Hash-chaining also provides some extra safety against forging\/tampering. Extreme of a scenario as this might be, assume that the tip is now at block 1M and we don't do hash-chaining. There might be an attack where I focus all of my computing resources in coming up with block 2M that will carry my own, not-quite-right transactions. I now have 1M blocks ahead of me in order to come up with the right signature over the predictable payload `block number = 2,000,000 | transactions = evil-transaction-goes-here`. This is not an easy task by any means, but if we had a hash-chain, it would definitely be _much_ harder, because you cannot predict the payload of block `n` until you get block `n-1`. There's also an attack where if you do periodic key rotation and an earlier key gets leaked, the adversary will only be able to rewrite history up to a point (up to where the key was valid) and this tampering will be immediately obvious because the hash-chain is broken.","edited":{"user":"U0XQ35CDD","ts":"1485154936.000000"},"ts":"1485154917.001573"},{"type":"message","user":"U1AU8DRQR","text":"where can I read about configuration transactions? I mean something high level, e.g. we have these docs: <https:\/\/wiki.hyperledger.org\/community\/fabric-design-docs>","ts":"1485164431.001577"},{"type":"message","user":"U1AU8DRQR","text":"please give it some love in the form of a +2","ts":"1485173217.001578"},{"type":"message","user":"U1AU8DRQR","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3635\/>","ts":"1485173219.001579"},{"type":"message","user":"U1AU8DRQR","text":"or even +3s are welcome","ts":"1485173224.001580"},{"type":"message","user":"U1AU8DRQR","text":"but it would be good if I didn't have to rebase it again as it is a pain.. you know :smile:","ts":"1485173254.001581"},{"type":"message","user":"U0XPR4NP4","text":"<@U1AU8DRQR> <https:\/\/docs.google.com\/document\/d\/1Qg7ZEccOIsrShSHSNl4kBHOFvLYRhQ3903srJ6c_AZE\/edit> contains information on the configuration transaction (towards the end)","ts":"1485182385.001582"},{"type":"message","user":"U1AU8DRQR","text":"is that document linked on this page? <https:\/\/wiki.hyperledger.org\/community\/fabric-design-docs>","ts":"1485182439.001584"},{"type":"message","user":"U0XPR4NP4","text":"Yes","ts":"1485182511.001585"},{"type":"message","user":"U0XPR4NP4","text":"The MSP + ACL document","ts":"1485182516.001586"},{"type":"message","user":"U1AU8DRQR","text":"nice","ts":"1485182522.001587"},{"type":"message","user":"U1AU8DRQR","text":"thanks","ts":"1485182526.001588"},{"type":"message","user":"U1AU8DRQR","text":"I did not know that it is in the MSP+ACL docs","ts":"1485182556.001589"},{"type":"message","user":"U1AU8DRQR","text":"is this trivial?","ts":"1485182690.001590"},{"type":"message","user":"U0XPR4NP4","text":"Not entirely sure what you mean","ts":"1485184981.001591"},{"type":"message","user":"U0XPR4NP4","text":"I'd say it's not trivial, might be worth putting into its own doc","ts":"1485184997.001592"},{"type":"message","user":"U1AU8DRQR","text":"yeah, that is what I meant :slightly_smiling_face:","ts":"1485185596.001593"},{"type":"message","user":"U0XPR4NP4","text":"The concept of the configuration transaction is simple enough, can be explained in a few sentences","ts":"1485186705.001594"},{"type":"message","user":"U0XPR4NP4","text":"The details of what pieces map to what have gotten increasingly complicated though since its inception","ts":"1485186721.001595"},{"type":"message","user":"U1AU8DRQR","text":"yep, but I think having docs on everything easily available is a must","ts":"1485187846.001596"},{"type":"message","user":"U1AU8DRQR","text":"there is a doc on that config tx thing and that's great, but it is a little bit (maybe) hard to find","ts":"1485187882.001597"},{"type":"message","user":"U1AU8DRQR","text":"anybody please <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3635\/>","ts":"1485188519.001598"},{"type":"message","user":"U0XPR4NP4","text":"+1 ^ I have reviewed this, would appreciate if others would as well","ts":"1485191460.001599"},{"type":"message","user":"U3UPDJXV2","text":"<@U0XQ35CDD> this is very interesting.. \nwe are using kafka at my job.  But we are simply making the customers\/services auth before they are able to write.. what added security are we achieving with this system?  It almost seems like the benefits of this is to see if something has been tampered with, but I\u2019m wondering under what pretext could something be tampered with if you it\u2019s a permissioned based system in the first place.. if the nodes that are the oracles of this system allow something to be added that is fraudulent\/false it shouldn\u2019t allow the write to happen in the first place without the proper digital signature.. right?  I feel like the system will be severely compromised if this kind of activity were able to take place, and hashes and such could be re-written with signatures to rewrite events.. like to hear your thoughts.","ts":"1485194451.001600"},{"type":"message","user":"U0XQ35CDD","text":"<@U3UPDJXV2>: Isn't tampering orthogonal to whether the system is permission-based or not?","ts":"1485194600.001601"},{"type":"message","user":"U3UPDJXV2","text":"isn\u2019t tampering relative\u2026 if a customer or service has a proper key\/ or has authed.. it looks legitimate when it writes or puts data into a topic right?","ts":"1485194718.001602"},{"type":"message","user":"U3UPDJXV2","text":"i see it being extremely hard to go back and tamper with an entry in the generic sense of going back in and changing something in a kafka topic..","ts":"1485194754.001603"},{"type":"message","user":"U3UPDJXV2","text":"it\u2019s an append only queue right?","ts":"1485194770.001604"},{"type":"message","user":"U0XPR4NP4","text":"<@U3UPDJXV2> although Kafka may not support modifying items which have been queued, there is no technical reason a sufficiently motivated attacker with access to the brokers could not do this, and there would be no way to detect or refute this change","ts":"1485195015.001605"},{"type":"message","user":"U0XQ35CDD","text":"Right, I imagine that given enough incentive this isn't impossible.","ts":"1485195043.001606"},{"type":"message","user":"U3UPDJXV2","text":"<@U0XPR4NP4> good point, little green on this still.. how does fabric prevent this?  I was thinking you could just rewrite the hashes if needed and it would also be undetectable.","ts":"1485195143.001607"},{"type":"message","user":"U0XQ35CDD","text":"You could absolutely rewrite history that way, which is where a periodic key rotation would come handy.","ts":"1485195261.001608"},{"type":"message","user":"U0XPR4NP4","text":"<@U3UPDJXV2> Anyone who already has a copy of the chain, could refute this, and would be able to trivially locate the change, based on where the hash chains diverge.  Additionally, because blocks are signed by the ordering service, the attacker would have to have access to the signing keys of the orderers and falsify a signature for every block.  But, yes, if the keys are compromised, a new chain could be forged.","ts":"1485195297.001609"},{"type":"message","user":"U0XPR4NP4","text":"And as <@U0XQ35CDD> points out, if keys are periodically rotated (and destroyed) this should become impossible for blocks whose key has already been rotated","edited":{"user":"U0XPR4NP4","ts":"1485195397.000000"},"ts":"1485195328.001610"},{"type":"message","user":"U3UPDJXV2","text":"it seems like this kind of idea of fabric comes into handy when auditors or another party wants to be able to say with more assurety that something hasn\u2019t been tampered with very quickly. \nkey rotation is mandated by protocol?  or does it kind of have a TTL?  i imagine a rotating key would just prevent bad new writes not rewrites","ts":"1485195482.001612"},{"type":"message","user":"U0XQ35CDD","text":"I think what makes these arguments a bit difficult to digest is that we're parsing them in a Kafka (fully-trusted essentially) environment, where an attack is theoretically easier. Once you start parsing them in a BFT context where multiple signatures are needed, things become much more difficult for the attacker.","ts":"1485195602.001613"},{"type":"message","user":"U0XQ35CDD","text":"Indeed a rotating key would still allow you to rewrite up to a point. And then a hashchain would make it obvious that there's a point of divergence, assuming you know that for block 100 and onward you're supposed to be getting signatures from pubKey `foo`.","ts":"1485195704.001614"},{"type":"message","user":"U3UPDJXV2","text":"<@U0XQ35CDD> this has been really helpful information.  Any thoughts or experiments on optimal *blocksize\/blocktimes*   (is this good terminology you are using in fabric?)","ts":"1485195845.001615"},{"type":"message","user":"U0XQ35CDD","text":"There is a lot of work to be done there for sure. <@U0N1D1UAE> has done some great preliminary work on batch size (blocksize) <https:\/\/jira.hyperledger.org\/browse\/FAB-1171>, but that's all we have for now. We're almost there with adding functionality at this point. Next on my list is to add instrumentation, and then work on perf. evaluations and optimizations.","edited":{"user":"U0XQ35CDD","ts":"1485196356.000000"},"ts":"1485196151.001616"},{"type":"message","user":"U3UPDJXV2","text":"<@U0XQ35CDD> one more question.. forgot.. where does persisting state come in through couchdb?  isn\u2019t data persisted in kafka itself?","ts":"1485198552.001618"},{"type":"message","user":"U0XQ35CDD","text":"<@U3UPDJXV2>: So Kafka is the message bus. It persists data, but not forever, unless the administrator chooses so. Once an ordering node gets the (orderer) messages from Kafka for a chain, it persists them locally in a CouchDB or what-have-you ledger instance.","ts":"1485200148.001619"},{"type":"message","user":"U1KFCPFQA","text":"<@U3UPDJXV2>  It would probably help if you review the ledger overview charts in <https:\/\/jira.hyperledger.org\/browse\/FAB-758>","ts":"1485200258.001620","reactions":[{"name":"+1","users":["U3UPDJXV2"],"count":1}]},{"type":"message","user":"U3UPDJXV2","text":"<@U1KFCPFQA> i see _Ability to retrieve past values\/trans for key (simple provenance), uses new index into blockchain_ \nWhich part exactly is the blockchain? or the whole system is considered a blockchain?","ts":"1485200522.001621"},{"type":"message","user":"U1KFCPFQA","text":"we often consider the whole system a blockchain and therefore we are usually specific, for example ledger is comprised of the block hash chain on the file system, some indexes into that (leveldb), as well as a state database in either leveldb or couchdb","ts":"1485200649.001622"},{"type":"message","user":"U1AU8DRQR","text":"could somebody familiar with our crypto stuff help me?","ts":"1485257831.001623"},{"type":"message","user":"U1AU8DRQR","text":"<https:\/\/jenkins.hyperledger.org\/job\/fabric-verify-x86_64\/5567\/consoleFull>","ts":"1485257832.001624"},{"type":"message","user":"U1AU8DRQR","text":"I get this on CI","ts":"1485257836.001625"},{"type":"message","user":"U1AU8DRQR","text":"but it works OK on my machine","ts":"1485257842.001626"},{"type":"message","user":"U1AU8DRQR","text":"yeah, it is the starting location...","ts":"1485257976.001627"},{"type":"message","user":"U0ZJZBJLF","text":"<@U0ZR63HLK>  :arrow_up_small:","ts":"1485271966.001628"},{"type":"message","user":"U0ZR63HLK","text":"<@U1AU8DRQR>, I'm looking at test and it looks like that the wrong path is chosen","ts":"1485272993.001629"},{"type":"message","user":"U0ZR63HLK","text":"\/etc\/hyperledger\/msp\/sampleconfig\/cacerts should \/etc\/hyperledger\/fabric\/msp\/sampleconfig\/cacert","ts":"1485273006.001630"},{"type":"message","user":"U0ZR63HLK","text":"it is just my educated guess, I haven't written that test code","ts":"1485273017.001631"},{"type":"message","user":"U1AU8DRQR","text":"<@U0ZR63HLK> sorry I found out:\n&gt; yeah, it is the starting location...\nit did not find the config","ts":"1485273250.001632"},{"type":"message","user":"U0ZR63HLK","text":"okay :slightly_smiling_face:","ts":"1485273304.001633"},{"type":"message","user":"U0ZJZBJLF","text":"uh, is anyone going to fix this? ^","ts":"1485276237.001634"},{"type":"message","user":"U1KDAMDJ7","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/4641\/> includes a fix","ts":"1485276275.001635"},{"type":"message","user":"U1KDAMDJ7","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/4641\/6\/common\/localmsp\/signer_test.go>","ts":"1485276292.001636"},{"type":"message","user":"U1KDAMDJ7","text":"<@U1AU8DRQR> , I found this in another channel.","attachments":[{"fallback":"[January 24th, 2017 1:33 PM] muralisr: <@U3FPBMWTA> can you try `CORE_PEER_MSPCONFIGPATH=\/opt\/gopath\/src\/github.com\/hyperledger\/fabric\/msp\/sampleconfig peer node start --peer-chaincodedev` ?","ts":"1485282831.002652","author_subname":"muralisr","channel_id":"C0Y4PEU22","channel_name":"fabric","is_msg_unfurl":true,"text":"<@U3FPBMWTA> can you try `CORE_PEER_MSPCONFIGPATH=\/opt\/gopath\/src\/github.com\/hyperledger\/fabric\/msp\/sampleconfig peer node start --peer-chaincodedev` ?","author_name":"Srinivasan Muralidharan","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/muralisr","author_icon":"https:\/\/secure.gravatar.com\/avatar\/f2f14ee3d0f083c9afce9767faf6322d.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F66f9%2Fimg%2Favatars%2Fava_0000-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric\/p1485282831002652","is_share":true,"footer":"Posted in #fabric"}],"ts":"1485288007.001637"},{"type":"message","user":"U1AU8DRQR","text":"<@U1KDAMDJ7> thx","ts":"1485347606.001638"},{"type":"message","user":"U1AU8DRQR","text":"I am about to move sbft's proto files into protos\/common or somewhere to there - any objection? :slightly_smiling_face:","ts":"1485347642.001639"},{"type":"message","user":"U0Y14MWA2","text":"as discussed on DM - let's move to protos\/sbft","ts":"1485348519.001640"},{"type":"message","user":"U0XQ35CDD","text":"`protos\/orderer\/sbft` likely a better home.","ts":"1485355205.001641"},{"type":"message","user":"U0XPR4NP4","text":"+1","ts":"1485355692.001642"},{"type":"message","user":"U1AU8DRQR","text":"okay I will move them to there","ts":"1485357160.001643"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XPR4NP4> <@U0XQ35CDD> can you pls remind me what are the committers doing in blockcutter","ts":"1485372132.001644"},{"type":"message","user":"U0XPR4NP4","text":"<@U0Y14MWA2> For normal transactions (peer ones) they are no-op","ts":"1485372164.001645"},{"type":"message","user":"U0XPR4NP4","text":"For configuration transactions, and some internal bookkeeping transactions, they modify the state of the orderer (by creating new channels, modifying who is allowed to read\/write to a channel, etc.)","ts":"1485372194.001646"},{"type":"message","user":"U0Y14MWA2","text":"so what are they - transactions?","ts":"1485372210.001647"},{"type":"message","user":"U0Y14MWA2","text":"configuration transactions?","ts":"1485372225.001648"},{"type":"message","user":"U0Y14MWA2","text":"what I was afraid a bit from just materialized in blockcutter support bloating sbft code by 20-25%","ts":"1485372460.001649"},{"type":"message","user":"U0Y14MWA2","text":"and the code is not \"simple\" as it used to be","ts":"1485372484.001650"},{"type":"message","user":"U0Y14MWA2","text":"anyway","ts":"1485372581.001651"},{"type":"message","user":"U0Y14MWA2","text":"if committers are configuration transactions - they should be called as such","ts":"1485372593.001652"},{"type":"message","user":"U0Y14MWA2","text":"furthermore we discussed the name Ordered - and I really think that MUST change","ts":"1485372620.001653"},{"type":"message","user":"U0XPR4NP4","text":"I agree the name ordered should change","ts":"1485372821.001654"},{"type":"message","user":"U0XPR4NP4","text":"And that the interface as a whole could probably use some renaming","ts":"1485372836.001655"},{"type":"message","user":"U0XPR4NP4","text":"We should probably not be returning no-op committers","ts":"1485372850.001656"},{"type":"message","user":"U0XPR4NP4","text":"Instead, we should only return committers for transactions which modify orderer state","ts":"1485372864.001657"},{"type":"message","user":"U0XPR4NP4","text":"It is definitely going to complicate the sbft code, I see no real way around this.","ts":"1485372884.001658"},{"type":"message","user":"U0XPR4NP4","text":"SBFT gets away today under the assumption that the orderer maintains no state","ts":"1485372894.001659"},{"type":"message","user":"U0XPR4NP4","text":"But this is not true.  The orderer maintains state, but it does not frequently modify it.","ts":"1485372916.001660"},{"type":"message","user":"U0XPR4NP4","text":"You could set the state at genesis, and leave it that way forever, and then things would be fine","ts":"1485372933.001661"},{"type":"message","user":"U0XPR4NP4","text":"But, if we want to do things like access control, with a dynamic set of authorized credentials, then we have to introduce the notion of state","ts":"1485372965.001662"},{"type":"message","user":"U0Y14MWA2","text":"that is all fine - there is a need for orderers to interpret some transactions","ts":"1485372978.001663"},{"type":"message","user":"U0Y14MWA2","text":"that said that are quite a few changes needed here to maintain the attribute \"simple\"","ts":"1485373005.001664"},{"type":"message","user":"U0XPR4NP4","text":"My loose thought, was that block cutter needs to return whether or not a batch modifies orderer state.","ts":"1485373035.001665"},{"type":"message","user":"U0XPR4NP4","text":"Because if it does, this state must be committed before the blockcutter (probably more appropriately called batchcutter) processes any new transactions","ts":"1485373067.001666"},{"type":"message","user":"U0XPR4NP4","text":"(Because the state change might make some future transactions valid or invalid, that change must commit first)","ts":"1485373106.001667"},{"type":"message","user":"U0Y14MWA2","text":"not sure now what are you referring to","ts":"1485373135.001668"},{"type":"message","user":"U0XPR4NP4","text":"Imagine the current orderer state is, \"Allow transactions from A and B\"","ts":"1485373159.001669"},{"type":"message","user":"U0XPR4NP4","text":"You are operating with a batch size of 1, and see the following flow of transactions\n\ntx from A\nreconfiguration tx says \"Allow transactions from B and C\"\ntx from A\ntx from C\n\nThe correct resulting block series looks like:\n\n[tx.A, tx.Reconf, tx.C]","ts":"1485373235.001670"},{"type":"message","user":"U0XPR4NP4","text":"A consensus implementation which tries to pipeline too much around the state modifying reconfig transaction could end up with:\n\n[tx.A, tx.Reconf, tx.A]\n\nIf the reconfiguration commits after the third block has been cut","ts":"1485373292.001671"},{"type":"message","user":"U0Y14MWA2","text":"not really","ts":"1485373302.001672"},{"type":"message","user":"U0Y14MWA2","text":"ok let's start slowly","ts":"1485373312.001673"},{"type":"message","user":"U0Y14MWA2","text":"1) s bft does not have pipelining","ts":"1485373318.001674"},{"type":"message","user":"U0XPR4NP4","text":"Are we certain? Does the primary prepare batches ahead of time? Or only once it has an available sequence number?","ts":"1485373353.001675"},{"type":"message","user":"U0Y14MWA2","text":"2) pipelining can be done for all none-config tx","ts":"1485373354.001676"},{"type":"message","user":"U0Y14MWA2","text":"we are certain","ts":"1485373359.001677"},{"type":"message","user":"U0XPR4NP4","text":"Okay","ts":"1485373363.001678"},{"type":"message","user":"U0Y14MWA2","text":"it is built that way","ts":"1485373364.001679"},{"type":"message","user":"U0Y14MWA2","text":"intenionally","ts":"1485373370.001680"},{"type":"message","user":"U0XPR4NP4","text":"I agree, for non-config txs, pipeline can (and should) be done","ts":"1485373372.001681"},{"type":"message","user":"U0Y14MWA2","text":"with pipelining pending","ts":"1485373377.001682"},{"type":"message","user":"U0XPR4NP4","text":"Right","ts":"1485373379.001683"},{"type":"message","user":"U0Y14MWA2","text":"now","ts":"1485373379.001684"},{"type":"message","user":"U0Y14MWA2","text":"pipelining should be done whenever there are no config tx for throughput this is way future work","ts":"1485373401.001685"},{"type":"message","user":"U0Y14MWA2","text":"3) pipielining can be also done with config tx","ts":"1485373412.001686"},{"type":"message","user":"U0Y14MWA2","text":"this is called speculative execution","ts":"1485373418.001687"},{"type":"message","user":"U0Y14MWA2","text":"where the orderer would change the state *speculatively* upon processing pre-prepare of a config transaction with pieplining on","ts":"1485373456.001688"},{"type":"message","user":"U0Y14MWA2","text":"this is more involved but was proposed in literature","ts":"1485373482.001689"},{"type":"message","user":"U0Y14MWA2","text":"I am talking now here more about the complexity of blockcutter","ts":"1485373493.001690"},{"type":"message","user":"U0Y14MWA2","text":"given that *current* sbft did not have pipelining anyway","ts":"1485373506.001691"},{"type":"message","user":"U0Y14MWA2","text":"+300 lines of code on 1200 lines code base blows my mind","ts":"1485373522.001692"},{"type":"message","user":"U0Y14MWA2","text":"but I guess I will have to try to wrap my head around it","ts":"1485373543.001693"},{"type":"message","user":"U0Y14MWA2","text":"and there the naming does not help","ts":"1485373551.001694"},{"type":"message","user":"U0Y14MWA2","text":"for one thing","ts":"1485373555.001695"},{"type":"message","user":"U0Y14MWA2","text":"so back to that","ts":"1485373612.001696"},{"type":"message","user":"U0Y14MWA2","text":"filter.committers could be filter.configTX?","ts":"1485373621.001697"},{"type":"message","user":"U0Y14MWA2","text":"and Ordered could be ValidateAndAppend?","ts":"1485373655.001698"},{"type":"message","user":"U0Y14MWA2","text":"it should actually just be Validate","ts":"1485374569.001699"},{"type":"message","user":"U0XPR4NP4","text":"I am not in love with `Validate`, but it is orders of magnitude better than `Ordered` (sorry for inflicting that name on the world)","ts":"1485375167.001700"},{"type":"message","user":"U0XPR4NP4","text":"And I hesitate to simply call it configtx, because that has a very specific implication, there are other sorts of transactions which can modify orderer state or must be otherwise handled specially","ts":"1485375200.001701"},{"type":"message","user":"U0Y14MWA2","text":"so I see two things re Ordered","ts":"1485375371.001702"},{"type":"message","user":"U0Y14MWA2","text":"one is the SBFT Ordered which basically is now a System API call","ts":"1485375391.001703"},{"type":"message","user":"U0Y14MWA2","text":"that should be Validate in absence of better name","edited":{"user":"U0Y14MWA2","ts":"1485375416.000000"},"ts":"1485375395.001704"},{"type":"message","user":"U0Y14MWA2","text":"I would leave BC.Ordered naming to you but strongly suggest renaming","ts":"1485375437.001706"},{"type":"message","user":"U0Y14MWA2","text":"re configtx and committers, let's just understand what committers are","ts":"1485375458.001707"},{"type":"message","user":"U0Y14MWA2","text":"shall we call them systemtx?","ts":"1485375469.001708"},{"type":"message","user":"U0Y14MWA2","text":"like in filter.systemtx","edited":{"user":"U0Y14MWA2","ts":"1485375501.000000"},"ts":"1485375483.001709"},{"type":"message","user":"U0XPR4NP4","text":"Sounds reasonable","ts":"1485375946.001711"},{"type":"message","user":"U0Y14MWA2","text":"SystemTransactions or SystemTX?","ts":"1485375965.001712"},{"type":"message","user":"U0XPR4NP4","text":"`SystemTx` would be my preference, We use `ConfigTx` in some places of the code","ts":"1485376097.001713"},{"type":"message","user":"U0XPR4NP4","text":"With respect to `blockcutter.Ordered` I'm inclined to completely rename this, I don't think `blockcutter` is a good name, I would now think something like `batchcutter.ProposeInclusion` or something like that, though I don't even really care for that","ts":"1485376185.001714"},{"type":"message","user":"U0Y14MWA2","text":"Cannot rename due to errors: C:\\gocode\\src\\<http:\/\/github.com|github.com>\\hyperledger\\fabric\\examples\\chaincode\\go\\asset_management_interactive\\app1\\app1.go:35:17: PeerClient not declared by package pb\nC:\\gocode\\src\\<http:\/\/github.com|github.com>\\hyperledger\\fabric\\examples\\chaincode\\go\\asset_management_interactive\\app1\\a","ts":"1485376278.001715"},{"type":"message","user":"U0Y14MWA2","text":"I was trying to rename Committers but this came up...","ts":"1485376311.001716"},{"type":"message","user":"U0Y14MWA2","text":"The problem I have with BC is that it tries to do many things at once","ts":"1485376360.001717"},{"type":"message","user":"U0Y14MWA2","text":"this is: 1) validation of msgs, e.g., signature checks, 2) sizing the batch\/block, 3) filtering out system tx, 4) appends\/includes tx to the current batch","ts":"1485376406.001718"},{"type":"message","user":"U0Y14MWA2","text":"these are all valid things to do","ts":"1485376419.001719"},{"type":"message","user":"U0Y14MWA2","text":"but together make BC a bit convoluted","ts":"1485376430.001720"},{"type":"message","user":"U0Y14MWA2","text":"esp. with Ordered() and Cut() calls","ts":"1485376437.001721"},{"type":"message","user":"U0XPR4NP4","text":"We can certainly split this into multiple pieces if that is useful","ts":"1485376590.001722"},{"type":"message","user":"U0XPR4NP4","text":"The interface makes the implementation of solo trivial","ts":"1485376603.001723"},{"type":"message","user":"U0XPR4NP4","text":"And I think it is fairly straightforward in Kafka as well.  I did my best to make it usable by SBFT, but maybe it needs to be broken into pieces","ts":"1485376621.001724"},{"type":"message","user":"U0Y14MWA2","text":"it's just that I never saw the need for things like this to bring 200 fresh lines of code to SBFT","ts":"1485376665.001725"},{"type":"message","user":"U0Y14MWA2","text":"anyway - we have it merged now so let's work with what we have","ts":"1485376678.001726"},{"type":"message","user":"U0Y14MWA2","text":"btw, any hint on that strange renaming issue","ts":"1485376696.001727"},{"type":"message","user":"U0Y14MWA2","text":"I am not sure why an app would stop renaming at the orderer level","ts":"1485376719.001728"},{"type":"message","user":"U0XPR4NP4","text":"I'm not sure, I am not a big IDE fan, I stick to hacking in vim (so typically just do such things manually)","edited":{"user":"U0XPR4NP4","ts":"1485377097.000000"},"ts":"1485377080.001729"},{"type":"message","user":"U0Y14MWA2","text":"would do it that way but the thing is all over the place","ts":"1485377207.001731"},{"type":"message","user":"U0Y14MWA2","text":"no this Committer is impossible to rename","ts":"1485378583.001732"},{"type":"message","user":"U0Y14MWA2","text":"i will rename it in sbft scope only","ts":"1485378603.001733"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XPR4NP4> <@U1AU8DRQR> <@U0XQ35CDD> <@U0KN2SSKE> I would kindly ask that future sbft merges wait for my code review","edited":{"user":"U0Y14MWA2","ts":"1485379402.000000"},"ts":"1485379392.001734"},{"type":"message","user":"U0Y14MWA2","text":"thanks in advance","ts":"1485379408.001736"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XPR4NP4> given two blocks at number 25 and 54","ts":"1485380507.001737"},{"type":"message","user":"U0Y14MWA2","text":"but without blocks in between","ts":"1485380526.001738"},{"type":"message","user":"U0Y14MWA2","text":"is there are a way to found out, from Committers in 25 and Committers in 54,","ts":"1485380552.001739"},{"type":"message","user":"U0Y14MWA2","text":"were there Committers in blocks 26-53","ts":"1485380561.001740"},{"type":"message","user":"U0Y14MWA2","text":"?","ts":"1485380562.001741"},{"type":"message","user":"U0Y14MWA2","text":"in other words, do Committers have sequential numbers?","ts":"1485380674.001742"},{"type":"message","user":"U0XPR4NP4","text":"Yes","ts":"1485380996.001743"},{"type":"message","user":"U0XPR4NP4","text":"There is a `LastConfigurationIndex` field in the block metadata, which indicates the block number of the last configuration transaction","ts":"1485381058.001744"},{"type":"message","user":"U0XPR4NP4","text":"It by default is only signed per orderer","ts":"1485381070.001745"},{"type":"message","user":"U0XPR4NP4","text":"But you could add as many signatures as you like","ts":"1485381080.001746"},{"type":"message","user":"U0Y14MWA2","text":"so committers = configuration tx? :slightly_smiling_face:","ts":"1485381082.001747"},{"type":"message","user":"U0XPR4NP4","text":"So, from the outside world, this is largely correct","ts":"1485381092.001748"},{"type":"message","user":"U0XPR4NP4","text":"Internally, we play so odd games with translating tx types","ts":"1485381102.001749"},{"type":"message","user":"U0Y14MWA2","text":"I mean, LastConfigurationIndex counts committers, right?","ts":"1485381116.001750"},{"type":"message","user":"U0XPR4NP4","text":"`LastConfigurationIndex` is the the last block number which had a committer, for normal chains.  there are some edge cases (that I'm hoping will go away) to make the 'ordering system chain' more like the rest, but, that is WIP","ts":"1485381196.001751"},{"type":"message","user":"U0Y14MWA2","text":"so, you see why I am asking","ts":"1485381225.001752"},{"type":"message","user":"U0Y14MWA2","text":"because orderers have this state independent from ordinary txs","ts":"1485381243.001753"},{"type":"message","user":"U0Y14MWA2","text":"and configuration txs should be rare","ts":"1485381253.001754"},{"type":"message","user":"U0Y14MWA2","text":"this immensely simplifies state transfer at (sbft) orderers","ts":"1485381269.001755"},{"type":"message","user":"U0Y14MWA2","text":"which means if I have a gap from 26-53, I could look at LastConfigIndex(54)","ts":"1485381299.001756"},{"type":"message","user":"U0Y14MWA2","text":"and if LastConfigIndex(54) &lt;=25","ts":"1485381305.001757"},{"type":"message","user":"U0Y14MWA2","text":"I am good to proceed with the ordering without filling in the gap","ts":"1485381319.001758"},{"type":"message","user":"U0Y14MWA2","text":"agree?","ts":"1485381324.001759"},{"type":"message","user":"U0Y14MWA2","text":"and also if X := LastConfigIndex(54)&gt;25 then the orderer should just fetch block X","ts":"1485381386.001760"},{"type":"message","user":"U0Y14MWA2","text":"and repeat that while LastConfigIndex(X)&gt;25","ts":"1485381410.001761"},{"type":"message","user":"U0XPR4NP4","text":"Yes, I absolutely understand","ts":"1485382404.001762"},{"type":"message","user":"U0XPR4NP4","text":"And agree","ts":"1485382411.001763"},{"type":"message","user":"U0XPR4NP4","text":"I would note however, that I would vote to never `Deliver` a block unless the orderer has already processed all previous blocks","ts":"1485382476.001764"},{"type":"message","user":"U0Y14MWA2","text":"orderer might not deliver but we call Deliver from sbft process","ts":"1485382502.001765"},{"type":"message","user":"U0Y14MWA2","text":"because fill in the gap should be independent from sbft","ts":"1485382517.001766"},{"type":"message","user":"U0XPR4NP4","text":"Yes, agreed","ts":"1485382525.001767"},{"type":"message","user":"U0Y14MWA2","text":"if there is xyzbft it would face the similar problem","ts":"1485382528.001768"},{"type":"message","user":"U0Y14MWA2","text":"and would have to re-solve it","ts":"1485382534.001769"},{"type":"message","user":"U0Y14MWA2","text":"so the idea is to solve it at the current sbft backend level","ts":"1485382546.001770"},{"type":"message","user":"U0Y14MWA2","text":"not within simplebft itself","ts":"1485382555.001771"},{"type":"message","user":"U0Y14MWA2","text":"as a thread separate from main simplebft thread","ts":"1485382583.001772"},{"type":"message","user":"U0XPR4NP4","text":"Makes sense","ts":"1485382855.001773"},{"type":"message","user":"U0XR6J961","text":"what was 200 lines?","ts":"1485390328.001774"},{"type":"message","user":"U0Y14MWA2","text":"<@U0XR6J961> new way of batching","edited":{"user":"U0Y14MWA2","ts":"1485391401.000000"},"ts":"1485391320.001775"},{"type":"message","user":"U2DHRR4TE","text":"odd question but how big can a hyperledger network get before there is a noticeable drop in performance due to the amount of nodes that require consensus?","ts":"1485429027.001777"},{"type":"message","user":"U2DHRR4TE","text":"(I guess this would be with 0.6 pfbt or with the new conensus setup if we have predictions for that)","ts":"1485429072.001778"},{"type":"message","user":"U0XPR4NP4","text":"<@U2DHRR4TE> I think <@U0N1D1UAE> is probably the best one to answer your question","ts":"1485441529.001779"},{"type":"message","user":"U0XR6J961","text":"if you want feedback, just tag me here and I'll have a look","ts":"1485452427.001780"},{"type":"message","user":"U2P14DVMG","text":"What should a newcomer read in order to understand how consensus works on Fabric?","ts":"1485459849.001781"},{"type":"message","user":"U0XV1HDL3","text":"<@U2P14DVMG> - design docs arelinked from here: <https:\/\/wiki.hyperledger.org\/community\/fabric-design-docs>","ts":"1485462093.001782"},{"type":"message","user":"U0XV1HDL3","text":"BFT consensus, specifically here: <https:\/\/jira.hyperledger.org\/browse\/FAB-378>","ts":"1485462113.001783"},{"type":"message","user":"U2P14DVMG","text":"Great, thanks. Those are relatively up to date?","ts":"1485462114.001784"},{"type":"message","user":"U0XV1HDL3","text":"yes, for V1","ts":"1485462124.001785"},{"type":"message","user":"U2P14DVMG","text":"ok, thanks! I\u2019ll read through those.","ts":"1485462170.001786"},{"type":"message","user":"U0XV1HDL3","text":"For in-depth learning on BFT protocols including PBFT, see a textbook like this one : <http:\/\/www.distributedprogramming.net|www.distributedprogramming.net> :wink:","ts":"1485462221.001787"},{"type":"message","user":"U0N1D1UAE","text":"<@U2DHRR4TE> Unfortunately I haven\u2019t done that kind of scaling study.","ts":"1485464047.001788"},{"type":"message","user":"U2DHRR4TE","text":"<@U0N1D1UAE> ah unfortunate, no worries though - was just curious to see if such a thing had been done","ts":"1485508091.001789"},{"type":"message","user":"U0XQ35CDD","text":"<@U3X6RA34J> I summon thee","thread_ts":"1485532444.001790","reply_count":1,"replies":[{"user":"U0XQ35CDD","ts":"1485532475.001792"}],"ts":"1485532444.001790","reactions":[{"name":"+1","users":["U0UGH3X7X","U1KDAMDJ7"],"count":2},{"name":"joy","users":["U1HFNJB50"],"count":1},{"name":"laughing","users":["U0ZJZBJLF"],"count":1}]},{"user":"U3X6RA34J","inviter":"U0XQ35CDD","text":"<@U3X6RA34J|archivebot> has joined the channel","type":"message","subtype":"channel_join","ts":"1485532449.001791"},{"type":"message","user":"U0XQ35CDD","text":"Context: <https:\/\/hyperledgerproject.slack.com\/archives\/ci-pipeline\/p1485492986001890>","attachments":[{"from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/ci-pipeline\/p1485492986001890","fallback":"[January 26th, 2017 8:56 PM] ry: anyone can invite <@U3X6RA34J> to a channel they would like archived to <http:\/\/hyperledgerproject.slackarchive.io\/>","ts":"1485492986.001890","author_subname":"ry","channel_id":"C0YMWRX19","channel_name":"ci-pipeline","is_msg_unfurl":true,"text":"anyone can invite <@U3X6RA34J> to a channel they would like archived to <http:\/\/hyperledgerproject.slackarchive.io\/>","author_name":"Ry Jones","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/ry","author_icon":"https:\/\/avatars.slack-edge.com\/2016-12-03\/112352565781_af8a455dfc891821119c_48.jpg","mrkdwn_in":["text"],"id":1,"footer":"Posted in #ci-pipeline"}],"thread_ts":"1485532444.001790","parent_user_id":"U0XQ35CDD","ts":"1485532475.001792"},{"type":"message","user":"U184J2R7S","text":"<@U2DHRR4TE> I think there is going to be a huge difference in what is in version 0.6 and what is being developed in Master.  I don't know if you were asking though.  For 0.6 though,.. i know we at least got up to 15+ nodes without any noticeable performance degradation.  And i know we have customers in production with 0.6 well over 300,000 blocks with at least 1000 transactions each running at this point in time.. I know there are others that might have gone above these numbers, but this is what I remember off hand","ts":"1485598206.001795"},{"type":"message","user":"U184J2R7S","text":"For version 1.0, an event occurred in december with a few companies where we connected 12+ nodes that were located in different parts of the country, running chaincode without issue... Although we did not measure performance.","ts":"1485598251.001796"},{"type":"message","user":"U184J2R7S","text":"Performance is always a tricky thing though- I could see variations in terms of chaincode that has been written, number of nodes,etc,..","ts":"1485598315.001797"},{"type":"message","user":"U2DHRR4TE","text":"<@U184J2R7S>\n\nInfo on both 0.6 and 1.0 is useful - I was asked this yesterday and didn\u2019t know so thought I\u2019d check.\n\nOn what you did say though - fantastic, when you say \u2018noticeable performance degradation\u2019, how are you measuring performance and by how much is \u2018noticeable\u2019 - how does the degradation increase as more are added?","ts":"1485606823.001798"},{"type":"message","user":"U2DHRR4TE","text":"thanks!","ts":"1485606825.001799"},{"type":"message","user":"U1KFCPFQA","text":"<@U0XPR4NP4> <@U0XQ35CDD> It appears Orderer doesn\u2019t cut a block for 10 seconds after it receives a transaction.  This gets a little annoying during iterative end-to-end test.  How do I configure it down to 1s or 2s?  And should we lower the default?","thread_ts":"1485628062.001800","reply_count":27,"replies":[{"user":"U1KDAMDJ7","ts":"1485628099.001801"},{"user":"U1KFCPFQA","ts":"1485628174.001804"},{"user":"U1KDAMDJ7","ts":"1485628322.001806"},{"user":"U0PB67X4K","ts":"1485628364.001809"},{"user":"U1KFCPFQA","ts":"1485628417.001811"},{"user":"U1KFCPFQA","ts":"1485628620.001813"},{"user":"U1KDAMDJ7","ts":"1485628640.001815"},{"user":"U1KFCPFQA","ts":"1485628654.001817"},{"user":"U1KFCPFQA","ts":"1485628661.001819"},{"user":"U1KFCPFQA","ts":"1485628893.001821"},{"user":"U1KDAMDJ7","ts":"1485628966.001823"},{"user":"U1KDAMDJ7","ts":"1485629045.001825"},{"user":"U1KFCPFQA","ts":"1485629187.001827"},{"user":"U1KDAMDJ7","ts":"1485629200.001829"},{"user":"U1KFCPFQA","ts":"1485629212.001831"},{"user":"U0ULK2JPP","ts":"1485629330.001833"},{"user":"U0ULK2JPP","ts":"1485629382.001835"},{"user":"U1KFCPFQA","ts":"1485629386.001837"},{"user":"U1KDAMDJ7","ts":"1485629398.001839"},{"user":"U0ULK2JPP","ts":"1485629414.001841"},{"user":"U0ULK2JPP","ts":"1485629572.001843"},{"user":"U0ULK2JPP","ts":"1485629628.001845"},{"user":"U1KDAMDJ7","ts":"1485629667.001847"},{"user":"U0ULK2JPP","ts":"1485629795.001849"},{"user":"U1KFCPFQA","ts":"1485629838.001851"},{"user":"U1KFCPFQA","ts":"1485629852.001853"},{"user":"U0ULK2JPP","ts":"1485630869.001856"}],"ts":"1485628062.001800"},{"type":"message","user":"U1KDAMDJ7","text":"dave.enyeart: There is also a MaxMessageCount setting. Send enough messages to cut a block immediately. You can set this all the way down to 1.","edited":{"user":"U1KDAMDJ7","ts":"1485628155.000000"},"thread_ts":"1485628062.001800","parent_user_id":"U1KFCPFQA","ts":"1485628099.001801"},{"type":"message","user":"U1KFCPFQA","text":"I changed MaxMessageCount to 1 in orderer.yaml, didnt see a difference.  Maybe I need to recreate my channel though.","thread_ts":"1485628062.001800","parent_user_id":"U1KFCPFQA","ts":"1485628174.001804"},{"type":"message","user":"U1KDAMDJ7","text":"Yes, either a new chain with the defaults in the order.yaml changed, or send a config transaction to the chain that alters its settings.","edited":{"user":"U1KDAMDJ7","ts":"1485628335.000000"},"thread_ts":"1485628062.001800","parent_user_id":"U1KFCPFQA","ts":"1485628322.001806"},{"type":"message","user":"U0PB67X4K","text":"recreate sounds easier  :wink:","thread_ts":"1485628062.001800","parent_user_id":"U1KFCPFQA","ts":"1485628364.001809","reactions":[{"name":"+1","users":["U1KDAMDJ7"],"count":1}]},{"type":"message","user":"U1KFCPFQA","text":"I re-created chain with my updated orderer.yaml and it still doesnt cut a block for 10s","thread_ts":"1485628062.001800","parent_user_id":"U1KFCPFQA","ts":"1485628417.001811"},{"type":"message","user":"U1KFCPFQA","text":"by re-create, i mean `peer channel create -c myc1`","thread_ts":"1485628062.001800","parent_user_id":"U1KFCPFQA","ts":"1485628620.001813"},{"type":"message","user":"U1KDAMDJ7","text":"where `myc1`  is a new one?","thread_ts":"1485628062.001800","parent_user_id":"U1KFCPFQA","ts":"1485628640.001815"},{"type":"message","user":"U1KFCPFQA","text":"i deleted the old myc1","thread_ts":"1485628062.001800","parent_user_id":"U1KFCPFQA","ts":"1485628654.001817"},{"type":"message","user":"U1KFCPFQA","text":"let me try myc2","thread_ts":"1485628062.001800","parent_user_id":"U1KFCPFQA","ts":"1485628661.001819"},{"type":"message","user":"U1KFCPFQA","text":"same thing with the new myc2\u2026 still a 10s delay","thread_ts":"1485628062.001800","parent_user_id":"U1KFCPFQA","ts":"1485628893.001821"},{"type":"message","user":"U1KDAMDJ7","text":"There is this file, `common\/configtx\/test\/orderer.template`, that I\u2019m not 100% sure how it\u2019s being used, but that contains the actual default values used I think.","thread_ts":"1485628062.001800","parent_user_id":"U1KFCPFQA","ts":"1485628966.001823"},{"type":"message","user":"U1KDAMDJ7","text":"There is supposed to be some tooling in `orderer\/tools\/configtemplate\/` to regenerate it. maybe <@U0ULK2JPP> or <@U0KN2SSKE>  can provide some more insight.","thread_ts":"1485628062.001800","parent_user_id":"U1KFCPFQA","ts":"1485629045.001825"},{"type":"message","user":"U1KFCPFQA","text":"I edited orderer.template by hand, and it broke `peer channel create`","thread_ts":"1485628062.001800","parent_user_id":"U1KFCPFQA","ts":"1485629187.001827"},{"type":"message","user":"U1KDAMDJ7","text":"it\u2019s  a binary file.","thread_ts":"1485628062.001800","parent_user_id":"U1KFCPFQA","ts":"1485629200.001829"},{"type":"message","user":"U1KFCPFQA","text":"will live with the 10s for now","thread_ts":"1485628062.001800","parent_user_id":"U1KFCPFQA","ts":"1485629212.001831"},{"type":"message","user":"U0ULK2JPP","text":"```Genesis:\n\n    # Orderer Type: The orderer implementation to start\n    # Available types are \"solo\" and \"kafka\"\n    OrdererType: solo\n\n    # Batch Timeout: The amount of time to wait before creating a batch\n    BatchTimeout: 10s\n\n    # Batch Size: Controls the number of messages batched into a block\n    BatchSize:\n\n        # Max Message Count: The maximum number of messages to permit in a batch\n        MaxMessageCount: 10\n``` setting MaxMessageCount: 1 in orderer.yaml doesn\u2019t help ?","thread_ts":"1485628062.001800","parent_user_id":"U1KFCPFQA","ts":"1485629330.001833"},{"type":"message","user":"U0ULK2JPP","text":"or BatchTimeout: 1s","thread_ts":"1485628062.001800","parent_user_id":"U1KFCPFQA","ts":"1485629382.001835"},{"type":"message","user":"U1KFCPFQA","text":"nope, tried both","thread_ts":"1485628062.001800","parent_user_id":"U1KFCPFQA","ts":"1485629386.001837"},{"type":"message","user":"U1KDAMDJ7","text":"<@U0ULK2JPP> , would he have to re-generate the template? \n```\nFirehawk:hyperledger sanchezl$ cd fabric\/orderer\/tools\/\nFirehawk:tools sanchezl$ ls -l\ntotal 0\ndrwxr-xr-x  3 sanchezl  staff  102 Jan 24 10:00 configtemplate\nFirehawk:tools sanchezl$ cd configtemplate\/\nFirehawk:configtemplate sanchezl$ ls -l\ntotal 8\n-rw-r--r--  1 sanchezl  staff  1697 Jan 24 10:00 main.go\nFirehawk:configtemplate sanchezl$ go build \nFirehawk:configtemplate sanchezl$ ls -l \ntotal 27536\n-rwxr-xr-x  1 sanchezl  staff  14092908 Jan 28 13:47 configtemplate\n-rw-r--r--  1 sanchezl  staff      1697 Jan 24 10:00 main.go\nFirehawk:configtemplate sanchezl$ .\/configtemplate --help\nUsage of .\/configtemplate:\n  -outputFile string\n    \tThe file to write the configuration templatee to (default \"orderer.template\")\n```","thread_ts":"1485628062.001800","parent_user_id":"U1KFCPFQA","ts":"1485629398.001839"},{"type":"message","user":"U0ULK2JPP","text":"ok","thread_ts":"1485628062.001800","parent_user_id":"U1KFCPFQA","ts":"1485629414.001841"},{"type":"message","user":"U0ULK2JPP","text":"if you do that and `cp orderer.template to $GOPATH\/src\/github.com\/hyperledger\/fabric\/common\/configtx\/test` I guess ?","thread_ts":"1485628062.001800","parent_user_id":"U1KFCPFQA","ts":"1485629572.001843"},{"type":"message","user":"U0ULK2JPP","text":"if its now baked into the template, I supposed we have to do that","thread_ts":"1485628062.001800","parent_user_id":"U1KFCPFQA","ts":"1485629628.001845"},{"type":"message","user":"U1KDAMDJ7","text":"I think the baking-in was a temporary move, at least that\u2019s what the change set says.","thread_ts":"1485628062.001800","parent_user_id":"U1KFCPFQA","ts":"1485629667.001847"},{"type":"message","user":"U0ULK2JPP","text":"ok","thread_ts":"1485628062.001800","parent_user_id":"U1KFCPFQA","ts":"1485629795.001849"},{"type":"message","user":"U1KFCPFQA","text":"that worked","thread_ts":"1485628062.001800","parent_user_id":"U1KFCPFQA","ts":"1485629838.001851"},{"type":"message","user":"U1KFCPFQA","text":"spent 30 minutes but saved 9s :slightly_smiling_face:","thread_ts":"1485628062.001800","parent_user_id":"U1KFCPFQA","ts":"1485629852.001853"},{"type":"message","user":"U1KFCPFQA","text":"ok, figured it out in the side thread.  But we might want to change the default to 1s or 2s to make end-to-end iterative trials more pleasant for people","ts":"1485629944.001855"},{"type":"message","user":"U0ULK2JPP","text":":slightly_smiling_face:","thread_ts":"1485628062.001800","parent_user_id":"U1KFCPFQA","ts":"1485630869.001856"},{"type":"message","user":"U1KFCPFQA","text":"opened a jira item for orderer config updates (at least in trial environments): <https:\/\/jira.hyperledger.org\/browse\/FAB-1919>","ts":"1485631425.001858"},{"user":"U2GEGKXJA","text":"<@U2GEGKXJA|stchrysa> has left the channel","type":"message","subtype":"channel_leave","ts":"1485695514.001859"},{"user":"U3V4G8HUZ","text":"<@U3V4G8HUZ|sagmeister> has joined the channel","type":"message","subtype":"channel_join","ts":"1485787844.001860"},{"type":"message","user":"U1AU8DRQR","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/4813\/>   <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/4819\/>","ts":"1485789806.001861"},{"user":"U3NCSU999","text":"<@U3NCSU999|hl.rose> has joined the channel","type":"message","subtype":"channel_join","ts":"1485820536.001862"},{"user":"U3BH74NH0","text":"<@U3BH74NH0|passkit> has joined the channel","type":"message","subtype":"channel_join","ts":"1485832384.001863"},{"user":"U3YNB7DN1","text":"<@U3YNB7DN1|shawn> has joined the channel","type":"message","subtype":"channel_join","ts":"1485844199.001864"},{"user":"U3ZBYC8T1","text":"<@U3ZBYC8T1|eragnoli> has joined the channel","type":"message","subtype":"channel_join","ts":"1485854549.001865"},{"user":"U3BU07SN7","text":"<@U3BU07SN7|karkal72> has joined the channel","type":"message","subtype":"channel_join","ts":"1485994008.001866"},{"type":"message","user":"U1AU8DRQR","text":"guys please review my commits","ts":"1486044080.001867"},{"type":"message","user":"U1AU8DRQR","text":"start with this: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/4813\/3>","ts":"1486044091.001868"},{"type":"message","user":"U0XPR4NP4","text":"<@U1AU8DRQR> Please add me as a reviewer to any commits you'd like me to take a look at, it is much more likely to get my attention that way","ts":"1486051655.001869"},{"type":"message","user":"U1AU8DRQR","text":"okie I will","ts":"1486051772.001870"},{"type":"message","user":"U1AU8DRQR","text":"sorry :disappointed:","ts":"1486051775.001871"},{"type":"message","user":"U0XPR4NP4","text":"No harm to me! Just don't want your CRs to languish","ts":"1486052077.001872"},{"type":"message","user":"U184J2R7S","text":"hi everybody, in case you have not heard, linux foundation is moving us off of Slack and onto Rocket.Chat, everybody in Slack can log in to the new chat server using your existing linux foundation ID, please visit <http:\/\/chat.hyperledger.org\/> to login to the new chat server","ts":"1486078892.001873"},{"user":"U40FDGJN8","text":"<@U40FDGJN8|jimyang> has joined the channel","type":"message","subtype":"channel_join","ts":"1486089897.001874"},{"user":"U0Z6VMEER","text":"<@U0Z6VMEER|beauson45> has joined the channel","type":"message","subtype":"channel_join","ts":"1486097993.001875"},{"type":"message","user":"U1AU8DRQR","text":"I have just updated this: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/4819\/>","ts":"1486123718.001876"},{"type":"message","user":"U1B2FF8LR","text":"<@U0XPR4NP4>  <@U0XQ35CDD> please who can we assign this issue? <https:\/\/jira.hyperledger.org\/browse\/FAB-2001>","ts":"1486137508.001877"},{"type":"message","user":"U0XPR4NP4","text":"Feel free to assign it to me","ts":"1486137567.001878"},{"type":"message","user":"U0XQ35CDD","text":"(I am here to help if need be.)","ts":"1486137806.001879"},{"type":"message","user":"U0XQ35CDD","text":"By the way, these will fall into our radar automatically if filed under the `fabric-consensus` component in JIRA.","ts":"1486137950.001880"},{"type":"message","user":"U1B2FF8LR","text":"thanks","ts":"1486145423.001881"},{"user":"U13TWBRBL","text":"<@U13TWBRBL|jzhang> has left the channel","type":"message","subtype":"channel_leave","ts":"1486151687.001882"},{"user":"U0UHG4VP1","text":"<@U0UHG4VP1|ry> has joined the channel","type":"message","subtype":"channel_join","ts":"1486492560.001883"},{"type":"message","user":"U0UHG4VP1","text":"please migrate to <https:\/\/chat.hyperledger.org>","ts":"1486492563.001884"},{"user":"U0UHG4VP1","members":["U0J5URUJU","U0KM0C3M3","U0KM3Q4FL","U0KM61BCP","U0KN2SSKE","U0KPFAZNF","U0KRRM29Z","U0M28HM6J","U0MM86C84","U0MRY2LKY","U0MTAMEN4","U0N0GDVJ5","U0N1D1UAE","U0N1K6Z0X","U0N20TJUA","U0N25BLQH","U0N3AJSSU","U0N4P17ND","U0NCW1DPX","U0NK7T8SH","U0NLP5909","U0NLZCF8V","U0P75RFT4","U0PB67X4K","U0PV6MUD6","U0S5KF44D","U0TFEHX8E","U0UGH3X7X","U0UHG4VP1","U0UKSBAKZ","U0UKTPMG8","U0UL07VSL","U0ULK2JPP","U0ULX737C","U0VJM7950","U0W7D64LC","U0XNB1QNA","U0XPR4NP4","U0XQ35CDD","U0XR6J961","U0XRC0KLH","U0XV1HDL3","U0Y14MWA2","U0Y55KNG2","U0Y6AUDST","U0YJUECE8","U0YK3KKCY","U0YM41HA5","U0YMACQSW","U0YP7KFGQ","U0YTUU2T0","U0Z3BE0F5","U0Z41KY5V","U0Z541B3P","U0Z5BHCEM","U0Z68F4HE","U0Z6EEJ69","U0Z6VMEER","U0ZHVB1UP","U0ZJZBJLF","U0ZKU4YHX","U0ZMB7ZEJ","U0ZR63HLK","U10E1PFEH","U10LM0FFZ","U10MVHVHQ","U10PD21K7","U10SJMAHH","U10UX43K6","U112NNFV4","U115YGEH1","U11BP64LD","U11C7DZU5","U11D7BP6U","U11HH3P7Y","U11L89VHU","U11MANG9G","U11NUTP4L","U11RW82PM","U11TAFPUP","U12452RAP","U1296EA0M","U12AHQ3NK","U12J1TDSA","U137A6LBE","U138W4A1F","U139GLMFD","U13DAL5V5","U13JUH485","U13P6TLER","U13Q594J2","U1422GVM1","U142E5N0P","U143JUETY","U14FDQAS3","U14NC480K","U14S06MT7","U150L8BDF","U1566LCHM","U15B57S4R","U15C5RM7F","U1620CB4L","U163J7MRT","U16NAHH8U","U16NDNH08","U173QDB0W","U1751P7U4","U17BRDHPG","U17CZFXGU","U17F0A68Y","U17HK4VQR","U1802P5D3","U184J2R7S","U18LUM6LR","U18P24857","U18U45W48","U193ZSYK0","U196VQF1N","U19CHF6LE","U19MP2N67","U19PX4G4T","U1ADSTE0N","U1AU8DRQR","U1B2FF8LR","U1B5DPRLG","U1B9E51R8","U1BC5A0F9","U1C3WNWRF","U1CK6522F","U1CPB11D0","U1CTBUNEN","U1D89DP47","U1DFU0M32","U1EEGQARJ","U1F1CU61Y","U1F1J97H7","U1F3CQ2HX","U1FLE8XPT","U1FMASJFL","U1GLPP8QN","U1GN670VD","U1GRJD9NC","U1HFNJB50","U1JBVRNQ3","U1JHMKC8H","U1K869J4W","U1KC1TAHE","U1KDAMDJ7","U1KDHJT6H","U1KFCPFQA","U1L24390X","U1LDFR1LJ","U1LP4T69E","U1MA81VBK","U1MDQRX4P","U1MJ9SRF0","U1MNES6NR","U1N4KNWP2","U1N8VD2CE","U1NBM7NHH","U1NPSMCDS","U1NQXK3JT","U1P1ZV6RF","U1P52TCE4","U1PT9H68Z","U1QA06MJR","U1QUW6W82","U1RLZ5729","U1S01QY6L","U1S54EHL7","U1SDX7EQZ","U1SE970KY","U1SHFS1Q9","U1SLE9PJN","U1T95QCUE","U1TMQDYKE","U1U7BR1KP","U1V5VNSAD","U1V6SJ1FF","U1VG8LNP3","U1W210996","U1WAADD4N","U1WTREFUK","U1WUAQJVC","U1XL70KHB","U1Y4P0HM4","U21ECMHL4","U21TE1Q9E","U231RFLFP","U234U0A5U","U23CGEC7N","U23DJ7XDZ","U23GLSTS4","U23JFU108","U24M29R4G","U24PWBB97","U268EB76W","U269P9D8W","U26T99AQ4","U28DBE65P","U294C6FDW","U29QVFW22","U29TSCRQU","U2ABYPVGC","U2AKT6YS1","U2B3A70TX","U2BGFAHC7","U2BJRQLMU","U2BUWHU5C","U2CSGKHRS","U2CSLPV1Q","U2DHRR4TE","U2FR6FUJV","U2GR5RHQT","U2HG2LQH4","U2HSGUNP3","U2HSRQXGQ","U2J6ZKX19","U2JK6JCTZ","U2K3VT40G","U2KJHTPQT","U2M4L4XEY","U2M6CU41G","U2MCH9EEB","U2NDE1ZCK","U2NG5AX0A","U2NNLN56V","U2NPXKPQ8","U2P14DVMG","U2PAB405S","U2QLU433N","U2RMVHMK9","U2SCJN8F6","U2SN3M334","U2U1GAVL3","U2ULY35GX","U2UT57Y6Q","U2VGK3JF5","U2W7U5UA3","U2W8LGBMZ","U2WJPAAJV","U2WL051HN","U2XNKMF24","U2Y2V95D2","U312TN2CS","U31EJ5JK0","U31TA64TT","U33BYSF6H","U35EMQWK1","U36D36JH4","U37F5PG64","U38H8MS11","U38JCNW5V","U39S0S55F","U3BH74NH0","U3BQF48RE","U3BU07SN7","U3D5886CB","U3DB4L15G","U3DHKV84C","U3DKG7M54","U3DMRHFJ4","U3EQM2RPZ","U3HE2V38F","U3HN4GFA9","U3HUXKKEW","U3JL32AFJ","U3LKHA8G5","U3LMVC4Q4","U3NCSU999","U3PBR406M","U3TJABLNT","U3TKE8X3M","U3UPDJXV2","U3V4G8HUZ","U3X6RA34J","U3YNB7DN1","U3ZBYC8T1","U40FDGJN8"],"text":"<@U0UHG4VP1|ry> archived the channel (w\/ 279 members)","type":"message","subtype":"channel_archive","ts":"1486492570.001885"}]