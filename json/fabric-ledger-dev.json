[{"user":"U1KFCPFQA","text":"<@U1KFCPFQA|dave.enyeart> has joined the channel","type":"message","subtype":"channel_join","ts":"1474985415.000002"},{"user":"U1KFCPFQA","purpose":"Discuss ledger development","text":"<@U1KFCPFQA|dave.enyeart> set the channel purpose: Discuss ledger development","type":"message","subtype":"channel_purpose","ts":"1474985415.000003"},{"user":"U143D0EQ4","inviter":"U1KFCPFQA","text":"<@U143D0EQ4|lfeagan> has joined the channel","type":"message","subtype":"channel_join","ts":"1474985415.000004"},{"user":"U0Z541B3P","inviter":"U1KFCPFQA","text":"<@U0Z541B3P|manish-sethi> has joined the channel","type":"message","subtype":"channel_join","ts":"1474985415.000005"},{"type":"message","user":"U1KFCPFQA","text":"Ledger backlog including Sprint2 plan is loaded into Jira, view it here:","ts":"1474986138.000006"},{"type":"message","user":"U1KFCPFQA","text":"<https:\/\/jira.hyperledger.org\/secure\/RapidBoard.jspa?rapidView=59&amp;view=planning&amp;selectedIssue=FAB-445>","ts":"1474986141.000007"},{"user":"U29TR7HFH","text":"<@U29TR7HFH|joao.costa> has joined the channel","type":"message","subtype":"channel_join","ts":"1474991967.000008"},{"user":"U0N4P17ND","text":"<@U0N4P17ND|oiakovlev> has joined the channel","type":"message","subtype":"channel_join","ts":"1474992198.000009"},{"user":"U0PV6MUD6","text":"<@U0PV6MUD6|sbrakev> has joined the channel","type":"message","subtype":"channel_join","ts":"1475001539.000010"},{"user":"U0PU2N50V","text":"<@U0PU2N50V|gauthampamu> has joined the channel","type":"message","subtype":"channel_join","ts":"1475029110.000011"},{"type":"message","user":"U0PU2N50V","text":"The key in the world state is represented by as concatenation of chaincodeid and key. So someone mentioned you cannot access the data stored by another chaincode. So using the chaincode API, one chaincode cannot retrieve the data added by other chaincode but if you make copy of the db files and write another program and call the API directly using the API in state.go, you should be able to retrieve the data right ? I don\u2019t need this functionality but I am just trying to understand it. In the state implementation, there are three implementation buckettree, raw and trie. I would like to understand the difference between the three. Don\u2019t need detail answer, want to understand when you would change the implementation to raw or trie. Is buckettree the best implementation from cryptohash performance ?","ts":"1475029901.000012"},{"type":"message","user":"U1KFCPFQA","text":"<@U0Z541B3P>  Yesterday I cleaned up comments in the ledgernext example to help people understand it: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1275\/>","ts":"1475071232.000013"},{"type":"message","user":"U0Z541B3P","text":"<@U0PU2N50V> - yes you are right about making a copy of the db and using state APIs for accessing (though the data would be encrypted, if encryption is on).\n - The difference between the three is how the state keys are \u2018logically\u2019 arranged so that crypto hash of state can be computed efficiently. 1) `raw` does not compute crypto hash at all and serves the purpose of best case performance numbers 2) `buckettree` details are mentioned in the doc (<https:\/\/github.com\/manish-sethi\/fabric\/blob\/master\/docs\/protocol-spec.md#3221-hashing-the-world-state>) and 3) `trie` arranges the keys based on trie structure.\n`buckettree` is flexible in the sense that it allows you to control the depth and width of the tree and hence controlling the performance","attachments":[{"service_name":"GitHub","title":"manish-sethi\/fabric","title_link":"https:\/\/github.com\/manish-sethi\/fabric\/blob\/master\/docs\/protocol-spec.md#3221-hashing-the-world-state","text":"Blockchain fabric code","fallback":"GitHub: manish-sethi\/fabric","thumb_url":"https:\/\/avatars2.githubusercontent.com\/u\/14808090?v=3&s=400","from_url":"https:\/\/github.com\/manish-sethi\/fabric\/blob\/master\/docs\/protocol-spec.md#3221-hashing-the-world-state","thumb_width":420,"thumb_height":420,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1475071259.000014"},{"type":"message","user":"U0Z541B3P","text":"<@U1KFCPFQA> sure, will go through the changes","ts":"1475071325.000016"},{"type":"message","user":"U1KFCPFQA","text":"It has already been approved\/merged, now I\u2019m working on the protobuf\/simulationResults defect I mentioned the other day","ts":"1475071417.000017"},{"type":"message","user":"U1KFCPFQA","text":"Note - the intent is to slack about what we do each day in this channel, so others can get engaged in ledger development","ts":"1475071506.000018"},{"type":"message","user":"U0Z541B3P","text":"OK, sure.","ts":"1475071680.000019"},{"type":"message","user":"U0Z541B3P","text":"I just submitted a changeset for synch-ing the block index with block storage (<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1317\/>)","ts":"1475071726.000020"},{"user":"U0YJUECE8","text":"<@U0YJUECE8|silliman> has joined the channel","type":"message","subtype":"channel_join","ts":"1475075699.000021"},{"user":"U231ZGXDG","text":"<@U231ZGXDG|shukla> has joined the channel","type":"message","subtype":"channel_join","ts":"1475084391.000022"},{"user":"U24M29R4G","text":"<@U24M29R4G|nikileshsa> has joined the channel","type":"message","subtype":"channel_join","ts":"1475087797.000023"},{"user":"U1B9E51R8","text":"<@U1B9E51R8|xixuejia> has joined the channel","type":"message","subtype":"channel_join","ts":"1475115533.000024"},{"user":"U1KDHJT6H","text":"<@U1KDHJT6H|claytonsims> has joined the channel","type":"message","subtype":"channel_join","ts":"1475240185.000025"},{"type":"message","user":"U1KFCPFQA","text":"Defect FAB-491 \"Ledger is not using the Action.SimulationResult protobuf message\" <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1341\/> has been merged.  This fix is required for end-to-end endorser-to-committer flow to work.  Murali has had initial success with the first end-to-end flow from simulation to ledger commit, he will be committing it in the coming days.","ts":"1475243729.000026"},{"type":"message","user":"U1KFCPFQA","text":"I am starting to look at pluggable state database, starting with a CouchDB trial.","ts":"1475243775.000027"},{"type":"message","user":"U1KFCPFQA","text":"I talked to Manish today, he is starting to feel better and is working on the Raw Ledger implementation for Ordering Service to use (FAB-56)","ts":"1475243835.000028"},{"user":"U24PWBB97","text":"<@U24PWBB97|vkandy> has joined the channel","type":"message","subtype":"channel_join","ts":"1475471397.000029"},{"type":"message","user":"U24M29R4G","text":"<@U1KFCPFQA> Thanks for sharing the pluggable database proposal for hyperledger. It was a great read!","ts":"1475517479.000030"},{"type":"message","user":"U24M29R4G","text":"I have a few questions on your idea of using CouchDB as a pluggable state database. As I understand from the code in Convergence branch, the current fsblkstorage package implements a file based storage for storing block data and a rocksdb is used for just indexing the data. If we are going to use CouchDB as an alternate database, I am assuming we will be replacing the file based block storage and the rocksdb indexing with the CouchDB specific implementation of storing blocks and the corresponding indexing of the data. Please correct me if I am wrong.","ts":"1475517993.000031"},{"type":"message","user":"U1KFCPFQA","text":"Hi, so ledgernext is composed of what I call the \u2018blockchain ledger\u2019 (file-system block storage and associated RocksDB indexes) and \u2018state database\u2019 to track variables (using a separate RocksDB).  The pluggable portion will just be the \u2018state database\u2019.  This is the part that chaincode actually interacts with.","ts":"1475518249.000032"},{"type":"message","user":"U1KFCPFQA","text":"I\u2019ll make that more clear in the charts","ts":"1475518275.000033"},{"type":"message","user":"U24M29R4G","text":"ah ok. I understand... thanks <@U1KFCPFQA>!","ts":"1475518977.000034"},{"user":"U12452RAP","text":"<@U12452RAP|grapebaba> has joined the channel","type":"message","subtype":"channel_join","ts":"1475539409.000035"},{"user":"U2A5NPBQ9","text":"<@U2A5NPBQ9|kent_landholm> has joined the channel","type":"message","subtype":"channel_join","ts":"1475562137.000036"},{"type":"message","user":"U0Z541B3P","text":"I submitted a commit that includes implementation of `rawLedger` - <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1401\/>","ts":"1475586247.000037"},{"type":"message","user":"U0PU2N50V","text":"What is the process to update chaincode when you have a bug ? If you were to modify it and redeploy it, it is deployed  with a new chaincode id so it equivalent to a new ledger because world state is generating key with combination of chaincode id and key. Can you specify both path and name with deploy JSON request so that it does not generate new chaincode id. Is that supported ? Has anyone tried this ?","ts":"1475602918.000038"},{"type":"message","user":"U1KFCPFQA","text":"this is not possible currently.  there is intent to support chaincode versioning in v1, for example by having a static chaincode id and a version identifier that increments.  then the world state would be based on chaincode id and not the version.  this of course assumes the data is compatible across versions.","ts":"1475603092.000039"},{"type":"message","user":"U24M29R4G","text":"<@U1KFCPFQA> . Newbie question here. I am trying to understand the need for a state database in addition to a FS based ledger. Why do we need to have two different stores of the same information. I am asking this because, I see the following <https:\/\/jira.hyperledger.org\/browse\/FAB-441> which talks about not storing any large keys in   the state database and instead use the FS based ledger. How do we define large here?","ts":"1475603166.000040"},{"type":"message","user":"U1KFCPFQA","text":"chaincode needs access to the keys\/values.  this could be accomplished by having a key index that points to the latest transaction in the FS based ledger that updated the key.  the value could be retrieved from the transaction\u2019s write set.  this is a multiple-step process however, so having a state database with the value included in the key index is simply an optimization","ts":"1475603345.000041"},{"type":"message","user":"U1KFCPFQA","text":"for large values, the duplicate values becomes a problem , therefore the intent is to be able to configure at what point the value gets copied to the state index vs referenced in the ledger tran","ts":"1475603431.000042"},{"type":"message","user":"U1KFCPFQA","text":"the other benefit of the state database, is that more advanced queries could be performed than simple key lookups","ts":"1475603474.000043"},{"type":"message","user":"U24M29R4G","text":"this explains it.. thanks <@U1KFCPFQA>!  So we will have a check for if the key\/ value size is less that the Max key value size (config\/tuning parameter) which would be used to determine if the value gets copied to the state index.","ts":"1475604202.000044"},{"type":"message","user":"U1KFCPFQA","text":"right, that\u2019s the intent, the specifics have not yet been designed","ts":"1475604236.000045"},{"type":"message","user":"U24M29R4G","text":"awesome! got it..","ts":"1475604328.000046"},{"user":"U2B3A70TX","text":"<@U2B3A70TX|soldat> has joined the channel","type":"message","subtype":"channel_join","ts":"1475608467.000047"},{"type":"message","user":"U1KFCPFQA","text":"Good news, as part of FAB-440 (Prototype pluggable state database), I\u2019ve got initial writes working against CouchDB.  I\u2019ll clean things up the rest of this week and then use what I\u2019ve found to make ledgernext state database more easily pluggable in next sprint using FAB-602 (Ledger: Refactor ledgernext to better support pluggable state database)","ts":"1475681094.000048","reactions":[{"name":"+1::skin-tone-4","users":["U24M29R4G","U2MCH9EEB"],"count":2}]},{"user":"U0XV1HDL3","text":"<@U0XV1HDL3|cca> has joined the channel","type":"message","subtype":"channel_join","ts":"1475738710.000049"},{"user":"U2L9F7VL1","text":"<@U2L9F7VL1|adrianhopebailie> has joined the channel","type":"message","subtype":"channel_join","ts":"1475773894.000050"},{"type":"message","user":"U24M29R4G","text":"Hi. I thought I would start a conversation around the pluggable database from an implementation perspective based on Dave's presentation in terms of how an interface definition  would like for a datastore to be pluggable. I have been thinking about some kind of a registry service similar to Fabric's  consensus implementation that would allow us to register mutiple DB's and some generic DB interface which would define the APIs all the DB's should support.","ts":"1475794420.000051"},{"type":"message","user":"U1KFCPFQA","text":"agreed - that is one of the next items to think through, how to refactor ledgernext to provide an interface that is obvious and easy to implement","ts":"1475794606.000052"},{"type":"message","user":"U24M29R4G","text":"right. I am trying to see how generic this interface has to be to support all possible datastores. RDBMS type DB's store information in tables while rocksdb has the concept of Column families. We may need to think in terms of how to abtract these concepts","ts":"1475794786.000053"},{"type":"message","user":"U1KFCPFQA","text":"yeah, i\u2019m thinking if the chaincode data is modeled as JSON, it can easily be pushed to key\/value or document datastore as-is, but would require a transformation layer to push to relational DB","ts":"1475794889.000054"},{"type":"message","user":"U1KFCPFQA","text":"we could also have a table\/record metaphor to make the relational mapping easier","ts":"1475794934.000055"},{"type":"message","user":"U1KFCPFQA","text":"i\u2019d suggest write down some ideas and then we can look at it together","ts":"1475794973.000056"},{"type":"message","user":"U24M29R4G","text":"yeah..","ts":"1475795000.000057"},{"type":"message","user":"U24M29R4G","text":"Sure Dave..","ts":"1475795009.000058"},{"type":"message","user":"U1KFCPFQA","text":"i expect to be thinking through these aspects next week","ts":"1475795016.000059"},{"type":"message","user":"U24M29R4G","text":"I just came up with a simple registry service for registering different DBs.. and some kind of DB interface. Just as a starting point. Please feel free to comment on it.","ts":"1475795165.000060"},{"type":"message","user":"U24M29R4G","text":"<https:\/\/github.com\/nikileshsa\/hyperledger_pluggable_datastore\/tree\/master\/core\/db>","attachments":[{"service_name":"GitHub","title":"nikileshsa\/hyperledger_pluggable_datastore","title_link":"https:\/\/github.com\/nikileshsa\/hyperledger_pluggable_datastore\/tree\/master\/core\/db","text":"Contribute to hyperledger_pluggable_datastore development by creating an account on GitHub.","fallback":"GitHub: nikileshsa\/hyperledger_pluggable_datastore","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/584036?v=3&s=400","from_url":"https:\/\/github.com\/nikileshsa\/hyperledger_pluggable_datastore\/tree\/master\/core\/db","thumb_width":420,"thumb_height":420,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1475795177.000061"},{"type":"message","user":"U24M29R4G","text":"its largely a work in progress from the db interface definition perspective.","ts":"1475795319.000063"},{"user":"U2GT93M2T","text":"<@U2GT93M2T|zdavatz> has joined the channel","type":"message","subtype":"channel_join","ts":"1475829921.000064"},{"user":"U1CTBUNEN","text":"<@U1CTBUNEN|mart0nix> has joined the channel","type":"message","subtype":"channel_join","ts":"1475933789.000002"},{"type":"message","user":"U1CTBUNEN","text":"<@U1KFCPFQA> where can I see your presentation that people are referring to in this channel ?","ts":"1475934315.000003"},{"type":"message","user":"U1KFCPFQA","text":"making some significant updates\u2026 was going to post to the fabric distribution list\u2026 but since you are asking now let me upload an interim version here\u2026 few minutes...","ts":"1475934411.000004"},{"type":"message","user":"U1KFCPFQA","text":"ok, latest pluggable db proposal can be found here:","ts":"1475935591.000005"},{"type":"message","user":"U1KFCPFQA","text":"<https:\/\/jira.hyperledger.org\/browse\/FAB-60>","ts":"1475935594.000006"},{"type":"message","user":"U1KFCPFQA","text":"<@U1CTBUNEN>","ts":"1475935624.000007"},{"type":"message","user":"U1CTBUNEN","text":"thanks","ts":"1475935638.000008"},{"type":"message","user":"U1KFCPFQA","text":"np, let me know your thoughts, stepping away for now","ts":"1475935662.000009"},{"user":"U23S3DPFY","text":"<@U23S3DPFY|ccooper21> has joined the channel","type":"message","subtype":"channel_join","ts":"1475945895.000010"},{"user":"U2M6CU41G","text":"<@U2M6CU41G|seshadrs> has joined the channel","type":"message","subtype":"channel_join","ts":"1476025398.000011"},{"user":"U1CPB11D0","text":"<@U1CPB11D0|dianfu> has joined the channel","type":"message","subtype":"channel_join","ts":"1476075173.000012"},{"user":"U1GN670VD","text":"<@U1GN670VD|thiruworkspace> has joined the channel","type":"message","subtype":"channel_join","ts":"1476102000.000013"},{"user":"U1F3CQ2HX","text":"<@U1F3CQ2HX|nhrishi> has joined the channel","type":"message","subtype":"channel_join","ts":"1476125327.000014"},{"type":"message","user":"U1KFCPFQA","text":"Ledger Sprint3 plan can be found in jira here: <https:\/\/jira.hyperledger.org\/secure\/RapidBoard.jspa?rapidView=59&amp;view=planning.nodetail>","ts":"1476163798.000015"},{"type":"message","user":"U1KFCPFQA","text":"Prototype pluggable state database using CouchDB (FAB-440) has been pushed to Gerrit for your review\/trials:  <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1669\/>","ts":"1476199864.000016"},{"user":"U2MCH9EEB","text":"<@U2MCH9EEB|crazybit> has joined the channel","type":"message","subtype":"channel_join","ts":"1476203244.000017"},{"type":"message","user":"U2MCH9EEB","text":"known that chaincode is something like smart contract which would update the ledger\uff0chow fabric ensure that the operation of chaincode is not malicious","ts":"1476208762.000018"},{"type":"message","subtype":"file_share","text":"<@U24M29R4G|nikileshsa> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/nikileshsa\/F2N2THZB3\/error_while_calling_savebytesdoc_method_-__resp__err____db_connection_request__put___url__data__headers__db_auth_.sh|Error while calling SaveBytesDoc method -  resp, err := db.connection.request(\"PUT\", url, data, headers, db.auth)>","file":{"id":"F2N2THZB3","created":1476209594,"timestamp":1476209594,"name":"Error_while_calling_SaveBytesDoc_method_-__resp__err____db_connection_request__PUT___url__data__headers__db_auth_.sh","title":"Error while calling SaveBytesDoc method -  resp, err := db.connection.request(\"PUT\", url, data, headers, db.auth)","mimetype":"text\/plain","filetype":"shell","pretty_type":"Shell","user":"U24M29R4G","editable":true,"size":7703,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2N2THZB3\/error_while_calling_savebytesdoc_method_-__resp__err____db_connection_request__put___url__data__headers__db_auth_.sh?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2N2THZB3\/download\/error_while_calling_savebytesdoc_method_-__resp__err____db_connection_request__put___url__data__headers__db_auth_.sh?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/nikileshsa\/F2N2THZB3\/error_while_calling_savebytesdoc_method_-__resp__err____db_connection_request__put___url__data__headers__db_auth_.sh","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2N2THZB3-4373ee1e1d","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/nikileshsa\/F2N2THZB3\/error_while_calling_savebytesdoc_method_-__resp__err____db_connection_request__put___url__data__headers__db_auth_.sh\/edit","preview":"hp:~\/go\/src\/github.com\/hyperledger\/fabric\/core\/ledgernext\/kvledger\/example\/main$ go run marble_example.go \r\n2016\/10\/11 11:08:41 ===COUCHDB=== Marble Example main init()\r\n2016\/10\/11 11:08:41 CreateDirIfMissing [\/tmp\/test\/ledgernext\/kvledger\/example\/blocks\/blocks\/]\r\n2016\/10\/11 11:08:41 CreateDirIfMissing [\/tmp\/test\/ledgernext\/kvledger\/example\/blocks\/db\/]\r\n2016\/10\/11 11:08:41 saved checkpointInfo:latestFileChunkSuffixNum=[0], latestFileChunksize=[0], lastBlockNumber=[0]\r","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>hp:~\/go\/src\/github.com\/hyperledger\/fabric\/core\/ledgernext\/kvledger\/example\/main<span class=\"cm-def\">$ go<\/span> run marble_example.go <\/pre><\/div>\n<div><pre><span class=\"cm-number\">2016<\/span>\/10\/11 <span class=\"cm-number\">11<\/span>:08:41 <span class=\"cm-operator\">=<\/span><span class=\"cm-operator\">=<\/span><span class=\"cm-operator\">=<\/span><span class=\"cm-def\">COUCHDB<\/span><span class=\"cm-operator\">=<\/span><span class=\"cm-operator\">=<\/span><span class=\"cm-operator\">=<\/span> Marble Example main init()<\/pre><\/div>\n<div><pre><span class=\"cm-number\">2016<\/span>\/10\/11 <span class=\"cm-number\">11<\/span>:08:41 CreateDirIfMissing [\/tmp\/test\/ledgernext\/kvledger\/example\/blocks\/blocks\/]<\/pre><\/div>\n<div><pre><span class=\"cm-number\">2016<\/span>\/10\/11 <span class=\"cm-number\">11<\/span>:08:41 CreateDirIfMissing [\/tmp\/test\/ledgernext\/kvledger\/example\/blocks\/db\/]<\/pre><\/div>\n<div><pre><span class=\"cm-number\">2016<\/span>\/10\/11 <span class=\"cm-number\">11<\/span>:08:41 saved checkpointInfo<span class=\"cm-def\">:latestFileChunkSuffixNum<\/span><span class=\"cm-operator\">=<\/span>[0], <span class=\"cm-def\">latestFileChunksize<\/span><span class=\"cm-operator\">=<\/span>[0], <span class=\"cm-def\">lastBlockNumber<\/span><span class=\"cm-operator\">=<\/span>[0]<\/pre><\/div>\n<\/div>\n<\/div>\n","lines":69,"lines_more":64,"preview_is_truncated":true,"channels":["C2GFRAE7P"],"groups":[],"ims":[],"comments_count":0},"user":"U24M29R4G","upload":true,"display_as_bot":false,"username":"<@U24M29R4G|nikileshsa>","bot_id":null,"ts":"1476209595.000019"},{"type":"message","user":"U24M29R4G","text":"Hi Dave. just tried to run the marble example for testing this feature <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1669\/>","ts":"1476209695.000020"},{"type":"message","user":"U24M29R4G","text":"I have installed couchdb in my localhost and set the couchdb toggle flag to true.","ts":"1476209767.000021"},{"type":"message","user":"U24M29R4G","text":"When it tries to call the PUT in SaveBytesbyDoc() , I am getting the following response.. ===DME got a status code &gt;= 400: &amp;{404 Object Not Found 404 HTTP\/1.1 1 1 map[Content-Length:[44] Cache-Control:[must-revalidate] Server:[CouchDB\/1.5.0 (Erlang OTP\/R16B03)] Date:[Tue, 11 Oct 2016 18:08:41 GMT] Content-Type:[application\/json]] 0xc82012eb40 44 [] false map[] 0xc82010c380 &lt;nil&gt;}\n===DME response body: {\"error\":\"not_found\",\"reason\":\"no_db_file\"}","ts":"1476209883.000022"},{"type":"message","user":"U24M29R4G","text":"not sure if I am missing something..","ts":"1476209957.000023"},{"type":"message","user":"U24M29R4G","text":"Update: Was able to get past this error after creating the marbles_app Database ```curl -X PUT <http:\/\/127.0.0.1:5984\/marbles_app>```","ts":"1476211343.000024"},{"type":"message","user":"U1KFCPFQA","text":"<@U2MCH9EEB> please post your question to the more general \u2018fabric\u2019 channel, more likely somebody there can answer it.","ts":"1476213946.000025"},{"type":"message","user":"U1KFCPFQA","text":"<@U24M29R4G> Great news\u2026 always important to see it work for a 2nd person.  I\u2019ve updated the commit message to mention the db creation step.","ts":"1476215709.000026"},{"type":"message","user":"U1KFCPFQA","text":"First prototype of pluggable\/queryable state database is complete.  Would love any feedback.  Summary of assets:\nCharts in Jira: <https:\/\/jira.hyperledger.org\/browse\/FAB-60>\nDemo in playback channel: <https:\/\/hyperledgerproject.slack.com\/archives\/playbacks>\nPrototype code in Gerrit: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1669\/>","ts":"1476216057.000027"},{"type":"message","user":"U24M29R4G","text":"<@U1KFCPFQA> thanks for updating the commit message.","ts":"1476220339.000028"},{"type":"message","user":"U1KFCPFQA","text":"my pleasure","ts":"1476220357.000029"},{"type":"message","subtype":"file_share","text":"<@U24M29R4G|nikileshsa> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/nikileshsa\/F2N5ANGAH\/panic_due_to_document_update_conflict_error.sh|Panic due to Document update conflict error> and commented: Getting the following error after the first successful run of the example","file":{"id":"F2N5ANGAH","created":1476220595,"timestamp":1476220595,"name":"Panic_due_to_Document_update_conflict_error.sh","title":"Panic due to Document update conflict error","mimetype":"text\/plain","filetype":"shell","pretty_type":"Shell","user":"U24M29R4G","editable":true,"size":9028,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2N5ANGAH\/panic_due_to_document_update_conflict_error.sh?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2N5ANGAH\/download\/panic_due_to_document_update_conflict_error.sh?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/nikileshsa\/F2N5ANGAH\/panic_due_to_document_update_conflict_error.sh","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2N5ANGAH-473a38f376","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/nikileshsa\/F2N5ANGAH\/panic_due_to_document_update_conflict_error.sh\/edit","preview":"hp:~\/go\/src\/github.com\/hyperledger\/fabric\/core\/ledgernext\/kvledger\/example\/main$ go run marble_example.go \r\n2016\/10\/11 14:13:47 ===COUCHDB=== Marble Example main init()\r\n2016\/10\/11 14:13:47 CreateDirIfMissing [\/tmp\/test\/ledgernext\/kvledger\/example\/blocks\/blocks\/]\r\n2016\/10\/11 14:13:47 CreateDirIfMissing [\/tmp\/test\/ledgernext\/kvledger\/example\/blocks\/db\/]\r\n2016\/10\/11 14:13:47 saved checkpointInfo:latestFileChunkSuffixNum=[0], latestFileChunksize=[0], lastBlockNumber=[0]\r","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>hp:~\/go\/src\/github.com\/hyperledger\/fabric\/core\/ledgernext\/kvledger\/example\/main<span class=\"cm-def\">$ go<\/span> run marble_example.go <\/pre><\/div>\n<div><pre><span class=\"cm-number\">2016<\/span>\/10\/11 <span class=\"cm-number\">14<\/span>:13:47 <span class=\"cm-operator\">=<\/span><span class=\"cm-operator\">=<\/span><span class=\"cm-operator\">=<\/span><span class=\"cm-def\">COUCHDB<\/span><span class=\"cm-operator\">=<\/span><span class=\"cm-operator\">=<\/span><span class=\"cm-operator\">=<\/span> Marble Example main init()<\/pre><\/div>\n<div><pre><span class=\"cm-number\">2016<\/span>\/10\/11 <span class=\"cm-number\">14<\/span>:13:47 CreateDirIfMissing [\/tmp\/test\/ledgernext\/kvledger\/example\/blocks\/blocks\/]<\/pre><\/div>\n<div><pre><span class=\"cm-number\">2016<\/span>\/10\/11 <span class=\"cm-number\">14<\/span>:13:47 CreateDirIfMissing [\/tmp\/test\/ledgernext\/kvledger\/example\/blocks\/db\/]<\/pre><\/div>\n<div><pre><span class=\"cm-number\">2016<\/span>\/10\/11 <span class=\"cm-number\">14<\/span>:13:47 saved checkpointInfo<span class=\"cm-def\">:latestFileChunkSuffixNum<\/span><span class=\"cm-operator\">=<\/span>[0], <span class=\"cm-def\">latestFileChunksize<\/span><span class=\"cm-operator\">=<\/span>[0], <span class=\"cm-def\">lastBlockNumber<\/span><span class=\"cm-operator\">=<\/span>[0]<\/pre><\/div>\n<\/div>\n<\/div>\n","lines":76,"lines_more":71,"preview_is_truncated":true,"channels":["C2GFRAE7P"],"groups":[],"ims":[],"comments_count":1,"initial_comment":{"id":"Fc2N55D9HC","created":1476220595,"timestamp":1476220595,"user":"U24M29R4G","is_intro":true,"comment":"Getting the following error after the first successful run of the example","channel":""}},"user":"U24M29R4G","upload":true,"display_as_bot":false,"username":"<@U24M29R4G|nikileshsa>","bot_id":null,"ts":"1476220596.000030"},{"type":"message","user":"U1KFCPFQA","text":"It is trying to create the marble1 document again, but there is already one in couchdb","ts":"1476220678.000031"},{"type":"message","user":"U1KFCPFQA","text":"i haven\u2019t added any cleanup code yet","ts":"1476220684.000032"},{"type":"message","user":"U1KFCPFQA","text":"for now you can delete marble1 from couchdb manually","ts":"1476220694.000033"},{"type":"message","user":"U24M29R4G","text":"ah ok got it..","ts":"1476220700.000034"},{"user":"U1WAADD4N","text":"<@U1WAADD4N|akihikot> has joined the channel","type":"message","subtype":"channel_join","ts":"1476252582.000035"},{"user":"U2AS0GVSP","text":"<@U2AS0GVSP|jackkleeman> has joined the channel","type":"message","subtype":"channel_join","ts":"1476275995.000036"},{"type":"message","user":"U1CTBUNEN","text":"<@U1KFCPFQA> this CouchDB connector is HUGE","ts":"1476288802.000037"},{"type":"message","user":"U1CTBUNEN","text":"I can't wait to try it out","ts":"1476288809.000038"},{"type":"message","user":"U1CTBUNEN","text":"I'm still not clear on the ideas of 'blockchain ledger' vs stata database. What's what and how are those related. I'm afraid I looked at the proposal and I'm still confused. May be a very simple example will illustrate the concepts and the thinking behind","ts":"1476289242.000039"},{"type":"message","user":"U1CTBUNEN","text":"also what this all means for the scalability of a high-volume transaction architecture in real world","ts":"1476289535.000040"},{"type":"message","user":"U1CTBUNEN","text":"nosql engine is a great fit for my use case (I keep getting JSON documents, no need to edit or delete old ones)","ts":"1476289582.000041"},{"type":"message","user":"U1KFCPFQA","text":"\u2018blockchain ledger\u2019 is the actual blocks\u2026immutable source of truth.  in v1 architecture since the transaction result data is embedded  in the block transactions, we could technically go without a state database.  But queries to the \u2018blockchain ledger\u2019 would not be efficient (simulation queries or external queries), and therefore we benefit from a side \u2018state database\u2019 with latest key values\u2026 think of it as a key-based index into the blockchain ledger","ts":"1476290499.000042"},{"type":"message","user":"U1CTBUNEN","text":"aha","ts":"1476290596.000043"},{"type":"message","user":"U1CTBUNEN","text":"I've modeled a data layer on top of the event logs in the ethereum transactions","ts":"1476290629.000044"},{"type":"message","user":"U1KFCPFQA","text":"scalability\/performance not fully understood until empirical testing is done\u2026 in theory an external document database would be slower than an embedded key\/value database.  but the database is likely not the bottleneck in v1 architecture.  and if it is, CouchDB could potentially be sharded across a cluster.","ts":"1476290629.000045"},{"type":"message","user":"U1CTBUNEN","text":"they allow indexed topics","ts":"1476290634.000046"},{"type":"message","user":"U1CTBUNEN","text":"which are implemented as a bloom filter","ts":"1476290640.000047"},{"type":"message","user":"U1CTBUNEN","text":"so technically you can query the chain by looking at the indexed topics (that are part of the transaction protocol and hence part of the transaction itself)","ts":"1476290664.000048"},{"type":"message","user":"U1CTBUNEN","text":"got it","ts":"1476290693.000049"},{"type":"message","user":"U1KFCPFQA","text":"right, there is talk of having a config option\u2026 the index could point you to the block transactions themselves to get the data, or the index could contain the actual values for faster lookup.","ts":"1476290783.000050"},{"type":"message","user":"U1CTBUNEN","text":"well if you can \"extend\" the protocol itself to record fields, you pick the ones that you use to query (i.e index keys in SQL) and then you use those to collect the relevant transactions and once you do that you get the other stuff","ts":"1476290889.000051"},{"type":"message","user":"U1CTBUNEN","text":"may be hard to implement an advanced DSL though","ts":"1476290900.000052"},{"type":"message","user":"U1CTBUNEN","text":"also I'm not sure how encryption will play into this","ts":"1476290958.000053"},{"type":"message","user":"U1CTBUNEN","text":"because most enterprise clients will actually require encryption of ALL transaction content","ts":"1476290981.000054"},{"type":"message","user":"U1CTBUNEN","text":"so I'm not sure how scanning\/querying encrypted headers will work : ))","ts":"1476290998.000055"},{"type":"message","user":"U1KFCPFQA","text":"right and right\u2026 we think CouchDB provides decent capability such that the fields don\u2019t have to identified before-hand\u2026 indexes can be created afterwards depending on the query requirements.","ts":"1476291051.000056"},{"type":"message","user":"U1CTBUNEN","text":"right - I also thought that what I did with ethereum in the past was more of a hack","ts":"1476291078.000057"},{"type":"message","user":"U1CTBUNEN","text":"eventually something like CouchDB will be HUGE because the key ingredient that's missing from ANY blockchain is a decent structured data engine and the ability to query that","ts":"1476291135.000058"},{"type":"message","user":"U1CTBUNEN","text":"all the other aspects are coming together more or less","ts":"1476291144.000059"},{"type":"message","user":"U1CTBUNEN","text":"and let's not forget that the data model is where it's at for most real-life applications ; ))","ts":"1476291158.000060"},{"type":"message","user":"U1KFCPFQA","text":"right, there is a balance of blockchain \u2018pureness\u2019 and solving business application requirements","ts":"1476291219.000061"},{"type":"message","user":"U1CTBUNEN","text":"well I've also thought of building a read-only frontend cache (in sql or elastic)","ts":"1476291285.000062"},{"type":"message","user":"U1CTBUNEN","text":"but if you are not reading straight from the chain you are defeating the purpose of using a blockchain : ))","ts":"1476291301.000063"},{"type":"message","user":"U1KFCPFQA","text":"right, some projects have done that, the idea here is give them 80% of what they need out of the box","ts":"1476291317.000064"},{"type":"message","user":"U1CTBUNEN","text":"it's not a defensible solution","ts":"1476291340.000065"},{"type":"message","user":"U1CTBUNEN","text":"well we're using the blockchain in our platform but ... we can't read from it so we read from our SQL database : )))","edited":{"user":"U1CTBUNEN","ts":"1476291366.000000"},"ts":"1476291358.000066"},{"type":"message","user":"U1KFCPFQA","text":"would be interested if you could write up a short summary of your project and how queryable database helps","ts":"1476291418.000068"},{"type":"message","user":"U1KFCPFQA","text":"(doesn\u2019t have to be right here right now)","ts":"1476291429.000069"},{"type":"message","user":"U1CTBUNEN","text":"my solution is very straight forward I want to keep track of a product with a UNIQUE serial number that travels from a manufacturer through a distributor to a final seller","ts":"1476291473.000070"},{"type":"message","user":"U1CTBUNEN","text":"but in real life it's more complicated than that - because there are additional business meta data such as \"business steps\", \"location\", \"datetime\", etc...","ts":"1476291504.000071"},{"type":"message","user":"U1CTBUNEN","text":"which are a good fit for a SQL model","ts":"1476291516.000072"},{"type":"message","user":"U1KFCPFQA","text":"ok, so the transaction history query across time feature will really help you","ts":"1476291538.000073"},{"type":"message","user":"U1CTBUNEN","text":"what exactly is that feature ?","ts":"1476291563.000074"},{"type":"message","user":"U1KFCPFQA","text":"assuming we \u2018index' the actual transactions into the state database (in addition to the latest key values), then you can do queries as mentioned in the charts:","ts":"1476291678.000075"},{"type":"message","subtype":"file_share","text":"<@U1KFCPFQA|dave.enyeart> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/dave.enyeart\/F2NFLQCJY\/pasted_image_at_2016_10_12_01_01_pm.png|Pasted image at 2016-10-12, 1:01 PM>","file":{"id":"F2NFLQCJY","created":1476291689,"timestamp":1476291689,"name":"Pasted image at 2016_10_12 01_01 PM.png","title":"Pasted image at 2016-10-12, 1:01 PM","mimetype":"image\/png","filetype":"png","pretty_type":"PNG","user":"U1KFCPFQA","editable":false,"size":11652,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2NFLQCJY\/pasted_image_at_2016_10_12_01_01_pm.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2NFLQCJY\/download\/pasted_image_at_2016_10_12_01_01_pm.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_64":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2NFLQCJY-7dadae2ad1\/pasted_image_at_2016_10_12_01_01_pm_64.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_80":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2NFLQCJY-7dadae2ad1\/pasted_image_at_2016_10_12_01_01_pm_80.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2NFLQCJY-7dadae2ad1\/pasted_image_at_2016_10_12_01_01_pm_360.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","thumb_360_w":342,"thumb_360_h":163,"thumb_160":"https:\/\/files.slack.com\/files-tmb\/T0J024XGA-F2NFLQCJY-7dadae2ad1\/pasted_image_at_2016_10_12_01_01_pm_160.png?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","image_exif_rotation":1,"original_w":342,"original_h":163,"permalink":"https:\/\/hyperledgerproject.slack.com\/files\/dave.enyeart\/F2NFLQCJY\/pasted_image_at_2016_10_12_01_01_pm.png","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2NFLQCJY-b78ab6f168","channels":["C2GFRAE7P"],"groups":[],"ims":[],"comments_count":0},"user":"U1KFCPFQA","upload":true,"display_as_bot":false,"username":"<@U1KFCPFQA|dave.enyeart>","bot_id":null,"ts":"1476291692.000076"},{"type":"message","user":"U1KFCPFQA","text":"that will return all the transactions for \u201cmarble1\u201d or serial number \u201cxyz\"","ts":"1476291728.000077"},{"type":"message","user":"U1CTBUNEN","text":"just so I understand - this snipper is from the CouchDB connector ?","ts":"1476293434.000078"},{"type":"message","user":"U1CTBUNEN","text":"I'm not very familiar with the marble example","ts":"1476293445.000079"},{"type":"message","user":"U1KFCPFQA","text":"that is a vanilla CouchDB query example, not specific to our plugin, showing that you can query the JSON transaction data","ts":"1476293510.000080"},{"type":"message","user":"U1CTBUNEN","text":"aha","ts":"1476293529.000081"},{"type":"message","user":"U1CTBUNEN","text":"let me check out the sample app you provided with the CouchDB stuff you put up","ts":"1476293600.000082"},{"type":"message","user":"U1CTBUNEN","text":"I'm sort of new to the CouchDB so I need to digest the query model there ...","ts":"1476293624.000083"},{"type":"message","user":"U1KFCPFQA","text":"you can watch the video to see the scenario play out","ts":"1476293639.000084"},{"type":"message","user":"U1KFCPFQA","text":"demo video was posted yesterday","ts":"1476293648.000085"},{"type":"message","user":"U1KFCPFQA","text":"new to CouchDB 2.0 is this sql-like ad hoc query capability: <http:\/\/docs.couchdb.org\/en\/2.0.0\/api\/database\/find.html>","ts":"1476293703.000086"},{"type":"message","user":"U0Z541B3P","text":"just pushed a changeset to <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1401>\nThe primary changes include:\n- Provided a blocking iterator over ledger. The Next() call to iterator blocks for the next block to get available\n- Removed the VerifyChain function from ledger, as this is more of a utility on top of ledger","ts":"1476296335.000087"},{"type":"message","user":"U1CTBUNEN","text":"<@U1KFCPFQA> the CouchDB video won't play for me","ts":"1476299535.000088"},{"type":"message","user":"U1CTBUNEN","text":"I tried downloading but it's close to 500MBs","ts":"1476299541.000089"},{"type":"message","user":"U1CTBUNEN","text":"may be bigger compression for better streaming?","ts":"1476299559.000090"},{"type":"message","user":"U1KFCPFQA","text":"sorry, i thought you could stream directly from the playbacks channel without download","ts":"1476299577.000091"},{"type":"message","user":"U1CTBUNEN","text":"it's stuck at Loading ... for me","ts":"1476299635.000092"},{"type":"message","user":"U1KFCPFQA","text":"ok, for me, if I click the play button on the video in the playbacks channel it starts playing immediately. are you using slack client or web?","ts":"1476299780.000093"},{"type":"message","user":"U1CTBUNEN","text":"web","ts":"1476299790.000094"},{"type":"message","user":"U1KFCPFQA","text":"i\u2019d suggest try slack client, better experience overall","ts":"1476299804.000095"},{"type":"message","user":"U1KFCPFQA","text":"if still no luck, let me know and i can compress further, but the code walkthrough became unreadable when i tried that last time","ts":"1476299886.000096"},{"type":"message","user":"U1CTBUNEN","text":"just tried the desktop app","ts":"1476300011.000097"},{"type":"message","user":"U1CTBUNEN","text":"the video started playing but it's choppy ...","ts":"1476300021.000098"},{"type":"message","user":"U1CTBUNEN","text":"I'm at around 100k\/s connection","ts":"1476300026.000099"},{"type":"message","user":"U1CTBUNEN","text":"hmm","ts":"1476300061.000100"},{"type":"message","user":"U1CTBUNEN","text":"actually going well fullscreen","ts":"1476300066.000101"},{"type":"message","user":"U1KFCPFQA","text":"ok, where in the world is Martin? :slightly_smiling_face:","ts":"1476300080.000102"},{"type":"message","user":"U1CTBUNEN","text":"haha","ts":"1476300085.000103"},{"type":"message","user":"U1CTBUNEN","text":"actually my country is in the top 10 countries in the world for internet speed","ts":"1476300109.000104"},{"type":"message","user":"U1CTBUNEN","text":"however, I'm in this forrest house with shitty wireless access point + wifi in the house","ts":"1476300134.000105"},{"type":"message","user":"U1CTBUNEN","text":"and the country is ....","ts":"1476300145.000106"},{"type":"message","user":"U1KFCPFQA","text":"top secret","ts":"1476300155.000107"},{"type":"message","user":"U1CTBUNEN","text":"Bulgaria!","ts":"1476300172.000108"},{"type":"message","user":"U1KFCPFQA","text":"excellent :slightly_smiling_face:  will try to figure out a better video compression next time","ts":"1476300217.000109"},{"type":"message","user":"U1CTBUNEN","text":"awesome video but do explain one thing for me which I'm missing","ts":"1476300353.000110"},{"type":"message","user":"U1CTBUNEN","text":"where is the state db actually located?","ts":"1476300372.000111"},{"type":"message","user":"U1CTBUNEN","text":"in ethereum there's this contract storage (which is part of the chain)","ts":"1476300405.000112"},{"type":"message","user":"U1KFCPFQA","text":"state db is local (dedicated) to the peer.  if you don\u2019t know, there is already a world state db embedded in peer in 0.5 using RocksDB.  so this is the same general idea, except if we use couchdb it would be a separate process rather than embedded","ts":"1476300485.000113"},{"type":"message","user":"U1CTBUNEN","text":"so in the embedded world state db","ts":"1476300526.000114"},{"type":"message","user":"U1CTBUNEN","text":"if I change a variable then all peers will replicate the change ?","ts":"1476300538.000115"},{"type":"message","user":"U1KFCPFQA","text":"well, the other way around, if the peers reach agreement, they will all make the change independently to their blockchain and state db (rather than db replication)","ts":"1476300672.000116"},{"type":"message","user":"U1CTBUNEN","text":"ok I'm following","ts":"1476300700.000117"},{"type":"message","user":"U1CTBUNEN","text":"and with the couchDB situation","ts":"1476300709.000118"},{"type":"message","user":"U1CTBUNEN","text":"that would be running as a separate thread\/process ?","ts":"1476300722.000119"},{"type":"message","user":"U1KFCPFQA","text":"yes, each peer controls their own data still, its just that couchdb is in a separate process rather than embedded","ts":"1476300761.000120"},{"type":"message","user":"U1CTBUNEN","text":"would that be a problem because someone can hijack the process and write to CouchDB WITHOUT going through the blockchain process ?","ts":"1476300791.000121"},{"type":"message","user":"U1KFCPFQA","text":"we do need to lockdown couchdb access so that it cant happen, for example require the peer cert to login, with no option for external login","ts":"1476300839.000122"},{"type":"message","user":"U1CTBUNEN","text":"I think this needs to be thought out","ts":"1476300873.000123"},{"type":"message","user":"U1CTBUNEN","text":"because I can probably corrupt memory space, etc...","ts":"1476300883.000124"},{"type":"message","user":"U1KFCPFQA","text":"if you or any other security experts are reading, we could use your help thinking that out","ts":"1476300884.000125"},{"type":"message","user":"U1CTBUNEN","text":"without even login in","ts":"1476300887.000126"},{"type":"message","user":"U1CTBUNEN","text":"I'm not a security expert but I've done enough buffer overflow exploits and hacking to know that things could be \"abused\" : ))","ts":"1476300929.000127"},{"type":"message","user":"U1CTBUNEN","text":"if CouchDB is still a KEY\/VALUE DB - why can't we run that embedded as it is right now with RocksDB ?","ts":"1476300968.000128"},{"type":"message","user":"U1KFCPFQA","text":"couldn\u2019t peer memory space be corrupted in similar way?","ts":"1476300993.000129"},{"type":"message","user":"U1CTBUNEN","text":"well sure - on a local level","ts":"1476301016.000130"},{"type":"message","user":"U1CTBUNEN","text":"but the peers should refuse the change","ts":"1476301021.000131"},{"type":"message","user":"U1CTBUNEN","text":"or flag it as illegitimate","ts":"1476301031.000132"},{"type":"message","user":"U1KFCPFQA","text":"couchdb is not embeddable, if somebody could figure out how to embed couchdb, yes that would be ideal","ts":"1476301046.000133"},{"type":"message","user":"U1KFCPFQA","text":"we expect some updates to couchdb would be needed","ts":"1476301078.000134"},{"type":"message","user":"U1CTBUNEN","text":"and here embeddable would mean to be running in memory only ?","ts":"1476301079.000135"},{"type":"message","user":"U1KFCPFQA","text":"running in memory and persisting to disk","ts":"1476301104.000136"},{"type":"message","user":"U1CTBUNEN","text":"SQLlight ?","ts":"1476301139.000137"},{"type":"message","user":"U1CTBUNEN","text":"lol","ts":"1476301140.000138"},{"type":"message","user":"U1KFCPFQA","text":"that requires upfront schema right","ts":"1476301162.000139"},{"type":"message","user":"U1CTBUNEN","text":"true","ts":"1476301177.000140"},{"type":"message","user":"U1CTBUNEN","text":"<https:\/\/unqlite.org>","attachments":[{"title":"UnQLite - An Embeddable NoSQL Database Engine","title_link":"https:\/\/unqlite.org","text":"UnQLite - An Embeddable Database Engine - <http:\/\/unqlite.org\/>","fallback":"UnQLite - An Embeddable NoSQL Database Engine","from_url":"https:\/\/unqlite.org","service_icon":"https:\/\/unqlite.org\/favicon.ico","service_name":"unqlite.org","id":1}],"ts":"1476301209.000141"},{"type":"message","user":"U1KFCPFQA","text":"if there is a better option for embeddable queryable nosql data store i\u2019m open to ideas","ts":"1476301217.000143"},{"type":"message","user":"U1KFCPFQA","text":"ok will look","ts":"1476301233.000144"},{"type":"message","user":"U1CTBUNEN","text":"never used that","ts":"1476301238.000145"},{"type":"message","user":"U1CTBUNEN","text":"just googling for embeddable nosql engine","ts":"1476301244.000146"},{"type":"message","user":"U1KFCPFQA","text":"need to step away for now","ts":"1476301261.000147"},{"type":"message","user":"U1CTBUNEN","text":"awesome thanks!","ts":"1476301267.000148"},{"type":"message","user":"U1KFCPFQA","text":"keep up the great thinking and let us know what you come up with","ts":"1476301294.000149"},{"type":"message","user":"U1CTBUNEN","text":"will do","ts":"1476301314.000150"},{"type":"message","user":"U1CTBUNEN","text":"so <https:\/\/github.com\/symisc\/unqlite> actually doesn't look bad on first sight","edited":{"user":"U1CTBUNEN","ts":"1476301835.000000"},"ts":"1476301829.000151"},{"type":"message","user":"U1CTBUNEN","text":"```Serverless, NoSQL database engine.\nTransactional (ACID) database.\nZero configuration.\nSingle database file, does not use temporary files.\nCross-platform file format.\nUnQLite is a Self-Contained C library without dependency.\nStandard Key\/Value store.\nDocument store (JSON) database via Jx9.\nSupport cursors for linear records traversal.\nPluggable run-time interchangeable storage engine.\nSupport for on-disk as well in-memory databases.\nBuilt with a powerful disk storage engine which support O(1) lookup.\nThread safe and full reentrant.\nSimple, Clean and easy to use API.\nSupport Terabyte sized databases.\nBSD licensed product.\nAmalgamation: All C source code for UnQLite and Jx9 are combined into a single source file.```","ts":"1476301838.000154"},{"type":"message","user":"U1CTBUNEN","text":"home page has more info than github though: <https:\/\/unqlite.org>","ts":"1476301976.000155"},{"type":"message","user":"U1CTBUNEN","text":"it's using Jx9 which is an embeddable scripting engine: <http:\/\/jx9.symisc.net>","edited":{"user":"U1CTBUNEN","ts":"1476302093.000000"},"ts":"1476302088.000156"},{"type":"message","user":"U1CTBUNEN","text":"so that looks like a good fit - I'd be curious to hear other experts in this channel weigh in","ts":"1476302162.000159"},{"user":"U0KM61BCP","text":"<@U0KM61BCP|cbf> has joined the channel","type":"message","subtype":"channel_join","ts":"1476303833.000160"},{"user":"U2NNF5FS6","text":"<@U2NNF5FS6|pospi> has joined the channel","type":"message","subtype":"channel_join","ts":"1476325258.000161"},{"user":"U184J2R7S","text":"<@U184J2R7S|weeds> has joined the channel","type":"message","subtype":"channel_join","ts":"1476393316.000162"},{"type":"message","user":"U1CTBUNEN","text":"<@U1KFCPFQA> any thoughts on the unqlite?","ts":"1476428979.000163"},{"type":"message","user":"U1CTBUNEN","text":"is it too exoteric ?","ts":"1476429006.000164"},{"type":"message","user":"U2MCH9EEB","text":"does the fabric block has size limitation?","ts":"1476438534.000165"},{"type":"message","user":"U1KFCPFQA","text":"<@U1CTBUNEN> , I took a quick look at unqlite, didn\u2019t see much focus on efficient content queries e.g. indexes, which is a key requirement. Let me know if you find otherwise.","ts":"1476448562.000166"},{"type":"message","user":"U1KFCPFQA","text":"We are working on getting CouchDB installed into the vagrant dev environment today (and eventually docker), if any dev env experts would like to help please respond here or contact <@U1KJLGH8D> directly.","ts":"1476449148.000167"},{"user":"U1KJLGH8D","inviter":"U1KFCPFQA","text":"<@U1KJLGH8D|mariwade> has joined the channel","type":"message","subtype":"channel_join","ts":"1476449169.000168"},{"type":"message","user":"U1CTBUNEN","text":"<@U1KFCPFQA> good point - I can't really find good information on that topic","ts":"1476450249.000169"},{"user":"U2PE37K3J","text":"<@U2PE37K3J|n.ohagan> has joined the channel","type":"message","subtype":"channel_join","ts":"1476453392.000170"},{"user":"U2PE37K3J","text":"<@U2PE37K3J|n.ohagan> has left the channel","type":"message","subtype":"channel_leave","ts":"1476458748.000171"},{"type":"message","user":"U24M29R4G","text":"<@U1KFCPFQA> <@U1CTBUNEN> . joining late in the conversation. I just found out about <https:\/\/github.com\/RipcordSoftware\/AvanceDB> which claims to be an in memory version of CouchDB implementation","attachments":[{"service_name":"GitHub","title":"RipcordSoftware\/AvanceDB","title_link":"https:\/\/github.com\/RipcordSoftware\/AvanceDB","text":"AvanceDB - An in-memory database based on the CouchDB REST API and containing the CouchDB Futon and Fauxton web sites","fallback":"GitHub: RipcordSoftware\/AvanceDB","thumb_url":"https:\/\/avatars1.githubusercontent.com\/u\/10237607?v=3&s=400","from_url":"https:\/\/github.com\/RipcordSoftware\/AvanceDB","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1476460172.000172"},{"type":"message","user":"U1KJLGH8D","text":"Instructions to manually install CouchDB into the vagrant dev environment.  <https:\/\/docs.google.com\/document\/d\/1p0f7qLHe7V_LeRZRtMHQrYOXchHbwL4PtKWddET7tig\/edit?usp=sharing>","ts":"1476480893.000174"},{"type":"message","user":"U1CTBUNEN","text":"<@U1KFCPFQA> I managed to test the CouchDB feature - it worked great","ts":"1476607406.000177"},{"type":"message","user":"U1CTBUNEN","text":"I was wondering why you are storing the transaction ID in the json document as well","ts":"1476607440.000178"},{"type":"message","user":"U1CTBUNEN","text":"as a reference for the transaction that created the document?","edited":{"user":"U1CTBUNEN","ts":"1476607502.000000"},"ts":"1476607496.000179"},{"type":"message","user":"U1CTBUNEN","text":"how can this be used in the future ?","ts":"1476607757.000181"},{"type":"message","user":"U1CTBUNEN","text":"could that be audit-related ?","ts":"1476607990.000182"},{"type":"message","user":"U1CTBUNEN","text":"I\u2019m thinking about modifying the example so that we\u2019re not setting an explicit document ID for the CouchDB document, but instead letting CouchDB assign the ID","ts":"1476612757.000183"},{"type":"message","user":"U1CTBUNEN","text":"also that means that documents will be later retrieved via a query with a selector","ts":"1476612798.000184"},{"type":"message","user":"U1CTBUNEN","text":"<@U1KFCPFQA> how easy would it be to do that with your example ?","ts":"1476612823.000185"},{"type":"message","user":"U1CTBUNEN","text":"I guess I need to add a new API POST method (_find) in couchdb_db.go","ts":"1476646664.000186"},{"user":"U2NNLN56V","text":"<@U2NNLN56V|conghonglei> has joined the channel","type":"message","subtype":"channel_join","ts":"1476667120.000187"},{"type":"message","user":"U1KFCPFQA","text":"<@U1CTBUNEN> The document id we set is the \u2018key' in the chaincode, this is so that it can be retrieved later.  Basically we want to maintain the key\/value store concept and PutState\/GetState APIs, it\u2019s just that the \u2018key\u2019 is the CouchDB document id, and the \u2018value\u2019 is the CouchDB json document.","ts":"1476698473.000188"},{"type":"message","user":"U1KFCPFQA","text":"Saving the transaction id in the document is indeed for audit\/traceability purpose.  In fact there is talk of using the txid as the document version instead of an incrementing version number.","ts":"1476698531.000189"},{"type":"message","user":"U1KFCPFQA","text":"And we are investigating if CouchDB can be updated so that instead of setting it\u2019s own revision number, it could just use the passed in transaction id as the document\u2019s revision number.","edited":{"user":"U1KFCPFQA","ts":"1476698623.000000"},"ts":"1476698594.000190"},{"type":"message","user":"U1CTBUNEN","text":"<@U1KFCPFQA> thanks for the update","ts":"1476706472.000192"},{"type":"message","user":"U1CTBUNEN","text":"in my use case the document ID doesn't matter (so I let CouchDB assing one) since I'm mostly quering the documents via selectors","ts":"1476706528.000193"},{"type":"message","user":"U1CTBUNEN","text":"I never have to edit old documents too (which I guess makes my case unusual)","ts":"1476706543.000194"},{"type":"message","user":"U1CTBUNEN","text":"this is the API call that I'm trying to implement: <http:\/\/docs.couchdb.org\/en\/2.0.0\/api\/database\/find.html>","ts":"1476706667.000195"},{"type":"message","user":"U1CTBUNEN","text":"it's a POST request","edited":{"user":"U1CTBUNEN","ts":"1476710494.000000"},"ts":"1476706680.000196"},{"type":"message","user":"U1CTBUNEN","text":"<@U1KFCPFQA> any updates in terms of the roadmap for getting the CouchDB into the master branch?","ts":"1476712537.000198"},{"type":"message","user":"U1CTBUNEN","text":"now when I think about it - it makes more sense in my case to use the TXID as the key for the record","ts":"1476732588.000199"},{"type":"message","user":"U1CTBUNEN","text":"since I will never have to edit old documents","ts":"1476732596.000200"},{"type":"message","user":"U1CTBUNEN","text":"in my case this will also help to audit the path and provenance of product since querying the couchDB for a serial number can also give me a list of all the transaction IDs related to that product and then further obtain the relevant transactions with certificate attributes and others","ts":"1476732858.000201"},{"type":"message","user":"U1CTBUNEN","text":"<@U1KFCPFQA> does that make sense ?","ts":"1476732866.000202"},{"type":"message","user":"U1KFCPFQA","text":"Hi, is there not an external logical id that you can use for the keys?","ts":"1476733073.000203"},{"type":"message","user":"U1KFCPFQA","text":"From within chaincode, you will not have access to the txid (I think)","ts":"1476733093.000204"},{"type":"message","user":"U1KFCPFQA","text":"to answer your previous question, we are trying to get the prototype pushed into fabric this week via FAB-728.  and we are trying to get CouchDB installed into vagrant dev env via FAB-729.","ts":"1476733210.000205"},{"type":"message","user":"U1CTBUNEN","text":"<@U1KFCPFQA> well my queries all involve data within the JSON documents so I will be using selectors most likely","ts":"1476733901.000206"},{"type":"message","user":"U1CTBUNEN","text":"my JSON documents describe transactions related to a product or a set of products","ts":"1476733933.000207"},{"type":"message","user":"U1CTBUNEN","text":"It won\u2019t make sense to use the product SN as the PK because I have many docs\/transactions related to the same product","edited":{"user":"U1CTBUNEN","ts":"1476733966.000000"},"ts":"1476733957.000208"},{"type":"message","user":"U1CTBUNEN","text":"also wouldn\u2019t it make sense to include an existing go library for CouchDB REST wrapper?","ts":"1476735739.000210"},{"type":"message","user":"U1KFCPFQA","text":"I didnt see a go library for CouchDB that had a lot of traction.  Since the REST interactions are fairly trivial we are intending to just use go http.","ts":"1476735858.000211"},{"type":"message","user":"U1CTBUNEN","text":"yeah I\u2019m looking at the existing stuff and it kinda sucks","ts":"1476736158.000212"},{"type":"message","user":"U1CTBUNEN","text":": )","ts":"1476736176.000213"},{"type":"message","user":"U1KFCPFQA","text":"We are working on some updates to the http interaction before we merge the code in","ts":"1476736195.000214"},{"type":"message","user":"U1CTBUNEN","text":"I hope there\u2019s the _find API call somewhere there :wink:","ts":"1476736214.000215"},{"type":"message","user":"U1KFCPFQA","text":"not yet, but we will certainly have an API that calls couchdb _find","ts":"1476736259.000216"},{"type":"message","user":"U1CTBUNEN","text":"cool - awesome stuff","ts":"1476736376.000217"},{"type":"message","user":"U1CTBUNEN","text":"<@U1KFCPFQA> quick question","ts":"1476903242.000218"},{"type":"message","user":"U1CTBUNEN","text":"I started adding the _find API but it looks like it won\u2019t go through the transaction manager interface","ts":"1476903266.000219"},{"type":"message","user":"U1CTBUNEN","text":"since this is a query method ?","ts":"1476903270.000220"},{"type":"message","user":"U1CTBUNEN","text":"can you guide me on the code structure so I know how to implement that method","ts":"1476903289.000221"},{"type":"message","user":"U1CTBUNEN","text":"I\u2019m going through the gowalker docs but the sourcegraph links are giving me 404s: <https:\/\/sourcegraph.com\/github.com\/hyperledger\/fabric\/-\/info\/GoPackage\/github.com\/hyperledger\/fabric\/-\/ChaincodeStub>","ts":"1476907675.000222"},{"type":"message","user":"U1CTBUNEN","text":"QueryChaincode locally calls the specified chaincode `Query` using the same transaction context; that is, chaincode calling chaincode doesn't create a new transaction message.","ts":"1476907950.000223"},{"type":"message","user":"U1CTBUNEN","text":"ok that answers my question \u2026 for those who may be interested in this","ts":"1476907964.000224"},{"user":"U1L1D0SP4","text":"<@U1L1D0SP4|celder> has joined the channel","type":"message","subtype":"channel_join","ts":"1477048762.000225"},{"user":"U2BGFAHC7","text":"<@U2BGFAHC7|donovanhide> has joined the channel","type":"message","subtype":"channel_join","ts":"1477076659.000226"},{"type":"message","user":"U1KFCPFQA","text":"A few updates at the end of Sprint3:","ts":"1477328183.000227"},{"type":"message","user":"U1KFCPFQA","text":"<https:\/\/jira.hyperledger.org\/browse\/FAB-729>","ts":"1477328204.000228"},{"type":"message","user":"U1KFCPFQA","text":"Initial implementation for CouchDB docker can be found in this feature\/convergence branch commit:\n<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1865\/>\n\"couchdb start\" will start the couchdb docker image and couchdb process, and will also download the couchdb docker if this is the first time using it.\nThis commit will be ported to master branch and then will be merged.","ts":"1477328210.000229"},{"type":"message","user":"U1KFCPFQA","text":"\u2026and...","ts":"1477328215.000230"},{"type":"message","user":"U1KFCPFQA","text":"<https:\/\/jira.hyperledger.org\/browse\/FAB-728>","ts":"1477328230.000231"},{"type":"message","user":"U1KFCPFQA","text":"Initial implementation for CouchDB can be found in these feature\/convergence branch commits (that build on each other):\n    <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1669\/>\n    <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1891\/>\nThese commits will be ported to master branch and then will be merged.","ts":"1477328244.000232"},{"type":"message","user":"U1KFCPFQA","text":"See Jira for Sprint4 plan, in a nutshell, look into replacing RocksDB with LevelDB or something similar as the default embedded state database, due to new licensing issues with RocksDB.  In parallel, try to get the CouchDB prototype working in an end-to-end v1 transaction flow, as an option for queryable state database (experimental in v1)","ts":"1477328348.000233"},{"type":"message","user":"U1CTBUNEN","text":"<@U1KFCPFQA> thanks for the update","ts":"1477329520.000234"},{"type":"message","user":"U1CTBUNEN","text":"it\u2019s really awesome that something like CouchDB is coming along","ts":"1477329534.000235"},{"type":"message","user":"U1CTBUNEN","text":"I was curious about adding a new query method \u201c\/db\/_find\" to your module","edited":{"user":"U1CTBUNEN","ts":"1477329650.000000"},"ts":"1477329602.000236"},{"type":"message","user":"U1CTBUNEN","text":"since this is a query transaction, what should the code flow be like?","ts":"1477329617.000237"},{"type":"message","user":"U1CTBUNEN","text":"Is there a similar query example that I can follow?","ts":"1477329633.000238"},{"type":"message","user":"U1KFCPFQA","text":"<@U1CTBUNEN> there are no query APIs implemented yet\u2026 but there is a placeholder in couchdb_query_executor.go RWLockQueryExecutor.ExecuteQuery(query string).  Actually it needs to be changed to CouchDBQueryExecutor.ExecuteQuery(query string).  The _find json payload would be the string passed in.  You can go ahead and give it a shot.  I expect it would call into a query function in couchdb.go (peer of SaveDoc and ReadDoc).","ts":"1477331144.000240"},{"type":"message","user":"U1CTBUNEN","text":"<@U1KFCPFQA> thank you so much !!!","ts":"1477337644.000241"},{"type":"message","user":"U1CTBUNEN","text":"I will give it a try","ts":"1477337654.000242"},{"user":"U0Q6BA1EU","text":"<@U0Q6BA1EU|bobbiejc> has joined the channel","type":"message","subtype":"channel_join","ts":"1477408318.000243"},{"type":"message","user":"U1KFCPFQA","text":"End of Sprint 3 couchdb demo is posted here: <https:\/\/www.youtube.com\/watch?v=ZgKAahU3FcM>","attachments":[{"service_name":"YouTube","service_url":"https:\/\/www.youtube.com\/","title":"Ledger Sprint3","title_link":"https:\/\/www.youtube.com\/watch?v=ZgKAahU3FcM","author_name":"Mark Parzygnat","author_link":"https:\/\/www.youtube.com\/channel\/UCCFdgCWH_1vCndMPVqQlwZw","thumb_url":"https:\/\/i.ytimg.com\/vi\/ZgKAahU3FcM\/hqdefault.jpg","thumb_width":480,"thumb_height":360,"fallback":"YouTube Video: Ledger Sprint3","video_html":"<iframe width=\"400\" height=\"300\" src=\"https:\/\/www.youtube.com\/embed\/ZgKAahU3FcM?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allowfullscreen><\/iframe>","video_html_width":400,"video_html_height":300,"from_url":"https:\/\/www.youtube.com\/watch?v=ZgKAahU3FcM","service_icon":"https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png","id":1}],"ts":"1477415417.000244","reactions":[{"name":"+1","users":["U0Q6BA1EU"],"count":1}]},{"user":"U2U1GAVL3","text":"<@U2U1GAVL3|senthil> has joined the channel","type":"message","subtype":"channel_join","ts":"1477421375.000246"},{"user":"U2231CUH3","text":"<@U2231CUH3|inatatsu> has joined the channel","type":"message","subtype":"channel_join","ts":"1477445129.000247"},{"type":"message","user":"U1KFCPFQA","text":"We are recommending to use LevelDB as the RocksDB replacement.  Of the key\/value databases analyzed, LevelDB is most aligned with RocksDB and our specific use cases.\n\nNow, there are still two options with LevelDB:\n\n1) We can use LevelDB (<https:\/\/github.com\/google\/leveldb> C++ BSD-3-Clause license) with a LevelDB go wrapper (<https:\/\/github.com\/jmhodges\/levigo> MIT license)\nor\n2) We can use a native golang port of LevelDB called goleveldb (<https:\/\/github.com\/syndtr\/goleveldb> BSD-2-Clause license).\n\n#1 has broader use in the industry and is more aligned with our use of RocksDB, and therefore seems less risky.\nBut Ethereum uses #2 in their golang implementation (<https:\/\/github.com\/ethereum\/go-ethereum\/blob\/master\/ethdb\/database.go>) so there is some precedent, and is go gettable\/vendorable which simplifies things for us.\n\nThoughts?","attachments":[{"service_name":"GitHub","title":"google\/leveldb","title_link":"https:\/\/github.com\/google\/leveldb","text":"leveldb - LevelDB is a fast key-value storage library written at Google that provides an ordered mapping from string keys to string values.","fallback":"GitHub: google\/leveldb","thumb_url":"https:\/\/avatars2.githubusercontent.com\/u\/1342004?v=3&s=400","from_url":"https:\/\/github.com\/google\/leveldb","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1},{"service_name":"GitHub","title":"jmhodges\/levigo","title_link":"https:\/\/github.com\/jmhodges\/levigo","text":"levigo is a Go wrapper for LevelDB","fallback":"GitHub: jmhodges\/levigo","thumb_url":"https:\/\/avatars1.githubusercontent.com\/u\/598?v=3&s=400","from_url":"https:\/\/github.com\/jmhodges\/levigo","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":2},{"service_name":"GitHub","title":"syndtr\/goleveldb","title_link":"https:\/\/github.com\/syndtr\/goleveldb","text":"goleveldb - LevelDB key\/value database in Go.","fallback":"GitHub: syndtr\/goleveldb","thumb_url":"https:\/\/avatars0.githubusercontent.com\/u\/728237?v=3&s=400","from_url":"https:\/\/github.com\/syndtr\/goleveldb","thumb_width":420,"thumb_height":420,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":3},{"service_name":"GitHub","title":"ethereum\/go-ethereum","title_link":"https:\/\/github.com\/ethereum\/go-ethereum\/blob\/master\/ethdb\/database.go","text":"go-ethereum - Official golang implementation of the Ethereum protocol","fallback":"GitHub: ethereum\/go-ethereum","thumb_url":"https:\/\/avatars1.githubusercontent.com\/u\/6250754?v=3&s=400","from_url":"https:\/\/github.com\/ethereum\/go-ethereum\/blob\/master\/ethdb\/database.go","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":4}],"ts":"1477490532.000248"},{"type":"message","user":"U24M29R4G","text":"<@U1KFCPFQA> thanks for the heads up. you stated that rocksdb has licensing issues. what kind of licensing issue is there with rocksdb?","ts":"1477491302.000250"},{"type":"message","subtype":"file_share","text":"<@U24M29R4G|nikileshsa> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/nikileshsa\/F2UEPVCF2\/panic_while_running_marble_example__should_we_create_this_payment_app_accounts_manually_in_couchdb_.sh|Panic while running marble example: Should we create this Payment App accounts manually in couchdb?>","file":{"id":"F2UEPVCF2","created":1477491598,"timestamp":1477491598,"name":"Panic_while_running_marble_example__Should_we_create_this_Payment_App_accounts_manually_in_couchdb_.sh","title":"Panic while running marble example: Should we create this Payment App accounts manually in couchdb?","mimetype":"text\/plain","filetype":"shell","pretty_type":"Shell","user":"U24M29R4G","editable":true,"size":7402,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2UEPVCF2\/panic_while_running_marble_example__should_we_create_this_payment_app_accounts_manually_in_couchdb_.sh?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2UEPVCF2\/download\/panic_while_running_marble_example__should_we_create_this_payment_app_accounts_manually_in_couchdb_.sh?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/nikileshsa\/F2UEPVCF2\/panic_while_running_marble_example__should_we_create_this_payment_app_accounts_manually_in_couchdb_.sh","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2UEPVCF2-2aaf996d22","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/nikileshsa\/F2UEPVCF2\/panic_while_running_marble_example__should_we_create_this_payment_app_accounts_manually_in_couchdb_.sh\/edit","preview":"\r\n\r\nnikileshsa@frozenhp:~\/go\/src\/github.com\/hyperledger\/fabric\/core\/ledgernext\/kvledger\/example\/main$ go run example.go \r\n2016\/10\/26 07:09:59 CreateDirIfMissing [\/tmp\/test\/ledgernext\/kvledger\/example\/blocks\/blocks\/]\r\n2016\/10\/26 07:09:59 CreateDirIfMissing [\/tmp\/test\/ledgernext\/kvledger\/example\/blocks\/db\/]\r","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>&#8203;<\/pre><\/div>\n<div><pre>&#8203;<\/pre><\/div>\n<div><pre>nikileshsa@frozenhp:~\/go\/src\/github.com\/hyperledger\/fabric\/core\/ledgernext\/kvledger\/example\/main<span class=\"cm-def\">$ go<\/span> run example.go <\/pre><\/div>\n<div><pre><span class=\"cm-number\">2016<\/span>\/10\/26 <span class=\"cm-number\">07<\/span>:09:59 CreateDirIfMissing [\/tmp\/test\/ledgernext\/kvledger\/example\/blocks\/blocks\/]<\/pre><\/div>\n<div><pre><span class=\"cm-number\">2016<\/span>\/10\/26 <span class=\"cm-number\">07<\/span>:09:59 CreateDirIfMissing [\/tmp\/test\/ledgernext\/kvledger\/example\/blocks\/db\/]<\/pre><\/div>\n<\/div>\n<\/div>\n","lines":82,"lines_more":77,"preview_is_truncated":true,"channels":["C2GFRAE7P"],"groups":[],"ims":[],"comments_count":0},"user":"U24M29R4G","upload":true,"display_as_bot":false,"username":"<@U24M29R4G|nikileshsa>","bot_id":null,"ts":"1477491598.000251"},{"type":"message","user":"U1KFCPFQA","text":"<@U24M29R4G> RocksDB has a patent infringement license in it from Facebook. The legal team is therefore not comfortable with using it.  For details read: <https:\/\/github.com\/facebook\/rocksdb\/blob\/master\/PATENTS>","attachments":[{"service_name":"GitHub","title":"facebook\/rocksdb","title_link":"https:\/\/github.com\/facebook\/rocksdb\/blob\/master\/PATENTS","text":"rocksdb - A library that provides an embeddable, persistent key-value store for fast storage.","fallback":"GitHub: facebook\/rocksdb","thumb_url":"https:\/\/avatars2.githubusercontent.com\/u\/69631?v=3&s=400","from_url":"https:\/\/github.com\/facebook\/rocksdb\/blob\/master\/PATENTS","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1477491801.000252"},{"type":"message","user":"U24M29R4G","text":"thanks dave! for the pointer on this licensing.","ts":"1477491887.000254"},{"type":"message","user":"U1KFCPFQA","text":"<@U24M29R4G> CouchDB requires that chaincode variables be JSON format. We will also look into arbitrary blob support, but for those use cases you are probably better off sticking with RocksDB (or ultimate LevelDB replacement), since the blob won\u2019t be queryable in CouchDB and there is therefore no benefit.","ts":"1477492301.000255"},{"type":"message","user":"U24M29R4G","text":"yeah.. makes sense..","ts":"1477492585.000256"},{"type":"message","user":"U2BGFAHC7","text":"<@U1KFCPFQA> Will you create a DB interface so that others can play with trying other database? Currently some of the gorocksdb exported types are used further up the package hierarchy.","ts":"1477492797.000257"},{"type":"message","user":"U1KFCPFQA","text":"yes, it is intended to refactor ledger to make things more pluggable\u2026couple weeks away, other dependencies to work on first","ts":"1477492847.000258"},{"type":"message","user":"U2BGFAHC7","text":"Cool :thumbsup:","ts":"1477492858.000259"},{"type":"message","user":"U24M29R4G","text":"I am just trying to run the marble_example.go in ```\/fabric\/core\/ledgernext\/kvledger``` as part of the code in review  and getting the \"Document update conflict error\". <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1891\/>. I know I have seen this error before. Not sure if I am missing something. Is this a known issue at this point?","ts":"1477492947.000260"},{"type":"message","user":"U1KFCPFQA","text":"you probably need to delete the marble1 document from your couchdb\u2026 cleanup code is not in the example yet.","ts":"1477492988.000261"},{"type":"message","user":"U24M29R4G","text":"sure. thanks...","ts":"1477493086.000262"},{"type":"message","user":"U24M29R4G","text":"Also \/fabric\/core\/ledgernext\/kvledger\/example\/main\/example.go should also work right? When I try to run it, its throwing a panic <https:\/\/hyperledgerproject.slack.com\/files\/nikileshsa\/F2UEPVCF2\/panic_while_running_marble_example__should_we_create_this_payment_app_accounts_manually_in_couchdb_.sh>","ts":"1477493414.000263"},{"type":"message","subtype":"file_mention","text":"<@U24M29R4G|nikileshsa> mentioned a file: <https:\/\/hyperledgerproject.slack.com\/files\/nikileshsa\/F2UEPVCF2\/panic_while_running_marble_example__should_we_create_this_payment_app_accounts_manually_in_couchdb_.sh|Panic_while_running_marble_example__Should_we_create_this_Payment_App_accounts_manually_in_couchdb_.sh>.","file":{"id":"F2UEPVCF2","created":1477491598,"timestamp":1477491598,"name":"Panic_while_running_marble_example__Should_we_create_this_Payment_App_accounts_manually_in_couchdb_.sh","title":"Panic while running marble example: Should we create this Payment App accounts manually in couchdb?","mimetype":"text\/plain","filetype":"shell","pretty_type":"Shell","user":"U24M29R4G","editable":true,"size":7402,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2UEPVCF2\/panic_while_running_marble_example__should_we_create_this_payment_app_accounts_manually_in_couchdb_.sh?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2UEPVCF2\/download\/panic_while_running_marble_example__should_we_create_this_payment_app_accounts_manually_in_couchdb_.sh?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/nikileshsa\/F2UEPVCF2\/panic_while_running_marble_example__should_we_create_this_payment_app_accounts_manually_in_couchdb_.sh","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2UEPVCF2-2aaf996d22","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/nikileshsa\/F2UEPVCF2\/panic_while_running_marble_example__should_we_create_this_payment_app_accounts_manually_in_couchdb_.sh\/edit","preview":"\r\n\r\nnikileshsa@frozenhp:~\/go\/src\/github.com\/hyperledger\/fabric\/core\/ledgernext\/kvledger\/example\/main$ go run example.go \r\n2016\/10\/26 07:09:59 CreateDirIfMissing [\/tmp\/test\/ledgernext\/kvledger\/example\/blocks\/blocks\/]\r\n2016\/10\/26 07:09:59 CreateDirIfMissing [\/tmp\/test\/ledgernext\/kvledger\/example\/blocks\/db\/]\r","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>&#8203;<\/pre><\/div>\n<div><pre>&#8203;<\/pre><\/div>\n<div><pre>nikileshsa@frozenhp:~\/go\/src\/github.com\/hyperledger\/fabric\/core\/ledgernext\/kvledger\/example\/main<span class=\"cm-def\">$ go<\/span> run example.go <\/pre><\/div>\n<div><pre><span class=\"cm-number\">2016<\/span>\/10\/26 <span class=\"cm-number\">07<\/span>:09:59 CreateDirIfMissing [\/tmp\/test\/ledgernext\/kvledger\/example\/blocks\/blocks\/]<\/pre><\/div>\n<div><pre><span class=\"cm-number\">2016<\/span>\/10\/26 <span class=\"cm-number\">07<\/span>:09:59 CreateDirIfMissing [\/tmp\/test\/ledgernext\/kvledger\/example\/blocks\/db\/]<\/pre><\/div>\n<\/div>\n<\/div>\n","lines":82,"lines_more":77,"preview_is_truncated":true,"channels":["C2GFRAE7P"],"groups":[],"ims":[],"comments_count":0},"user":"U24M29R4G","ts":"1477493414.000264"},{"type":"message","user":"U24M29R4G","text":"Is this a known issue? if not wil try to debug","ts":"1477493513.000265"},{"type":"message","user":"U1KFCPFQA","text":"you are running the non-json example.  you need to run the json marble_example","ts":"1477493825.000266"},{"type":"message","user":"U24M29R4G","text":"<@U1KFCPFQA>. oh got it.. just now..thanks..","ts":"1477494933.000267"},{"type":"message","user":"U1CTBUNEN","text":"the couchDB examples are running fine for me","ts":"1477495658.000268"},{"type":"message","user":"U1CTBUNEN","text":"however I\u2019m struggling to implement the \/db\/_find API method","ts":"1477495669.000269"},{"type":"message","user":"U1CTBUNEN","text":"which is a POST method","ts":"1477495672.000270"},{"type":"message","user":"U1CTBUNEN","text":"and I keep getting: error={\"error\":\"bad_request\",\"reason\":\"Referer header required.\"}","ts":"1477495688.000271"},{"type":"message","user":"U1CTBUNEN","text":"I tried doing a POST request on the command line with curl but I get the same result","ts":"1477495704.000272"},{"type":"message","user":"U1CTBUNEN","text":"does anyone have any experience with this CouchDB API method ?","ts":"1477495717.000273"},{"type":"message","user":"U1CTBUNEN","text":"(<http:\/\/docs.couchdb.org\/en\/2.0.0\/api\/database\/find.html>)","ts":"1477495826.000274"},{"type":"message","user":"U1CTBUNEN","text":"I tried setting the referer field in the header but still no luck","ts":"1477495856.000275"},{"user":"U0KN2SSKE","text":"<@U0KN2SSKE|binhn> has joined the channel","type":"message","subtype":"channel_join","ts":"1477497073.000276"},{"type":"message","user":"U1CTBUNEN","text":"aaaa","ts":"1477497093.000277"},{"type":"message","user":"U1CTBUNEN","text":"ignore me","ts":"1477497095.000278"},{"type":"message","user":"U1CTBUNEN","text":"I\u2019ve been running CouchDB 1.x branch","ts":"1477497104.000279"},{"type":"message","user":"U1CTBUNEN","text":": ((","ts":"1477497105.000280"},{"type":"message","user":"U1CTBUNEN","text":"<@U1KFCPFQA> I managed to implement the \/db\/_find API","ts":"1477508508.000281"},{"type":"message","user":"U1CTBUNEN","text":"YAY!","ts":"1477508514.000282"},{"type":"message","user":"U1CTBUNEN","text":"now I need to figure out how to run real transactions as opposed to the tx simulator","ts":"1477508621.000283"},{"type":"message","user":"U1CTBUNEN","text":"I want to use the TX_ID as the JSON DOC ID","ts":"1477508680.000284"},{"type":"message","user":"U1KFCPFQA","text":"Note that couchdb prototype has been refactored for \u2018master\u2019 branch and for the ledgernext\u2014&gt;ledger name change.  The latest changeset is available and I\u2019m now hopeful it can be merged immediately: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/1931>","ts":"1477516358.000285"},{"type":"message","user":"U1KFCPFQA","text":"<@U1CTBUNEN> Yes, the next task is get end-to-end transactions flowing with couchdb utilized.  Agreed that we\u2019d like txid saved in the JSON doc for traceability\/queryability (but not as the json doc id per se\u2026 that needs to be the stable key spanning transactions)","ts":"1477516657.000286"},{"user":"U0NCW1DPX","text":"<@U0NCW1DPX|gengjh> has joined the channel","type":"message","subtype":"channel_join","ts":"1477554209.000287"},{"type":"message","user":"U24M29R4G","text":"Hi team. One of the subtasks in this story <https:\/\/jira.hyperledger.org\/browse\/FAB-786> is to work on \"Handle _id, _rev, txid, version in CouchDB plugin\". I understand that SaveDoc function is inserting a txid as the key. I am not sure how the revision number that is being returned in the response is being used by Fabric.\"","ts":"1477584683.000290"},{"type":"message","user":"U2MCH9EEB","text":"learnt that the protobuf message marshalling\/unmarshalling is not deterministic","ts":"1477639922.000291"},{"type":"message","user":"U2MCH9EEB","text":"then how can we make the message bytes unmarshalled  from the ledger db is the bytes we signed?","ts":"1477640217.000292"},{"type":"message","user":"U2MCH9EEB","text":"* make sure*","ts":"1477640226.000293"},{"type":"message","user":"U1KFCPFQA","text":"<@U2MCH9EEB> Please post to fabric-peer-dev, somebody more familiar with the end to end flow can likely answer there","ts":"1477655913.000294"},{"type":"message","user":"U1CTBUNEN","text":"<@U1KFCPFQA> should I wait until current sprint is over to add new CouchDB APIs","ts":"1477683359.000295"},{"type":"message","user":"U1CTBUNEN","text":"I feel like the code base will be in a better position to be extended","ts":"1477683445.000296"},{"type":"message","user":"U1KFCPFQA","text":"the initial couchdb merge went in yesterday, and the ledgernext\u2014&gt;ledger naming change the day before that.  so now would actually be a good time.  rebase on latest and push to gerrit, then we will review.","ts":"1477683558.000297"},{"type":"message","user":"U1CTBUNEN","text":"that\u2019s all on master branch now ?","ts":"1477683720.000298"},{"type":"message","user":"U1KFCPFQA","text":"correct","ts":"1477683729.000299"},{"type":"message","user":"U1CTBUNEN","text":"cool I will check it out","ts":"1477683769.000300"},{"type":"message","user":"U1CTBUNEN","text":"also one more question","ts":"1477683777.000301"},{"type":"message","user":"U1CTBUNEN","text":"in your proposal paper, you described transaction document proposal","ts":"1477683828.000302"},{"type":"message","user":"U1CTBUNEN","text":"(history of transactions in CouchDB)","ts":"1477683857.000303"},{"type":"message","user":"U1CTBUNEN","text":"\"transaction documents can be saved for reporting (future)\"","ts":"1477683891.000304"},{"type":"message","user":"U1KFCPFQA","text":"right, we may actually put those in a separate CouchDB","ts":"1477683913.000305"},{"type":"message","user":"U1KFCPFQA","text":"optional config","ts":"1477683927.000306"},{"type":"message","user":"U1CTBUNEN","text":"is this something that you generally like and we may see in the future","ts":"1477683934.000307"},{"type":"message","user":"U1CTBUNEN","text":"or it\u2019s still being discussed","ts":"1477683945.000308"},{"type":"message","user":"U1KFCPFQA","text":"i really like :slightly_smiling_face:  will likely be done a few sprints from now.  got to get through the basics first, and there is still some churn in the tran definition\u2026 would like that to get sorted out before we write it","ts":"1477684020.000309"},{"type":"message","user":"U1KFCPFQA","text":"you could do that piece if you like","ts":"1477684049.000310"},{"type":"message","user":"U1CTBUNEN","text":"I\u2019m not sure my coding skills are up to that level but will definitely start hacking CouchDB now : ))","ts":"1477684081.000311"},{"type":"message","user":"U1CTBUNEN","text":"I\u2019ve been looking for ways to pass the learning curve with the existing code base","ts":"1477684099.000312"},{"type":"message","user":"U1KFCPFQA","text":"ok, play around, we could use any feedback and\/or help","ts":"1477684102.000313"},{"type":"message","user":"U1CTBUNEN","text":"I\u2019ve been using <https:\/\/sourcegraph.com\/>","edited":{"user":"U1CTBUNEN","ts":"1477684119.000000"},"ts":"1477684114.000314"},{"type":"message","user":"U1CTBUNEN","text":"if you have any suggestions on best practices to digest current code base and figure out flows","ts":"1477684136.000317"},{"type":"message","user":"U1KFCPFQA","text":"nice, may help us as well","ts":"1477684139.000318"},{"type":"message","user":"U1KFCPFQA","text":"you\u2019ve run the marbles_example into couchdb right","ts":"1477684163.000319"},{"type":"message","user":"U1CTBUNEN","text":"yeah I even implemented the \/db\/_find API","ts":"1477684181.000320"},{"type":"message","user":"U1KFCPFQA","text":"right","ts":"1477684184.000321"},{"type":"message","user":"U1CTBUNEN","text":"but I\u2019m still not clear on the end-to-end flow : ))","ts":"1477684193.000322"},{"type":"message","user":"U1KFCPFQA","text":"looking at the debug statements when running that will help you","ts":"1477684199.000323"},{"type":"message","user":"U1CTBUNEN","text":"yeah that\u2019s been super helpful btw","ts":"1477684212.000324"},{"type":"message","user":"U1KFCPFQA","text":"next up then would be the true end-to-end:","ts":"1477684244.000325"},{"type":"message","user":"U1KFCPFQA","text":"For end-to-end v1 trial with CLI (and RocksDB), see the attachment in Binh's forum email:\n<https:\/\/lists.hyperledger.org\/pipermail\/hyperledger-fabric\/2016-October\/000421.html>\n\nThe attachment at the bottom is:\n<http:\/\/lists.hyperledger.org\/pipermail\/hyperledger-fabric\/attachments\/20161022\/d3860afb\/attachment.obj>","ts":"1477684248.000326"},{"type":"message","user":"U1KFCPFQA","text":"i\u2019m trying to work through that myself, on top of couchdb is the next hurdle","edited":{"user":"U1KFCPFQA","ts":"1477684288.000000"},"ts":"1477684278.000327"},{"type":"message","user":"U1CTBUNEN","text":"thanks","ts":"1477684440.000329"},{"type":"message","user":"U1CTBUNEN","text":"my dev environment is straight linux without docker or vagrant","ts":"1477684457.000330"},{"type":"message","user":"U1CTBUNEN","text":"I find those as unnecessary complications at this stage (when everything is in flux)","ts":"1477684485.000331"},{"type":"message","user":"U1CTBUNEN","text":"but I understand it may be helpful to get first-timers up and running","ts":"1477684540.000332"},{"type":"message","user":"U1KFCPFQA","text":"End of week status for v1\u2026 initial couchdb code merged into master; \u2018ledgernext' has been renamed to \u2018ledger\u2019 and merged; raw ledger impl for ordering service is complete and merged.","ts":"1477687513.000333"},{"type":"message","user":"U1KFCPFQA","text":"Next up - testing out end-to-end scenarios with v1 ledger, open defects as needed, getting end-to-end working with couchdb, and replacing default db RocksDB with goleveldb.  See the Ledger board for more details: <https:\/\/jira.hyperledger.org\/secure\/RapidBoard.jspa?rapidView=59&amp;view=planning>","ts":"1477687613.000334"},{"type":"message","subtype":"file_share","text":"<@U24M29R4G|nikileshsa> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/nikileshsa\/F2VPYBG5D\/end_to_end_v1_trial_with_couchdb__-_getting_error_building_images_error.sh|End to end V1 trial with couchdb. - getting error building images error>","file":{"id":"F2VPYBG5D","created":1477689792,"timestamp":1477689792,"name":"End_to_end_V1_trial_with_couchdb__-_getting_error_building_images_error.sh","title":"End to end V1 trial with couchdb. - getting error building images error","mimetype":"text\/plain","filetype":"shell","pretty_type":"Shell","user":"U24M29R4G","editable":true,"size":16718,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2VPYBG5D\/end_to_end_v1_trial_with_couchdb__-_getting_error_building_images_error.sh?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2VPYBG5D\/download\/end_to_end_v1_trial_with_couchdb__-_getting_error_building_images_error.sh?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/nikileshsa\/F2VPYBG5D\/end_to_end_v1_trial_with_couchdb__-_getting_error_building_images_error.sh","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2VPYBG5D-981901fb72","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/nikileshsa\/F2VPYBG5D\/end_to_end_v1_trial_with_couchdb__-_getting_error_building_images_error.sh\/edit","preview":"nikileshsa@frozenhp:~\/go\/src\/github.com\/hyperledger\/fabric$ CORE_PEER_COMMITTER_LEDGER_ORDERER=0.0.0.0:5151 peer node start\r\n14:16:47.341 [nodeCmd] serve -> INFO 001 Security enabled status: false\r\n14:16:47.341 [nodeCmd] serve -> INFO 002 Privacy enabled status: false\r\n14:16:47.341 [eventhub_producer] start -> INFO 003 event processor started\r\n14:16:47.342 [db] open -> INFO 004 Setting rocksdb maxLogFileSize to 10485760\r","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>nikileshsa@frozenhp:~\/go\/src\/github.com\/hyperledger\/fabric<span class=\"cm-def\">$ CORE_PEER_COMMITTER_LEDGER_ORDERER<\/span><span class=\"cm-operator\">=<\/span><span class=\"cm-number\">0<\/span>.0.0.0:5151 peer <span class=\"cm-builtin\">node<\/span> <span class=\"cm-builtin\">start<\/span><\/pre><\/div>\n<div><pre><span class=\"cm-number\">14<\/span>:16:47.341 [nodeCmd] serve <span class=\"cm-attribute\">-<\/span>&gt; INFO <span class=\"cm-number\">001<\/span> Security enabled status: <span class=\"cm-atom\">false<\/span><\/pre><\/div>\n<div><pre><span class=\"cm-number\">14<\/span>:16:47.341 [nodeCmd] serve <span class=\"cm-attribute\">-<\/span>&gt; INFO <span class=\"cm-number\">002<\/span> Privacy enabled status: <span class=\"cm-atom\">false<\/span><\/pre><\/div>\n<div><pre><span class=\"cm-number\">14<\/span>:16:47.341 [eventhub_producer] <span class=\"cm-builtin\">start<\/span> <span class=\"cm-attribute\">-<\/span>&gt; INFO <span class=\"cm-number\">003<\/span> event processor started<\/pre><\/div>\n<div><pre><span class=\"cm-number\">14<\/span>:16:47.342 [db] open <span class=\"cm-attribute\">-<\/span>&gt; INFO <span class=\"cm-number\">004<\/span> Setting rocksdb maxLogFileSize to <span class=\"cm-number\">10485760<\/span><\/pre><\/div>\n<\/div>\n<\/div>\n","lines":165,"lines_more":160,"preview_is_truncated":true,"channels":["C2GFRAE7P"],"groups":[],"ims":[],"comments_count":0},"user":"U24M29R4G","upload":true,"display_as_bot":false,"username":"<@U24M29R4G|nikileshsa>","bot_id":null,"ts":"1477689792.000335"},{"type":"message","user":"U24M29R4G","text":"I tried to follow the steps in the link shared by dave. <https:\/\/lists.hyperledger.org\/pipermail\/hyperledger-fabric\/2016-October\/000421.html> . I am able to start the peer and orderer processes. When I try to deploy the transaction, I got this error. Is anyone else getting this?","ts":"1477689949.000336"},{"type":"message","user":"U24M29R4G","text":"```[dockercontroller] deployImage -&gt; ERRO 09b Error building images: Tag x86_64-0.7.0-snapshot-4cd4aaf not found in repository <http:\/\/docker.io\/hyperledger\/fabric-ccenv|docker.io\/hyperledger\/fabric-ccenv>```","ts":"1477690027.000337"},{"type":"message","user":"U24M29R4G","text":"I am running it outside of vagrant..","ts":"1477690046.000338"},{"type":"message","user":"U24M29R4G","text":"^^^ was able to resolve it by rebuilding the peer again","ts":"1477692985.000339"},{"type":"message","user":"U24M29R4G","text":"now the deploy is successful. When I try to invoke the transaction, I am getting a ```CouchDB error with :Invalid_json error```","ts":"1477693072.000340"},{"type":"message","subtype":"file_share","text":"<@U24M29R4G|nikileshsa> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/nikileshsa\/F2VNP68MR\/panic_while_trying_to_commit.sh|panic while trying to commit>","file":{"id":"F2VNP68MR","created":1477693130,"timestamp":1477693130,"name":"panic_while_trying_to_commit.sh","title":"panic while trying to commit","mimetype":"text\/plain","filetype":"shell","pretty_type":"Shell","user":"U24M29R4G","editable":true,"size":2175,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2VNP68MR\/panic_while_trying_to_commit.sh?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F2VNP68MR\/download\/panic_while_trying_to_commit.sh?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/nikileshsa\/F2VNP68MR\/panic_while_trying_to_commit.sh","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F2VNP68MR-488ea70b6c","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/nikileshsa\/F2VNP68MR\/panic_while_trying_to_commit.sh\/edit","preview":"15:07:12.459 [chaincode] Launch -> DEBU 0c6 sending init completed\r\n15:07:12.459 [chaincode] Launch -> DEBU 0c7 LaunchChaincode complete\r\n15:07:12.490 [chaincode] processStream -> ERRO 0c8 Error handling chaincode support stream: stream error: code = 1 desc = \"context canceled\"\r\n15:07:12.490 [chaincode] deregisterHandler -> DEBU 0c9 Deregister handler: add1dc7c2b0b0d3a37b5ee55b253cffe13e70c5fb61f1146b101ebd5d616aaf4717c0c881c43a29845fc1e43597a8ab5b01043366f47783cbde5b801f00e85db\r\n15:07:12.490 [chaincode] deregisterHandler -> DEBU 0ca Deregistered handler with key: add1dc7c2b0b0d3a37b5ee55b253cffe13e70c5fb61f1146b101ebd5d616aaf4717c0c881c43a29845fc1e43597a8ab5b01043366f47783cbde5b801f00e85db\r","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre><span class=\"cm-number\">15<\/span>:07:12.459 [chaincode] Launch <span class=\"cm-attribute\">-<\/span>&gt; DEBU 0c6 sending init completed<\/pre><\/div>\n<div><pre><span class=\"cm-number\">15<\/span>:07:12.459 [chaincode] Launch <span class=\"cm-attribute\">-<\/span>&gt; DEBU 0c7 LaunchChaincode complete<\/pre><\/div>\n<div><pre><span class=\"cm-number\">15<\/span>:07:12.490 [chaincode] processStream <span class=\"cm-attribute\">-<\/span>&gt; ERRO 0c8 Error handling chaincode support stream: stream error: code <span class=\"cm-operator\">=<\/span> <span class=\"cm-number\">1<\/span> desc <span class=\"cm-operator\">=<\/span> <span class=\"cm-string\">&quot;context canceled&quot;<\/span><\/pre><\/div>\n<div><pre><span class=\"cm-number\">15<\/span>:07:12.490 [chaincode] deregisterHandler <span class=\"cm-attribute\">-<\/span>&gt; DEBU 0c9 Deregister handler: add1dc7c2b0b0d3a37b5ee55b253cffe13e70c5fb61f1146b101ebd5d616aaf4717c0c881c43a29845fc1e43597a8ab5b01043366f47783cbde5b801f00e85db<\/pre><\/div>\n<div><pre><span class=\"cm-number\">15<\/span>:07:12.490 [chaincode] deregisterHandler <span class=\"cm-attribute\">-<\/span>&gt; DEBU 0ca Deregistered handler with key: add1dc7c2b0b0d3a37b5ee55b253cffe13e70c5fb61f1146b101ebd5d616aaf4717c0c881c43a29845fc1e43597a8ab5b01043366f47783cbde5b801f00e85db<\/pre><\/div>\n<\/div>\n<\/div>\n","lines":24,"lines_more":19,"preview_is_truncated":true,"channels":["C2GFRAE7P"],"groups":[],"ims":[],"comments_count":0},"user":"U24M29R4G","upload":true,"display_as_bot":false,"username":"<@U24M29R4G|nikileshsa>","bot_id":null,"ts":"1477693131.000343"},{"user":"U2LGFBFNJ","text":"<@U2LGFBFNJ|jmahhh> has joined the channel","type":"message","subtype":"channel_join","ts":"1477823437.000344"},{"type":"message","user":"U24M29R4G","text":"<@U1KFCPFQA> I just saw your question on Saturday in <#C0Y4PEU22|fabric> on the same issue I was facing on Friday around\n```[dockercontroller] deployImage -&gt; ERRO 09b Error building images: Tag x86_64-0.7.0-snapshot-4cd4aaf not found in repository <http:\/\/docker.io\/hyperledger\/fabric-ccenv|docker.io\/hyperledger\/fabric-ccenv>```\n. Good to know you were able to get it resolved by rebuilding the peer. Do you get any error around following  \n```Couch DB Error: invalid_json```\nerror after the build image related error? I am getting this when trying to deploy a transaction as described in <https:\/\/lists.hyperledger.org\/pipermail\/hyperledger-fabric\/2016-October\/000421.html> .","ts":"1477938852.000347"},{"type":"message","user":"U1KFCPFQA","text":"Yes, that is expected for now, it happens since not all chaincode (e.g. lifecycle chaincode) is json based.  next step we are working on is to add non-json (binary) support when using CouchDB.  I think eventually we\u2019ll want to specify per chaincode which chaincode runs  on key\/value store (e.g. embedded rocksdb\/leveldb key\/value store) and which chaincode runs on CouchDB.  would make sense for lifecycle chaincode to run on embedded key\/value store and have business chaincode run in CouchDB for queryability","edited":{"user":"U1KFCPFQA","ts":"1477939517.000000"},"ts":"1477939482.000348"},{"type":"message","user":"U24M29R4G","text":"<@U1KFCPFQA> sure. thanks for confirming its expected behavior for now... good to know binary support is being added couchdb","ts":"1477940264.000350"},{"user":"U2NDE1ZCK","text":"<@U2NDE1ZCK|jdockter> has joined the channel","type":"message","subtype":"channel_join","ts":"1478286971.000351"},{"user":"U0PB67X4K","text":"<@U0PB67X4K|garisingh> has joined the channel","type":"message","subtype":"channel_join","ts":"1478716243.000352"},{"type":"message","user":"U0PB67X4K","text":"<@U1KFCPFQA> - assuming we get the goleveldb stuff merged soon, can we then remove fabric\/core\/db as well as gorocksdb from vendor?","ts":"1478716291.000353"},{"type":"message","user":"U0PB67X4K","text":"(I am a mission to clean up the codebase  :wink: )","ts":"1478716408.000354"},{"type":"message","user":"U24M29R4G","text":"<@U0PB67X4K> <@U1KFCPFQA> Just want to bring this to your attention. ```fabric\/devenv\/setupUbuntuOnPPC64le.sh ```,``` fabric\/devenv\/setup.sh``` ```fabric\/devenv\/setupRHELonZ.sh``` also has some rocksdb installation related code","ts":"1478719953.000355"},{"type":"message","user":"U24M29R4G","text":"which needs to be cleaned up..","ts":"1478719983.000356","reactions":[{"name":"+1","users":["U0PB67X4K"],"count":1}]},{"type":"message","user":"U0PB67X4K","text":"nice catch!","ts":"1478719999.000357"},{"type":"message","user":"U1KFCPFQA","text":"yes, i\u2019ve got a jira item to clean them both up:","ts":"1478720015.000358"},{"type":"message","user":"U1KFCPFQA","text":"FAB-1054 Clean up RocksDB code artifacts (gorocksdb db wrapper and vendor) and installation artifacts (vagrant\/docker)","ts":"1478720027.000359"},{"type":"message","user":"U0PB67X4K","text":"cool","ts":"1478720036.000360"},{"type":"message","user":"U24M29R4G","text":"oh cool!","ts":"1478720037.000361"},{"type":"message","user":"U1KFCPFQA","text":"will probably do next sprint once the dust settles on the goleveldb switch","ts":"1478720059.000362"},{"type":"message","user":"U1KFCPFQA","text":"<@U24M29R4G> You could take that work item if you like :slightly_smiling_face:","ts":"1478720078.000363"},{"type":"message","user":"U24M29R4G","text":"<@U1KFCPFQA>  sure. I can do that..","ts":"1478720148.000364"},{"type":"message","user":"U1KFCPFQA","text":"assigned in jira :slightly_smiling_face:","ts":"1478720185.000365"},{"type":"message","user":"U24M29R4G","text":"thanks!","ts":"1478720195.000366"},{"type":"message","user":"U1KFCPFQA","text":"no, thank you!","ts":"1478720202.000367"},{"type":"message","user":"U1KFCPFQA","text":"you could split into two or three jira items if you like\u2026one for code artifacts, one for vagrant install artifacts, one for docker install artifacts","ts":"1478720260.000368"},{"type":"message","user":"U24M29R4G","text":"makes sense.. thanks <@U1KFCPFQA>","ts":"1478720377.000369"},{"type":"message","user":"U0PB67X4K","text":"","attachments":[{"fallback":"[November 10th, 2016 7:06 AM] garisingh: Sorry for the wide blast here, but while I was reviewing stuff, thought I should send out a note on things which will make life easier for the maintainers and will help contributions be merged more quickly:\n\n1) Please make sure to reference a JIRA item in your commits - especially for new functionality\n\n2) Let's try to add a little more detail to some of the JIRA entries - one line entries \/ descriptions don't help us understand what contribution is trying to achieve\n\n3) When people make comments in gerrit, once you address them please mark them as done (by clicking in the comment and hitting done  :slightly_smiling_face:  )\n\n4) You'll notice that we push back a lot on lack of tests - please test locally and use a coverage tool to see where you stand\n\n5) Run linters, go import, etc to reduce CI failures","ts":"1478779599.000514","author_subname":"garisingh","channel_id":"C29512UHF","channel_name":"fabric-sdk-node-dev","is_msg_unfurl":true,"text":"Sorry for the wide blast here, but while I was reviewing stuff, thought I should send out a note on things which will make life easier for the maintainers and will help contributions be merged more quickly:\n\n1) Please make sure to reference a JIRA item in your commits - especially for new functionality\n\n2) Let's try to add a little more detail to some of the JIRA entries - one line entries \/ descriptions don't help us understand what contribution is trying to achieve\n\n3) When people make comments in gerrit, once you address them please mark them as done (by clicking in the comment and hitting done  :slightly_smiling_face:  )\n\n4) You'll notice that we push back a lot on lack of tests - please test locally and use a coverage tool to see where you stand\n\n5) Run linters, go import, etc to reduce CI failures","author_link":"https:\/\/hyperledgerproject.slack.com\/team\/garisingh","author_icon":"https:\/\/avatars.slack-edge.com\/2016-09-10\/78323915894_521dc680194c08b166e0_48.jpg","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https:\/\/hyperledgerproject.slack.com\/archives\/fabric-sdk-node-dev\/p1478779599000514","is_share":true,"footer":"Posted in #fabric-sdk-node-dev"}],"ts":"1478779722.000370"},{"user":"U1D89DP47","text":"<@U1D89DP47|subzer0> has joined the channel","type":"message","subtype":"channel_join","ts":"1478981834.000371"},{"user":"U2X9KDDL7","text":"<@U2X9KDDL7|vdods> has joined the channel","type":"message","subtype":"channel_join","ts":"1479161528.000372"},{"user":"U2X9KDDL7","text":"<@U2X9KDDL7|vdods> has left the channel","type":"message","subtype":"channel_leave","ts":"1479161560.000373"},{"type":"message","user":"U1CTBUNEN","text":"hey I've been out of the loop for a while - any updates on the ledger couchdb front ?","ts":"1479218566.000374"},{"type":"message","user":"U1KFCPFQA","text":"We have made good progress with CouchDB.  <https:\/\/jira.hyperledger.org\/browse\/FAB-959> (merged) gave us the ability to run end-to-end transactions through CouchDB from the peer. And <https:\/\/jira.hyperledger.org\/browse\/FAB-827> (changeset in gerrit) adds a config option in core.yaml to switch from default embedded LevelDB to CouchDB.  I will provide a demo of these functions at week end.","ts":"1479219289.000375"},{"type":"message","user":"U1KFCPFQA","text":"<@U1CTBUNEN> how is the query API to expose _find going? Do you want to put something in gerrit for review?","ts":"1479219437.000376"},{"type":"message","user":"U1CTBUNEN","text":"I got side-tracked","ts":"1479219583.000377"},{"type":"message","user":"U1KFCPFQA","text":"Also, <https:\/\/jira.hyperledger.org\/browse\/FAB-788> (merged) has switched the default DB from RocksDB to goleveldb (LevelDB ported to go)","ts":"1479219589.000378"},{"type":"message","user":"U1CTBUNEN","text":"I'm trying to get back into it","ts":"1479219650.000379"},{"type":"message","user":"U1CTBUNEN","text":"but I also realized that I need to sit down and spend some time learning the core codebase first","ts":"1479219671.000380"},{"type":"message","user":"U1CTBUNEN","text":"<@U1KFCPFQA> it looks like the Query API method in the chaincode is being deprecated and the query will become another option for the Invoke() API","ts":"1479295959.000381"},{"type":"message","user":"U1CTBUNEN","text":"is that the plan moving ahead ?","ts":"1479295971.000382"},{"type":"message","user":"U1CTBUNEN","text":"how does that affect the CouchDB implementation ?","ts":"1479295996.000383"},{"type":"message","user":"U1KFCPFQA","text":"<@U1CTBUNEN> Query() API in chaincode going away has no material impact.  Let me explain. In v0.5 Invoke() automatically went to all peers for execution and Query() went to one peer for query.  If you wanted to query a single peer it was not possible to do that via Invoke, therefore two separate functions were needed.  In v1 architecture the SDK client controls the flow - it is now possible to send the Invoke proposal to an endorser peer for a read-only query, but not submit the results to orderer.  Therefore there is no need for distinction between Invoke() and Query() in v1.  You can Invoke() a chaincode function that does read only queries, against one peer, or against multiple peers if you want to ensure different peers give you consistent results.  A good analogy is a DB Stored Procedure\u2026 you talk about Invoking a Stored Proc rather than Query a Stored Proc, regardless of whether it is doing writes or reads.  So we can still do queries within a chaincode Invoke(), and we will actually likely open up query to peer API (outside chaincode), if you are a user authorized to see all blockchain data (for example an auditor). And with introduction of CouchDB, these queries can now be rich queries against any data field.","ts":"1479297496.000384"},{"type":"message","user":"U1CTBUNEN","text":"ok it makes sense to me","ts":"1479297583.000385"},{"type":"message","user":"U1CTBUNEN","text":"and where can I find the latest end-to-end code example with CouchDB?","ts":"1479297600.000386"},{"type":"message","user":"U1CTBUNEN","text":"this would be a good starting point for me","ts":"1479297606.000387"},{"type":"message","user":"U1CTBUNEN","text":"(in terms of branch and commit level)","ts":"1479297643.000388"},{"type":"message","user":"U1KFCPFQA","text":"Latest master has end-to-end couchdb support","ts":"1479297701.000389"},{"type":"message","user":"U1KFCPFQA","text":"In terms of end-to-end instructions with CLI, see the attachment in Binh's forum email:\n<https:\/\/lists.hyperledger.org\/pipermail\/hyperledger-fabric\/2016-October\/000421.html>\nThe attachment at the bottom is:\n<http:\/\/lists.hyperledger.org\/pipermail\/hyperledger-fabric\/attachments\/20161022\/d3860afb\/attachment.obj>","ts":"1479297725.000390"},{"type":"message","user":"U1KFCPFQA","text":"Enable CouchDB in kv_ledger_config.go.  There is a changeset to move the config to core.yaml.  I will update this channel with instructions when that change gets merged.","ts":"1479297826.000391"},{"type":"message","user":"U1KFCPFQA","text":"You can use any chaincode\u2026 the CouchDB interaction code is smart enough to detect whether the values are JSON, if so it saves as normal in CouchDB, if not it saves as a binary attachment.","ts":"1479297879.000392"},{"user":"U2NG5AX0A","text":"<@U2NG5AX0A|klorenz> has joined the channel","type":"message","subtype":"channel_join","ts":"1479767675.000393"},{"type":"message","user":"U2NDE1ZCK","text":"It seems like today, v0.6.1 and lower, there are many examples of chain code storing JSON into state tables... which is not exactly clear to me how on how that works with KV DB and maybe someone could explain that as well...but it seems like that is a way to help organize state data in a more relational manager...with the option of CouchDB in v1.0 and being able to query the JSON directly, is that going to eliminate the need for state tables...or do I have those concepts all wrong?","ts":"1479768459.000394"},{"type":"message","user":"U1KFCPFQA","text":"you are correct, you will not need the state table layer in v1","ts":"1479768560.000395"},{"type":"message","user":"U2NDE1ZCK","text":"<@U1KFCPFQA> thanks...so is the idea that you will have one CouchDB per blockchain or could you have many?  Also, what would be used to find specific JSON...or is that application defined?","ts":"1479769481.000396"},{"type":"message","user":"U1KFCPFQA","text":"One CouchDB instance per peer.  And we are thinking within that CouchDB instance there would be one database per channel (not sure if you are familiar with the multi-channel concept in v1).","ts":"1479770181.000397"},{"type":"message","user":"U1KFCPFQA","text":"To query JSON documents (key values) you will be able to pass a CouchDB query string","ts":"1479770225.000398"},{"type":"message","user":"U2NDE1ZCK","text":"I saw the document on multi-channel but still soaking in.  So in the CouchDB the key is whatever we want and value is the JSON?","ts":"1479770930.000399"},{"user":"U1VG8LNP3","text":"<@U1VG8LNP3|yaoguo> has joined the channel","type":"message","subtype":"channel_join","ts":"1479779466.000400"},{"type":"message","user":"U0PB67X4K","text":"are we ready to remove rocksdb from master yet?","ts":"1480361098.000401"},{"type":"message","user":"U1KFCPFQA","text":"I believe all the prereqs are now met (nothing uses RocksDB now), so now it\u2019s just a matter of removing RocksDB code and installation artifacts.  It is not a top priority from the local team this week, but I know <@U24M29R4G> volunteered to work on it.  <@U24M29R4G> does that still make sense and what is your timeframe?","ts":"1480361356.000402"},{"type":"message","user":"U24M29R4G","text":"<@U1KFCPFQA>. I see you removed  the blocker today. I should be able to work on it this week.","ts":"1480363275.000403"},{"type":"message","user":"U2MCH9EEB","text":"looks the endorser component still using the rocksdb","ts":"1480405719.000404"},{"user":"U388YPQ1K","text":"<@U388YPQ1K|gkourtellos> has joined the channel","type":"message","subtype":"channel_join","ts":"1480423146.000405"},{"type":"message","user":"U0KN2SSKE","text":"<@U1KFCPFQA> do we still need these:\n```\n        RANGE_QUERY_STATE = 14;\n        RANGE_QUERY_STATE_NEXT = 15;\n        RANGE_QUERY_STATE_CLOSE = 16;```\nand associated structs in chaincode.proto","ts":"1480434307.000406"},{"type":"message","user":"U1KFCPFQA","text":"<@U0KN2SSKE> I suspect ALL the values in ChaincodeMessage should be reviewed.  For example these don\u2019t seem to make sense either since chaincode can do multiple GETs and PUTs:","ts":"1480436242.000407"},{"type":"message","user":"U1KFCPFQA","text":"GET_STATE = 8;\n        PUT_STATE = 9;\n        DEL_STATE = 10;","ts":"1480436243.000408"},{"type":"message","user":"U1KFCPFQA","text":"What exactly are the enum values used for?","ts":"1480436259.000409"},{"user":"U0KMJF9AA","text":"<@U0KMJF9AA|vikasjakhar> has joined the channel","type":"message","subtype":"channel_join","ts":"1480441307.000410"},{"user":"U38H8MS11","text":"<@U38H8MS11|lovesh> has joined the channel","type":"message","subtype":"channel_join","ts":"1480488261.000411"},{"user":"U12AHQ3NK","text":"<@U12AHQ3NK|nits7sid> has joined the channel","type":"message","subtype":"channel_join","ts":"1480607766.000412"},{"type":"message","user":"U12AHQ3NK","text":"Will the v1.0 support couchDB for analytical query purpose?","ts":"1480607826.000413"},{"type":"message","user":"U1KFCPFQA","text":"<@U12AHQ3NK> v1 will expose a general query api against couchdb.  the couchdb support will be experimental in v1, as we would like to get feedback on the different types of queries people are doing and impacts before locking down the deployment\/usage\/apis\/roles\/security\/tuning\/etc in subsequent release","ts":"1480609893.000414"},{"user":"U32LDD9JA","text":"<@U32LDD9JA|ledger888> has joined the channel","type":"message","subtype":"channel_join","ts":"1480701192.000415"},{"type":"message","user":"U0PB67X4K","text":"hey folks - I know I can probably find this is the requirements or in one of the docs, but figured it might be quicker to ask.  When it comes to \"ledger per chain\" for the multi-chain feature, I imagine we'll of course have a separate physical file ledger for the \"blocks\" but I assume that we will also have separate physical data files when using goleveldb as well?   Clearly we can use the database concept within couchdb","ts":"1480801207.000416"},{"type":"message","user":"U1KFCPFQA","text":"<@U0PB67X4K> Yes, the first choice is to use separate goleveldb database (in a separate file system directory) for each ledger.  However, we have concerns about the number file handles that will be required to maintain N goleveldbs concurrently. Therefore we are starting some stress testing to determine the system impact.","edited":{"user":"U1KFCPFQA","ts":"1480805442.000000"},"ts":"1480805412.000002"},{"type":"message","user":"U1KFCPFQA","text":"If it turns out to be more efficient to have a single large goleveldb (in a single file system directory), do you have concerns?","ts":"1480805483.000004"},{"type":"message","user":"U1KFCPFQA","text":"We asked the CouchDB experts the same question - they said it is efficient to have N databases in CouchDB, so no problem there to have a DB per ledger (within one CouchDB process instance)","ts":"1480805565.000005"},{"type":"message","user":"U0PB67X4K","text":"I could see that it is more efficient to have a single goleveldb.  I guess we would go with namespace (column family ?) of {chain||chaincodeID}?  I think as long as the file ledgers are separate (which they have to be) that's the most important thing.","ts":"1480806424.000006"},{"type":"message","user":"U1KFCPFQA","text":"yep, chain|chaincodeId namespace would be the backup plan","ts":"1480806469.000007"},{"type":"message","user":"U1KFCPFQA","text":"<@U0PB67X4K> if you look at my latest chaincode interaction proposal, you\u2019ll see I also recommend to add objectType to PutState() to create object namespaces within chaincode.  So it would be chain|chaincodeId|objectType","ts":"1480806619.000008"},{"type":"message","user":"U1KFCPFQA","text":"<https:\/\/jira.hyperledger.org\/secure\/attachment\/10250\/Chaincode_TableToJSON.pptx>","ts":"1480806623.000009"},{"type":"message","user":"U0PB67X4K","text":"right - saw that as well","ts":"1480806643.000010"},{"type":"message","user":"U1KFCPFQA","text":"Ok, please discuss with others in NY","ts":"1480806660.000011"},{"type":"message","user":"U0PB67X4K","text":"seems reasonable (well at least seems like a good option)","ts":"1480806663.000012"},{"type":"message","user":"U0PB67X4K","text":"on the compositeKey thingy, is there any reason why we would have to use JSON structures?  Looks like as long as you can pass in the stuff you want in the compositeKey there's really not a limitation on what you could store in the value?  Or did I read the code wrong?","ts":"1480806725.000013"},{"type":"message","user":"U0PB67X4K","text":"(don't get me wrong - I am a big fan of JSON \/ NoSQL data models)","ts":"1480806743.000014"},{"type":"message","user":"U1KFCPFQA","text":"dont have to use JSON\u2026 can still use binary blobs if you prefer","ts":"1480806752.000015"},{"type":"message","user":"U0PB67X4K","text":"cool","ts":"1480806756.000016"},{"type":"message","user":"U1KFCPFQA","text":"the other thing in the last slide was the question of whether to have dedicated APIs for JSON vs binary","ts":"1480806774.000017"},{"type":"message","user":"U0PB67X4K","text":"yeah - I like the fact that you created some higher level functions around the \"range\" functions (which is basically how all the table stuff worked anyway).  Seems like a much more practical model and still has the same level of function (possibly even more)","ts":"1480806826.000018"},{"type":"message","user":"U1KFCPFQA","text":"exactly, and some helper functions will guide people how to use it","ts":"1480806857.000019"},{"type":"message","user":"U0PB67X4K","text":"I think having dedicated JSON ones makes sense - I think we'd have to have a flag on the db option to indicate whether or not JSON is supported?","edited":{"user":"U0PB67X4K","ts":"1480806873.000000"},"ts":"1480806861.000020"},{"type":"message","user":"U1KFCPFQA","text":"not really necessary,  if JSON is not supported we could just store the json as blob","ts":"1480806901.000022"},{"type":"message","user":"U0PB67X4K","text":"but that's just me  :wink:","ts":"1480806902.000023"},{"type":"message","user":"U0PB67X4K","text":"true","ts":"1480806907.000024"},{"type":"message","user":"U1KFCPFQA","text":"but it may be nice to indicate that with json it opens up the query capabilities","ts":"1480806924.000025"},{"type":"message","user":"U0PB67X4K","text":"right - I was thinking more on the read\/query side than the write side","ts":"1480806946.000026"},{"type":"message","user":"U1KFCPFQA","text":"yep","ts":"1480806952.000027"},{"type":"message","user":"U1KFCPFQA","text":"sounds like you are in sync with everything i was thinking\u2026 so we just need to finalize exact decisions this week","ts":"1480806991.000028"},{"type":"message","user":"U0PB67X4K","text":"For whatever thats worth.  :wink:   yeah - it all made sense to me - no surprises","edited":{"user":"U0PB67X4K","ts":"1480807037.000000"},"ts":"1480807026.000029"},{"type":"message","user":"U0PB67X4K","text":"at least I read your stuff :wink:","ts":"1480807056.000031"},{"type":"message","user":"U1KFCPFQA","text":"cool.  the minions in my house are demanding food now","ts":"1480807068.000032"},{"type":"message","user":"U0PB67X4K","text":"I'm outta here too","ts":"1480807079.000033"},{"type":"message","user":"U0PB67X4K","text":"I'm demanding food myself (except from myself as well)","ts":"1480807095.000034"},{"type":"message","user":"U0PB67X4K","text":"laters","ts":"1480807097.000035"},{"type":"message","user":"U1KFCPFQA","text":"ha yep, cya","ts":"1480807100.000036"},{"user":"U24JMTPRQ","text":"<@U24JMTPRQ|aliblackwell> has joined the channel","type":"message","subtype":"channel_join","ts":"1481117954.000037"},{"user":"U2JCD7N7R","text":"<@U2JCD7N7R|georgeo> has joined the channel","type":"message","subtype":"channel_join","ts":"1481117979.000038"},{"type":"message","user":"U0PV6MUD6","text":"With 1.0 raw ledger, will the queries be tracked and stored or just all proposed transactions?","ts":"1481118070.000039"},{"type":"message","user":"U1KFCPFQA","text":"Queries that are run during endorser simulation execution, which are not ultimately submitted as transactions, will not be logged to the raw ledger.  Only submitted transactions are written to the raw ledger.","ts":"1481123720.000040"},{"type":"message","user":"U0PV6MUD6","text":"Thanks Dave. QQ on v0.6 - is there any semblance of the historical database? If I wanted to find all historical changes to a JSON-based asset in 0.6 can I do that","ts":"1481123992.000041"},{"type":"message","user":"U1KFCPFQA","text":"Not easily, you would have to essentially walk through the chain and re-execute all the trans.","ts":"1481124071.000042"},{"type":"message","user":"U1KFCPFQA","text":"A simple way to see history of an asset is a high priority requirement for v1","ts":"1481124089.000043"},{"type":"message","user":"U0PV6MUD6","text":"Is there an example of how you could do it in 0.6 that I can access?","ts":"1481125526.000044"},{"type":"message","user":"U0PV6MUD6","text":"Got a customer interested in demonstrating the \u2018immutable provenance\u2019 aspect of blockchain on our app","ts":"1481125547.000045"},{"type":"message","user":"U1KFCPFQA","text":"Unfortunately I don\u2019t have much experience with 0.5\/0.6 myself\u2026 I expect more people with 0.6 knowledge would be watching the \u2018fabric\u2019 channel if you want to post there.","ts":"1481125872.000046"},{"type":"message","user":"U0PB67X4K","text":"<@U0PV6MUD6> -  there is really no way to do this within v0.6 \/0.5.  The only way you could do this would be entirely external to chaincode.   If you cleverly structured your chaincode function calls such that the asset id was always somehow passed in as a parameter (or even the full JSON was passed in as a parameter), you could read all the blocks and parse them to build this out of band.  Of course this is kinda crappy because we can only query 1 block at a time.  The other option would be to build this history in near real-time (again outside) but building an event listener and building the history from those events","ts":"1481134861.000047"},{"type":"message","user":"U0PV6MUD6","text":"Interesting approach. Glad we have this capability in 1.0, but looks like we won\u2019t have time to construct this in my project.","ts":"1481135777.000048"},{"type":"message","user":"U184J2R7S","text":"@alliblackwell you asked for the playback recording with couchdb- you can find it here:  <https:\/\/youtu.be\/aEv4_Lm2N2k>","attachments":[{"service_name":"YouTube","service_url":"https:\/\/www.youtube.com\/","title":"LedgerSprint5 CouchDB demo","title_link":"https:\/\/youtu.be\/aEv4_Lm2N2k","author_name":"Hyperledger Fabric","author_link":"https:\/\/www.youtube.com\/channel\/UCCFdgCWH_1vCndMPVqQlwZw","thumb_url":"https:\/\/i.ytimg.com\/vi\/aEv4_Lm2N2k\/hqdefault.jpg","thumb_width":480,"thumb_height":360,"fallback":"YouTube Video: LedgerSprint5 CouchDB demo","video_html":"<iframe width=\"400\" height=\"300\" src=\"https:\/\/www.youtube.com\/embed\/aEv4_Lm2N2k?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allowfullscreen><\/iframe>","video_html_width":400,"video_html_height":300,"from_url":"https:\/\/youtu.be\/aEv4_Lm2N2k","service_icon":"https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png","id":1}],"ts":"1481143494.000049"},{"type":"message","user":"U184J2R7S","text":"<@U24JMTPRQ> see above","ts":"1481143632.000051"},{"type":"message","user":"U24JMTPRQ","text":"Thanks <@U184J2R7S>! Cc <@U2JCD7N7R>. This looks awesome ","ts":"1481148227.000052"},{"user":"U2UU1LKTR","text":"<@U2UU1LKTR|jonathan.tan> has joined the channel","type":"message","subtype":"channel_join","ts":"1481178823.000053"},{"user":"U0P2GSA8Z","text":"<@U0P2GSA8Z|arnaud> has joined the channel","type":"message","subtype":"channel_join","ts":"1481204324.000054"},{"type":"message","user":"U0P2GSA8Z","text":"hey <@U1KFCPFQA> I have a quick question for you: I saw your video (thanks!) and see you're starting couchdb manually, how is that supposed to happen eventually?","ts":"1481206274.000055"},{"type":"message","user":"U0P2GSA8Z","text":"I mean, I assume one won't have to do that for every peer, right?","ts":"1481206303.000056"},{"type":"message","user":"U1KFCPFQA","text":"we\u2019ll likely have docker dependences between peer and couchdb.  open to any ideas though.","ts":"1481206368.000057"},{"type":"message","user":"U0P2GSA8Z","text":"it's just that it seems that unfortunately the set up is getting more and more complicated","ts":"1481206397.000058"},{"type":"message","user":"U1KFCPFQA","text":"this is one of the challenges of supporting \u2018external\u2019 databases","ts":"1481206402.000059"},{"type":"message","user":"U0P2GSA8Z","text":"we used to have membersvc and the peers","ts":"1481206411.000060"},{"type":"message","user":"U0P2GSA8Z","text":"now one needs to start cop, orderer, peer","ts":"1481206426.000061"},{"type":"message","user":"U1KFCPFQA","text":"right, that\u2019s why couch is an extended option, not the default\/embedded option","ts":"1481206426.000062"},{"type":"message","user":"U0P2GSA8Z","text":"and now couchdb if that's what one wants to use","ts":"1481206438.000063"},{"type":"message","user":"U0P2GSA8Z","text":"the list keeps on growing!","ts":"1481206443.000064"},{"type":"message","user":"U1KFCPFQA","text":"right, i\u2019m open to any ideas on simplification","ts":"1481206459.000065"},{"type":"message","user":"U0P2GSA8Z","text":"I don't know but I think we're going to need to package things a bit - maybe it's just a matter of a few scripts","edited":{"user":"U0P2GSA8Z","ts":"1481206656.000000"},"ts":"1481206499.000066"},{"type":"message","user":"U0P2GSA8Z","text":"so that some of this can be done with fewer commands","ts":"1481206511.000067"},{"type":"message","user":"U0P2GSA8Z","text":"I guess the added flexibility comes at a cost","ts":"1481206551.000068"},{"user":"U3AFRMY68","text":"<@U3AFRMY68|donjohnny> has joined the channel","type":"message","subtype":"channel_join","ts":"1481210157.000070"},{"type":"message","user":"U3AFRMY68","text":"<@U184J2R7S> which video are you referring to ?","ts":"1481211239.000071"},{"type":"message","user":"U184J2R7S","text":"new couchdb demo is located here <https:\/\/youtu.be\/aEv4_Lm2N2k>","attachments":[{"service_name":"YouTube","service_url":"https:\/\/www.youtube.com\/","title":"LedgerSprint5 CouchDB demo","title_link":"https:\/\/youtu.be\/aEv4_Lm2N2k","author_name":"Hyperledger Fabric","author_link":"https:\/\/www.youtube.com\/channel\/UCCFdgCWH_1vCndMPVqQlwZw","thumb_url":"https:\/\/i.ytimg.com\/vi\/aEv4_Lm2N2k\/hqdefault.jpg","thumb_width":480,"thumb_height":360,"fallback":"YouTube Video: LedgerSprint5 CouchDB demo","video_html":"<iframe width=\"400\" height=\"300\" src=\"https:\/\/www.youtube.com\/embed\/aEv4_Lm2N2k?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allowfullscreen><\/iframe>","video_html_width":400,"video_html_height":300,"from_url":"https:\/\/youtu.be\/aEv4_Lm2N2k","service_icon":"https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png","id":1}],"ts":"1481213850.000072"},{"type":"message","user":"U0NCW1DPX","text":"<@U184J2R7S> thanks for your sharing. I have few questions regarding use the couchdb as rocksdb replacement. maybe I missed the couchdb related design doc, it would be helpful to let me understand if you can provide the link. 1. Have any motivation to let us move to use another kv db? more easy to query? or more easy to save the state with different document obj like json in our chaincode? I want to understand the benefit. 2. If we have multiple vps in the network, will the vps connect to same couchdb instance? or we have to maintain separate stuff on each vp. 3. If we update document out side vps, for example update the state via couchdb api directly. Will it effect the state consistency or consensus or what ever?","edited":{"user":"U0NCW1DPX","ts":"1481700605.000000"},"ts":"1481700569.000074"},{"type":"message","user":"U1KFCPFQA","text":"<@U0NCW1DPX> On the main design wiki <https:\/\/wiki.hyperledger.org\/community\/fabric-design-docs>, follow the link to the Ledger design.  There you will find design charts that will answer most of your questions.  Feel free to post any follow-up questions here.","ts":"1481776461.000076"},{"type":"message","user":"U0NCW1DPX","text":"<@U1KFCPFQA>. thx for your information, that\u2019s good start to let me understand this new feature. One more question, i think we also need support to encrypt the state document in couchdb, right?","ts":"1481809387.000077"},{"type":"message","user":"U1KFCPFQA","text":"In v1 the encryption story is two-fold  1) use file system encryption for data at rest  2) application can encrypt data before it is written.  Additionally, in v1 there is the concept of private chains between a subset of trusted partners, where each of the chain members has authorization to view the data, but non-members will not have the data at all.","ts":"1481809655.000078"},{"type":"message","user":"U1KFCPFQA","text":"This answer is the same for LevelDB and CouchDB state databases.","ts":"1481809753.000079"},{"user":"U38JCNW5V","text":"<@U38JCNW5V|divyank-sk> has joined the channel","type":"message","subtype":"channel_join","ts":"1481901598.000080"},{"type":"message","user":"U0NCW1DPX","text":"<@U1KFCPFQA> got it. We have requirement from customer to let only authorized user view the data even between trusted partners. I will keep my eye on it. Maybe it is a better choice to encrypt data at application layer (or a.k.a at chaincode).","ts":"1481941257.000081"},{"user":"U2WL051HN","text":"<@U2WL051HN|haifeng> has joined the channel","type":"message","subtype":"channel_join","ts":"1481986170.000082"},{"user":"U2X9KDDL7","text":"<@U2X9KDDL7|vdods> has joined the channel","type":"message","subtype":"channel_join","ts":"1482026110.000083"},{"type":"message","user":"U2X9KDDL7","text":"Hi there -- are there any plans to augment the ledger keystore and tables API, such as with more versatile table query methods, where one can select from any subset of keys (instead of just an ordered prefix of table keys), and selecting table rows based on predicates (like in SQL; select * from XYZ where P) ?","ts":"1482026236.000084"},{"type":"message","user":"U1KFCPFQA","text":"<@U2X9KDDL7> Yes there are enhancements coming including full query.  There will be a shift of focus from table-based to JSON-based in order to get these capabilities.  JSON-based is more aligned with the chaincode programming model and underlying data model.  See the ledger v1 charts for more details.  On the main design wiki <https:\/\/wiki.hyperledger.org\/community\/fabric-design-docs>, follow the link to the Ledger design and see the charts there.","ts":"1482027774.000085"},{"type":"message","user":"U2X9KDDL7","text":"<@U1KFCPFQA> Thanks!  I've been working with v0.6 mostly -- how far toward that goal is master branch?","ts":"1482028177.000086"},{"type":"message","user":"U1KFCPFQA","text":"In v1 master branch there is a ledger query API against CouchDB state database.  Next step is to expose that as a public API on the peer and in chaincode.","ts":"1482028267.000087"},{"type":"message","user":"U1KFCPFQA","text":"The embedded rocksdb\/leveldb doesn\u2019t support query, therefore we are looking to external state databases to provide the query function.","ts":"1482028309.000088"},{"type":"message","user":"U1CTBUNEN","text":"<@U1KFCPFQA> where can I find the v1 master branch ? I can't see the v1 here: <https:\/\/github.com\/hyperledger\/fabric\/branches>","edited":{"user":"U1CTBUNEN","ts":"1482140821.000000"},"ts":"1482140817.000089"},{"type":"message","user":"U0Z541B3P","text":"<@U1CTBUNEN> - master branch is V1","ts":"1482144233.000092"},{"type":"message","user":"U1KFCPFQA","text":"<@U1CTBUNEN> In case it has been a while\u2026 we are using gerrit for the repository and code reviews now, see instructions here: <https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/Gerrit\/gerrit.md>","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/Gerrit\/gerrit.md","text":"Read-only mirror of <https:\/\/gerrit.hyperledger.org\/r\/#\/admin\/projects\/fabric>","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/docs\/Gerrit\/gerrit.md","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1482150252.000093"},{"type":"message","user":"U1KFCPFQA","text":"Also, I know you were interested in the query API, it is now available in master.  Here was the changeset in case you want to review: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3299\/>","ts":"1482150335.000095"},{"user":"U0Y14MWA2","text":"<@U0Y14MWA2|vukolic> has joined the channel","type":"message","subtype":"channel_join","ts":"1482155757.000096"},{"type":"message","user":"U0Y14MWA2","text":"@manish-sethii <@U1KFCPFQA>","ts":"1482155767.000097"},{"type":"message","user":"U0Y14MWA2","text":"<@U0Z541B3P>","ts":"1482155776.000098"},{"type":"message","user":"U0Y14MWA2","text":"Ledger provides a verifiable history of all successful state changes (we talk about *valid* transactions) and unsuccessful attempts to change state (we talk about *invalid* transactions), occurring during the operation of the system.\n\nLedger is constructed by the ordering service (see Sec 1.3.3) as a totally ordered hashchain of blocks of (valid or invalid) transactions. The hashchain imposes the total order of blocks in a ledger and each block contains an array of totally ordered transactions. This imposes total order across all transactions.\n\nLedger is kept at all peers and, optionally, at a subset of orderers. In the context of an orderer we refer to the Ledger as to `OrdererLedger`, whereas in the context of a peer we refer to the ledger as to `PeerLedger`. `PeerLedger` differs from the `OrdererLedger` in that peers locally maintain a bitmask that tells apart valid transactions from invalid ones (see Section XX for more details). \n\nPeers may prune `PeerLedger` as described in Section XX (post-v1 feature).   \n   \nThe Ledger allows peers to replay the history of all transactions and to reconstruct the state. Therefore, state as described in Sec 1.2.1 is an optional datastructure.","ts":"1482155779.000099"},{"type":"message","user":"U0Y14MWA2","text":"--------------------------","ts":"1482155792.000100"},{"type":"message","user":"U0Y14MWA2","text":"this is the new text about Ledger for the architecture - pls tell me if you have any immediate comments","ts":"1482155812.000101"},{"type":"message","user":"U0Y14MWA2","text":"(of course - will tag you for gerrit review)","ts":"1482155824.000102"},{"type":"message","user":"U2UU1LKTR","text":"Hi everyone, I have noticed that in the ledger.go there is a copyState() function which takes in a source chaincode Id and destination chaincode Id, is it possible to use this function within an invoke function to migrate the world state\/data from one chaincode container to another? Any help would be greatly appreciated","ts":"1482161229.000103"},{"type":"message","user":"U0Z541B3P","text":"<@U0Y14MWA2> - your text looks fine to me. Good choice of name `OrdererLedger` and `PeerLedger`.","ts":"1482161668.000105"},{"type":"message","user":"U0Z541B3P","text":"<@U2UU1LKTR> - you must be looking at v0.5\/v0.6. This function was being used for the scenario of chaincode upgrade. When a chain would upgrade, the data would be copied from the previous namespace to the newer namespace. This function was not meant to consume outside the peer.","ts":"1482161866.000106"},{"type":"message","user":"U0Z541B3P","text":"Also, in V1, this is removed as the upgrade chaincode scenario is changed and it would work on the original data directly.","ts":"1482161935.000107"},{"type":"message","user":"U2UU1LKTR","text":"thanks <@U0Z541B3P> for the clarification, yes we are on v0.6, so if we want to implement such a function to upgrade in v0.6, we have to write a go application and run it directly on the peer?","ts":"1482162371.000108"},{"type":"message","user":"U0Z541B3P","text":"No <@U2UU1LKTR> - there was a plan to provide upgrade feature as a first class feature in v0.5. The ledger function was completed but I guess the chaincode part of the code was not fully implemented... <@U0ULK2JPP> can you please confirm... I guess, my memory is fading here.","edited":{"user":"U0Z541B3P","ts":"1482166702.000000"},"ts":"1482166689.000109"},{"type":"message","user":"U0Z541B3P","text":"Because, there were certain things that need to be taken care at the chaincode management side as well for upgrade scenario.","edited":{"user":"U0Z541B3P","ts":"1482166773.000000"},"ts":"1482166763.000111"},{"type":"message","user":"U0Z541B3P","text":"<@U2UU1LKTR> finally, if you meant to implement the chaincode upgrade feature on your own on v0.6 branch, I am not sure if you want to take that pain as it's going to be available in V1.","ts":"1482170540.000113"},{"type":"message","user":"U0Y14MWA2","text":"<@U0Z541B3P> thanks - here is the changeset if you want to have a look","ts":"1482186371.000114"},{"type":"message","user":"U0Y14MWA2","text":"<https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3411\/>","ts":"1482186372.000115"},{"type":"message","user":"U0Y14MWA2","text":"I also changed the readset\/writeset text as we discussed few weeks ago","ts":"1482186387.000116"},{"type":"message","user":"U1CTBUNEN","text":"<@U1KFCPFQA> thanks for the update - I'm looking at it right now...","ts":"1482224088.000117"},{"type":"message","user":"U1CTBUNEN","text":"I've been a little out of the loop but I see that you guys are crushing it","ts":"1482224107.000118"},{"user":"U36RKMPBQ","text":"<@U36RKMPBQ|bercinho> has joined the channel","type":"message","subtype":"channel_join","ts":"1482224879.000119"},{"type":"message","user":"U36RKMPBQ","text":"Hi,  with the Blockchain Explorer you can view the Ledger transactions, blocks, etc. but naturally everything encrypted. Is there any plan to provide a view on the blockchain regards to past transactions in a non-encrypted way for certain identities \/ roles , who actually triggered those transactions? So in case \"robert\" is firing couple of transactions via a ChainCode to the Blockchain, then he would be able to see all his historical transactions whenever requesting with his identitiy and approriate ECERT?","ts":"1482224899.000120"},{"type":"message","user":"U0PB67X4K","text":"<@U36RKMPBQ>  - a couple of things:\n\n1) Assuming you are using v0.6 with BC explorer, then keep in kind that if you don't have \"privacy\" enabled for your peers then blocks and transactions are not actually encrypted but rather than are actually just base64-encoded in the JSON\n\n2) Assuming you DO have privacy enabled, in v0.6 an enrolled member (e.g. someone who has credentials from membership services) actually does possess the crypto material required to decrypt the blocks \/ transactions","ts":"1482231822.000121"},{"type":"message","user":"U36RKMPBQ","text":"Hi <@U0PB67X4K>  thanks for feedback. We are speaking about the 2nd case. I understand with the ECerts &amp; TCerts I might be able to manually decrpyt transactions, but that\u00b4s not provided as a service by Hyperledger. It\u00b4s not really convenient and you should also locally story which TCert you have used with which particular transaction. I am thinking more about a standard service (such as Query, Invoke, Deploy, etc.) where I may ask for all my transactionhistory for a particular ChainCode via an ECert ...","ts":"1482234759.000122"},{"user":"U2P0N5J5A","text":"<@U2P0N5J5A|sergefdrv> has joined the channel","type":"message","subtype":"channel_join","ts":"1482313244.000123"},{"user":"U1V6SJ1FF","text":"<@U1V6SJ1FF|dgorman> has joined the channel","type":"message","subtype":"channel_join","ts":"1482399552.000124"},{"type":"message","user":"U1V6SJ1FF","text":"Hi <@U0PB67X4K> , I was thinking about the discussion above. In 0.6 , the way I understand it is the SDK encrypts transactions with the chain public key, so all peers can decrypt using the chain private key. Which keys does the SDK use to decrypt the transaction?","ts":"1482400120.000125"},{"user":"U3H68QR7X","text":"<@U3H68QR7X|benlewis> has joined the channel","type":"message","subtype":"channel_join","ts":"1482420475.000126"},{"type":"message","user":"U0PB67X4K","text":"not that this is totally relevant to Fabric's use of goleveldb, some of the points here were interesting:   <https:\/\/github.com\/Storj\/kfs>","attachments":[{"service_name":"GitHub","title":"Storj\/kfs","title_link":"https:\/\/github.com\/Storj\/kfs","text":"kfs - Kademlia inspired local file store based on leveldb.","fallback":"GitHub: Storj\/kfs","thumb_url":"https:\/\/avatars1.githubusercontent.com\/u\/6308081?v=3&s=400","from_url":"https:\/\/github.com\/Storj\/kfs","thumb_width":400,"thumb_height":400,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1482513295.000127"},{"user":"U3J48LFUG","text":"<@U3J48LFUG|kfioktistov> has joined the channel","type":"message","subtype":"channel_join","ts":"1482758553.000129"},{"user":"U0ULK2JPP","text":"<@U0ULK2JPP|muralisr> has joined the channel","type":"message","subtype":"channel_join","ts":"1482965366.000130"},{"user":"U3CBDC0JG","text":"<@U3CBDC0JG|kenzhang> has joined the channel","type":"message","subtype":"channel_join","ts":"1482965371.000131"},{"type":"message","user":"U0ULK2JPP","text":"<@U3CBDC0JG> was inquiring about history query (assets, transactions etc) from the chaincode","ts":"1482965474.000134"},{"type":"message","user":"U3CBDC0JG","text":"thx <@U0ULK2JPP>. I am working on a healthcare prototype which would require capability to query transaction history with point in time query support","ts":"1482965710.000135"},{"type":"message","user":"U3CBDC0JG","text":"I am wondering if there is anything that I can help. I would love to contribute if it's appropriate","ts":"1482965819.000136"},{"type":"message","user":"U0ULK2JPP","text":"<@U1KFCPFQA> <@U0Z541B3P> would be able to share support from ledger\u2026 that support would be needed for chaincode access","ts":"1482965847.000137"},{"type":"message","user":"U0ULK2JPP","text":"that would be great, <@U3CBDC0JG> \u2026 we could collaborate from chaincode side when the support is ready","ts":"1482965895.000138"},{"type":"message","user":"U0ULK2JPP","text":"let me try and find some doc that <@U1KFCPFQA> put out there","ts":"1482965915.000139"},{"type":"message","user":"U0ULK2JPP","text":"<https:\/\/jira.hyperledger.org\/browse\/FAB-758>","ts":"1482966070.000140"},{"type":"message","user":"U0ULK2JPP","text":"slides 14 and 15 in that PPT have the sketch","ts":"1482966096.000141"},{"type":"message","user":"U3CBDC0JG","text":"great, thx","ts":"1482966113.000142"},{"type":"message","user":"U0ULK2JPP","text":"yw","ts":"1482966134.000143"},{"type":"message","user":"U2NNLN56V","text":"Hi, from one ledger_v1 document, \"Remove Table API from Hyperledger Fabric in v1  (FAB-1257)\u201d.  Will levelDB not be supported in v1?","ts":"1483441240.000144"},{"type":"message","user":"U1B9E51R8","text":"levelDB is supported by default <@U2NNLN56V>","ts":"1483446025.000145"},{"type":"message","user":"U1B9E51R8","text":"goleveldb","ts":"1483446037.000146"},{"type":"message","user":"U0PB67X4K","text":"<@U2NNLN56V> - the table APIs will be replaced with some wrapper functions around the \"range query\" APIs.  Basically the table APIs were a limited set of wrappers around these functions anyway","ts":"1483446420.000147"},{"user":"U18T2HJRM","text":"<@U18T2HJRM|greg_not_so> has joined the channel","type":"message","subtype":"channel_join","ts":"1483452952.000148"},{"type":"message","user":"U3CBDC0JG","text":"I am looking at the history manager and looks like we are trying to use couchdb to satisfy complex query requirements. I am a bit wondering if we considered using graphdb for history?","ts":"1483471809.000149"},{"type":"message","user":"U3CBDC0JG","text":"by nature, the history of assets are graphs, with a graphdb the path based queries would be a lot easier","ts":"1483471884.000150"},{"type":"message","user":"U1KFCPFQA","text":"Hi Ken, for \u2018simple provenance\u2019 scenarios we\u2019re finding that we can re-use the databases that are already delivered as  state database fairly simply.  For more complex historical query scenarios I agree there is value in a graph database.  There is some research into graph databases ongoing.","ts":"1483472273.000151"},{"type":"message","user":"U1KFCPFQA","text":"Is graphdb open source?","ts":"1483472294.000152"},{"type":"message","user":"U3CBDC0JG","text":"there are open source graph db such as titan","ts":"1483472394.000153"},{"type":"message","user":"U1KFCPFQA","text":"Would be great if you could help identify open source solutions and a proposed design of how to exploit","ts":"1483472407.000154"},{"type":"message","user":"U3CBDC0JG","text":"I am actually looking at integrating titan for history db","ts":"1483472440.000155"},{"type":"message","user":"U1KFCPFQA","text":"that would be great, can you provide a couple slides or something stating how data could be structured and queried?","ts":"1483472482.000156"},{"type":"message","user":"U3CBDC0JG","text":"while I might not be able to do this for my PoC, I will also looking into defining an interface that would allow plugin of different graph dbs","ts":"1483472526.000157","reactions":[{"name":"+1","users":["U0PB67X4K"],"count":1}]},{"type":"message","user":"U1KFCPFQA","text":"cool, would love to see what you propose","ts":"1483472549.000158"},{"type":"message","user":"U3CBDC0JG","text":"should I create a work item and attach any docs about it to that work item? thought it would be easier to keep track","ts":"1483472595.000159","reactions":[{"name":"pray","users":["U0PB67X4K"],"count":1}]},{"type":"message","user":"U1KFCPFQA","text":"yes, that would be great","ts":"1483472614.000160"},{"user":"U39S0S55F","text":"<@U39S0S55F|wangjie> has joined the channel","type":"message","subtype":"channel_join","ts":"1483503007.000161"},{"type":"message","user":"U39S0S55F","text":"hello everyone,I am reading the code about validateTx(),I do not understand the meaning of the  \"if updates.Exists(ns, kvRead.Key) {\n\t\t\t\treturn false, nil\n\t\t\t}\" ,somebody can help me,the code is following   \"","ts":"1483503129.000162"},{"type":"message","user":"U39S0S55F","text":"func (v *Validator) validateTx(txRWSet *rwset.TxReadWriteSet, updates *statedb.UpdateBatch) (bool, error) {\n\tfor _, nsRWSet := range txRWSet.NsRWs {\n\t\tns := nsRWSet.NameSpace\n\t\tfor _, kvRead := range nsRWSet.Reads {\n\t\t\tif updates.Exists(ns, kvRead.Key) {\n\t\t\t\treturn false, nil\n\t\t\t}\n\t\t\tversionedValue, err := v.db.GetState(ns, kvRead.Key)\n\t\t\tif err != nil {\n\t\t\t\treturn false, nil\n\t\t\t}\n\t\t\tvar committedVersion *version.Height\n\t\t\tif versionedValue != nil {\n\t\t\t\tcommittedVersion = versionedValue.Version\n\t\t\t}\n\t\t\tif !version.AreSame(committedVersion, kvRead.Version) {\n\t\t\t\tlogger.Debugf(\"Version mismatch for key [%s:%s]. Committed version = [%s], Version in readSet [%s]\",\n\t\t\t\t\tns, kvRead.Key, committedVersion, kvRead.Version)\n\t\t\t\treturn false, nil\n\t\t\t}\n\t\t}\n\t}\n\treturn true, nil\n}","ts":"1483503150.000163"},{"type":"message","user":"U2NNLN56V","text":"Hi, one question about lockbased-txmgr. 'read your writes\u2019 not supported?  I found lockBasedQueryExecutor would not query rwset.","ts":"1483528331.000164"},{"type":"message","user":"U1KFCPFQA","text":"<@U39S0S55F> \u2018updates\u2019 are the updates to be applied by prior trans in the block.  So if this transaction has read a key that has already been updated by a prior tran, we know right away that it will fail MVCC check, and can return false.","ts":"1483529903.000165"},{"type":"message","user":"U1KFCPFQA","text":"<@U2NNLN56V> \u2018read your writes\u2019 will not be supported.  We query the state database, which at simulation time is not yet updated.  Therefore there are no writes there to be read. This could be worked around easily enough for simple key reads, but not for complex queries that use the state database query engine, therefore we need to consistently not \u2018read your writes\u2019.  Remember, the transaction being simulated is simply a proposal of what to apply to the ledger\u2026 nothing has been written yet. This will need to be documented so that application developers keep it in mind when writing chaincode.  If they need to be aware of a prior write in the tran, they will need to factor that into the chaincode.","ts":"1483530294.000166"},{"type":"message","user":"U2NNLN56V","text":"If rwset is associated with transaction, it could be OK to \u2018read your writes\u2019?","ts":"1483532084.000167"},{"type":"message","user":"U2NNLN56V","text":"another question: same behaviour with couchdb-txmgr?","ts":"1483532171.000168"},{"type":"message","user":"U1KFCPFQA","text":"right, it could be ok to \u2018read your writes\u2019, however it is not practical, especially in the case of couchdb where we push down queries to the database engine.  It would not be practical to write a similar behaving query engine over the rwset.","ts":"1483536668.000169"},{"type":"message","user":"U1KFCPFQA","text":"better to delegate and leverage the capabilities of the battle tested database engines","ts":"1483536713.000170"},{"type":"message","user":"U39S0S55F","text":"<@U1KFCPFQA> Thank you!","ts":"1483578841.000171"},{"user":"U3NLGA0FP","text":"<@U3NLGA0FP|anandv> has joined the channel","type":"message","subtype":"channel_join","ts":"1483809853.000172"},{"type":"message","user":"U12452RAP","text":"<@U1KFCPFQA> <@U0Z541B3P>","ts":"1484032427.000173"},{"type":"message","user":"U12452RAP","text":"a question about block storage","ts":"1484032439.000174"},{"type":"message","user":"U12452RAP","text":"now it seems block bytes actually store in fs, but index store in leveldb, right?","ts":"1484032488.000175"},{"type":"message","user":"U0Z541B3P","text":"yes <@U12452RAP>. this is correct","ts":"1484032533.000176"},{"type":"message","user":"U12452RAP","text":":ok_hand:","ts":"1484032551.000177"},{"type":"message","user":"U12452RAP","text":"<@U0Z541B3P> another question, in ledger package, several places use 'int' and several place use 'uint64'. Should it be consistent? AFAIK, 'int' will have different bytes in different OS","ts":"1484038244.000178"},{"type":"message","user":"U12452RAP","text":"if no effect, I can help do a patch","edited":{"user":"U12452RAP","ts":"1484038831.000000"},"ts":"1484038819.000179"},{"type":"message","user":"U0Z541B3P","text":"<@U12452RAP> - mostly the numbers are used as uint64 either because they represent block number (which is a unit64) or because underlying library requires a unit64 (e.g., proto buf's varint encoding).\nPlease feel free to fix if you find some place in the code where this can be simplified.","ts":"1484041069.000181"},{"type":"message","user":"U12452RAP","text":":ok_hand::skin-tone-2:","ts":"1484042393.000182"},{"type":"message","user":"U3CBDC0JG","text":"<@U0ULK2JPP> do you know why in rwset.KVWrite there is no version information? (Version *version.Height)?","edited":{"user":"U3CBDC0JG","ts":"1484172289.000000"},"ts":"1484172120.000183"},{"type":"message","user":"U3CBDC0JG","text":"I can understand before it's commited there won't be version available but once it's commited, the RWSet is propagated to downstream components such as history","ts":"1484172199.000184"},{"type":"message","user":"U3CBDC0JG","text":"wouldn't it be useful to record the version information in the history too?","ts":"1484172213.000185"},{"type":"message","user":"U3CBDC0JG","text":"<@U1KFCPFQA> can you help with my question?","ts":"1484173650.000187"},{"type":"message","user":"U3CBDC0JG","text":"do you know why in rwset.KVWrite there is no version information? (Version *version.Height)?","ts":"1484173655.000188"},{"type":"message","user":"U1KFCPFQA","text":"you are right - we version based on block and tran number (height). but that is not yet known when the write set is going through the infrastructure. it is only known at commit time, and we do in fact use that information when writing to history.  the height is what makes the history record for a key unique.","ts":"1484173845.000189"},{"type":"message","subtype":"file_share","text":"<@U12452RAP|grapebaba> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/grapebaba\/F3R55043Z\/-.coffee|Untitled>","file":{"id":"F3R55043Z","created":1484190322,"timestamp":1484190322,"name":"-.coffee","title":"Untitled","mimetype":"text\/plain","filetype":"coffeescript","pretty_type":"CoffeeScript","user":"U12452RAP","editable":true,"size":171,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3R55043Z\/-.coffee?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3R55043Z\/download\/-.coffee?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/grapebaba\/F3R55043Z\/-.coffee","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F3R55043Z-f13046296c","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/grapebaba\/F3R55043Z\/-.coffee\/edit","preview":"\/\/ RawLedger implements methods required by 'raw ledger'\r\ntype RawLedger interface {\r\n\tLedger\r\n\t\/\/ CommitBlock adds a new block\r\n\tCommitBlock(block *common.Block) error\r","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre><span class=\"cm-string-2\">\/\/<\/span> <span class=\"cm-variable\">RawLedger<\/span> <span class=\"cm-variable\">implements<\/span> <span class=\"cm-variable\">methods<\/span> <span class=\"cm-variable\">required<\/span> <span class=\"cm-keyword\">by<\/span> <span class=\"cm-string\">'raw ledger'<\/span><\/pre><\/div>\n<div><pre><span class=\"cm-variable\">type<\/span> <span class=\"cm-variable\">RawLedger<\/span> <span class=\"cm-variable\">interface<\/span> <span class=\"cm-punctuation\">{<\/span><\/pre><\/div>\n<div><pre>\t<span class=\"cm-variable\">Ledger<\/span><\/pre><\/div>\n<div><pre>\t<span class=\"cm-string-2\">\/\/<\/span> <span class=\"cm-variable\">CommitBlock<\/span> <span class=\"cm-variable\">adds<\/span> <span class=\"cm-variable\">a<\/span> <span class=\"cm-keyword\">new<\/span> <span class=\"cm-variable\">block<\/span><\/pre><\/div>\n<div><pre>\t<span class=\"cm-variable\">CommitBlock<\/span><span class=\"cm-punctuation\">(<\/span><span class=\"cm-variable\">block<\/span> <span class=\"cm-operator\">*<\/span><span class=\"cm-variable\">common<\/span><span class=\"cm-punctuation\">.<\/span><span class=\"cm-property\">Block<\/span><span class=\"cm-punctuation\">)<\/span> <span class=\"cm-variable\">error<\/span><\/pre><\/div>\n<\/div>\n<\/div>\n","lines":6,"lines_more":1,"preview_is_truncated":false,"channels":["C2GFRAE7P"],"groups":[],"ims":[],"comments_count":0},"user":"U12452RAP","upload":true,"display_as_bot":false,"username":"<@U12452RAP|grapebaba>","bot_id":null,"ts":"1484190322.000190"},{"type":"message","subtype":"file_share","text":"<@U12452RAP|grapebaba> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/grapebaba\/F3QE8P07L\/-.coffee|Untitled>","file":{"id":"F3QE8P07L","created":1484190339,"timestamp":1484190339,"name":"-.coffee","title":"Untitled","mimetype":"text\/plain","filetype":"coffeescript","pretty_type":"CoffeeScript","user":"U12452RAP","editable":true,"size":1180,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3QE8P07L\/-.coffee?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3QE8P07L\/download\/-.coffee?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/grapebaba\/F3QE8P07L\/-.coffee","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F3QE8P07L-ae731df9bb","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/grapebaba\/F3QE8P07L\/-.coffee\/edit","preview":"type ValidatedLedger interface {\r\n\tLedger\r\n\t\/\/ GetTransactionByID retrieves a transaction by id\r\n\tGetTransactionByID(txID string) (*pb.Transaction, error)\r\n\t\/\/ GetBlockByHash returns a block given it's hash\r","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre><span class=\"cm-variable\">type<\/span> <span class=\"cm-variable\">ValidatedLedger<\/span> <span class=\"cm-variable\">interface<\/span> <span class=\"cm-punctuation\">{<\/span><\/pre><\/div>\n<div><pre>\t<span class=\"cm-variable\">Ledger<\/span><\/pre><\/div>\n<div><pre>\t<span class=\"cm-string-2\">\/\/<\/span> <span class=\"cm-variable\">GetTransactionByID<\/span> <span class=\"cm-variable\">retrieves<\/span> <span class=\"cm-variable\">a<\/span> <span class=\"cm-variable\">transaction<\/span> <span class=\"cm-keyword\">by<\/span> <span class=\"cm-variable\">id<\/span><\/pre><\/div>\n<div><pre>\t<span class=\"cm-variable\">GetTransactionByID<\/span><span class=\"cm-punctuation\">(<\/span><span class=\"cm-variable\">txID<\/span> <span class=\"cm-variable\">string<\/span><span class=\"cm-punctuation\">)<\/span> <span class=\"cm-punctuation\">(<\/span><span class=\"cm-operator\">*<\/span><span class=\"cm-variable\">pb<\/span><span class=\"cm-punctuation\">.<\/span><span class=\"cm-property\">Transaction<\/span><span class=\"cm-punctuation\">,<\/span> <span class=\"cm-variable\">error<\/span><span class=\"cm-punctuation\">)<\/span><\/pre><\/div>\n<div><pre>\t<span class=\"cm-string-2\">\/\/<\/span> <span class=\"cm-variable\">GetBlockByHash<\/span> <span class=\"cm-variable\">returns<\/span> <span class=\"cm-variable\">a<\/span> <span class=\"cm-variable\">block<\/span> <span class=\"cm-variable\">given<\/span> <span class=\"cm-variable\">it<\/span><span class=\"cm-string\">'s hash<\/span><\/pre><\/div>\n<\/div>\n<\/div>\n","lines":21,"lines_more":16,"preview_is_truncated":true,"channels":["C2GFRAE7P"],"groups":[],"ims":[],"comments_count":0},"user":"U12452RAP","upload":true,"display_as_bot":false,"username":"<@U12452RAP|grapebaba>","bot_id":null,"ts":"1484190340.000191"},{"type":"message","user":"U12452RAP","text":"<@U0Z541B3P> <@U1KFCPFQA> seems commit method have same semantic with commitblock method in rawledger","ts":"1484190402.000192"},{"type":"message","user":"U12452RAP","text":"so what about just make commit method in ledger interface, and rawledger interface seems no need or ValidatedLedger embedded rawledger interface","ts":"1484190502.000193"},{"type":"message","user":"U0Z541B3P","text":"<@U12452RAP> good catch. Short history behind this is that... earlier it was designed such that a peer would maintain two ledgers a raw ledger and a validated ledger. The modules outside ledger would commit to only raw ledger and committing to validated ledger would an internal operation and hence only public method exposed to the outside world was the CommitBlock method in raw ledger. \n\nLater, things changed and commit method got added to validated ledger. Now, it makes sense to move the method to a common place. \n\nHowever, before you make this change please go through this PR <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3575\/> and better to wait for this to be merged.","edited":{"user":"U0Z541B3P","ts":"1484196611.000000"},"ts":"1484196522.000194"},{"type":"message","user":"U12452RAP","text":":ok_hand::skin-tone-2:","ts":"1484200161.000196"},{"type":"message","subtype":"file_share","text":"<@U12452RAP|grapebaba> uploaded a file: <https:\/\/hyperledgerproject.slack.com\/files\/grapebaba\/F3R1P2BS6\/-.coffee|Untitled>","file":{"id":"F3R1P2BS6","created":1484279204,"timestamp":1484279204,"name":"-.coffee","title":"Untitled","mimetype":"text\/plain","filetype":"coffeescript","pretty_type":"CoffeeScript","user":"U12452RAP","editable":true,"size":522,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3R1P2BS6\/-.coffee?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","url_private_download":"https:\/\/files.slack.com\/files-pri\/T0J024XGA-F3R1P2BS6\/download\/-.coffee?t=xoxe-18002167554-139099126023-137701436192-e599afc92e","permalink":"https:\/\/hyperledgerproject.slack.com\/files\/grapebaba\/F3R1P2BS6\/-.coffee","permalink_public":"https:\/\/slack-files.com\/T0J024XGA-F3R1P2BS6-ab0d395846","edit_link":"https:\/\/hyperledgerproject.slack.com\/files\/grapebaba\/F3R1P2BS6\/-.coffee\/edit","preview":"func constructBlockNumTranNumKey(blockNum uint64, txNum uint64) []byte {\r\n\tblkNumBytes := util.EncodeOrderPreservingVarUint64(blockNum)\r\n\ttranNumBytes := util.EncodeOrderPreservingVarUint64(txNum)\r\n\tkey := append(blkNumBytes, tranNumBytes...)\r\n\treturn append([]byte{blockNumTranNumIdxKeyPrefix}, key...)\r","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre><span class=\"cm-variable\">func<\/span> <span class=\"cm-variable\">constructBlockNumTranNumKey<\/span><span class=\"cm-punctuation\">(<\/span><span class=\"cm-variable\">blockNum<\/span> <span class=\"cm-variable\">uint64<\/span><span class=\"cm-punctuation\">,<\/span> <span class=\"cm-variable\">txNum<\/span> <span class=\"cm-variable\">uint64<\/span><span class=\"cm-punctuation\">)<\/span> <span class=\"cm-punctuation\">[<\/span><span class=\"cm-punctuation\">]<\/span><span class=\"cm-variable\">byte<\/span> <span class=\"cm-punctuation\">{<\/span><\/pre><\/div>\n<div><pre>\t<span class=\"cm-variable\">blkNumBytes<\/span> <span class=\"cm-punctuation\">:<\/span><span class=\"cm-punctuation\">=<\/span> <span class=\"cm-variable\">util<\/span><span class=\"cm-punctuation\">.<\/span><span class=\"cm-property\">EncodeOrderPreservingVarUint64<\/span><span class=\"cm-punctuation\">(<\/span><span class=\"cm-variable\">blockNum<\/span><span class=\"cm-punctuation\">)<\/span><\/pre><\/div>\n<div><pre>\t<span class=\"cm-variable\">tranNumBytes<\/span> <span class=\"cm-punctuation\">:<\/span><span class=\"cm-punctuation\">=<\/span> <span class=\"cm-variable\">util<\/span><span class=\"cm-punctuation\">.<\/span><span class=\"cm-property\">EncodeOrderPreservingVarUint64<\/span><span class=\"cm-punctuation\">(<\/span><span class=\"cm-variable\">txNum<\/span><span class=\"cm-punctuation\">)<\/span><\/pre><\/div>\n<div><pre>\t<span class=\"cm-variable\">key<\/span> <span class=\"cm-punctuation\">:<\/span><span class=\"cm-punctuation\">=<\/span> <span class=\"cm-variable\">append<\/span><span class=\"cm-punctuation\">(<\/span><span class=\"cm-variable\">blkNumBytes<\/span><span class=\"cm-punctuation\">,<\/span> <span class=\"cm-variable\">tranNumBytes<\/span><span class=\"cm-punctuation\">...<\/span><span class=\"cm-punctuation\">)<\/span><\/pre><\/div>\n<div><pre>\t<span class=\"cm-keyword\">return<\/span> <span class=\"cm-variable\">append<\/span><span class=\"cm-punctuation\">(<\/span><span class=\"cm-punctuation\">[<\/span><span class=\"cm-punctuation\">]<\/span><span class=\"cm-variable\">byte<\/span><span class=\"cm-punctuation\">{<\/span><span class=\"cm-variable\">blockNumTranNumIdxKeyPrefix<\/span><span class=\"cm-punctuation\">}<\/span><span class=\"cm-punctuation\">,<\/span> <span class=\"cm-variable\">key<\/span><span class=\"cm-punctuation\">...<\/span><span class=\"cm-punctuation\">)<\/span><\/pre><\/div>\n<\/div>\n<\/div>\n","lines":15,"lines_more":10,"preview_is_truncated":false,"channels":["C2GFRAE7P"],"groups":[],"ims":[],"comments_count":0},"user":"U12452RAP","upload":true,"display_as_bot":false,"username":"<@U12452RAP|grapebaba>","bot_id":null,"ts":"1484279204.000197"},{"type":"message","user":"U12452RAP","text":"<@U0Z541B3P> <@U1KFCPFQA> <@U1KJLGH8D> what it the purpose use two different encoding util method for blocknum?","ts":"1484279302.000198"},{"type":"message","user":"U0Z541B3P","text":"<@U12452RAP> these are used for different purposes. Where you need a simple encoding\/decoding of a number, proto's varint encoding is sufficient. However, the sort order of bytes obtained from proto's varint encoding\/decoding (if you sort based on bytes comparison - as many key-value stores do) is not same as the sort order of numbers. So, wherever it's desired to maintain the same sort order (e.g., for range scan over goleveldb), we use this custom method `EncodeOrderPreservingVarUint64` - which preserves the sort order.","ts":"1484282762.000199"},{"type":"message","user":"U12452RAP","text":"Thanks, very clear ","ts":"1484282846.000200"},{"user":"U195M30MD","text":"<@U195M30MD|nickmelis> has joined the channel","type":"message","subtype":"channel_join","ts":"1484643178.000201"},{"type":"message","user":"U195M30MD","text":"<@U1KFCPFQA> I have a question about Table API and someone suggested to ask you directly in here","ts":"1484644164.000202"},{"type":"message","user":"U195M30MD","text":"first question is why the go version has a getRows() method and the Java one doesn\u2019t?","ts":"1484644205.000203"},{"type":"message","user":"U195M30MD","text":"also, how does it work in the background? does it just use the state?","ts":"1484644230.000204"},{"type":"message","user":"U1KFCPFQA","text":"<@U195M30MD> Table API uses the same state db key-value structure under the covers.  It creates a composite key based on the keys you provide.  getRows() enables partial key queries where you pass in a set of partial keys, but the major limitation is that you have to query the partial keys left to right only - you cannot query on arbitrary keys.","ts":"1484645231.000205"},{"type":"message","user":"U1KFCPFQA","text":"Project teams have found that the table metaphor did not map well over key-value database. Instead of a implementing a series of patches on top of an imperfect metaphor, it was decided to not support table api in v1 and instead encourage projects to model data as JSON and persist the exact composite keys that they need for their requirements. New chaincode APIs CreateCompositeKey() and PartialCompositeKeyQuery() have been implemented to assist chaincode developers with querying based on a subset of keys, to fulfill their query requirements in a more controllable manner.\nSee gerrit changeset: <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/3649\/>\nSee Jira item for more details: <https:\/\/jira.hyperledger.org\/browse\/FAB-1257>","ts":"1484645237.000206"},{"type":"message","user":"U195M30MD","text":"thanks <@U1KFCPFQA> that was useful. I was struggling with the concept of partial key search when the key is arbitrary.","ts":"1484645323.000207"},{"type":"message","user":"U1KFCPFQA","text":"Right, if you have two keys you want to query on, you\u2019ll need to persist as two items so that you can query on either one","ts":"1484645386.000208"},{"type":"message","user":"U1KFCPFQA","text":"Also, in v1 there is beta support for CouchDB which allows queries on the JSON content itself","ts":"1484645429.000209"},{"type":"message","user":"U195M30MD","text":"ok so if I have a structure A B C D where A B and C are keys, and I want to query for a certain value of A and C (but any B), I would need to store the record in the map as A -&gt; D, B -&gt; D and C -&gt; D and then query over A and C and merge the results?","ts":"1484645491.000210"},{"type":"message","user":"U1KFCPFQA","text":"You would persist a key of A-C-B and do a range query to pick up all the A-Cs","ts":"1484645554.000211"},{"type":"message","user":"U195M30MD","text":"and then a key of A-B-C if I want to range query for A and B right?","ts":"1484645622.000212"},{"type":"message","user":"U1KFCPFQA","text":"The new APIs abstract this for you, so that you can simply pass in A-C into the query","ts":"1484645629.000213"},{"type":"message","user":"U1KFCPFQA","text":"right","ts":"1484645638.000214"},{"type":"message","user":"U195M30MD","text":"unfortunately I\u2019m using v0.6 so I have to use either table API or build something myself","ts":"1484645669.000215"},{"type":"message","user":"U1KFCPFQA","text":"right - those utility methods are not complex - you can look at the changeset and do the same thing yourself in 0.6","ts":"1484645709.000216"},{"type":"message","user":"U1KFCPFQA","text":"if you intent to port to v1 eventually, better to not use table api","ts":"1484645737.000217"},{"type":"message","user":"U195M30MD","text":"yeah, that\u2019s why I would like not to use them","ts":"1484645766.000218"},{"type":"message","user":"U195M30MD","text":"here\u2019s another question, could I store all my records in a map of objects in my chaincode? What\u2019s the disadvantage of not using the state?","ts":"1484645794.000219"},{"type":"message","user":"U1KFCPFQA","text":"if you want the data persisted across transactions, you have to persist to state database","ts":"1484645845.000220"},{"type":"message","user":"U195M30MD","text":"ok I see","ts":"1484645872.000221"},{"type":"message","user":"U195M30MD","text":"just thinking about Ethereum smart contracts, where you can have local variables in your contract and they are also part of the world state","ts":"1484645902.000222"},{"type":"message","user":"U195M30MD","text":"I guess in Hyperledger the state is only what you put in the state database right?","ts":"1484645922.000223"},{"type":"message","user":"U1KFCPFQA","text":"right","ts":"1484645926.000224"},{"type":"message","user":"U195M30MD","text":"ok I think I get it","ts":"1484645986.000225"},{"type":"message","user":"U195M30MD","text":"dave.enyeart [9:37 AM] \nif you want the data persisted across transactions, you have to persist to state database","ts":"1484646026.000226"},{"type":"message","user":"U195M30MD","text":"just one more question about it, what happens if I store my records in a map within the chaincode? When does it get wiped out?","ts":"1484646051.000227"},{"type":"message","user":"U195M30MD","text":"I guess whenever you re-init the chaincode?","ts":"1484646063.000228"},{"type":"message","user":"U195M30MD","text":"just thinking about having the record (with composite key) persisted in the state db and some indexes stored in my chaincode","ts":"1484646097.000229"},{"type":"message","user":"U195M30MD","text":"something like id -&gt; A B C D and then indexes like A B -&gt; D, A C -&gt; D, B C -&gt; D etc","ts":"1484646176.000230"},{"type":"message","user":"U1KFCPFQA","text":"what do you mean by \u2018stored in my chaincode\u2019?  if it is not persisted, it would be local to the transaction, and would get wiped out when the tran ends.","ts":"1484646236.000231"},{"type":"message","user":"U195M30MD","text":"stored in my chaincode = a map declared in my chaincode class and populated on init()","ts":"1484646282.000232"},{"type":"message","user":"U195M30MD","text":"sorry scrap the last part, I just mean a local class variable in my chaincode class","ts":"1484646326.000233"},{"type":"message","user":"U195M30MD","text":"items can be added to the map with every invoke()","ts":"1484646352.000234"},{"type":"message","user":"U1KFCPFQA","text":"if the peer gets restarted you would lose that right","ts":"1484646380.000235"},{"type":"message","user":"U195M30MD","text":"that was my question","ts":"1484646428.000236"},{"type":"message","user":"U195M30MD","text":"so whenever I restart the chaincode, I would have to re-populate the indexes","ts":"1484646446.000237"},{"type":"message","user":"U1KFCPFQA","text":"yes, but you are not in control of that if the peer restarts right","ts":"1484646488.000238"},{"type":"message","user":"U195M30MD","text":"I need to ask another question here: does init() get called when the peer start?","ts":"1484646556.000239"},{"type":"message","user":"U195M30MD","text":"I guess in dev mode, whenever you start\/restart the peer, you\u2019ll have to restart the chaincode too, which will then require a new deploy, thus a init() invocation","ts":"1484646584.000240"},{"type":"message","user":"U1KFCPFQA","text":"no, only on chaincode deploy - intent is to populate initial state (persisted)","ts":"1484646586.000241"},{"type":"message","user":"U195M30MD","text":"so, when the peer restarts, do I need to redeploy the chaincode?","ts":"1484646670.000242"},{"type":"message","user":"U195M30MD","text":"I guess the answer is no, right?","ts":"1484646678.000243"},{"type":"message","user":"U1KFCPFQA","text":"no need to redeploy","ts":"1484646702.000244"},{"type":"message","user":"U195M30MD","text":"and there\u2019s no way to detect a peer restart from within the chaincode right?","ts":"1484646728.000245"},{"type":"message","user":"U1KFCPFQA","text":"the chaincode itself is persisted as state","ts":"1484646728.000246"},{"type":"message","user":"U1KFCPFQA","text":"right","ts":"1484646734.000247"},{"type":"message","user":"U195M30MD","text":"ok so everything would have to be stored in the state","ts":"1484646750.000248"},{"type":"message","user":"U195M30MD","text":"which is only a map&lt;String, String&gt; right?","ts":"1484646760.000249"},{"type":"message","user":"U1KFCPFQA","text":"yes","ts":"1484646764.000250"},{"type":"message","user":"U1KFCPFQA","text":"actually String, []byte","ts":"1484646799.000251"},{"type":"message","user":"U195M30MD","text":"ok I think I get the picture now","ts":"1484646890.000252"},{"type":"message","user":"U195M30MD","text":"I may go with composite keys and query only for A, or AB, or ABC then","edited":{"user":"U195M30MD","ts":"1484646916.000000"},"ts":"1484646913.000253"},{"type":"message","user":"U195M30MD","text":"thanks a lot <@U1KFCPFQA>","ts":"1484646944.000255"},{"type":"message","user":"U1KFCPFQA","text":"my pleasure","ts":"1484646964.000256"},{"type":"message","user":"U195M30MD","text":"I guess with v1.0 the state will be stored in CouchDB which will allow to query for partial text right?","ts":"1484647046.000257"},{"type":"message","user":"U195M30MD","text":"so no need for composite keys or stuff like that?","ts":"1484647056.000258"},{"type":"message","user":"U12452RAP","text":"<@U0Z541B3P> about <https:\/\/jira.hyperledger.org\/browse\/FAB-1187>","ts":"1484714913.000259"},{"type":"message","user":"U12452RAP","text":"could you describe more detail","ts":"1484714929.000260"},{"type":"message","user":"U12452RAP","text":"such as why couchDB cannot support","ts":"1484714948.000261"},{"type":"message","user":"U12452RAP","text":"many thanks","ts":"1484714952.000262"},{"type":"message","user":"U0Z541B3P","text":"<@U12452RAP> - not specific about couch - in general when providing support for rich queries, for supporting RYW phenomenon in transactions, a query engine needs to operate the committed data + delta caused by the previous writes of a transaction. For instance, in two phase locking in rdbms, a transaction would lock a page and further queries in the transaction would consider the modified page. Now, for couch - as of now, the transaction mgmt is implemented on top of couch and couch query engine would have no clue about the changes caused by a tran.","ts":"1484715610.000263"},{"type":"message","user":"U12452RAP","text":":ok_hand:need some time to understand","ts":"1484716215.000264"},{"type":"message","user":"U12452RAP","text":"thanks","ts":"1484716223.000265"},{"user":"U1GRJD9NC","text":"<@U1GRJD9NC|yuki.k> has joined the channel","type":"message","subtype":"channel_join","ts":"1484754987.000266"},{"user":"U0W7D64LC","text":"<@U0W7D64LC|markparz> has joined the channel","type":"message","subtype":"channel_join","ts":"1484763971.000267"},{"type":"message","user":"U12452RAP","text":"<@U0Z541B3P> <@U1KFCPFQA> about <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/4113\/>, would you like give some comments in <https:\/\/jira.hyperledger.org\/browse\/FAB-1618>","ts":"1484875859.000268"},{"type":"message","user":"U12452RAP","text":"many thanks","ts":"1484875864.000269"},{"type":"message","user":"U1KFCPFQA","text":"<@U12452RAP> , since <@U0Z541B3P> added the ledger providers I will defer to Manish\u2019s judgement.","ts":"1484881938.000270"},{"type":"message","user":"U12452RAP","text":"Sure","ts":"1484882461.000271"},{"type":"message","user":"U0Z541B3P","text":"<@U12452RAP> - I just commented on your change-set. Sorry for the delay... was a bit occupied","ts":"1484883624.000272"},{"type":"message","user":"U12452RAP","text":"<@U0Z541B3P>: leave a comment there, wish your reply ","ts":"1484886602.000273"},{"user":"U10SJMAHH","text":"<@U10SJMAHH|sachikoy> has joined the channel","type":"message","subtype":"channel_join","ts":"1485494889.000274"},{"type":"message","user":"U0YJUECE8","text":"hopefully an easy question...  was reading deck from FAB-758... what an awesome deck!  anyway,  can the Query System Chaincode (QSCC) be invoked against a peer that is acting only as a committer?","ts":"1485629616.000275"},{"type":"message","user":"U1KFCPFQA","text":"yes, all committers can act as an endorser.  since the QSCC queries will not get submitted as transactions, there is no endorsement policy that needs to be met.","ts":"1485630104.000276"},{"type":"message","user":"U1KFCPFQA","text":"so the QSCC queries can go against any peer, using the normal Proposal \u2014&gt; Proposal Response endorser flow","ts":"1485630154.000277"},{"type":"message","user":"U1KFCPFQA","text":"<@U0YJUECE8> I\u2019m always iterating the deck in FAB-758, so let me know if anything else is unclear and I can edit","ts":"1485630188.000278"},{"type":"message","user":"U0YJUECE8","text":"<@U1KFCPFQA>  tyvm for the answer!  if you do find room for improvement, then you've made a great thing greater still!","ts":"1485630350.000279"},{"type":"message","user":"U1KFCPFQA","text":"thanks for the feedback :slightly_smiling_face:","ts":"1485630388.000280"},{"type":"message","user":"U0YJUECE8","text":"while you have the deck open,  one question I have is, is there a configuration parameter or something that differentiates endorser vs. committer, or is it just that, when you deploy chaincode in v1.0, part of that act is targeting the set of peers that you wish to be endorsers for that chaincode","ts":"1485630493.000281"},{"type":"message","user":"U1KFCPFQA","text":"the chaincode gets deployed to all peers.  all peers can act as endorsers.  as part of the chaincode deploy you can specify an endorsement policy, which will be checked at commit time.  so, all peers can act as endorsers, but the endorsement policy may enforce that only endorsements from a subset will yield valid transactions.","ts":"1485630683.000282"},{"type":"message","user":"U1KFCPFQA","text":"for example, the endorsement policy may state that you need M of N endorsements.  where M is valid endorsements and N is the total number of peers","ts":"1485630818.000283"},{"type":"message","user":"U1KFCPFQA","text":"if you want more details than that, you\u2019ll have to go over to fabric-peer-dev :slightly_smiling_face:","ts":"1485630856.000284"},{"type":"message","user":"U0YJUECE8","text":"understand, and thanks again for the answers, especially given how busy I can imagine you guys are this weekend....I think any further questions of this nature I'll defer until the v1.0.0-alpha docker images are cut.","ts":"1485630943.000285"},{"type":"message","user":"U0PB67X4K","text":"<@U1KFCPFQA>  <@U0Z541B3P>  -  looking at <https:\/\/gerrit.hyperledger.org\/r\/#\/c\/5011\/>  reminded me that I've been meaning to ask \/ suggest something for a while now (but forgot given how much churn there is)\n\nI thing we need to be able to provide \"external\" query functions which allow us to get a key and\/or range of keys and this should work regardless of the underlying database.  It's basically exposing the \"GetState\" and range query functions outside of chaincode.  IMHO, it's a *terrible* experience to use the proposal \/ chaincode invoke if I simply want to get the current value(s) of a (range of) key(s)","ts":"1485779461.000286"},{"type":"message","user":"U1KFCPFQA","text":"<@U0PB67X4K> <@U0KN2SSKE> I was thinking the same thing - we expose rich query via QSCC, but not GetState and GetRange.  For symmetry those should be exposed to QSCC as well.  There will be people that don\u2019t like this (they want everything to go through application chaincode), and for them we can give them an option to disable QSCC functions until such time that we have ACL support on the QSCC functions.   This being said, QSCC will still require Proposal\/ProposalResponse communication, it\u2019s just that it\u2019s provided in an out of the box system chaincode vs requiring custom chaincode.","ts":"1485784233.000287"},{"type":"message","user":"U1KFCPFQA","text":"(we decided to implement external ledger APIs as QSCC vs grpc, since clients already know how to work with chaincodes.  are you proposing we re-visit that?)","ts":"1485784331.000288"},{"type":"message","user":"U0PB67X4K","text":"Hey Dave - makes sense on adding to qscc (and ability to disable \/ access control).   My preference would be to not use the proposal\/proposalresponse mechanism, but its more important to expose the functions IMHO and then we can revisit the actual API","ts":"1485784654.000289"},{"type":"message","user":"U1KFCPFQA","text":"makes sense, as a first step we\u2019ll expand the QSCC after alpha.  Then we can have a broader conversation about whether to bake these in as peer GRPC apis (Binh was hesitant)","edited":{"user":"U1KFCPFQA","ts":"1485785045.000000"},"ts":"1485785013.000290"},{"user":"U1HFNJB50","text":"<@U1HFNJB50|c0rwin> has joined the channel","type":"message","subtype":"channel_join","ts":"1485787623.000292"},{"user":"U3V4G8HUZ","text":"<@U3V4G8HUZ|sagmeister> has joined the channel","type":"message","subtype":"channel_join","ts":"1485787942.000293"},{"user":"U3BH74NH0","text":"<@U3BH74NH0|passkit> has joined the channel","type":"message","subtype":"channel_join","ts":"1485832596.000294"},{"type":"message","user":"U0KN2SSKE","text":"<@U1KFCPFQA> I am concerned about our security model \u2014 the rich query really bypassing the chaincode security.  The keys are scoped with the chaincode which creates them;  now we open a back door where chaincodes would no longer in control.  The sec model would be broken","ts":"1485878825.000295"},{"type":"message","user":"U1KFCPFQA","text":"<@U0KN2SSKE> <@U0PB67X4K>  We have talked about three things in this space to control query access:\n1) Ability to disable GetQueryResult() peer (qscc) API for cases where all queries should go through application chaincode\n2) Within application chaincode, the query will be scoped to that chaincode only. This will be enforced using the envelope data wrapper that was recently introduced over the couch key value data.  The envelope will include \u2018chaincodeid\u2019 and in the query we will inject a constraint where chaincodeid=&lt;current chaincode context&gt;.  We could also decide to use a couch database per chain-chaincode, rather than a couch database per chain (like we do now).\n3) Application chaincode can use parameterized query as in the marbles02 example, rather than allowing query string to be passed in.  Parameters are passed into the chaincode.  The query is defined in the application chaincode and only the allowed parameters are substituted in (similar to jdbc query parameters used in java application code).","edited":{"user":"U1KFCPFQA","ts":"1485880716.000000"},"ts":"1485880416.000296"},{"type":"message","user":"U1KFCPFQA","text":"Does this meet the security requirements?  For organizations that want the ability to query anything on their peer, they have the option to open that up.  We\u2019ll need to decide if the qscc query APIs should be enabled or disabled by default.  Security is one reason Couch is beta in v1.  We\u2019d like to get community feedback before finalizing things.","edited":{"user":"U1KFCPFQA","ts":"1485880855.000000"},"ts":"1485880561.000297"},{"type":"message","user":"U1KFCPFQA","text":"Gari has also mentioned he\u2019d like GetState() and GetRange() added to qscc, for customers that want to query ledger without going through application chaincode.","ts":"1485880602.000298"},{"type":"message","user":"U0W7D64LC","text":"Check out the latest ledger playback w\/couchdb! <https:\/\/youtu.be\/XoW9gjAH93k> \u2026 if you haven\u2019t subscribed to the youtube channel do so for auto notifications at <https:\/\/www.youtube.com\/channel\/UCCFdgCWH_1vCndMPVqQlwZw>","attachments":[{"service_name":"YouTube","service_url":"https:\/\/www.youtube.com\/","title":"Fabric v1 Ledger DataPatterns","title_link":"https:\/\/youtu.be\/XoW9gjAH93k","author_name":"Hyperledger Fabric","author_link":"https:\/\/www.youtube.com\/channel\/UCCFdgCWH_1vCndMPVqQlwZw","fallback":"YouTube Video: Fabric v1 Ledger DataPatterns","video_html":"<iframe width=\"400\" height=\"300\" src=\"https:\/\/www.youtube.com\/embed\/XoW9gjAH93k?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allowfullscreen><\/iframe>","video_html_width":400,"video_html_height":300,"from_url":"https:\/\/youtu.be\/XoW9gjAH93k","service_icon":"https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png","id":1}],"ts":"1485893662.000303"},{"user":"U3S8HRGLV","text":"<@U3S8HRGLV|marcusvcs> has joined the channel","type":"message","subtype":"channel_join","ts":"1485951646.000305"},{"type":"message","user":"U184J2R7S","text":"hi everybody, in case you have not heard, linux foundation is moving us off of Slack and onto Rocket.Chat, everybody in Slack can log in to the new chat server using your existing linux foundation ID, please visit <http:\/\/chat.hyperledger.org\/> to login to the new chat server","ts":"1486078871.000306"},{"type":"message","user":"U1CTBUNEN","text":"quick question for the DB guys","ts":"1486150511.000307"},{"type":"message","user":"U1CTBUNEN","text":"since the new content query methods don\u2019t invoke any actual transactions, what security methods are put in place in order to protect unauthorized access to the query calls ?","ts":"1486150559.000308"},{"type":"message","user":"U0KM61BCP","text":"you can add an ACL policy to the chaincode","ts":"1486152289.000309"},{"type":"message","user":"U1KFCPFQA","text":"<@U1CTBUNEN> If you are talking about Query System Chaincode (QSCC) APIs, there will likely be an option to disable these and force clients through application chaincode instead.  And as Chris says, application chaincode can enforce the more granular access control","ts":"1486152457.000310"},{"type":"message","user":"U1KFCPFQA","text":"Access control on QSCC itself is intended for future, but in the interim the answer is to use application chaincode","ts":"1486152531.000311"},{"type":"message","user":"U1CTBUNEN","text":"I\u2019m specifically referring to the CouchDB query option","ts":"1486155317.000312"},{"type":"message","user":"U1CTBUNEN","text":"is that QSCC or that\u2019s chaincode","ts":"1486155333.000313"},{"type":"message","user":"U1KFCPFQA","text":"Yes, the pre-deployed QSCC GetQueryResult() does the couch rich query.  Or you can call GetQueryResult() from application chaincode yourself.  The former will be able to be enabled\/disabled.  The latter can be ACLed via normal chaincode methods","ts":"1486155408.000314"},{"type":"message","user":"U1CTBUNEN","text":"what\u2019s the latest on the ACL front","ts":"1486155803.000315"},{"type":"message","user":"U1CTBUNEN","text":"I know this piece was being reworked in the past months","ts":"1486155818.000316"},{"type":"message","user":"U1CTBUNEN","text":"any up-to-date docs I can take a look at or may be an example ?","ts":"1486155839.000317"},{"type":"message","user":"U1KFCPFQA","text":"I haven\u2019t heard the latest, I believe the technique in this sample is still valid:","ts":"1486156441.000318"},{"type":"message","user":"U1KFCPFQA","text":"<https:\/\/github.com\/hyperledger\/fabric\/tree\/master\/examples\/chaincode\/go\/asset_management>","attachments":[{"service_name":"GitHub","title":"hyperledger\/fabric","title_link":"https:\/\/github.com\/hyperledger\/fabric\/tree\/master\/examples\/chaincode\/go\/asset_management","text":"Read-only mirror of <https:\/\/gerrit.hyperledger.org\/r\/#\/admin\/projects\/fabric>","fallback":"GitHub: hyperledger\/fabric","thumb_url":"https:\/\/avatars3.githubusercontent.com\/u\/7657900?v=3&s=400","from_url":"https:\/\/github.com\/hyperledger\/fabric\/tree\/master\/examples\/chaincode\/go\/asset_management","thumb_width":142,"thumb_height":142,"service_icon":"https:\/\/github.com\/apple-touch-icon.png","id":1}],"ts":"1486156443.000319"},{"type":"message","user":"U1KFCPFQA","text":"I\u2019d suggest reach out to fabric-crypto for latest info","ts":"1486156464.000321"},{"user":"U3YUF8ZCH","text":"<@U3YUF8ZCH|schwentker> has joined the channel","type":"message","subtype":"channel_join","ts":"1486237211.000322"},{"user":"U0UHG4VP1","text":"<@U0UHG4VP1|ry> has joined the channel","type":"message","subtype":"channel_join","ts":"1486508330.000323"},{"type":"message","user":"U0UHG4VP1","text":"please migrate to <https:\/\/chat.hyperledger.org\/>","ts":"1486508332.000324"},{"user":"U0UHG4VP1","members":["U0KM61BCP","U0KMJF9AA","U0KN2SSKE","U0N4P17ND","U0NCW1DPX","U0P2GSA8Z","U0PB67X4K","U0PU2N50V","U0PV6MUD6","U0Q6BA1EU","U0UHG4VP1","U0ULK2JPP","U0W7D64LC","U0XV1HDL3","U0Y14MWA2","U0YJUECE8","U0Z541B3P","U10SJMAHH","U12452RAP","U12AHQ3NK","U143D0EQ4","U184J2R7S","U18T2HJRM","U195M30MD","U1B9E51R8","U1CPB11D0","U1CTBUNEN","U1D89DP47","U1F3CQ2HX","U1GN670VD","U1GRJD9NC","U1HFNJB50","U1KDHJT6H","U1KFCPFQA","U1KJLGH8D","U1L1D0SP4","U1V6SJ1FF","U1VG8LNP3","U1WAADD4N","U2231CUH3","U231ZGXDG","U23S3DPFY","U24JMTPRQ","U24M29R4G","U24PWBB97","U29TR7HFH","U2A5NPBQ9","U2AS0GVSP","U2B3A70TX","U2BGFAHC7","U2GT93M2T","U2JCD7N7R","U2L9F7VL1","U2LGFBFNJ","U2M6CU41G","U2MCH9EEB","U2NDE1ZCK","U2NG5AX0A","U2NNF5FS6","U2NNLN56V","U2P0N5J5A","U2U1GAVL3","U2UU1LKTR","U2WL051HN","U2X9KDDL7","U32LDD9JA","U36RKMPBQ","U388YPQ1K","U38H8MS11","U38JCNW5V","U39S0S55F","U3AFRMY68","U3BH74NH0","U3CBDC0JG","U3H68QR7X","U3J48LFUG","U3NLGA0FP","U3S8HRGLV","U3V4G8HUZ","U3YUF8ZCH"],"text":"<@U0UHG4VP1|ry> archived the channel (w\/ 80 members)","type":"message","subtype":"channel_archive","ts":"1486508338.000325"}]